# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Security::Mgmt::V2017_08_01_preview
  module Models
    #
    # A custom alert rule.
    #
    class CustomAlertRule

      include MsRestAzure

      @@discriminatorMap = Hash.new
      @@discriminatorMap["ThresholdCustomAlertRule"] = "ThresholdCustomAlertRule"
      @@discriminatorMap["TimeWindowCustomAlertRule"] = "TimeWindowCustomAlertRule"
      @@discriminatorMap["AllowlistCustomAlertRule"] = "AllowlistCustomAlertRule"
      @@discriminatorMap["DenylistCustomAlertRule"] = "DenylistCustomAlertRule"
      @@discriminatorMap["ListCustomAlertRule"] = "ListCustomAlertRule"
      @@discriminatorMap["ConnectionToIpNotAllowed"] = "ConnectionToIpNotAllowed"
      @@discriminatorMap["LocalUserNotAllowed"] = "LocalUserNotAllowed"
      @@discriminatorMap["ProcessNotAllowed"] = "ProcessNotAllowed"
      @@discriminatorMap["ActiveConnectionsNotInAllowedRange"] = "ActiveConnectionsNotInAllowedRange"
      @@discriminatorMap["AmqpC2DMessagesNotInAllowedRange"] = "AmqpC2DMessagesNotInAllowedRange"
      @@discriminatorMap["MqttC2DMessagesNotInAllowedRange"] = "MqttC2DMessagesNotInAllowedRange"
      @@discriminatorMap["HttpC2DMessagesNotInAllowedRange"] = "HttpC2DMessagesNotInAllowedRange"
      @@discriminatorMap["AmqpC2DRejectedMessagesNotInAllowedRange"] = "AmqpC2DRejectedMessagesNotInAllowedRange"
      @@discriminatorMap["MqttC2DRejectedMessagesNotInAllowedRange"] = "MqttC2DRejectedMessagesNotInAllowedRange"
      @@discriminatorMap["HttpC2DRejectedMessagesNotInAllowedRange"] = "HttpC2DRejectedMessagesNotInAllowedRange"
      @@discriminatorMap["AmqpD2CMessagesNotInAllowedRange"] = "AmqpD2CMessagesNotInAllowedRange"
      @@discriminatorMap["MqttD2CMessagesNotInAllowedRange"] = "MqttD2CMessagesNotInAllowedRange"
      @@discriminatorMap["HttpD2CMessagesNotInAllowedRange"] = "HttpD2CMessagesNotInAllowedRange"
      @@discriminatorMap["DirectMethodInvokesNotInAllowedRange"] = "DirectMethodInvokesNotInAllowedRange"
      @@discriminatorMap["FailedLocalLoginsNotInAllowedRange"] = "FailedLocalLoginsNotInAllowedRange"
      @@discriminatorMap["FileUploadsNotInAllowedRange"] = "FileUploadsNotInAllowedRange"
      @@discriminatorMap["QueuePurgesNotInAllowedRange"] = "QueuePurgesNotInAllowedRange"
      @@discriminatorMap["TwinUpdatesNotInAllowedRange"] = "TwinUpdatesNotInAllowedRange"
      @@discriminatorMap["UnauthorizedOperationsNotInAllowedRange"] = "UnauthorizedOperationsNotInAllowedRange"

      def initialize
        @ruleType = "CustomAlertRule"
      end

      attr_accessor :ruleType

      # @return [String] The display name of the custom alert.
      attr_accessor :display_name

      # @return [String] The description of the custom alert.
      attr_accessor :description

      # @return [Boolean] Status of the custom alert.
      attr_accessor :is_enabled


      #
      # Mapper for CustomAlertRule class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'CustomAlertRule',
          type: {
            name: 'Composite',
            polymorphic_discriminator: 'ruleType',
            uber_parent: 'CustomAlertRule',
            class_name: 'CustomAlertRule',
            model_properties: {
              display_name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'displayName',
                type: {
                  name: 'String'
                }
              },
              description: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'description',
                type: {
                  name: 'String'
                }
              },
              is_enabled: {
                client_side_validation: true,
                required: true,
                serialized_name: 'isEnabled',
                type: {
                  name: 'Boolean'
                }
              }
            }
          }
        }
      end
    end
  end
end
