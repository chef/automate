rules:

  - id: naming-for-isDestroyed
    pattern: this.isDestroyed$.complete()
    message: "'isDestroyed$' should be 'isDestroyed'"
    languages: [ts]
    severity: ERROR


  - id: isDestroyed-needs-argument
    pattern: this.isDestroyed.next()
    message: must have a `true` argument
    fix: this.isDestroyed.next(true)
    languages: [ts]
    severity: ERROR

  - id: lifecycle-hook-not-used
    patterns:
    - pattern-either: 
      - pattern: ngOnInit() { }
      - pattern: ngOnDestroy() { }
      - pattern: ngOnChanges() { }
      - pattern: ngDoCheck() { }
      - pattern: ngAfterContentInit() { }
      - pattern: ngAfterContentChecked() { }
      - pattern: ngAfterViewInit() { }
      - pattern: ngAfterViewChecked() { }
    message: lifecycle hook is not used; should be removed
    languages: [ts]
    severity: ERROR

  - id: isDestroyed-used-but-not-triggered
    patterns:
    - pattern: $OBSERVABLE.pipe(...,takeUntil(this.isDestroyed),...).subscribe(...)
    - pattern-inside: |
        class $CLASS {
          ...
        }
    - pattern-not-inside: |
        class $CLASS {
          ...
          ngOnDestroy() {
            ...
          }
          ...
        }
    message: subscription never completes because isDestroyed never triggered from ngOnDestroy
    languages: [ts]
    severity: ERROR


  - id: isDestroyed-triggered-but-not-used
    patterns:
    - pattern: this.isDestroyed.next(true);
    - pattern-inside: |
        class $CLASS {
          ...
        }
    - pattern-not-inside: |
        class $CLASS {
          ...
          $FUNC(...) {
            ...
            $OBSERVABLE.pipe(...,takeUntil(this.isDestroyed),...).subscribe(...);
            ...
          }
          ...
        }
    message: subscription completion is not utilized with takeUntil(this.isDestroyed)
    metadata: {
      falseNegative: will not catch multiple subscriptions with takeUntil missing on some
      }
    languages: [ts]
    severity: ERROR


  - id: ngOnDestroy-missing-next
    patterns:
    - pattern: this.isDestroyed.complete(...)
    - pattern-inside: |
        class $CLASS {
          ...
          ngOnDestroy() {
            ...
            this.isDestroyed.complete(...);
            ...
          }
        ...
        }
    - pattern-not-inside: |
        class $CLASS {
          ...
          ngOnDestroy() {
            ...
            this.isDestroyed.next(...);
            this.isDestroyed.complete(...);
            ...
          }
          ...
        }
    message: ngOnDestroy missing this.isDestroyed.next()
    languages: [ts]
    severity: ERROR


  - id: ngOnDestroy-missing-complete
    patterns:
    - pattern: this.isDestroyed.next(...)
    - pattern-inside: |
        class $CLASS {
          ...
          ngOnDestroy() {
            ...
            this.isDestroyed.next(...);
            ...
          }
        ...
        }
    - pattern-not-inside: |
        class $CLASS {
          ...
          ngOnDestroy() {
            ...
            this.isDestroyed.next(...);
            this.isDestroyed.complete(...);
            ...
          }
          ...
        }
    message: ngOnDestroy missing this.isDestroyed.complete()
    languages: [ts]
    severity: ERROR

  - id: onDestroy-not-implemented-in-class
    patterns:
    - pattern: this.isDestroyed.complete()
    - pattern-not-inside: class $CLASS implements OnDestroy { ... }
    message: subscriptions never complete because class does not implement OnDestroy Lifecycle hook
    languages: [ts]
    severity: ERROR

  # TODO: cleanup results of this rule before activating it
  # - id: subscription-lifecycle-not-managed
  #   patterns:
  #   - pattern: $EXPR.subscribe(...)
  #   - pattern-not-inside: $EXPR2.pipe(..., takeUntil(...),...).subscribe(...)
  #   - pattern-not-inside: $EXPR2.pipe(..., take(...),...).subscribe(...)
  #   message: subscription lifecycle not managed: typically needs takeUntil(this.isDestroeyd)
  #   languages: [ts]
  #   severity: ERROR
