// WARNING WARNING WARNING WARNING WARNING
//
// The code in this package is a copy of code in the chef/license
// library. chef/license is still proprietary and thus cannot be
// included in full as a dependency. Please take care that any changes
// to this file are compatible with the chef/license library.
//
// WARNING WARNING WARNING WARNING WARNING
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.0
// source: lib/license/license.proto

package license

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type License struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // Unique ID for this license; defaults to auto-generated
	Version           string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                      // License version
	Type              string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                            // commercial, eval, developer, partner
	Generator         string                 `protobuf:"bytes,20,opt,name=generator,proto3" json:"generator,omitempty"`                 // chef/license, chef/license-generation-service
	KeySha256         string                 `protobuf:"bytes,6,opt,name=key_sha256,json=keySha256,proto3" json:"key_sha256,omitempty"` // public key checksum
	GenerationDate    *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=generation_date,json=generationDate,proto3" json:"generation_date,omitempty"`
	Customer          string                 `protobuf:"bytes,24,opt,name=customer,proto3" json:"customer,omitempty"`
	CustomerId        string                 `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerIdVersion string                 `protobuf:"bytes,25,opt,name=customer_id_version,json=customerIdVersion,proto3" json:"customer_id_version,omitempty"`
	Entitlements      []*Entitlement         `protobuf:"bytes,5,rep,name=entitlements,proto3" json:"entitlements,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *License) Reset() {
	*x = License{}
	mi := &file_lib_license_license_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_lib_license_license_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_lib_license_license_proto_rawDescGZIP(), []int{0}
}

func (x *License) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *License) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *License) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *License) GetGenerator() string {
	if x != nil {
		return x.Generator
	}
	return ""
}

func (x *License) GetKeySha256() string {
	if x != nil {
		return x.KeySha256
	}
	return ""
}

func (x *License) GetGenerationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.GenerationDate
	}
	return nil
}

func (x *License) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *License) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *License) GetCustomerIdVersion() string {
	if x != nil {
		return x.CustomerIdVersion
	}
	return ""
}

func (x *License) GetEntitlements() []*Entitlement {
	if x != nil {
		return x.Entitlements
	}
	return nil
}

type Entitlement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // ReticulateSplines
	Measure       string                 `protobuf:"bytes,2,opt,name=measure,proto3" json:"measure,omitempty"` // nodes
	Limit         int64                  `protobuf:"zigzag64,3,opt,name=limit,proto3" json:"limit,omitempty"`  // 10
	Start         *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=start,proto3" json:"start,omitempty"`    // date the entitlement becomes active
	End           *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=end,proto3" json:"end,omitempty"`        // last date the entitlement is active
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entitlement) Reset() {
	*x = Entitlement{}
	mi := &file_lib_license_license_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entitlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entitlement) ProtoMessage() {}

func (x *Entitlement) ProtoReflect() protoreflect.Message {
	mi := &file_lib_license_license_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entitlement.ProtoReflect.Descriptor instead.
func (*Entitlement) Descriptor() ([]byte, []int) {
	return file_lib_license_license_proto_rawDescGZIP(), []int{1}
}

func (x *Entitlement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Entitlement) GetMeasure() string {
	if x != nil {
		return x.Measure
	}
	return ""
}

func (x *Entitlement) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Entitlement) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Entitlement) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

var File_lib_license_license_proto protoreflect.FileDescriptor

const file_lib_license_license_proto_rawDesc = "" +
	"\n" +
	"\x19lib/license/license.proto\x12\alicense\x1a\x1fgoogle/protobuf/timestamp.proto\"\xf0\x02\n" +
	"\aLicense\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x1c\n" +
	"\tgenerator\x18\x14 \x01(\tR\tgenerator\x12\x1d\n" +
	"\n" +
	"key_sha256\x18\x06 \x01(\tR\tkeySha256\x12C\n" +
	"\x0fgeneration_date\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\x0egenerationDate\x12\x1a\n" +
	"\bcustomer\x18\x18 \x01(\tR\bcustomer\x12\x1f\n" +
	"\vcustomer_id\x18\x04 \x01(\tR\n" +
	"customerId\x12.\n" +
	"\x13customer_id_version\x18\x19 \x01(\tR\x11customerIdVersion\x128\n" +
	"\fentitlements\x18\x05 \x03(\v2\x14.license.EntitlementR\fentitlements\"\xb1\x01\n" +
	"\vEntitlement\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\ameasure\x18\x02 \x01(\tR\ameasure\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x12R\x05limit\x120\n" +
	"\x05start\x18\x16 \x01(\v2\x1a.google.protobuf.TimestampR\x05start\x12,\n" +
	"\x03end\x18\x17 \x01(\v2\x1a.google.protobuf.TimestampR\x03endB&Z$github.com/chef/automate/lib/licenseb\x06proto3"

var (
	file_lib_license_license_proto_rawDescOnce sync.Once
	file_lib_license_license_proto_rawDescData []byte
)

func file_lib_license_license_proto_rawDescGZIP() []byte {
	file_lib_license_license_proto_rawDescOnce.Do(func() {
		file_lib_license_license_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_lib_license_license_proto_rawDesc), len(file_lib_license_license_proto_rawDesc)))
	})
	return file_lib_license_license_proto_rawDescData
}

var file_lib_license_license_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_lib_license_license_proto_goTypes = []any{
	(*License)(nil),               // 0: license.License
	(*Entitlement)(nil),           // 1: license.Entitlement
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_lib_license_license_proto_depIdxs = []int32{
	2, // 0: license.License.generation_date:type_name -> google.protobuf.Timestamp
	1, // 1: license.License.entitlements:type_name -> license.Entitlement
	2, // 2: license.Entitlement.start:type_name -> google.protobuf.Timestamp
	2, // 3: license.Entitlement.end:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_lib_license_license_proto_init() }
func file_lib_license_license_proto_init() {
	if File_lib_license_license_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_lib_license_license_proto_rawDesc), len(file_lib_license_license_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lib_license_license_proto_goTypes,
		DependencyIndexes: file_lib_license_license_proto_depIdxs,
		MessageInfos:      file_lib_license_license_proto_msgTypes,
	}.Build()
	File_lib_license_license_proto = out.File
	file_lib_license_license_proto_goTypes = nil
	file_lib_license_license_proto_depIdxs = nil
}
