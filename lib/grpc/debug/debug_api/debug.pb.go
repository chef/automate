// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lib/grpc/debug/debug_api/debug.proto

package debug_api

import (
	context "context"
	fmt "fmt"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SetLogLevelRequest_Level int32

const (
	SetLogLevelRequest_UNKNOWN SetLogLevelRequest_Level = 0
	SetLogLevelRequest_DEBUG   SetLogLevelRequest_Level = 1
	SetLogLevelRequest_INFO    SetLogLevelRequest_Level = 2
	SetLogLevelRequest_WARN    SetLogLevelRequest_Level = 3
	SetLogLevelRequest_FATAL   SetLogLevelRequest_Level = 4
)

var SetLogLevelRequest_Level_name = map[int32]string{
	0: "UNKNOWN",
	1: "DEBUG",
	2: "INFO",
	3: "WARN",
	4: "FATAL",
}

var SetLogLevelRequest_Level_value = map[string]int32{
	"UNKNOWN": 0,
	"DEBUG":   1,
	"INFO":    2,
	"WARN":    3,
	"FATAL":   4,
}

func (x SetLogLevelRequest_Level) String() string {
	return proto.EnumName(SetLogLevelRequest_Level_name, int32(x))
}

func (SetLogLevelRequest_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f3eabcbc6d05e07, []int{3, 0}
}

type Chunk struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f3eabcbc6d05e07, []int{0}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type TraceRequest struct {
	Duration             *duration.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TraceRequest) Reset()         { *m = TraceRequest{} }
func (m *TraceRequest) String() string { return proto.CompactTextString(m) }
func (*TraceRequest) ProtoMessage()    {}
func (*TraceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f3eabcbc6d05e07, []int{1}
}

func (m *TraceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceRequest.Unmarshal(m, b)
}
func (m *TraceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceRequest.Marshal(b, m, deterministic)
}
func (m *TraceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceRequest.Merge(m, src)
}
func (m *TraceRequest) XXX_Size() int {
	return xxx_messageInfo_TraceRequest.Size(m)
}
func (m *TraceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TraceRequest proto.InternalMessageInfo

func (m *TraceRequest) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type ProfileRequest struct {
	ProfileName          string             `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	SampleRate           int64              `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	Duration             *duration.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ProfileRequest) Reset()         { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string { return proto.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()    {}
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f3eabcbc6d05e07, []int{2}
}

func (m *ProfileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileRequest.Unmarshal(m, b)
}
func (m *ProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileRequest.Marshal(b, m, deterministic)
}
func (m *ProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileRequest.Merge(m, src)
}
func (m *ProfileRequest) XXX_Size() int {
	return xxx_messageInfo_ProfileRequest.Size(m)
}
func (m *ProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileRequest proto.InternalMessageInfo

func (m *ProfileRequest) GetProfileName() string {
	if m != nil {
		return m.ProfileName
	}
	return ""
}

func (m *ProfileRequest) GetSampleRate() int64 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *ProfileRequest) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type SetLogLevelRequest struct {
	Level                SetLogLevelRequest_Level `protobuf:"varint,1,opt,name=level,proto3,enum=chef.automate.api.debug.SetLogLevelRequest_Level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SetLogLevelRequest) Reset()         { *m = SetLogLevelRequest{} }
func (m *SetLogLevelRequest) String() string { return proto.CompactTextString(m) }
func (*SetLogLevelRequest) ProtoMessage()    {}
func (*SetLogLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f3eabcbc6d05e07, []int{3}
}

func (m *SetLogLevelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetLogLevelRequest.Unmarshal(m, b)
}
func (m *SetLogLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetLogLevelRequest.Marshal(b, m, deterministic)
}
func (m *SetLogLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLogLevelRequest.Merge(m, src)
}
func (m *SetLogLevelRequest) XXX_Size() int {
	return xxx_messageInfo_SetLogLevelRequest.Size(m)
}
func (m *SetLogLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLogLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetLogLevelRequest proto.InternalMessageInfo

func (m *SetLogLevelRequest) GetLevel() SetLogLevelRequest_Level {
	if m != nil {
		return m.Level
	}
	return SetLogLevelRequest_UNKNOWN
}

type SetLogLevelResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetLogLevelResponse) Reset()         { *m = SetLogLevelResponse{} }
func (m *SetLogLevelResponse) String() string { return proto.CompactTextString(m) }
func (*SetLogLevelResponse) ProtoMessage()    {}
func (*SetLogLevelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f3eabcbc6d05e07, []int{4}
}

func (m *SetLogLevelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetLogLevelResponse.Unmarshal(m, b)
}
func (m *SetLogLevelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetLogLevelResponse.Marshal(b, m, deterministic)
}
func (m *SetLogLevelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLogLevelResponse.Merge(m, src)
}
func (m *SetLogLevelResponse) XXX_Size() int {
	return xxx_messageInfo_SetLogLevelResponse.Size(m)
}
func (m *SetLogLevelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLogLevelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetLogLevelResponse proto.InternalMessageInfo

type VersionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionRequest) Reset()         { *m = VersionRequest{} }
func (m *VersionRequest) String() string { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()    {}
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f3eabcbc6d05e07, []int{5}
}

func (m *VersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionRequest.Unmarshal(m, b)
}
func (m *VersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionRequest.Marshal(b, m, deterministic)
}
func (m *VersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRequest.Merge(m, src)
}
func (m *VersionRequest) XXX_Size() int {
	return xxx_messageInfo_VersionRequest.Size(m)
}
func (m *VersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRequest proto.InternalMessageInfo

type VersionResponse struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	GitRef               string   `protobuf:"bytes,2,opt,name=git_ref,json=gitRef,proto3" json:"git_ref,omitempty"`
	GoVersion            string   `protobuf:"bytes,3,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f3eabcbc6d05e07, []int{6}
}

func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionResponse) GetGitRef() string {
	if m != nil {
		return m.GitRef
	}
	return ""
}

func (m *VersionResponse) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func init() {
	proto.RegisterEnum("chef.automate.api.debug.SetLogLevelRequest_Level", SetLogLevelRequest_Level_name, SetLogLevelRequest_Level_value)
	proto.RegisterType((*Chunk)(nil), "chef.automate.api.debug.Chunk")
	proto.RegisterType((*TraceRequest)(nil), "chef.automate.api.debug.TraceRequest")
	proto.RegisterType((*ProfileRequest)(nil), "chef.automate.api.debug.ProfileRequest")
	proto.RegisterType((*SetLogLevelRequest)(nil), "chef.automate.api.debug.SetLogLevelRequest")
	proto.RegisterType((*SetLogLevelResponse)(nil), "chef.automate.api.debug.SetLogLevelResponse")
	proto.RegisterType((*VersionRequest)(nil), "chef.automate.api.debug.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "chef.automate.api.debug.VersionResponse")
}

func init() {
	proto.RegisterFile("lib/grpc/debug/debug_api/debug.proto", fileDescriptor_4f3eabcbc6d05e07)
}

var fileDescriptor_4f3eabcbc6d05e07 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x9b, 0xba, 0x69, 0x26, 0x55, 0x89, 0x96, 0x9f, 0xba, 0x86, 0x96, 0x62, 0x81, 0xa8,
	0x04, 0xb5, 0x69, 0x2b, 0x2e, 0x39, 0x20, 0x5a, 0xfa, 0x23, 0x44, 0x95, 0x22, 0xd3, 0x1f, 0x89,
	0x4b, 0xd8, 0xb8, 0x93, 0xad, 0x85, 0xed, 0x35, 0xf6, 0xba, 0x52, 0xaf, 0x3d, 0x96, 0x67, 0xe0,
	0x31, 0xf2, 0x00, 0xdc, 0x38, 0xf1, 0x4c, 0xc8, 0xbb, 0x76, 0xd4, 0x50, 0x19, 0x02, 0x97, 0x68,
	0x67, 0xe6, 0x9b, 0x9f, 0x6f, 0xe6, 0x8b, 0xe1, 0x71, 0xe0, 0xf7, 0x1c, 0x96, 0xc4, 0x9e, 0x73,
	0x8a, 0xbd, 0x8c, 0xa9, 0xdf, 0x2e, 0x8d, 0x7d, 0xf5, 0xb2, 0xe3, 0x84, 0x0b, 0x4e, 0xe6, 0xbd,
	0x33, 0xec, 0xdb, 0x34, 0x13, 0x3c, 0xa4, 0x02, 0x6d, 0x1a, 0xfb, 0xb6, 0x0c, 0x9b, 0x4b, 0x8c,
	0x73, 0x16, 0xa0, 0x23, 0x61, 0xbd, 0xac, 0xef, 0x9c, 0x66, 0x09, 0x15, 0x3e, 0x8f, 0x54, 0xa2,
	0xf9, 0xda, 0xe3, 0x61, 0xcc, 0x23, 0x8c, 0x44, 0xea, 0x94, 0xe9, 0xab, 0xb2, 0x9d, 0x8c, 0x7b,
	0xab, 0x0c, 0xa3, 0xd5, 0x98, 0x07, 0xbe, 0x77, 0xe1, 0xe4, 0x4d, 0x69, 0x14, 0x71, 0x21, 0x0b,
	0xa4, 0xff, 0x51, 0xc1, 0xa7, 0xe1, 0xcd, 0x0a, 0xd6, 0x22, 0xe8, 0x6f, 0xce, 0xb2, 0xe8, 0x33,
	0xb9, 0x03, 0xba, 0x97, 0x3f, 0x0c, 0x6d, 0x59, 0x5b, 0x99, 0x75, 0x95, 0x61, 0xed, 0xc0, 0xec,
	0x61, 0x42, 0x3d, 0x74, 0xf1, 0x4b, 0x86, 0xa9, 0x20, 0x2f, 0x61, 0xa6, 0x24, 0x21, 0x81, 0xcd,
	0xf5, 0x05, 0x5b, 0xb1, 0xb4, 0x4b, 0x96, 0xf6, 0x76, 0x01, 0x70, 0x87, 0x50, 0xeb, 0xab, 0x06,
	0x73, 0xef, 0x13, 0xde, 0xf7, 0x83, 0x61, 0xa5, 0x47, 0x30, 0x1b, 0x2b, 0x4f, 0x37, 0xa2, 0x21,
	0xca, 0x6a, 0x0d, 0xb7, 0x59, 0xf8, 0x3a, 0x34, 0x44, 0xf2, 0x10, 0x9a, 0x29, 0x0d, 0xe3, 0x00,
	0xbb, 0x09, 0x15, 0x68, 0x4c, 0x2e, 0x6b, 0x2b, 0x35, 0x17, 0x94, 0xcb, 0xa5, 0x02, 0x47, 0xa6,
	0xa9, 0x8d, 0x3f, 0xcd, 0x37, 0x0d, 0xc8, 0x07, 0x14, 0xfb, 0x9c, 0xed, 0xe3, 0x39, 0x06, 0xe5,
	0x44, 0x7b, 0xa0, 0x07, 0xb9, 0x2d, 0x47, 0x99, 0x5b, 0x5f, 0xb3, 0x2b, 0xee, 0x6a, 0xdf, 0xcc,
	0xb5, 0x95, 0xa1, 0xf2, 0xad, 0x57, 0xa0, 0x4b, 0x9b, 0x34, 0xa1, 0x7e, 0xd4, 0x79, 0xd7, 0x39,
	0x38, 0xe9, 0xb4, 0x26, 0x48, 0x03, 0xf4, 0xed, 0x9d, 0xad, 0xa3, 0xbd, 0x96, 0x46, 0x66, 0x60,
	0xea, 0x6d, 0x67, 0xf7, 0xa0, 0x35, 0x99, 0xbf, 0x4e, 0x36, 0xdd, 0x4e, 0xab, 0x96, 0x87, 0x77,
	0x37, 0x0f, 0x37, 0xf7, 0x5b, 0x53, 0xd6, 0x5d, 0xb8, 0x3d, 0xd2, 0x22, 0x8d, 0x79, 0x94, 0xa2,
	0xd5, 0x82, 0xb9, 0x63, 0x4c, 0xd2, 0x9c, 0x8b, 0xea, 0x6a, 0x79, 0x70, 0x6b, 0xe8, 0x51, 0x20,
	0x62, 0x40, 0xfd, 0x5c, 0xb9, 0x8a, 0x8d, 0x96, 0x26, 0x99, 0x87, 0x3a, 0xf3, 0x45, 0x37, 0xc1,
	0xbe, 0xdc, 0x64, 0xc3, 0x9d, 0x66, 0xbe, 0x70, 0xb1, 0x4f, 0x16, 0x01, 0x18, 0xef, 0x96, 0x59,
	0x35, 0x19, 0x6b, 0x30, 0x5e, 0x54, 0x5e, 0xff, 0x31, 0x05, 0xfa, 0x76, 0xce, 0x9b, 0xb8, 0xa0,
	0x4b, 0x31, 0x90, 0x27, 0x95, 0xab, 0xb9, 0x2e, 0x16, 0x73, 0xa9, 0x12, 0x26, 0x25, 0x67, 0x4d,
	0xbc, 0xd0, 0xc8, 0x31, 0xd4, 0x0b, 0x61, 0x90, 0xa7, 0x95, 0xf0, 0x51, 0xe9, 0x8c, 0x55, 0xf7,
	0xa7, 0x06, 0xcd, 0x6b, 0x4b, 0x24, 0xcf, 0xfe, 0xe1, 0x9a, 0xe6, 0xf3, 0xf1, 0xc0, 0xc5, 0x5d,
	0x4e, 0x2f, 0x07, 0x86, 0x09, 0x46, 0x7a, 0x91, 0x0a, 0x0c, 0xdb, 0x29, 0x26, 0xe7, 0xbe, 0x87,
	0xed, 0x80, 0xb3, 0xae, 0x94, 0xc3, 0xe5, 0xc0, 0xd0, 0x49, 0x2d, 0x45, 0x71, 0x35, 0x30, 0x16,
	0x60, 0xfe, 0x26, 0x4c, 0x56, 0xbb, 0x1a, 0x18, 0x0f, 0x88, 0x39, 0x1a, 0x2c, 0x3b, 0xb5, 0x53,
	0x14, 0xe4, 0xbb, 0x06, 0xb0, 0x87, 0xa2, 0xb8, 0xca, 0x1f, 0x96, 0x35, 0xaa, 0x11, 0x73, 0xe5,
	0xef, 0xc0, 0x82, 0xc7, 0xa7, 0xcb, 0x81, 0x61, 0xc0, 0xbd, 0xdf, 0x06, 0x2c, 0x74, 0xa1, 0x58,
	0x30, 0xc9, 0xa2, 0x12, 0x74, 0x35, 0x30, 0xee, 0x93, 0x85, 0xd1, 0x58, 0xd1, 0xa5, 0xcd, 0x50,
	0x6c, 0x6d, 0x7c, 0x5c, 0x63, 0xbe, 0x38, 0xcb, 0x7a, 0xb6, 0xc7, 0x43, 0x27, 0x9f, 0x6b, 0xf8,
	0xd5, 0x72, 0xaa, 0x3e, 0xb5, 0xbd, 0x69, 0xf9, 0x57, 0xde, 0xf8, 0x15, 0x00, 0x00, 0xff, 0xff,
	0x68, 0xdf, 0xb2, 0xda, 0x8d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DebugClient is the client API for Debug service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugClient interface {
	Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (Debug_TraceClient, error)
	Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (Debug_ProfileClient, error)
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
	GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type debugClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugClient(cc grpc.ClientConnInterface) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (Debug_TraceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Debug_serviceDesc.Streams[0], "/chef.automate.api.debug.Debug/Trace", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugTraceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debug_TraceClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type debugTraceClient struct {
	grpc.ClientStream
}

func (x *debugTraceClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *debugClient) Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (Debug_ProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Debug_serviceDesc.Streams[1], "/chef.automate.api.debug.Debug/Profile", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debug_ProfileClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type debugProfileClient struct {
	grpc.ClientStream
}

func (x *debugProfileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *debugClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.debug.Debug/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.debug.Debug/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugServer is the server API for Debug service.
type DebugServer interface {
	Trace(*TraceRequest, Debug_TraceServer) error
	Profile(*ProfileRequest, Debug_ProfileServer) error
	SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error)
	GetVersion(context.Context, *VersionRequest) (*VersionResponse, error)
}

// UnimplementedDebugServer can be embedded to have forward compatible implementations.
type UnimplementedDebugServer struct {
}

func (*UnimplementedDebugServer) Trace(req *TraceRequest, srv Debug_TraceServer) error {
	return status.Errorf(codes.Unimplemented, "method Trace not implemented")
}
func (*UnimplementedDebugServer) Profile(req *ProfileRequest, srv Debug_ProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (*UnimplementedDebugServer) SetLogLevel(ctx context.Context, req *SetLogLevelRequest) (*SetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (*UnimplementedDebugServer) GetVersion(ctx context.Context, req *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_Trace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TraceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServer).Trace(m, &debugTraceServer{stream})
}

type Debug_TraceServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type debugTraceServer struct {
	grpc.ServerStream
}

func (x *debugTraceServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Debug_Profile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServer).Profile(m, &debugProfileServer{stream})
}

type Debug_ProfileServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type debugProfileServer struct {
	grpc.ServerStream
}

func (x *debugProfileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Debug_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.debug.Debug/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.debug.Debug/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).GetVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.debug.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLogLevel",
			Handler:    _Debug_SetLogLevel_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Debug_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Trace",
			Handler:       _Debug_Trace_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Profile",
			Handler:       _Debug_Profile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lib/grpc/debug/debug_api/debug.proto",
}
