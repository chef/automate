# This is a Chef Automate AWS HA mode configuration file. You can run
# 'chef-automate deploy' with this config file and it should
# successfully create a new Chef Automate HA instances with default settings.

[architecture.aws]
## === INPUT NEEDED ===
# Eg.: ssh_user = "ubuntu"
ssh_user = ""

# custom ssh group name, it will be defaulted to ssh_user
# Eg.: ssh_group_name = "ubuntu"
ssh_group_name = ""

# custom ssh port no to connect instances, default will be 22
# Eg.: ssh_port = "22"
ssh_port = ""

# Private SSH key file path, which has access to all the instances.
# Eg.: ssh_key_file = "~/.ssh/A2HA.pem"
ssh_key_file = ""

# Eg.: backup_config = "efs" or "s3"
backup_config = "s3"

#    Note: 1. To create new bucket, make sure to give a unique name
#          2. User can also add existing bucket 
#
# If s3 is selected for backup_config,
#     uncomment and add the value for following 's3_bucketName' attribute

# s3_bucketName = ""
## === ===

secrets_key_file = "/hab/a2_deploy_workspace/secrets.key"
secrets_store_file = "/hab/a2_deploy_workspace/secrets.json"
architecture = "aws"
workspace_path = "/hab/a2_deploy_workspace"

# DON'T MODIFY THE BELOW LINE (backup_mount)
backup_mount = "/mnt/automate_backups"


[automate.config]
## === INPUT NEEDED ===

# Password for Automate UI for 'admin' user.
admin_password = ""

# Automate Load Balancer FQDN eg.: "chefautomate.example.com"
fqdn = ""

# No. of Automate Frontend Machine or VM eg.: instance_count = "2"
instance_count = ""

## === ===

#Deprecated Config - automate_setup_type is not supported
# automate_setup_type = "automate"

# teams_port = ""
config_file = "configs/automate.toml"

# Set enable_custom_certs = true to provide custom certificates during deployment
enable_custom_certs = false
# Add Automate load balancer root-ca and keys
# root_ca = ""
# private_key = ""
# public_key = ""


[chef_server.config]
## === INPUT NEEDED ===

# No. of Chef Server Frontend Machine or VM eg.: instance_count = "2"
instance_count = ""

# Set enable_custom_certs = true to provide custom certificates during deployment
enable_custom_certs = false
# Add Chef Server load balancer root-ca and keys
# private_key = ""
# public_key = ""

## === ===


[opensearch.config]
## === INPUT NEEDED ===

# No. of OpenSearch DB Backend Machine or VM eg.: instance_count = "3"
instance_count = ""

# Set enable_custom_certs = true to provide custom certificates during deployment
enable_custom_certs = false
# Add OpenSearch load balancer root-ca and keys
# root_ca = ""
# admin_key = ""
# admin_cert = ""
# private_key = ""
# public_key = ""

## === ===

[postgresql.config]
## === INPUT NEEDED ===

# No. of Postgresql DB Backend Machine or VM eg.: instance_count = "3"
instance_count = ""

# Set enable_custom_certs = true to provide custom certificates during deployment
enable_custom_certs = false
# Add Postgresql load balancer root-ca and keys
# root_ca = ""
# private_key = ""
# public_key = ""

## === ===


# ======================================================

[aws.config]
# ============== AWS network Config ============================
## === INPUT NEEDED ===

# Eg.: profile = "default"
profile = ""

# Eg.: region = "us-east-1"
region = ""

# Provide vpcid and cidr block
# Eg.: aws_vpc_id = "vpc12318h"
aws_vpc_id  = ""

# Eg.: aws_cidr_block_addr = "172.31.64.0"
aws_cidr_block_addr  = ""

# Eg.: private_custom_subnets = ["subnet-e556d512", "subnet-e556d513", "subnet-e556d514"]
private_custom_subnets = []

# Eg.: public_custom_subnets = ["subnet-p556d512", "subnet-p556d513", "subnet-p556d514"]
public_custom_subnets = []

# ssh key pair name in AWS to access instances
# eg: ssh_key_pair_name = "A2HA"
ssh_key_pair_name = ""

## === ===

# ============== Managed Services ======================

## === INPUT NEEDED ===
# in case your are trying to deploy with aws managed 
# RDS, and openseach, then make setup_managed_services = true, 
# and modify other managed services settings.
setup_managed_services = false

## === ===

# ======================================================

# ============== EC2 Instance Config ===================

## === INPUT NEEDED ===

# This AMI should be from the Same Region which we selected above.
# eg: ami_id = "ami-08d4ac5b634553e16" # This ami is of Ubuntu 20.04 in us-east-1
ami_id = ""

# eg: delete_on_termination = true or false
delete_on_termination = true

# eg: automate_server_instance_type = "t3.medium"
automate_server_instance_type = ""

# eg: chef_server_instance_type = "t3.medium"
chef_server_instance_type = ""

# eg: opensearch_server_instance_type = "m5.large"
opensearch_server_instance_type = ""

# eg: postgresql_server_instance_type = "t3.medium"
postgresql_server_instance_type = ""

# eg: automate_lb_certificate_arn = "arn:aws:acm...."
automate_lb_certificate_arn = ""

# eg: chef_server_lb_certificate_arn = "arn:aws:acm...."
chef_server_lb_certificate_arn = ""

# eg: automate_ebs_volume_iops = "100"
automate_ebs_volume_iops = ""

# eg: automate_ebs_volume_size = "50"
automate_ebs_volume_size = ""

# eg: automate_ebs_volume_type = "gp3"
automate_ebs_volume_type = ""

# eg: chef_ebs_volume_iops = "100"
chef_ebs_volume_iops = ""

# eg: chef_ebs_volume_size = "50"
chef_ebs_volume_size = ""

# eg: chef_ebs_volume_type = "gp3"
chef_ebs_volume_type = ""

# eg: opensearch_ebs_volume_iops = "100"
opensearch_ebs_volume_iops = ""

# eg: opensearch_ebs_volume_size = "50"
opensearch_ebs_volume_size = ""

# eg: opensearch_ebs_volume_type = "gp3"
opensearch_ebs_volume_type = ""

# eg: postgresql_ebs_volume_iops = "100"
postgresql_ebs_volume_iops = ""

# eg: postgresql_ebs_volume_size = "50"
postgresql_ebs_volume_size = ""

# eg: postgresql_ebs_volume_type = "gp3"
postgresql_ebs_volume_type = ""

## === ===

# Enabale/Disable load balancer logs
# eg lb_access_logs = "false"
lb_access_logs = "false"

# ======================================================

# ============== EC2 Instance Tags =====================
X-Contact = ""
X-Dept = ""
X-Project = ""
# ======================================================
