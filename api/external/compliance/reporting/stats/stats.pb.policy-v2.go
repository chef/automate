// Code generated by protoc-gen-policy. DO NOT EDIT.
// source: api/external/compliance/reporting/stats/stats.proto

package stats

import policyv2 "github.com/chef/automate/components/automate-gateway/authz/policy_v2"

func init() {
	policyv2.MapMethodTo("/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadSummary", "compliance:reporting:stats:summary", "compliance:reportSummary:get", "POST", "/compliance/reporting/stats/summary", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*Query); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "type":
					return m.Type
				case "sort":
					return m.Sort
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadTrend", "compliance:reporting:stats:trend", "compliance:reportTrend:get", "POST", "/compliance/reporting/stats/trend", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*Query); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "type":
					return m.Type
				case "sort":
					return m.Sort
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadProfiles", "compliance:reporting:stats:profiles", "compliance:reportProfiles:get", "POST", "/compliance/reporting/stats/profiles", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*Query); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "type":
					return m.Type
				case "sort":
					return m.Sort
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadFailures", "compliance:reporting:stats:failures", "compliance:reportFailures:get", "POST", "/compliance/reporting/stats/failures", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*Query); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "type":
					return m.Type
				case "sort":
					return m.Sort
				default:
					return ""
				}
			})
		}
		return ""
	})
}
