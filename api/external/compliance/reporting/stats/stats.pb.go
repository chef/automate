// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: external/compliance/reporting/stats/stats.proto

package stats

import (
	context "context"
	_ "github.com/chef/automate/api/external/annotations/iam"
	reporting "github.com/chef/automate/api/external/compliance/reporting"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Sort the results in ascending or descending order.
type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

// Enum value maps for Query_OrderType.
var (
	Query_OrderType_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Query_OrderType_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Query_OrderType) Enum() *Query_OrderType {
	p := new(Query_OrderType)
	*p = x
	return p
}

func (x Query_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_external_compliance_reporting_stats_stats_proto_enumTypes[0].Descriptor()
}

func (Query_OrderType) Type() protoreflect.EnumType {
	return &file_external_compliance_reporting_stats_stats_proto_enumTypes[0]
}

func (x Query_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_OrderType.Descriptor instead.
func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{2, 0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{0}
}

type ListFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of values to filter on for the given type. We 'OR' between these fields.
	Values []string `protobuf:"bytes,20,rep,name=values,proto3" json:"values,omitempty"`
	// The field to filter on.
	Type string `protobuf:"bytes,21,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListFilter) Reset() {
	*x = ListFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilter) ProtoMessage() {}

func (x *ListFilter) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilter.ProtoReflect.Descriptor instead.
func (*ListFilter) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{1}
}

func (x *ListFilter) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ListFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier, such as a profile ID.
	Id string `protobuf:"bytes,17,opt,name=id,proto3" json:"id,omitempty"`
	// Type of data being requested, used for ReadTrend and ReadSummary.
	Type string `protobuf:"bytes,19,opt,name=type,proto3" json:"type,omitempty"`
	// The number of results to return (used when pagination is not supported).
	Size int32 `protobuf:"varint,18,opt,name=size,proto3" json:"size,omitempty"`
	// The interval to use for ReadTrend results, in integer seconds. Default of one hour, 3600.
	Interval int32 `protobuf:"varint,25,opt,name=interval,proto3" json:"interval,omitempty"`
	// Filters applied to the results.
	Filters []*ListFilter   `protobuf:"bytes,20,rep,name=filters,proto3" json:"filters,omitempty"`
	Order   Query_OrderType `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.api.compliance.reporting.stats.v1.Query_OrderType" json:"order,omitempty"`
	// Sort the list of results by a field.
	Sort string `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty"`
	// The offset for paginating requests. An offset defines a place in the results in order to fetch the next page of the results.
	Page int32 `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`
	// The number of results on each paginated request page.
	PerPage int32 `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{2}
}

func (x *Query) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Query) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Query) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Query) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *Query) GetFilters() []*ListFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Query) GetOrder() Query_OrderType {
	if x != nil {
		return x.Order
	}
	return Query_ASC
}

func (x *Query) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *Query) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Query) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Intentionally blank.
	ControlsSummary *ControlsSummary `protobuf:"bytes,1,opt,name=controls_summary,json=controlsSummary,proto3" json:"controls_summary,omitempty"`
	// Intentionally blank.
	NodeSummary *NodeSummary `protobuf:"bytes,2,opt,name=node_summary,json=nodeSummary,proto3" json:"node_summary,omitempty"`
	// Intentionally blank.
	ReportSummary *ReportSummary `protobuf:"bytes,3,opt,name=report_summary,json=reportSummary,proto3" json:"report_summary,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{3}
}

func (x *Summary) GetControlsSummary() *ControlsSummary {
	if x != nil {
		return x.ControlsSummary
	}
	return nil
}

func (x *Summary) GetNodeSummary() *NodeSummary {
	if x != nil {
		return x.NodeSummary
	}
	return nil
}

func (x *Summary) GetReportSummary() *ReportSummary {
	if x != nil {
		return x.ReportSummary
	}
	return nil
}

// Statistics for the controls executed in the compliance reports.
type ControlsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of failed controls in the reports.
	Failures int32 `protobuf:"varint,1,opt,name=failures,proto3" json:"failures,omitempty"`
	// The total number of failed controls with an impact between 0.4 and 0.7.
	Majors int32 `protobuf:"varint,2,opt,name=majors,proto3" json:"majors,omitempty"`
	// The total number of failed controls with an impact of 0.3 or less.
	Minors int32 `protobuf:"varint,3,opt,name=minors,proto3" json:"minors,omitempty"`
	// The total number of failed controls with an impact of 0.7 or higher.
	Criticals int32 `protobuf:"varint,4,opt,name=criticals,proto3" json:"criticals,omitempty"`
	// The total number of passed controls in the reports.
	Passed int32 `protobuf:"varint,5,opt,name=passed,proto3" json:"passed,omitempty"`
	// The total number of skipped controls in the reports.
	Skipped int32 `protobuf:"varint,6,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// The total number of waived controls in the reports.
	Waived int32 `protobuf:"varint,7,opt,name=waived,proto3" json:"waived,omitempty"`
}

func (x *ControlsSummary) Reset() {
	*x = ControlsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlsSummary) ProtoMessage() {}

func (x *ControlsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlsSummary.ProtoReflect.Descriptor instead.
func (*ControlsSummary) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{4}
}

func (x *ControlsSummary) GetFailures() int32 {
	if x != nil {
		return x.Failures
	}
	return 0
}

func (x *ControlsSummary) GetMajors() int32 {
	if x != nil {
		return x.Majors
	}
	return 0
}

func (x *ControlsSummary) GetMinors() int32 {
	if x != nil {
		return x.Minors
	}
	return 0
}

func (x *ControlsSummary) GetCriticals() int32 {
	if x != nil {
		return x.Criticals
	}
	return 0
}

func (x *ControlsSummary) GetPassed() int32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *ControlsSummary) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *ControlsSummary) GetWaived() int32 {
	if x != nil {
		return x.Waived
	}
	return 0
}

// Statistics about the nodes scanned in the compliance reports.
type NodeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of nodes that passed their compliance scans.
	Compliant int32 `protobuf:"varint,1,opt,name=compliant,proto3" json:"compliant,omitempty"`
	// The total number of nodes that skipped their compliance scans.
	Skipped int32 `protobuf:"varint,2,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// The total number of nodes that failed their compliance scans.
	Noncompliant int32 `protobuf:"varint,3,opt,name=noncompliant,proto3" json:"noncompliant,omitempty"`
	// The total number of nodes that failed their compliance scan with one or more control of critical impact.
	HighRisk int32 `protobuf:"varint,4,opt,name=high_risk,json=highRisk,proto3" json:"high_risk,omitempty"`
	// The total number of nodes that failed their compliance scan with one or more control of major impact.
	MediumRisk int32 `protobuf:"varint,5,opt,name=medium_risk,json=mediumRisk,proto3" json:"medium_risk,omitempty"`
	// The total number of nodes that failed their compliance scan with one or more control of minor impact.
	LowRisk int32 `protobuf:"varint,6,opt,name=low_risk,json=lowRisk,proto3" json:"low_risk,omitempty"`
	// The total number of nodes with a waived compliance scan.
	Waived int32 `protobuf:"varint,7,opt,name=waived,proto3" json:"waived,omitempty"`
}

func (x *NodeSummary) Reset() {
	*x = NodeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSummary) ProtoMessage() {}

func (x *NodeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSummary.ProtoReflect.Descriptor instead.
func (*NodeSummary) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{5}
}

func (x *NodeSummary) GetCompliant() int32 {
	if x != nil {
		return x.Compliant
	}
	return 0
}

func (x *NodeSummary) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *NodeSummary) GetNoncompliant() int32 {
	if x != nil {
		return x.Noncompliant
	}
	return 0
}

func (x *NodeSummary) GetHighRisk() int32 {
	if x != nil {
		return x.HighRisk
	}
	return 0
}

func (x *NodeSummary) GetMediumRisk() int32 {
	if x != nil {
		return x.MediumRisk
	}
	return 0
}

func (x *NodeSummary) GetLowRisk() int32 {
	if x != nil {
		return x.LowRisk
	}
	return 0
}

func (x *NodeSummary) GetWaived() int32 {
	if x != nil {
		return x.Waived
	}
	return 0
}

// General statistics about the reports.
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated. int64 types render into string types when serialized to satisfy all browsers
	// Replaced by the `nodes_cnt` field
	//
	// Deprecated: Do not use.
	Nodes int64 `protobuf:"varint,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	// The number of unique node platforms in the reports.
	Platforms int32 `protobuf:"varint,2,opt,name=platforms,proto3" json:"platforms,omitempty"`
	// The number of unique environments in the reports.
	Environments int32 `protobuf:"varint,3,opt,name=environments,proto3" json:"environments,omitempty"`
	// The number of unique profiles in the reports.
	Profiles int32 `protobuf:"varint,4,opt,name=profiles,proto3" json:"profiles,omitempty"`
	// The number of unique nodes scanned in the reports.
	NodesCnt int32 `protobuf:"varint,5,opt,name=nodes_cnt,json=nodesCnt,proto3" json:"nodes_cnt,omitempty"`
	// The number of unique controls scanned in the reports.
	Controls int32 `protobuf:"varint,6,opt,name=controls,proto3" json:"controls,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Do not use.
func (x *Stats) GetNodes() int64 {
	if x != nil {
		return x.Nodes
	}
	return 0
}

func (x *Stats) GetPlatforms() int32 {
	if x != nil {
		return x.Platforms
	}
	return 0
}

func (x *Stats) GetEnvironments() int32 {
	if x != nil {
		return x.Environments
	}
	return 0
}

func (x *Stats) GetProfiles() int32 {
	if x != nil {
		return x.Profiles
	}
	return 0
}

func (x *Stats) GetNodesCnt() int32 {
	if x != nil {
		return x.NodesCnt
	}
	return 0
}

func (x *Stats) GetControls() int32 {
	if x != nil {
		return x.Controls
	}
	return 0
}

// Statistics on the overall compliance reports.
type ReportSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Overall aggregated status for all the reports.
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Not used.
	Duration float64 `protobuf:"fixed64,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// Not used.
	StartDate string `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Intentionally blank.
	Stats *Stats `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *ReportSummary) Reset() {
	*x = ReportSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSummary) ProtoMessage() {}

func (x *ReportSummary) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSummary.ProtoReflect.Descriptor instead.
func (*ReportSummary) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{7}
}

func (x *ReportSummary) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReportSummary) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ReportSummary) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ReportSummary) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type Trend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time in point for which the passed/failed/skipped data is valid.
	ReportTime string `protobuf:"bytes,1,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
	// Total passed objects (nodes or controls) on the reports at the given report time.
	Passed int32 `protobuf:"varint,2,opt,name=passed,proto3" json:"passed,omitempty"`
	// Total failed objects (nodes or controls) on the reports at the given report time.
	Failed int32 `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	// Total skipped objects (nodes or controls) on the reports at the given report time.
	Skipped int32 `protobuf:"varint,4,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// Total waived objects (nodes or controls) on the reports at the given report time.
	Waived int32 `protobuf:"varint,5,opt,name=waived,proto3" json:"waived,omitempty"`
}

func (x *Trend) Reset() {
	*x = Trend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trend) ProtoMessage() {}

func (x *Trend) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trend.ProtoReflect.Descriptor instead.
func (*Trend) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{8}
}

func (x *Trend) GetReportTime() string {
	if x != nil {
		return x.ReportTime
	}
	return ""
}

func (x *Trend) GetPassed() int32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *Trend) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *Trend) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *Trend) GetWaived() int32 {
	if x != nil {
		return x.Waived
	}
	return 0
}

type Trends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of statistics for passed/failed/skipped nodes or controls in a trendgraph friendly data format.
	Trends []*Trend `protobuf:"bytes,1,rep,name=trends,proto3" json:"trends,omitempty"`
}

func (x *Trends) Reset() {
	*x = Trends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trends) ProtoMessage() {}

func (x *Trends) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trends.ProtoReflect.Descriptor instead.
func (*Trends) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{9}
}

func (x *Trends) GetTrends() []*Trend {
	if x != nil {
		return x.Trends
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of statistics about the profiles executed in the reports.
	ProfileList []*ProfileList `protobuf:"bytes,1,rep,name=profile_list,json=profileList,proto3" json:"profile_list,omitempty"`
	// Intentionally blank.
	ProfileSummary *ProfileSummary `protobuf:"bytes,2,opt,name=profile_summary,json=profileSummary,proto3" json:"profile_summary,omitempty"`
	// Summary information about a specific profile's control results across the reports.
	ControlStats []*ControlStats `protobuf:"bytes,3,rep,name=control_stats,json=controlStats,proto3" json:"control_stats,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{10}
}

func (x *Profile) GetProfileList() []*ProfileList {
	if x != nil {
		return x.ProfileList
	}
	return nil
}

func (x *Profile) GetProfileSummary() *ProfileSummary {
	if x != nil {
		return x.ProfileSummary
	}
	return nil
}

func (x *Profile) GetControlStats() []*ControlStats {
	if x != nil {
		return x.ControlStats
	}
	return nil
}

type ProfileList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The profile name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The profile SHA ID.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Total number of nodes that failed this profile.
	Failures int32 `protobuf:"varint,3,opt,name=failures,proto3" json:"failures,omitempty"`
	// Total number of failed nodes with major control failures that executed the profile.
	Majors int32 `protobuf:"varint,4,opt,name=majors,proto3" json:"majors,omitempty"`
	// Total number of failed nodes with minor control failures that executed the profile.
	Minors int32 `protobuf:"varint,5,opt,name=minors,proto3" json:"minors,omitempty"`
	// Total number of failed nodes with critical control failures that executed the profile.
	Criticals int32 `protobuf:"varint,6,opt,name=criticals,proto3" json:"criticals,omitempty"`
	// Total number of passed nodes that executed the profile.
	Passed int32 `protobuf:"varint,7,opt,name=passed,proto3" json:"passed,omitempty"`
	// Total number of skipped nodes that executed the profile.
	Skipped int32 `protobuf:"varint,8,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// Total number of waived nodes that executed the profile.
	Waived int32 `protobuf:"varint,9,opt,name=waived,proto3" json:"waived,omitempty"`
}

func (x *ProfileList) Reset() {
	*x = ProfileList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileList) ProtoMessage() {}

func (x *ProfileList) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileList.ProtoReflect.Descriptor instead.
func (*ProfileList) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{11}
}

func (x *ProfileList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProfileList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProfileList) GetFailures() int32 {
	if x != nil {
		return x.Failures
	}
	return 0
}

func (x *ProfileList) GetMajors() int32 {
	if x != nil {
		return x.Majors
	}
	return 0
}

func (x *ProfileList) GetMinors() int32 {
	if x != nil {
		return x.Minors
	}
	return 0
}

func (x *ProfileList) GetCriticals() int32 {
	if x != nil {
		return x.Criticals
	}
	return 0
}

func (x *ProfileList) GetPassed() int32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *ProfileList) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *ProfileList) GetWaived() int32 {
	if x != nil {
		return x.Waived
	}
	return 0
}

// Summary information about a specific profile's execution across the reports.
type ProfileSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the profile.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Title of the profile.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Version of the profile.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// License info for the profile.
	License string `protobuf:"bytes,4,opt,name=license,proto3" json:"license,omitempty"`
	// Maintainer for the profile.
	Maintainer string `protobuf:"bytes,5,opt,name=maintainer,proto3" json:"maintainer,omitempty"`
	// Copyright info for the profile.
	Copyright string `protobuf:"bytes,6,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// Copyright email info for the profile.
	CopyrightEmail string `protobuf:"bytes,7,opt,name=copyright_email,json=copyrightEmail,proto3" json:"copyright_email,omitempty"`
	// Summary description of the profile.
	Summary string `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary,omitempty"`
	// Supports information for the profile (which os it can run on).
	Supports []*Support `protobuf:"bytes,9,rep,name=supports,proto3" json:"supports,omitempty"`
	// Intentionally blank.
	Stats *ProfileSummaryStats `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	// Dependency information about the profile (which profiles it inherits).
	Depends []*reporting.Dependency `protobuf:"bytes,11,rep,name=depends,proto3" json:"depends,omitempty"`
}

func (x *ProfileSummary) Reset() {
	*x = ProfileSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileSummary) ProtoMessage() {}

func (x *ProfileSummary) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileSummary.ProtoReflect.Descriptor instead.
func (*ProfileSummary) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{12}
}

func (x *ProfileSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProfileSummary) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProfileSummary) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProfileSummary) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *ProfileSummary) GetMaintainer() string {
	if x != nil {
		return x.Maintainer
	}
	return ""
}

func (x *ProfileSummary) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *ProfileSummary) GetCopyrightEmail() string {
	if x != nil {
		return x.CopyrightEmail
	}
	return ""
}

func (x *ProfileSummary) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ProfileSummary) GetSupports() []*Support {
	if x != nil {
		return x.Supports
	}
	return nil
}

func (x *ProfileSummary) GetStats() *ProfileSummaryStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ProfileSummary) GetDepends() []*reporting.Dependency {
	if x != nil {
		return x.Depends
	}
	return nil
}

// Statistics about the nodes that executed the profile.
type ProfileSummaryStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of failed nodes that executed the profile.
	Failed int32 `protobuf:"varint,1,opt,name=failed,proto3" json:"failed,omitempty"`
	// Total number of passed nodes that executed the profile.
	Passed int32 `protobuf:"varint,2,opt,name=passed,proto3" json:"passed,omitempty"`
	// Total number of skipped nodes that executed the profile.
	Skipped int32 `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// Not used.
	FailedNodes int32 `protobuf:"varint,4,opt,name=failed_nodes,json=failedNodes,proto3" json:"failed_nodes,omitempty"`
	// Not used.
	TotalNodes int32 `protobuf:"varint,5,opt,name=total_nodes,json=totalNodes,proto3" json:"total_nodes,omitempty"`
	// Total number of waived controls for the given profile across nodes.
	Waived int32 `protobuf:"varint,6,opt,name=waived,proto3" json:"waived,omitempty"`
}

func (x *ProfileSummaryStats) Reset() {
	*x = ProfileSummaryStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileSummaryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileSummaryStats) ProtoMessage() {}

func (x *ProfileSummaryStats) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileSummaryStats.ProtoReflect.Descriptor instead.
func (*ProfileSummaryStats) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{13}
}

func (x *ProfileSummaryStats) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *ProfileSummaryStats) GetPassed() int32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *ProfileSummaryStats) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *ProfileSummaryStats) GetFailedNodes() int32 {
	if x != nil {
		return x.FailedNodes
	}
	return 0
}

func (x *ProfileSummaryStats) GetTotalNodes() int32 {
	if x != nil {
		return x.TotalNodes
	}
	return 0
}

func (x *ProfileSummaryStats) GetWaived() int32 {
	if x != nil {
		return x.Waived
	}
	return 0
}

type ControlStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control ID.
	Control string `protobuf:"bytes,1,opt,name=control,proto3" json:"control,omitempty"`
	// Control title.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Count of passed nodes that executed the control.
	Passed int32 `protobuf:"varint,3,opt,name=passed,proto3" json:"passed,omitempty"`
	// Count of failed nodes that executed the control.
	Failed int32 `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`
	// Count of skipped nodes that executed the control.
	Skipped int32 `protobuf:"varint,5,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// Impact of the control.
	Impact float32 `protobuf:"fixed32,6,opt,name=impact,proto3" json:"impact,omitempty"`
	// Count of waived nodes that executed the control.
	Waived int32 `protobuf:"varint,7,opt,name=waived,proto3" json:"waived,omitempty"`
}

func (x *ControlStats) Reset() {
	*x = ControlStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlStats) ProtoMessage() {}

func (x *ControlStats) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlStats.ProtoReflect.Descriptor instead.
func (*ControlStats) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{14}
}

func (x *ControlStats) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *ControlStats) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ControlStats) GetPassed() int32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *ControlStats) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *ControlStats) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *ControlStats) GetImpact() float32 {
	if x != nil {
		return x.Impact
	}
	return 0
}

func (x *ControlStats) GetWaived() int32 {
	if x != nil {
		return x.Waived
	}
	return 0
}

type Support struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OS Name compatible with the profile. This is legacy InSpec syntax.
	OsName string `protobuf:"bytes,1,opt,name=os_name,json=os-name,proto3" json:"os_name,omitempty"`
	// OS Family compatible with the profile. This is legacy InSpec syntax.
	OsFamily string `protobuf:"bytes,2,opt,name=os_family,json=os-family,proto3" json:"os_family,omitempty"`
	// OS Release compatible with the profile.
	Release string `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"`
	// InSpec Version compatible with the profile.
	InspecVersion string `protobuf:"bytes,4,opt,name=inspec_version,json=inspecVersion,proto3" json:"inspec_version,omitempty"`
	// Platform Name compatible with the profile.
	PlatformName string `protobuf:"bytes,5,opt,name=platform_name,json=platform-name,proto3" json:"platform_name,omitempty"`
	// Platform Family compatible with the profile.
	PlatformFamily string `protobuf:"bytes,6,opt,name=platform_family,json=platform-family,proto3" json:"platform_family,omitempty"`
	// Platform compatible with the profile.
	Platform string `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *Support) Reset() {
	*x = Support{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Support) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Support) ProtoMessage() {}

func (x *Support) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Support.ProtoReflect.Descriptor instead.
func (*Support) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{15}
}

func (x *Support) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *Support) GetOsFamily() string {
	if x != nil {
		return x.OsFamily
	}
	return ""
}

func (x *Support) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *Support) GetInspecVersion() string {
	if x != nil {
		return x.InspecVersion
	}
	return ""
}

func (x *Support) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *Support) GetPlatformFamily() string {
	if x != nil {
		return x.PlatformFamily
	}
	return ""
}

func (x *Support) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type Failures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Top failed profiles across the infrastructure.
	Profiles []*FailureSummary `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// Top failed platforms across the infrastructure.
	Platforms []*FailureSummary `protobuf:"bytes,2,rep,name=platforms,proto3" json:"platforms,omitempty"`
	// Top failed controls across the infrastructure.
	Controls []*FailureSummary `protobuf:"bytes,3,rep,name=controls,proto3" json:"controls,omitempty"`
	// Top failed environments across the infrastructure.
	Environments []*FailureSummary `protobuf:"bytes,4,rep,name=environments,proto3" json:"environments,omitempty"`
}

func (x *Failures) Reset() {
	*x = Failures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failures) ProtoMessage() {}

func (x *Failures) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failures.ProtoReflect.Descriptor instead.
func (*Failures) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{16}
}

func (x *Failures) GetProfiles() []*FailureSummary {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Failures) GetPlatforms() []*FailureSummary {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *Failures) GetControls() []*FailureSummary {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *Failures) GetEnvironments() []*FailureSummary {
	if x != nil {
		return x.Environments
	}
	return nil
}

type FailureSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the object failing.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Total count of failures.
	Failures int32 `protobuf:"varint,2,opt,name=failures,proto3" json:"failures,omitempty"`
	// ID of the object, included if applicable.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Not used.
	Profile string `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *FailureSummary) Reset() {
	*x = FailureSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureSummary) ProtoMessage() {}

func (x *FailureSummary) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureSummary.ProtoReflect.Descriptor instead.
func (*FailureSummary) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{17}
}

func (x *FailureSummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FailureSummary) GetFailures() int32 {
	if x != nil {
		return x.Failures
	}
	return 0
}

func (x *FailureSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FailureSummary) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type UpdateTelemetryReportedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last complaince telemetry reported date
	LastTelemetryReportedAt string `protobuf:"bytes,1,opt,name=last_telemetry_reported_at,json=lastTelemetryReportedAt,proto3" json:"last_telemetry_reported_at,omitempty"`
}

func (x *UpdateTelemetryReportedRequest) Reset() {
	*x = UpdateTelemetryReportedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTelemetryReportedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTelemetryReportedRequest) ProtoMessage() {}

func (x *UpdateTelemetryReportedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTelemetryReportedRequest.ProtoReflect.Descriptor instead.
func (*UpdateTelemetryReportedRequest) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateTelemetryReportedRequest) GetLastTelemetryReportedAt() string {
	if x != nil {
		return x.LastTelemetryReportedAt
	}
	return ""
}

type UpdateTelemetryReportedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTelemetryReportedResponse) Reset() {
	*x = UpdateTelemetryReportedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTelemetryReportedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTelemetryReportedResponse) ProtoMessage() {}

func (x *UpdateTelemetryReportedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTelemetryReportedResponse.ProtoReflect.Descriptor instead.
func (*UpdateTelemetryReportedResponse) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{19}
}

type GetNodesUsageCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNodesUsageCountRequest) Reset() {
	*x = GetNodesUsageCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesUsageCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesUsageCountRequest) ProtoMessage() {}

func (x *GetNodesUsageCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesUsageCountRequest.ProtoReflect.Descriptor instead.
func (*GetNodesUsageCountRequest) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{20}
}

type GetNodesUsageCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of days since telematics was last posted
	DaysSinceLastPost int64 `protobuf:"varint,1,opt,name=days_since_last_post,json=daysSinceLastPost,proto3" json:"days_since_last_post,omitempty"`
	// unique nodes count in a duration
	NodeCnt int64 `protobuf:"varint,2,opt,name=node_cnt,json=nodeCnt,proto3" json:"node_cnt,omitempty"`
}

func (x *GetNodesUsageCountResponse) Reset() {
	*x = GetNodesUsageCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesUsageCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesUsageCountResponse) ProtoMessage() {}

func (x *GetNodesUsageCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_compliance_reporting_stats_stats_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesUsageCountResponse.ProtoReflect.Descriptor instead.
func (*GetNodesUsageCountResponse) Descriptor() ([]byte, []int) {
	return file_external_compliance_reporting_stats_stats_proto_rawDescGZIP(), []int{21}
}

func (x *GetNodesUsageCountResponse) GetDaysSinceLastPost() int64 {
	if x != nil {
		return x.DaysSinceLastPost
	}
	return 0
}

func (x *GetNodesUsageCountResponse) GetNodeCnt() int64 {
	if x != nil {
		return x.NodeCnt
	}
	return 0
}

var File_external_compliance_reporting_stats_stats_proto protoreflect.FileDescriptor

var file_external_compliance_reporting_stats_stats_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xed, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x55, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22,
	0x1e, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x22,
	0xbe, 0x02, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x6b, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x65, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x69, 0x67, 0x68, 0x52, 0x69, 0x73,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x69,
	0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x77, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x61, 0x69, 0x76, 0x65, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x43, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x22, 0xb0, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64,
	0x22, 0x58, 0x0a, 0x06, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x52, 0x06, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x62, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x22, 0xf2, 0x03,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x54, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x4f, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x07, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64,
	0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x07,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x88, 0x03, 0x0a,
	0x08, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x5b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x12, 0x63, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x5d, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x68, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x64, 0x61, 0x79, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6e, 0x74, 0x32, 0xca, 0x0c, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xfc, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x36, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x42, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x3a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x3a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xf3, 0x01, 0x0a,
	0x09, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x75, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x3a, 0x01, 0x2a,
	0x8a, 0xb5, 0x18, 0x3e, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x3a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x3a, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x3a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x3a, 0x67,
	0x65, 0x74, 0x12, 0x80, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x38, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18,
	0x44, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x3a, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x3a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0x81, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x39,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x8a, 0xb5, 0x18, 0x44, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x3a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x3a, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1d, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xaa, 0x02, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b,
	0x1a, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x27, 0x0a,
	0x0e, 0x69, 0x61, 0x6d, 0x3a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12,
	0x15, 0x69, 0x61, 0x6d, 0x3a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x3a,
	0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x90, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x8a, 0xb5,
	0x18, 0x27, 0x0a, 0x0e, 0x69, 0x61, 0x6d, 0x3a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x12, 0x15, 0x69, 0x61, 0x6d, 0x3a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x3a, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_compliance_reporting_stats_stats_proto_rawDescOnce sync.Once
	file_external_compliance_reporting_stats_stats_proto_rawDescData = file_external_compliance_reporting_stats_stats_proto_rawDesc
)

func file_external_compliance_reporting_stats_stats_proto_rawDescGZIP() []byte {
	file_external_compliance_reporting_stats_stats_proto_rawDescOnce.Do(func() {
		file_external_compliance_reporting_stats_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_compliance_reporting_stats_stats_proto_rawDescData)
	})
	return file_external_compliance_reporting_stats_stats_proto_rawDescData
}

var file_external_compliance_reporting_stats_stats_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_external_compliance_reporting_stats_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_external_compliance_reporting_stats_stats_proto_goTypes = []interface{}{
	(Query_OrderType)(0),                    // 0: chef.automate.api.compliance.reporting.stats.v1.Query.OrderType
	(*Empty)(nil),                           // 1: chef.automate.api.compliance.reporting.stats.v1.Empty
	(*ListFilter)(nil),                      // 2: chef.automate.api.compliance.reporting.stats.v1.ListFilter
	(*Query)(nil),                           // 3: chef.automate.api.compliance.reporting.stats.v1.Query
	(*Summary)(nil),                         // 4: chef.automate.api.compliance.reporting.stats.v1.Summary
	(*ControlsSummary)(nil),                 // 5: chef.automate.api.compliance.reporting.stats.v1.ControlsSummary
	(*NodeSummary)(nil),                     // 6: chef.automate.api.compliance.reporting.stats.v1.NodeSummary
	(*Stats)(nil),                           // 7: chef.automate.api.compliance.reporting.stats.v1.Stats
	(*ReportSummary)(nil),                   // 8: chef.automate.api.compliance.reporting.stats.v1.ReportSummary
	(*Trend)(nil),                           // 9: chef.automate.api.compliance.reporting.stats.v1.Trend
	(*Trends)(nil),                          // 10: chef.automate.api.compliance.reporting.stats.v1.Trends
	(*Profile)(nil),                         // 11: chef.automate.api.compliance.reporting.stats.v1.Profile
	(*ProfileList)(nil),                     // 12: chef.automate.api.compliance.reporting.stats.v1.ProfileList
	(*ProfileSummary)(nil),                  // 13: chef.automate.api.compliance.reporting.stats.v1.ProfileSummary
	(*ProfileSummaryStats)(nil),             // 14: chef.automate.api.compliance.reporting.stats.v1.ProfileSummaryStats
	(*ControlStats)(nil),                    // 15: chef.automate.api.compliance.reporting.stats.v1.ControlStats
	(*Support)(nil),                         // 16: chef.automate.api.compliance.reporting.stats.v1.Support
	(*Failures)(nil),                        // 17: chef.automate.api.compliance.reporting.stats.v1.Failures
	(*FailureSummary)(nil),                  // 18: chef.automate.api.compliance.reporting.stats.v1.FailureSummary
	(*UpdateTelemetryReportedRequest)(nil),  // 19: chef.automate.api.compliance.reporting.stats.v1.UpdateTelemetryReportedRequest
	(*UpdateTelemetryReportedResponse)(nil), // 20: chef.automate.api.compliance.reporting.stats.v1.UpdateTelemetryReportedResponse
	(*GetNodesUsageCountRequest)(nil),       // 21: chef.automate.api.compliance.reporting.stats.v1.GetNodesUsageCountRequest
	(*GetNodesUsageCountResponse)(nil),      // 22: chef.automate.api.compliance.reporting.stats.v1.GetNodesUsageCountResponse
	(*reporting.Dependency)(nil),            // 23: chef.automate.api.compliance.reporting.v1.Dependency
}
var file_external_compliance_reporting_stats_stats_proto_depIdxs = []int32{
	2,  // 0: chef.automate.api.compliance.reporting.stats.v1.Query.filters:type_name -> chef.automate.api.compliance.reporting.stats.v1.ListFilter
	0,  // 1: chef.automate.api.compliance.reporting.stats.v1.Query.order:type_name -> chef.automate.api.compliance.reporting.stats.v1.Query.OrderType
	5,  // 2: chef.automate.api.compliance.reporting.stats.v1.Summary.controls_summary:type_name -> chef.automate.api.compliance.reporting.stats.v1.ControlsSummary
	6,  // 3: chef.automate.api.compliance.reporting.stats.v1.Summary.node_summary:type_name -> chef.automate.api.compliance.reporting.stats.v1.NodeSummary
	8,  // 4: chef.automate.api.compliance.reporting.stats.v1.Summary.report_summary:type_name -> chef.automate.api.compliance.reporting.stats.v1.ReportSummary
	7,  // 5: chef.automate.api.compliance.reporting.stats.v1.ReportSummary.stats:type_name -> chef.automate.api.compliance.reporting.stats.v1.Stats
	9,  // 6: chef.automate.api.compliance.reporting.stats.v1.Trends.trends:type_name -> chef.automate.api.compliance.reporting.stats.v1.Trend
	12, // 7: chef.automate.api.compliance.reporting.stats.v1.Profile.profile_list:type_name -> chef.automate.api.compliance.reporting.stats.v1.ProfileList
	13, // 8: chef.automate.api.compliance.reporting.stats.v1.Profile.profile_summary:type_name -> chef.automate.api.compliance.reporting.stats.v1.ProfileSummary
	15, // 9: chef.automate.api.compliance.reporting.stats.v1.Profile.control_stats:type_name -> chef.automate.api.compliance.reporting.stats.v1.ControlStats
	16, // 10: chef.automate.api.compliance.reporting.stats.v1.ProfileSummary.supports:type_name -> chef.automate.api.compliance.reporting.stats.v1.Support
	14, // 11: chef.automate.api.compliance.reporting.stats.v1.ProfileSummary.stats:type_name -> chef.automate.api.compliance.reporting.stats.v1.ProfileSummaryStats
	23, // 12: chef.automate.api.compliance.reporting.stats.v1.ProfileSummary.depends:type_name -> chef.automate.api.compliance.reporting.v1.Dependency
	18, // 13: chef.automate.api.compliance.reporting.stats.v1.Failures.profiles:type_name -> chef.automate.api.compliance.reporting.stats.v1.FailureSummary
	18, // 14: chef.automate.api.compliance.reporting.stats.v1.Failures.platforms:type_name -> chef.automate.api.compliance.reporting.stats.v1.FailureSummary
	18, // 15: chef.automate.api.compliance.reporting.stats.v1.Failures.controls:type_name -> chef.automate.api.compliance.reporting.stats.v1.FailureSummary
	18, // 16: chef.automate.api.compliance.reporting.stats.v1.Failures.environments:type_name -> chef.automate.api.compliance.reporting.stats.v1.FailureSummary
	3,  // 17: chef.automate.api.compliance.reporting.stats.v1.StatsService.ReadSummary:input_type -> chef.automate.api.compliance.reporting.stats.v1.Query
	3,  // 18: chef.automate.api.compliance.reporting.stats.v1.StatsService.ReadTrend:input_type -> chef.automate.api.compliance.reporting.stats.v1.Query
	3,  // 19: chef.automate.api.compliance.reporting.stats.v1.StatsService.ReadProfiles:input_type -> chef.automate.api.compliance.reporting.stats.v1.Query
	3,  // 20: chef.automate.api.compliance.reporting.stats.v1.StatsService.ReadFailures:input_type -> chef.automate.api.compliance.reporting.stats.v1.Query
	19, // 21: chef.automate.api.compliance.reporting.stats.v1.StatsService.UpdateTelemetryReported:input_type -> chef.automate.api.compliance.reporting.stats.v1.UpdateTelemetryReportedRequest
	21, // 22: chef.automate.api.compliance.reporting.stats.v1.StatsService.GetNodesUsageCount:input_type -> chef.automate.api.compliance.reporting.stats.v1.GetNodesUsageCountRequest
	4,  // 23: chef.automate.api.compliance.reporting.stats.v1.StatsService.ReadSummary:output_type -> chef.automate.api.compliance.reporting.stats.v1.Summary
	10, // 24: chef.automate.api.compliance.reporting.stats.v1.StatsService.ReadTrend:output_type -> chef.automate.api.compliance.reporting.stats.v1.Trends
	11, // 25: chef.automate.api.compliance.reporting.stats.v1.StatsService.ReadProfiles:output_type -> chef.automate.api.compliance.reporting.stats.v1.Profile
	17, // 26: chef.automate.api.compliance.reporting.stats.v1.StatsService.ReadFailures:output_type -> chef.automate.api.compliance.reporting.stats.v1.Failures
	20, // 27: chef.automate.api.compliance.reporting.stats.v1.StatsService.UpdateTelemetryReported:output_type -> chef.automate.api.compliance.reporting.stats.v1.UpdateTelemetryReportedResponse
	22, // 28: chef.automate.api.compliance.reporting.stats.v1.StatsService.GetNodesUsageCount:output_type -> chef.automate.api.compliance.reporting.stats.v1.GetNodesUsageCountResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_external_compliance_reporting_stats_stats_proto_init() }
func file_external_compliance_reporting_stats_stats_proto_init() {
	if File_external_compliance_reporting_stats_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_external_compliance_reporting_stats_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileSummaryStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Support); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTelemetryReportedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTelemetryReportedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesUsageCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_compliance_reporting_stats_stats_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesUsageCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_compliance_reporting_stats_stats_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_compliance_reporting_stats_stats_proto_goTypes,
		DependencyIndexes: file_external_compliance_reporting_stats_stats_proto_depIdxs,
		EnumInfos:         file_external_compliance_reporting_stats_stats_proto_enumTypes,
		MessageInfos:      file_external_compliance_reporting_stats_stats_proto_msgTypes,
	}.Build()
	File_external_compliance_reporting_stats_stats_proto = out.File
	file_external_compliance_reporting_stats_stats_proto_rawDesc = nil
	file_external_compliance_reporting_stats_stats_proto_goTypes = nil
	file_external_compliance_reporting_stats_stats_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StatsServiceClient is the client API for StatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatsServiceClient interface {
	//
	//Read Summary
	//
	//Returns summary statistics for compliance reports.
	//General report summary information is the default.
	//Adding a `type` value of `nodes` or `controls` will return summary statistics for that object.
	//Supports filtering.
	//
	//Example:
	//```
	//{
	//"type":"nodes",
	//"filters":[
	//{"type":"environment","values":["dev*"]},
	//{"type":"start_time","values":["2019-10-26T00:00:00Z"]},
	//{"type":"end_time","values":["2019-11-05T23:59:59Z"]}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//compliance:reportSummary:get
	//```
	ReadSummary(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Summary, error)
	//
	//Read Trend
	//
	//Returns trendgraph statistics for compliance reports.
	//The `type` field is required for this api call. Options are `nodes` or `controls`.
	//Requires minimum `interval` field of 3600 and defined start time and end time filters.
	//Supports filtering.
	//
	//Example:
	//```
	//{
	//"type":"nodes",
	//"interval":86400,
	//"filters":[
	//{"type":"environment","values":["dev*"]},
	//{"type":"start_time","values":["2019-10-26T00:00:00Z"]},
	//{"type":"end_time","values":["2019-11-05T23:59:59Z"]}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//compliance:reportTrend:get
	//```
	ReadTrend(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Trends, error)
	//
	//Read Profiles
	//
	//Returns statistics and summary information for profiles executed as part of the compliance reports.
	//If called without specifying a profile ID (`id`), the API will return stats on all the profiles.
	//If the `id` field is provided (profile ID) as part of the query object, the `type` field must also be specified. Options are `controls` or `summary`.
	//Supports filtering.
	//
	//```
	//{
	//"type":"controls",
	//"id":"09adcbb3b9b3233d5de63cd98a5ba3e155b3aaeb66b5abed379f5fb1ff143988",
	//"filters":[
	//{"type":"environment","values":["dev*"]},
	//{"type":"start_time","values":["2019-10-26T00:00:00Z"]},
	//{"type":"end_time","values":["2019-11-05T23:59:59Z"]}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//compliance:reportProfiles:get
	//```
	ReadProfiles(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Profile, error)
	//
	//Read Failures
	//
	//Returns the top failures for the specified object. A types filter is required for this api.
	//Supported values are `platform`, `environment`, `control`, and `profile`.
	//By default, the top ten failed objects for the specified type are returned.
	//Supports filtering and respects `size` parameter.
	//
	//Example:
	//```
	//{
	//"filters":[
	//{"type":"start_time","values":["2019-10-26T00:00:00Z"]},
	//{"type":"end_time","values":["2019-11-05T23:59:59Z"]},
	//{"type":"types","values":["platform","environment"]}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//compliance:reportFailures:get
	//```
	ReadFailures(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Failures, error)
	//
	//UpdateTelemetryReported
	//
	//Acknowledge API  to updates the last complaince telemetry reported date in postgres
	//
	//Authorization Action:
	//```
	//iam:introspect:getAll
	//```
	UpdateTelemetryReported(ctx context.Context, in *UpdateTelemetryReportedRequest, opts ...grpc.CallOption) (*UpdateTelemetryReportedResponse, error)
	//
	//GetNodesUsageCount
	//
	//Returns the count of unique nodes with lastRun in a given time.
	//The time duration can be between the last time Telemetry data sent and the day before the current date.
	//If the duration < 15 days --> 15 days
	//duration > 15 days --> duration
	//
	//Authorization Action:
	//```
	//iam:introspect:getAll
	//```
	GetNodesUsageCount(ctx context.Context, in *GetNodesUsageCountRequest, opts ...grpc.CallOption) (*GetNodesUsageCountResponse, error)
}

type statsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsServiceClient(cc grpc.ClientConnInterface) StatsServiceClient {
	return &statsServiceClient{cc}
}

func (c *statsServiceClient) ReadSummary(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Summary, error) {
	out := new(Summary)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) ReadTrend(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Trends, error) {
	out := new(Trends)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadTrend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) ReadProfiles(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) ReadFailures(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Failures, error) {
	out := new(Failures)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadFailures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) UpdateTelemetryReported(ctx context.Context, in *UpdateTelemetryReportedRequest, opts ...grpc.CallOption) (*UpdateTelemetryReportedResponse, error) {
	out := new(UpdateTelemetryReportedResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.stats.v1.StatsService/UpdateTelemetryReported", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) GetNodesUsageCount(ctx context.Context, in *GetNodesUsageCountRequest, opts ...grpc.CallOption) (*GetNodesUsageCountResponse, error) {
	out := new(GetNodesUsageCountResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.stats.v1.StatsService/GetNodesUsageCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServiceServer is the server API for StatsService service.
type StatsServiceServer interface {
	//
	//Read Summary
	//
	//Returns summary statistics for compliance reports.
	//General report summary information is the default.
	//Adding a `type` value of `nodes` or `controls` will return summary statistics for that object.
	//Supports filtering.
	//
	//Example:
	//```
	//{
	//"type":"nodes",
	//"filters":[
	//{"type":"environment","values":["dev*"]},
	//{"type":"start_time","values":["2019-10-26T00:00:00Z"]},
	//{"type":"end_time","values":["2019-11-05T23:59:59Z"]}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//compliance:reportSummary:get
	//```
	ReadSummary(context.Context, *Query) (*Summary, error)
	//
	//Read Trend
	//
	//Returns trendgraph statistics for compliance reports.
	//The `type` field is required for this api call. Options are `nodes` or `controls`.
	//Requires minimum `interval` field of 3600 and defined start time and end time filters.
	//Supports filtering.
	//
	//Example:
	//```
	//{
	//"type":"nodes",
	//"interval":86400,
	//"filters":[
	//{"type":"environment","values":["dev*"]},
	//{"type":"start_time","values":["2019-10-26T00:00:00Z"]},
	//{"type":"end_time","values":["2019-11-05T23:59:59Z"]}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//compliance:reportTrend:get
	//```
	ReadTrend(context.Context, *Query) (*Trends, error)
	//
	//Read Profiles
	//
	//Returns statistics and summary information for profiles executed as part of the compliance reports.
	//If called without specifying a profile ID (`id`), the API will return stats on all the profiles.
	//If the `id` field is provided (profile ID) as part of the query object, the `type` field must also be specified. Options are `controls` or `summary`.
	//Supports filtering.
	//
	//```
	//{
	//"type":"controls",
	//"id":"09adcbb3b9b3233d5de63cd98a5ba3e155b3aaeb66b5abed379f5fb1ff143988",
	//"filters":[
	//{"type":"environment","values":["dev*"]},
	//{"type":"start_time","values":["2019-10-26T00:00:00Z"]},
	//{"type":"end_time","values":["2019-11-05T23:59:59Z"]}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//compliance:reportProfiles:get
	//```
	ReadProfiles(context.Context, *Query) (*Profile, error)
	//
	//Read Failures
	//
	//Returns the top failures for the specified object. A types filter is required for this api.
	//Supported values are `platform`, `environment`, `control`, and `profile`.
	//By default, the top ten failed objects for the specified type are returned.
	//Supports filtering and respects `size` parameter.
	//
	//Example:
	//```
	//{
	//"filters":[
	//{"type":"start_time","values":["2019-10-26T00:00:00Z"]},
	//{"type":"end_time","values":["2019-11-05T23:59:59Z"]},
	//{"type":"types","values":["platform","environment"]}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//compliance:reportFailures:get
	//```
	ReadFailures(context.Context, *Query) (*Failures, error)
	//
	//UpdateTelemetryReported
	//
	//Acknowledge API  to updates the last complaince telemetry reported date in postgres
	//
	//Authorization Action:
	//```
	//iam:introspect:getAll
	//```
	UpdateTelemetryReported(context.Context, *UpdateTelemetryReportedRequest) (*UpdateTelemetryReportedResponse, error)
	//
	//GetNodesUsageCount
	//
	//Returns the count of unique nodes with lastRun in a given time.
	//The time duration can be between the last time Telemetry data sent and the day before the current date.
	//If the duration < 15 days --> 15 days
	//duration > 15 days --> duration
	//
	//Authorization Action:
	//```
	//iam:introspect:getAll
	//```
	GetNodesUsageCount(context.Context, *GetNodesUsageCountRequest) (*GetNodesUsageCountResponse, error)
}

// UnimplementedStatsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStatsServiceServer struct {
}

func (*UnimplementedStatsServiceServer) ReadSummary(context.Context, *Query) (*Summary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSummary not implemented")
}
func (*UnimplementedStatsServiceServer) ReadTrend(context.Context, *Query) (*Trends, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTrend not implemented")
}
func (*UnimplementedStatsServiceServer) ReadProfiles(context.Context, *Query) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProfiles not implemented")
}
func (*UnimplementedStatsServiceServer) ReadFailures(context.Context, *Query) (*Failures, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFailures not implemented")
}
func (*UnimplementedStatsServiceServer) UpdateTelemetryReported(context.Context, *UpdateTelemetryReportedRequest) (*UpdateTelemetryReportedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelemetryReported not implemented")
}
func (*UnimplementedStatsServiceServer) GetNodesUsageCount(context.Context, *GetNodesUsageCountRequest) (*GetNodesUsageCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodesUsageCount not implemented")
}

func RegisterStatsServiceServer(s *grpc.Server, srv StatsServiceServer) {
	s.RegisterService(&_StatsService_serviceDesc, srv)
}

func _StatsService_ReadSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).ReadSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).ReadSummary(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_ReadTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).ReadTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadTrend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).ReadTrend(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_ReadProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).ReadProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).ReadProfiles(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_ReadFailures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).ReadFailures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.stats.v1.StatsService/ReadFailures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).ReadFailures(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_UpdateTelemetryReported_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTelemetryReportedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).UpdateTelemetryReported(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.stats.v1.StatsService/UpdateTelemetryReported",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).UpdateTelemetryReported(ctx, req.(*UpdateTelemetryReportedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_GetNodesUsageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesUsageCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetNodesUsageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.stats.v1.StatsService/GetNodesUsageCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetNodesUsageCount(ctx, req.(*GetNodesUsageCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.compliance.reporting.stats.v1.StatsService",
	HandlerType: (*StatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadSummary",
			Handler:    _StatsService_ReadSummary_Handler,
		},
		{
			MethodName: "ReadTrend",
			Handler:    _StatsService_ReadTrend_Handler,
		},
		{
			MethodName: "ReadProfiles",
			Handler:    _StatsService_ReadProfiles_Handler,
		},
		{
			MethodName: "ReadFailures",
			Handler:    _StatsService_ReadFailures_Handler,
		},
		{
			MethodName: "UpdateTelemetryReported",
			Handler:    _StatsService_UpdateTelemetryReported_Handler,
		},
		{
			MethodName: "GetNodesUsageCount",
			Handler:    _StatsService_GetNodesUsageCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/compliance/reporting/stats/stats.proto",
}
