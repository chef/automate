// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/compliance/scanner/jobs/jobs.proto

package jobs

import (
	context "context"
	fmt "fmt"
	query "github.com/chef/automate/api/external/common/query"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Return the results in ascending or descending order.
type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

var Query_OrderType_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var Query_OrderType_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x Query_OrderType) String() string {
	return proto.EnumName(Query_OrderType_name, int32(x))
}

func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1bb72c425e853591, []int{2, 0}
}

type RerunResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RerunResponse) Reset()         { *m = RerunResponse{} }
func (m *RerunResponse) String() string { return proto.CompactTextString(m) }
func (*RerunResponse) ProtoMessage()    {}
func (*RerunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb72c425e853591, []int{0}
}

func (m *RerunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RerunResponse.Unmarshal(m, b)
}
func (m *RerunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RerunResponse.Marshal(b, m, deterministic)
}
func (m *RerunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RerunResponse.Merge(m, src)
}
func (m *RerunResponse) XXX_Size() int {
	return xxx_messageInfo_RerunResponse.Size(m)
}
func (m *RerunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RerunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RerunResponse proto.InternalMessageInfo

type Id struct {
	// Unique ID (UUID) assigned to object.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of object.
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb72c425e853591, []int{1}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Id) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Query struct {
	// Use filters to limit the set of items returned.
	Filters []*query.Filter `protobuf:"bytes,20,rep,name=filters,proto3" json:"filters,omitempty"`
	Order   Query_OrderType `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.api.compliance.scanner.jobs.v1.Query_OrderType" json:"order,omitempty"`
	// Sort the results on a specific field.
	Sort string `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty"`
	// The number of result pages to return.
	Page int32 `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`
	// The number of results on each page.
	PerPage              int32    `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb72c425e853591, []int{2}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetFilters() []*query.Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Query) GetOrder() Query_OrderType {
	if m != nil {
		return m.Order
	}
	return Query_ASC
}

func (m *Query) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *Query) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Query) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type ManagerFilter struct {
	// Unique ID of a node manager.
	ManagerId string `protobuf:"bytes,1,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`
	// Use filters to limit the set of items returned.
	Filters              []*query.Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ManagerFilter) Reset()         { *m = ManagerFilter{} }
func (m *ManagerFilter) String() string { return proto.CompactTextString(m) }
func (*ManagerFilter) ProtoMessage()    {}
func (*ManagerFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb72c425e853591, []int{3}
}

func (m *ManagerFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagerFilter.Unmarshal(m, b)
}
func (m *ManagerFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagerFilter.Marshal(b, m, deterministic)
}
func (m *ManagerFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerFilter.Merge(m, src)
}
func (m *ManagerFilter) XXX_Size() int {
	return xxx_messageInfo_ManagerFilter.Size(m)
}
func (m *ManagerFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerFilter proto.InternalMessageInfo

func (m *ManagerFilter) GetManagerId() string {
	if m != nil {
		return m.ManagerId
	}
	return ""
}

func (m *ManagerFilter) GetFilters() []*query.Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type Job struct {
	// Unique ID (UUID) of the scan job.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User-specified name of the scan job.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Determines the type of Chef InSpec run, `detect` or `exec`.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Desired timeout (in seconds) for the scan job execution. Default: 7200 for exec jobs, 600 for detect jobs.
	Timeout int32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Tags to assign to the scan job.
	Tags []*query.Kv `protobuf:"bytes,20,rep,name=tags,proto3" json:"tags,omitempty"`
	// Start time of the scan job, assigned by the service.
	StartTime *timestamp.Timestamp `protobuf:"bytes,21,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time of the scan job, assigned by the service.
	EndTime *timestamp.Timestamp `protobuf:"bytes,22,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Status of the scan job, assigned by the service.
	Status string `protobuf:"bytes,23,opt,name=status,proto3" json:"status,omitempty"`
	// Number of times to retry the scan job. Default: 3.
	Retries int32 `protobuf:"varint,26,opt,name=retries,proto3" json:"retries,omitempty"`
	// Number of retries left, assigned by the service.
	RetriesLeft int32 `protobuf:"varint,27,opt,name=retries_left,json=retriesLeft,proto3" json:"retries_left,omitempty"`
	// Results of the scan job, including a report ID if one was generated.
	Results []*ResultsRow `protobuf:"bytes,28,rep,name=results,proto3" json:"results,omitempty"`
	// List of node IDs to associate with the scan job.
	Nodes []string `protobuf:"bytes,100,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// List of profiles to execute as part of the scan job.
	Profiles []string `protobuf:"bytes,101,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// Count of nodes to be scanned as part of the job, assigned by the service.
	NodeCount int32 `protobuf:"varint,102,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// Count of profiles to be executed as part of the job.
	ProfileCount int32 `protobuf:"varint,103,opt,name=profile_count,json=profileCount,proto3" json:"profile_count,omitempty"`
	// Set of node manager IDs and filters to associate with the scan job.
	NodeSelectors []*ManagerFilter `protobuf:"bytes,104,rep,name=node_selectors,json=nodeSelectors,proto3" json:"node_selectors,omitempty"`
	// Next scheduled scan execution time.
	ScheduledTime *timestamp.Timestamp `protobuf:"bytes,105,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// Recurrence schedule string for the job.
	Recurrence string `protobuf:"bytes,106,opt,name=recurrence,proto3" json:"recurrence,omitempty"`
	// ID of parent job to associate with the job, if any.
	ParentId string `protobuf:"bytes,107,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Count of scans executed by the job.
	JobCount int32 `protobuf:"varint,108,opt,name=job_count,json=jobCount,proto3" json:"job_count,omitempty"`
	// Boolean used to denote the job has been marked as "deleted" by the user.
	Deleted              bool     `protobuf:"varint,109,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb72c425e853591, []int{4}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Job) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Job) GetTags() []*query.Kv {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Job) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Job) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Job) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Job) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *Job) GetRetriesLeft() int32 {
	if m != nil {
		return m.RetriesLeft
	}
	return 0
}

func (m *Job) GetResults() []*ResultsRow {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *Job) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Job) GetProfiles() []string {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *Job) GetNodeCount() int32 {
	if m != nil {
		return m.NodeCount
	}
	return 0
}

func (m *Job) GetProfileCount() int32 {
	if m != nil {
		return m.ProfileCount
	}
	return 0
}

func (m *Job) GetNodeSelectors() []*ManagerFilter {
	if m != nil {
		return m.NodeSelectors
	}
	return nil
}

func (m *Job) GetScheduledTime() *timestamp.Timestamp {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *Job) GetRecurrence() string {
	if m != nil {
		return m.Recurrence
	}
	return ""
}

func (m *Job) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *Job) GetJobCount() int32 {
	if m != nil {
		return m.JobCount
	}
	return 0
}

func (m *Job) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type Jobs struct {
	// List of jobs.
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	// Total number of jobs in the system.
	Total                int32    `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Jobs) Reset()         { *m = Jobs{} }
func (m *Jobs) String() string { return proto.CompactTextString(m) }
func (*Jobs) ProtoMessage()    {}
func (*Jobs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb72c425e853591, []int{5}
}

func (m *Jobs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Jobs.Unmarshal(m, b)
}
func (m *Jobs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Jobs.Marshal(b, m, deterministic)
}
func (m *Jobs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Jobs.Merge(m, src)
}
func (m *Jobs) XXX_Size() int {
	return xxx_messageInfo_Jobs.Size(m)
}
func (m *Jobs) XXX_DiscardUnknown() {
	xxx_messageInfo_Jobs.DiscardUnknown(m)
}

var xxx_messageInfo_Jobs proto.InternalMessageInfo

func (m *Jobs) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *Jobs) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ResultsRow struct {
	// ID of the scanned node.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// ID of the report generated by the scan.
	ReportId string `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// Status of the scan (completed, failed, aborted).
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Result error message for failed scans.
	Result string `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	// ID of the scan.
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Start time of the scan.
	StartTime *timestamp.Timestamp `protobuf:"bytes,20,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time of the scan.
	EndTime              *timestamp.Timestamp `protobuf:"bytes,21,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ResultsRow) Reset()         { *m = ResultsRow{} }
func (m *ResultsRow) String() string { return proto.CompactTextString(m) }
func (*ResultsRow) ProtoMessage()    {}
func (*ResultsRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb72c425e853591, []int{6}
}

func (m *ResultsRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultsRow.Unmarshal(m, b)
}
func (m *ResultsRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultsRow.Marshal(b, m, deterministic)
}
func (m *ResultsRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultsRow.Merge(m, src)
}
func (m *ResultsRow) XXX_Size() int {
	return xxx_messageInfo_ResultsRow.Size(m)
}
func (m *ResultsRow) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultsRow.DiscardUnknown(m)
}

var xxx_messageInfo_ResultsRow proto.InternalMessageInfo

func (m *ResultsRow) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ResultsRow) GetReportId() string {
	if m != nil {
		return m.ReportId
	}
	return ""
}

func (m *ResultsRow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ResultsRow) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *ResultsRow) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *ResultsRow) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *ResultsRow) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("chef.automate.api.compliance.scanner.jobs.v1.Query_OrderType", Query_OrderType_name, Query_OrderType_value)
	proto.RegisterType((*RerunResponse)(nil), "chef.automate.api.compliance.scanner.jobs.v1.RerunResponse")
	proto.RegisterType((*Id)(nil), "chef.automate.api.compliance.scanner.jobs.v1.Id")
	proto.RegisterType((*Query)(nil), "chef.automate.api.compliance.scanner.jobs.v1.Query")
	proto.RegisterType((*ManagerFilter)(nil), "chef.automate.api.compliance.scanner.jobs.v1.ManagerFilter")
	proto.RegisterType((*Job)(nil), "chef.automate.api.compliance.scanner.jobs.v1.Job")
	proto.RegisterType((*Jobs)(nil), "chef.automate.api.compliance.scanner.jobs.v1.Jobs")
	proto.RegisterType((*ResultsRow)(nil), "chef.automate.api.compliance.scanner.jobs.v1.ResultsRow")
}

func init() {
	proto.RegisterFile("api/external/compliance/scanner/jobs/jobs.proto", fileDescriptor_1bb72c425e853591)
}

var fileDescriptor_1bb72c425e853591 = []byte{
	// 1151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xcf, 0x72, 0x1b, 0xc5,
	0x13, 0xfe, 0xad, 0xac, 0xbf, 0xed, 0xd8, 0xbf, 0xd4, 0x94, 0xe3, 0x0c, 0xb2, 0x93, 0x98, 0x85,
	0x0a, 0x22, 0xc4, 0xbb, 0x89, 0x53, 0xa4, 0x82, 0x42, 0x8a, 0x04, 0x27, 0x54, 0x29, 0x84, 0x02,
	0xd6, 0xe1, 0xc2, 0xc5, 0x35, 0xda, 0x6d, 0xc9, 0xeb, 0xec, 0xee, 0x2c, 0x33, 0xb3, 0x06, 0x17,
	0xc5, 0x01, 0x8e, 0xbe, 0xf2, 0x08, 0x3c, 0x83, 0x4f, 0x5c, 0x39, 0x70, 0xa7, 0xb8, 0x50, 0x1c,
	0xb9, 0xf2, 0x04, 0x5c, 0xa8, 0x99, 0x59, 0x29, 0x8e, 0x13, 0x95, 0x2c, 0x71, 0x71, 0x4d, 0x7f,
	0xd3, 0xdd, 0xea, 0xaf, 0xbf, 0x6e, 0x6b, 0x04, 0x3e, 0xcb, 0x63, 0x1f, 0xbf, 0x51, 0x28, 0x32,
	0x96, 0xf8, 0x21, 0x4f, 0xf3, 0x24, 0x66, 0x59, 0x88, 0xbe, 0x0c, 0x59, 0x96, 0xa1, 0xf0, 0xf7,
	0x79, 0x5f, 0x9a, 0x3f, 0x5e, 0x2e, 0xb8, 0xe2, 0xe4, 0x7a, 0xb8, 0x87, 0x03, 0x8f, 0x15, 0x8a,
	0xa7, 0x4c, 0xa1, 0xc7, 0xf2, 0xd8, 0x7b, 0x1e, 0xe5, 0x95, 0x51, 0x9e, 0x09, 0x38, 0xb8, 0xd9,
	0xbe, 0x32, 0xe4, 0x7c, 0x98, 0xa0, 0x6f, 0x62, 0xfb, 0xc5, 0xc0, 0x57, 0x71, 0x8a, 0x52, 0xb1,
	0x34, 0xb7, 0xe9, 0xda, 0xeb, 0xa5, 0x83, 0x2e, 0x83, 0x65, 0x19, 0x57, 0x4c, 0xc5, 0x3c, 0x2b,
	0x3f, 0xac, 0xbd, 0x76, 0x3a, 0x1c, 0xd3, 0x5c, 0x1d, 0x96, 0x97, 0xf7, 0xf5, 0xe7, 0xf2, 0x0c,
	0x33, 0x25, 0xfd, 0x51, 0x3d, 0x9b, 0x43, 0x91, 0x87, 0xd6, 0x3d, 0xdc, 0x1c, 0x62, 0xb6, 0x99,
	0xf3, 0x24, 0x0e, 0x0f, 0xfd, 0x98, 0xa5, 0xaf, 0x48, 0x7f, 0xed, 0x34, 0xf9, 0x94, 0x67, 0xfe,
	0x57, 0x05, 0x8a, 0x43, 0x3f, 0x67, 0x82, 0xa5, 0xa8, 0x50, 0x94, 0xbe, 0xee, 0xff, 0x61, 0x29,
	0x40, 0x51, 0x64, 0x01, 0xca, 0x9c, 0x67, 0x12, 0xdd, 0x0e, 0x54, 0x7a, 0x11, 0x59, 0x86, 0x4a,
	0x1c, 0x51, 0x67, 0xc3, 0xe9, 0xb4, 0x82, 0x4a, 0x1c, 0x11, 0x02, 0xd5, 0x8c, 0xa5, 0x48, 0x2b,
	0x06, 0x31, 0x67, 0xf7, 0xfb, 0x0a, 0xd4, 0x3e, 0xd7, 0x59, 0xc9, 0x7d, 0x68, 0x0c, 0xe2, 0x44,
	0x67, 0xa5, 0x2b, 0x1b, 0x0b, 0x9d, 0xc5, 0xad, 0xab, 0xde, 0x2b, 0xdb, 0x99, 0xf2, 0xcc, 0x33,
	0x75, 0x78, 0x1f, 0x19, 0xf7, 0x60, 0x14, 0x46, 0x76, 0xa0, 0xc6, 0x45, 0x84, 0x82, 0x5e, 0xd8,
	0x70, 0x3a, 0xcb, 0x5b, 0xf7, 0xbc, 0x59, 0xe4, 0xf0, 0x4c, 0x15, 0xde, 0xa7, 0x3a, 0xc1, 0xd3,
	0xc3, 0x1c, 0x03, 0x9b, 0x4b, 0x17, 0x2d, 0xb9, 0x50, 0x74, 0xd5, 0x16, 0xad, 0xcf, 0x1a, 0xcb,
	0xd9, 0x10, 0xe9, 0xc5, 0x0d, 0xa7, 0x53, 0x0b, 0xcc, 0x99, 0xbc, 0x06, 0xcd, 0x1c, 0xc5, 0xae,
	0xc1, 0xa9, 0xc1, 0x1b, 0x39, 0x8a, 0xcf, 0xd8, 0x10, 0xdd, 0xcb, 0xd0, 0x1a, 0xa7, 0x25, 0x0d,
	0x58, 0x78, 0xb0, 0xb3, 0x7d, 0xfe, 0x7f, 0xa4, 0x09, 0xd5, 0x87, 0x8f, 0x76, 0xb6, 0xcf, 0x3b,
	0x6e, 0x0e, 0x4b, 0x9f, 0xb0, 0x8c, 0x0d, 0x51, 0x58, 0x46, 0xe4, 0x12, 0x40, 0x6a, 0x81, 0xdd,
	0x71, 0x03, 0x5b, 0x25, 0xd2, 0x8b, 0x4e, 0x76, 0xaa, 0x32, 0x57, 0xa7, 0xdc, 0x9f, 0xeb, 0xb0,
	0xf0, 0x98, 0xf7, 0xcf, 0xa2, 0x90, 0xc6, 0xd4, 0x61, 0x8e, 0x74, 0xc1, 0x62, 0xfa, 0x4c, 0x28,
	0x34, 0xf4, 0xb0, 0xf2, 0x42, 0xd1, 0xaa, 0xe5, 0x5a, 0x9a, 0xe4, 0x36, 0x54, 0x15, 0x1b, 0x8e,
	0x24, 0x74, 0xa7, 0x15, 0xf6, 0xf1, 0x41, 0x60, 0xfc, 0xc9, 0x7b, 0x00, 0x52, 0x31, 0xa1, 0x76,
	0x75, 0x22, 0x23, 0xe0, 0xe2, 0x56, 0xdb, 0xb3, 0x23, 0xee, 0x8d, 0x46, 0xdc, 0x7b, 0x3a, 0xda,
	0x90, 0xa0, 0x65, 0xbc, 0xb5, 0x4d, 0xde, 0x85, 0x26, 0x66, 0x91, 0x0d, 0x5c, 0x9d, 0x1a, 0xd8,
	0xc0, 0x2c, 0x32, 0x61, 0xab, 0x50, 0x97, 0x8a, 0xa9, 0x42, 0x1a, 0x19, 0x5b, 0x41, 0x69, 0x69,
	0x6e, 0x02, 0x95, 0x88, 0x51, 0xd2, 0xb6, 0xe5, 0x56, 0x9a, 0xe4, 0x75, 0x38, 0x57, 0x1e, 0x77,
	0x13, 0x1c, 0x28, 0xba, 0x66, 0xae, 0x17, 0x4b, 0xec, 0x09, 0x0e, 0x14, 0x09, 0x74, 0xb0, 0x2c,
	0x12, 0x25, 0xe9, 0xba, 0xe9, 0xc0, 0x9d, 0xd9, 0x86, 0x30, 0xb0, 0xc1, 0x01, 0xff, 0x3a, 0x18,
	0x25, 0x22, 0x2b, 0x50, 0xcb, 0x78, 0x84, 0x92, 0x46, 0x1b, 0x0b, 0x9d, 0x56, 0x60, 0x0d, 0xd2,
	0x86, 0x66, 0x2e, 0xf8, 0x20, 0x4e, 0x50, 0x52, 0x34, 0x17, 0x63, 0x5b, 0xcf, 0x8f, 0x76, 0xda,
	0x0d, 0x79, 0x91, 0x29, 0x3a, 0x30, 0x65, 0xb6, 0x34, 0xb2, 0xad, 0x01, 0xf2, 0x06, 0x2c, 0x95,
	0xae, 0xa5, 0xc7, 0xd0, 0x78, 0x9c, 0x2b, 0x41, 0xeb, 0xd4, 0x87, 0x65, 0x93, 0x43, 0x62, 0x82,
	0xa1, 0xe2, 0x42, 0xd2, 0x3d, 0x43, 0xe8, 0xee, 0x6c, 0x84, 0x5e, 0x18, 0xec, 0x60, 0x49, 0xa7,
	0xdc, 0x19, 0x65, 0x24, 0x0f, 0x60, 0x59, 0x86, 0x7b, 0x18, 0x15, 0x09, 0x96, 0xfa, 0xc5, 0x53,
	0xf5, 0x5b, 0x1a, 0x47, 0x18, 0x15, 0x2f, 0x03, 0x08, 0x0c, 0x0b, 0x21, 0x30, 0x0b, 0x91, 0xee,
	0x1b, 0x25, 0x4f, 0x20, 0x64, 0x0d, 0x5a, 0x39, 0x13, 0x98, 0x29, 0xbd, 0x49, 0xcf, 0xcc, 0x75,
	0xd3, 0x02, 0xbd, 0x48, 0x5f, 0xee, 0xf3, 0x7e, 0xd9, 0x84, 0xc4, 0x34, 0xa1, 0xb9, 0xcf, 0xfb,
	0xb6, 0x01, 0x14, 0x1a, 0x11, 0x26, 0xa8, 0x30, 0xa2, 0xe9, 0x86, 0xd3, 0x69, 0x06, 0x23, 0xd3,
	0x0d, 0xa1, 0xfa, 0x98, 0xf7, 0x25, 0x79, 0x04, 0x55, 0x4d, 0x93, 0x3a, 0xa6, 0x31, 0x37, 0x67,
	0x6b, 0xcc, 0x63, 0xde, 0x0f, 0x4c, 0xb8, 0xd6, 0x57, 0x71, 0xc5, 0x12, 0xba, 0x62, 0x2a, 0xb0,
	0x86, 0xfb, 0x8f, 0x03, 0xf0, 0x7c, 0x1a, 0xc8, 0x45, 0x68, 0x18, 0x39, 0xc6, 0xeb, 0x5a, 0xd7,
	0xa6, 0xe5, 0x20, 0x30, 0xe7, 0xc2, 0x10, 0xb4, 0x7b, 0xdb, 0xb4, 0x40, 0x2f, 0x3a, 0x31, 0xe3,
	0x0b, 0x2f, 0xcc, 0xf8, 0x2a, 0xd4, 0xed, 0x74, 0x99, 0xf5, 0x6d, 0x05, 0xa5, 0x45, 0x2e, 0x40,
	0x5d, 0x37, 0x24, 0x8e, 0x68, 0xcd, 0xe0, 0xb5, 0x7d, 0xde, 0xef, 0x45, 0xa7, 0x96, 0x73, 0x65,
	0xde, 0xe5, 0xbc, 0x70, 0xe6, 0xe5, 0xdc, 0xfa, 0x09, 0x60, 0x51, 0xf7, 0x78, 0x07, 0xc5, 0x41,
	0x1c, 0x22, 0xf9, 0xdd, 0x81, 0xfa, 0xb6, 0x40, 0xa6, 0x90, 0xcc, 0xde, 0xe7, 0xf6, 0x8d, 0xd9,
	0x42, 0x7a, 0x91, 0x3b, 0x38, 0x3a, 0xa6, 0x77, 0xe0, 0xe2, 0x73, 0xa7, 0x6e, 0xe9, 0xd4, 0x35,
	0x92, 0x5d, 0x7a, 0xf9, 0x42, 0x57, 0xdb, 0x0d, 0x4d, 0x89, 0x3f, 0xfc, 0xf6, 0xd7, 0x8f, 0x95,
	0x37, 0xdd, 0x2b, 0xe6, 0x8b, 0xfb, 0xe0, 0xc6, 0xa4, 0x97, 0x43, 0xd7, 0xb9, 0x46, 0xfe, 0x70,
	0xa0, 0x1a, 0x20, 0x8b, 0xc8, 0xcc, 0x25, 0xb6, 0x67, 0xef, 0x83, 0x9b, 0x1e, 0x1d, 0xd3, 0x2e,
	0xac, 0x4f, 0x60, 0xd5, 0xfd, 0x36, 0x8e, 0xbe, 0x23, 0xed, 0x09, 0xd4, 0x86, 0xa8, 0x0c, 0xaf,
	0xb7, 0xc9, 0x5b, 0x53, 0x78, 0xf9, 0x71, 0xe4, 0x9b, 0x54, 0xbf, 0x3a, 0x50, 0xff, 0x22, 0x8f,
	0xe6, 0x14, 0x6d, 0xf5, 0xa5, 0x39, 0x79, 0xa4, 0x1f, 0x38, 0xae, 0x3c, 0x3a, 0xa6, 0xf7, 0xa6,
	0x90, 0x98, 0xa4, 0x4f, 0x61, 0xaa, 0x31, 0x3c, 0xae, 0xb7, 0xcf, 0xca, 0x43, 0xeb, 0xf4, 0x8b,
	0x03, 0xf5, 0x87, 0x66, 0xfd, 0xe7, 0x50, 0x6a, 0x12, 0x93, 0xfc, 0x3f, 0x30, 0xb1, 0xff, 0x8b,
	0xac, 0x22, 0xd7, 0xce, 0xac, 0xc8, 0x9f, 0x0e, 0x54, 0x9f, 0xc4, 0x52, 0x91, 0x5b, 0x73, 0xbc,
	0x8d, 0xda, 0x5b, 0x33, 0x8b, 0x28, 0xdd, 0x67, 0x47, 0xc7, 0xf4, 0xf6, 0xe4, 0x45, 0x5a, 0x9b,
	0x40, 0x2f, 0x89, 0xa5, 0x1d, 0xb7, 0x77, 0xdc, 0xab, 0xd3, 0xc8, 0x49, 0x64, 0x22, 0xdc, 0xd3,
	0x2a, 0xfd, 0xed, 0x40, 0xcd, 0x3c, 0x44, 0xe7, 0x10, 0xe9, 0xee, 0xac, 0x5f, 0xd4, 0x27, 0xdf,
	0xbb, 0xc5, 0xd1, 0x31, 0x7d, 0x7f, 0x8a, 0x92, 0xeb, 0x13, 0xa8, 0x0a, 0x9d, 0xc9, 0x70, 0xf5,
	0xc9, 0xe6, 0x34, 0xae, 0xc6, 0x79, 0x24, 0xe7, 0x87, 0x1f, 0x7c, 0x79, 0x6f, 0x18, 0xab, 0xbd,
	0xa2, 0xaf, 0x2b, 0xf5, 0x75, 0xfd, 0xe3, 0xc7, 0xfe, 0x99, 0x7e, 0xbb, 0xf4, 0xeb, 0x66, 0x22,
	0x6f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xa5, 0x8a, 0xe5, 0xea, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JobsServiceClient is the client API for JobsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobsServiceClient interface {
	//
	//Create a scan job
	//
	//Creates a scan job. A scan job executes Chef InSpec against the specified nodes.
	//Requires a user-specified name. Type should be `detect` (checks if the node is reachable and reports the
	//platform information for the nodes) or `exec` (executes a set of profiles against the nodes).
	//Nodes to scan may be specified by including an array of node IDs to scan or a node manager ID along with some optional
	//filtering information.
	//Exec jobs require at least one profile to be used as part of the Chef InSpec scan.
	//Optional recurrence schedules enable regularly scheduled (repeating) scans.
	//
	//Example:
	//```
	//{
	//"name": "my testjob",
	//"tags": [],
	//"type": "exec",
	//"nodes": ["i07uc612-7e97-43f2-9b19-256abh785820"],
	//"profiles": ["https://github.com/dev-sec/linux-baseline/archive/master.tar.gz", "compliance://admin/ssh-baseline#2.2.0"],
	//"retries": 1,
	//"node_selectors":[
	//{
	//"manager_id":"e69dc612-7e67-43f2-9b19-256afd385820",
	//"filters":[{"key":"name","values":["ins*"],"exclude":false}]
	//}
	//],
	//"recurrence":"DTSTART=20191231T045100Z;FREQ=DAILY;INTERVAL=1"
	//}
	//```
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:create
	//```
	Create(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Id, error)
	//
	//Read a scan job
	//
	//Read the details of a scan job given an ID.
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:get
	//```
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error)
	//
	//Update a job
	//
	//PUT operation to update the details for a scan job, such as the name, profiles, node set, or recurrence schedule.
	//Please note that this is a PUT operation, so all scan job details included in the create function
	//should be included in the PUT message to update.
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:update
	//```
	Update(ctx context.Context, in *Job, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	//Delete a scan job
	//
	//Delete a scan job given an ID. Note this does not delete the report(s) generated by the scan job.
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:delete
	//```
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	//List of scan jobs
	//
	//Returns a list of scan jobs matching the query.
	//Supports filtering, sorting, and pagination.
	//Valid filtering fields: job_type, parent_job, status
	//Valid sorting fields: name, type, status, start_time, end_time
	//
	//Example:
	//```
	//{
	//"filters":[
	//{"key":"job_type","values":["exec"]},
	//{"key":"parent_job","values":[""]}
	//],
	//"page":1,
	//"per_page":100,
	//"sort":"end_time",
	//"order":"DESC"
	//}
	//```
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:list
	//```
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Jobs, error)
	//
	//Rerun a scan job
	//
	//Does not create a new job in the database. Reads the job info given the job ID
	//and runs a scan. The latest job information is then updated to reflect this latest run.
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:rerun
	//```
	Rerun(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RerunResponse, error)
}

type jobsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsServiceClient(cc grpc.ClientConnInterface) JobsServiceClient {
	return &jobsServiceClient{cc}
}

func (c *jobsServiceClient) Create(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Update(ctx context.Context, in *Job, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Jobs, error) {
	out := new(Jobs)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Rerun(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RerunResponse, error) {
	out := new(RerunResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Rerun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsServiceServer is the server API for JobsService service.
type JobsServiceServer interface {
	//
	//Create a scan job
	//
	//Creates a scan job. A scan job executes Chef InSpec against the specified nodes.
	//Requires a user-specified name. Type should be `detect` (checks if the node is reachable and reports the
	//platform information for the nodes) or `exec` (executes a set of profiles against the nodes).
	//Nodes to scan may be specified by including an array of node IDs to scan or a node manager ID along with some optional
	//filtering information.
	//Exec jobs require at least one profile to be used as part of the Chef InSpec scan.
	//Optional recurrence schedules enable regularly scheduled (repeating) scans.
	//
	//Example:
	//```
	//{
	//"name": "my testjob",
	//"tags": [],
	//"type": "exec",
	//"nodes": ["i07uc612-7e97-43f2-9b19-256abh785820"],
	//"profiles": ["https://github.com/dev-sec/linux-baseline/archive/master.tar.gz", "compliance://admin/ssh-baseline#2.2.0"],
	//"retries": 1,
	//"node_selectors":[
	//{
	//"manager_id":"e69dc612-7e67-43f2-9b19-256afd385820",
	//"filters":[{"key":"name","values":["ins*"],"exclude":false}]
	//}
	//],
	//"recurrence":"DTSTART=20191231T045100Z;FREQ=DAILY;INTERVAL=1"
	//}
	//```
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:create
	//```
	Create(context.Context, *Job) (*Id, error)
	//
	//Read a scan job
	//
	//Read the details of a scan job given an ID.
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:get
	//```
	Read(context.Context, *Id) (*Job, error)
	//
	//Update a job
	//
	//PUT operation to update the details for a scan job, such as the name, profiles, node set, or recurrence schedule.
	//Please note that this is a PUT operation, so all scan job details included in the create function
	//should be included in the PUT message to update.
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:update
	//```
	Update(context.Context, *Job) (*empty.Empty, error)
	//
	//Delete a scan job
	//
	//Delete a scan job given an ID. Note this does not delete the report(s) generated by the scan job.
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:delete
	//```
	Delete(context.Context, *Id) (*empty.Empty, error)
	//
	//List of scan jobs
	//
	//Returns a list of scan jobs matching the query.
	//Supports filtering, sorting, and pagination.
	//Valid filtering fields: job_type, parent_job, status
	//Valid sorting fields: name, type, status, start_time, end_time
	//
	//Example:
	//```
	//{
	//"filters":[
	//{"key":"job_type","values":["exec"]},
	//{"key":"parent_job","values":[""]}
	//],
	//"page":1,
	//"per_page":100,
	//"sort":"end_time",
	//"order":"DESC"
	//}
	//```
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:list
	//```
	List(context.Context, *Query) (*Jobs, error)
	//
	//Rerun a scan job
	//
	//Does not create a new job in the database. Reads the job info given the job ID
	//and runs a scan. The latest job information is then updated to reflect this latest run.
	//
	//Authorization Action:
	//
	//```
	//compliance:scannerJobs:rerun
	//```
	Rerun(context.Context, *Id) (*RerunResponse, error)
}

// UnimplementedJobsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJobsServiceServer struct {
}

func (*UnimplementedJobsServiceServer) Create(ctx context.Context, req *Job) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedJobsServiceServer) Read(ctx context.Context, req *Id) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedJobsServiceServer) Update(ctx context.Context, req *Job) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedJobsServiceServer) Delete(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedJobsServiceServer) List(ctx context.Context, req *Query) (*Jobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedJobsServiceServer) Rerun(ctx context.Context, req *Id) (*RerunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rerun not implemented")
}

func RegisterJobsServiceServer(s *grpc.Server, srv JobsServiceServer) {
	s.RegisterService(&_JobsService_serviceDesc, srv)
}

func _JobsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Create(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Update(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).List(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Rerun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Rerun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Rerun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Rerun(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.compliance.scanner.jobs.v1.JobsService",
	HandlerType: (*JobsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _JobsService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _JobsService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _JobsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JobsService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _JobsService_List_Handler,
		},
		{
			MethodName: "Rerun",
			Handler:    _JobsService_Rerun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/compliance/scanner/jobs/jobs.proto",
}
