syntax = "proto3";

package chef.automate.api.cfgmgmt;
option go_package = "github.com/chef/automate/api/external/cfgmgmt";

// Local request & response messages
import "api/external/cfgmgmt/request/actions.proto";
import "api/external/cfgmgmt/request/nodes.proto";
import "api/external/cfgmgmt/request/stats.proto";
import "api/external/cfgmgmt/request/root.proto";

import "api/external/cfgmgmt/response/actions.proto";
import "api/external/cfgmgmt/response/nodes.proto";
import "api/external/cfgmgmt/response/stats.proto";

import "api/external/common/query/parameters.proto";
import "api/external/common/version/version.proto";

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service ConfigMgmt {
  /*
  GetNodes

  Returns a list of infra nodes that have checked in to Automate. 
  Adding a filter makes a list of all nodes that meet the filter criteria. 
  Filters for the same field are ORd together, while filters across different fields are ANDed together.
  Supports pagination, filtering, and sorting.
	*/
  rpc GetNodes(cfgmgmt.request.Nodes) returns (google.protobuf.ListValue) {
    option (google.api.http).get = "/cfgmgmt/nodes";
    option (chef.automate.api.policy).resource = "cfgmgmt:nodes";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  GetRuns

  Returns a list of run metadata (id, start and end time, and status) for the provided node id. 
  Supports pagination.
  Accepts a `start` parameter to denote start date for the list and a filter of type `status`.
	*/
  rpc GetRuns(cfgmgmt.request.Runs) returns (google.protobuf.ListValue) {
    option (google.api.http).get = "/cfgmgmt/nodes/{node_id}/runs";
    option (chef.automate.api.policy).resource = "cfgmgmt:nodes:{node_id}:runs";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra:nodes:{node_id}";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  GetNodesCounts

  Returns totals for failed, success, missing, and overall total infra nodes that have reported into Automate.
	*/
  rpc GetNodesCounts (cfgmgmt.request.NodesCounts) returns (cfgmgmt.response.NodesCounts) {
    option (google.api.http).get = "/cfgmgmt/stats/node_counts";
    option (chef.automate.api.policy).resource = "cfgmgmt:stats:node_counts";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  GetRunsCounts

  Returns totals for failed and successful runs given a `node_id`.
	*/
  rpc GetRunsCounts (cfgmgmt.request.RunsCounts) returns (cfgmgmt.response.RunsCounts) {
    option (google.api.http).get = "/cfgmgmt/stats/run_counts";
    option (chef.automate.api.policy).resource = "cfgmgmt:stats:run_counts";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  GetNodeRun

  Returns the infra run report for the provided node id and run id.
	*/
  rpc GetNodeRun (cfgmgmt.request.NodeRun) returns (cfgmgmt.response.Run) {
    option (google.api.http).get = "/cfgmgmt/nodes/{node_id}/runs/{run_id}";
    option (chef.automate.api.policy).resource = "cfgmgmt:nodes:{node_id}:runs:{run_id}";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra:nodes:{node_id}";
    option (chef.automate.api.iam.policy).action = "infra:nodes:get";
  };

  /*
  GetSuggestions

  Returns possible filter values given a valid `type` parameter. All values returned until two or more
  characters are provided for the `text` parameter.
  Supports wildcard (* and ?).
	*/
  rpc GetSuggestions (common.query.Suggestion) returns (google.protobuf.ListValue) {
    option (google.api.http).get = "/cfgmgmt/suggestions";
    // if you can get nodes, you are allowed to get suggested fields on nodes
    option (chef.automate.api.policy).resource = "cfgmgmt:nodes";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  GetOrganizations

  Returns a list of all organizations associated with nodes that have checked in to Automate.
	*/
  rpc GetOrganizations(cfgmgmt.request.Organizations) returns (google.protobuf.ListValue) {
    option (google.api.http).get = "/cfgmgmt/organizations";
    // if you can get nodes, you are allowed to get the organization field on nodes
    option (chef.automate.api.policy).resource = "cfgmgmt:nodes";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  GetSourceFqdns

  Returns a list of all chef servers associated with nodes that have checked in to Automate.
	*/
  rpc GetSourceFqdns(cfgmgmt.request.SourceFqdns) returns (google.protobuf.ListValue) {
    option (google.api.http).get = "/cfgmgmt/source_fqdns";
    // if you can get nodes, you are allowed to get the source fqdn field on nodes
    option (chef.automate.api.policy).resource = "cfgmgmt:nodes";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  GetAttributes

  Returns the latest reported attributes for the provided node id.
	*/
  rpc GetAttributes (cfgmgmt.request.Node) returns (cfgmgmt.response.NodeAttribute) {
    option (google.api.http).get = "/cfgmgmt/nodes/{node_id}/attribute";
    option (chef.automate.api.policy).resource = "cfgmgmt:nodes:{node_id}:attribute";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra:nodes:{node_id}";
    option (chef.automate.api.iam.policy).action = "infra:nodes:get";
  };

  rpc GetVersion(common.version.VersionInfoRequest) returns (common.version.VersionInfo) {
    option (google.api.http).get =  "/cfgmgmt/version";
    option (chef.automate.api.policy).resource = "service_info:version";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "system:service:version";
    option (chef.automate.api.iam.policy).action = "system:serviceVersion:get";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "hidden";
		};
  };

  /*
  GetPolicyCookbooks

  Returns Policy Names with a list of cookbook names and associated policy identifiers based on a policy revision ID. 
  Policy revision ids are sent with an infra run report and identifies which instance of a policy the node used for this run.
	*/
  rpc GetPolicyCookbooks(cfgmgmt.request.PolicyRevision) returns (cfgmgmt.response.PolicyCookbooks) {
    option (google.api.http).get =  "/cfgmgmt/policy_revision/{revision_id}";
    option (chef.automate.api.policy).resource = "cfgmgmt:nodes:{revision_id}";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "infra:nodes:{revision_id}";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };
}
