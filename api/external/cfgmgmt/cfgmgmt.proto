syntax = "proto3";

package chef.automate.api.cfgmgmt;
option go_package = "github.com/chef/automate/api/external/cfgmgmt";

// Local request & response messages
import "external/cfgmgmt/request/actions.proto";
import "external/cfgmgmt/request/nodes.proto";
import "external/cfgmgmt/request/rollouts.proto";
import "external/cfgmgmt/request/stats.proto";
import "external/cfgmgmt/request/errors.proto";
import "external/cfgmgmt/request/root.proto";
import "external/cfgmgmt/request/telemetry.proto";

import "external/cfgmgmt/response/actions.proto";
import "external/cfgmgmt/response/nodes.proto";
import "external/cfgmgmt/response/rollouts.proto";
import "external/cfgmgmt/response/stats.proto";
import "external/cfgmgmt/response/errors.proto";
import "external/cfgmgmt/response/telemetry.proto";

import "external/common/query/parameters.proto";
import "external/common/version/version.proto";
import "external/common/response.proto";

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "external/annotations/iam/annotations.proto";

service ConfigMgmt {
  /*
  List Checked-in Nodes

  Returns a list of infra nodes that have checked in to Automate.
  Adding a filter makes a list of all nodes that meet the filter criteria.
  Filters for the same field are ORd together, while filters across different fields are ANDed together.
  Supports pagination, filtering (with wildcard support), and sorting.
	Max return payload size is 4MB, use pagination to fetch remaining data.

  Example:
  ```
  cfgmgmt/nodes?pagination.page=1&pagination.size=100&sorting.field=name&sorting.order=ASC&filter=name:mySO*&filter=platform:ubun*
  ```

	Authorization Action:
	```
	infra:nodes:list
	```
	*/
  rpc GetNodes(cfgmgmt.request.Nodes) returns (google.protobuf.ListValue) {
    option (google.api.http).get = "/api/v0/cfgmgmt/nodes";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  List Run Details

  Returns a list of run metadata (id, start and end time, and status) for the provided node ID.
  Supports pagination.
  Accepts a `start` parameter to denote start date for the list and a filter of type `status`.

	Authorization Action:
	```
	infra:nodes:list
	```
	*/
  rpc GetRuns(cfgmgmt.request.Runs) returns (google.protobuf.ListValue) {
    option (google.api.http).get = "/api/v0/cfgmgmt/nodes/{node_id}/runs";
    option (chef.automate.api.iam.policy).resource = "infra:nodes:{node_id}";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  List Node Status Counts

  Returns totals for failed, success, missing, and overall total infra nodes that have reported into Automate.
  Supports filtering.

  Example:
  ```
  cfgmgmt/stats/node_counts?filter=name:mySO*&filter=platform:ubun*
  ```

	Authorization Action:
	```
	infra:nodes:list
	```
	*/
  rpc GetNodesCounts (cfgmgmt.request.NodesCounts) returns (cfgmgmt.response.NodesCounts) {
    option (google.api.http).get = "/api/v0/cfgmgmt/stats/node_counts";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  List Run Status Totals

  Returns totals for failed and successful runs given a `node_id`.

  Example:
  ```
  cfgmgmt/stats/run_counts?node_id=821fff07-abc9-4160-96b1-83d68ae5cfdd&start=2019-11-02
  ```

	Authorization Action:
	```
	infra:nodes:list
	```
	*/
  rpc GetRunsCounts (cfgmgmt.request.RunsCounts) returns (cfgmgmt.response.RunsCounts) {
    option (google.api.http).get = "/api/v0/cfgmgmt/stats/run_counts";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  List Node Checkins

  Returns a daily time series of unique node check-ins for the number of days requested.
  If `days ago` value is empty, API will return the default 1 day ago results.

	Authorization Action:
	```
	infra:nodes:list
	```
	*/
  rpc GetCheckInCountsTimeSeries(cfgmgmt.request.CheckInCountsTimeSeries) returns (cfgmgmt.response.CheckInCountsTimeSeries) {
    option (google.api.http).get =  "/api/v0/cfgmgmt/stats/checkin_counts_timeseries";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  List Missing Nodes Count 

  Returns a count of missing nodes for the provided durations.

  Example:
  ```
  cfgmgmt/stats/missing_node_duration_counts?durations=3d&durations=1w&durations=2w&durations=1M&durations=3M
  ```

  Authorization Action:
  ```
  infra:nodes:list
  ```
  */
  rpc GetMissingNodeDurationCounts(cfgmgmt.request.MissingNodeDurationCounts) returns (cfgmgmt.response.MissingNodeDurationCounts) {
    option (google.api.http).get =  "/api/v0/cfgmgmt/stats/missing_node_duration_counts";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  Show Node Run

  Returns the infra run report for the provided node ID and run ID.

	Authorization Action:
	```
	infra:nodes:get
	```
	*/
  rpc GetNodeRun (cfgmgmt.request.NodeRun) returns (cfgmgmt.response.Run) {
    option (google.api.http).get = "/api/v0/cfgmgmt/nodes/{node_id}/runs/{run_id}";
    option (chef.automate.api.iam.policy).resource = "infra:nodes:{node_id}";
    option (chef.automate.api.iam.policy).action = "infra:nodes:get";
  };

  /*
  List Filter Suggestions

  Returns possible filter values given a valid `type` parameter. All values returned until two or more characters are provided for the `text` parameter.
  Supports wildcard (* and ?).

  Example:
  ```
  cfgmgmt/suggestions?type=environment&text=_d
  ```

	Authorization Action:
	```
	infra:nodes:list
	```
	*/
  rpc GetSuggestions (common.query.Suggestion) returns (google.protobuf.ListValue) {
    option (google.api.http).get = "/api/v0/cfgmgmt/suggestions";
    // if you can get nodes, you are allowed to get suggested fields on nodes
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  List Organizations

  Returns a list of all organizations associated with nodes that have checked in to Automate.

	Authorization Action:
	```
	infra:nodes:list
	```
	*/
  rpc GetOrganizations(cfgmgmt.request.Organizations) returns (google.protobuf.ListValue) {
    option (google.api.http).get = "/api/v0/cfgmgmt/organizations";
    // if you can get nodes, you are allowed to get the organization field on nodes
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  List Associated Chef Infra Servers

  Returns a list of all Chef Infra Servers associated with nodes that have checked in to Automate.

	Authorization Action:
	```
	infra:nodes:list
	```
	*/
  rpc GetSourceFqdns(cfgmgmt.request.SourceFqdns) returns (google.protobuf.ListValue) {
    option (google.api.http).get = "/api/v0/cfgmgmt/source_fqdns";
    // if you can get nodes, you are allowed to get the source fqdn field on nodes
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  Show Attributes

  Returns the latest reported attributes for the provided node ID.

	Authorization Action:
	```
	infra:nodes:get
	```
	*/
  rpc GetAttributes (cfgmgmt.request.Node) returns (cfgmgmt.response.NodeAttribute) {
    option (google.api.http).get = "/api/v0/cfgmgmt/nodes/{node_id}/attribute";
    option (chef.automate.api.iam.policy).resource = "infra:nodes:{node_id}";
    option (chef.automate.api.iam.policy).action = "infra:nodes:get";
  };

  rpc GetVersion(common.version.VersionInfoRequest) returns (common.version.VersionInfo) {
    option (google.api.http).get =  "/api/v0/cfgmgmt/version";
    option (chef.automate.api.iam.policy).resource = "system:service:version";
    option (chef.automate.api.iam.policy).action = "system:serviceVersion:get";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "hidden";
		};
  };

  /*
  List Policy Cookbooks

  Returns Policy Names with a list of cookbook names and associated policy identifiers based on a policy revision ID. 
  Policy revision IDs are sent with an infra run report and identifies which instance of a policy the node used for this run.

	Authorization Action:
	```
	infra:nodes:list
	```
	*/
  rpc GetPolicyCookbooks(cfgmgmt.request.PolicyRevision) returns (cfgmgmt.response.PolicyCookbooks) {
    option (google.api.http).get =  "/api/v0/cfgmgmt/policy_revision/{revision_id}";
    option (chef.automate.api.iam.policy).resource = "infra:nodes:{revision_id}";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  List Errors

  Returns a list of the most common errors reported for infra nodes' most recent Chef Infra Client runs.

  Authorization Action:
  ```
  infra:nodes:list
  ```
  */
  rpc GetErrors(cfgmgmt.request.Errors) returns (cfgmgmt.response.Errors) {
    option (google.api.http).get = "/api/v0/cfgmgmt/errors";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  }

  rpc NodeExport(cfgmgmt.request.NodeExport) returns (stream chef.automate.api.common.ExportData) {};

  rpc ReportExport(cfgmgmt.request.ReportExport) returns (stream chef.automate.api.common.ExportData) {};

  /*
  GetNodeMetadataCounts

  For each type of field requested this returns distinct values the amount of each. For example, 
  if the 'platform' field is requested 'windows' 10, 'redhat' 5, and 'ubuntu' 8 could be returned. 
  The number next to each represents the number of nodes with that type of platform.

  Example:
  request
  ```
  cfgmgmt/node_metadata_counts?type=platform&type=status
  ```
  response
  ```
  {
    "types": [
      {
        "values": [
          {
            "value": "mac_os_x 10.11.5",
            "count": 28
          },
          {
            "value": "linux 8.9",
            "count": 1
          },
          {
            "value": "macos 8.9",
            "count": 1
          },
          {
            "value": "windows 8.9",
            "count": 1
          }
        ],
        "type": "platform"
      },
      {
        "value": [
          {
            "value": "missing",
            "count": 29
          },
          {
            "value": "failure",
            "count": 2
          }
        ],
        "type": "status"
      }
    ]
  }
  ```

  Authorization Action:
  ```
  infra:nodes:list
  ```
  */
  rpc GetNodeMetadataCounts(cfgmgmt.request.NodeMetadataCounts) returns (cfgmgmt.response.NodeMetadataCounts) {
    option (google.api.http).get = "/api/v0/cfgmgmt/node_metadata_counts";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  }

    /*
  GetNodeRunsDailyStatusTimeSeries

  Provides the status of runs for each 24-hour duration. For multiple runs in one 24-hour duration, 
  the most recent failed run will be returned. If there are no failed runs the most recent successful 
  run will be returned. If no runs are found in the 24-hour duration, the status will be "missing" 
  and no run information will be returned.

    Example:
  request
  ```
  cfgmgmt/node_runs_daily_status_time_series?node_id=507bd518-5c18-4c2d-a445-60fe7dde9961&days_ago=3
  ```
  response
  ```
  {
    "durations": [
      {
        "start": "2020-04-25T19:00:00Z",
        "end": "2020-04-26T18:59:59Z",
        "status": "missing",
        "run_id": ""
      },
      {
        "start": "2020-04-26T19:00:00Z",
        "end": "2020-04-27T18:59:59Z",
        "status": "missing",
        "run_id": ""
      },
      {
        "start": "2020-04-27T19:00:00Z",
        "end": "2020-04-28T18:59:59Z",
        "status": "failure",
        "run_id": "b7904f41-68b5-44ec-9da6-cf2481ff8600"
      }
    ]
  }
  ```

  Authorization Action:
  ```
  infra:nodes:list
  ```
  */
  rpc GetNodeRunsDailyStatusTimeSeries(cfgmgmt.request.NodeRunsDailyStatusTimeSeries) returns (cfgmgmt.response.NodeRunsDailyStatusTimeSeries) {
    option (google.api.http).get = "/api/v0/cfgmgmt/node_runs_daily_status_time_series";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  }

  /*
  CreateRollout

  Creates a Rollout record. A rollout represents the process of nodes acquiring
  the latest policy revision pushed to a policy group.

  Authorization Action:
  ```
  ingest:unifiedEvents:create
  ```
  */
  rpc CreateRollout(cfgmgmt.request.CreateRollout) returns (cfgmgmt.response.Rollout) {
    option (google.api.http) = {
      post: "/api/beta/cfgmgmt/rollouts/create"
      body: "*"
    };
    option (chef.automate.api.iam.policy).resource = "ingest:unifiedEvents";
    option (chef.automate.api.iam.policy).action = "ingest:unifiedEvents:create";
  };

  /*
  CreateRolloutTest

  CreateRolloutTest is a no-op endpoint that has the same auth requirements as
  CreateRollout. It can be used to verify end-to-end config/connectivity for
  clients

  Authorization Action:
  ```
  ingest:unifiedEvents:create
  ```
  */
  rpc CreateRolloutTest(cfgmgmt.request.CreateRolloutTest) returns (cfgmgmt.response.CreateRolloutTest) {
    option (google.api.http) = {
      post: "/api/beta/cfgmgmt/rollouts/test_create"
      body: "*"
    };
    option (chef.automate.api.iam.policy).resource = "ingest:unifiedEvents";
    option (chef.automate.api.iam.policy).action = "ingest:unifiedEvents:create";
  };

  /*
  GetRollouts

  Gives a list of rollouts

  Authorization Action:
  ```
  infra:nodes:list
  ```
  */
  rpc GetRollouts(cfgmgmt.request.Rollouts) returns (cfgmgmt.response.Rollouts) {
    option (google.api.http).get = "/api/beta/cfgmgmt/rollouts/list";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  }

  /*
  GetRolloutById

  Returns the rollout with the given Id

  Authorization Action:
  ```
  infra:nodes:list
  ```
  */
  rpc GetRolloutById(cfgmgmt.request.RolloutById) returns (cfgmgmt.response.Rollout) {
    option (google.api.http).get = "/api/beta/cfgmgmt/rollouts/rollout/{rollout_id}";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  /*
  GetRolloutForChefRun

  Returns the rollout for the given Chef Server/org, policy group, policy name, and policy revision

  Authorization Action:
  ```
  infra:nodes:list
  ```
  */
  rpc GetRolloutForChefRun(cfgmgmt.request.RolloutForChefRun) returns (cfgmgmt.response.Rollout) {
    option (google.api.http).get = "/api/beta/cfgmgmt/rollouts/find";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  };

  rpc ListNodeSegmentsWithRolloutProgress(cfgmgmt.request.ListNodeSegmentsWithRolloutProgress) returns (cfgmgmt.response.NodeSegmentsWithRolloutProgress) {
    option (google.api.http).get = "/api/beta/cfgmgmt/rollouts/progress_by_node_segment";
    option (chef.automate.api.iam.policy).resource = "infra:nodes";
    option (chef.automate.api.iam.policy).action = "infra:nodes:list";
  }

  /*
	UpdateTelemetryReported
	Acknowledge API  to updates the last client run telemetry reported date in postgres
	Authorization Action:
	```
	iam:introspect:getAll
	```
	*/
	rpc UpdateTelemetryReported(cfgmgmt.request.UpdateTelemetryReportedRequest) returns (cfgmgmt.response.UpdateTelemetryReportedResponse) {
		option (google.api.http) = {
			put: "/api/v0/cfgmgmt/telemetry/nodes/count/updated"
			body: "*"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "iam:introspect"
			action: "iam:introspect:getAll"
		};
	};

  /*
	GetNodesUsageCount
	
	Returns the count of unique nodes with lastRun in a given time.
	The time duration can be between the last time Telemetry data sent and the day before the current date.
	If the duration < 15 days --> 15 days
	duration > 15 days --> duration
	Authorization Action:
	```
	iam:introspect:getAll
	```
	*/
	rpc GetNodesUsageCount(cfgmgmt.request.GetNodesUsageCountRequest) returns (cfgmgmt.response.GetNodesUsageCountResponse) {
		option (google.api.http) = {
			get: "/api/v0/cfgmgmt/telemetry/nodes/count"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "iam:introspect"
			action: "iam:introspect:getAll"
		};
	};
}
