// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/cfgmgmt/request/rollouts.proto

package request

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SCMType int32

const (
	SCMType_UNKNOWN_SCM SCMType = 0
	SCMType_GIT         SCMType = 1
)

var SCMType_name = map[int32]string{
	0: "UNKNOWN_SCM",
	1: "GIT",
}

var SCMType_value = map[string]int32{
	"UNKNOWN_SCM": 0,
	"GIT":         1,
}

func (x SCMType) String() string {
	return proto.EnumName(SCMType_name, int32(x))
}

func (SCMType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8cacd55819479c9d, []int{0}
}

type SCMWebType int32

const (
	SCMWebType_UNKNOWN_SCM_WEB SCMWebType = 0
	SCMWebType_GITHUB          SCMWebType = 1
)

var SCMWebType_name = map[int32]string{
	0: "UNKNOWN_SCM_WEB",
	1: "GITHUB",
}

var SCMWebType_value = map[string]int32{
	"UNKNOWN_SCM_WEB": 0,
	"GITHUB":          1,
}

func (x SCMWebType) String() string {
	return proto.EnumName(SCMWebType_name, int32(x))
}

func (SCMWebType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8cacd55819479c9d, []int{1}
}

type CreateRollout struct {
	// The name of the policy, i.e., the `name` attribute in the Policyfile
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// The group of nodes which are targeted by the rollout. In the Chef Server
	// case, this is the policy_group to which the user is pushing the policy.
	PolicyNodeGroup string `protobuf:"bytes,2,opt,name=policy_node_group,json=policyNodeGroup,proto3" json:"policy_node_group,omitempty"`
	// The revision_id of the compiled policy being rolled out
	PolicyRevisionId string `protobuf:"bytes,3,opt,name=policy_revision_id,json=policyRevisionId,proto3" json:"policy_revision_id,omitempty"`
	// In the Chef Server case, the policy domain URL is the Chef Server URL
	// with the `/organizations/:orgname` portion of the URL path included. In
	// general, this can be a URL for any content storage/distribution service,
	// as long as the combination of policy_name and policy_node_group is unique
	// on that system.
	//
	// The set of nodes configured to fetch policy content from the
	// policy_domain_url and configured with the same policy_name and
	// policy_node_group form the target set of nodes for a rollout and are
	// expected to apply the policy revision described by the rollout.
	PolicyDomainUrl string `protobuf:"bytes,4,opt,name=policy_domain_url,json=policyDomainUrl,proto3" json:"policy_domain_url,omitempty"`
	// The source control system used with the policyfile
	ScmType SCMType `protobuf:"varint,5,opt,name=scm_type,json=scmType,proto3,enum=chef.automate.api.cfgmgmt.request.SCMType" json:"scm_type,omitempty"`
	// The software/service used to host the source code repository
	ScmWebType SCMWebType `protobuf:"varint,6,opt,name=scm_web_type,json=scmWebType,proto3,enum=chef.automate.api.cfgmgmt.request.SCMWebType" json:"scm_web_type,omitempty"`
	// The URL used to obtain a copy of the source code repository
	PolicyScmUrl string `protobuf:"bytes,7,opt,name=policy_scm_url,json=policyScmUrl,proto3" json:"policy_scm_url,omitempty"`
	// The URL used to view the source code repository via the web
	PolicyScmWebUrl string `protobuf:"bytes,8,opt,name=policy_scm_web_url,json=policyScmWebUrl,proto3" json:"policy_scm_web_url,omitempty"`
	// The source control system's identifier for the repository version. This
	// should be the version where the policy's lockfile was committed.
	PolicyScmCommit string `protobuf:"bytes,9,opt,name=policy_scm_commit,json=policyScmCommit,proto3" json:"policy_scm_commit,omitempty"`
	// A free-form description of the rollout, as given by the user.
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// If the rollout was initiated via Ci/CD or similar system, the web URL
	// for the job that initiated the rollout.
	CiJobUrl string `protobuf:"bytes,11,opt,name=ci_job_url,json=ciJobUrl,proto3" json:"ci_job_url,omitempty"`
	// If the rollout was initiated by Ci/CD or similar system, the id of the job
	// that initiated the rollout. Should include the Ci system's nickname or
	// other identifying information users would need to associate the job ID to
	// the Ci/CD system.
	CiJobId              string   `protobuf:"bytes,12,opt,name=ci_job_id,json=ciJobId,proto3" json:"ci_job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRollout) Reset()         { *m = CreateRollout{} }
func (m *CreateRollout) String() string { return proto.CompactTextString(m) }
func (*CreateRollout) ProtoMessage()    {}
func (*CreateRollout) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cacd55819479c9d, []int{0}
}

func (m *CreateRollout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRollout.Unmarshal(m, b)
}
func (m *CreateRollout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRollout.Marshal(b, m, deterministic)
}
func (m *CreateRollout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRollout.Merge(m, src)
}
func (m *CreateRollout) XXX_Size() int {
	return xxx_messageInfo_CreateRollout.Size(m)
}
func (m *CreateRollout) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRollout.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRollout proto.InternalMessageInfo

func (m *CreateRollout) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *CreateRollout) GetPolicyNodeGroup() string {
	if m != nil {
		return m.PolicyNodeGroup
	}
	return ""
}

func (m *CreateRollout) GetPolicyRevisionId() string {
	if m != nil {
		return m.PolicyRevisionId
	}
	return ""
}

func (m *CreateRollout) GetPolicyDomainUrl() string {
	if m != nil {
		return m.PolicyDomainUrl
	}
	return ""
}

func (m *CreateRollout) GetScmType() SCMType {
	if m != nil {
		return m.ScmType
	}
	return SCMType_UNKNOWN_SCM
}

func (m *CreateRollout) GetScmWebType() SCMWebType {
	if m != nil {
		return m.ScmWebType
	}
	return SCMWebType_UNKNOWN_SCM_WEB
}

func (m *CreateRollout) GetPolicyScmUrl() string {
	if m != nil {
		return m.PolicyScmUrl
	}
	return ""
}

func (m *CreateRollout) GetPolicyScmWebUrl() string {
	if m != nil {
		return m.PolicyScmWebUrl
	}
	return ""
}

func (m *CreateRollout) GetPolicyScmCommit() string {
	if m != nil {
		return m.PolicyScmCommit
	}
	return ""
}

func (m *CreateRollout) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateRollout) GetCiJobUrl() string {
	if m != nil {
		return m.CiJobUrl
	}
	return ""
}

func (m *CreateRollout) GetCiJobId() string {
	if m != nil {
		return m.CiJobId
	}
	return ""
}

type Rollouts struct {
	// Filters to apply to the request for the rollouts list.
	Filter               []string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rollouts) Reset()         { *m = Rollouts{} }
func (m *Rollouts) String() string { return proto.CompactTextString(m) }
func (*Rollouts) ProtoMessage()    {}
func (*Rollouts) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cacd55819479c9d, []int{1}
}

func (m *Rollouts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rollouts.Unmarshal(m, b)
}
func (m *Rollouts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rollouts.Marshal(b, m, deterministic)
}
func (m *Rollouts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rollouts.Merge(m, src)
}
func (m *Rollouts) XXX_Size() int {
	return xxx_messageInfo_Rollouts.Size(m)
}
func (m *Rollouts) XXX_DiscardUnknown() {
	xxx_messageInfo_Rollouts.DiscardUnknown(m)
}

var xxx_messageInfo_Rollouts proto.InternalMessageInfo

func (m *Rollouts) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type RolloutsProgress struct {
	// Filters to apply to the request for the rollouts list.
	Filter               []string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RolloutsProgress) Reset()         { *m = RolloutsProgress{} }
func (m *RolloutsProgress) String() string { return proto.CompactTextString(m) }
func (*RolloutsProgress) ProtoMessage()    {}
func (*RolloutsProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cacd55819479c9d, []int{2}
}

func (m *RolloutsProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RolloutsProgress.Unmarshal(m, b)
}
func (m *RolloutsProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RolloutsProgress.Marshal(b, m, deterministic)
}
func (m *RolloutsProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolloutsProgress.Merge(m, src)
}
func (m *RolloutsProgress) XXX_Size() int {
	return xxx_messageInfo_RolloutsProgress.Size(m)
}
func (m *RolloutsProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_RolloutsProgress.DiscardUnknown(m)
}

var xxx_messageInfo_RolloutsProgress proto.InternalMessageInfo

func (m *RolloutsProgress) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type RolloutById struct {
	RolloutId            string   `protobuf:"bytes,1,opt,name=rollout_id,json=rolloutId,proto3" json:"rollout_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RolloutById) Reset()         { *m = RolloutById{} }
func (m *RolloutById) String() string { return proto.CompactTextString(m) }
func (*RolloutById) ProtoMessage()    {}
func (*RolloutById) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cacd55819479c9d, []int{3}
}

func (m *RolloutById) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RolloutById.Unmarshal(m, b)
}
func (m *RolloutById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RolloutById.Marshal(b, m, deterministic)
}
func (m *RolloutById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolloutById.Merge(m, src)
}
func (m *RolloutById) XXX_Size() int {
	return xxx_messageInfo_RolloutById.Size(m)
}
func (m *RolloutById) XXX_DiscardUnknown() {
	xxx_messageInfo_RolloutById.DiscardUnknown(m)
}

var xxx_messageInfo_RolloutById proto.InternalMessageInfo

func (m *RolloutById) GetRolloutId() string {
	if m != nil {
		return m.RolloutId
	}
	return ""
}

type RolloutForChefRun struct {
	PolicyName           string   `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyGroup          string   `protobuf:"bytes,2,opt,name=policy_group,json=policyGroup,proto3" json:"policy_group,omitempty"`
	PolicyRevisionId     string   `protobuf:"bytes,3,opt,name=policy_revision_id,json=policyRevisionId,proto3" json:"policy_revision_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RolloutForChefRun) Reset()         { *m = RolloutForChefRun{} }
func (m *RolloutForChefRun) String() string { return proto.CompactTextString(m) }
func (*RolloutForChefRun) ProtoMessage()    {}
func (*RolloutForChefRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cacd55819479c9d, []int{4}
}

func (m *RolloutForChefRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RolloutForChefRun.Unmarshal(m, b)
}
func (m *RolloutForChefRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RolloutForChefRun.Marshal(b, m, deterministic)
}
func (m *RolloutForChefRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolloutForChefRun.Merge(m, src)
}
func (m *RolloutForChefRun) XXX_Size() int {
	return xxx_messageInfo_RolloutForChefRun.Size(m)
}
func (m *RolloutForChefRun) XXX_DiscardUnknown() {
	xxx_messageInfo_RolloutForChefRun.DiscardUnknown(m)
}

var xxx_messageInfo_RolloutForChefRun proto.InternalMessageInfo

func (m *RolloutForChefRun) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *RolloutForChefRun) GetPolicyGroup() string {
	if m != nil {
		return m.PolicyGroup
	}
	return ""
}

func (m *RolloutForChefRun) GetPolicyRevisionId() string {
	if m != nil {
		return m.PolicyRevisionId
	}
	return ""
}

type DeleteRolloutsByAge struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRolloutsByAge) Reset()         { *m = DeleteRolloutsByAge{} }
func (m *DeleteRolloutsByAge) String() string { return proto.CompactTextString(m) }
func (*DeleteRolloutsByAge) ProtoMessage()    {}
func (*DeleteRolloutsByAge) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cacd55819479c9d, []int{5}
}

func (m *DeleteRolloutsByAge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRolloutsByAge.Unmarshal(m, b)
}
func (m *DeleteRolloutsByAge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRolloutsByAge.Marshal(b, m, deterministic)
}
func (m *DeleteRolloutsByAge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRolloutsByAge.Merge(m, src)
}
func (m *DeleteRolloutsByAge) XXX_Size() int {
	return xxx_messageInfo_DeleteRolloutsByAge.Size(m)
}
func (m *DeleteRolloutsByAge) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRolloutsByAge.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRolloutsByAge proto.InternalMessageInfo

type ArchiveRollouts struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchiveRollouts) Reset()         { *m = ArchiveRollouts{} }
func (m *ArchiveRollouts) String() string { return proto.CompactTextString(m) }
func (*ArchiveRollouts) ProtoMessage()    {}
func (*ArchiveRollouts) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cacd55819479c9d, []int{6}
}

func (m *ArchiveRollouts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveRollouts.Unmarshal(m, b)
}
func (m *ArchiveRollouts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveRollouts.Marshal(b, m, deterministic)
}
func (m *ArchiveRollouts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveRollouts.Merge(m, src)
}
func (m *ArchiveRollouts) XXX_Size() int {
	return xxx_messageInfo_ArchiveRollouts.Size(m)
}
func (m *ArchiveRollouts) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveRollouts.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveRollouts proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("chef.automate.api.cfgmgmt.request.SCMType", SCMType_name, SCMType_value)
	proto.RegisterEnum("chef.automate.api.cfgmgmt.request.SCMWebType", SCMWebType_name, SCMWebType_value)
	proto.RegisterType((*CreateRollout)(nil), "chef.automate.api.cfgmgmt.request.CreateRollout")
	proto.RegisterType((*Rollouts)(nil), "chef.automate.api.cfgmgmt.request.Rollouts")
	proto.RegisterType((*RolloutsProgress)(nil), "chef.automate.api.cfgmgmt.request.RolloutsProgress")
	proto.RegisterType((*RolloutById)(nil), "chef.automate.api.cfgmgmt.request.RolloutById")
	proto.RegisterType((*RolloutForChefRun)(nil), "chef.automate.api.cfgmgmt.request.RolloutForChefRun")
	proto.RegisterType((*DeleteRolloutsByAge)(nil), "chef.automate.api.cfgmgmt.request.DeleteRolloutsByAge")
	proto.RegisterType((*ArchiveRollouts)(nil), "chef.automate.api.cfgmgmt.request.ArchiveRollouts")
}

func init() {
	proto.RegisterFile("api/external/cfgmgmt/request/rollouts.proto", fileDescriptor_8cacd55819479c9d)
}

var fileDescriptor_8cacd55819479c9d = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x17, 0x36, 0xfa, 0xe7, 0x74, 0xac, 0x9d, 0x27, 0x50, 0x84, 0x40, 0x74, 0x81, 0x8b,
	0xa9, 0xdb, 0x12, 0x09, 0x84, 0xb8, 0x5e, 0xbb, 0x31, 0x02, 0x5a, 0x87, 0xd2, 0x4d, 0x93, 0xb8,
	0x89, 0x52, 0xe7, 0x34, 0x35, 0x8a, 0xe3, 0xe0, 0x38, 0x83, 0x3e, 0x00, 0x0f, 0xc3, 0x5b, 0xa2,
	0x38, 0xee, 0x56, 0x90, 0x60, 0x88, 0x3b, 0xf7, 0x3b, 0xbf, 0xf3, 0x9d, 0x1e, 0xeb, 0x8b, 0x61,
	0x3f, 0xca, 0x99, 0x87, 0xdf, 0x14, 0xca, 0x2c, 0x4a, 0x3d, 0x3a, 0x4b, 0x78, 0xc2, 0x95, 0x27,
	0xf1, 0x4b, 0x89, 0x85, 0xf2, 0xa4, 0x48, 0x53, 0x51, 0xaa, 0xc2, 0xcd, 0xa5, 0x50, 0x82, 0xec,
	0xd2, 0x39, 0xce, 0xdc, 0xa8, 0x54, 0x82, 0x47, 0x0a, 0xdd, 0x28, 0x67, 0xae, 0xe9, 0x70, 0x4d,
	0x87, 0xf3, 0x63, 0x03, 0x1e, 0x8c, 0x24, 0x46, 0x0a, 0x83, 0xba, 0x97, 0x3c, 0x83, 0x4e, 0x2e,
	0x52, 0x46, 0x17, 0x61, 0x16, 0x71, 0xb4, 0xad, 0xbe, 0xb5, 0xd7, 0x0e, 0xa0, 0x96, 0xc6, 0x11,
	0x47, 0x32, 0x80, 0xed, 0x25, 0x20, 0x62, 0x0c, 0x13, 0x29, 0xca, 0xdc, 0xbe, 0xa7, 0xb1, 0xae,
	0xc1, 0x44, 0x8c, 0xa7, 0x95, 0x4c, 0x0e, 0x80, 0x18, 0x56, 0xe2, 0x35, 0x2b, 0x98, 0xc8, 0x42,
	0x16, 0xdb, 0xeb, 0x1a, 0xee, 0xd5, 0x95, 0xc0, 0x14, 0xfc, 0x78, 0xc5, 0x39, 0x16, 0x3c, 0x62,
	0x59, 0x58, 0xca, 0xd4, 0xde, 0x58, 0x75, 0x3e, 0xd6, 0xfa, 0xa5, 0x4c, 0xc9, 0x09, 0xb4, 0x0a,
	0xca, 0x43, 0xb5, 0xc8, 0xd1, 0xbe, 0xdf, 0xb7, 0xf6, 0xb6, 0x5e, 0x0e, 0xdc, 0x3b, 0xd7, 0x75,
	0x27, 0xa3, 0xb3, 0x8b, 0x45, 0x8e, 0x41, 0xb3, 0xa0, 0xbc, 0x3a, 0x90, 0x73, 0xd8, 0xac, 0x6c,
	0xbe, 0xe2, 0xb4, 0xb6, 0x6a, 0x68, 0xab, 0xc3, 0x7f, 0xb3, 0xba, 0xc2, 0xa9, 0x76, 0x83, 0x82,
	0x72, 0x73, 0x26, 0x2f, 0x60, 0xcb, 0xec, 0x50, 0xf9, 0x56, 0x0b, 0x34, 0xf5, 0x02, 0x9b, 0xb5,
	0x3a, 0xa1, 0xbc, 0xfa, 0xf7, 0xfb, 0x37, 0xf7, 0xb2, 0x9c, 0x5e, 0x91, 0xad, 0xd5, 0x55, 0x27,
	0xda, 0xb3, 0x82, 0x6f, 0xaf, 0xa5, 0x82, 0xa9, 0xe0, 0x9c, 0x29, 0xbb, 0xfd, 0x1b, 0x3b, 0xd2,
	0x32, 0xe9, 0x43, 0x27, 0xc6, 0x82, 0x4a, 0x96, 0x2b, 0x26, 0x32, 0x1b, 0x34, 0xb5, 0x2a, 0x91,
	0x27, 0x00, 0x94, 0x85, 0x9f, 0x45, 0x3d, 0xb2, 0xa3, 0x81, 0x16, 0x65, 0xef, 0x85, 0x9e, 0xf5,
	0x18, 0xda, 0xa6, 0xca, 0x62, 0x7b, 0x53, 0x17, 0x9b, 0xba, 0xe8, 0xc7, 0x8e, 0x03, 0x2d, 0x13,
	0x92, 0x82, 0x3c, 0x82, 0xc6, 0x8c, 0xa5, 0x0a, 0xa5, 0x6d, 0xf5, 0xd7, 0xf7, 0xda, 0x81, 0xf9,
	0xe5, 0x0c, 0xa0, 0xb7, 0x64, 0x3e, 0x4a, 0x91, 0x48, 0x2c, 0xfe, 0xcc, 0x1e, 0x40, 0xc7, 0xb0,
	0xc3, 0x85, 0x1f, 0x93, 0xa7, 0x00, 0x26, 0xbf, 0xd5, 0xec, 0x3a, 0x77, 0x6d, 0xa3, 0xf8, 0xb1,
	0xf3, 0xdd, 0x82, 0x6d, 0x83, 0xbf, 0x15, 0x72, 0x34, 0xc7, 0x59, 0x50, 0x66, 0x77, 0xa7, 0x75,
	0x17, 0xcc, 0xcd, 0xff, 0x12, 0x54, 0xd3, 0xf4, 0x1f, 0x21, 0x75, 0x1e, 0xc2, 0xce, 0x31, 0xa6,
	0x78, 0xf3, 0xc1, 0x14, 0xc3, 0xc5, 0x51, 0x82, 0xce, 0x36, 0x74, 0x8f, 0x24, 0x9d, 0xb3, 0xeb,
	0x1b, 0x7d, 0xf0, 0x1c, 0x9a, 0x26, 0x6f, 0xa4, 0x0b, 0x9d, 0xcb, 0xf1, 0x87, 0xf1, 0xf9, 0xd5,
	0x38, 0x9c, 0x8c, 0xce, 0x7a, 0x6b, 0xa4, 0x09, 0xeb, 0xa7, 0xfe, 0x45, 0xcf, 0x1a, 0x1c, 0x02,
	0xdc, 0x26, 0x89, 0xec, 0x40, 0x77, 0x85, 0x0b, 0xaf, 0x4e, 0x86, 0xbd, 0x35, 0x02, 0xd0, 0x38,
	0xf5, 0x2f, 0xde, 0x5d, 0x0e, 0x7b, 0xd6, 0xf0, 0xcd, 0xa7, 0xd7, 0x09, 0x53, 0xf3, 0x72, 0xea,
	0x52, 0xc1, 0xbd, 0x2a, 0xa5, 0xde, 0x32, 0xa5, 0xde, 0xdf, 0x9e, 0x86, 0x69, 0x43, 0x3f, 0x09,
	0xaf, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x08, 0xeb, 0x11, 0x35, 0x41, 0x04, 0x00, 0x00,
}
