// Code generated by protoc-gen-policy. DO NOT EDIT.
// source: api/external/cfgmgmt/cfgmgmt.proto

package cfgmgmt

import (
	request "github.com/chef/automate/api/external/cfgmgmt/request"
	query "github.com/chef/automate/api/external/common/query"
	policy "github.com/chef/automate/components/automate-gateway/api/authz/policy"
)

func init() {
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodes", "cfgmgmt:nodes", "read", "GET", "/cfgmgmt/nodes", func(unexpandedResource string, input interface{}) string {
		return unexpandedResource
	})
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetRuns", "cfgmgmt:nodes:{node_id}:runs", "read", "GET", "/cfgmgmt/nodes/{node_id}/runs", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.Runs); ok {
			return policy.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "node_id":
					return m.NodeId
				case "start":
					return m.Start
				case "end":
					return m.End
				default:
					return ""
				}
			})
		}
		return ""
	})
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodesCounts", "cfgmgmt:stats:node_counts", "read", "GET", "/cfgmgmt/stats/node_counts", func(unexpandedResource string, input interface{}) string {
		return unexpandedResource
	})
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetRunsCounts", "cfgmgmt:stats:run_counts", "read", "GET", "/cfgmgmt/stats/run_counts", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.RunsCounts); ok {
			return policy.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "start":
					return m.Start
				case "end":
					return m.End
				case "node_id":
					return m.NodeId
				default:
					return ""
				}
			})
		}
		return ""
	})
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodeRun", "cfgmgmt:nodes:{node_id}:runs:{run_id}", "read", "GET", "/cfgmgmt/nodes/{node_id}/runs/{run_id}", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.NodeRun); ok {
			return policy.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "node_id":
					return m.NodeId
				case "run_id":
					return m.RunId
				default:
					return ""
				}
			})
		}
		return ""
	})
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetSuggestions", "cfgmgmt:nodes", "read", "GET", "/cfgmgmt/suggestions", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*query.Suggestion); ok {
			return policy.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "type":
					return m.Type
				case "text":
					return m.Text
				default:
					return ""
				}
			})
		}
		return ""
	})
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetOrganizations", "cfgmgmt:nodes", "read", "GET", "/cfgmgmt/organizations", func(unexpandedResource string, input interface{}) string {
		return unexpandedResource
	})
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetSourceFqdns", "cfgmgmt:nodes", "read", "GET", "/cfgmgmt/source_fqdns", func(unexpandedResource string, input interface{}) string {
		return unexpandedResource
	})
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetAttributes", "cfgmgmt:nodes:{node_id}:attribute", "read", "GET", "/cfgmgmt/nodes/{node_id}/attribute", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.Node); ok {
			return policy.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "node_id":
					return m.NodeId
				default:
					return ""
				}
			})
		}
		return ""
	})
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetVersion", "service_info:version", "read", "GET", "/cfgmgmt/version", func(unexpandedResource string, input interface{}) string {
		return unexpandedResource
	})
	policy.MapMethodTo("/chef.automate.api.cfgmgmt.ConfigMgmt/GetPolicyCookbooks", "cfgmgmt:nodes:{revision_id}", "read", "GET", "/cfgmgmt/policy_revision/{revision_id}", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.PolicyRevision); ok {
			return policy.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "revision_id":
					return m.RevisionId
				default:
					return ""
				}
			})
		}
		return ""
	})
}
