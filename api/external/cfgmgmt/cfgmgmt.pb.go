// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/cfgmgmt/cfgmgmt.proto

package cfgmgmt

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/api/external/cfgmgmt/request"
	response "github.com/chef/automate/api/external/cfgmgmt/response"
	query "github.com/chef/automate/api/external/common/query"
	version "github.com/chef/automate/api/external/common/version"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/external/cfgmgmt/cfgmgmt.proto", fileDescriptor_ee30e63cf8458da6)
}

var fileDescriptor_ee30e63cf8458da6 = []byte{
	// 1096 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4d, 0x6f, 0xdc, 0x44,
	0x18, 0xd6, 0x46, 0x28, 0x94, 0x41, 0x69, 0xd2, 0x51, 0x9b, 0x7a, 0x9d, 0x14, 0x84, 0xf9, 0x48,
	0xb2, 0xed, 0xda, 0x94, 0x72, 0x5a, 0x40, 0xa2, 0x04, 0x58, 0x55, 0xa2, 0x80, 0x52, 0xd4, 0x43,
	0x39, 0x2c, 0x5e, 0xef, 0xbb, 0xce, 0x28, 0xf1, 0x8c, 0x33, 0x33, 0x0e, 0x84, 0xaa, 0x97, 0x3d,
	0x06, 0xc1, 0x81, 0xf2, 0x1b, 0x38, 0x71, 0x42, 0xda, 0x0b, 0x17, 0x84, 0xc4, 0x3f, 0xe8, 0x1f,
	0xe0, 0x00, 0x7f, 0x01, 0xc4, 0x0d, 0x79, 0xc6, 0xf6, 0xda, 0xdb, 0xd8, 0x4c, 0x9b, 0x9c, 0xac,
	0xdd, 0x79, 0xde, 0x8f, 0xe7, 0xfd, 0x9c, 0x41, 0x8e, 0x1f, 0x13, 0x0f, 0xbe, 0x92, 0xc0, 0xa9,
	0xbf, 0xef, 0x05, 0xe3, 0x30, 0x0a, 0x23, 0x99, 0x7f, 0xdd, 0x98, 0x33, 0xc9, 0x70, 0x3b, 0xd8,
	0x85, 0xb1, 0xeb, 0x27, 0x92, 0x45, 0xbe, 0x04, 0xd7, 0x8f, 0x89, 0x9b, 0x01, 0xec, 0xce, 0x89,
	0xe2, 0x1c, 0x0e, 0x12, 0x10, 0xd2, 0xf3, 0x03, 0x49, 0x18, 0x15, 0x5a, 0x8d, 0xbd, 0xd9, 0x88,
	0xa5, 0x6c, 0x04, 0x66, 0x48, 0x21, 0x7d, 0x99, 0x23, 0xb7, 0x1a, 0x91, 0xc0, 0x39, 0xe3, 0x39,
	0x74, 0xa3, 0x11, 0xca, 0x19, 0xcb, 0xe8, 0xda, 0x57, 0x6b, 0x80, 0x22, 0x66, 0x54, 0xc0, 0x1c,
	0xa9, 0xad, 0x66, 0x70, 0x99, 0xd5, 0xff, 0x40, 0xcb, 0xb4, 0x3a, 0xcd, 0xd0, 0x0a, 0xaf, 0x39,
	0x2c, 0x8b, 0x22, 0x46, 0xbd, 0x83, 0x04, 0xf8, 0x91, 0x17, 0xfb, 0xdc, 0x8f, 0x40, 0x02, 0xaf,
	0x71, 0x41, 0x63, 0x0f, 0x81, 0x0b, 0x32, 0xfb, 0x66, 0xd0, 0xf5, 0x90, 0xb1, 0x70, 0x1f, 0x3c,
	0xf5, 0x6b, 0x98, 0x8c, 0x3d, 0x21, 0x79, 0x12, 0xc8, 0xb9, 0xd3, 0x54, 0x9f, 0x4f, 0x29, 0x93,
	0x7e, 0x39, 0x28, 0xd7, 0xd4, 0x27, 0xe8, 0x86, 0x40, 0xbb, 0xe2, 0x4b, 0x3f, 0x0c, 0x81, 0x7b,
	0x2c, 0x56, 0x88, 0x13, 0xd0, 0xef, 0x06, 0x2c, 0x8a, 0x19, 0x05, 0x2a, 0x85, 0x97, 0x17, 0x59,
	0x37, 0xe4, 0x71, 0xe0, 0x95, 0xd4, 0xc4, 0x6c, 0x9f, 0x04, 0x47, 0x35, 0xf6, 0x9e, 0x44, 0x03,
	0xf1, 0xa3, 0xc7, 0x35, 0xbc, 0xf1, 0x5b, 0x1b, 0xa1, 0x6d, 0x46, 0xc7, 0x24, 0xbc, 0x1d, 0x46,
	0x12, 0xff, 0xd4, 0x42, 0xe7, 0xfa, 0x20, 0x3f, 0x4e, 0xb3, 0x87, 0x37, 0xdd, 0xda, 0xfa, 0x77,
	0xb3, 0xf2, 0x71, 0x15, 0xd2, 0xb6, 0x5d, 0x1d, 0x16, 0x37, 0x0f, 0x9a, 0xfb, 0x11, 0x11, 0xf2,
	0xae, 0xbf, 0x9f, 0x80, 0x73, 0x6f, 0x32, 0xb5, 0x96, 0xd1, 0x52, 0x26, 0xd8, 0x53, 0x85, 0x31,
	0x99, 0x5a, 0x8b, 0xf8, 0x19, 0x0e, 0xfe, 0xe8, 0x78, 0x6a, 0x2d, 0xa1, 0xe7, 0x09, 0x1d, 0x73,
	0x5f, 0x1f, 0x1d, 0x4f, 0x2d, 0x8c, 0x57, 0x4a, 0x7f, 0xf4, 0xf6, 0x89, 0x90, 0x93, 0x47, 0x7f,
	0x3e, 0x5c, 0x58, 0xc1, 0xe7, 0x8b, 0x92, 0x50, 0x47, 0xf8, 0x51, 0x0b, 0x3d, 0xdb, 0x07, 0xb9,
	0x93, 0x50, 0x81, 0x37, 0x0c, 0xbc, 0x4d, 0x81, 0x8d, 0xce, 0x4e, 0x5a, 0x93, 0xa9, 0xf5, 0x02,
	0x5a, 0xaf, 0x78, 0xdb, 0xbb, 0x9f, 0x7e, 0x06, 0x64, 0xf4, 0xa0, 0xc7, 0x13, 0x5a, 0x75, 0xfe,
	0x32, 0xba, 0x54, 0xf6, 0xb5, 0x40, 0x36, 0xd0, 0x78, 0x11, 0x5f, 0xa9, 0xd2, 0xf0, 0x0a, 0x29,
	0x2f, 0xd5, 0x8f, 0xff, 0x6a, 0xa1, 0xf3, 0x79, 0x12, 0xb6, 0x59, 0x42, 0xa5, 0xc0, 0xae, 0x69,
	0x2a, 0x34, 0xde, 0xf6, 0x1a, 0xf1, 0xba, 0x9b, 0xca, 0x02, 0x0e, 0x9f, 0x4c, 0xad, 0x35, 0xd4,
	0xce, 0x79, 0xab, 0x9e, 0x54, 0x8e, 0x0f, 0x02, 0x05, 0x78, 0xba, 0x8c, 0xad, 0x63, 0xbb, 0xa0,
	0xaa, 0x54, 0x7a, 0x25, 0x95, 0xf8, 0x8f, 0x16, 0x5a, 0xca, 0xb2, 0x97, 0xd1, 0xec, 0x1a, 0xe6,
	0x30, 0x63, 0xe9, 0x9a, 0xb0, 0x9c, 0xe1, 0x9d, 0x78, 0x32, 0xb5, 0x6c, 0x64, 0x55, 0x49, 0xf2,
	0x84, 0x9e, 0x8a, 0xe3, 0x1a, 0x6e, 0xcf, 0x71, 0x9c, 0x69, 0xc4, 0x3f, 0x2e, 0x20, 0xbb, 0x0f,
	0x72, 0x7b, 0x17, 0x82, 0xbd, 0x5b, 0x54, 0xbb, 0xf1, 0x19, 0x89, 0xe0, 0x0e, 0x70, 0x02, 0x02,
	0xf7, 0x0c, 0xf8, 0xd6, 0xc8, 0xda, 0x6f, 0x99, 0x90, 0xaf, 0x11, 0x76, 0xbe, 0x4b, 0xeb, 0x7c,
	0x0b, 0x6d, 0x54, 0x43, 0x11, 0xa4, 0x68, 0x92, 0x3b, 0x3f, 0x90, 0x24, 0x02, 0xa1, 0xf0, 0x4f,
	0x17, 0x99, 0x0e, 0xde, 0x9c, 0x8b, 0x4c, 0xad, 0x01, 0xfc, 0xf3, 0x02, 0x5a, 0xef, 0x83, 0xbc,
	0x4d, 0x84, 0x20, 0x34, 0x4c, 0x2b, 0xf3, 0xfd, 0x84, 0xab, 0x49, 0x95, 0x95, 0xc6, 0xdb, 0x06,
	0xa1, 0xaa, 0x95, 0xb6, 0xdf, 0x31, 0x09, 0x56, 0xad, 0xb8, 0xf3, 0x43, 0x1a, 0xae, 0x6b, 0xa8,
	0x53, 0x0d, 0x57, 0xa4, 0xf1, 0x03, 0x55, 0xd3, 0xa3, 0x4c, 0xe2, 0x54, 0xb5, 0xd4, 0xc5, 0x57,
	0xe7, 0x22, 0xd6, 0x64, 0x03, 0xff, 0xd3, 0x42, 0x28, 0x1b, 0x14, 0x3b, 0x09, 0xc5, 0x1d, 0xc3,
	0x21, 0xb1, 0x93, 0x50, 0x7b, 0xc3, 0xb0, 0x75, 0x9c, 0x87, 0x29, 0xf5, 0x0d, 0xf4, 0x6a, 0xd3,
	0x44, 0xec, 0xdd, 0x4f, 0x4b, 0x9e, 0x8c, 0x1e, 0x98, 0x8e, 0xc6, 0x0b, 0x78, 0xb9, 0x7c, 0x14,
	0x82, 0xa6, 0xbf, 0x89, 0x5f, 0x6b, 0x9c, 0x8c, 0x5e, 0x6e, 0x07, 0xff, 0xa2, 0x47, 0xe4, 0x9d,
	0x24, 0x0c, 0x41, 0xa8, 0x7d, 0x76, 0x32, 0x7b, 0xb5, 0xe8, 0x5d, 0x75, 0x29, 0x70, 0x67, 0xe0,
	0xc6, 0x15, 0xf0, 0xc5, 0x99, 0xed, 0xab, 0x55, 0x7c, 0x71, 0x96, 0xcd, 0x92, 0xa7, 0xbf, 0xb7,
	0xd0, 0x4a, 0x1f, 0xe4, 0x27, 0x3c, 0xf4, 0x29, 0xf9, 0x5a, 0xaf, 0x63, 0xfc, 0xba, 0x41, 0xf2,
	0x2a, 0x12, 0x8d, 0x24, 0x86, 0x67, 0x46, 0xc2, 0xc2, 0xab, 0x05, 0x09, 0x56, 0xf1, 0xf8, 0xd7,
	0x2c, 0x07, 0x2c, 0xe1, 0x01, 0x7c, 0x78, 0x30, 0xa2, 0x66, 0x6b, 0xaa, 0x84, 0x6f, 0xa4, 0xe0,
	0x9f, 0x19, 0x85, 0xcb, 0xf8, 0xd2, 0x2c, 0x0f, 0xca, 0xfa, 0x60, 0xac, 0xdc, 0xfd, 0x57, 0x2f,
	0xa0, 0x9b, 0x52, 0x72, 0x32, 0x4c, 0x24, 0x98, 0x5d, 0x22, 0xd2, 0x16, 0xb2, 0xaf, 0x9b, 0x2e,
	0xd8, 0x42, 0xb9, 0xf3, 0x4d, 0xda, 0x49, 0x2f, 0xa3, 0x97, 0xea, 0x3a, 0xc9, 0xcf, 0x91, 0xa7,
	0xec, 0xa2, 0x57, 0xb0, 0x53, 0xdb, 0x45, 0x85, 0x0d, 0xfc, 0xb7, 0x9e, 0x1d, 0x77, 0xf5, 0xdd,
	0x17, 0xbf, 0x59, 0xdf, 0x3d, 0xf9, 0xf5, 0x38, 0x83, 0xde, 0xa2, 0x63, 0xb6, 0xa3, 0x43, 0x61,
	0x77, 0x9f, 0x48, 0xca, 0x99, 0xb4, 0xbe, 0xbf, 0x79, 0x0e, 0x2d, 0xee, 0x92, 0xd1, 0x08, 0xe8,
	0x64, 0x6a, 0xad, 0xa2, 0x8b, 0x02, 0xf8, 0x21, 0x09, 0x60, 0x40, 0xe8, 0x98, 0xf5, 0x32, 0x99,
	0x0a, 0x7f, 0x0b, 0xad, 0x8a, 0x23, 0x21, 0x21, 0xea, 0x65, 0xd0, 0x1c, 0x75, 0x3c, 0xb5, 0xd6,
	0x70, 0xbb, 0x7a, 0x96, 0x19, 0x2b, 0x42, 0x81, 0xf1, 0x4a, 0x11, 0x8a, 0x4c, 0x0c, 0x7f, 0xbb,
	0x80, 0x70, 0x1f, 0xe4, 0xa7, 0xea, 0x56, 0xbc, 0xcd, 0xd8, 0xde, 0x90, 0xb1, 0x3d, 0x81, 0xaf,
	0x1b, 0x64, 0x5e, 0xcb, 0xec, 0xc0, 0x21, 0x49, 0x35, 0xd9, 0x37, 0x4c, 0x6a, 0x60, 0xce, 0x8e,
	0xde, 0xbc, 0x57, 0xd0, 0xda, 0x5c, 0x15, 0xf0, 0x4c, 0xe9, 0x63, 0x53, 0x74, 0x0d, 0xb5, 0x2b,
	0xf9, 0x2f, 0x03, 0x1b, 0x6a, 0xbe, 0x3c, 0x4a, 0xf5, 0x03, 0x60, 0x90, 0x4b, 0x7a, 0x15, 0x1d,
	0x69, 0x1b, 0x3f, 0xd7, 0x07, 0xf9, 0x81, 0x7a, 0x5a, 0xe1, 0x2d, 0x83, 0x30, 0x68, 0xa8, 0xdd,
	0x31, 0xa1, 0xaf, 0xb1, 0xce, 0xe7, 0x67, 0xd6, 0xcc, 0x17, 0xf0, 0x72, 0x41, 0x4c, 0x3f, 0x07,
	0xdf, 0xf3, 0xee, 0x75, 0x43, 0x22, 0x77, 0x93, 0x61, 0x5a, 0x7b, 0xe9, 0x1d, 0x63, 0x5c, 0x3c,
	0x86, 0xbc, 0x93, 0xde, 0x93, 0xc3, 0x45, 0x35, 0x6e, 0x6e, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x16, 0xab, 0xb2, 0x15, 0x04, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConfigMgmtClient is the client API for ConfigMgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigMgmtClient interface {
	//
	//GetNodes
	//
	//Returns a list of infra nodes that have checked in to Automate.
	//Adding a filter makes a list of all nodes that meet the filter criteria.
	//Filters for the same field are ORd together, while filters across different fields are ANDed together.
	//Supports pagination, filtering (with wildcard support), and sorting.
	//Limited to 10k results.
	//
	//Example:
	//```
	//cfgmgmt/nodes?pagination.page=1&pagination.size=100&sorting.field=name&sorting.order=ASC&filter=name:mySO*&filter=platform:ubun*
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*_struct.ListValue, error)
	//
	//GetRuns
	//
	//Returns a list of run metadata (id, start and end time, and status) for the provided node ID.
	//Supports pagination.
	//Accepts a `start` parameter to denote start date for the list and a filter of type `status`.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetRuns(ctx context.Context, in *request.Runs, opts ...grpc.CallOption) (*_struct.ListValue, error)
	//
	//GetNodesCounts
	//
	//Returns totals for failed, success, missing, and overall total infra nodes that have reported into Automate.
	//Supports filtering.
	//
	//Example:
	//```
	//cfgmgmt/stats/node_counts?filter=name:mySO*&filter=platform:ubun*
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetNodesCounts(ctx context.Context, in *request.NodesCounts, opts ...grpc.CallOption) (*response.NodesCounts, error)
	//
	//GetRunsCounts
	//
	//Returns totals for failed and successful runs given a `node_id`.
	//
	//Example:
	//```
	//cfgmgmt/stats/run_counts?node_id=821fff07-abc9-4160-96b1-83d68ae5cfdd&start=2019-11-02
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetRunsCounts(ctx context.Context, in *request.RunsCounts, opts ...grpc.CallOption) (*response.RunsCounts, error)
	//
	//GetCheckinCountsTimeSeries
	//
	//Returns a daily time series of unique node check-ins for the number of days requested.
	//If days ago value is empty, api will return the default 1 day ago results.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetCheckInCountsTimeSeries(ctx context.Context, in *request.CheckInCountsTimeSeries, opts ...grpc.CallOption) (*response.CheckInCountsTimeSeries, error)
	//
	//GetMissingNodeDurationCounts
	//
	//Returns a count of missing nodes for the provided durations.
	//
	//Example:
	//```
	//cfgmgmt/stats/missing_node_duration_counts?durations=3d&durations=1w&durations=2w&durations=1M&durations=3M
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetMissingNodeDurationCounts(ctx context.Context, in *request.MissingNodeDurationCounts, opts ...grpc.CallOption) (*response.MissingNodeDurationCounts, error)
	//
	//GetNodeRun
	//
	//Returns the infra run report for the provided node ID and run ID.
	//
	//Authorization Action:
	//```
	//infra:nodes:get
	//```
	GetNodeRun(ctx context.Context, in *request.NodeRun, opts ...grpc.CallOption) (*response.Run, error)
	//
	//GetSuggestions
	//
	//Returns possible filter values given a valid `type` parameter. All values returned until two or more
	//characters are provided for the `text` parameter.
	//Supports wildcard (* and ?).
	//
	//Example:
	//```
	//cfgmgmt/suggestions?type=environment&text=_d
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetSuggestions(ctx context.Context, in *query.Suggestion, opts ...grpc.CallOption) (*_struct.ListValue, error)
	//
	//GetOrganizations
	//
	//Returns a list of all organizations associated with nodes that have checked in to Automate.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetOrganizations(ctx context.Context, in *request.Organizations, opts ...grpc.CallOption) (*_struct.ListValue, error)
	//
	//GetSourceFqdns
	//
	//Returns a list of all chef servers associated with nodes that have checked in to Automate.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetSourceFqdns(ctx context.Context, in *request.SourceFqdns, opts ...grpc.CallOption) (*_struct.ListValue, error)
	//
	//GetAttributes
	//
	//Returns the latest reported attributes for the provided node ID.
	//
	//Authorization Action:
	//```
	//infra:nodes:get
	//```
	GetAttributes(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.NodeAttribute, error)
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	//
	//GetPolicyCookbooks
	//
	//Returns Policy Names with a list of cookbook names and associated policy identifiers based on a policy revision ID.
	//Policy revision ids are sent with an infra run report and identifies which instance of a policy the node used for this run.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetPolicyCookbooks(ctx context.Context, in *request.PolicyRevision, opts ...grpc.CallOption) (*response.PolicyCookbooks, error)
	//
	//GetErrors
	//
	//Returns a list of the most common errors reported for infra nodes' most recent Chef Client runs.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetErrors(ctx context.Context, in *request.Errors, opts ...grpc.CallOption) (*response.Errors, error)
}

type configMgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigMgmtClient(cc grpc.ClientConnInterface) ConfigMgmtClient {
	return &configMgmtClient{cc}
}

func (c *configMgmtClient) GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetRuns(ctx context.Context, in *request.Runs, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetNodesCounts(ctx context.Context, in *request.NodesCounts, opts ...grpc.CallOption) (*response.NodesCounts, error) {
	out := new(response.NodesCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodesCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetRunsCounts(ctx context.Context, in *request.RunsCounts, opts ...grpc.CallOption) (*response.RunsCounts, error) {
	out := new(response.RunsCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetRunsCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetCheckInCountsTimeSeries(ctx context.Context, in *request.CheckInCountsTimeSeries, opts ...grpc.CallOption) (*response.CheckInCountsTimeSeries, error) {
	out := new(response.CheckInCountsTimeSeries)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetCheckInCountsTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetMissingNodeDurationCounts(ctx context.Context, in *request.MissingNodeDurationCounts, opts ...grpc.CallOption) (*response.MissingNodeDurationCounts, error) {
	out := new(response.MissingNodeDurationCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetMissingNodeDurationCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetNodeRun(ctx context.Context, in *request.NodeRun, opts ...grpc.CallOption) (*response.Run, error) {
	out := new(response.Run)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetSuggestions(ctx context.Context, in *query.Suggestion, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetOrganizations(ctx context.Context, in *request.Organizations, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetSourceFqdns(ctx context.Context, in *request.SourceFqdns, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetSourceFqdns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetAttributes(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.NodeAttribute, error) {
	out := new(response.NodeAttribute)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetPolicyCookbooks(ctx context.Context, in *request.PolicyRevision, opts ...grpc.CallOption) (*response.PolicyCookbooks, error) {
	out := new(response.PolicyCookbooks)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetPolicyCookbooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetErrors(ctx context.Context, in *request.Errors, opts ...grpc.CallOption) (*response.Errors, error) {
	out := new(response.Errors)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigMgmtServer is the server API for ConfigMgmt service.
type ConfigMgmtServer interface {
	//
	//GetNodes
	//
	//Returns a list of infra nodes that have checked in to Automate.
	//Adding a filter makes a list of all nodes that meet the filter criteria.
	//Filters for the same field are ORd together, while filters across different fields are ANDed together.
	//Supports pagination, filtering (with wildcard support), and sorting.
	//Limited to 10k results.
	//
	//Example:
	//```
	//cfgmgmt/nodes?pagination.page=1&pagination.size=100&sorting.field=name&sorting.order=ASC&filter=name:mySO*&filter=platform:ubun*
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetNodes(context.Context, *request.Nodes) (*_struct.ListValue, error)
	//
	//GetRuns
	//
	//Returns a list of run metadata (id, start and end time, and status) for the provided node ID.
	//Supports pagination.
	//Accepts a `start` parameter to denote start date for the list and a filter of type `status`.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetRuns(context.Context, *request.Runs) (*_struct.ListValue, error)
	//
	//GetNodesCounts
	//
	//Returns totals for failed, success, missing, and overall total infra nodes that have reported into Automate.
	//Supports filtering.
	//
	//Example:
	//```
	//cfgmgmt/stats/node_counts?filter=name:mySO*&filter=platform:ubun*
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetNodesCounts(context.Context, *request.NodesCounts) (*response.NodesCounts, error)
	//
	//GetRunsCounts
	//
	//Returns totals for failed and successful runs given a `node_id`.
	//
	//Example:
	//```
	//cfgmgmt/stats/run_counts?node_id=821fff07-abc9-4160-96b1-83d68ae5cfdd&start=2019-11-02
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetRunsCounts(context.Context, *request.RunsCounts) (*response.RunsCounts, error)
	//
	//GetCheckinCountsTimeSeries
	//
	//Returns a daily time series of unique node check-ins for the number of days requested.
	//If days ago value is empty, api will return the default 1 day ago results.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetCheckInCountsTimeSeries(context.Context, *request.CheckInCountsTimeSeries) (*response.CheckInCountsTimeSeries, error)
	//
	//GetMissingNodeDurationCounts
	//
	//Returns a count of missing nodes for the provided durations.
	//
	//Example:
	//```
	//cfgmgmt/stats/missing_node_duration_counts?durations=3d&durations=1w&durations=2w&durations=1M&durations=3M
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetMissingNodeDurationCounts(context.Context, *request.MissingNodeDurationCounts) (*response.MissingNodeDurationCounts, error)
	//
	//GetNodeRun
	//
	//Returns the infra run report for the provided node ID and run ID.
	//
	//Authorization Action:
	//```
	//infra:nodes:get
	//```
	GetNodeRun(context.Context, *request.NodeRun) (*response.Run, error)
	//
	//GetSuggestions
	//
	//Returns possible filter values given a valid `type` parameter. All values returned until two or more
	//characters are provided for the `text` parameter.
	//Supports wildcard (* and ?).
	//
	//Example:
	//```
	//cfgmgmt/suggestions?type=environment&text=_d
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetSuggestions(context.Context, *query.Suggestion) (*_struct.ListValue, error)
	//
	//GetOrganizations
	//
	//Returns a list of all organizations associated with nodes that have checked in to Automate.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetOrganizations(context.Context, *request.Organizations) (*_struct.ListValue, error)
	//
	//GetSourceFqdns
	//
	//Returns a list of all chef servers associated with nodes that have checked in to Automate.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetSourceFqdns(context.Context, *request.SourceFqdns) (*_struct.ListValue, error)
	//
	//GetAttributes
	//
	//Returns the latest reported attributes for the provided node ID.
	//
	//Authorization Action:
	//```
	//infra:nodes:get
	//```
	GetAttributes(context.Context, *request.Node) (*response.NodeAttribute, error)
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	//
	//GetPolicyCookbooks
	//
	//Returns Policy Names with a list of cookbook names and associated policy identifiers based on a policy revision ID.
	//Policy revision ids are sent with an infra run report and identifies which instance of a policy the node used for this run.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetPolicyCookbooks(context.Context, *request.PolicyRevision) (*response.PolicyCookbooks, error)
	//
	//GetErrors
	//
	//Returns a list of the most common errors reported for infra nodes' most recent Chef Client runs.
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	GetErrors(context.Context, *request.Errors) (*response.Errors, error)
}

// UnimplementedConfigMgmtServer can be embedded to have forward compatible implementations.
type UnimplementedConfigMgmtServer struct {
}

func (*UnimplementedConfigMgmtServer) GetNodes(ctx context.Context, req *request.Nodes) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (*UnimplementedConfigMgmtServer) GetRuns(ctx context.Context, req *request.Runs) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuns not implemented")
}
func (*UnimplementedConfigMgmtServer) GetNodesCounts(ctx context.Context, req *request.NodesCounts) (*response.NodesCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodesCounts not implemented")
}
func (*UnimplementedConfigMgmtServer) GetRunsCounts(ctx context.Context, req *request.RunsCounts) (*response.RunsCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunsCounts not implemented")
}
func (*UnimplementedConfigMgmtServer) GetCheckInCountsTimeSeries(ctx context.Context, req *request.CheckInCountsTimeSeries) (*response.CheckInCountsTimeSeries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckInCountsTimeSeries not implemented")
}
func (*UnimplementedConfigMgmtServer) GetMissingNodeDurationCounts(ctx context.Context, req *request.MissingNodeDurationCounts) (*response.MissingNodeDurationCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissingNodeDurationCounts not implemented")
}
func (*UnimplementedConfigMgmtServer) GetNodeRun(ctx context.Context, req *request.NodeRun) (*response.Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeRun not implemented")
}
func (*UnimplementedConfigMgmtServer) GetSuggestions(ctx context.Context, req *query.Suggestion) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestions not implemented")
}
func (*UnimplementedConfigMgmtServer) GetOrganizations(ctx context.Context, req *request.Organizations) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizations not implemented")
}
func (*UnimplementedConfigMgmtServer) GetSourceFqdns(ctx context.Context, req *request.SourceFqdns) (*_struct.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceFqdns not implemented")
}
func (*UnimplementedConfigMgmtServer) GetAttributes(ctx context.Context, req *request.Node) (*response.NodeAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttributes not implemented")
}
func (*UnimplementedConfigMgmtServer) GetVersion(ctx context.Context, req *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedConfigMgmtServer) GetPolicyCookbooks(ctx context.Context, req *request.PolicyRevision) (*response.PolicyCookbooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyCookbooks not implemented")
}
func (*UnimplementedConfigMgmtServer) GetErrors(ctx context.Context, req *request.Errors) (*response.Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrors not implemented")
}

func RegisterConfigMgmtServer(s *grpc.Server, srv ConfigMgmtServer) {
	s.RegisterService(&_ConfigMgmt_serviceDesc, srv)
}

func _ConfigMgmt_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetNodes(ctx, req.(*request.Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Runs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetRuns(ctx, req.(*request.Runs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetNodesCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodesCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetNodesCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodesCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetNodesCounts(ctx, req.(*request.NodesCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetRunsCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RunsCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetRunsCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetRunsCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetRunsCounts(ctx, req.(*request.RunsCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetCheckInCountsTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CheckInCountsTimeSeries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetCheckInCountsTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetCheckInCountsTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetCheckInCountsTimeSeries(ctx, req.(*request.CheckInCountsTimeSeries))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetMissingNodeDurationCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.MissingNodeDurationCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetMissingNodeDurationCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetMissingNodeDurationCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetMissingNodeDurationCounts(ctx, req.(*request.MissingNodeDurationCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetNodeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodeRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetNodeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetNodeRun(ctx, req.(*request.NodeRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.Suggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetSuggestions(ctx, req.(*query.Suggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Organizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetOrganizations(ctx, req.(*request.Organizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetSourceFqdns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SourceFqdns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetSourceFqdns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetSourceFqdns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetSourceFqdns(ctx, req.(*request.SourceFqdns))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetAttributes(ctx, req.(*request.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetPolicyCookbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.PolicyRevision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetPolicyCookbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetPolicyCookbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetPolicyCookbooks(ctx, req.(*request.PolicyRevision))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Errors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetErrors(ctx, req.(*request.Errors))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigMgmt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.cfgmgmt.ConfigMgmt",
	HandlerType: (*ConfigMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodes",
			Handler:    _ConfigMgmt_GetNodes_Handler,
		},
		{
			MethodName: "GetRuns",
			Handler:    _ConfigMgmt_GetRuns_Handler,
		},
		{
			MethodName: "GetNodesCounts",
			Handler:    _ConfigMgmt_GetNodesCounts_Handler,
		},
		{
			MethodName: "GetRunsCounts",
			Handler:    _ConfigMgmt_GetRunsCounts_Handler,
		},
		{
			MethodName: "GetCheckInCountsTimeSeries",
			Handler:    _ConfigMgmt_GetCheckInCountsTimeSeries_Handler,
		},
		{
			MethodName: "GetMissingNodeDurationCounts",
			Handler:    _ConfigMgmt_GetMissingNodeDurationCounts_Handler,
		},
		{
			MethodName: "GetNodeRun",
			Handler:    _ConfigMgmt_GetNodeRun_Handler,
		},
		{
			MethodName: "GetSuggestions",
			Handler:    _ConfigMgmt_GetSuggestions_Handler,
		},
		{
			MethodName: "GetOrganizations",
			Handler:    _ConfigMgmt_GetOrganizations_Handler,
		},
		{
			MethodName: "GetSourceFqdns",
			Handler:    _ConfigMgmt_GetSourceFqdns_Handler,
		},
		{
			MethodName: "GetAttributes",
			Handler:    _ConfigMgmt_GetAttributes_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ConfigMgmt_GetVersion_Handler,
		},
		{
			MethodName: "GetPolicyCookbooks",
			Handler:    _ConfigMgmt_GetPolicyCookbooks_Handler,
		},
		{
			MethodName: "GetErrors",
			Handler:    _ConfigMgmt_GetErrors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/cfgmgmt/cfgmgmt.proto",
}
