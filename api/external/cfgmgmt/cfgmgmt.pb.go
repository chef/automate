// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/cfgmgmt/cfgmgmt.proto

package cfgmgmt

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/api/external/cfgmgmt/request"
	response "github.com/chef/automate/api/external/cfgmgmt/response"
	query "github.com/chef/automate/api/external/common/query"
	version "github.com/chef/automate/api/external/common/version"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api/external/cfgmgmt/cfgmgmt.proto", fileDescriptor_ee30e63cf8458da6) }

var fileDescriptor_ee30e63cf8458da6 = []byte{
	// 892 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0x56, 0x2a, 0x54, 0xd0, 0xa0, 0x6d, 0x97, 0x97, 0x76, 0xeb, 0x38, 0x5b, 0x10, 0xe6, 0x63,
	0x97, 0xa2, 0x78, 0x28, 0xe5, 0x94, 0x13, 0xb0, 0x12, 0x2b, 0x24, 0xbe, 0x14, 0xa4, 0x1e, 0x7a,
	0x09, 0x13, 0x67, 0xe2, 0x8e, 0x1a, 0xcf, 0x78, 0xe7, 0x63, 0x61, 0xa9, 0x7a, 0xc9, 0x71, 0x11,
	0x5c, 0x2a, 0xfe, 0x05, 0x57, 0x5f, 0xb8, 0x70, 0xe1, 0x1f, 0xf4, 0x0f, 0x70, 0x80, 0x0b, 0x7f,
	0x00, 0x71, 0x43, 0xf6, 0x8c, 0x1d, 0x3b, 0xdd, 0x18, 0xd3, 0xdd, 0x93, 0x95, 0xcc, 0xf3, 0x3e,
	0xf3, 0x3c, 0xf3, 0xcc, 0xfb, 0x6a, 0x50, 0x40, 0x52, 0x86, 0xe9, 0xb7, 0x9a, 0x4a, 0x4e, 0x16,
	0x38, 0x9a, 0xc7, 0x49, 0x9c, 0xe8, 0xf2, 0x1b, 0xa6, 0x52, 0x68, 0x01, 0xfd, 0xe8, 0x3e, 0x9d,
	0x87, 0xc4, 0x68, 0x91, 0x10, 0x4d, 0x43, 0x92, 0xb2, 0xd0, 0x01, 0xfc, 0x5b, 0x67, 0x96, 0x4b,
	0x7a, 0x64, 0xa8, 0xd2, 0x98, 0x44, 0x9a, 0x09, 0xae, 0x2c, 0x8d, 0xbf, 0xdf, 0x8a, 0xe5, 0x62,
	0x46, 0xbb, 0x21, 0x95, 0x26, 0xba, 0x44, 0xee, 0xb5, 0x22, 0xa5, 0x10, 0xce, 0x83, 0xff, 0xce,
	0x06, 0xa0, 0x4a, 0x05, 0x57, 0x74, 0x4d, 0xe9, 0xdb, 0xed, 0xe0, 0xba, 0xd4, 0xff, 0x80, 0xd6,
	0xb5, 0xae, 0x9d, 0x95, 0x48, 0x12, 0xc1, 0xf1, 0x91, 0xa1, 0xf2, 0x04, 0xa7, 0x44, 0x92, 0x84,
	0x6a, 0x2a, 0x37, 0xd0, 0x5a, 0xec, 0x31, 0x95, 0x8a, 0xad, 0xbe, 0x0e, 0xba, 0x1b, 0x0b, 0x11,
	0x2f, 0x28, 0x2e, 0x7e, 0x4d, 0xcd, 0x1c, 0x2b, 0x2d, 0x4d, 0xa4, 0xd7, 0x56, 0x73, 0x3e, 0xc2,
	0xb9, 0xd0, 0xa4, 0x6e, 0xf4, 0x83, 0x48, 0x24, 0xa9, 0xe0, 0x94, 0x6b, 0x85, 0xcb, 0x7c, 0x87,
	0xb1, 0x4c, 0x23, 0xcb, 0x16, 0x0d, 0x63, 0xca, 0x87, 0xa9, 0x58, 0xb0, 0xe8, 0xe4, 0x02, 0x18,
	0x18, 0x49, 0x9e, 0x66, 0x78, 0xef, 0xa7, 0x97, 0x11, 0x3a, 0x10, 0x7c, 0xce, 0xe2, 0xcf, 0xe2,
	0x44, 0xc3, 0xcf, 0x3d, 0xf4, 0xc2, 0x21, 0xd5, 0x9f, 0xe7, 0x67, 0x0c, 0xfb, 0xe1, 0xc6, 0xab,
	0x17, 0xba, 0x90, 0xc3, 0x02, 0xe9, 0xfb, 0xa1, 0x35, 0x1a, 0x96, 0xc7, 0x10, 0x7e, 0xca, 0x94,
	0xbe, 0x4b, 0x16, 0x86, 0x06, 0xf7, 0x96, 0x99, 0x77, 0x15, 0x6d, 0xb9, 0xc2, 0x51, 0x11, 0xdf,
	0x32, 0xf3, 0x2e, 0xc3, 0x73, 0x92, 0x92, 0xd9, 0x69, 0xe6, 0x6d, 0xa1, 0x17, 0x19, 0x9f, 0x4b,
	0x62, 0x97, 0x4e, 0x33, 0x0f, 0x60, 0xbb, 0xf6, 0xc7, 0x68, 0xc1, 0x94, 0x5e, 0x3e, 0xf9, 0xe3,
	0xf1, 0xa5, 0x6d, 0xb8, 0x52, 0x65, 0x5c, 0x2c, 0xc1, 0x93, 0x1e, 0x7a, 0xfe, 0x90, 0xea, 0xb1,
	0xe1, 0x0a, 0xf6, 0x3a, 0xa8, 0xcd, 0x81, 0xad, 0x62, 0x97, 0xbd, 0x65, 0xe6, 0xbd, 0x82, 0x76,
	0x1b, 0x6a, 0x47, 0x0f, 0xf3, 0xcf, 0x84, 0xcd, 0x1e, 0x8d, 0xa4, 0xe1, 0x4d, 0xf1, 0x37, 0xd0,
	0xf5, 0xba, 0xd6, 0x0a, 0xd9, 0x62, 0xe3, 0x55, 0xb8, 0xd9, 0xb4, 0x81, 0xab, 0x2a, 0x9c, 0xf3,
	0xc3, 0x9f, 0x3d, 0x74, 0xa5, 0x0c, 0xe1, 0x40, 0x18, 0xae, 0x15, 0x84, 0x5d, 0xa3, 0xb0, 0x78,
	0x1f, 0xb7, 0xe2, 0x6d, 0x7b, 0xd4, 0x0b, 0x02, 0xb9, 0xcc, 0xbc, 0x01, 0xea, 0x97, 0xbe, 0x8b,
	0xce, 0x29, 0x84, 0x4f, 0xa2, 0x02, 0xf0, 0x6c, 0x89, 0xed, 0x82, 0x5f, 0x59, 0x2d, 0x28, 0x71,
	0x8d, 0x12, 0x7e, 0xef, 0xa1, 0x2d, 0x97, 0x9e, 0xb3, 0x39, 0xec, 0x98, 0xa1, 0x73, 0x19, 0x76,
	0x71, 0xb9, 0xc2, 0x07, 0xe9, 0x32, 0xf3, 0x7c, 0xe4, 0x35, 0x4d, 0x4a, 0xc3, 0xcf, 0xe5, 0x71,
	0x00, 0xfd, 0x35, 0x8f, 0x2b, 0x46, 0xf8, 0xbb, 0x87, 0x90, 0x8b, 0x72, 0x6c, 0x38, 0xdc, 0xea,
	0x18, 0xe3, 0xd8, 0x70, 0x7f, 0xaf, 0xa3, 0xb9, 0xe0, 0x71, 0x7e, 0x67, 0xf7, 0xd0, 0x9b, 0x6d,
	0x77, 0x76, 0xf4, 0x30, 0x17, 0xc5, 0x66, 0x8f, 0xba, 0x5e, 0xde, 0x97, 0xe0, 0x6a, 0x7d, 0x29,
	0xa6, 0xd6, 0xec, 0x3e, 0xbc, 0xd5, 0x7a, 0x77, 0x71, 0xb9, 0x0f, 0xfc, 0x62, 0x2f, 0xf1, 0x57,
	0x26, 0x8e, 0xa9, 0x2a, 0x26, 0xce, 0xd9, 0xee, 0x8b, 0xe1, 0x1a, 0x16, 0x83, 0x38, 0x5c, 0x81,
	0x5b, 0x9b, 0xf4, 0xeb, 0x0b, 0x9b, 0x28, 0x3b, 0x70, 0x6d, 0x95, 0x5d, 0x4d, 0xe9, 0x6f, 0x3d,
	0xb4, 0x7d, 0x48, 0xf5, 0x17, 0x32, 0x26, 0x9c, 0x7d, 0x67, 0x07, 0x26, 0xbc, 0xdb, 0x21, 0xbc,
	0x46, 0x45, 0xab, 0x89, 0xe9, 0x85, 0x99, 0xf0, 0x60, 0xa7, 0x32, 0x21, 0x1a, 0x8a, 0x7f, 0x75,
	0x19, 0x08, 0x23, 0x23, 0xfa, 0xf1, 0xd1, 0x8c, 0x77, 0x1b, 0x24, 0x35, 0x7c, 0xab, 0x05, 0x72,
	0x61, 0x16, 0x6e, 0xc0, 0xf5, 0x55, 0x0e, 0xc5, 0xee, 0x93, 0x79, 0x21, 0xf7, 0x1f, 0x3b, 0x22,
	0x3e, 0xd4, 0x5a, 0xb2, 0xa9, 0xd1, 0xb4, 0xdb, 0x98, 0xcf, 0x5b, 0xc8, 0xbf, 0xdd, 0x75, 0x04,
	0x56, 0xe4, 0xc1, 0xf7, 0x79, 0x27, 0xbd, 0x8e, 0x5e, 0xdb, 0xd4, 0x49, 0xa4, 0x44, 0x9e, 0xb3,
	0x8b, 0xde, 0x80, 0x60, 0x63, 0x17, 0x55, 0x7b, 0xc0, 0x5f, 0x76, 0x76, 0xdc, 0xb5, 0xef, 0x0d,
	0x78, 0x7f, 0x73, 0xf7, 0x94, 0x4f, 0x12, 0x07, 0xfd, 0x84, 0xcf, 0xc5, 0xd8, 0x1e, 0x85, 0x3f,
	0xfc, 0x5f, 0x55, 0xc1, 0x37, 0xcb, 0xcc, 0xdb, 0x41, 0xd7, 0x14, 0x95, 0xc7, 0x2c, 0xa2, 0x13,
	0xc6, 0xe7, 0x62, 0xe4, 0x70, 0x0d, 0xcf, 0x1e, 0xda, 0x51, 0x27, 0x4a, 0xd3, 0x64, 0xe4, 0xa0,
	0x25, 0xea, 0x34, 0xf3, 0x06, 0xd0, 0x6f, 0xae, 0xb9, 0x0d, 0x2a, 0xfb, 0x00, 0xdb, 0x95, 0x7d,
	0x57, 0x06, 0x3f, 0x5c, 0x42, 0x70, 0x48, 0xf5, 0x97, 0xc5, 0x5b, 0xe5, 0x40, 0x88, 0x07, 0x53,
	0x21, 0x1e, 0x28, 0xb8, 0xdd, 0x21, 0x6d, 0x5b, 0x33, 0xa6, 0xc7, 0x2c, 0x67, 0xf2, 0xef, 0x74,
	0xc9, 0x7d, 0x6d, 0x9f, 0xe0, 0xc7, 0x3c, 0xf9, 0x9b, 0x68, 0xb0, 0x96, 0xbc, 0x74, 0xa4, 0x4f,
	0x4d, 0xce, 0x01, 0xea, 0x37, 0x32, 0xaf, 0x03, 0x5b, 0xee, 0x79, 0x7d, 0x7c, 0xda, 0x67, 0xd9,
	0xa4, 0xac, 0xc4, 0x0d, 0x8e, 0x8f, 0xf0, 0xbd, 0x61, 0xcc, 0xf4, 0x7d, 0x33, 0xcd, 0xd3, 0xc2,
	0xb9, 0xa3, 0xea, 0x81, 0x87, 0xcf, 0x7a, 0xf4, 0x4e, 0x2f, 0x17, 0x0d, 0x7a, 0xe7, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xaf, 0xb1, 0xae, 0x7b, 0x53, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigMgmtClient is the client API for ConfigMgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigMgmtClient interface {
	GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*_struct.ListValue, error)
	GetRuns(ctx context.Context, in *request.Runs, opts ...grpc.CallOption) (*_struct.ListValue, error)
	GetNodesCounts(ctx context.Context, in *request.NodesCounts, opts ...grpc.CallOption) (*response.NodesCounts, error)
	GetRunsCounts(ctx context.Context, in *request.RunsCounts, opts ...grpc.CallOption) (*response.RunsCounts, error)
	GetNodeRun(ctx context.Context, in *request.NodeRun, opts ...grpc.CallOption) (*response.Run, error)
	GetSuggestions(ctx context.Context, in *query.Suggestion, opts ...grpc.CallOption) (*_struct.ListValue, error)
	GetOrganizations(ctx context.Context, in *request.Organizations, opts ...grpc.CallOption) (*_struct.ListValue, error)
	GetSourceFqdns(ctx context.Context, in *request.SourceFqdns, opts ...grpc.CallOption) (*_struct.ListValue, error)
	GetAttributes(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.NodeAttribute, error)
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	GetPolicyCookbooks(ctx context.Context, in *request.PolicyRevision, opts ...grpc.CallOption) (*response.PolicyCookbooks, error)
}

type configMgmtClient struct {
	cc *grpc.ClientConn
}

func NewConfigMgmtClient(cc *grpc.ClientConn) ConfigMgmtClient {
	return &configMgmtClient{cc}
}

func (c *configMgmtClient) GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetRuns(ctx context.Context, in *request.Runs, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetNodesCounts(ctx context.Context, in *request.NodesCounts, opts ...grpc.CallOption) (*response.NodesCounts, error) {
	out := new(response.NodesCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodesCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetRunsCounts(ctx context.Context, in *request.RunsCounts, opts ...grpc.CallOption) (*response.RunsCounts, error) {
	out := new(response.RunsCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetRunsCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetNodeRun(ctx context.Context, in *request.NodeRun, opts ...grpc.CallOption) (*response.Run, error) {
	out := new(response.Run)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetSuggestions(ctx context.Context, in *query.Suggestion, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetOrganizations(ctx context.Context, in *request.Organizations, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetSourceFqdns(ctx context.Context, in *request.SourceFqdns, opts ...grpc.CallOption) (*_struct.ListValue, error) {
	out := new(_struct.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetSourceFqdns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetAttributes(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.NodeAttribute, error) {
	out := new(response.NodeAttribute)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configMgmtClient) GetPolicyCookbooks(ctx context.Context, in *request.PolicyRevision, opts ...grpc.CallOption) (*response.PolicyCookbooks, error) {
	out := new(response.PolicyCookbooks)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cfgmgmt.ConfigMgmt/GetPolicyCookbooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigMgmtServer is the server API for ConfigMgmt service.
type ConfigMgmtServer interface {
	GetNodes(context.Context, *request.Nodes) (*_struct.ListValue, error)
	GetRuns(context.Context, *request.Runs) (*_struct.ListValue, error)
	GetNodesCounts(context.Context, *request.NodesCounts) (*response.NodesCounts, error)
	GetRunsCounts(context.Context, *request.RunsCounts) (*response.RunsCounts, error)
	GetNodeRun(context.Context, *request.NodeRun) (*response.Run, error)
	GetSuggestions(context.Context, *query.Suggestion) (*_struct.ListValue, error)
	GetOrganizations(context.Context, *request.Organizations) (*_struct.ListValue, error)
	GetSourceFqdns(context.Context, *request.SourceFqdns) (*_struct.ListValue, error)
	GetAttributes(context.Context, *request.Node) (*response.NodeAttribute, error)
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	GetPolicyCookbooks(context.Context, *request.PolicyRevision) (*response.PolicyCookbooks, error)
}

func RegisterConfigMgmtServer(s *grpc.Server, srv ConfigMgmtServer) {
	s.RegisterService(&_ConfigMgmt_serviceDesc, srv)
}

func _ConfigMgmt_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetNodes(ctx, req.(*request.Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Runs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetRuns(ctx, req.(*request.Runs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetNodesCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodesCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetNodesCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodesCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetNodesCounts(ctx, req.(*request.NodesCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetRunsCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RunsCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetRunsCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetRunsCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetRunsCounts(ctx, req.(*request.RunsCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetNodeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodeRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetNodeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetNodeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetNodeRun(ctx, req.(*request.NodeRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(query.Suggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetSuggestions(ctx, req.(*query.Suggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Organizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetOrganizations(ctx, req.(*request.Organizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetSourceFqdns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SourceFqdns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetSourceFqdns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetSourceFqdns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetSourceFqdns(ctx, req.(*request.SourceFqdns))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetAttributes(ctx, req.(*request.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigMgmt_GetPolicyCookbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.PolicyRevision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigMgmtServer).GetPolicyCookbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cfgmgmt.ConfigMgmt/GetPolicyCookbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigMgmtServer).GetPolicyCookbooks(ctx, req.(*request.PolicyRevision))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigMgmt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.cfgmgmt.ConfigMgmt",
	HandlerType: (*ConfigMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodes",
			Handler:    _ConfigMgmt_GetNodes_Handler,
		},
		{
			MethodName: "GetRuns",
			Handler:    _ConfigMgmt_GetRuns_Handler,
		},
		{
			MethodName: "GetNodesCounts",
			Handler:    _ConfigMgmt_GetNodesCounts_Handler,
		},
		{
			MethodName: "GetRunsCounts",
			Handler:    _ConfigMgmt_GetRunsCounts_Handler,
		},
		{
			MethodName: "GetNodeRun",
			Handler:    _ConfigMgmt_GetNodeRun_Handler,
		},
		{
			MethodName: "GetSuggestions",
			Handler:    _ConfigMgmt_GetSuggestions_Handler,
		},
		{
			MethodName: "GetOrganizations",
			Handler:    _ConfigMgmt_GetOrganizations_Handler,
		},
		{
			MethodName: "GetSourceFqdns",
			Handler:    _ConfigMgmt_GetSourceFqdns_Handler,
		},
		{
			MethodName: "GetAttributes",
			Handler:    _ConfigMgmt_GetAttributes_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ConfigMgmt_GetVersion_Handler,
		},
		{
			MethodName: "GetPolicyCookbooks",
			Handler:    _ConfigMgmt_GetPolicyCookbooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/cfgmgmt/cfgmgmt.proto",
}
