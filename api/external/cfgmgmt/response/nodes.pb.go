// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/cfgmgmt/response/nodes.proto

package response

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Node struct {
	// The chef_guid associated with the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the node.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The FQDN of the node.
	Fqdn string `protobuf:"bytes,3,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// The time on the latest received infra node report.
	Checkin *timestamp.Timestamp `protobuf:"bytes,4,opt,name=checkin,proto3" json:"checkin,omitempty"`
	// Count in seconds that the node has been active.
	UptimeSeconds int32 `protobuf:"varint,5,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	// The organization the node is associated with.
	Organization string `protobuf:"bytes,6,opt,name=organization,proto3" json:"organization,omitempty"`
	// The environment the node is in.
	Environment string `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	// The full platform information for the node (platform + version).
	Platform string `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	// The platform family information for the node.
	PlatformFamily string `protobuf:"bytes,9,opt,name=platform_family,json=platformFamily,proto3" json:"platform_family,omitempty"`
	// The platform version information for the node.
	PlatformVersion string `protobuf:"bytes,10,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty"`
	// The status on the latest infra report for the node.
	Status string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// The chef server associated with the node.
	SourceFqdn string `protobuf:"bytes,12,opt,name=source_fqdn,json=sourceFqdn,proto3" json:"source_fqdn,omitempty"`
	// The latest infra run report id for the node.
	LatestRunId string `protobuf:"bytes,13,opt,name=latest_run_id,json=latestRunId,proto3" json:"latest_run_id,omitempty"`
	// Boolean used to denote whether or not the run data for the node is in Automate.
	HasRunsData bool `protobuf:"varint,14,opt,name=has_runs_data,json=hasRunsData,proto3" json:"has_runs_data,omitempty"`
	// Timestamp on most recently received infra run report for the node.
	LastCcrReceived *timestamp.Timestamp `protobuf:"bytes,15,opt,name=last_ccr_received,json=lastCcrReceived,proto3" json:"last_ccr_received,omitempty"`
	// The policy name associated with the node.
	PolicyName string `protobuf:"bytes,16,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// The policy group associated with the node.
	PolicyGroup string `protobuf:"bytes,17,opt,name=policy_group,json=policyGroup,proto3" json:"policy_group,omitempty"`
	// The policy revision associated with the node.
	PolicyRevision string `protobuf:"bytes,18,opt,name=policy_revision,json=policyRevision,proto3" json:"policy_revision,omitempty"`
	// Boolean used to denote whether or not the node has been identified to be running cookbooks with deprecations.
	HasDeprecations bool `protobuf:"varint,19,opt,name=has_deprecations,json=hasDeprecations,proto3" json:"has_deprecations,omitempty"`
	// Chef Infra version on the node.
	ChefVersion string `protobuf:"bytes,20,opt,name=chef_version,json=chefVersion,proto3" json:"chef_version,omitempty"`
	// Chef tags associated with the node.
	ChefTags []string `protobuf:"bytes,21,rep,name=chef_tags,json=chefTags,proto3" json:"chef_tags,omitempty"`
	// Count of cookbook deprectations on the node.
	DeprecationsCount int32 `protobuf:"varint,22,opt,name=deprecations_count,json=deprecationsCount,proto3" json:"deprecations_count,omitempty"`
	// Timestamp when the node was created
	CreateAt             *timestamp.Timestamp `protobuf:"bytes,23,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{0}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *Node) GetCheckin() *timestamp.Timestamp {
	if m != nil {
		return m.Checkin
	}
	return nil
}

func (m *Node) GetUptimeSeconds() int32 {
	if m != nil {
		return m.UptimeSeconds
	}
	return 0
}

func (m *Node) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *Node) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Node) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Node) GetPlatformFamily() string {
	if m != nil {
		return m.PlatformFamily
	}
	return ""
}

func (m *Node) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *Node) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Node) GetSourceFqdn() string {
	if m != nil {
		return m.SourceFqdn
	}
	return ""
}

func (m *Node) GetLatestRunId() string {
	if m != nil {
		return m.LatestRunId
	}
	return ""
}

func (m *Node) GetHasRunsData() bool {
	if m != nil {
		return m.HasRunsData
	}
	return false
}

func (m *Node) GetLastCcrReceived() *timestamp.Timestamp {
	if m != nil {
		return m.LastCcrReceived
	}
	return nil
}

func (m *Node) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *Node) GetPolicyGroup() string {
	if m != nil {
		return m.PolicyGroup
	}
	return ""
}

func (m *Node) GetPolicyRevision() string {
	if m != nil {
		return m.PolicyRevision
	}
	return ""
}

func (m *Node) GetHasDeprecations() bool {
	if m != nil {
		return m.HasDeprecations
	}
	return false
}

func (m *Node) GetChefVersion() string {
	if m != nil {
		return m.ChefVersion
	}
	return ""
}

func (m *Node) GetChefTags() []string {
	if m != nil {
		return m.ChefTags
	}
	return nil
}

func (m *Node) GetDeprecationsCount() int32 {
	if m != nil {
		return m.DeprecationsCount
	}
	return 0
}

func (m *Node) GetCreateAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreateAt
	}
	return nil
}

type NodeAttribute struct {
	// The chef_guid associated with the node.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Name of the node.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Run list for the node.
	RunList []string `protobuf:"bytes,3,rep,name=run_list,json=runList,proto3" json:"run_list,omitempty"`
	// The environment for the node.
	ChefEnvironment string `protobuf:"bytes,4,opt,name=chef_environment,json=chefEnvironment,proto3" json:"chef_environment,omitempty"`
	// Stringified json of the normal attributes for the node.
	Normal string `protobuf:"bytes,5,opt,name=normal,proto3" json:"normal,omitempty"`
	// Stringified json of the default attributes for the node.
	Default string `protobuf:"bytes,6,opt,name=default,proto3" json:"default,omitempty"`
	// Stringified json of the override attributes for the node.
	Override string `protobuf:"bytes,7,opt,name=override,proto3" json:"override,omitempty"`
	// Stringified json of the automatic attributes for the node.
	Automatic string `protobuf:"bytes,13,opt,name=automatic,proto3" json:"automatic,omitempty"`
	// Count of normal attributes on the node.
	NormalValueCount int32 `protobuf:"varint,8,opt,name=normal_value_count,json=normalValueCount,proto3" json:"normal_value_count,omitempty"`
	// Count of default attributes on the node.
	DefaultValueCount int32 `protobuf:"varint,9,opt,name=default_value_count,json=defaultValueCount,proto3" json:"default_value_count,omitempty"`
	// Count of override attributes on the node.
	OverrideValueCount int32 `protobuf:"varint,10,opt,name=override_value_count,json=overrideValueCount,proto3" json:"override_value_count,omitempty"`
	// Total count of attributes on the node.
	AllValueCount int32 `protobuf:"varint,11,opt,name=all_value_count,json=allValueCount,proto3" json:"all_value_count,omitempty"`
	// Count of automatic attributes on the node.
	AutomaticValueCount  int32    `protobuf:"varint,12,opt,name=automatic_value_count,json=automaticValueCount,proto3" json:"automatic_value_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeAttribute) Reset()         { *m = NodeAttribute{} }
func (m *NodeAttribute) String() string { return proto.CompactTextString(m) }
func (*NodeAttribute) ProtoMessage()    {}
func (*NodeAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{1}
}

func (m *NodeAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeAttribute.Unmarshal(m, b)
}
func (m *NodeAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeAttribute.Marshal(b, m, deterministic)
}
func (m *NodeAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeAttribute.Merge(m, src)
}
func (m *NodeAttribute) XXX_Size() int {
	return xxx_messageInfo_NodeAttribute.Size(m)
}
func (m *NodeAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_NodeAttribute proto.InternalMessageInfo

func (m *NodeAttribute) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeAttribute) GetRunList() []string {
	if m != nil {
		return m.RunList
	}
	return nil
}

func (m *NodeAttribute) GetChefEnvironment() string {
	if m != nil {
		return m.ChefEnvironment
	}
	return ""
}

func (m *NodeAttribute) GetNormal() string {
	if m != nil {
		return m.Normal
	}
	return ""
}

func (m *NodeAttribute) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *NodeAttribute) GetOverride() string {
	if m != nil {
		return m.Override
	}
	return ""
}

func (m *NodeAttribute) GetAutomatic() string {
	if m != nil {
		return m.Automatic
	}
	return ""
}

func (m *NodeAttribute) GetNormalValueCount() int32 {
	if m != nil {
		return m.NormalValueCount
	}
	return 0
}

func (m *NodeAttribute) GetDefaultValueCount() int32 {
	if m != nil {
		return m.DefaultValueCount
	}
	return 0
}

func (m *NodeAttribute) GetOverrideValueCount() int32 {
	if m != nil {
		return m.OverrideValueCount
	}
	return 0
}

func (m *NodeAttribute) GetAllValueCount() int32 {
	if m != nil {
		return m.AllValueCount
	}
	return 0
}

func (m *NodeAttribute) GetAutomaticValueCount() int32 {
	if m != nil {
		return m.AutomaticValueCount
	}
	return 0
}

type Run struct {
	// Id of the infra node run.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The chef_guid associated with the node.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Name of the node.
	NodeName string `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// The organization the node is associated with.
	Organization string `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty"`
	// Start time of the infra run.
	StartTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time of the infra run.
	EndTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Source of the node run (e.g. chef-solo).
	Source string `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	// Status of the infra node run.
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// Resource count reported on the infra node run.
	TotalResourceCount int32 `protobuf:"varint,9,opt,name=total_resource_count,json=totalResourceCount,proto3" json:"total_resource_count,omitempty"`
	// Count of resources updated in the infra node run.
	UpdatedResourceCount int32 `protobuf:"varint,10,opt,name=updated_resource_count,json=updatedResourceCount,proto3" json:"updated_resource_count,omitempty"`
	// Chef-client version on the node.
	ChefVersion string `protobuf:"bytes,11,opt,name=chef_version,json=chefVersion,proto3" json:"chef_version,omitempty"`
	// Count in seconds that the node has been active.
	UptimeSeconds int32 `protobuf:"varint,12,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	// The environment for the node.
	Environment string `protobuf:"bytes,13,opt,name=environment,proto3" json:"environment,omitempty"`
	// FQDN of the node.
	Fqdn string `protobuf:"bytes,14,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// Chef server associated with the node.
	SourceFqdn string `protobuf:"bytes,15,opt,name=source_fqdn,json=sourceFqdn,proto3" json:"source_fqdn,omitempty"`
	// IP Address for the node.
	Ipaddress string `protobuf:"bytes,16,opt,name=ipaddress,proto3" json:"ipaddress,omitempty"`
	// Intentionally blank.
	Resources []*Resource `protobuf:"bytes,17,rep,name=resources,proto3" json:"resources,omitempty"`
	// Run list for the node.
	RunList []string `protobuf:"bytes,18,rep,name=run_list,json=runList,proto3" json:"run_list,omitempty"`
	// Intentionally blank.
	Deprecations []*Deprecation `protobuf:"bytes,19,rep,name=deprecations,proto3" json:"deprecations,omitempty"`
	// Chef Error information, available on failed runs.
	Error *ChefError `protobuf:"bytes,20,opt,name=error,proto3" json:"error,omitempty"`
	// Unused field.
	Tags []string `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty"`
	// List of resource names for the node.
	ResourceNames []string `protobuf:"bytes,22,rep,name=resource_names,json=resourceNames,proto3" json:"resource_names,omitempty"`
	// List of recipes the node calls.
	Recipes []string `protobuf:"bytes,23,rep,name=recipes,proto3" json:"recipes,omitempty"`
	// List of tags associated with the node.
	ChefTags []string `protobuf:"bytes,24,rep,name=chef_tags,json=chefTags,proto3" json:"chef_tags,omitempty"`
	// List of cookbooks associated with the node.
	Cookbooks []string `protobuf:"bytes,25,rep,name=cookbooks,proto3" json:"cookbooks,omitempty"`
	// Full platform string for the node (family + version).
	Platform string `protobuf:"bytes,26,opt,name=platform,proto3" json:"platform,omitempty"`
	// Platform family for the node.
	PlatformFamily string `protobuf:"bytes,27,opt,name=platform_family,json=platformFamily,proto3" json:"platform_family,omitempty"`
	// Platform version for the node.
	PlatformVersion string `protobuf:"bytes,28,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty"`
	// List of roles associated with the node.
	Roles []string `protobuf:"bytes,29,rep,name=roles,proto3" json:"roles,omitempty"`
	// Policy name associated with the node.
	PolicyName string `protobuf:"bytes,30,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	// Policy group associated with the node.
	PolicyGroup string `protobuf:"bytes,31,opt,name=policy_group,json=policyGroup,proto3" json:"policy_group,omitempty"`
	// Policy revision associated with the node.
	PolicyRevision string `protobuf:"bytes,32,opt,name=policy_revision,json=policyRevision,proto3" json:"policy_revision,omitempty"`
	// Expanded run list for the node.
	ExpandedRunList *ExpandedRunList `protobuf:"bytes,33,opt,name=expanded_run_list,json=expandedRunList,proto3" json:"expanded_run_list,omitempty"`
	// List of projects the node belongs to. This is a concept introduced with IAMv2.
	Projects []string `protobuf:"bytes,34,rep,name=projects,proto3" json:"projects,omitempty"`
	// List of versioned cookbooks associated with the node
	VersionedCookbooks   []*VersionedCookbook `protobuf:"bytes,35,rep,name=versioned_cookbooks,json=versionedCookbooks,proto3" json:"versioned_cookbooks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Run) Reset()         { *m = Run{} }
func (m *Run) String() string { return proto.CompactTextString(m) }
func (*Run) ProtoMessage()    {}
func (*Run) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{2}
}

func (m *Run) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Run.Unmarshal(m, b)
}
func (m *Run) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Run.Marshal(b, m, deterministic)
}
func (m *Run) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Run.Merge(m, src)
}
func (m *Run) XXX_Size() int {
	return xxx_messageInfo_Run.Size(m)
}
func (m *Run) XXX_DiscardUnknown() {
	xxx_messageInfo_Run.DiscardUnknown(m)
}

var xxx_messageInfo_Run proto.InternalMessageInfo

func (m *Run) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Run) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *Run) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Run) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *Run) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Run) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Run) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Run) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Run) GetTotalResourceCount() int32 {
	if m != nil {
		return m.TotalResourceCount
	}
	return 0
}

func (m *Run) GetUpdatedResourceCount() int32 {
	if m != nil {
		return m.UpdatedResourceCount
	}
	return 0
}

func (m *Run) GetChefVersion() string {
	if m != nil {
		return m.ChefVersion
	}
	return ""
}

func (m *Run) GetUptimeSeconds() int32 {
	if m != nil {
		return m.UptimeSeconds
	}
	return 0
}

func (m *Run) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Run) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *Run) GetSourceFqdn() string {
	if m != nil {
		return m.SourceFqdn
	}
	return ""
}

func (m *Run) GetIpaddress() string {
	if m != nil {
		return m.Ipaddress
	}
	return ""
}

func (m *Run) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Run) GetRunList() []string {
	if m != nil {
		return m.RunList
	}
	return nil
}

func (m *Run) GetDeprecations() []*Deprecation {
	if m != nil {
		return m.Deprecations
	}
	return nil
}

func (m *Run) GetError() *ChefError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Run) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Run) GetResourceNames() []string {
	if m != nil {
		return m.ResourceNames
	}
	return nil
}

func (m *Run) GetRecipes() []string {
	if m != nil {
		return m.Recipes
	}
	return nil
}

func (m *Run) GetChefTags() []string {
	if m != nil {
		return m.ChefTags
	}
	return nil
}

func (m *Run) GetCookbooks() []string {
	if m != nil {
		return m.Cookbooks
	}
	return nil
}

func (m *Run) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Run) GetPlatformFamily() string {
	if m != nil {
		return m.PlatformFamily
	}
	return ""
}

func (m *Run) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *Run) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Run) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

func (m *Run) GetPolicyGroup() string {
	if m != nil {
		return m.PolicyGroup
	}
	return ""
}

func (m *Run) GetPolicyRevision() string {
	if m != nil {
		return m.PolicyRevision
	}
	return ""
}

func (m *Run) GetExpandedRunList() *ExpandedRunList {
	if m != nil {
		return m.ExpandedRunList
	}
	return nil
}

func (m *Run) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *Run) GetVersionedCookbooks() []*VersionedCookbook {
	if m != nil {
		return m.VersionedCookbooks
	}
	return nil
}

type ExpandedRunList struct {
	// Id of the run list collection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Intentionally blank.
	RunList              []*RunList `protobuf:"bytes,2,rep,name=run_list,json=runList,proto3" json:"run_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExpandedRunList) Reset()         { *m = ExpandedRunList{} }
func (m *ExpandedRunList) String() string { return proto.CompactTextString(m) }
func (*ExpandedRunList) ProtoMessage()    {}
func (*ExpandedRunList) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{3}
}

func (m *ExpandedRunList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpandedRunList.Unmarshal(m, b)
}
func (m *ExpandedRunList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpandedRunList.Marshal(b, m, deterministic)
}
func (m *ExpandedRunList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpandedRunList.Merge(m, src)
}
func (m *ExpandedRunList) XXX_Size() int {
	return xxx_messageInfo_ExpandedRunList.Size(m)
}
func (m *ExpandedRunList) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpandedRunList.DiscardUnknown(m)
}

var xxx_messageInfo_ExpandedRunList proto.InternalMessageInfo

func (m *ExpandedRunList) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExpandedRunList) GetRunList() []*RunList {
	if m != nil {
		return m.RunList
	}
	return nil
}

type Resource struct {
	// Resource type.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name for the resource.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Id of the resource.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Duration of the resource processing.
	Duration string `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	// Change diff for the resource (if it was changed during the run).
	Delta string `protobuf:"bytes,5,opt,name=delta,proto3" json:"delta,omitempty"`
	// Cookbook name associated with the resource.
	CookbookName string `protobuf:"bytes,6,opt,name=cookbook_name,json=cookbookName,proto3" json:"cookbook_name,omitempty"`
	// Version of the cookbook associated with the resource.
	CookbookVersion string `protobuf:"bytes,7,opt,name=cookbook_version,json=cookbookVersion,proto3" json:"cookbook_version,omitempty"`
	// Status of the resource (e.g. 'up-to-date').
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	// Name of the recipe associated with the resource.
	RecipeName string `protobuf:"bytes,10,opt,name=recipe_name,json=recipeName,proto3" json:"recipe_name,omitempty"`
	// String result of the resource.
	Result string `protobuf:"bytes,11,opt,name=result,proto3" json:"result,omitempty"`
	// Conditional rule associated with the resource.
	Conditional string `protobuf:"bytes,16,opt,name=conditional,proto3" json:"conditional,omitempty"`
	// Boolean that denotes whether or not the resource failure should be ignored.
	IgnoreFailure        bool     `protobuf:"varint,17,opt,name=ignore_failure,json=ignoreFailure,proto3" json:"ignore_failure,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{4}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resource) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Resource) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *Resource) GetDelta() string {
	if m != nil {
		return m.Delta
	}
	return ""
}

func (m *Resource) GetCookbookName() string {
	if m != nil {
		return m.CookbookName
	}
	return ""
}

func (m *Resource) GetCookbookVersion() string {
	if m != nil {
		return m.CookbookVersion
	}
	return ""
}

func (m *Resource) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Resource) GetRecipeName() string {
	if m != nil {
		return m.RecipeName
	}
	return ""
}

func (m *Resource) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *Resource) GetConditional() string {
	if m != nil {
		return m.Conditional
	}
	return ""
}

func (m *Resource) GetIgnoreFailure() bool {
	if m != nil {
		return m.IgnoreFailure
	}
	return false
}

type ChefError struct {
	// Class for the error.
	Class string `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
	// Error message for the failed run.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Stacktrace for the failure.
	Backtrace []string `protobuf:"bytes,16,rep,name=backtrace,proto3" json:"backtrace,omitempty"`
	// Description for the error.
	Description          *Description `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ChefError) Reset()         { *m = ChefError{} }
func (m *ChefError) String() string { return proto.CompactTextString(m) }
func (*ChefError) ProtoMessage()    {}
func (*ChefError) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{5}
}

func (m *ChefError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChefError.Unmarshal(m, b)
}
func (m *ChefError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChefError.Marshal(b, m, deterministic)
}
func (m *ChefError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChefError.Merge(m, src)
}
func (m *ChefError) XXX_Size() int {
	return xxx_messageInfo_ChefError.Size(m)
}
func (m *ChefError) XXX_DiscardUnknown() {
	xxx_messageInfo_ChefError.DiscardUnknown(m)
}

var xxx_messageInfo_ChefError proto.InternalMessageInfo

func (m *ChefError) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *ChefError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChefError) GetBacktrace() []string {
	if m != nil {
		return m.Backtrace
	}
	return nil
}

func (m *ChefError) GetDescription() *Description {
	if m != nil {
		return m.Description
	}
	return nil
}

type RunList struct {
	// Type of run list item (e.g. 'recipe').
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Name of run list item.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Version of run list item.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Boolean denoting whether or not the run list item was skipped.
	Skipped bool `protobuf:"varint,4,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// Intentionally blank.
	Children             []*RunList `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RunList) Reset()         { *m = RunList{} }
func (m *RunList) String() string { return proto.CompactTextString(m) }
func (*RunList) ProtoMessage()    {}
func (*RunList) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{6}
}

func (m *RunList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunList.Unmarshal(m, b)
}
func (m *RunList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunList.Marshal(b, m, deterministic)
}
func (m *RunList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunList.Merge(m, src)
}
func (m *RunList) XXX_Size() int {
	return xxx_messageInfo_RunList.Size(m)
}
func (m *RunList) XXX_DiscardUnknown() {
	xxx_messageInfo_RunList.DiscardUnknown(m)
}

var xxx_messageInfo_RunList proto.InternalMessageInfo

func (m *RunList) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RunList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RunList) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RunList) GetSkipped() bool {
	if m != nil {
		return m.Skipped
	}
	return false
}

func (m *RunList) GetChildren() []*RunList {
	if m != nil {
		return m.Children
	}
	return nil
}

type Description struct {
	// Title for the error description.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// More information about the error.
	Sections             []*_struct.Struct `protobuf:"bytes,2,rep,name=sections,proto3" json:"sections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Description) Reset()         { *m = Description{} }
func (m *Description) String() string { return proto.CompactTextString(m) }
func (*Description) ProtoMessage()    {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{7}
}

func (m *Description) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Description.Unmarshal(m, b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Description.Marshal(b, m, deterministic)
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return xxx_messageInfo_Description.Size(m)
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Description) GetSections() []*_struct.Struct {
	if m != nil {
		return m.Sections
	}
	return nil
}

type Deprecation struct {
	// Message for the deprecation.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Url reference for the deprecation.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Location of the deprecated code.
	Location             string   `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deprecation) Reset()         { *m = Deprecation{} }
func (m *Deprecation) String() string { return proto.CompactTextString(m) }
func (*Deprecation) ProtoMessage()    {}
func (*Deprecation) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{8}
}

func (m *Deprecation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deprecation.Unmarshal(m, b)
}
func (m *Deprecation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deprecation.Marshal(b, m, deterministic)
}
func (m *Deprecation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deprecation.Merge(m, src)
}
func (m *Deprecation) XXX_Size() int {
	return xxx_messageInfo_Deprecation.Size(m)
}
func (m *Deprecation) XXX_DiscardUnknown() {
	xxx_messageInfo_Deprecation.DiscardUnknown(m)
}

var xxx_messageInfo_Deprecation proto.InternalMessageInfo

func (m *Deprecation) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Deprecation) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Deprecation) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type VersionedCookbook struct {
	// Name of the cookbook.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the cookbook.
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionedCookbook) Reset()         { *m = VersionedCookbook{} }
func (m *VersionedCookbook) String() string { return proto.CompactTextString(m) }
func (*VersionedCookbook) ProtoMessage()    {}
func (*VersionedCookbook) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{9}
}

func (m *VersionedCookbook) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionedCookbook.Unmarshal(m, b)
}
func (m *VersionedCookbook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionedCookbook.Marshal(b, m, deterministic)
}
func (m *VersionedCookbook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionedCookbook.Merge(m, src)
}
func (m *VersionedCookbook) XXX_Size() int {
	return xxx_messageInfo_VersionedCookbook.Size(m)
}
func (m *VersionedCookbook) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionedCookbook.DiscardUnknown(m)
}

var xxx_messageInfo_VersionedCookbook proto.InternalMessageInfo

func (m *VersionedCookbook) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VersionedCookbook) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type MissingNodeDurationCounts struct {
	// List of counted durations
	CountedDurations     []*CountedDuration `protobuf:"bytes,1,rep,name=counted_durations,json=countedDurations,proto3" json:"counted_durations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MissingNodeDurationCounts) Reset()         { *m = MissingNodeDurationCounts{} }
func (m *MissingNodeDurationCounts) String() string { return proto.CompactTextString(m) }
func (*MissingNodeDurationCounts) ProtoMessage()    {}
func (*MissingNodeDurationCounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{10}
}

func (m *MissingNodeDurationCounts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MissingNodeDurationCounts.Unmarshal(m, b)
}
func (m *MissingNodeDurationCounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MissingNodeDurationCounts.Marshal(b, m, deterministic)
}
func (m *MissingNodeDurationCounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissingNodeDurationCounts.Merge(m, src)
}
func (m *MissingNodeDurationCounts) XXX_Size() int {
	return xxx_messageInfo_MissingNodeDurationCounts.Size(m)
}
func (m *MissingNodeDurationCounts) XXX_DiscardUnknown() {
	xxx_messageInfo_MissingNodeDurationCounts.DiscardUnknown(m)
}

var xxx_messageInfo_MissingNodeDurationCounts proto.InternalMessageInfo

func (m *MissingNodeDurationCounts) GetCountedDurations() []*CountedDuration {
	if m != nil {
		return m.CountedDurations
	}
	return nil
}

type CountedDuration struct {
	// Duration of the count. Example '3d'
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// The number of nodes for this duration
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountedDuration) Reset()         { *m = CountedDuration{} }
func (m *CountedDuration) String() string { return proto.CompactTextString(m) }
func (*CountedDuration) ProtoMessage()    {}
func (*CountedDuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc7896b1b7ae22e8, []int{11}
}

func (m *CountedDuration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountedDuration.Unmarshal(m, b)
}
func (m *CountedDuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountedDuration.Marshal(b, m, deterministic)
}
func (m *CountedDuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountedDuration.Merge(m, src)
}
func (m *CountedDuration) XXX_Size() int {
	return xxx_messageInfo_CountedDuration.Size(m)
}
func (m *CountedDuration) XXX_DiscardUnknown() {
	xxx_messageInfo_CountedDuration.DiscardUnknown(m)
}

var xxx_messageInfo_CountedDuration proto.InternalMessageInfo

func (m *CountedDuration) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *CountedDuration) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*Node)(nil), "chef.automate.api.cfgmgmt.response.Node")
	proto.RegisterType((*NodeAttribute)(nil), "chef.automate.api.cfgmgmt.response.NodeAttribute")
	proto.RegisterType((*Run)(nil), "chef.automate.api.cfgmgmt.response.Run")
	proto.RegisterType((*ExpandedRunList)(nil), "chef.automate.api.cfgmgmt.response.ExpandedRunList")
	proto.RegisterType((*Resource)(nil), "chef.automate.api.cfgmgmt.response.Resource")
	proto.RegisterType((*ChefError)(nil), "chef.automate.api.cfgmgmt.response.ChefError")
	proto.RegisterType((*RunList)(nil), "chef.automate.api.cfgmgmt.response.RunList")
	proto.RegisterType((*Description)(nil), "chef.automate.api.cfgmgmt.response.Description")
	proto.RegisterType((*Deprecation)(nil), "chef.automate.api.cfgmgmt.response.Deprecation")
	proto.RegisterType((*VersionedCookbook)(nil), "chef.automate.api.cfgmgmt.response.VersionedCookbook")
	proto.RegisterType((*MissingNodeDurationCounts)(nil), "chef.automate.api.cfgmgmt.response.MissingNodeDurationCounts")
	proto.RegisterType((*CountedDuration)(nil), "chef.automate.api.cfgmgmt.response.CountedDuration")
}

func init() {
	proto.RegisterFile("api/external/cfgmgmt/response/nodes.proto", fileDescriptor_dc7896b1b7ae22e8)
}

var fileDescriptor_dc7896b1b7ae22e8 = []byte{
	// 1557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x86, 0x24, 0x5b, 0xa2, 0x46, 0x96, 0x65, 0xad, 0x1d, 0x9b, 0x71, 0xfc, 0xff, 0x51, 0x18,
	0xb4, 0x75, 0xd0, 0x44, 0x0a, 0x9c, 0xa4, 0x87, 0xcb, 0xd4, 0x89, 0x83, 0x14, 0x6d, 0x80, 0x32,
	0x69, 0x50, 0xf4, 0x86, 0x5d, 0x93, 0x2b, 0x79, 0x6b, 0x8a, 0xcb, 0xee, 0x2e, 0x8d, 0xa4, 0x40,
	0x1f, 0xa6, 0xf7, 0x45, 0x1f, 0x28, 0x17, 0x7d, 0x96, 0x62, 0x4f, 0x34, 0x29, 0x19, 0xb1, 0x7a,
	0xa7, 0xf9, 0x66, 0x86, 0xbb, 0x3b, 0x87, 0x6f, 0xc6, 0x86, 0x7b, 0x38, 0xa7, 0x13, 0xf2, 0x4e,
	0x12, 0x9e, 0xe1, 0x74, 0x12, 0x4f, 0x67, 0xf3, 0xd9, 0x5c, 0x4e, 0x38, 0x11, 0x39, 0xcb, 0x04,
	0x99, 0x64, 0x2c, 0x21, 0x62, 0x9c, 0x73, 0x26, 0x19, 0x0a, 0xe2, 0x33, 0x32, 0x1d, 0xe3, 0x42,
	0xb2, 0x39, 0x96, 0x64, 0x8c, 0x73, 0x3a, 0xb6, 0xf6, 0x63, 0x67, 0xbf, 0x7f, 0x7b, 0xc6, 0xd8,
	0x2c, 0x25, 0x13, 0xed, 0x71, 0x5a, 0x4c, 0x27, 0x92, 0xce, 0x89, 0x90, 0x78, 0x9e, 0x9b, 0x8f,
	0xec, 0x1f, 0x2c, 0x1a, 0x08, 0xc9, 0x8b, 0x58, 0x1a, 0x6d, 0xf0, 0xa1, 0x0d, 0x6b, 0xaf, 0x58,
	0x42, 0xd0, 0x26, 0x34, 0x69, 0xe2, 0x37, 0x46, 0x8d, 0xc3, 0x6e, 0xd8, 0xa4, 0x09, 0x42, 0xb0,
	0x96, 0xe1, 0x39, 0xf1, 0x9b, 0x1a, 0xd1, 0xbf, 0x15, 0x36, 0xfd, 0x2d, 0xc9, 0xfc, 0x96, 0xc1,
	0xd4, 0x6f, 0xf4, 0x18, 0x3a, 0xf1, 0x19, 0x89, 0xcf, 0x69, 0xe6, 0xaf, 0x8d, 0x1a, 0x87, 0xbd,
	0xa3, 0xfd, 0xb1, 0x39, 0x70, 0xec, 0x0e, 0x1c, 0xbf, 0x71, 0x37, 0x0a, 0x9d, 0x29, 0xfa, 0x04,
	0x36, 0x8b, 0x5c, 0xdd, 0x34, 0x12, 0x24, 0x66, 0x59, 0x22, 0xfc, 0xf5, 0x51, 0xe3, 0x70, 0x3d,
	0xec, 0x1b, 0xf4, 0xb5, 0x01, 0x51, 0x00, 0x1b, 0x8c, 0xcf, 0x70, 0x46, 0x7f, 0xc7, 0x92, 0xb2,
	0xcc, 0x6f, 0xeb, 0x83, 0x6b, 0x18, 0x1a, 0x41, 0x8f, 0x64, 0x17, 0x94, 0xb3, 0x6c, 0x4e, 0x32,
	0xe9, 0x77, 0xb4, 0x49, 0x15, 0x42, 0xfb, 0xe0, 0xe5, 0x29, 0x96, 0x53, 0xc6, 0xe7, 0xbe, 0xa7,
	0xd5, 0xa5, 0x8c, 0x3e, 0x83, 0x81, 0xfb, 0x1d, 0x4d, 0xf1, 0x9c, 0xa6, 0xef, 0xfd, 0xae, 0x36,
	0xd9, 0x74, 0xf0, 0x89, 0x46, 0xd1, 0x3d, 0xd8, 0x2a, 0x0d, 0x2f, 0x08, 0x17, 0xea, 0x3a, 0xa0,
	0x2d, 0xcb, 0x0f, 0xbc, 0x35, 0x30, 0xda, 0x85, 0xb6, 0x90, 0x58, 0x16, 0xc2, 0xef, 0x69, 0x03,
	0x2b, 0xa1, 0xdb, 0xd0, 0x13, 0xac, 0xe0, 0x31, 0x89, 0x74, 0x14, 0x37, 0xb4, 0x12, 0x0c, 0x74,
	0xa2, 0x62, 0x19, 0x40, 0x3f, 0xc5, 0x92, 0x08, 0x19, 0xf1, 0x22, 0x8b, 0x68, 0xe2, 0xf7, 0xcd,
	0x63, 0x0c, 0x18, 0x16, 0xd9, 0xcb, 0x44, 0xd9, 0x9c, 0x61, 0xa1, 0x0c, 0x44, 0x94, 0x60, 0x89,
	0xfd, 0xcd, 0x51, 0xe3, 0xd0, 0x0b, 0x7b, 0x67, 0x58, 0x84, 0x45, 0x26, 0x9e, 0x61, 0x89, 0xd1,
	0x09, 0x0c, 0x53, 0x2c, 0x64, 0x14, 0xc7, 0x3c, 0xe2, 0x24, 0x26, 0xf4, 0x82, 0x24, 0xfe, 0xe0,
	0xda, 0xec, 0x0c, 0x94, 0xd3, 0x71, 0xcc, 0x43, 0xeb, 0xa2, 0x2e, 0x9c, 0xb3, 0x94, 0xc6, 0xef,
	0x23, 0x5d, 0x0a, 0x5b, 0xe6, 0xc2, 0x06, 0x7a, 0xa5, 0x0a, 0xe2, 0x0e, 0x6c, 0x58, 0x83, 0x19,
	0x67, 0x45, 0xee, 0x0f, 0xcd, 0x7d, 0x0d, 0xf6, 0x42, 0x41, 0x3a, 0xc0, 0xc6, 0x84, 0x93, 0x0b,
	0xaa, 0xc3, 0x86, 0x6c, 0x80, 0x35, 0x1c, 0x5a, 0x54, 0x05, 0x58, 0x3d, 0x2c, 0x21, 0x39, 0x27,
	0xb1, 0x4e, 0xad, 0xf0, 0xb7, 0xf5, 0xdb, 0x06, 0x67, 0x58, 0x3c, 0xab, 0xc0, 0xea, 0x58, 0xd5,
	0x19, 0x65, 0x1e, 0x76, 0xcc, 0xb1, 0x0a, 0x73, 0x39, 0xb8, 0x05, 0x5d, 0x6d, 0x22, 0xf1, 0x4c,
	0xf8, 0x37, 0x46, 0x2d, 0x95, 0x74, 0x05, 0xbc, 0xc1, 0x33, 0x81, 0x1e, 0x00, 0xaa, 0x1e, 0x13,
	0xc5, 0xac, 0xc8, 0xa4, 0xbf, 0xab, 0x2b, 0x70, 0x58, 0xd5, 0x1c, 0x2b, 0x05, 0xfa, 0x12, 0xba,
	0x31, 0x27, 0x58, 0x92, 0x08, 0x4b, 0x7f, 0xef, 0xda, 0x30, 0x7a, 0xc6, 0xf8, 0xa9, 0x0c, 0x3e,
	0xb4, 0xa0, 0xaf, 0x9a, 0xeb, 0xa9, 0x94, 0x9c, 0x9e, 0x16, 0x92, 0xa0, 0x3d, 0xe8, 0xa8, 0x06,
	0x8f, 0xca, 0x56, 0x6b, 0x2b, 0xf1, 0xe5, 0xd5, 0xed, 0x76, 0x13, 0x3c, 0x55, 0x07, 0x29, 0x15,
	0xd2, 0x6f, 0xe9, 0x27, 0x74, 0x78, 0x91, 0x7d, 0x47, 0x85, 0x54, 0xc1, 0xd2, 0xcf, 0xab, 0x56,
	0xfe, 0x9a, 0xa9, 0x46, 0x85, 0x3f, 0xaf, 0x54, 0xff, 0x2e, 0xb4, 0x33, 0xc6, 0xe7, 0x38, 0xd5,
	0x2d, 0xa6, 0x4f, 0x54, 0x12, 0xf2, 0xa1, 0x93, 0x90, 0x29, 0x2e, 0x52, 0x69, 0xdb, 0xca, 0x89,
	0xaa, 0x5f, 0xd8, 0x05, 0xe1, 0x9c, 0x26, 0xc4, 0xb6, 0x53, 0x29, 0xa3, 0x03, 0xe8, 0x5a, 0x3e,
	0xa2, 0xb1, 0x2d, 0xcf, 0x4b, 0x00, 0xdd, 0x07, 0x64, 0xbe, 0x1e, 0x5d, 0xe0, 0xb4, 0x20, 0x36,
	0xb0, 0x9e, 0x0e, 0xec, 0x96, 0xd1, 0xbc, 0x55, 0x0a, 0x13, 0xd7, 0x31, 0x6c, 0xdb, 0x23, 0x6b,
	0xe6, 0x5d, 0x97, 0x07, 0xad, 0xaa, 0xd8, 0x3f, 0x84, 0x1d, 0x77, 0x8f, 0x9a, 0x03, 0x68, 0x07,
	0xe4, 0x74, 0x15, 0x8f, 0x4f, 0x61, 0x80, 0xd3, 0xfa, 0x65, 0x7a, 0x86, 0x67, 0x70, 0x5a, 0xbd,
	0xc9, 0x11, 0xdc, 0x28, 0x1f, 0x51, 0xb3, 0xde, 0xd0, 0xd6, 0xdb, 0xa5, 0xf2, 0xd2, 0x27, 0xf8,
	0xb3, 0x07, 0xad, 0xb0, 0xc8, 0x96, 0x88, 0xb3, 0x92, 0xe2, 0x66, 0x2d, 0xc5, 0xb7, 0xa0, 0xab,
	0x15, 0x3a, 0xcf, 0x86, 0x42, 0x3d, 0x05, 0xe8, 0x4e, 0x5a, 0x64, 0xba, 0xb5, 0x2b, 0x98, 0xee,
	0x6b, 0x00, 0x21, 0x31, 0x97, 0x91, 0xa2, 0x48, 0x9d, 0xcd, 0x8f, 0x17, 0x62, 0x57, 0x5b, 0x2b,
	0x19, 0x3d, 0x01, 0x8f, 0x64, 0x89, 0x71, 0x6c, 0x5f, 0x4f, 0xd3, 0x24, 0x4b, 0xb4, 0x9b, 0x62,
	0x32, 0x4d, 0x4f, 0xb6, 0x0e, 0xac, 0x54, 0x61, 0x38, 0xaf, 0xc6, 0x70, 0x0f, 0x61, 0x47, 0x32,
	0x89, 0xd3, 0x88, 0x13, 0xcb, 0x74, 0xd5, 0x94, 0x22, 0xad, 0x0b, 0xad, 0xca, 0x44, 0xfe, 0x31,
	0xec, 0x16, 0x79, 0x82, 0x25, 0x49, 0x16, 0x7d, 0x4c, 0x56, 0x77, 0xac, 0xb6, 0xee, 0xb5, 0x48,
	0x00, 0xbd, 0x65, 0x02, 0x58, 0x9e, 0x30, 0x1b, 0x57, 0x4d, 0x98, 0x85, 0xe9, 0xd1, 0x5f, 0x9e,
	0x1e, 0x6e, 0xe8, 0x6d, 0x56, 0x86, 0xde, 0x02, 0x93, 0x0f, 0x96, 0x98, 0xfc, 0x00, 0xba, 0x34,
	0xc7, 0x49, 0xc2, 0x89, 0x10, 0x96, 0x37, 0x2f, 0x01, 0xf4, 0x2d, 0x74, 0xdd, 0x63, 0x85, 0x3f,
	0x1c, 0xb5, 0x0e, 0x7b, 0x47, 0xf7, 0xc7, 0xd7, 0xcf, 0xfa, 0xb1, 0x0b, 0x42, 0x78, 0xe9, 0x5e,
	0x23, 0x09, 0x54, 0x27, 0x89, 0xd7, 0xb0, 0xb1, 0xc0, 0xa6, 0xea, 0xa4, 0xc9, 0x2a, 0x27, 0x55,
	0xe8, 0x36, 0xac, 0x7d, 0x04, 0x1d, 0xc3, 0x3a, 0xe1, 0x9c, 0x71, 0x4d, 0xba, 0xbd, 0xa3, 0x07,
	0xab, 0x7c, 0xed, 0x58, 0x51, 0x92, 0x72, 0x0a, 0x8d, 0xaf, 0x8a, 0x69, 0x85, 0x98, 0xf5, 0x6f,
	0x95, 0xb0, 0xb2, 0x02, 0x54, 0x8b, 0x08, 0x7f, 0x57, 0x6b, 0xfb, 0x0e, 0x55, 0x7d, 0x22, 0x14,
	0x6d, 0x71, 0x12, 0xd3, 0x9c, 0x08, 0x7f, 0xcf, 0x3e, 0xd7, 0x88, 0x75, 0xca, 0xf7, 0x17, 0x28,
	0xff, 0x00, 0xba, 0x31, 0x63, 0xe7, 0xa7, 0x8c, 0x9d, 0x0b, 0xff, 0xa6, 0x56, 0x5e, 0x02, 0xb5,
	0x0d, 0x61, 0xff, 0xfa, 0x0d, 0xe1, 0xd6, 0xca, 0x1b, 0xc2, 0xc1, 0xd5, 0x1b, 0xc2, 0x0e, 0xac,
	0x73, 0x96, 0x12, 0xe1, 0xff, 0x4f, 0xdf, 0xc4, 0x08, 0x8b, 0xe3, 0xf6, 0xff, 0xd7, 0x8e, 0xdb,
	0xdb, 0x2b, 0x8d, 0xdb, 0xd1, 0x95, 0xe3, 0x36, 0x82, 0x21, 0x79, 0x97, 0xe3, 0x2c, 0x51, 0x9d,
	0xe7, 0x0a, 0xe8, 0x8e, 0xce, 0xe9, 0xa3, 0x55, 0x72, 0xfa, 0xdc, 0x3a, 0x87, 0xa6, 0xd8, 0xc2,
	0x01, 0xa9, 0x03, 0x3a, 0xa6, 0x9c, 0xfd, 0x4a, 0x62, 0x29, 0xfc, 0xc0, 0x64, 0xc3, 0xc9, 0x68,
	0x0a, 0xdb, 0x36, 0x42, 0x24, 0x89, 0x2e, 0xf3, 0x72, 0x57, 0x17, 0xe8, 0x93, 0x55, 0x8e, 0x7f,
	0xeb, 0xdc, 0x8f, 0xad, 0x77, 0x88, 0x2e, 0x16, 0x21, 0x11, 0x50, 0x18, 0x2c, 0xdc, 0x73, 0x89,
	0xae, 0x4f, 0x2a, 0xfd, 0xd3, 0xd4, 0xe7, 0x7f, 0xbe, 0x52, 0x2b, 0xda, 0x67, 0xbb, 0x66, 0x0b,
	0xfe, 0x69, 0x82, 0xe7, 0xfa, 0x53, 0xd7, 0xf7, 0xfb, 0x9c, 0xd8, 0x63, 0xf4, 0xef, 0x2b, 0x27,
	0xbc, 0xb9, 0x4c, 0xab, 0xbc, 0xcc, 0x3e, 0x78, 0x49, 0xc1, 0xab, 0x13, 0xa0, 0x94, 0x55, 0xcd,
	0x24, 0x24, 0x95, 0xd8, 0x8e, 0x71, 0x23, 0xa0, 0xbb, 0xd0, 0x77, 0xf1, 0x33, 0x55, 0x63, 0x57,
	0x64, 0x07, 0xea, 0xba, 0x51, 0xdb, 0x82, 0x33, 0x72, 0x95, 0xd9, 0xb1, 0xdb, 0x82, 0xc5, 0x97,
	0x77, 0xd7, 0xee, 0xe2, 0xee, 0x6a, 0xfa, 0xcc, 0x9c, 0x62, 0x36, 0x5f, 0x30, 0x90, 0x3e, 0x63,
	0x17, 0xda, 0x9c, 0x08, 0xb5, 0x4d, 0xd8, 0xa5, 0xd7, 0x48, 0x8a, 0x60, 0x15, 0xd3, 0x52, 0xf5,
	0x06, 0x9c, 0x5a, 0x2e, 0xac, 0x42, 0xaa, 0xf1, 0xe9, 0x2c, 0x63, 0x9c, 0x44, 0x53, 0x4c, 0xd3,
	0x82, 0x13, 0xbd, 0x46, 0x7a, 0x61, 0xdf, 0xa0, 0x27, 0x06, 0x0c, 0xfe, 0x6a, 0x40, 0xb7, 0x24,
	0x12, 0x15, 0x8d, 0x38, 0xc5, 0x42, 0xd8, 0x10, 0x1b, 0x41, 0x91, 0xc3, 0x9c, 0x08, 0x81, 0x67,
	0x2e, 0xcc, 0x4e, 0x54, 0xfd, 0x7f, 0x8a, 0xe3, 0x73, 0xc9, 0x71, 0xac, 0x16, 0x59, 0xdd, 0xff,
	0x25, 0x80, 0x7e, 0x80, 0x5e, 0x42, 0x44, 0xcc, 0x69, 0xae, 0x43, 0x3f, 0xd4, 0x6d, 0xb0, 0x22,
	0x51, 0x96, 0x6e, 0x61, 0xf5, 0x1b, 0xc1, 0xdf, 0x0d, 0xe8, 0xb8, 0x9a, 0x5b, 0xb5, 0x1c, 0x7c,
	0xe8, 0xb8, 0xf4, 0x98, 0x9a, 0x70, 0xa2, 0xd2, 0x88, 0x73, 0x9a, 0xe7, 0x24, 0xd1, 0x75, 0xe1,
	0x85, 0x4e, 0x44, 0x2f, 0xc0, 0x8b, 0xcf, 0x68, 0x9a, 0x70, 0x92, 0xf9, 0xeb, 0xff, 0xbd, 0x7e,
	0x4b, 0xe7, 0xe0, 0x27, 0xe8, 0x55, 0x1e, 0xa3, 0x02, 0x2c, 0xa9, 0x4c, 0xdd, 0xa5, 0x8d, 0x80,
	0x1e, 0x81, 0x27, 0x48, 0x6c, 0xc6, 0x89, 0xe9, 0x96, 0xbd, 0xa5, 0x3d, 0xe2, 0xb5, 0xfe, 0xfb,
	0x32, 0x2c, 0x0d, 0x83, 0x1f, 0xd5, 0x97, 0xcb, 0x11, 0x52, 0x4d, 0x52, 0xa3, 0x9e, 0xa4, 0x2d,
	0x68, 0x15, 0x3c, 0xb5, 0x21, 0x51, 0x3f, 0x55, 0x43, 0xa4, 0xcc, 0xf8, 0xb9, 0x95, 0xc9, 0xc9,
	0xc1, 0x53, 0x18, 0x2e, 0xb1, 0x40, 0x19, 0xd6, 0xc6, 0xd5, 0x61, 0x6d, 0xd6, 0xc2, 0x1a, 0xfc,
	0x01, 0x37, 0xbf, 0xa7, 0x42, 0xd0, 0x6c, 0xa6, 0xd6, 0xf4, 0x67, 0xb6, 0xd5, 0xf4, 0x8e, 0x21,
	0xd0, 0x2f, 0x30, 0xd4, 0x9b, 0x08, 0x49, 0x22, 0xd7, 0x84, 0xaa, 0xdc, 0x5a, 0xab, 0x32, 0xe4,
	0xb1, 0x71, 0x76, 0x5f, 0x0d, 0xb7, 0xe2, 0x3a, 0x20, 0x82, 0x63, 0x18, 0x2c, 0x18, 0xd5, 0x18,
	0xa0, 0xb1, 0xcc, 0x00, 0x66, 0x35, 0x6a, 0xea, 0x4d, 0xc6, 0x08, 0xdf, 0x7c, 0xf5, 0xf3, 0x17,
	0x33, 0x2a, 0xcf, 0x8a, 0xd3, 0x71, 0xcc, 0xe6, 0x13, 0x75, 0xaf, 0x89, 0xbb, 0xd7, 0xe4, 0xa3,
	0xff, 0x6a, 0x38, 0x6d, 0xeb, 0x94, 0x3d, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0xda, 0xed, 0x09,
	0x18, 0x92, 0x10, 0x00, 0x00,
}
