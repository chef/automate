syntax = "proto3";

package chef.automate.api.cfgmgmt.response;
option go_package = "github.com/chef/automate/api/external/cfgmgmt/response";

enum SCMType {
  SCM_TYPE_UNSPECIFIED = 0;
  SCM_TYPE_UNKNOWN_SCM = 1;
  SCM_TYPE_GIT = 2;
}

enum SCMWebType {
  SCM_WEB_TYPE_UNSPECIFIED = 0;
  SCM_WEB_TYPE_UNKNOWN_SCM_WEB = 1;
  SCM_WEB_TYPE_GITHUB = 2;
}

/*
A Rollout represents the process of distributing Chef Infra code (with
Policyfiles) to a set of nodes. It's used to track which nodes have run the
latest version of the Chef Infra code assigned to them and also provide the
user insights about the code by aggregating Chef Client run results
according to the version of Chef Infra code applied. Metadata about the code
is stored in order to provide the user with convenient references back to
systems they already use (such as SCM and Ci/CD systems) to manage their code.

Nodes are segmented by a triple of policy name, policy group, and policy domain URL:
* policy name generally describes what kind of system it is, e.g., a database server
* policy group generally describes where the system fits in the user's code
  lifecycle, e.g., "QA" or "production." Policy groups may also represent a
  subset of nodes within a code lifecycle stage, such as a "production-canary"
  group.
* policy domain URL identifies the system that distributes the Chef Infra code
  and is the owner of the namespaces for policy name and group. E.g., a Chef
  Server URL with the `/organizations/:orgname` part.

There is one (or zero) revision(s) of the Chef Infra code applied to any
segment at a time. Rollouts track the changes to which revision of the code is
applied to the node segments over time.

*/
message Rollout {
  // The name of the policy, i.e., the `name` attribute in the Policyfile
  string policy_name = 1;
  // The group of nodes which are targeted by the rollout. In the Chef Server
  // case, this is the policy_group to which the user is pushing the policy.
  string policy_node_group = 2;
  // The revision_id of the compiled policy being rolled out
  string policy_revision_id = 3;
  // In the Chef Server case, the policy domain URL is the Chef Server URL
  // with the `/organizations/:orgname` portion of the URL path included. In
  // general, this can be a URL for any content storage/distribution service,
  // as long as the combination of policy_name and policy_node_group is unique
  // on that system.
  //
  // The set of nodes configured to fetch policy content from the
  // policy_domain_url and configured with the same policy_name and
  // policy_node_group form the target set of nodes for a rollout and are
  // expected to apply the policy revision described by the rollout.
  string policy_domain_url = 4;
  // The source control system used with the policyfile
  SCMType scm_type = 5;
  // The software/service used to host the source code repository
  SCMWebType scm_web_type = 6;
  // The URL used to obtain a copy of the source code repository
  string policy_scm_url = 7;
  // The URL used to view the source code repository via the web
  string policy_scm_web_url = 8;
  // The source control system's identifier for the repository version. This
  // should be the version where the policy's lockfile was committed.
  string policy_scm_commit = 9;
  // A free-form description of the rollout, as given by the user. Long
  // messages may be displayed in a truncated form in the UI. The content may
  // be entered manually by the user or extracted from another system, for
  // example a git commit message.
  string description = 10;
  // If the rollout was initiated via Ci/CD or similar system, the web URL
  // for the job that initiated the rollout.
  string ci_job_url = 11;
  // If the rollout was initiated by Ci/CD or similar system, the id of the job
  // that initiated the rollout. Should include the Ci system's nickname or
  // other identifying information users would need to associate the job ID to
  // the Ci/CD system.
  string ci_job_id = 12;

  // The system-generated ID for this rollout. The system currently provides
  // autoincrementing integers for the Ids.
  string id = 13;

  // The time that the rollout began. Whenever a new rollout is created, it
  // becomes the "current" rollout for its node segment; that is, any nodes
  // that start a Chef Infra Client run will run the policy revision described
  // by this "current" rollout. The system will populate the previously current
  // rollout's `end_time` attribute with the current time.
  string start_time = 14;
  // The time that the rollout was replaced with another rollout.
  string end_time = 15;

  // The username of the author of the most recent commit to the source code
  // repository. In git, this is the setting `user.name`.
  string scm_author_name = 16;
  // The email address of the author of the most recent commit to the source
  // code repository. In git, this is the setting `user.email`.
  string scm_author_email = 17;
  // The username of the entity who uploaded/promoted the policy code to the
  // code host. In a Chef Server architecture, this is the name of the Chef
  // Server user who ran the `chef push` command to upload the policy.
  string policy_domain_username = 18;
}

message Rollouts {
  repeated Rollout rollouts = 1;
}

/*
NodeSegmentsWithRolloutProgress

A Node Segment is the set of Chef Infra nodes with a shared policy_name,
policy_node_group, and policy_domain_url.

NodeSegmentsWithRolloutProgress lists all of the node segments matching the
request with information about the progress and status of the code rollouts for each segment.
*/
message NodeSegmentsWithRolloutProgress {
  // The NodeSegmentRolloutProgress are sorted by policy group, policy
  // name, then domain URL.
  repeated NodeSegmentRolloutProgress node_segment_rollout_progress = 1;
}

message NodeSegmentRolloutProgress {
  // policy_name, policy_node_group, policy_domain_url make up a "compound
  // id" for the node segment
  string policy_name = 1;
  string policy_node_group = 2;
  string policy_domain_url = 3;
  // total nodes in elasticsearch in the node segment
  int32 total_nodes = 4;
  CurrentRolloutProgress current_rollout_progress = 5;
  // This is the last, say 2 or 4 rollouts before the current one (to give a
  // total of 3 or 5)
  repeated PastRolloutProgress previous_rollouts = 6;
}

message CurrentRolloutProgress {
  // Rollout is the full rollout object, but we can change this to be a subset only.
  Rollout rollout = 1;
  // Nodes that have run the code being rolled out thus far
  int32 node_count = 2;
  // I'm assuming it's easy to get the status when we get the counts.
  int32 latest_run_successful_count = 3;
  int32 latest_run_errored_count = 4;
  string source_link = 5;
  string build_link = 6;
}

message PastRolloutProgress {
  // Rollout is the full rollout object, but we can change this to be a subset only.
  Rollout rollout = 1;
  // The number of nodes in the node segment for which the last recorded CCR
  // was part of this rollout. Note that no breakdown of success/errored is
  // provided, since some nodes may have moved on to the current rollout and
  // are not included in the count.
  int32 latest_run_node_count = 2;
  string source_link = 5;
  string build_link = 6;
}

message CreateRolloutTest {}
