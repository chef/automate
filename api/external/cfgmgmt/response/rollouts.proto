syntax = "proto3";

package chef.automate.api.cfgmgmt.response;
option go_package = "github.com/chef/automate/api/external/cfgmgmt/response";

enum SCMType {
  UNKNOWN_SCM = 0;
  GIT = 1;
}

enum SCMWebType {
  UNKNOWN_SCM_WEB = 0;
  GITHUB = 1;
}

/*
A "Rollout" represents the process of distributing Chef Infra code (with
Policyfiles) to a set of nodes. It's used to track which nodes have run the
latest version of the Chef Infra code assigned to them and also provide the
user insights about the code by aggregating Chef Client run results
according to the version of Chef Infra code applied. Metadata about the code
is stored in order to provide the user with convenient references back to
systems they already use (such as SCM and Ci/CD systems) to manage their code.

Nodes are segmented by a triple of policy name, policy group, and policy domain URL:
* policy name generally describes what kind of system it is, e.g., a database server
* policy group generally describes where the system fits in the user's code
  lifecycle, e.g., "QA" or "production"
* policy domain URL identifies the system that distributes the Chef Infra code
  and is the owner of the namespaces for policy name and group. E.g., a Chef
  Server URL with the `/organizations/:orgname` part.

There is one (or zero) revision(s) of the Chef Infra code applied to any
segment at a time. Rollouts track the changes to which revision of the code is
applied to the node segments over time.

*/
message Rollout {
  // The name of the policy, i.e., the `name` attribute in the Policyfile
  string policy_name = 1;
  // The group of nodes which are targeted by the rollout. In the Chef Server
  // case, this is the policy_group to which the user is pushing the policy.
  string policy_node_group = 2;
  // The revision_id of the compiled policy being rolled out
  string policy_revision_id = 3;
  // In the Chef Server case, the policy domain URL is the Chef Server URL
  // with the `/organizations/:orgname` portion of the URL path included. In
  // general, this can be a URL for any content storage/distribution service,
  // as long as the combination of policy_name and policy_node_group is unique
  // on that system.
  //
  // The set of nodes configured to fetch policy content from the
  // policy_domain_url and configured with the same policy_name and
  // policy_node_group form the target set of nodes for a rollout and are
  // expected to apply the policy revision described by the rollout.
  string policy_domain_url = 4;
  // The source control system used with the policyfile
  SCMType scm_type = 5;
  // The software/service used to host the source code repository
  SCMWebType scm_web_type = 6;
  // The URL used to obtain a copy of the source code repository
  string policy_scm_url = 7;
  // The URL used to view the source code repository via the web
  string policy_scm_web_url = 8;
  // The source control system's identifier for the repository version. This
  // should be the version where the policy's lockfile was committed.
  string policy_scm_commit = 9;
  // A free-form description of the rollout, as given by the user.
  string description = 10;
  // If the rollout was initiated via Ci/CD or similar system, the web URL
  // for the job that initiated the rollout.
  string ci_job_url = 11;
  // If the rollout was initiated by Ci/CD or similar system, the id of the job
  // that initiated the rollout. Should include the Ci system's nickname or
  // other identifying information users would need to associate the job ID to
  // the Ci/CD system.
  string ci_job_id = 12;

  string id = 13;
  string start_time = 14;
  string end_time = 15;
}

message Rollouts {
  repeated Rollout rollouts = 1;
}

