syntax = "proto3";

package chef.automate.api.cfgmgmt.response;
option go_package = "github.com/chef/automate/api/external/cfgmgmt/response";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

message Node {
  // The chef_guid associated with the node.
  string id                                          = 1;
  // The name of the node.
  string name                                        = 2;
  // The FQDN of the node.
  string fqdn                                        = 3;
  // The time on the latest received infra node report. 
  google.protobuf.Timestamp checkin                  = 4;
  // Count in seconds that the node has been active.
  int32  uptime_seconds                              = 5;
  // The organization the node is associated with.
  string organization                                = 6;
  // The environment the node is in.
  string environment                                 = 7;
  // The full platform information for the node (platform + version).
  string platform                                    = 8;
  // The platform family information for the node.
  string platform_family                             = 9;
  // The platform version information for the node.
  string platform_version                            = 10;
  // The status on the latest infra report for the node.
  string status                                      = 11;
  // The chef server associated with the node.
  string source_fqdn                                 = 12;
  // The latest infra run report id for the node.
  string latest_run_id                               = 13;
  // Boolean used to denote whether or not the run data for the node is in Automate.
  bool	 has_runs_data                               = 14;
  // Timestamp on most recently received infra run report for the node.
  google.protobuf.Timestamp last_ccr_received        = 15;
  // The policy name associated with the node.
  string policy_name                                 = 16;
  // The policy group associated with the node.
  string policy_group                                = 17;
  // The policy revision associated with the node.
  string policy_revision                             = 18;
  // Boolean used to denote whether or not the node has been identified to be running cookbooks with deprecations.
  bool   has_deprecations                            = 19;
  // Chef Infra version on the node.
  string chef_version                                = 20;
  // Chef tags associated with the node.
  repeated string chef_tags                          = 21;
  // Count of cookbook deprectations on the node.
  int32 deprecations_count                           = 22;
  // Timestamp when the node was created
  google.protobuf.Timestamp created_at               = 23;
  string ipaddress                                   = 24;
  string ip6address                                  = 25;
  // timezone of the node
  string timezone                                    = 26;
  string domain                                      = 27;
  string hostname                                    = 28;
  string memory_total                                = 29;
  string macaddress                                  = 30;
  string dmi_system_serial_number                    = 31;
  string dmi_system_manufacturer                     = 32;
  string virtualization_role                         = 33;
  string virtualization_system                       = 34;
  string kernel_version                              = 35;
  string kernel_release                              = 36;
  string cloud_provider                              = 37;
}

message NodeAttribute{
  // The chef_guid associated with the node.
  string          node_id              = 1;
  // Name of the node.
  string          name                 = 2;
  // Run list for the node.
  repeated string run_list             = 3;
  // The environment for the node.
  string          chef_environment     = 4;
  // Stringified json of the normal attributes for the node.
  string          normal               = 5;
  // Stringified json of the default attributes for the node.
  string          default              = 6;
  // Stringified json of the override attributes for the node.
  string          override             = 7;
  // Stringified json of the automatic attributes for the node.
  string          automatic            = 13;
  // Count of normal attributes on the node.
  int32           normal_value_count   = 8;
  // Count of default attributes on the node.
  int32           default_value_count  = 9;
  // Count of override attributes on the node.
  int32           override_value_count = 10;
  // Total count of attributes on the node.
  int32           all_value_count      = 11;
  // Count of automatic attributes on the node.
  int32           automatic_value_count = 12;
}

message Run {
  // Id of the infra node run.
  string                    id                       = 1;
  // The chef_guid associated with the node.
  string                    node_id                  = 2;
  // Name of the node.
  string                    node_name                = 3;
  // The organization the node is associated with.
  string                    organization             = 4;
  // Start time of the infra run.
  google.protobuf.Timestamp start_time               = 5;
  // End time of the infra run.
  google.protobuf.Timestamp end_time                 = 6;
  // Source of the node run (e.g. chef-solo).
  string                    source                   = 7;
  // Status of the infra node run.
  string                    status                   = 8;
  // Resource count reported on the infra node run.
  int32                     total_resource_count     = 9;
  // Count of resources updated in the infra node run.
  int32                     updated_resource_count   = 10;
  // Chef-client version on the node.
  string                    chef_version             = 11;
  // Count in seconds that the node has been active.
  int32                     uptime_seconds           = 12;
  // The environment for the node. 
  string                    environment              = 13;
  // FQDN of the node.
  string                    fqdn                     = 14;
  // Chef server associated with the node.
  string                    source_fqdn              = 15;
  // IP Address for the node.
  string                    ipaddress                = 16;
  // Intentionally blank.
  repeated Resource         resources                = 17;
  // Run list for the node.
  repeated string           run_list                 = 18;
  // Intentionally blank.
  repeated Deprecation      deprecations             = 19;
  // Chef Error information, available on failed runs.
  ChefError                 error                    = 20;
  // Unused field.
  repeated string           tags                     = 21;
  // List of resource names for the node.
  repeated string           resource_names           = 22;
  // List of recipes the node calls.
  repeated string           recipes                  = 23;
  // List of tags associated with the node.
  repeated string           chef_tags                = 24;
  // List of cookbooks associated with the node.
  repeated string           cookbooks                = 25;
  // Full platform string for the node (family + version).
  string                    platform                 = 26;
  // Platform family for the node.
  string                    platform_family          = 27;
  // Platform version for the node.
  string                    platform_version         = 28;
  // List of roles associated with the node.
  repeated string           roles                    = 29;
  // Policy name associated with the node.
  string                    policy_name              = 30;
  // Policy group associated with the node.
  string                    policy_group             = 31;
  // Policy revision associated with the node.
  string                    policy_revision          = 32;
  // Expanded run list for the node.
  ExpandedRunList           expanded_run_list        = 33;
  // List of projects the node belongs to.
  repeated string           projects                 = 34;
  // List of versioned cookbooks associated with the node.
  repeated VersionedCookbook versioned_cookbooks     = 35;
  // IP 6 Address for the node.
  string                    ip6address               = 36;
  // timezone of the node
  string                    timezone                 = 37;
  string                    domain                   = 38;
  string                    hostname                 = 39;
  string                    memory_total             = 40;
  string                    macaddress               = 41;
  string                    dmi_system_serial_number = 42;
  string                    dmi_system_manufacturer  = 43;
  string                    virtualization_role      = 44;
  string                    virtualization_system    = 45;
  string                    kernel_version           = 46;
  string                    kernel_release           = 47;
  string                    cloud_provider           = 48;
}

message ExpandedRunList {
  // Id of the run list collection.
  string id = 1;
  // Intentionally blank.
  repeated RunList run_list = 2;
}

message Resource {
  // Resource type.
  string type = 1;
  // Name for the resource.
  string name = 2;
  // Id of the resource.
  string id = 3;
  // Duration of the resource processing.
  string duration = 4;
  // Change diff for the resource (if it was changed during the run).
  string delta = 5;
  // Cookbook name associated with the resource.
  string cookbook_name = 6;
  // Version of the cookbook associated with the resource.
  string cookbook_version = 7;
  // Status of the resource (e.g. 'up-to-date').
  string status = 9;
  // Name of the recipe associated with the resource.
  string recipe_name = 10;
  // String result of the resource.
  string result = 11;
  // Conditional rule associated with the resource.
  string conditional = 16;
  // Boolean that denotes whether or not the resource failure should be ignored.
  bool ignore_failure = 17;
  // Chef Error information, available on failed runs.
  ChefError error = 18;
}

message ChefError {
  // Class for the error.
  string class = 1;
  // Error message for the failed run.
  string message = 2;
  // Stacktrace for the failure.
  repeated string backtrace = 16;
  // Description for the error.
  Description description = 17;
}

message RunList {
  // Type of run list item (e.g. 'recipe').
  string type = 1;
  // Name of run list item.
  string name = 2;
  // Version of run list item.
  string version = 3;
  // Boolean denoting whether or not the run list item was skipped.
  bool skipped = 4;
  // Intentionally blank.
  repeated RunList children = 5;
}

message Description {
  // Title for the error description.
  string title = 1;
  // More information about the error.
  repeated google.protobuf.Struct sections = 2;
}

message Deprecation {
  // Message for the deprecation.
  string message  = 1;
  // Url reference for the deprecation.
  string url      = 2;
  // Location of the deprecated code.
  string location = 3;
}

message VersionedCookbook {
  // Name of the cookbook.
	string name = 1;
  // Version of the cookbook.
	string version = 2;
}

message MissingNodeDurationCounts {
  // List of counted durations
  repeated CountedDuration counted_durations = 1;
}

message CountedDuration {
  // Duration of the count. Example '3d'
  string duration = 1;
  // The number of nodes for this duration
  int32 count = 2;
}

message NodeMetadataCounts {
  // Field Types for a node with value counts
  repeated TypeCount types = 1;
}

message TypeCount {
  // Values of the field type with a count for each
  repeated ValueCount values = 1;
  // The field type counted
	string type = 2;
}

message ValueCount {
  // The value counted
  string value = 1;
  // The number of this distinct value
	int32 count = 2;
}

message NodeRunsDailyStatusTimeSeries {
  // runs status of a 24-hour duration
  repeated RunDurationStatus durations = 1;
}

message RunDurationStatus {
  // Start of the duration (RFC3339)
  string start = 1;
  // End of the duration (RFC3339)
  string end = 2;
  // Prominent Run's status
  string status = 3;
  // Prominent Run's ID
  string run_id = 4;
}

