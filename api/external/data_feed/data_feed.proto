syntax="proto3";

package chef.automate.api.datafeed;
option go_package = "github.com/chef/automate/api/external/data_feed";

import "google/api/annotations.proto";

import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service DatafeedService {
/*
Add a datafeed destination

Adds a datafeed destination. 
Requires values for `name`, `url`, and `secret` parameters.
The secret is the ID returned from creating a secret using the secrets API.

Example:
```
{
  "name": "my datafeed destination",
  "url": "https://my.server.com/dataingest",
  "secret":"42b369f1-9d3f-44b3-bcf8-a9a09d6bd4bb"
}
```

Authorization Action:
```
datafeed:destination:add
```
*/
  rpc AddDestination(AddDestinationRequest) returns (AddDestinationResponse){
	  option (google.api.http) = {
		  post: "/api/v0/datafeed/destination"
		  body: "*"
	  };
	  option (chef.automate.api.iam.policy) = {
		  resource: "datafeed:destination"
		  action: "datafeed:destination:add"
	  };
	};
/*
Show a datafeed destination

Gets a datafeed destination based on the destination ID.

Authorization Action:
```
datafeed:destination:get
```
*/
  rpc GetDestination(GetDestinationRequest) returns (GetDestinationResponse) {
		option (google.api.http) = {
			get: "/api/v0/datafeed/destination/{id}"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "datafeed:destination:{id}"
			action: "datafeed:destination:get"
		};
	};
	/*
  Delete a datafeed destination

  Deletes a datafeed destination based on the given destination ID.

  Authorization Action:
  ```
  destination:destination:delete
  ```
  */
  rpc DeleteDestination(DeleteDestinationRequest) returns (DeleteDestinationResponse){
		option (google.api.http) = {
			delete: "/api/v0/datafeed/destination/{id}"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "destination:destination:{id}"
			action: "destination:destination:delete"
		};
	};
/*
  Update a datafeed destination

  Updates a datafeed destination's `name`, `url` or `secret`.
  This is a PATCH operation, meaning the sent details will override/replace those stored in the database.

	Authorization Action:
	```
  destination:destination:update
	```
  */
  rpc UpdateDestination(UpdateDestinationRequest) returns (UpdateDestinationResponse) {
 		option (google.api.http) = {
			patch: "/api/v0/datafeed/destination/{id}"
			body: "*"
  	};
		option (chef.automate.api.iam.policy) = {
			resource: "datafeed:destination:{id}"
			action: "datafeed:destination:update"
		};
	};
	/*
  List Destinations

  Returns a list of all datafeed destinations.

  Authorization Action:
  ```
  datafeed:destinations:list
  ```
  */
  rpc ListDestinations(ListDestinationRequest) returns (ListDestinationResponse){
		option (google.api.http) = {
			post: "/api/v0/datafeed/destinations"
			body: "*"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "datafeed:destinations"
			action: "datafeed:destinations:list"
		};
	};
/*
Test a datafeed destination

Tests a datafeed destination endpoint based on the provided details.
Requires values for `name`, `url`, and `secret` parameters.
The secret is the ID returned from creating a secret using the secrets API.
Accepts either `url` and `secret` combination or `url` and `username_password` combination.

Examples:
```
{
  "url": "https://my.server.com/dataingest",
  "secret":"42b369f1-9d3f-44b3-bcf8-a9a09d6bd4bb"
}

{
  "url": "https://my.server.com/dataingest",
  "username_password": {
    "username": "muyuser",
    "password": "mypassword"
  }
}
```

Authorization Action:
```
datafeed:destinations:test
```
*/
	rpc TestDestination(URLValidationRequest) returns (TestDestinationResponse) {
		option (google.api.http) = {
			post: "/api/v0/datafeed/destinations/test"
			body: "*"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "datafeed:destinations:test"
			action: "datafeed:destinations:test"
		};
	}
}

message AddDestinationRequest {	
  int64  id		 = 1;
  string name    = 2;
  string url     = 3;
  string secret  = 4;
}

message AddDestinationResponse {
  int64 id = 1;
  string name   = 2;
  string url    = 3;
  string secret = 4;
}

message GetDestinationRequest {
  int64 id = 1;
}

message GetDestinationResponse {
  int64 id = 1;
  string name   = 2;
  string url    = 3;
  string secret = 4;
}

message DeleteDestinationRequest {
  int64 id = 1;
}

message DeleteDestinationResponse {
  int64 id = 1;
  string name   = 2;
  string url    = 3;
  string secret = 4;
}

message UpdateDestinationRequest {	
  string  id    = 1;
  string name   = 2;
  string url    = 3;
  string secret = 4;
}

message UpdateDestinationResponse {
  int64 id = 1;
  string name   = 2;
  string url    = 3;
  string secret = 4;
}

message ListDestinationRequest {}

message ListDestinationResponse {
  repeated GetDestinationResponse destinations = 1;
}

message UsernamePassword {
  string username = 1;
  string password = 2;
}

message SecretId {
  string id = 1;
}

message URLValidationRequest {
  string url = 1;
  oneof credentials {
    UsernamePassword username_password = 2;
    SecretId secret_id = 3;
  }
}

message TestDestinationResponse {
  bool success = 1;
}
