syntax = "proto3";

package chef.automate.api.datafeed;
option go_package = "github.com/chef/automate/api/external/data_feed";

import "google/api/annotations.proto";

import "external/annotations/iam/annotations.proto";

import "google/protobuf/struct.proto";
import "external/common/query/parameters.proto";

service DatafeedService {
  rpc AddDestination(AddDestinationRequest) returns (AddDestinationResponse) {
    option (google.api.http) = {
      post: "/api/v0/datafeed/destination"
      body: "*"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "datafeed:destination"
      action: "datafeed:destination:add"
    };
  };
  rpc GetDestination(GetDestinationRequest) returns(GetDestinationResponse) {
    option (google.api.http) = {
      get: "/api/v0/datafeed/destination/{id}"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "datafeed:destination:{id}"
      action: "datafeed:destination:get"
    };
  };
  rpc DeleteDestination(DeleteDestinationRequest) returns(DeleteDestinationResponse) {
    option (google.api.http) = {
      delete: "/api/v0/datafeed/destination/{id}"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "destination:destination:{id}"
      action: "destination:destination:delete"
    };
  };
  rpc UpdateDestination(UpdateDestinationRequest) returns(UpdateDestinationResponse) {
    option (google.api.http) = {
      patch: "/api/v0/datafeed/destination/{id}"
      body: "*"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "datafeed:destination:{id}"
      action: "datafeed:destination:update"
    };
  };
  rpc ListDestinations(ListDestinationRequest) returns(ListDestinationResponse) {
    option (google.api.http) = {
      post: "/api/v0/datafeed/destinations"
      body: "*"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "datafeed:destinations"
      action: "datafeed:destinations:list"
    };
  };
  rpc TestDestination(URLValidationRequest) returns(TestDestinationResponse) {
    option (google.api.http) = {
      post: "/api/v0/datafeed/destinations/test"
      body: "*"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "datafeed:destinations:test"
      action: "datafeed:destinations:test"
    };
  }
  rpc EnableDestination(UpdateDestinationEnableRequest) returns(GetDestinationResponse) {
    option (google.api.http) = {
      patch: "/api/v0/datafeed/destination/enable/{id}"
      body: "*"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "datafeed:destinations:{id}"
      action: "datafeed:destinations:update"
    };
  }
  rpc GlobalDataFeedConfig(GlobalDataFeedConfigRequest) returns(GlobalDataFeedConfigResponse) {
    option (google.api.http) = {
      get: "/api/v0/datafeed/config"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "datafeed:destination"
      action: "datafeed:destination:get"
    };
  }
}

message GlobalDataFeedConfigRequest {}
message GlobalDataFeedConfigResponse {
  string feed_interval = 1;
  int64 node_batch_size = 2;
  bool updated_nodes_only = 3;
  bool disable_cidr_filter = 4;
  repeated string cidr_filter = 5;
  repeated int32 accepted_status_codes = 6;
}

message AddDestinationRequest {
  int64 id = 1;
  string name = 2;
  string url = 3;
  string secret = 4;
  string services = 5;
  string integration_types = 6;
  bool enable = 7;
  repeated chef.automate.api.common.query.Kv meta_data = 8;
}

message AddDestinationResponse {
  int64 id = 1;
  string name = 2;
  string url = 3;
  string secret = 4;
  string services = 5;
  string integration_types = 6;
  bool enable = 7;
  repeated chef.automate.api.common.query.Kv meta_data = 8;
}

message GetDestinationRequest {
  int64 id = 1;
}

message GetDestinationResponse {
  int64 id = 1;
  string name = 2;
  string url = 3;
  string secret = 4;
  string services = 5;
  string integration_types = 6;
  bool enable = 7;
  repeated chef.automate.api.common.query.Kv meta_data = 8;
}

message DeleteDestinationRequest {
  int64 id = 1;
}

message DeleteDestinationResponse {
  int64 id = 1;
  string name = 2;
  string url = 3;
  string secret = 4;
  string services = 5;
  string integration_types = 6;
  bool enable = 7;
  repeated chef.automate.api.common.query.Kv meta_data = 8;
}

message UpdateDestinationRequest {
  string id = 1;
  string name = 2;
  string url = 3;
  string secret = 4;
  string services = 5;
  string integration_types = 6;
  bool enable = 7;
  repeated chef.automate.api.common.query.Kv meta_data = 8;
}
message AWSMetaData {
  string bucket = 1;
  string region = 2;
}
message UpdateDestinationResponse {
  int64 id = 1;
  string name = 2;
  string url = 3;
  string secret = 4;
  string services = 5;
  string integration_types = 6;
  bool enable = 7;
  repeated chef.automate.api.common.query.Kv meta_data = 8;
}

message UpdateDestinationEnableRequest {
  string id = 1;
  bool enable = 2;
}

message ListDestinationRequest {}

message ListDestinationResponse {
  repeated GetDestinationResponse destinations = 1;
}

message UsernamePassword {
  string username = 1;
  string password = 2;
}

message SecretId {
  string id = 1;
}
message SecretIdWithExtraPrams {
  string id = 1;
  string services = 2;
  string integration_types = 3;
  bool enable = 4;
  repeated chef.automate.api.common.query.Kv meta_data = 5;
}


message Header {
  string value = 1;
}

message AWS {
  string access_key = 1;
  string secret_access_key = 2;
  string bucket = 3;
  string region = 4;
}

message URLValidationRequest {
  string url = 1;
  oneof credentials {
    UsernamePassword username_password = 2;
    SecretId secret_id = 3;
    SecretIdWithExtraPrams secret_id_with_addon = 4;
    Header header = 5;
    AWS aws = 6;
  }
}

message TestDestinationResponse {
  bool success = 1;
}

