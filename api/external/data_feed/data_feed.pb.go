// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: external/data_feed/data_feed.proto

package data_feed

import (
	context "context"
	_ "github.com/chef/automate/api/external/annotations/iam"
	query "github.com/chef/automate/api/external/common/query"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GlobalDataFeedConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GlobalDataFeedConfigRequest) Reset() {
	*x = GlobalDataFeedConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalDataFeedConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalDataFeedConfigRequest) ProtoMessage() {}

func (x *GlobalDataFeedConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalDataFeedConfigRequest.ProtoReflect.Descriptor instead.
func (*GlobalDataFeedConfigRequest) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{0}
}

type GlobalDataFeedConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedInterval        string   `protobuf:"bytes,1,opt,name=feed_interval,json=feedInterval,proto3" json:"feed_interval,omitempty"`
	NodeBatchSize       int64    `protobuf:"varint,2,opt,name=node_batch_size,json=nodeBatchSize,proto3" json:"node_batch_size,omitempty"`
	UpdatedNodesOnly    bool     `protobuf:"varint,3,opt,name=updated_nodes_only,json=updatedNodesOnly,proto3" json:"updated_nodes_only,omitempty"`
	DisableCidrFilter   bool     `protobuf:"varint,4,opt,name=disable_cidr_filter,json=disableCidrFilter,proto3" json:"disable_cidr_filter,omitempty"`
	CidrFilter          []string `protobuf:"bytes,5,rep,name=cidr_filter,json=cidrFilter,proto3" json:"cidr_filter,omitempty"`
	AcceptedStatusCodes []int32  `protobuf:"varint,6,rep,packed,name=accepted_status_codes,json=acceptedStatusCodes,proto3" json:"accepted_status_codes,omitempty"`
}

func (x *GlobalDataFeedConfigResponse) Reset() {
	*x = GlobalDataFeedConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalDataFeedConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalDataFeedConfigResponse) ProtoMessage() {}

func (x *GlobalDataFeedConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalDataFeedConfigResponse.ProtoReflect.Descriptor instead.
func (*GlobalDataFeedConfigResponse) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{1}
}

func (x *GlobalDataFeedConfigResponse) GetFeedInterval() string {
	if x != nil {
		return x.FeedInterval
	}
	return ""
}

func (x *GlobalDataFeedConfigResponse) GetNodeBatchSize() int64 {
	if x != nil {
		return x.NodeBatchSize
	}
	return 0
}

func (x *GlobalDataFeedConfigResponse) GetUpdatedNodesOnly() bool {
	if x != nil {
		return x.UpdatedNodesOnly
	}
	return false
}

func (x *GlobalDataFeedConfigResponse) GetDisableCidrFilter() bool {
	if x != nil {
		return x.DisableCidrFilter
	}
	return false
}

func (x *GlobalDataFeedConfigResponse) GetCidrFilter() []string {
	if x != nil {
		return x.CidrFilter
	}
	return nil
}

func (x *GlobalDataFeedConfigResponse) GetAcceptedStatusCodes() []int32 {
	if x != nil {
		return x.AcceptedStatusCodes
	}
	return nil
}

type AddDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url              string      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Secret           string      `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	Services         string      `protobuf:"bytes,5,opt,name=services,proto3" json:"services,omitempty"`
	IntegrationTypes string      `protobuf:"bytes,6,opt,name=integration_types,json=integrationTypes,proto3" json:"integration_types,omitempty"`
	Enable           bool        `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	MetaData         []*query.Kv `protobuf:"bytes,8,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *AddDestinationRequest) Reset() {
	*x = AddDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDestinationRequest) ProtoMessage() {}

func (x *AddDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDestinationRequest.ProtoReflect.Descriptor instead.
func (*AddDestinationRequest) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{2}
}

func (x *AddDestinationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddDestinationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddDestinationRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddDestinationRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *AddDestinationRequest) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *AddDestinationRequest) GetIntegrationTypes() string {
	if x != nil {
		return x.IntegrationTypes
	}
	return ""
}

func (x *AddDestinationRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *AddDestinationRequest) GetMetaData() []*query.Kv {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type AddDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url              string      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Secret           string      `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	Services         string      `protobuf:"bytes,5,opt,name=services,proto3" json:"services,omitempty"`
	IntegrationTypes string      `protobuf:"bytes,6,opt,name=integration_types,json=integrationTypes,proto3" json:"integration_types,omitempty"`
	Enable           bool        `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	MetaData         []*query.Kv `protobuf:"bytes,8,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *AddDestinationResponse) Reset() {
	*x = AddDestinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDestinationResponse) ProtoMessage() {}

func (x *AddDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDestinationResponse.ProtoReflect.Descriptor instead.
func (*AddDestinationResponse) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{3}
}

func (x *AddDestinationResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddDestinationResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddDestinationResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddDestinationResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *AddDestinationResponse) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *AddDestinationResponse) GetIntegrationTypes() string {
	if x != nil {
		return x.IntegrationTypes
	}
	return ""
}

func (x *AddDestinationResponse) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *AddDestinationResponse) GetMetaData() []*query.Kv {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type GetDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDestinationRequest) Reset() {
	*x = GetDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDestinationRequest) ProtoMessage() {}

func (x *GetDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDestinationRequest.ProtoReflect.Descriptor instead.
func (*GetDestinationRequest) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{4}
}

func (x *GetDestinationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url              string      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Secret           string      `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	Services         string      `protobuf:"bytes,5,opt,name=services,proto3" json:"services,omitempty"`
	IntegrationTypes string      `protobuf:"bytes,6,opt,name=integration_types,json=integrationTypes,proto3" json:"integration_types,omitempty"`
	Enable           bool        `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	MetaData         []*query.Kv `protobuf:"bytes,8,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *GetDestinationResponse) Reset() {
	*x = GetDestinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDestinationResponse) ProtoMessage() {}

func (x *GetDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDestinationResponse.ProtoReflect.Descriptor instead.
func (*GetDestinationResponse) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{5}
}

func (x *GetDestinationResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDestinationResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDestinationResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetDestinationResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *GetDestinationResponse) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *GetDestinationResponse) GetIntegrationTypes() string {
	if x != nil {
		return x.IntegrationTypes
	}
	return ""
}

func (x *GetDestinationResponse) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *GetDestinationResponse) GetMetaData() []*query.Kv {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type DeleteDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDestinationRequest) Reset() {
	*x = DeleteDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDestinationRequest) ProtoMessage() {}

func (x *DeleteDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDestinationRequest.ProtoReflect.Descriptor instead.
func (*DeleteDestinationRequest) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDestinationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url              string      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Secret           string      `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	Services         string      `protobuf:"bytes,5,opt,name=services,proto3" json:"services,omitempty"`
	IntegrationTypes string      `protobuf:"bytes,6,opt,name=integration_types,json=integrationTypes,proto3" json:"integration_types,omitempty"`
	Enable           bool        `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	MetaData         []*query.Kv `protobuf:"bytes,8,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *DeleteDestinationResponse) Reset() {
	*x = DeleteDestinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDestinationResponse) ProtoMessage() {}

func (x *DeleteDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDestinationResponse.ProtoReflect.Descriptor instead.
func (*DeleteDestinationResponse) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDestinationResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteDestinationResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteDestinationResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DeleteDestinationResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *DeleteDestinationResponse) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *DeleteDestinationResponse) GetIntegrationTypes() string {
	if x != nil {
		return x.IntegrationTypes
	}
	return ""
}

func (x *DeleteDestinationResponse) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *DeleteDestinationResponse) GetMetaData() []*query.Kv {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type UpdateDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url              string      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Secret           string      `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	Services         string      `protobuf:"bytes,5,opt,name=services,proto3" json:"services,omitempty"`
	IntegrationTypes string      `protobuf:"bytes,6,opt,name=integration_types,json=integrationTypes,proto3" json:"integration_types,omitempty"`
	Enable           bool        `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	MetaData         []*query.Kv `protobuf:"bytes,8,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *UpdateDestinationRequest) Reset() {
	*x = UpdateDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDestinationRequest) ProtoMessage() {}

func (x *UpdateDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDestinationRequest.ProtoReflect.Descriptor instead.
func (*UpdateDestinationRequest) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateDestinationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDestinationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDestinationRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateDestinationRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *UpdateDestinationRequest) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *UpdateDestinationRequest) GetIntegrationTypes() string {
	if x != nil {
		return x.IntegrationTypes
	}
	return ""
}

func (x *UpdateDestinationRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *UpdateDestinationRequest) GetMetaData() []*query.Kv {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type AWSMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *AWSMetaData) Reset() {
	*x = AWSMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSMetaData) ProtoMessage() {}

func (x *AWSMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSMetaData.ProtoReflect.Descriptor instead.
func (*AWSMetaData) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{9}
}

func (x *AWSMetaData) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *AWSMetaData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type UpdateDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url              string      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Secret           string      `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	Services         string      `protobuf:"bytes,5,opt,name=services,proto3" json:"services,omitempty"`
	IntegrationTypes string      `protobuf:"bytes,6,opt,name=integration_types,json=integrationTypes,proto3" json:"integration_types,omitempty"`
	Enable           bool        `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	MetaData         []*query.Kv `protobuf:"bytes,8,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *UpdateDestinationResponse) Reset() {
	*x = UpdateDestinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDestinationResponse) ProtoMessage() {}

func (x *UpdateDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDestinationResponse.ProtoReflect.Descriptor instead.
func (*UpdateDestinationResponse) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDestinationResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateDestinationResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDestinationResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateDestinationResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *UpdateDestinationResponse) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *UpdateDestinationResponse) GetIntegrationTypes() string {
	if x != nil {
		return x.IntegrationTypes
	}
	return ""
}

func (x *UpdateDestinationResponse) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *UpdateDestinationResponse) GetMetaData() []*query.Kv {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type UpdateDestinationEnableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Enable bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *UpdateDestinationEnableRequest) Reset() {
	*x = UpdateDestinationEnableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDestinationEnableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDestinationEnableRequest) ProtoMessage() {}

func (x *UpdateDestinationEnableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDestinationEnableRequest.ProtoReflect.Descriptor instead.
func (*UpdateDestinationEnableRequest) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateDestinationEnableRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDestinationEnableRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type ListDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDestinationRequest) Reset() {
	*x = ListDestinationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDestinationRequest) ProtoMessage() {}

func (x *ListDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDestinationRequest.ProtoReflect.Descriptor instead.
func (*ListDestinationRequest) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{12}
}

type ListDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destinations []*GetDestinationResponse `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *ListDestinationResponse) Reset() {
	*x = ListDestinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDestinationResponse) ProtoMessage() {}

func (x *ListDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDestinationResponse.ProtoReflect.Descriptor instead.
func (*ListDestinationResponse) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{13}
}

func (x *ListDestinationResponse) GetDestinations() []*GetDestinationResponse {
	if x != nil {
		return x.Destinations
	}
	return nil
}

type UsernamePassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UsernamePassword) Reset() {
	*x = UsernamePassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernamePassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernamePassword) ProtoMessage() {}

func (x *UsernamePassword) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernamePassword.ProtoReflect.Descriptor instead.
func (*UsernamePassword) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{14}
}

func (x *UsernamePassword) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UsernamePassword) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SecretId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SecretId) Reset() {
	*x = SecretId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretId) ProtoMessage() {}

func (x *SecretId) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretId.ProtoReflect.Descriptor instead.
func (*SecretId) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{15}
}

func (x *SecretId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SecretIdWithExtraPrams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Services         string      `protobuf:"bytes,2,opt,name=services,proto3" json:"services,omitempty"`
	IntegrationTypes string      `protobuf:"bytes,3,opt,name=integration_types,json=integrationTypes,proto3" json:"integration_types,omitempty"`
	Enable           bool        `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	MetaData         []*query.Kv `protobuf:"bytes,5,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *SecretIdWithExtraPrams) Reset() {
	*x = SecretIdWithExtraPrams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretIdWithExtraPrams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretIdWithExtraPrams) ProtoMessage() {}

func (x *SecretIdWithExtraPrams) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretIdWithExtraPrams.ProtoReflect.Descriptor instead.
func (*SecretIdWithExtraPrams) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{16}
}

func (x *SecretIdWithExtraPrams) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SecretIdWithExtraPrams) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *SecretIdWithExtraPrams) GetIntegrationTypes() string {
	if x != nil {
		return x.IntegrationTypes
	}
	return ""
}

func (x *SecretIdWithExtraPrams) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *SecretIdWithExtraPrams) GetMetaData() []*query.Kv {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{17}
}

func (x *Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AWS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey       string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	Bucket          string `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region          string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *AWS) Reset() {
	*x = AWS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWS) ProtoMessage() {}

func (x *AWS) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWS.ProtoReflect.Descriptor instead.
func (*AWS) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{18}
}

func (x *AWS) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *AWS) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *AWS) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *AWS) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type URLValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Types that are assignable to Credentials:
	//	*URLValidationRequest_UsernamePassword
	//	*URLValidationRequest_SecretId
	//	*URLValidationRequest_SecretIdWithAddon
	//	*URLValidationRequest_Header
	//	*URLValidationRequest_Aws
	Credentials isURLValidationRequest_Credentials `protobuf_oneof:"credentials"`
}

func (x *URLValidationRequest) Reset() {
	*x = URLValidationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLValidationRequest) ProtoMessage() {}

func (x *URLValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLValidationRequest.ProtoReflect.Descriptor instead.
func (*URLValidationRequest) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{19}
}

func (x *URLValidationRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (m *URLValidationRequest) GetCredentials() isURLValidationRequest_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *URLValidationRequest) GetUsernamePassword() *UsernamePassword {
	if x, ok := x.GetCredentials().(*URLValidationRequest_UsernamePassword); ok {
		return x.UsernamePassword
	}
	return nil
}

func (x *URLValidationRequest) GetSecretId() *SecretId {
	if x, ok := x.GetCredentials().(*URLValidationRequest_SecretId); ok {
		return x.SecretId
	}
	return nil
}

func (x *URLValidationRequest) GetSecretIdWithAddon() *SecretIdWithExtraPrams {
	if x, ok := x.GetCredentials().(*URLValidationRequest_SecretIdWithAddon); ok {
		return x.SecretIdWithAddon
	}
	return nil
}

func (x *URLValidationRequest) GetHeader() *Header {
	if x, ok := x.GetCredentials().(*URLValidationRequest_Header); ok {
		return x.Header
	}
	return nil
}

func (x *URLValidationRequest) GetAws() *AWS {
	if x, ok := x.GetCredentials().(*URLValidationRequest_Aws); ok {
		return x.Aws
	}
	return nil
}

type isURLValidationRequest_Credentials interface {
	isURLValidationRequest_Credentials()
}

type URLValidationRequest_UsernamePassword struct {
	UsernamePassword *UsernamePassword `protobuf:"bytes,2,opt,name=username_password,json=usernamePassword,proto3,oneof"`
}

type URLValidationRequest_SecretId struct {
	SecretId *SecretId `protobuf:"bytes,3,opt,name=secret_id,json=secretId,proto3,oneof"`
}

type URLValidationRequest_SecretIdWithAddon struct {
	SecretIdWithAddon *SecretIdWithExtraPrams `protobuf:"bytes,4,opt,name=secret_id_with_addon,json=secretIdWithAddon,proto3,oneof"`
}

type URLValidationRequest_Header struct {
	Header *Header `protobuf:"bytes,5,opt,name=header,proto3,oneof"`
}

type URLValidationRequest_Aws struct {
	Aws *AWS `protobuf:"bytes,6,opt,name=aws,proto3,oneof"`
}

func (*URLValidationRequest_UsernamePassword) isURLValidationRequest_Credentials() {}

func (*URLValidationRequest_SecretId) isURLValidationRequest_Credentials() {}

func (*URLValidationRequest_SecretIdWithAddon) isURLValidationRequest_Credentials() {}

func (*URLValidationRequest_Header) isURLValidationRequest_Credentials() {}

func (*URLValidationRequest_Aws) isURLValidationRequest_Credentials() {}

type TestDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *TestDestinationResponse) Reset() {
	*x = TestDestinationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_data_feed_data_feed_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDestinationResponse) ProtoMessage() {}

func (x *TestDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_data_feed_data_feed_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDestinationResponse.ProtoReflect.Descriptor instead.
func (*TestDestinationResponse) Descriptor() ([]byte, []int) {
	return file_external_data_feed_data_feed_proto_rawDescGZIP(), []int{20}
}

func (x *TestDestinationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_external_data_feed_data_feed_proto protoreflect.FileDescriptor

var file_external_data_feed_data_feed_proto_rawDesc = []byte{
	0x0a, 0x22, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x9e, 0x02, 0x0a, 0x1c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x69, 0x64, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x69, 0x64, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x69, 0x64, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x87, 0x02, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4b, 0x76,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x41,
	0x64, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4b, 0x76, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88,
	0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4b, 0x76, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4b, 0x76, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x8a, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3f, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4b, 0x76, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x3d, 0x0a, 0x0b, 0x41, 0x57, 0x53, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22,
	0x8b, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4b, 0x76, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x71, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xca, 0x01, 0x0a,
	0x16, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x50, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4b, 0x76, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x03, 0x41, 0x57,
	0x53, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x03, 0x0a,
	0x14, 0x55, 0x52, 0x4c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x5b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x48, 0x00, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x14, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x11, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x41, 0x57, 0x53, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x77, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0x33, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xc2, 0x0e, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61,
	0x66, 0x65, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd4, 0x01, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x41,
	0x64, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x8a, 0xb5,
	0x18, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65,
	0x65, 0x64, 0x3a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x61,
	0x64, 0x64, 0x12, 0xdb, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18, 0x35, 0x0a, 0x19, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x18, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64,
	0x3a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x67, 0x65, 0x74,
	0x12, 0xed, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xb5,
	0x18, 0x3e, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x1e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0xea, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x32, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01,
	0x2a, 0x8a, 0xb5, 0x18, 0x38, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x3a,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xdc, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x65, 0x65, 0x64, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x33, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x65, 0x65, 0x64, 0x3a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xe3, 0x01, 0x0a,
	0x0f, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x55, 0x52,
	0x4c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x38, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x65, 0x65, 0x64, 0x3a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64,
	0x3a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x74, 0x65,
	0x73, 0x74, 0x12, 0xf6, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x32, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65,
	0x65, 0x64, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18,
	0x3a, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x1c, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x14,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x8a, 0xb5, 0x18, 0x30, 0x0a, 0x14, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x3a, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x67, 0x65, 0x74, 0x42, 0x31, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_data_feed_data_feed_proto_rawDescOnce sync.Once
	file_external_data_feed_data_feed_proto_rawDescData = file_external_data_feed_data_feed_proto_rawDesc
)

func file_external_data_feed_data_feed_proto_rawDescGZIP() []byte {
	file_external_data_feed_data_feed_proto_rawDescOnce.Do(func() {
		file_external_data_feed_data_feed_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_data_feed_data_feed_proto_rawDescData)
	})
	return file_external_data_feed_data_feed_proto_rawDescData
}

var file_external_data_feed_data_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_external_data_feed_data_feed_proto_goTypes = []interface{}{
	(*GlobalDataFeedConfigRequest)(nil),    // 0: chef.automate.api.datafeed.GlobalDataFeedConfigRequest
	(*GlobalDataFeedConfigResponse)(nil),   // 1: chef.automate.api.datafeed.GlobalDataFeedConfigResponse
	(*AddDestinationRequest)(nil),          // 2: chef.automate.api.datafeed.AddDestinationRequest
	(*AddDestinationResponse)(nil),         // 3: chef.automate.api.datafeed.AddDestinationResponse
	(*GetDestinationRequest)(nil),          // 4: chef.automate.api.datafeed.GetDestinationRequest
	(*GetDestinationResponse)(nil),         // 5: chef.automate.api.datafeed.GetDestinationResponse
	(*DeleteDestinationRequest)(nil),       // 6: chef.automate.api.datafeed.DeleteDestinationRequest
	(*DeleteDestinationResponse)(nil),      // 7: chef.automate.api.datafeed.DeleteDestinationResponse
	(*UpdateDestinationRequest)(nil),       // 8: chef.automate.api.datafeed.UpdateDestinationRequest
	(*AWSMetaData)(nil),                    // 9: chef.automate.api.datafeed.AWSMetaData
	(*UpdateDestinationResponse)(nil),      // 10: chef.automate.api.datafeed.UpdateDestinationResponse
	(*UpdateDestinationEnableRequest)(nil), // 11: chef.automate.api.datafeed.UpdateDestinationEnableRequest
	(*ListDestinationRequest)(nil),         // 12: chef.automate.api.datafeed.ListDestinationRequest
	(*ListDestinationResponse)(nil),        // 13: chef.automate.api.datafeed.ListDestinationResponse
	(*UsernamePassword)(nil),               // 14: chef.automate.api.datafeed.UsernamePassword
	(*SecretId)(nil),                       // 15: chef.automate.api.datafeed.SecretId
	(*SecretIdWithExtraPrams)(nil),         // 16: chef.automate.api.datafeed.SecretIdWithExtraPrams
	(*Header)(nil),                         // 17: chef.automate.api.datafeed.Header
	(*AWS)(nil),                            // 18: chef.automate.api.datafeed.AWS
	(*URLValidationRequest)(nil),           // 19: chef.automate.api.datafeed.URLValidationRequest
	(*TestDestinationResponse)(nil),        // 20: chef.automate.api.datafeed.TestDestinationResponse
	(*query.Kv)(nil),                       // 21: chef.automate.api.common.query.Kv
}
var file_external_data_feed_data_feed_proto_depIdxs = []int32{
	21, // 0: chef.automate.api.datafeed.AddDestinationRequest.meta_data:type_name -> chef.automate.api.common.query.Kv
	21, // 1: chef.automate.api.datafeed.AddDestinationResponse.meta_data:type_name -> chef.automate.api.common.query.Kv
	21, // 2: chef.automate.api.datafeed.GetDestinationResponse.meta_data:type_name -> chef.automate.api.common.query.Kv
	21, // 3: chef.automate.api.datafeed.DeleteDestinationResponse.meta_data:type_name -> chef.automate.api.common.query.Kv
	21, // 4: chef.automate.api.datafeed.UpdateDestinationRequest.meta_data:type_name -> chef.automate.api.common.query.Kv
	21, // 5: chef.automate.api.datafeed.UpdateDestinationResponse.meta_data:type_name -> chef.automate.api.common.query.Kv
	5,  // 6: chef.automate.api.datafeed.ListDestinationResponse.destinations:type_name -> chef.automate.api.datafeed.GetDestinationResponse
	21, // 7: chef.automate.api.datafeed.SecretIdWithExtraPrams.meta_data:type_name -> chef.automate.api.common.query.Kv
	14, // 8: chef.automate.api.datafeed.URLValidationRequest.username_password:type_name -> chef.automate.api.datafeed.UsernamePassword
	15, // 9: chef.automate.api.datafeed.URLValidationRequest.secret_id:type_name -> chef.automate.api.datafeed.SecretId
	16, // 10: chef.automate.api.datafeed.URLValidationRequest.secret_id_with_addon:type_name -> chef.automate.api.datafeed.SecretIdWithExtraPrams
	17, // 11: chef.automate.api.datafeed.URLValidationRequest.header:type_name -> chef.automate.api.datafeed.Header
	18, // 12: chef.automate.api.datafeed.URLValidationRequest.aws:type_name -> chef.automate.api.datafeed.AWS
	2,  // 13: chef.automate.api.datafeed.DatafeedService.AddDestination:input_type -> chef.automate.api.datafeed.AddDestinationRequest
	4,  // 14: chef.automate.api.datafeed.DatafeedService.GetDestination:input_type -> chef.automate.api.datafeed.GetDestinationRequest
	6,  // 15: chef.automate.api.datafeed.DatafeedService.DeleteDestination:input_type -> chef.automate.api.datafeed.DeleteDestinationRequest
	8,  // 16: chef.automate.api.datafeed.DatafeedService.UpdateDestination:input_type -> chef.automate.api.datafeed.UpdateDestinationRequest
	12, // 17: chef.automate.api.datafeed.DatafeedService.ListDestinations:input_type -> chef.automate.api.datafeed.ListDestinationRequest
	19, // 18: chef.automate.api.datafeed.DatafeedService.TestDestination:input_type -> chef.automate.api.datafeed.URLValidationRequest
	11, // 19: chef.automate.api.datafeed.DatafeedService.EnableDestination:input_type -> chef.automate.api.datafeed.UpdateDestinationEnableRequest
	0,  // 20: chef.automate.api.datafeed.DatafeedService.GlobalDataFeedConfig:input_type -> chef.automate.api.datafeed.GlobalDataFeedConfigRequest
	3,  // 21: chef.automate.api.datafeed.DatafeedService.AddDestination:output_type -> chef.automate.api.datafeed.AddDestinationResponse
	5,  // 22: chef.automate.api.datafeed.DatafeedService.GetDestination:output_type -> chef.automate.api.datafeed.GetDestinationResponse
	7,  // 23: chef.automate.api.datafeed.DatafeedService.DeleteDestination:output_type -> chef.automate.api.datafeed.DeleteDestinationResponse
	10, // 24: chef.automate.api.datafeed.DatafeedService.UpdateDestination:output_type -> chef.automate.api.datafeed.UpdateDestinationResponse
	13, // 25: chef.automate.api.datafeed.DatafeedService.ListDestinations:output_type -> chef.automate.api.datafeed.ListDestinationResponse
	20, // 26: chef.automate.api.datafeed.DatafeedService.TestDestination:output_type -> chef.automate.api.datafeed.TestDestinationResponse
	5,  // 27: chef.automate.api.datafeed.DatafeedService.EnableDestination:output_type -> chef.automate.api.datafeed.GetDestinationResponse
	1,  // 28: chef.automate.api.datafeed.DatafeedService.GlobalDataFeedConfig:output_type -> chef.automate.api.datafeed.GlobalDataFeedConfigResponse
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_external_data_feed_data_feed_proto_init() }
func file_external_data_feed_data_feed_proto_init() {
	if File_external_data_feed_data_feed_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_external_data_feed_data_feed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalDataFeedConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalDataFeedConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDestinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDestinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDestinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDestinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDestinationEnableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDestinationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDestinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernamePassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretIdWithExtraPrams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLValidationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_data_feed_data_feed_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestDestinationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_external_data_feed_data_feed_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*URLValidationRequest_UsernamePassword)(nil),
		(*URLValidationRequest_SecretId)(nil),
		(*URLValidationRequest_SecretIdWithAddon)(nil),
		(*URLValidationRequest_Header)(nil),
		(*URLValidationRequest_Aws)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_data_feed_data_feed_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_data_feed_data_feed_proto_goTypes,
		DependencyIndexes: file_external_data_feed_data_feed_proto_depIdxs,
		MessageInfos:      file_external_data_feed_data_feed_proto_msgTypes,
	}.Build()
	File_external_data_feed_data_feed_proto = out.File
	file_external_data_feed_data_feed_proto_rawDesc = nil
	file_external_data_feed_data_feed_proto_goTypes = nil
	file_external_data_feed_data_feed_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatafeedServiceClient is the client API for DatafeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatafeedServiceClient interface {
	AddDestination(ctx context.Context, in *AddDestinationRequest, opts ...grpc.CallOption) (*AddDestinationResponse, error)
	GetDestination(ctx context.Context, in *GetDestinationRequest, opts ...grpc.CallOption) (*GetDestinationResponse, error)
	DeleteDestination(ctx context.Context, in *DeleteDestinationRequest, opts ...grpc.CallOption) (*DeleteDestinationResponse, error)
	UpdateDestination(ctx context.Context, in *UpdateDestinationRequest, opts ...grpc.CallOption) (*UpdateDestinationResponse, error)
	ListDestinations(ctx context.Context, in *ListDestinationRequest, opts ...grpc.CallOption) (*ListDestinationResponse, error)
	TestDestination(ctx context.Context, in *URLValidationRequest, opts ...grpc.CallOption) (*TestDestinationResponse, error)
	EnableDestination(ctx context.Context, in *UpdateDestinationEnableRequest, opts ...grpc.CallOption) (*GetDestinationResponse, error)
	GlobalDataFeedConfig(ctx context.Context, in *GlobalDataFeedConfigRequest, opts ...grpc.CallOption) (*GlobalDataFeedConfigResponse, error)
}

type datafeedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatafeedServiceClient(cc grpc.ClientConnInterface) DatafeedServiceClient {
	return &datafeedServiceClient{cc}
}

func (c *datafeedServiceClient) AddDestination(ctx context.Context, in *AddDestinationRequest, opts ...grpc.CallOption) (*AddDestinationResponse, error) {
	out := new(AddDestinationResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.datafeed.DatafeedService/AddDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datafeedServiceClient) GetDestination(ctx context.Context, in *GetDestinationRequest, opts ...grpc.CallOption) (*GetDestinationResponse, error) {
	out := new(GetDestinationResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.datafeed.DatafeedService/GetDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datafeedServiceClient) DeleteDestination(ctx context.Context, in *DeleteDestinationRequest, opts ...grpc.CallOption) (*DeleteDestinationResponse, error) {
	out := new(DeleteDestinationResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.datafeed.DatafeedService/DeleteDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datafeedServiceClient) UpdateDestination(ctx context.Context, in *UpdateDestinationRequest, opts ...grpc.CallOption) (*UpdateDestinationResponse, error) {
	out := new(UpdateDestinationResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.datafeed.DatafeedService/UpdateDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datafeedServiceClient) ListDestinations(ctx context.Context, in *ListDestinationRequest, opts ...grpc.CallOption) (*ListDestinationResponse, error) {
	out := new(ListDestinationResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.datafeed.DatafeedService/ListDestinations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datafeedServiceClient) TestDestination(ctx context.Context, in *URLValidationRequest, opts ...grpc.CallOption) (*TestDestinationResponse, error) {
	out := new(TestDestinationResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.datafeed.DatafeedService/TestDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datafeedServiceClient) EnableDestination(ctx context.Context, in *UpdateDestinationEnableRequest, opts ...grpc.CallOption) (*GetDestinationResponse, error) {
	out := new(GetDestinationResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.datafeed.DatafeedService/EnableDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datafeedServiceClient) GlobalDataFeedConfig(ctx context.Context, in *GlobalDataFeedConfigRequest, opts ...grpc.CallOption) (*GlobalDataFeedConfigResponse, error) {
	out := new(GlobalDataFeedConfigResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.datafeed.DatafeedService/GlobalDataFeedConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatafeedServiceServer is the server API for DatafeedService service.
type DatafeedServiceServer interface {
	AddDestination(context.Context, *AddDestinationRequest) (*AddDestinationResponse, error)
	GetDestination(context.Context, *GetDestinationRequest) (*GetDestinationResponse, error)
	DeleteDestination(context.Context, *DeleteDestinationRequest) (*DeleteDestinationResponse, error)
	UpdateDestination(context.Context, *UpdateDestinationRequest) (*UpdateDestinationResponse, error)
	ListDestinations(context.Context, *ListDestinationRequest) (*ListDestinationResponse, error)
	TestDestination(context.Context, *URLValidationRequest) (*TestDestinationResponse, error)
	EnableDestination(context.Context, *UpdateDestinationEnableRequest) (*GetDestinationResponse, error)
	GlobalDataFeedConfig(context.Context, *GlobalDataFeedConfigRequest) (*GlobalDataFeedConfigResponse, error)
}

// UnimplementedDatafeedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatafeedServiceServer struct {
}

func (*UnimplementedDatafeedServiceServer) AddDestination(context.Context, *AddDestinationRequest) (*AddDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDestination not implemented")
}
func (*UnimplementedDatafeedServiceServer) GetDestination(context.Context, *GetDestinationRequest) (*GetDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestination not implemented")
}
func (*UnimplementedDatafeedServiceServer) DeleteDestination(context.Context, *DeleteDestinationRequest) (*DeleteDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDestination not implemented")
}
func (*UnimplementedDatafeedServiceServer) UpdateDestination(context.Context, *UpdateDestinationRequest) (*UpdateDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDestination not implemented")
}
func (*UnimplementedDatafeedServiceServer) ListDestinations(context.Context, *ListDestinationRequest) (*ListDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDestinations not implemented")
}
func (*UnimplementedDatafeedServiceServer) TestDestination(context.Context, *URLValidationRequest) (*TestDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDestination not implemented")
}
func (*UnimplementedDatafeedServiceServer) EnableDestination(context.Context, *UpdateDestinationEnableRequest) (*GetDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDestination not implemented")
}
func (*UnimplementedDatafeedServiceServer) GlobalDataFeedConfig(context.Context, *GlobalDataFeedConfigRequest) (*GlobalDataFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalDataFeedConfig not implemented")
}

func RegisterDatafeedServiceServer(s *grpc.Server, srv DatafeedServiceServer) {
	s.RegisterService(&_DatafeedService_serviceDesc, srv)
}

func _DatafeedService_AddDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatafeedServiceServer).AddDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.datafeed.DatafeedService/AddDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatafeedServiceServer).AddDestination(ctx, req.(*AddDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatafeedService_GetDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatafeedServiceServer).GetDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.datafeed.DatafeedService/GetDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatafeedServiceServer).GetDestination(ctx, req.(*GetDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatafeedService_DeleteDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatafeedServiceServer).DeleteDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.datafeed.DatafeedService/DeleteDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatafeedServiceServer).DeleteDestination(ctx, req.(*DeleteDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatafeedService_UpdateDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatafeedServiceServer).UpdateDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.datafeed.DatafeedService/UpdateDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatafeedServiceServer).UpdateDestination(ctx, req.(*UpdateDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatafeedService_ListDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatafeedServiceServer).ListDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.datafeed.DatafeedService/ListDestinations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatafeedServiceServer).ListDestinations(ctx, req.(*ListDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatafeedService_TestDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URLValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatafeedServiceServer).TestDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.datafeed.DatafeedService/TestDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatafeedServiceServer).TestDestination(ctx, req.(*URLValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatafeedService_EnableDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDestinationEnableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatafeedServiceServer).EnableDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.datafeed.DatafeedService/EnableDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatafeedServiceServer).EnableDestination(ctx, req.(*UpdateDestinationEnableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatafeedService_GlobalDataFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalDataFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatafeedServiceServer).GlobalDataFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.datafeed.DatafeedService/GlobalDataFeedConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatafeedServiceServer).GlobalDataFeedConfig(ctx, req.(*GlobalDataFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatafeedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.datafeed.DatafeedService",
	HandlerType: (*DatafeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDestination",
			Handler:    _DatafeedService_AddDestination_Handler,
		},
		{
			MethodName: "GetDestination",
			Handler:    _DatafeedService_GetDestination_Handler,
		},
		{
			MethodName: "DeleteDestination",
			Handler:    _DatafeedService_DeleteDestination_Handler,
		},
		{
			MethodName: "UpdateDestination",
			Handler:    _DatafeedService_UpdateDestination_Handler,
		},
		{
			MethodName: "ListDestinations",
			Handler:    _DatafeedService_ListDestinations_Handler,
		},
		{
			MethodName: "TestDestination",
			Handler:    _DatafeedService_TestDestination_Handler,
		},
		{
			MethodName: "EnableDestination",
			Handler:    _DatafeedService_EnableDestination_Handler,
		},
		{
			MethodName: "GlobalDataFeedConfig",
			Handler:    _DatafeedService_GlobalDataFeedConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/data_feed/data_feed.proto",
}
