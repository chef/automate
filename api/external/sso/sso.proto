syntax = "proto3";

package chef.automate.api.sso;
option go_package = "github.com/chef/automate/api/external/sso";

import "google/api/annotations.proto";
import "external/annotations/iam/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/empty.proto";


service SsoConfigService {
    /*
	Get Sso Config 

	Returns the sso config present in automate config

	Authorization Action:
	```
	sso:config:get
	```
	*/

    rpc GetSsoConfig (google.protobuf.Empty) returns (GetSsoConfigResponse) {
		option (google.api.http) = {
			get: "/api/v0/sso/config"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "sso:config"
			action: "sso:config:get"
		};
	};

	/*
	Delete Sso Config 

	Delete the sso config if present

	Authorization Action:
	```
	sso:config:delete
	```
	*/

    rpc DeleteSsoConfig (google.protobuf.Empty) returns (DeleteSsoConfigResponse) {
		option (google.api.http) = {
			delete: "/api/v0/sso/config"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "sso:config"
			action: "sso:config:delete"
		};
	};
}


message GetSsoConfigResponse {
    string ca_contents = 1;
    string sso_url = 2;
    string email_attr = 3;
    string username_attr = 4;
    string groups_attr = 5;
    repeated string allowed_groups = 6;
    string entity_issuer = 7;
    string name_id_policy_format = 8;
}

message DeleteSsoConfigResponse {
    string message = 1;
}
  
