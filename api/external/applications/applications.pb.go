// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/applications/applications.proto

package applications

import (
	context "context"
	fmt "fmt"
	query "github.com/chef/automate/api/external/common/query"
	version "github.com/chef/automate/api/external/common/version"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The HealthStatus enumerable matches the Chef Habitat implementation for health-check status:
// => https://www.habitat.sh/docs/reference/#health-check
// For a health status within a service group.
// *critical* means that one or more services are in critical condition.
// *warning* means that one or more services have a warning, but none are in critical condition.
// *unknown* means that one or more services have not responded, but all of the remaining nodes responded to the health check as "OK".
// *OK* means that all of the services are OK and all have responded to the health check.
// *none* means that there is no health check information.
type HealthStatus int32

const (
	HealthStatus_OK       HealthStatus = 0
	HealthStatus_WARNING  HealthStatus = 1
	HealthStatus_CRITICAL HealthStatus = 2
	HealthStatus_UNKNOWN  HealthStatus = 3
	HealthStatus_NONE     HealthStatus = 17
)

var HealthStatus_name = map[int32]string{
	0:  "OK",
	1:  "WARNING",
	2:  "CRITICAL",
	3:  "UNKNOWN",
	17: "NONE",
}

var HealthStatus_value = map[string]int32{
	"OK":       0,
	"WARNING":  1,
	"CRITICAL": 2,
	"UNKNOWN":  3,
	"NONE":     17,
}

func (x HealthStatus) String() string {
	return proto.EnumName(HealthStatus_name, int32(x))
}

func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{0}
}

// Request message for listing services.
type ServicesReq struct {
	// Applies search filters, in the format of `fieldname:value`.
	Filter []string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	// Applies pagination parameters.
	Pagination *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Applies sorting parameters.
	Sorting              *query.Sorting `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServicesReq) Reset()         { *m = ServicesReq{} }
func (m *ServicesReq) String() string { return proto.CompactTextString(m) }
func (*ServicesReq) ProtoMessage()    {}
func (*ServicesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{0}
}

func (m *ServicesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesReq.Unmarshal(m, b)
}
func (m *ServicesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesReq.Marshal(b, m, deterministic)
}
func (m *ServicesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesReq.Merge(m, src)
}
func (m *ServicesReq) XXX_Size() int {
	return xxx_messageInfo_ServicesReq.Size(m)
}
func (m *ServicesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesReq proto.InternalMessageInfo

func (m *ServicesReq) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ServicesReq) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ServicesReq) GetSorting() *query.Sorting {
	if m != nil {
		return m.Sorting
	}
	return nil
}

// Request message for listing available service filters.
type ServicesDistinctValuesReq struct {
	// Field name of service values.
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// Query value, supports wildcards (* and ?).
	QueryFragment string `protobuf:"bytes,2,opt,name=query_fragment,json=queryFragment,proto3" json:"query_fragment,omitempty"`
	// Applies filters, in the format of `fieldname:value`.
	Filter               []string `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServicesDistinctValuesReq) Reset()         { *m = ServicesDistinctValuesReq{} }
func (m *ServicesDistinctValuesReq) String() string { return proto.CompactTextString(m) }
func (*ServicesDistinctValuesReq) ProtoMessage()    {}
func (*ServicesDistinctValuesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{1}
}

func (m *ServicesDistinctValuesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesDistinctValuesReq.Unmarshal(m, b)
}
func (m *ServicesDistinctValuesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesDistinctValuesReq.Marshal(b, m, deterministic)
}
func (m *ServicesDistinctValuesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesDistinctValuesReq.Merge(m, src)
}
func (m *ServicesDistinctValuesReq) XXX_Size() int {
	return xxx_messageInfo_ServicesDistinctValuesReq.Size(m)
}
func (m *ServicesDistinctValuesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesDistinctValuesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesDistinctValuesReq proto.InternalMessageInfo

func (m *ServicesDistinctValuesReq) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *ServicesDistinctValuesReq) GetQueryFragment() string {
	if m != nil {
		return m.QueryFragment
	}
	return ""
}

func (m *ServicesDistinctValuesReq) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

// Request message for listing services by service group.
type ServicesBySGReq struct {
	// Service group ID.
	ServiceGroupId string `protobuf:"bytes,1,opt,name=service_group_id,json=serviceGroupId,proto3" json:"service_group_id,omitempty"`
	// Applies pagination parameters.
	Pagination *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Applies sorting parameters.
	Sorting *query.Sorting `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	// Applies filters, in the format of `fieldname:value`.
	Filter               []string `protobuf:"bytes,5,rep,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServicesBySGReq) Reset()         { *m = ServicesBySGReq{} }
func (m *ServicesBySGReq) String() string { return proto.CompactTextString(m) }
func (*ServicesBySGReq) ProtoMessage()    {}
func (*ServicesBySGReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{2}
}

func (m *ServicesBySGReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesBySGReq.Unmarshal(m, b)
}
func (m *ServicesBySGReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesBySGReq.Marshal(b, m, deterministic)
}
func (m *ServicesBySGReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesBySGReq.Merge(m, src)
}
func (m *ServicesBySGReq) XXX_Size() int {
	return xxx_messageInfo_ServicesBySGReq.Size(m)
}
func (m *ServicesBySGReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesBySGReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesBySGReq proto.InternalMessageInfo

func (m *ServicesBySGReq) GetServiceGroupId() string {
	if m != nil {
		return m.ServiceGroupId
	}
	return ""
}

func (m *ServicesBySGReq) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ServicesBySGReq) GetSorting() *query.Sorting {
	if m != nil {
		return m.Sorting
	}
	return nil
}

func (m *ServicesBySGReq) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

// Response message for GetServicesBySG.
type ServicesBySGRes struct {
	// Service group name.
	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// List of services.
	Services []*Service `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	// Intentionally blank.
	ServicesHealthCounts *HealthCounts `protobuf:"bytes,3,opt,name=services_health_counts,json=servicesHealthCounts,proto3" json:"services_health_counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ServicesBySGRes) Reset()         { *m = ServicesBySGRes{} }
func (m *ServicesBySGRes) String() string { return proto.CompactTextString(m) }
func (*ServicesBySGRes) ProtoMessage()    {}
func (*ServicesBySGRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{3}
}

func (m *ServicesBySGRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesBySGRes.Unmarshal(m, b)
}
func (m *ServicesBySGRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesBySGRes.Marshal(b, m, deterministic)
}
func (m *ServicesBySGRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesBySGRes.Merge(m, src)
}
func (m *ServicesBySGRes) XXX_Size() int {
	return xxx_messageInfo_ServicesBySGRes.Size(m)
}
func (m *ServicesBySGRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesBySGRes.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesBySGRes proto.InternalMessageInfo

func (m *ServicesBySGRes) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ServicesBySGRes) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *ServicesBySGRes) GetServicesHealthCounts() *HealthCounts {
	if m != nil {
		return m.ServicesHealthCounts
	}
	return nil
}

// Response message for GetServices.
type ServicesRes struct {
	// List of services.
	Services             []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ServicesRes) Reset()         { *m = ServicesRes{} }
func (m *ServicesRes) String() string { return proto.CompactTextString(m) }
func (*ServicesRes) ProtoMessage()    {}
func (*ServicesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{4}
}

func (m *ServicesRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesRes.Unmarshal(m, b)
}
func (m *ServicesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesRes.Marshal(b, m, deterministic)
}
func (m *ServicesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesRes.Merge(m, src)
}
func (m *ServicesRes) XXX_Size() int {
	return xxx_messageInfo_ServicesRes.Size(m)
}
func (m *ServicesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesRes.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesRes proto.InternalMessageInfo

func (m *ServicesRes) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

// Response message for GetServicesDistinctValues.
type ServicesDistinctValuesRes struct {
	// List of distinct values fitting query_fragment and filters.
	Values               []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServicesDistinctValuesRes) Reset()         { *m = ServicesDistinctValuesRes{} }
func (m *ServicesDistinctValuesRes) String() string { return proto.CompactTextString(m) }
func (*ServicesDistinctValuesRes) ProtoMessage()    {}
func (*ServicesDistinctValuesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{5}
}

func (m *ServicesDistinctValuesRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesDistinctValuesRes.Unmarshal(m, b)
}
func (m *ServicesDistinctValuesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesDistinctValuesRes.Marshal(b, m, deterministic)
}
func (m *ServicesDistinctValuesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesDistinctValuesRes.Merge(m, src)
}
func (m *ServicesDistinctValuesRes) XXX_Size() int {
	return xxx_messageInfo_ServicesDistinctValuesRes.Size(m)
}
func (m *ServicesDistinctValuesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesDistinctValuesRes.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesDistinctValuesRes proto.InternalMessageInfo

func (m *ServicesDistinctValuesRes) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// Request message for GetDisconnectedServices.
type DisconnectedServicesReq struct {
	// Threshold for marking services disconnected in seconds.
	ThresholdSeconds     int32    `protobuf:"varint,2,opt,name=threshold_seconds,json=thresholdSeconds,proto3" json:"threshold_seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectedServicesReq) Reset()         { *m = DisconnectedServicesReq{} }
func (m *DisconnectedServicesReq) String() string { return proto.CompactTextString(m) }
func (*DisconnectedServicesReq) ProtoMessage()    {}
func (*DisconnectedServicesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{6}
}

func (m *DisconnectedServicesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisconnectedServicesReq.Unmarshal(m, b)
}
func (m *DisconnectedServicesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisconnectedServicesReq.Marshal(b, m, deterministic)
}
func (m *DisconnectedServicesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectedServicesReq.Merge(m, src)
}
func (m *DisconnectedServicesReq) XXX_Size() int {
	return xxx_messageInfo_DisconnectedServicesReq.Size(m)
}
func (m *DisconnectedServicesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectedServicesReq.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectedServicesReq proto.InternalMessageInfo

func (m *DisconnectedServicesReq) GetThresholdSeconds() int32 {
	if m != nil {
		return m.ThresholdSeconds
	}
	return 0
}

// Request message for ServicesStats.
type ServicesStatsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServicesStatsReq) Reset()         { *m = ServicesStatsReq{} }
func (m *ServicesStatsReq) String() string { return proto.CompactTextString(m) }
func (*ServicesStatsReq) ProtoMessage()    {}
func (*ServicesStatsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{7}
}

func (m *ServicesStatsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesStatsReq.Unmarshal(m, b)
}
func (m *ServicesStatsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesStatsReq.Marshal(b, m, deterministic)
}
func (m *ServicesStatsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesStatsReq.Merge(m, src)
}
func (m *ServicesStatsReq) XXX_Size() int {
	return xxx_messageInfo_ServicesStatsReq.Size(m)
}
func (m *ServicesStatsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesStatsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesStatsReq proto.InternalMessageInfo

// Response message for ServicesStats.
type ServicesStatsRes struct {
	// Total number of service groups reporting to Chef Automate.
	TotalServiceGroups int32 `protobuf:"varint,1,opt,name=total_service_groups,json=totalServiceGroups,proto3" json:"total_service_groups,omitempty"`
	// Total number of services reporting to Chef Automate, counts both connected and disconnected services.
	TotalServices int32 `protobuf:"varint,2,opt,name=total_services,json=totalServices,proto3" json:"total_services,omitempty"`
	// Total number of supervisors reporting to Chef Automate.
	TotalSupervisors int32 `protobuf:"varint,3,opt,name=total_supervisors,json=totalSupervisors,proto3" json:"total_supervisors,omitempty"`
	// Total number of deployments reporting to Chef Automate.
	TotalDeployments     int32    `protobuf:"varint,4,opt,name=total_deployments,json=totalDeployments,proto3" json:"total_deployments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServicesStatsRes) Reset()         { *m = ServicesStatsRes{} }
func (m *ServicesStatsRes) String() string { return proto.CompactTextString(m) }
func (*ServicesStatsRes) ProtoMessage()    {}
func (*ServicesStatsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{8}
}

func (m *ServicesStatsRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesStatsRes.Unmarshal(m, b)
}
func (m *ServicesStatsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesStatsRes.Marshal(b, m, deterministic)
}
func (m *ServicesStatsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesStatsRes.Merge(m, src)
}
func (m *ServicesStatsRes) XXX_Size() int {
	return xxx_messageInfo_ServicesStatsRes.Size(m)
}
func (m *ServicesStatsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesStatsRes.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesStatsRes proto.InternalMessageInfo

func (m *ServicesStatsRes) GetTotalServiceGroups() int32 {
	if m != nil {
		return m.TotalServiceGroups
	}
	return 0
}

func (m *ServicesStatsRes) GetTotalServices() int32 {
	if m != nil {
		return m.TotalServices
	}
	return 0
}

func (m *ServicesStatsRes) GetTotalSupervisors() int32 {
	if m != nil {
		return m.TotalSupervisors
	}
	return 0
}

func (m *ServicesStatsRes) GetTotalDeployments() int32 {
	if m != nil {
		return m.TotalDeployments
	}
	return 0
}

// Periodic job configuration.
type PeriodicJobConfig struct {
	// The job status? `false` is disabled, `true` is enabled.
	Running bool `protobuf:"varint,1,opt,name=running,proto3" json:"running,omitempty"`
	// The `threshold` setting used by periodic jobs for evaluating services.
	// Threshold is a string that follows Elasticsearch's date math expressions. For more information, see the simpledatemath package under `lib/`.
	Threshold            string   `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeriodicJobConfig) Reset()         { *m = PeriodicJobConfig{} }
func (m *PeriodicJobConfig) String() string { return proto.CompactTextString(m) }
func (*PeriodicJobConfig) ProtoMessage()    {}
func (*PeriodicJobConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{9}
}

func (m *PeriodicJobConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicJobConfig.Unmarshal(m, b)
}
func (m *PeriodicJobConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicJobConfig.Marshal(b, m, deterministic)
}
func (m *PeriodicJobConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicJobConfig.Merge(m, src)
}
func (m *PeriodicJobConfig) XXX_Size() int {
	return xxx_messageInfo_PeriodicJobConfig.Size(m)
}
func (m *PeriodicJobConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicJobConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicJobConfig proto.InternalMessageInfo

func (m *PeriodicJobConfig) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *PeriodicJobConfig) GetThreshold() string {
	if m != nil {
		return m.Threshold
	}
	return ""
}

// Configuration for the mandatory periodic job.
// Required and cannot be disabled.
type PeriodicMandatoryJobConfig struct {
	// The `threshold` setting used by periodic jobs for evaluating services.
	// Threshold is a string that follows Elasticsearch's date math expressions. For more information, see the simpledatemath package under `lib/`.
	Threshold            string   `protobuf:"bytes,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeriodicMandatoryJobConfig) Reset()         { *m = PeriodicMandatoryJobConfig{} }
func (m *PeriodicMandatoryJobConfig) String() string { return proto.CompactTextString(m) }
func (*PeriodicMandatoryJobConfig) ProtoMessage()    {}
func (*PeriodicMandatoryJobConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{10}
}

func (m *PeriodicMandatoryJobConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicMandatoryJobConfig.Unmarshal(m, b)
}
func (m *PeriodicMandatoryJobConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicMandatoryJobConfig.Marshal(b, m, deterministic)
}
func (m *PeriodicMandatoryJobConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicMandatoryJobConfig.Merge(m, src)
}
func (m *PeriodicMandatoryJobConfig) XXX_Size() int {
	return xxx_messageInfo_PeriodicMandatoryJobConfig.Size(m)
}
func (m *PeriodicMandatoryJobConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicMandatoryJobConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicMandatoryJobConfig proto.InternalMessageInfo

func (m *PeriodicMandatoryJobConfig) GetThreshold() string {
	if m != nil {
		return m.Threshold
	}
	return ""
}

type GetDisconnectedServicesConfigReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDisconnectedServicesConfigReq) Reset()         { *m = GetDisconnectedServicesConfigReq{} }
func (m *GetDisconnectedServicesConfigReq) String() string { return proto.CompactTextString(m) }
func (*GetDisconnectedServicesConfigReq) ProtoMessage()    {}
func (*GetDisconnectedServicesConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{11}
}

func (m *GetDisconnectedServicesConfigReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDisconnectedServicesConfigReq.Unmarshal(m, b)
}
func (m *GetDisconnectedServicesConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDisconnectedServicesConfigReq.Marshal(b, m, deterministic)
}
func (m *GetDisconnectedServicesConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDisconnectedServicesConfigReq.Merge(m, src)
}
func (m *GetDisconnectedServicesConfigReq) XXX_Size() int {
	return xxx_messageInfo_GetDisconnectedServicesConfigReq.Size(m)
}
func (m *GetDisconnectedServicesConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDisconnectedServicesConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDisconnectedServicesConfigReq proto.InternalMessageInfo

type UpdateDisconnectedServicesConfigRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDisconnectedServicesConfigRes) Reset()         { *m = UpdateDisconnectedServicesConfigRes{} }
func (m *UpdateDisconnectedServicesConfigRes) String() string { return proto.CompactTextString(m) }
func (*UpdateDisconnectedServicesConfigRes) ProtoMessage()    {}
func (*UpdateDisconnectedServicesConfigRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{12}
}

func (m *UpdateDisconnectedServicesConfigRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDisconnectedServicesConfigRes.Unmarshal(m, b)
}
func (m *UpdateDisconnectedServicesConfigRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDisconnectedServicesConfigRes.Marshal(b, m, deterministic)
}
func (m *UpdateDisconnectedServicesConfigRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDisconnectedServicesConfigRes.Merge(m, src)
}
func (m *UpdateDisconnectedServicesConfigRes) XXX_Size() int {
	return xxx_messageInfo_UpdateDisconnectedServicesConfigRes.Size(m)
}
func (m *UpdateDisconnectedServicesConfigRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDisconnectedServicesConfigRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDisconnectedServicesConfigRes proto.InternalMessageInfo

type GetDeleteDisconnectedServicesConfigReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeleteDisconnectedServicesConfigReq) Reset() {
	*m = GetDeleteDisconnectedServicesConfigReq{}
}
func (m *GetDeleteDisconnectedServicesConfigReq) String() string { return proto.CompactTextString(m) }
func (*GetDeleteDisconnectedServicesConfigReq) ProtoMessage()    {}
func (*GetDeleteDisconnectedServicesConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{13}
}

func (m *GetDeleteDisconnectedServicesConfigReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeleteDisconnectedServicesConfigReq.Unmarshal(m, b)
}
func (m *GetDeleteDisconnectedServicesConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeleteDisconnectedServicesConfigReq.Marshal(b, m, deterministic)
}
func (m *GetDeleteDisconnectedServicesConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeleteDisconnectedServicesConfigReq.Merge(m, src)
}
func (m *GetDeleteDisconnectedServicesConfigReq) XXX_Size() int {
	return xxx_messageInfo_GetDeleteDisconnectedServicesConfigReq.Size(m)
}
func (m *GetDeleteDisconnectedServicesConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeleteDisconnectedServicesConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeleteDisconnectedServicesConfigReq proto.InternalMessageInfo

type UpdateDeleteDisconnectedServicesConfigRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDeleteDisconnectedServicesConfigRes) Reset() {
	*m = UpdateDeleteDisconnectedServicesConfigRes{}
}
func (m *UpdateDeleteDisconnectedServicesConfigRes) String() string { return proto.CompactTextString(m) }
func (*UpdateDeleteDisconnectedServicesConfigRes) ProtoMessage()    {}
func (*UpdateDeleteDisconnectedServicesConfigRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{14}
}

func (m *UpdateDeleteDisconnectedServicesConfigRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDeleteDisconnectedServicesConfigRes.Unmarshal(m, b)
}
func (m *UpdateDeleteDisconnectedServicesConfigRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDeleteDisconnectedServicesConfigRes.Marshal(b, m, deterministic)
}
func (m *UpdateDeleteDisconnectedServicesConfigRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeleteDisconnectedServicesConfigRes.Merge(m, src)
}
func (m *UpdateDeleteDisconnectedServicesConfigRes) XXX_Size() int {
	return xxx_messageInfo_UpdateDeleteDisconnectedServicesConfigRes.Size(m)
}
func (m *UpdateDeleteDisconnectedServicesConfigRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeleteDisconnectedServicesConfigRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeleteDisconnectedServicesConfigRes proto.InternalMessageInfo

type Service struct {
	// The Chef Habitat Supervisor ID.
	SupervisorId string `protobuf:"bytes,1,opt,name=supervisor_id,json=supervisorId,proto3" json:"supervisor_id,omitempty"`
	// Combination of the service version and release in a single string.
	// Example: 0.1.0/8743278934278923.
	Release string `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	// Service group name.
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	// Intentionally blank.
	HealthCheck HealthStatus `protobuf:"varint,4,opt,name=health_check,json=healthCheck,proto3,enum=chef.automate.api.applications.HealthStatus" json:"health_check,omitempty"`
	// Application name.
	Application string `protobuf:"bytes,6,opt,name=application,proto3" json:"application,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	// FQDN reported by a Chef Habitat Supervisor.
	Fqdn string `protobuf:"bytes,8,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// Chef Habitat channel that the service is subscribed to.
	Channel string `protobuf:"bytes,9,opt,name=channel,proto3" json:"channel,omitempty"`
	// Update strategy that the service employs.
	UpdateStrategy string `protobuf:"bytes,10,opt,name=update_strategy,json=updateStrategy,proto3" json:"update_strategy,omitempty"`
	// Site reported by Chef Habitat service, a user defined flag.
	Site string `protobuf:"bytes,17,opt,name=site,proto3" json:"site,omitempty"`
	// Intentionally blank.
	PreviousHealthCheck HealthStatus `protobuf:"varint,18,opt,name=previous_health_check,json=previousHealthCheck,proto3,enum=chef.automate.api.applications.HealthStatus" json:"previous_health_check,omitempty"`
	// Time interval of current health status from last status change until now.
	CurrentHealthSince string `protobuf:"bytes,19,opt,name=current_health_since,json=currentHealthSince,proto3" json:"current_health_since,omitempty"`
	// Timestamp since health status change.
	HealthUpdatedAt *timestamp.Timestamp `protobuf:"bytes,20,opt,name=health_updated_at,json=healthUpdatedAt,proto3" json:"health_updated_at,omitempty"`
	// Service connection information.
	// Based on time since last healthcheck received and disconnected service configuration.
	Disconnected bool `protobuf:"varint,21,opt,name=disconnected,proto3" json:"disconnected,omitempty"`
	// Timestamp of last received health check message.
	LastEventOccurredAt *timestamp.Timestamp `protobuf:"bytes,22,opt,name=last_event_occurred_at,json=lastEventOccurredAt,proto3" json:"last_event_occurred_at,omitempty"`
	// Interval since last event received until now.
	LastEventSince string `protobuf:"bytes,23,opt,name=last_event_since,json=lastEventSince,proto3" json:"last_event_since,omitempty"`
	// Intentionally blank.
	HealthCheckResult    *HealthCheckResult `protobuf:"bytes,24,opt,name=health_check_result,json=healthCheckResult,proto3" json:"health_check_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{15}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetSupervisorId() string {
	if m != nil {
		return m.SupervisorId
	}
	return ""
}

func (m *Service) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *Service) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Service) GetHealthCheck() HealthStatus {
	if m != nil {
		return m.HealthCheck
	}
	return HealthStatus_OK
}

func (m *Service) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *Service) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Service) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *Service) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Service) GetUpdateStrategy() string {
	if m != nil {
		return m.UpdateStrategy
	}
	return ""
}

func (m *Service) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *Service) GetPreviousHealthCheck() HealthStatus {
	if m != nil {
		return m.PreviousHealthCheck
	}
	return HealthStatus_OK
}

func (m *Service) GetCurrentHealthSince() string {
	if m != nil {
		return m.CurrentHealthSince
	}
	return ""
}

func (m *Service) GetHealthUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.HealthUpdatedAt
	}
	return nil
}

func (m *Service) GetDisconnected() bool {
	if m != nil {
		return m.Disconnected
	}
	return false
}

func (m *Service) GetLastEventOccurredAt() *timestamp.Timestamp {
	if m != nil {
		return m.LastEventOccurredAt
	}
	return nil
}

func (m *Service) GetLastEventSince() string {
	if m != nil {
		return m.LastEventSince
	}
	return ""
}

func (m *Service) GetHealthCheckResult() *HealthCheckResult {
	if m != nil {
		return m.HealthCheckResult
	}
	return nil
}

// Request message for GetServiceGroupsHealthCounts
type ServiceGroupsHealthCountsReq struct {
	// Applies search filters, in the format of `fieldname:value`.
	Filter               []string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceGroupsHealthCountsReq) Reset()         { *m = ServiceGroupsHealthCountsReq{} }
func (m *ServiceGroupsHealthCountsReq) String() string { return proto.CompactTextString(m) }
func (*ServiceGroupsHealthCountsReq) ProtoMessage()    {}
func (*ServiceGroupsHealthCountsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{16}
}

func (m *ServiceGroupsHealthCountsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceGroupsHealthCountsReq.Unmarshal(m, b)
}
func (m *ServiceGroupsHealthCountsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceGroupsHealthCountsReq.Marshal(b, m, deterministic)
}
func (m *ServiceGroupsHealthCountsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroupsHealthCountsReq.Merge(m, src)
}
func (m *ServiceGroupsHealthCountsReq) XXX_Size() int {
	return xxx_messageInfo_ServiceGroupsHealthCountsReq.Size(m)
}
func (m *ServiceGroupsHealthCountsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroupsHealthCountsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroupsHealthCountsReq proto.InternalMessageInfo

func (m *ServiceGroupsHealthCountsReq) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

// Request message for GetServiceGroups
type ServiceGroupsReq struct {
	// Applies search and status filters, in the format of `fieldname:value` or `status:value`.
	Filter []string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	// Pagination parameters for service groups list.
	Pagination *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Sorting parameters for service groups list.
	Sorting              *query.Sorting `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServiceGroupsReq) Reset()         { *m = ServiceGroupsReq{} }
func (m *ServiceGroupsReq) String() string { return proto.CompactTextString(m) }
func (*ServiceGroupsReq) ProtoMessage()    {}
func (*ServiceGroupsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{17}
}

func (m *ServiceGroupsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceGroupsReq.Unmarshal(m, b)
}
func (m *ServiceGroupsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceGroupsReq.Marshal(b, m, deterministic)
}
func (m *ServiceGroupsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroupsReq.Merge(m, src)
}
func (m *ServiceGroupsReq) XXX_Size() int {
	return xxx_messageInfo_ServiceGroupsReq.Size(m)
}
func (m *ServiceGroupsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroupsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroupsReq proto.InternalMessageInfo

func (m *ServiceGroupsReq) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ServiceGroupsReq) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ServiceGroupsReq) GetSorting() *query.Sorting {
	if m != nil {
		return m.Sorting
	}
	return nil
}

// A service group message is the representation of an individual service group that
// is internally generated by aggregating all of its services.
type ServiceGroup struct {
	// Name of service group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Combination of the version and release in a single string.
	// Example: 0.1.0/8743278934278923.
	Release string `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	// Intentionally blank.
	Status HealthStatus `protobuf:"varint,3,opt,name=status,proto3,enum=chef.automate.api.applications.HealthStatus" json:"status,omitempty"`
	// Percentage of services reporting OK status.
	// The health_percentage can be a number between 0-100.
	HealthPercentage int32 `protobuf:"varint,4,opt,name=health_percentage,json=healthPercentage,proto3" json:"health_percentage,omitempty"`
	// Intentionally blank.
	ServicesHealthCounts *HealthCounts `protobuf:"bytes,5,opt,name=services_health_counts,json=servicesHealthCounts,proto3" json:"services_health_counts,omitempty"`
	// Service group ID. This is a value constructed by Chef Automate and is not reported by Chef Habitat.
	Id string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	// Application name for the service group.
	Application string `protobuf:"bytes,7,opt,name=application,proto3" json:"application,omitempty"`
	// Environment name for the service group.
	Environment string `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	// Combination of the origin and package name in a single string.
	// Example: core/redis.
	Package string `protobuf:"bytes,9,opt,name=package,proto3" json:"package,omitempty"`
	// Count of disconnected services within this service group.
	DisconnectedCount    int32    `protobuf:"varint,10,opt,name=disconnected_count,json=disconnectedCount,proto3" json:"disconnected_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceGroup) Reset()         { *m = ServiceGroup{} }
func (m *ServiceGroup) String() string { return proto.CompactTextString(m) }
func (*ServiceGroup) ProtoMessage()    {}
func (*ServiceGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{18}
}

func (m *ServiceGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceGroup.Unmarshal(m, b)
}
func (m *ServiceGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceGroup.Marshal(b, m, deterministic)
}
func (m *ServiceGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroup.Merge(m, src)
}
func (m *ServiceGroup) XXX_Size() int {
	return xxx_messageInfo_ServiceGroup.Size(m)
}
func (m *ServiceGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroup proto.InternalMessageInfo

func (m *ServiceGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceGroup) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *ServiceGroup) GetStatus() HealthStatus {
	if m != nil {
		return m.Status
	}
	return HealthStatus_OK
}

func (m *ServiceGroup) GetHealthPercentage() int32 {
	if m != nil {
		return m.HealthPercentage
	}
	return 0
}

func (m *ServiceGroup) GetServicesHealthCounts() *HealthCounts {
	if m != nil {
		return m.ServicesHealthCounts
	}
	return nil
}

func (m *ServiceGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ServiceGroup) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *ServiceGroup) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ServiceGroup) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *ServiceGroup) GetDisconnectedCount() int32 {
	if m != nil {
		return m.DisconnectedCount
	}
	return 0
}

// Combined count values from the health status and disconnected status reports.
type HealthCounts struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Ok                   int32    `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	Warning              int32    `protobuf:"varint,3,opt,name=warning,proto3" json:"warning,omitempty"`
	Critical             int32    `protobuf:"varint,4,opt,name=critical,proto3" json:"critical,omitempty"`
	Unknown              int32    `protobuf:"varint,5,opt,name=unknown,proto3" json:"unknown,omitempty"`
	Disconnected         int32    `protobuf:"varint,6,opt,name=disconnected,proto3" json:"disconnected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCounts) Reset()         { *m = HealthCounts{} }
func (m *HealthCounts) String() string { return proto.CompactTextString(m) }
func (*HealthCounts) ProtoMessage()    {}
func (*HealthCounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{19}
}

func (m *HealthCounts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCounts.Unmarshal(m, b)
}
func (m *HealthCounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCounts.Marshal(b, m, deterministic)
}
func (m *HealthCounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCounts.Merge(m, src)
}
func (m *HealthCounts) XXX_Size() int {
	return xxx_messageInfo_HealthCounts.Size(m)
}
func (m *HealthCounts) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCounts.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCounts proto.InternalMessageInfo

func (m *HealthCounts) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *HealthCounts) GetOk() int32 {
	if m != nil {
		return m.Ok
	}
	return 0
}

func (m *HealthCounts) GetWarning() int32 {
	if m != nil {
		return m.Warning
	}
	return 0
}

func (m *HealthCounts) GetCritical() int32 {
	if m != nil {
		return m.Critical
	}
	return 0
}

func (m *HealthCounts) GetUnknown() int32 {
	if m != nil {
		return m.Unknown
	}
	return 0
}

func (m *HealthCounts) GetDisconnected() int32 {
	if m != nil {
		return m.Disconnected
	}
	return 0
}

// The package identifier of a service is unique and is the combination
// of origin/name/version/release
//
// Example: core/redis/0.1.0/8743278934278923
type PackageIdent struct {
	// Chef Habitat origin.
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// Chef Habitat package name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Chef Habitat release version number.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Chef Habitat release buildstamp.
	Release              string   `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageIdent) Reset()         { *m = PackageIdent{} }
func (m *PackageIdent) String() string { return proto.CompactTextString(m) }
func (*PackageIdent) ProtoMessage()    {}
func (*PackageIdent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{20}
}

func (m *PackageIdent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageIdent.Unmarshal(m, b)
}
func (m *PackageIdent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageIdent.Marshal(b, m, deterministic)
}
func (m *PackageIdent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageIdent.Merge(m, src)
}
func (m *PackageIdent) XXX_Size() int {
	return xxx_messageInfo_PackageIdent.Size(m)
}
func (m *PackageIdent) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageIdent.DiscardUnknown(m)
}

var xxx_messageInfo_PackageIdent proto.InternalMessageInfo

func (m *PackageIdent) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *PackageIdent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PackageIdent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PackageIdent) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

// List of service groups.
type ServiceGroups struct {
	// List of service groups.
	ServiceGroups        []*ServiceGroup `protobuf:"bytes,1,rep,name=service_groups,json=serviceGroups,proto3" json:"service_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ServiceGroups) Reset()         { *m = ServiceGroups{} }
func (m *ServiceGroups) String() string { return proto.CompactTextString(m) }
func (*ServiceGroups) ProtoMessage()    {}
func (*ServiceGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{21}
}

func (m *ServiceGroups) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceGroups.Unmarshal(m, b)
}
func (m *ServiceGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceGroups.Marshal(b, m, deterministic)
}
func (m *ServiceGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroups.Merge(m, src)
}
func (m *ServiceGroups) XXX_Size() int {
	return xxx_messageInfo_ServiceGroups.Size(m)
}
func (m *ServiceGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroups.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroups proto.InternalMessageInfo

func (m *ServiceGroups) GetServiceGroups() []*ServiceGroup {
	if m != nil {
		return m.ServiceGroups
	}
	return nil
}

// HealthCheckResult aggregates the stdout output, stderr output and process
// exit status of a habitat health check
type HealthCheckResult struct {
	Stdout               string   `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr               string   `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	ExitStatus           int32    `protobuf:"varint,3,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckResult) Reset()         { *m = HealthCheckResult{} }
func (m *HealthCheckResult) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResult) ProtoMessage()    {}
func (*HealthCheckResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6daf34f0710a8049, []int{22}
}

func (m *HealthCheckResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckResult.Unmarshal(m, b)
}
func (m *HealthCheckResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckResult.Marshal(b, m, deterministic)
}
func (m *HealthCheckResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResult.Merge(m, src)
}
func (m *HealthCheckResult) XXX_Size() int {
	return xxx_messageInfo_HealthCheckResult.Size(m)
}
func (m *HealthCheckResult) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResult.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResult proto.InternalMessageInfo

func (m *HealthCheckResult) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *HealthCheckResult) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *HealthCheckResult) GetExitStatus() int32 {
	if m != nil {
		return m.ExitStatus
	}
	return 0
}

func init() {
	proto.RegisterEnum("chef.automate.api.applications.HealthStatus", HealthStatus_name, HealthStatus_value)
	proto.RegisterType((*ServicesReq)(nil), "chef.automate.api.applications.ServicesReq")
	proto.RegisterType((*ServicesDistinctValuesReq)(nil), "chef.automate.api.applications.ServicesDistinctValuesReq")
	proto.RegisterType((*ServicesBySGReq)(nil), "chef.automate.api.applications.ServicesBySGReq")
	proto.RegisterType((*ServicesBySGRes)(nil), "chef.automate.api.applications.ServicesBySGRes")
	proto.RegisterType((*ServicesRes)(nil), "chef.automate.api.applications.ServicesRes")
	proto.RegisterType((*ServicesDistinctValuesRes)(nil), "chef.automate.api.applications.ServicesDistinctValuesRes")
	proto.RegisterType((*DisconnectedServicesReq)(nil), "chef.automate.api.applications.DisconnectedServicesReq")
	proto.RegisterType((*ServicesStatsReq)(nil), "chef.automate.api.applications.ServicesStatsReq")
	proto.RegisterType((*ServicesStatsRes)(nil), "chef.automate.api.applications.ServicesStatsRes")
	proto.RegisterType((*PeriodicJobConfig)(nil), "chef.automate.api.applications.PeriodicJobConfig")
	proto.RegisterType((*PeriodicMandatoryJobConfig)(nil), "chef.automate.api.applications.PeriodicMandatoryJobConfig")
	proto.RegisterType((*GetDisconnectedServicesConfigReq)(nil), "chef.automate.api.applications.GetDisconnectedServicesConfigReq")
	proto.RegisterType((*UpdateDisconnectedServicesConfigRes)(nil), "chef.automate.api.applications.UpdateDisconnectedServicesConfigRes")
	proto.RegisterType((*GetDeleteDisconnectedServicesConfigReq)(nil), "chef.automate.api.applications.GetDeleteDisconnectedServicesConfigReq")
	proto.RegisterType((*UpdateDeleteDisconnectedServicesConfigRes)(nil), "chef.automate.api.applications.UpdateDeleteDisconnectedServicesConfigRes")
	proto.RegisterType((*Service)(nil), "chef.automate.api.applications.Service")
	proto.RegisterType((*ServiceGroupsHealthCountsReq)(nil), "chef.automate.api.applications.ServiceGroupsHealthCountsReq")
	proto.RegisterType((*ServiceGroupsReq)(nil), "chef.automate.api.applications.ServiceGroupsReq")
	proto.RegisterType((*ServiceGroup)(nil), "chef.automate.api.applications.ServiceGroup")
	proto.RegisterType((*HealthCounts)(nil), "chef.automate.api.applications.HealthCounts")
	proto.RegisterType((*PackageIdent)(nil), "chef.automate.api.applications.PackageIdent")
	proto.RegisterType((*ServiceGroups)(nil), "chef.automate.api.applications.ServiceGroups")
	proto.RegisterType((*HealthCheckResult)(nil), "chef.automate.api.applications.HealthCheckResult")
}

func init() {
	proto.RegisterFile("api/external/applications/applications.proto", fileDescriptor_6daf34f0710a8049)
}

var fileDescriptor_6daf34f0710a8049 = []byte{
	// 2079 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x6f, 0x1b, 0xd7,
	0x11, 0x2f, 0x57, 0x22, 0x45, 0x8d, 0x64, 0x9b, 0x7a, 0x92, 0xa5, 0x35, 0x23, 0xdb, 0xca, 0x0a,
	0x76, 0x14, 0xd9, 0x22, 0x6d, 0x27, 0x4d, 0x5a, 0xb6, 0x41, 0x23, 0xcb, 0xb1, 0x2c, 0x3b, 0x95,
	0x8c, 0x55, 0x3e, 0x80, 0x5e, 0xd8, 0xd5, 0xee, 0x13, 0xb9, 0xd0, 0xf2, 0xed, 0x6a, 0xdf, 0x5b,
	0x39, 0x42, 0xd1, 0x4b, 0x2e, 0x2d, 0x74, 0xab, 0xda, 0x7f, 0xa0, 0x48, 0x0f, 0xb9, 0x14, 0xed,
	0x21, 0x02, 0xda, 0x6b, 0x81, 0x02, 0x3d, 0x16, 0x08, 0xd0, 0x7b, 0x8b, 0x1e, 0xfa, 0x2f, 0x04,
	0x05, 0x8a, 0xe2, 0x7d, 0x2c, 0xb9, 0xcb, 0x6f, 0x3a, 0x42, 0xd5, 0x9c, 0xc4, 0x37, 0x6f, 0x66,
	0xde, 0xcc, 0xef, 0xcd, 0xcc, 0x9b, 0x1d, 0xc1, 0x5d, 0x2b, 0x70, 0xcb, 0xf8, 0x13, 0x86, 0x43,
	0x62, 0x79, 0x65, 0x2b, 0x08, 0x3c, 0xd7, 0xb6, 0x98, 0xeb, 0x13, 0x9a, 0x5a, 0x94, 0x82, 0xd0,
	0x67, 0x3e, 0xba, 0x61, 0xd7, 0xf1, 0x7e, 0xc9, 0x8a, 0x98, 0xdf, 0xb0, 0x18, 0x2e, 0x59, 0x81,
	0x5b, 0x4a, 0x72, 0x15, 0x6f, 0xd6, 0x7c, 0xbf, 0xe6, 0xe1, 0xb2, 0xe0, 0xde, 0x8b, 0xf6, 0xcb,
	0xcc, 0x6d, 0x60, 0xca, 0xac, 0x46, 0x20, 0x15, 0x14, 0x17, 0x15, 0x03, 0x3f, 0xd5, 0x22, 0xc4,
	0x67, 0x49, 0xf5, 0xc5, 0xbb, 0xe2, 0x8f, 0xbd, 0x56, 0xc3, 0x64, 0x8d, 0xbe, 0xb0, 0x6a, 0x35,
	0x1c, 0x96, 0xfd, 0x40, 0x59, 0xd3, 0xc1, 0xfd, 0x7a, 0xca, 0x74, 0xdb, 0x6f, 0x34, 0x7c, 0x52,
	0x3e, 0xc2, 0x21, 0x75, 0x5b, 0x7f, 0x15, 0xeb, 0xbb, 0xb6, 0xdf, 0x08, 0x7c, 0x82, 0x09, 0xa3,
	0xe5, 0xd8, 0xfa, 0xb5, 0x5a, 0x18, 0xd8, 0xe5, 0xc4, 0x89, 0x81, 0xef, 0xb9, 0xf6, 0x71, 0x0f,
	0xd3, 0x46, 0xd1, 0xe0, 0x5a, 0x8d, 0x2e, 0x1a, 0x56, 0xbb, 0x99, 0x7b, 0x18, 0xe1, 0xf0, 0xb8,
	0x1c, 0x58, 0xa1, 0xd5, 0xc0, 0x0c, 0x87, 0x8a, 0xd7, 0xf8, 0x22, 0x03, 0x53, 0xbb, 0x38, 0x3c,
	0x72, 0x6d, 0x4c, 0x4d, 0x7c, 0x88, 0xe6, 0x21, 0xb7, 0xef, 0x7a, 0x0c, 0x87, 0x7a, 0x66, 0x69,
	0x6c, 0x65, 0xd2, 0x54, 0x2b, 0xf4, 0x14, 0x20, 0xb0, 0x6a, 0x2e, 0x11, 0x07, 0xe9, 0xda, 0x52,
	0x66, 0x65, 0xea, 0xc1, 0x6a, 0xa9, 0xf3, 0x92, 0xe4, 0x69, 0x25, 0x71, 0x5a, 0xe9, 0x79, 0x53,
	0xc2, 0x4c, 0x48, 0xa3, 0x75, 0x98, 0xa0, 0x7e, 0xc8, 0x5c, 0x52, 0xd3, 0xc7, 0x84, 0xa2, 0xd7,
	0x06, 0x29, 0xda, 0x95, 0xec, 0x66, 0x2c, 0x67, 0x1c, 0xc3, 0xb5, 0xd8, 0xea, 0x47, 0x2e, 0x65,
	0x2e, 0xb1, 0xd9, 0x47, 0x96, 0x17, 0x49, 0x1f, 0xae, 0x03, 0xec, 0xbb, 0xd8, 0x73, 0xaa, 0xc4,
	0x6a, 0x60, 0x3d, 0xb3, 0x94, 0x59, 0x99, 0x34, 0x27, 0x05, 0x65, 0xdb, 0x6a, 0x60, 0x74, 0x0b,
	0x2e, 0x0b, 0xad, 0xd5, 0xfd, 0xd0, 0xaa, 0x35, 0x30, 0x61, 0xc2, 0x9d, 0x49, 0xf3, 0x92, 0xa0,
	0x3e, 0x56, 0xc4, 0x04, 0x12, 0x63, 0x49, 0x24, 0x8c, 0x7f, 0x64, 0xe0, 0x4a, 0x7c, 0xf6, 0xc3,
	0xe3, 0xdd, 0x4d, 0x7e, 0xe2, 0x0a, 0x14, 0xa8, 0x24, 0x55, 0x6b, 0xa1, 0x1f, 0x05, 0x55, 0xd7,
	0x51, 0xe7, 0x5e, 0x56, 0xf4, 0x4d, 0x4e, 0xde, 0x72, 0xfe, 0xcf, 0x70, 0x4c, 0x38, 0x99, 0x4d,
	0x39, 0xf9, 0xd7, 0x0e, 0x27, 0x29, 0x9a, 0x83, 0xac, 0x70, 0x4e, 0x79, 0x26, 0x17, 0x68, 0x03,
	0xf2, 0xca, 0x45, 0xaa, 0x6b, 0x4b, 0x63, 0x3d, 0xac, 0x48, 0x65, 0xb8, 0x52, 0x6c, 0x36, 0x05,
	0xd1, 0x1e, 0xcc, 0xc7, 0xbf, 0xab, 0x75, 0x6c, 0x79, 0xac, 0x5e, 0xb5, 0xfd, 0x88, 0x30, 0xaa,
	0x1c, 0xbb, 0x3b, 0x48, 0xe5, 0x13, 0x21, 0xb4, 0x21, 0x64, 0xcc, 0xb9, 0x58, 0x57, 0x92, 0x6a,
	0x98, 0xc9, 0x40, 0xa7, 0x29, 0xbb, 0x33, 0x2f, 0x69, 0xb7, 0xf1, 0x46, 0xef, 0x30, 0xa4, 0x1c,
	0xdb, 0x23, 0xb1, 0x88, 0x53, 0x49, 0xae, 0x8c, 0xf7, 0x61, 0xe1, 0x91, 0x4b, 0x6d, 0x9f, 0x10,
	0x6c, 0x33, 0xec, 0x24, 0xb3, 0xef, 0x0e, 0xcc, 0xb0, 0x7a, 0x88, 0x69, 0xdd, 0xf7, 0x9c, 0x2a,
	0xc5, 0xb6, 0x4f, 0x1c, 0x2a, 0x82, 0x24, 0x6b, 0x16, 0x9a, 0x1b, 0xbb, 0x92, 0xfe, 0x74, 0x3c,
	0x9f, 0x29, 0x68, 0x06, 0x82, 0x42, 0xac, 0x61, 0x97, 0x59, 0x8c, 0xab, 0x31, 0xfe, 0x9c, 0xe9,
	0x20, 0x52, 0x74, 0x0f, 0xe6, 0x98, 0xcf, 0x2c, 0xaf, 0x9a, 0x8a, 0x54, 0x2a, 0x6e, 0x33, 0x6b,
	0x22, 0xb1, 0xb7, 0x9b, 0x08, 0x56, 0xca, 0x13, 0x25, 0x25, 0x11, 0x9b, 0x72, 0x29, 0xc9, 0x4b,
	0x85, 0xd1, 0x92, 0x2d, 0x0a, 0x38, 0x8d, 0xfa, 0xa1, 0xbc, 0x37, 0x6e, 0xb4, 0xe0, 0x6c, 0xd1,
	0x5b, 0xcc, 0x0e, 0x0e, 0x3c, 0xff, 0x98, 0x67, 0x1a, 0xd5, 0xc7, 0x13, 0xcc, 0x8f, 0x5a, 0x74,
	0xe3, 0x19, 0xcc, 0x3c, 0xc7, 0xa1, 0xeb, 0x3b, 0xae, 0xfd, 0xd4, 0xdf, 0xdb, 0xf0, 0xc9, 0xbe,
	0x5b, 0x43, 0x3a, 0x4c, 0x84, 0x11, 0x21, 0x3c, 0xea, 0xb9, 0xe9, 0x79, 0x33, 0x5e, 0xa2, 0x45,
	0x98, 0x6c, 0x82, 0xa4, 0x72, 0xba, 0x45, 0x30, 0x2a, 0x50, 0x8c, 0x95, 0xfd, 0xd0, 0x22, 0x8e,
	0xc5, 0xfc, 0xf0, 0xb8, 0xa5, 0x35, 0x25, 0x9b, 0x69, 0x97, 0x35, 0x60, 0x69, 0x13, 0xb3, 0x6e,
	0xb7, 0x26, 0xc5, 0x39, 0xe8, 0xb7, 0x60, 0xf9, 0xc3, 0xc0, 0xb1, 0x18, 0xee, 0xc7, 0x46, 0x8d,
	0x15, 0xb8, 0xcd, 0x55, 0x61, 0x0f, 0xf7, 0xe7, 0x3c, 0x34, 0xee, 0xc0, 0xeb, 0x4a, 0xe1, 0x40,
	0x66, 0x6a, 0xfc, 0x29, 0x07, 0x13, 0x8a, 0x8a, 0x96, 0xe1, 0x52, 0xeb, 0x2a, 0x5a, 0xa5, 0x68,
	0xba, 0x45, 0xdc, 0x72, 0x04, 0x8c, 0xd8, 0xc3, 0x16, 0xc5, 0x0a, 0xaa, 0x78, 0xd9, 0xca, 0xf3,
	0xb1, 0x64, 0x9e, 0xef, 0xc0, 0x74, 0x9c, 0x99, 0x75, 0x6c, 0x1f, 0x88, 0x3b, 0xbb, 0x3c, 0x6c,
	0x62, 0xf2, 0x20, 0x8c, 0xa8, 0x39, 0x25, 0x35, 0x6c, 0x70, 0x05, 0x68, 0x09, 0xa6, 0x12, 0x9c,
	0x7a, 0x4e, 0x1c, 0x96, 0x24, 0x71, 0x0e, 0x4c, 0x8e, 0xdc, 0xd0, 0x27, 0xa2, 0x4a, 0x4f, 0x48,
	0x8e, 0x04, 0x09, 0x21, 0x18, 0xdf, 0x3f, 0x74, 0x88, 0x9e, 0x17, 0x5b, 0xe2, 0x37, 0x77, 0xcc,
	0xae, 0x5b, 0x84, 0x60, 0x4f, 0x9f, 0x94, 0x8e, 0xa9, 0x25, 0x7a, 0x0d, 0xae, 0x44, 0x02, 0xd0,
	0x2a, 0x65, 0xa1, 0xc5, 0x70, 0xed, 0x58, 0x07, 0x59, 0xa4, 0x25, 0x79, 0x57, 0x51, 0xb9, 0x5a,
	0xea, 0x32, 0xac, 0xcf, 0x48, 0xb5, 0xfc, 0x37, 0xfa, 0x31, 0x5c, 0x0d, 0x42, 0x7c, 0xe4, 0xfa,
	0x51, 0xab, 0x44, 0x09, 0x20, 0xd0, 0x4b, 0x00, 0x31, 0x1b, 0xab, 0x7a, 0x92, 0x00, 0xe4, 0x1e,
	0xcc, 0xd9, 0x51, 0x18, 0x62, 0xc2, 0xe2, 0x03, 0xa8, 0x4b, 0x6c, 0xac, 0xcf, 0x0a, 0x2b, 0x90,
	0xda, 0x53, 0x7a, 0xf8, 0x0e, 0x7a, 0x0c, 0x33, 0x8a, 0x53, 0x3a, 0xe0, 0x54, 0x2d, 0xa6, 0xcf,
	0x89, 0x8a, 0x59, 0x2c, 0xc9, 0xfe, 0xa7, 0x14, 0x37, 0x48, 0xa5, 0x0f, 0xe2, 0x06, 0xc9, 0xbc,
	0x22, 0x85, 0x64, 0x70, 0x39, 0xeb, 0x0c, 0x19, 0x30, 0xed, 0x24, 0xa2, 0x4b, 0xbf, 0x2a, 0xf2,
	0x2a, 0x45, 0x43, 0x3b, 0x30, 0xef, 0x59, 0x94, 0x55, 0xf1, 0x11, 0x37, 0xd0, 0xb7, 0x85, 0x39,
	0xe2, 0xc0, 0xf9, 0x81, 0x07, 0xce, 0x72, 0xc9, 0xf7, 0xb8, 0xe0, 0x8e, 0x92, 0x5b, 0x67, 0xfc,
	0xcd, 0x4c, 0x28, 0x94, 0xae, 0x2e, 0xc8, 0xeb, 0x68, 0xb2, 0x4b, 0x37, 0x2d, 0x98, 0x4d, 0x22,
	0x5e, 0x0d, 0x31, 0x8d, 0x3c, 0xa6, 0xeb, 0xe2, 0xdc, 0xfb, 0x43, 0x3e, 0x0d, 0x5c, 0xd2, 0x14,
	0x82, 0xe6, 0x4c, 0xbd, 0x9d, 0xf4, 0x74, 0x3c, 0x9f, 0x2d, 0xe4, 0x8c, 0xb7, 0x60, 0x31, 0x55,
	0x01, 0x53, 0xaf, 0x4a, 0xef, 0xe6, 0xc8, 0xf8, 0x63, 0xab, 0xde, 0x4a, 0xc1, 0x6f, 0x50, 0x27,
	0xf5, 0xfb, 0x31, 0x98, 0x4e, 0xda, 0xce, 0x83, 0x3f, 0xd1, 0x37, 0x89, 0xdf, 0x7d, 0x8a, 0xc5,
	0x23, 0xc8, 0x51, 0x11, 0xd3, 0xc2, 0x80, 0x51, 0xf3, 0x40, 0xc9, 0xf2, 0x57, 0x41, 0xdd, 0x70,
	0x80, 0x43, 0x1b, 0x13, 0x66, 0xd5, 0x70, 0xfc, 0x2a, 0xc8, 0x8d, 0xe7, 0x4d, 0x7a, 0x9f, 0x66,
	0x21, 0x7b, 0x5e, 0xcd, 0x02, 0xba, 0x0c, 0x9a, 0xeb, 0xa8, 0x9a, 0xa4, 0xb9, 0x4e, 0x7b, 0xb1,
	0x9a, 0x18, 0x58, 0xac, 0xf2, 0x9d, 0xc5, 0x4a, 0x87, 0x89, 0xc0, 0xb2, 0x0f, 0xb8, 0x6b, 0xaa,
	0x30, 0xa9, 0x25, 0x5a, 0x03, 0x94, 0xcc, 0x35, 0xe9, 0x8e, 0xa8, 0x4d, 0x59, 0x73, 0x26, 0xb9,
	0x23, 0xac, 0x33, 0x3e, 0xcf, 0xc0, 0x74, 0xca, 0xda, 0x39, 0xc8, 0x8a, 0xb7, 0x53, 0xbd, 0xe5,
	0x72, 0xc1, 0x7d, 0xf0, 0x0f, 0xd4, 0x93, 0xad, 0xf9, 0x07, 0xfc, 0xfc, 0x17, 0x56, 0x48, 0xe2,
	0x60, 0xc9, 0x9a, 0xf1, 0x12, 0x15, 0x21, 0x6f, 0x87, 0x2e, 0x73, 0x6d, 0xcb, 0x53, 0xa8, 0x37,
	0xd7, 0x5c, 0x2a, 0x22, 0x07, 0xc4, 0x7f, 0x41, 0x04, 0xbc, 0x59, 0x33, 0x5e, 0x76, 0x54, 0x8d,
	0x9c, 0xd8, 0x4e, 0xd1, 0x0c, 0x02, 0xd3, 0xcf, 0xa5, 0x93, 0x5b, 0x8e, 0x6a, 0xaa, 0xfd, 0xd0,
	0xad, 0xb9, 0x44, 0x85, 0x97, 0x5a, 0x35, 0x83, 0x4e, 0x4b, 0x07, 0x9d, 0xfa, 0xb6, 0x52, 0x2f,
	0x51, 0xbc, 0x4c, 0x86, 0xe3, 0x78, 0x2a, 0x1c, 0x0d, 0x07, 0x2e, 0xa5, 0x7b, 0x98, 0x5d, 0xb8,
	0xdc, 0xd1, 0xef, 0x8c, 0x0d, 0x13, 0x24, 0x49, 0x35, 0xe6, 0xa5, 0x64, 0x17, 0x4f, 0x0d, 0x07,
	0x66, 0x3a, 0xaa, 0x0a, 0x77, 0x8d, 0x32, 0xc7, 0x8f, 0x58, 0xec, 0x9a, 0x5c, 0x29, 0x3a, 0x0e,
	0x43, 0xe5, 0x9c, 0x5a, 0xa1, 0x9b, 0x30, 0x85, 0x3f, 0x71, 0x59, 0x35, 0x91, 0x3e, 0x59, 0x13,
	0x38, 0x49, 0x26, 0xc7, 0xea, 0x93, 0xf8, 0x96, 0xe5, 0x1a, 0xe5, 0x40, 0xdb, 0x79, 0x56, 0xf8,
	0x16, 0x9a, 0x82, 0x89, 0x8f, 0xd7, 0xcd, 0xed, 0xad, 0xed, 0xcd, 0x42, 0x06, 0x4d, 0x43, 0x7e,
	0xc3, 0xdc, 0xfa, 0x60, 0x6b, 0x63, 0xfd, 0xfd, 0x82, 0xc6, 0xb7, 0x3e, 0xdc, 0x7e, 0xb6, 0xbd,
	0xf3, 0xf1, 0x76, 0x61, 0x0c, 0xe5, 0x61, 0x7c, 0x7b, 0x67, 0xfb, 0xbd, 0xc2, 0xcc, 0x83, 0xd3,
	0x25, 0x98, 0x5d, 0x4f, 0x38, 0x17, 0x37, 0x0a, 0x3f, 0xd7, 0xa0, 0xb0, 0x89, 0x59, 0x1a, 0xb1,
	0x7b, 0xa3, 0x20, 0xc3, 0x2b, 0x5d, 0x71, 0x6d, 0x24, 0x09, 0xe3, 0x34, 0x73, 0xba, 0x5e, 0x68,
	0xbf, 0x96, 0x4f, 0xcf, 0xf4, 0xf9, 0x76, 0x1a, 0x1a, 0xf7, 0x5c, 0xca, 0x4e, 0xce, 0xf4, 0x77,
	0xa0, 0x98, 0xd4, 0x57, 0x49, 0xdd, 0x06, 0xba, 0xd9, 0x7b, 0xaf, 0xc2, 0x15, 0x7c, 0xfa, 0xe5,
	0x3f, 0x7f, 0xa9, 0xdd, 0x40, 0x8b, 0xe9, 0x99, 0x83, 0xe2, 0x5b, 0x53, 0x47, 0x9d, 0x69, 0xb0,
	0xd8, 0x0e, 0x45, 0x2a, 0xc7, 0xbe, 0x3f, 0x92, 0x93, 0x6d, 0x2f, 0x47, 0x71, 0xa4, 0x9a, 0x64,
	0x7c, 0xde, 0x03, 0xa1, 0x6e, 0xb4, 0x5c, 0x13, 0xa5, 0xc5, 0x7e, 0x28, 0x9d, 0x9c, 0xe9, 0xaf,
	0x0e, 0x87, 0xd4, 0x5d, 0xb4, 0xda, 0x15, 0x29, 0x75, 0x64, 0xba, 0xe4, 0xa2, 0xff, 0x64, 0x60,
	0xaa, 0x85, 0x1b, 0x45, 0x77, 0x86, 0x84, 0x49, 0xa0, 0x32, 0x02, 0x33, 0x35, 0x7e, 0x75, 0x91,
	0xa0, 0xe8, 0x68, 0xbe, 0x2b, 0x28, 0x14, 0xfd, 0x41, 0x83, 0x6b, 0x09, 0x00, 0xd2, 0x9f, 0x81,
	0xe8, 0xbb, 0xc3, 0x7a, 0xd8, 0x31, 0xc5, 0x28, 0xbe, 0xb4, 0x28, 0x35, 0x7e, 0x73, 0x91, 0x50,
	0xad, 0xa0, 0xdb, 0xdd, 0xa1, 0x5a, 0x73, 0x94, 0xa1, 0x6b, 0xf2, 0x43, 0x18, 0x7d, 0xa6, 0xc1,
	0x95, 0x04, 0x74, 0x0f, 0x8f, 0x77, 0x37, 0x51, 0x79, 0x58, 0xaf, 0xd5, 0xe8, 0xa5, 0x38, 0xa2,
	0x00, 0x35, 0x7e, 0x7b, 0x91, 0xe0, 0xdc, 0x47, 0xe5, 0x7e, 0x65, 0xa8, 0xfc, 0x93, 0xf6, 0x31,
	0xd2, 0x4f, 0xd1, 0x49, 0xaa, 0x48, 0xcb, 0xef, 0xf9, 0xa1, 0x8b, 0x74, 0x73, 0x26, 0x50, 0x1c,
	0x55, 0x82, 0x1a, 0xbf, 0xb8, 0x48, 0xa0, 0xae, 0xa2, 0xd9, 0x36, 0xa0, 0x84, 0xdf, 0x9f, 0x69,
	0xb0, 0xd0, 0xe3, 0x4b, 0x1c, 0xbd, 0x3d, 0xc8, 0xc3, 0x1e, 0x53, 0x97, 0xd1, 0xca, 0xd0, 0xaf,
	0x2f, 0x12, 0x95, 0x5b, 0x68, 0x39, 0x8d, 0x4a, 0xaa, 0x6d, 0x6c, 0xd6, 0xa4, 0x2f, 0x34, 0x28,
	0xf6, 0x1e, 0x1a, 0xfc, 0x8f, 0x80, 0xfa, 0xdd, 0x08, 0x40, 0xe5, 0x51, 0xce, 0x11, 0xf6, 0x0e,
	0x01, 0xd5, 0x32, 0x7a, 0xb5, 0x0f, 0x54, 0x52, 0x8d, 0x00, 0xab, 0x6c, 0xb4, 0x3d, 0x64, 0x72,
	0xaf, 0xda, 0x15, 0xb3, 0x4a, 0x66, 0x15, 0xfd, 0x3b, 0x03, 0xb0, 0x89, 0xd9, 0x47, 0xaa, 0xcb,
	0x7c, 0xb3, 0xf7, 0xb7, 0x54, 0x3c, 0xf3, 0x57, 0xac, 0x5b, 0x64, 0xdf, 0x37, 0xf1, 0x61, 0x84,
	0x29, 0xeb, 0xda, 0x0c, 0xf5, 0x96, 0x32, 0x7e, 0x96, 0x39, 0x5d, 0xcf, 0x43, 0xae, 0xee, 0x3a,
	0x0e, 0x26, 0xa2, 0x09, 0x8a, 0x3f, 0x48, 0xaa, 0x2e, 0xd9, 0xf7, 0x2b, 0x4a, 0x46, 0x06, 0x53,
	0x88, 0x2d, 0xe7, 0xe4, 0x4c, 0xd7, 0x61, 0x9e, 0x1e, 0x53, 0x86, 0x1b, 0xb1, 0xef, 0x31, 0xd7,
	0xc9, 0x99, 0xfe, 0x0a, 0xba, 0x96, 0xde, 0x53, 0x87, 0x55, 0x6a, 0x58, 0x86, 0xd0, 0x02, 0xba,
	0x9a, 0x46, 0x25, 0x6e, 0xaa, 0xff, 0xa5, 0xc1, 0xf5, 0xbe, 0x43, 0x2e, 0xf4, 0xee, 0xa0, 0xeb,
	0x1f, 0x34, 0x23, 0x2b, 0x56, 0x06, 0x69, 0xe8, 0x3d, 0xa1, 0x33, 0xfe, 0x92, 0x39, 0x5d, 0x9f,
	0x82, 0xc9, 0x10, 0x33, 0x4c, 0x98, 0x84, 0xe4, 0x1e, 0x94, 0xd2, 0xa1, 0x54, 0xa1, 0x76, 0x1d,
	0x3b, 0x91, 0x87, 0xc3, 0x4a, 0xd7, 0x5b, 0x4e, 0xc1, 0x78, 0x0d, 0x16, 0x9a, 0xca, 0x3a, 0xa2,
	0xec, 0x3a, 0x7a, 0xa5, 0xc7, 0x66, 0x13, 0xc9, 0xef, 0xa0, 0xb7, 0xca, 0x4d, 0x9e, 0xb6, 0x2e,
	0xa9, 0x7b, 0x62, 0x96, 0x6d, 0x09, 0xe4, 0x57, 0x1a, 0x2c, 0x0d, 0x9a, 0x15, 0xa2, 0xaf, 0x81,
	0x55, 0x71, 0x63, 0x90, 0xec, 0x30, 0x93, 0xca, 0x2f, 0xcf, 0x07, 0xf0, 0x29, 0x34, 0x29, 0xdd,
	0x8e, 0x42, 0x3c, 0x08, 0xf5, 0x25, 0x74, 0xa3, 0x17, 0xea, 0x72, 0xc2, 0x25, 0x80, 0xff, 0x9e,
	0xf1, 0x92, 0xc0, 0xf3, 0x24, 0xff, 0x4a, 0x83, 0xe5, 0x21, 0x06, 0xb0, 0xe8, 0xf1, 0x30, 0xc1,
	0x3e, 0x78, 0x8a, 0x5b, 0xbc, 0x3f, 0xec, 0x35, 0xb6, 0x22, 0xfd, 0x6f, 0x9d, 0xc0, 0xbf, 0x0d,
	0xdf, 0xee, 0x0d, 0x7c, 0x9f, 0xb2, 0x76, 0xae, 0x01, 0xff, 0x03, 0xf4, 0x4e, 0x1f, 0xdc, 0xfb,
	0x58, 0x11, 0xc7, 0xfd, 0xc9, 0x18, 0xdc, 0x1e, 0x6e, 0xa4, 0x8d, 0x46, 0x87, 0xad, 0xb8, 0x35,
	0x64, 0xd0, 0x0f, 0x31, 0x4d, 0xff, 0xfb, 0xb9, 0xde, 0xc0, 0xf9, 0x67, 0xc0, 0x43, 0xe3, 0xeb,
	0xdd, 0x44, 0x25, 0xb3, 0xfa, 0xf0, 0xcd, 0x1f, 0x3d, 0xa8, 0xb9, 0xac, 0x1e, 0xed, 0xf1, 0xe7,
	0xa9, 0xcc, 0xa1, 0x6b, 0xfe, 0xbb, 0xb9, 0xdc, 0xf3, 0x5f, 0xf5, 0x7b, 0x39, 0x31, 0xde, 0x7d,
	0xe3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x70, 0x67, 0x93, 0x05, 0xce, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApplicationsServiceClient is the client API for ApplicationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationsServiceClient interface {
	//
	//List Service Groups
	//
	//Lists service groups with name, health information, and application, environment, package, release metadata.
	//Accepts pagination, sorting, search and status filters.
	//
	//Example:
	//```
	//applications/service-groups?sorting.field=percent_ok&sorting.order=ASC&pagination.page=1&pagination.size=25
	//```
	GetServiceGroups(ctx context.Context, in *ServiceGroupsReq, opts ...grpc.CallOption) (*ServiceGroups, error)
	//
	//List Service Groups Health Counts
	//
	//Lists the total service group health reports by critical, warning, ok and unknown responses. Supports search and status filtering.
	GetServiceGroupsHealthCounts(ctx context.Context, in *ServiceGroupsHealthCountsReq, opts ...grpc.CallOption) (*HealthCounts, error)
	//
	//List Services
	//
	//Lists service health status and service metadata for services.
	//Supports pagination and search and status filtering. For a list of services for a specific service-group see "List Services for a Service Group" (GetServicesBySG endpoint).
	GetServices(ctx context.Context, in *ServicesReq, opts ...grpc.CallOption) (*ServicesRes, error)
	//
	//List Filter Values
	//
	//Lists all of the possible filter values for a given valid field.
	//Limit the returned values by providing at one or more characters in the `query_fragment` parameter.
	//Supports wildcard (* and ?)
	//
	GetServicesDistinctValues(ctx context.Context, in *ServicesDistinctValuesReq, opts ...grpc.CallOption) (*ServicesDistinctValuesRes, error)
	//
	//List Services for a Service Group
	//
	//List the services for a service group with health status and service metadata.
	//Uses the service group ID generated by Chef Automate instead of the Chef Habitat- provided ID.
	//Supports pagination and filtering.
	//
	//Example:
	//```
	//applications/service-groups/1dfff679054c60a10c51d059b6dbf81a765c46f8d3e8ce0752b22ffe8d4d9716?pagination.page=1&pagination.size=25
	//```
	GetServicesBySG(ctx context.Context, in *ServicesBySGReq, opts ...grpc.CallOption) (*ServicesBySGRes, error)
	//
	//Show Summary
	//
	//Shows a summary of service-groups, services, deployments and supervisors.
	//Used for telemetry.
	//Does not support filtering.
	GetServicesStats(ctx context.Context, in *ServicesStatsReq, opts ...grpc.CallOption) (*ServicesStatsRes, error)
	//
	//Mark Services as Disconnected
	//
	//Marks services as disconnected based on the `threshold_seconds` setting.
	//This function is not used by the API or CLI and is here for testing purposes.
	//The functionality is currently covered by a periodically running job that can be configured
	//by utilizing the `UpdateDisconnectedServicesConfig` endpoint.
	GetDisconnectedServices(ctx context.Context, in *DisconnectedServicesReq, opts ...grpc.CallOption) (*ServicesRes, error)
	//
	//Remove Disconnected Services
	//
	//Removes services marked as disconnected based on the `threshold_seconds` setting.
	//This function is not used by the API or CLI and is here for testing purposes.
	//The functionality is currently covered by a periodically running job that can be configured using `UpdateDeleteDisconnectedServicesConfig`.
	DeleteDisconnectedServices(ctx context.Context, in *DisconnectedServicesReq, opts ...grpc.CallOption) (*ServicesRes, error)
	//
	//Show Version
	//
	//Displays the current version of the applications-service
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	//
	//Show 'Disconnected Services' configuration
	//
	//Returns the configuration for the task that marks services as disconnected. The `threshold` setting defines the period of time between the last report from a node and the moment when Chef Automate marks it as disconnected. `Threshold` is a string that follows Elasticsearch's date math expressions.
	//This task is always enabled, cannot be disabled. Because this task runs continuously, the response does not return information about its status.
	GetDisconnectedServicesConfig(ctx context.Context, in *GetDisconnectedServicesConfigReq, opts ...grpc.CallOption) (*PeriodicMandatoryJobConfig, error)
	//
	//Change 'Disconnected Services' Configuration
	//
	//Changes the configuration for the task that marks services as disconnected after
	//'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
	//This job cannot be disabled, and therefore no information about running is accepted.
	//
	//Example:
	//```
	///retention/service_groups/disconnected_services/config
	//'{
	//"threshold": "15m"
	//}'
	//```
	UpdateDisconnectedServicesConfig(ctx context.Context, in *PeriodicMandatoryJobConfig, opts ...grpc.CallOption) (*UpdateDisconnectedServicesConfigRes, error)
	//
	//Show 'Remove Disconnected Services' Configuration
	//
	//Displays configuration for the task that deletes services marked as disconnected
	//after 'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
	//This job is disabled if running is set to false.
	GetDeleteDisconnectedServicesConfig(ctx context.Context, in *GetDeleteDisconnectedServicesConfigReq, opts ...grpc.CallOption) (*PeriodicJobConfig, error)
	//
	//Change 'Remove Disconnected Services' Configuration
	//
	//Updates configuration information for the task that deletes services marked as disconnected
	//after 'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
	//This job can be disabled by setting `"running": false`.
	//
	//Example:
	//```
	//service_groups/delete_disconnected_services/config" -d
	//'{
	//"threshold": "1d",
	//"running":true
	//}'
	//```
	UpdateDeleteDisconnectedServicesConfig(ctx context.Context, in *PeriodicJobConfig, opts ...grpc.CallOption) (*UpdateDeleteDisconnectedServicesConfigRes, error)
}

type applicationsServiceClient struct {
	cc *grpc.ClientConn
}

func NewApplicationsServiceClient(cc *grpc.ClientConn) ApplicationsServiceClient {
	return &applicationsServiceClient{cc}
}

func (c *applicationsServiceClient) GetServiceGroups(ctx context.Context, in *ServiceGroupsReq, opts ...grpc.CallOption) (*ServiceGroups, error) {
	out := new(ServiceGroups)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServiceGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServiceGroupsHealthCounts(ctx context.Context, in *ServiceGroupsHealthCountsReq, opts ...grpc.CallOption) (*HealthCounts, error) {
	out := new(HealthCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServiceGroupsHealthCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServices(ctx context.Context, in *ServicesReq, opts ...grpc.CallOption) (*ServicesRes, error) {
	out := new(ServicesRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServicesDistinctValues(ctx context.Context, in *ServicesDistinctValuesReq, opts ...grpc.CallOption) (*ServicesDistinctValuesRes, error) {
	out := new(ServicesDistinctValuesRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServicesDistinctValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServicesBySG(ctx context.Context, in *ServicesBySGReq, opts ...grpc.CallOption) (*ServicesBySGRes, error) {
	out := new(ServicesBySGRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServicesBySG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServicesStats(ctx context.Context, in *ServicesStatsReq, opts ...grpc.CallOption) (*ServicesStatsRes, error) {
	out := new(ServicesStatsRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServicesStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetDisconnectedServices(ctx context.Context, in *DisconnectedServicesReq, opts ...grpc.CallOption) (*ServicesRes, error) {
	out := new(ServicesRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetDisconnectedServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) DeleteDisconnectedServices(ctx context.Context, in *DisconnectedServicesReq, opts ...grpc.CallOption) (*ServicesRes, error) {
	out := new(ServicesRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/DeleteDisconnectedServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetDisconnectedServicesConfig(ctx context.Context, in *GetDisconnectedServicesConfigReq, opts ...grpc.CallOption) (*PeriodicMandatoryJobConfig, error) {
	out := new(PeriodicMandatoryJobConfig)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetDisconnectedServicesConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) UpdateDisconnectedServicesConfig(ctx context.Context, in *PeriodicMandatoryJobConfig, opts ...grpc.CallOption) (*UpdateDisconnectedServicesConfigRes, error) {
	out := new(UpdateDisconnectedServicesConfigRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/UpdateDisconnectedServicesConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetDeleteDisconnectedServicesConfig(ctx context.Context, in *GetDeleteDisconnectedServicesConfigReq, opts ...grpc.CallOption) (*PeriodicJobConfig, error) {
	out := new(PeriodicJobConfig)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetDeleteDisconnectedServicesConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) UpdateDeleteDisconnectedServicesConfig(ctx context.Context, in *PeriodicJobConfig, opts ...grpc.CallOption) (*UpdateDeleteDisconnectedServicesConfigRes, error) {
	out := new(UpdateDeleteDisconnectedServicesConfigRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/UpdateDeleteDisconnectedServicesConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServiceServer is the server API for ApplicationsService service.
type ApplicationsServiceServer interface {
	//
	//List Service Groups
	//
	//Lists service groups with name, health information, and application, environment, package, release metadata.
	//Accepts pagination, sorting, search and status filters.
	//
	//Example:
	//```
	//applications/service-groups?sorting.field=percent_ok&sorting.order=ASC&pagination.page=1&pagination.size=25
	//```
	GetServiceGroups(context.Context, *ServiceGroupsReq) (*ServiceGroups, error)
	//
	//List Service Groups Health Counts
	//
	//Lists the total service group health reports by critical, warning, ok and unknown responses. Supports search and status filtering.
	GetServiceGroupsHealthCounts(context.Context, *ServiceGroupsHealthCountsReq) (*HealthCounts, error)
	//
	//List Services
	//
	//Lists service health status and service metadata for services.
	//Supports pagination and search and status filtering. For a list of services for a specific service-group see "List Services for a Service Group" (GetServicesBySG endpoint).
	GetServices(context.Context, *ServicesReq) (*ServicesRes, error)
	//
	//List Filter Values
	//
	//Lists all of the possible filter values for a given valid field.
	//Limit the returned values by providing at one or more characters in the `query_fragment` parameter.
	//Supports wildcard (* and ?)
	//
	GetServicesDistinctValues(context.Context, *ServicesDistinctValuesReq) (*ServicesDistinctValuesRes, error)
	//
	//List Services for a Service Group
	//
	//List the services for a service group with health status and service metadata.
	//Uses the service group ID generated by Chef Automate instead of the Chef Habitat- provided ID.
	//Supports pagination and filtering.
	//
	//Example:
	//```
	//applications/service-groups/1dfff679054c60a10c51d059b6dbf81a765c46f8d3e8ce0752b22ffe8d4d9716?pagination.page=1&pagination.size=25
	//```
	GetServicesBySG(context.Context, *ServicesBySGReq) (*ServicesBySGRes, error)
	//
	//Show Summary
	//
	//Shows a summary of service-groups, services, deployments and supervisors.
	//Used for telemetry.
	//Does not support filtering.
	GetServicesStats(context.Context, *ServicesStatsReq) (*ServicesStatsRes, error)
	//
	//Mark Services as Disconnected
	//
	//Marks services as disconnected based on the `threshold_seconds` setting.
	//This function is not used by the API or CLI and is here for testing purposes.
	//The functionality is currently covered by a periodically running job that can be configured
	//by utilizing the `UpdateDisconnectedServicesConfig` endpoint.
	GetDisconnectedServices(context.Context, *DisconnectedServicesReq) (*ServicesRes, error)
	//
	//Remove Disconnected Services
	//
	//Removes services marked as disconnected based on the `threshold_seconds` setting.
	//This function is not used by the API or CLI and is here for testing purposes.
	//The functionality is currently covered by a periodically running job that can be configured using `UpdateDeleteDisconnectedServicesConfig`.
	DeleteDisconnectedServices(context.Context, *DisconnectedServicesReq) (*ServicesRes, error)
	//
	//Show Version
	//
	//Displays the current version of the applications-service
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	//
	//Show 'Disconnected Services' configuration
	//
	//Returns the configuration for the task that marks services as disconnected. The `threshold` setting defines the period of time between the last report from a node and the moment when Chef Automate marks it as disconnected. `Threshold` is a string that follows Elasticsearch's date math expressions.
	//This task is always enabled, cannot be disabled. Because this task runs continuously, the response does not return information about its status.
	GetDisconnectedServicesConfig(context.Context, *GetDisconnectedServicesConfigReq) (*PeriodicMandatoryJobConfig, error)
	//
	//Change 'Disconnected Services' Configuration
	//
	//Changes the configuration for the task that marks services as disconnected after
	//'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
	//This job cannot be disabled, and therefore no information about running is accepted.
	//
	//Example:
	//```
	///retention/service_groups/disconnected_services/config
	//'{
	//"threshold": "15m"
	//}'
	//```
	UpdateDisconnectedServicesConfig(context.Context, *PeriodicMandatoryJobConfig) (*UpdateDisconnectedServicesConfigRes, error)
	//
	//Show 'Remove Disconnected Services' Configuration
	//
	//Displays configuration for the task that deletes services marked as disconnected
	//after 'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
	//This job is disabled if running is set to false.
	GetDeleteDisconnectedServicesConfig(context.Context, *GetDeleteDisconnectedServicesConfigReq) (*PeriodicJobConfig, error)
	//
	//Change 'Remove Disconnected Services' Configuration
	//
	//Updates configuration information for the task that deletes services marked as disconnected
	//after 'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
	//This job can be disabled by setting `"running": false`.
	//
	//Example:
	//```
	//service_groups/delete_disconnected_services/config" -d
	//'{
	//"threshold": "1d",
	//"running":true
	//}'
	//```
	UpdateDeleteDisconnectedServicesConfig(context.Context, *PeriodicJobConfig) (*UpdateDeleteDisconnectedServicesConfigRes, error)
}

// UnimplementedApplicationsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApplicationsServiceServer struct {
}

func (*UnimplementedApplicationsServiceServer) GetServiceGroups(ctx context.Context, req *ServiceGroupsReq) (*ServiceGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceGroups not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServiceGroupsHealthCounts(ctx context.Context, req *ServiceGroupsHealthCountsReq) (*HealthCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceGroupsHealthCounts not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServices(ctx context.Context, req *ServicesReq) (*ServicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServicesDistinctValues(ctx context.Context, req *ServicesDistinctValuesReq) (*ServicesDistinctValuesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesDistinctValues not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServicesBySG(ctx context.Context, req *ServicesBySGReq) (*ServicesBySGRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesBySG not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServicesStats(ctx context.Context, req *ServicesStatsReq) (*ServicesStatsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesStats not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetDisconnectedServices(ctx context.Context, req *DisconnectedServicesReq) (*ServicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisconnectedServices not implemented")
}
func (*UnimplementedApplicationsServiceServer) DeleteDisconnectedServices(ctx context.Context, req *DisconnectedServicesReq) (*ServicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDisconnectedServices not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetVersion(ctx context.Context, req *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetDisconnectedServicesConfig(ctx context.Context, req *GetDisconnectedServicesConfigReq) (*PeriodicMandatoryJobConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisconnectedServicesConfig not implemented")
}
func (*UnimplementedApplicationsServiceServer) UpdateDisconnectedServicesConfig(ctx context.Context, req *PeriodicMandatoryJobConfig) (*UpdateDisconnectedServicesConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisconnectedServicesConfig not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetDeleteDisconnectedServicesConfig(ctx context.Context, req *GetDeleteDisconnectedServicesConfigReq) (*PeriodicJobConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeleteDisconnectedServicesConfig not implemented")
}
func (*UnimplementedApplicationsServiceServer) UpdateDeleteDisconnectedServicesConfig(ctx context.Context, req *PeriodicJobConfig) (*UpdateDeleteDisconnectedServicesConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeleteDisconnectedServicesConfig not implemented")
}

func RegisterApplicationsServiceServer(s *grpc.Server, srv ApplicationsServiceServer) {
	s.RegisterService(&_ApplicationsService_serviceDesc, srv)
}

func _ApplicationsService_GetServiceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServiceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServiceGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServiceGroups(ctx, req.(*ServiceGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServiceGroupsHealthCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGroupsHealthCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServiceGroupsHealthCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServiceGroupsHealthCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServiceGroupsHealthCounts(ctx, req.(*ServiceGroupsHealthCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServices(ctx, req.(*ServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServicesDistinctValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesDistinctValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServicesDistinctValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServicesDistinctValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServicesDistinctValues(ctx, req.(*ServicesDistinctValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServicesBySG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesBySGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServicesBySG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServicesBySG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServicesBySG(ctx, req.(*ServicesBySGReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServicesStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServicesStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServicesStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServicesStats(ctx, req.(*ServicesStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetDisconnectedServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectedServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetDisconnectedServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetDisconnectedServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetDisconnectedServices(ctx, req.(*DisconnectedServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_DeleteDisconnectedServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectedServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).DeleteDisconnectedServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/DeleteDisconnectedServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).DeleteDisconnectedServices(ctx, req.(*DisconnectedServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetDisconnectedServicesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDisconnectedServicesConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetDisconnectedServicesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetDisconnectedServicesConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetDisconnectedServicesConfig(ctx, req.(*GetDisconnectedServicesConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_UpdateDisconnectedServicesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicMandatoryJobConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).UpdateDisconnectedServicesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/UpdateDisconnectedServicesConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).UpdateDisconnectedServicesConfig(ctx, req.(*PeriodicMandatoryJobConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetDeleteDisconnectedServicesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeleteDisconnectedServicesConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetDeleteDisconnectedServicesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetDeleteDisconnectedServicesConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetDeleteDisconnectedServicesConfig(ctx, req.(*GetDeleteDisconnectedServicesConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_UpdateDeleteDisconnectedServicesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicJobConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).UpdateDeleteDisconnectedServicesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/UpdateDeleteDisconnectedServicesConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).UpdateDeleteDisconnectedServicesConfig(ctx, req.(*PeriodicJobConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.applications.ApplicationsService",
	HandlerType: (*ApplicationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceGroups",
			Handler:    _ApplicationsService_GetServiceGroups_Handler,
		},
		{
			MethodName: "GetServiceGroupsHealthCounts",
			Handler:    _ApplicationsService_GetServiceGroupsHealthCounts_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _ApplicationsService_GetServices_Handler,
		},
		{
			MethodName: "GetServicesDistinctValues",
			Handler:    _ApplicationsService_GetServicesDistinctValues_Handler,
		},
		{
			MethodName: "GetServicesBySG",
			Handler:    _ApplicationsService_GetServicesBySG_Handler,
		},
		{
			MethodName: "GetServicesStats",
			Handler:    _ApplicationsService_GetServicesStats_Handler,
		},
		{
			MethodName: "GetDisconnectedServices",
			Handler:    _ApplicationsService_GetDisconnectedServices_Handler,
		},
		{
			MethodName: "DeleteDisconnectedServices",
			Handler:    _ApplicationsService_DeleteDisconnectedServices_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ApplicationsService_GetVersion_Handler,
		},
		{
			MethodName: "GetDisconnectedServicesConfig",
			Handler:    _ApplicationsService_GetDisconnectedServicesConfig_Handler,
		},
		{
			MethodName: "UpdateDisconnectedServicesConfig",
			Handler:    _ApplicationsService_UpdateDisconnectedServicesConfig_Handler,
		},
		{
			MethodName: "GetDeleteDisconnectedServicesConfig",
			Handler:    _ApplicationsService_GetDeleteDisconnectedServicesConfig_Handler,
		},
		{
			MethodName: "UpdateDeleteDisconnectedServicesConfig",
			Handler:    _ApplicationsService_UpdateDeleteDisconnectedServicesConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/applications/applications.proto",
}
