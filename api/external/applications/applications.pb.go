// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/applications/applications.proto

package applications // import "github.com/chef/automate/api/external/applications"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import query "github.com/chef/automate/api/external/common/query"
import version "github.com/chef/automate/api/external/common/version"
import _ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
import _ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The ServiceStatus enum describes the status of the service
// @afiune have we defined these states somewhere?
type ServiceStatus int32

const (
	ServiceStatus_RUNNING      ServiceStatus = 0
	ServiceStatus_INITIALIZING ServiceStatus = 1
	ServiceStatus_DEPLOYING    ServiceStatus = 2
	ServiceStatus_DOWN         ServiceStatus = 3
)

var ServiceStatus_name = map[int32]string{
	0: "RUNNING",
	1: "INITIALIZING",
	2: "DEPLOYING",
	3: "DOWN",
}
var ServiceStatus_value = map[string]int32{
	"RUNNING":      0,
	"INITIALIZING": 1,
	"DEPLOYING":    2,
	"DOWN":         3,
}

func (x ServiceStatus) String() string {
	return proto.EnumName(ServiceStatus_name, int32(x))
}
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{0}
}

// The HealthStatus enum matches the habitat implementation for health-check status:
// => https://www.habitat.sh/docs/reference/#health-check
type HealthStatus int32

const (
	HealthStatus_OK       HealthStatus = 0
	HealthStatus_WARNING  HealthStatus = 1
	HealthStatus_CRITICAL HealthStatus = 2
	HealthStatus_UNKNOWN  HealthStatus = 3
)

var HealthStatus_name = map[int32]string{
	0: "OK",
	1: "WARNING",
	2: "CRITICAL",
	3: "UNKNOWN",
}
var HealthStatus_value = map[string]int32{
	"OK":       0,
	"WARNING":  1,
	"CRITICAL": 2,
	"UNKNOWN":  3,
}

func (x HealthStatus) String() string {
	return proto.EnumName(HealthStatus_name, int32(x))
}
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{1}
}

type ServicesReq struct {
	Filter               []string          `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	Pagination           *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sorting              *query.Sorting    `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServicesReq) Reset()         { *m = ServicesReq{} }
func (m *ServicesReq) String() string { return proto.CompactTextString(m) }
func (*ServicesReq) ProtoMessage()    {}
func (*ServicesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{0}
}
func (m *ServicesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesReq.Unmarshal(m, b)
}
func (m *ServicesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesReq.Marshal(b, m, deterministic)
}
func (dst *ServicesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesReq.Merge(dst, src)
}
func (m *ServicesReq) XXX_Size() int {
	return xxx_messageInfo_ServicesReq.Size(m)
}
func (m *ServicesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesReq proto.InternalMessageInfo

func (m *ServicesReq) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ServicesReq) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ServicesReq) GetSorting() *query.Sorting {
	if m != nil {
		return m.Sorting
	}
	return nil
}

type ServicesBySGReq struct {
	ServiceGroupId       int32             `protobuf:"varint,1,opt,name=service_group_id,json=serviceGroupId,proto3" json:"service_group_id,omitempty"`
	Pagination           *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sorting              *query.Sorting    `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	Health               string            `protobuf:"bytes,4,opt,name=health,proto3" json:"health,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServicesBySGReq) Reset()         { *m = ServicesBySGReq{} }
func (m *ServicesBySGReq) String() string { return proto.CompactTextString(m) }
func (*ServicesBySGReq) ProtoMessage()    {}
func (*ServicesBySGReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{1}
}
func (m *ServicesBySGReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesBySGReq.Unmarshal(m, b)
}
func (m *ServicesBySGReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesBySGReq.Marshal(b, m, deterministic)
}
func (dst *ServicesBySGReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesBySGReq.Merge(dst, src)
}
func (m *ServicesBySGReq) XXX_Size() int {
	return xxx_messageInfo_ServicesBySGReq.Size(m)
}
func (m *ServicesBySGReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesBySGReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesBySGReq proto.InternalMessageInfo

func (m *ServicesBySGReq) GetServiceGroupId() int32 {
	if m != nil {
		return m.ServiceGroupId
	}
	return 0
}

func (m *ServicesBySGReq) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ServicesBySGReq) GetSorting() *query.Sorting {
	if m != nil {
		return m.Sorting
	}
	return nil
}

func (m *ServicesBySGReq) GetHealth() string {
	if m != nil {
		return m.Health
	}
	return ""
}

type ServicesBySGRes struct {
	Group                string        `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Services             []*Service    `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	ServicesHealthCounts *HealthCounts `protobuf:"bytes,3,opt,name=services_health_counts,json=servicesHealthCounts,proto3" json:"services_health_counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ServicesBySGRes) Reset()         { *m = ServicesBySGRes{} }
func (m *ServicesBySGRes) String() string { return proto.CompactTextString(m) }
func (*ServicesBySGRes) ProtoMessage()    {}
func (*ServicesBySGRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{2}
}
func (m *ServicesBySGRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesBySGRes.Unmarshal(m, b)
}
func (m *ServicesBySGRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesBySGRes.Marshal(b, m, deterministic)
}
func (dst *ServicesBySGRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesBySGRes.Merge(dst, src)
}
func (m *ServicesBySGRes) XXX_Size() int {
	return xxx_messageInfo_ServicesBySGRes.Size(m)
}
func (m *ServicesBySGRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesBySGRes.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesBySGRes proto.InternalMessageInfo

func (m *ServicesBySGRes) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *ServicesBySGRes) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *ServicesBySGRes) GetServicesHealthCounts() *HealthCounts {
	if m != nil {
		return m.ServicesHealthCounts
	}
	return nil
}

type ServicesRes struct {
	Services             []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ServicesRes) Reset()         { *m = ServicesRes{} }
func (m *ServicesRes) String() string { return proto.CompactTextString(m) }
func (*ServicesRes) ProtoMessage()    {}
func (*ServicesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{3}
}
func (m *ServicesRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServicesRes.Unmarshal(m, b)
}
func (m *ServicesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServicesRes.Marshal(b, m, deterministic)
}
func (dst *ServicesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicesRes.Merge(dst, src)
}
func (m *ServicesRes) XXX_Size() int {
	return xxx_messageInfo_ServicesRes.Size(m)
}
func (m *ServicesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicesRes.DiscardUnknown(m)
}

var xxx_messageInfo_ServicesRes proto.InternalMessageInfo

func (m *ServicesRes) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type Service struct {
	SupervisorId         string        `protobuf:"bytes,1,opt,name=supervisor_id,json=supervisorId,proto3" json:"supervisor_id,omitempty"`
	Release              string        `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	Group                string        `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	HealthCheck          HealthStatus  `protobuf:"varint,4,opt,name=health_check,json=healthCheck,proto3,enum=chef.automate.api.applications.HealthStatus" json:"health_check,omitempty"`
	Status               ServiceStatus `protobuf:"varint,5,opt,name=status,proto3,enum=chef.automate.api.applications.ServiceStatus" json:"status,omitempty"`
	Application          string        `protobuf:"bytes,6,opt,name=application,proto3" json:"application,omitempty"`
	Environment          string        `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	Fqdn                 string        `protobuf:"bytes,8,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Channel              string        `protobuf:"bytes,9,opt,name=channel,proto3" json:"channel,omitempty"`
	Site                 string        `protobuf:"bytes,17,opt,name=site,proto3" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{4}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (dst *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(dst, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetSupervisorId() string {
	if m != nil {
		return m.SupervisorId
	}
	return ""
}

func (m *Service) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *Service) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Service) GetHealthCheck() HealthStatus {
	if m != nil {
		return m.HealthCheck
	}
	return HealthStatus_OK
}

func (m *Service) GetStatus() ServiceStatus {
	if m != nil {
		return m.Status
	}
	return ServiceStatus_RUNNING
}

func (m *Service) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *Service) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Service) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *Service) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Service) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

type ServiceGroupsHealthCountsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceGroupsHealthCountsReq) Reset()         { *m = ServiceGroupsHealthCountsReq{} }
func (m *ServiceGroupsHealthCountsReq) String() string { return proto.CompactTextString(m) }
func (*ServiceGroupsHealthCountsReq) ProtoMessage()    {}
func (*ServiceGroupsHealthCountsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{5}
}
func (m *ServiceGroupsHealthCountsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceGroupsHealthCountsReq.Unmarshal(m, b)
}
func (m *ServiceGroupsHealthCountsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceGroupsHealthCountsReq.Marshal(b, m, deterministic)
}
func (dst *ServiceGroupsHealthCountsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroupsHealthCountsReq.Merge(dst, src)
}
func (m *ServiceGroupsHealthCountsReq) XXX_Size() int {
	return xxx_messageInfo_ServiceGroupsHealthCountsReq.Size(m)
}
func (m *ServiceGroupsHealthCountsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroupsHealthCountsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroupsHealthCountsReq proto.InternalMessageInfo

type ServiceGroupsReq struct {
	Filter               []string          `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	Pagination           *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sorting              *query.Sorting    `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServiceGroupsReq) Reset()         { *m = ServiceGroupsReq{} }
func (m *ServiceGroupsReq) String() string { return proto.CompactTextString(m) }
func (*ServiceGroupsReq) ProtoMessage()    {}
func (*ServiceGroupsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{6}
}
func (m *ServiceGroupsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceGroupsReq.Unmarshal(m, b)
}
func (m *ServiceGroupsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceGroupsReq.Marshal(b, m, deterministic)
}
func (dst *ServiceGroupsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroupsReq.Merge(dst, src)
}
func (m *ServiceGroupsReq) XXX_Size() int {
	return xxx_messageInfo_ServiceGroupsReq.Size(m)
}
func (m *ServiceGroupsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroupsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroupsReq proto.InternalMessageInfo

func (m *ServiceGroupsReq) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ServiceGroupsReq) GetPagination() *query.Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *ServiceGroupsReq) GetSorting() *query.Sorting {
	if m != nil {
		return m.Sorting
	}
	return nil
}

// A service group message is the representation of one single service group that
// is internally generated by aggregating all the services
type ServiceGroup struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This field is the full package identifier combined in a single string like:
	// Example: core/redis/0.1.0/8743278934278923
	Release string       `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	Status  HealthStatus `protobuf:"varint,3,opt,name=status,proto3,enum=chef.automate.api.applications.HealthStatus" json:"status,omitempty"`
	// The health_percentage can be a number between 0-100
	HealthPercentage     int32         `protobuf:"varint,4,opt,name=health_percentage,json=healthPercentage,proto3" json:"health_percentage,omitempty"`
	ServicesHealthCounts *HealthCounts `protobuf:"bytes,5,opt,name=services_health_counts,json=servicesHealthCounts,proto3" json:"services_health_counts,omitempty"`
	Id                   string        `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Application          string        `protobuf:"bytes,7,opt,name=application,proto3" json:"application,omitempty"`
	Environment          string        `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ServiceGroup) Reset()         { *m = ServiceGroup{} }
func (m *ServiceGroup) String() string { return proto.CompactTextString(m) }
func (*ServiceGroup) ProtoMessage()    {}
func (*ServiceGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{7}
}
func (m *ServiceGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceGroup.Unmarshal(m, b)
}
func (m *ServiceGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceGroup.Marshal(b, m, deterministic)
}
func (dst *ServiceGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroup.Merge(dst, src)
}
func (m *ServiceGroup) XXX_Size() int {
	return xxx_messageInfo_ServiceGroup.Size(m)
}
func (m *ServiceGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroup proto.InternalMessageInfo

func (m *ServiceGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceGroup) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *ServiceGroup) GetStatus() HealthStatus {
	if m != nil {
		return m.Status
	}
	return HealthStatus_OK
}

func (m *ServiceGroup) GetHealthPercentage() int32 {
	if m != nil {
		return m.HealthPercentage
	}
	return 0
}

func (m *ServiceGroup) GetServicesHealthCounts() *HealthCounts {
	if m != nil {
		return m.ServicesHealthCounts
	}
	return nil
}

func (m *ServiceGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ServiceGroup) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *ServiceGroup) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

type HealthCounts struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Ok                   int32    `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	Warning              int32    `protobuf:"varint,3,opt,name=warning,proto3" json:"warning,omitempty"`
	Critical             int32    `protobuf:"varint,4,opt,name=critical,proto3" json:"critical,omitempty"`
	Unknown              int32    `protobuf:"varint,5,opt,name=unknown,proto3" json:"unknown,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCounts) Reset()         { *m = HealthCounts{} }
func (m *HealthCounts) String() string { return proto.CompactTextString(m) }
func (*HealthCounts) ProtoMessage()    {}
func (*HealthCounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{8}
}
func (m *HealthCounts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCounts.Unmarshal(m, b)
}
func (m *HealthCounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCounts.Marshal(b, m, deterministic)
}
func (dst *HealthCounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCounts.Merge(dst, src)
}
func (m *HealthCounts) XXX_Size() int {
	return xxx_messageInfo_HealthCounts.Size(m)
}
func (m *HealthCounts) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCounts.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCounts proto.InternalMessageInfo

func (m *HealthCounts) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *HealthCounts) GetOk() int32 {
	if m != nil {
		return m.Ok
	}
	return 0
}

func (m *HealthCounts) GetWarning() int32 {
	if m != nil {
		return m.Warning
	}
	return 0
}

func (m *HealthCounts) GetCritical() int32 {
	if m != nil {
		return m.Critical
	}
	return 0
}

func (m *HealthCounts) GetUnknown() int32 {
	if m != nil {
		return m.Unknown
	}
	return 0
}

// The package identifier of a service is unique and is the combination
// of origin/name/version/release
//
// Example: core/redis/0.1.0/8743278934278923
type PackageIdent struct {
	Origin               string   `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Release              string   `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageIdent) Reset()         { *m = PackageIdent{} }
func (m *PackageIdent) String() string { return proto.CompactTextString(m) }
func (*PackageIdent) ProtoMessage()    {}
func (*PackageIdent) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{9}
}
func (m *PackageIdent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackageIdent.Unmarshal(m, b)
}
func (m *PackageIdent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackageIdent.Marshal(b, m, deterministic)
}
func (dst *PackageIdent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageIdent.Merge(dst, src)
}
func (m *PackageIdent) XXX_Size() int {
	return xxx_messageInfo_PackageIdent.Size(m)
}
func (m *PackageIdent) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageIdent.DiscardUnknown(m)
}

var xxx_messageInfo_PackageIdent proto.InternalMessageInfo

func (m *PackageIdent) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *PackageIdent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PackageIdent) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PackageIdent) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

type ServiceGroups struct {
	ServiceGroups        []*ServiceGroup `protobuf:"bytes,1,rep,name=service_groups,json=serviceGroups,proto3" json:"service_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ServiceGroups) Reset()         { *m = ServiceGroups{} }
func (m *ServiceGroups) String() string { return proto.CompactTextString(m) }
func (*ServiceGroups) ProtoMessage()    {}
func (*ServiceGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_applications_e70a6f38a053c99d, []int{10}
}
func (m *ServiceGroups) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceGroups.Unmarshal(m, b)
}
func (m *ServiceGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceGroups.Marshal(b, m, deterministic)
}
func (dst *ServiceGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroups.Merge(dst, src)
}
func (m *ServiceGroups) XXX_Size() int {
	return xxx_messageInfo_ServiceGroups.Size(m)
}
func (m *ServiceGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroups.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroups proto.InternalMessageInfo

func (m *ServiceGroups) GetServiceGroups() []*ServiceGroup {
	if m != nil {
		return m.ServiceGroups
	}
	return nil
}

func init() {
	proto.RegisterType((*ServicesReq)(nil), "chef.automate.api.applications.ServicesReq")
	proto.RegisterType((*ServicesBySGReq)(nil), "chef.automate.api.applications.ServicesBySGReq")
	proto.RegisterType((*ServicesBySGRes)(nil), "chef.automate.api.applications.ServicesBySGRes")
	proto.RegisterType((*ServicesRes)(nil), "chef.automate.api.applications.ServicesRes")
	proto.RegisterType((*Service)(nil), "chef.automate.api.applications.Service")
	proto.RegisterType((*ServiceGroupsHealthCountsReq)(nil), "chef.automate.api.applications.ServiceGroupsHealthCountsReq")
	proto.RegisterType((*ServiceGroupsReq)(nil), "chef.automate.api.applications.ServiceGroupsReq")
	proto.RegisterType((*ServiceGroup)(nil), "chef.automate.api.applications.ServiceGroup")
	proto.RegisterType((*HealthCounts)(nil), "chef.automate.api.applications.HealthCounts")
	proto.RegisterType((*PackageIdent)(nil), "chef.automate.api.applications.PackageIdent")
	proto.RegisterType((*ServiceGroups)(nil), "chef.automate.api.applications.ServiceGroups")
	proto.RegisterEnum("chef.automate.api.applications.ServiceStatus", ServiceStatus_name, ServiceStatus_value)
	proto.RegisterEnum("chef.automate.api.applications.HealthStatus", HealthStatus_name, HealthStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApplicationsServiceClient is the client API for ApplicationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationsServiceClient interface {
	GetServiceGroups(ctx context.Context, in *ServiceGroupsReq, opts ...grpc.CallOption) (*ServiceGroups, error)
	GetServiceGroupsHealthCounts(ctx context.Context, in *ServiceGroupsHealthCountsReq, opts ...grpc.CallOption) (*HealthCounts, error)
	GetServices(ctx context.Context, in *ServicesReq, opts ...grpc.CallOption) (*ServicesRes, error)
	GetServicesBySG(ctx context.Context, in *ServicesBySGReq, opts ...grpc.CallOption) (*ServicesBySGRes, error)
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
}

type applicationsServiceClient struct {
	cc *grpc.ClientConn
}

func NewApplicationsServiceClient(cc *grpc.ClientConn) ApplicationsServiceClient {
	return &applicationsServiceClient{cc}
}

func (c *applicationsServiceClient) GetServiceGroups(ctx context.Context, in *ServiceGroupsReq, opts ...grpc.CallOption) (*ServiceGroups, error) {
	out := new(ServiceGroups)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServiceGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServiceGroupsHealthCounts(ctx context.Context, in *ServiceGroupsHealthCountsReq, opts ...grpc.CallOption) (*HealthCounts, error) {
	out := new(HealthCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServiceGroupsHealthCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServices(ctx context.Context, in *ServicesReq, opts ...grpc.CallOption) (*ServicesRes, error) {
	out := new(ServicesRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServicesBySG(ctx context.Context, in *ServicesBySGReq, opts ...grpc.CallOption) (*ServicesBySGRes, error) {
	out := new(ServicesBySGRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServicesBySG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServiceServer is the server API for ApplicationsService service.
type ApplicationsServiceServer interface {
	GetServiceGroups(context.Context, *ServiceGroupsReq) (*ServiceGroups, error)
	GetServiceGroupsHealthCounts(context.Context, *ServiceGroupsHealthCountsReq) (*HealthCounts, error)
	GetServices(context.Context, *ServicesReq) (*ServicesRes, error)
	GetServicesBySG(context.Context, *ServicesBySGReq) (*ServicesBySGRes, error)
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
}

func RegisterApplicationsServiceServer(s *grpc.Server, srv ApplicationsServiceServer) {
	s.RegisterService(&_ApplicationsService_serviceDesc, srv)
}

func _ApplicationsService_GetServiceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServiceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServiceGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServiceGroups(ctx, req.(*ServiceGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServiceGroupsHealthCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGroupsHealthCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServiceGroupsHealthCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServiceGroupsHealthCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServiceGroupsHealthCounts(ctx, req.(*ServiceGroupsHealthCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServices(ctx, req.(*ServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServicesBySG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesBySGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServicesBySG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServicesBySG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServicesBySG(ctx, req.(*ServicesBySGReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.applications.ApplicationsService",
	HandlerType: (*ApplicationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceGroups",
			Handler:    _ApplicationsService_GetServiceGroups_Handler,
		},
		{
			MethodName: "GetServiceGroupsHealthCounts",
			Handler:    _ApplicationsService_GetServiceGroupsHealthCounts_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _ApplicationsService_GetServices_Handler,
		},
		{
			MethodName: "GetServicesBySG",
			Handler:    _ApplicationsService_GetServicesBySG_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ApplicationsService_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/applications/applications.proto",
}

func init() {
	proto.RegisterFile("api/external/applications/applications.proto", fileDescriptor_applications_e70a6f38a053c99d)
}

var fileDescriptor_applications_e70a6f38a053c99d = []byte{
	// 1197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xef, 0xae, 0xe3, 0x7f, 0x63, 0x27, 0x75, 0x87, 0x2a, 0x5a, 0xdc, 0x50, 0xdc, 0xed, 0x81,
	0x90, 0xc6, 0x5e, 0x08, 0x11, 0x87, 0x08, 0x10, 0x69, 0x52, 0x19, 0xd3, 0xc8, 0x89, 0xd6, 0x2d,
	0x15, 0xbd, 0x44, 0x93, 0xf5, 0x64, 0xbd, 0x8a, 0x3d, 0xb3, 0xd9, 0x19, 0xa7, 0x44, 0x88, 0x03,
	0x51, 0xc5, 0x21, 0x57, 0xc4, 0x85, 0x0b, 0x47, 0xbe, 0x00, 0x3e, 0x70, 0xe2, 0x2b, 0x20, 0xf1,
	0x0d, 0x10, 0x12, 0x57, 0x2e, 0x5c, 0x10, 0x07, 0x34, 0xb3, 0xb3, 0xce, 0xae, 0x13, 0x27, 0x76,
	0x85, 0x2a, 0x38, 0xed, 0xbe, 0x37, 0xef, 0xfd, 0xde, 0x7b, 0xbf, 0x79, 0xf3, 0x76, 0x16, 0x2c,
	0x23, 0xdf, 0xb3, 0xf0, 0x67, 0x1c, 0x07, 0x04, 0x75, 0x2d, 0xe4, 0xfb, 0x5d, 0xcf, 0x41, 0xdc,
	0xa3, 0x84, 0x25, 0x84, 0x9a, 0x1f, 0x50, 0x4e, 0xe1, 0x6d, 0xa7, 0x83, 0xf7, 0x6b, 0xa8, 0xcf,
	0x69, 0x0f, 0x71, 0x5c, 0x43, 0xbe, 0x57, 0x8b, 0x5b, 0x95, 0x17, 0x5c, 0x4a, 0xdd, 0x2e, 0xb6,
	0x04, 0x28, 0x22, 0x84, 0xf2, 0xb8, 0x77, 0xf9, 0xcd, 0x44, 0x2c, 0x87, 0xf6, 0x7a, 0x94, 0x58,
	0x47, 0x38, 0x60, 0xde, 0xd9, 0x53, 0x99, 0x7e, 0xe8, 0xd0, 0x9e, 0x4f, 0x09, 0x26, 0x9c, 0x59,
	0x51, 0xb8, 0xaa, 0x1b, 0xf8, 0x8e, 0x25, 0xd7, 0x9d, 0xaa, 0x8b, 0x49, 0xd5, 0xa7, 0x5d, 0xcf,
	0x39, 0x1e, 0x13, 0x6c, 0x1a, 0x04, 0x0f, 0xf5, 0x2e, 0x40, 0x58, 0xba, 0x28, 0xdd, 0xc3, 0x3e,
	0x0e, 0x8e, 0x2d, 0x1f, 0x05, 0xa8, 0x87, 0x39, 0x0e, 0x94, 0xad, 0xf9, 0x83, 0x06, 0x0a, 0x2d,
	0x1c, 0x1c, 0x79, 0x0e, 0x66, 0x36, 0x3e, 0x84, 0xf3, 0x20, 0xb3, 0xef, 0x75, 0x39, 0x0e, 0x0c,
	0xad, 0x92, 0x5a, 0xcc, 0xdb, 0x4a, 0x82, 0x1f, 0x03, 0xe0, 0x23, 0xd7, 0x23, 0x32, 0x90, 0xa1,
	0x57, 0xb4, 0xc5, 0xc2, 0xca, 0x52, 0xed, 0x3c, 0xab, 0x61, 0xb4, 0x9a, 0x8c, 0x56, 0xdb, 0x19,
	0x7a, 0xd8, 0x31, 0x6f, 0xb8, 0x0e, 0xb2, 0x8c, 0x06, 0xdc, 0x23, 0xae, 0x91, 0x92, 0x40, 0x6f,
	0x5c, 0x05, 0xd4, 0x0a, 0xcd, 0xed, 0xc8, 0xcf, 0xfc, 0x55, 0x03, 0xd7, 0xa3, 0xb4, 0xef, 0x1f,
	0xb7, 0xea, 0x22, 0xf5, 0x45, 0x50, 0x62, 0xa1, 0x6a, 0xd7, 0x0d, 0x68, 0xdf, 0xdf, 0xf5, 0xda,
	0x86, 0x56, 0xd1, 0x16, 0xd3, 0xf6, 0x9c, 0xd2, 0xd7, 0x85, 0xba, 0xd1, 0xfe, 0x8f, 0x15, 0x23,
	0x38, 0xef, 0x60, 0xd4, 0xe5, 0x1d, 0x63, 0xa6, 0xa2, 0x09, 0xce, 0x43, 0xc9, 0xfc, 0xf9, 0x5c,
	0x91, 0x0c, 0xde, 0x04, 0x69, 0x59, 0x9c, 0xac, 0x2c, 0x6f, 0x87, 0x02, 0xdc, 0x00, 0x39, 0x55,
	0x22, 0x33, 0xf4, 0x4a, 0x6a, 0x4c, 0x16, 0x89, 0x73, 0xa1, 0x80, 0xed, 0xa1, 0x23, 0xdc, 0x03,
	0xf3, 0xd1, 0xfb, 0x6e, 0x98, 0xc1, 0xae, 0x43, 0xfb, 0x84, 0x33, 0x55, 0xd8, 0xf2, 0x55, 0x90,
	0x1f, 0x49, 0xa7, 0x0d, 0xe9, 0x63, 0xdf, 0x8c, 0xb0, 0xe2, 0x5a, 0xd3, 0x8e, 0x77, 0x1b, 0x4b,
	0xe4, 0xad, 0xbd, 0x60, 0xde, 0xe6, 0xdf, 0x3a, 0xc8, 0x2a, 0x2d, 0xbc, 0x0b, 0x66, 0x59, 0xdf,
	0x17, 0x02, 0xa3, 0x41, 0xd4, 0x00, 0x79, 0xbb, 0x78, 0xa6, 0x6c, 0xb4, 0xa1, 0x01, 0xb2, 0x01,
	0xee, 0x62, 0xc4, 0xb0, 0xdc, 0xfb, 0xbc, 0x1d, 0x89, 0x67, 0xec, 0xa6, 0xe2, 0xec, 0x6e, 0x83,
	0x62, 0xc4, 0x47, 0x07, 0x3b, 0x07, 0x72, 0x97, 0xe6, 0x26, 0xa5, 0xa3, 0xc5, 0x11, 0xef, 0x33,
	0xbb, 0x10, 0x22, 0x6c, 0x08, 0x00, 0xf8, 0x00, 0x64, 0x98, 0x54, 0x1b, 0x69, 0x09, 0x55, 0x9d,
	0xb0, 0x68, 0x85, 0xa5, 0x9c, 0x61, 0x05, 0x14, 0x62, 0x56, 0x46, 0x46, 0xe6, 0x1c, 0x57, 0x09,
	0x0b, 0x4c, 0x8e, 0xbc, 0x80, 0x92, 0x1e, 0x26, 0xdc, 0xc8, 0x86, 0x16, 0x31, 0x15, 0x84, 0x60,
	0x66, 0xff, 0xb0, 0x4d, 0x8c, 0x9c, 0x5c, 0x92, 0xef, 0x82, 0x1f, 0xa7, 0x83, 0x08, 0xc1, 0x5d,
	0x23, 0x1f, 0xf2, 0xa3, 0x44, 0x61, 0xcd, 0x3c, 0x8e, 0x8d, 0x1b, 0xa1, 0xb5, 0x78, 0x37, 0x6f,
	0x83, 0x85, 0x56, 0xec, 0x78, 0x25, 0xf6, 0xdb, 0xc6, 0x87, 0xe6, 0x8f, 0x1a, 0x28, 0x25, 0x0c,
	0xfe, 0x47, 0x63, 0xe6, 0x77, 0x1d, 0x14, 0xe3, 0xb9, 0x0b, 0x02, 0x08, 0xea, 0x61, 0xd5, 0x56,
	0xf2, 0xfd, 0x92, 0x76, 0xda, 0x1c, 0xee, 0x73, 0xea, 0x05, 0x5a, 0x26, 0xda, 0xe6, 0x7b, 0xe0,
	0x86, 0x6a, 0x3f, 0x1f, 0x07, 0x0e, 0x26, 0x1c, 0xb9, 0x58, 0xf6, 0x60, 0xda, 0x2e, 0x85, 0x0b,
	0x3b, 0x43, 0xfd, 0x25, 0x87, 0x38, 0xfd, 0x6f, 0x1d, 0x62, 0x38, 0x07, 0x74, 0xaf, 0xad, 0xda,
	0x4d, 0xf7, 0xda, 0xa3, 0x7d, 0x98, 0xbd, 0xb2, 0x0f, 0x73, 0xe7, 0xfa, 0xd0, 0x7c, 0xae, 0x81,
	0x62, 0x22, 0xc8, 0x4d, 0x90, 0xe6, 0x94, 0xa3, 0xae, 0x1a, 0xe1, 0xa1, 0x20, 0x42, 0xd3, 0x03,
	0x49, 0x73, 0xda, 0xd6, 0xe9, 0x81, 0xe0, 0xfe, 0x19, 0x0a, 0x48, 0xb4, 0xc7, 0x69, 0x3b, 0x12,
	0x61, 0x19, 0xe4, 0x9c, 0xc0, 0xe3, 0x9e, 0x83, 0xba, 0x8a, 0xac, 0xa1, 0x2c, 0xbc, 0xfa, 0xe4,
	0x80, 0xd0, 0x67, 0x44, 0xb2, 0x92, 0xb6, 0x23, 0xd1, 0x24, 0xa0, 0xb8, 0x83, 0x9c, 0x03, 0xe4,
	0xe2, 0x46, 0x5b, 0x1c, 0x8f, 0x79, 0x90, 0xa1, 0x81, 0xe7, 0x7a, 0x44, 0xed, 0xb8, 0x92, 0x86,
	0x7d, 0xa0, 0x27, 0xfb, 0x40, 0xdd, 0x05, 0xd4, 0xf8, 0x88, 0xc4, 0x78, 0x87, 0xcc, 0x24, 0x3a,
	0xc4, 0x6c, 0x83, 0xd9, 0xc4, 0xd9, 0x80, 0x2d, 0x30, 0x97, 0xf8, 0x88, 0x45, 0x73, 0x71, 0x79,
	0xc2, 0x11, 0x21, 0x61, 0xec, 0xd9, 0xf8, 0x07, 0x8f, 0x2d, 0xd5, 0x87, 0x51, 0xc2, 0xd6, 0x82,
	0x05, 0x90, 0xb5, 0x1f, 0x37, 0x9b, 0x8d, 0x66, 0xbd, 0x74, 0x0d, 0x96, 0x40, 0xb1, 0xd1, 0x6c,
	0x3c, 0x6a, 0xac, 0x6f, 0x35, 0x9e, 0x0a, 0x8d, 0x06, 0x67, 0x41, 0x7e, 0xf3, 0xc1, 0xce, 0xd6,
	0xf6, 0xa7, 0x42, 0xd4, 0x61, 0x0e, 0xcc, 0x6c, 0x6e, 0x3f, 0x69, 0x96, 0x52, 0x4b, 0x1f, 0x44,
	0x9b, 0xa4, 0x70, 0x32, 0x40, 0xdf, 0x7e, 0x58, 0xba, 0x26, 0xf0, 0x9e, 0xac, 0xdb, 0xcd, 0xd0,
	0xbb, 0x08, 0x72, 0x1b, 0x76, 0xe3, 0x51, 0x63, 0x63, 0x7d, 0xab, 0xa4, 0x8b, 0xa5, 0xc7, 0xcd,
	0x87, 0x4d, 0xe9, 0xbf, 0xf2, 0x13, 0x00, 0xaf, 0xac, 0xc7, 0xb2, 0x8e, 0xc6, 0xf6, 0x5f, 0x1a,
	0x28, 0xd5, 0x31, 0x4f, 0x52, 0xf1, 0xd6, 0x34, 0x25, 0x8b, 0xa9, 0x52, 0xae, 0x4e, 0xe5, 0x61,
	0x3e, 0xd7, 0x4e, 0x06, 0xc6, 0xfc, 0x28, 0xe1, 0x70, 0xa6, 0xeb, 0x31, 0x7e, 0x3a, 0x30, 0xde,
	0x07, 0xe5, 0xb8, 0xf3, 0x5a, 0x82, 0x53, 0xf8, 0xfa, 0xf8, 0xb5, 0x35, 0x01, 0x70, 0xf2, 0xcb,
	0x6f, 0x5f, 0xeb, 0x77, 0xe1, 0x1d, 0x6b, 0x0f, 0x73, 0x94, 0xbc, 0x9f, 0x2a, 0xe3, 0xaa, 0x8a,
	0xf7, 0xbd, 0x0e, 0x16, 0x46, 0x8b, 0x4f, 0x1c, 0x85, 0xf7, 0xa6, 0x2a, 0x6b, 0x64, 0xfe, 0x96,
	0xa7, 0x3a, 0xf1, 0xe6, 0xb7, 0x82, 0x93, 0xd2, 0x28, 0x27, 0x27, 0x03, 0x23, 0x33, 0xe4, 0x65,
	0xe1, 0x32, 0x5e, 0x4e, 0x07, 0xc6, 0x9d, 0xc9, 0xb8, 0x79, 0x1b, 0x5a, 0xe3, 0xb9, 0x51, 0x71,
	0x93, 0x23, 0x0c, 0xfe, 0xa1, 0x81, 0xc2, 0x19, 0x53, 0x0c, 0xde, 0x9b, 0x90, 0x18, 0xc9, 0xc3,
	0x14, 0xc6, 0xcc, 0xfc, 0xea, 0xa5, 0xd1, 0xf0, 0x1a, 0xbc, 0x35, 0x9e, 0x06, 0x06, 0xbf, 0xd1,
	0xc1, 0xf5, 0x58, 0xc9, 0xe2, 0x1a, 0x08, 0xad, 0x49, 0x2b, 0x51, 0x37, 0xe3, 0xf2, 0x94, 0x0e,
	0xcc, 0xfc, 0xee, 0xa5, 0x95, 0xff, 0x2e, 0x5c, 0xbd, 0xf2, 0x84, 0x58, 0x9f, 0x8f, 0xde, 0xeb,
	0xbf, 0x80, 0x7f, 0x6a, 0x00, 0xd4, 0x31, 0xff, 0x44, 0x4d, 0xd8, 0xd5, 0xf1, 0x9f, 0xf6, 0xe8,
	0xff, 0x4c, 0x99, 0x36, 0xc8, 0x3e, 0xb5, 0xf1, 0x61, 0x1f, 0x33, 0x7e, 0xe1, 0xbc, 0x18, 0xef,
	0x65, 0x7e, 0x19, 0xce, 0x8b, 0xe8, 0xa3, 0xb8, 0xeb, 0x91, 0x7d, 0xba, 0xa6, 0x0c, 0x43, 0x6e,
	0x02, 0x8c, 0xda, 0xa7, 0x03, 0xc3, 0x00, 0xf3, 0xec, 0x98, 0x71, 0xdc, 0x8b, 0xaa, 0x8e, 0xac,
	0x4e, 0x07, 0xc6, 0x2d, 0xf8, 0x6a, 0x72, 0x4d, 0x45, 0x58, 0x73, 0x71, 0xc8, 0xc8, 0x02, 0x2c,
	0x5f, 0xc0, 0x88, 0x02, 0xb8, 0xbf, 0xfa, 0x74, 0xc5, 0xf5, 0x78, 0xa7, 0xbf, 0x27, 0x12, 0xb5,
	0x44, 0xfa, 0xc3, 0x9f, 0x44, 0x6b, 0xec, 0x1f, 0xf1, 0x5e, 0x46, 0xfe, 0xec, 0xbd, 0xf3, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x73, 0xf2, 0x73, 0x35, 0x0f, 0x00, 0x00,
}
