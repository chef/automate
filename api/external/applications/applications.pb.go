// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: external/applications/applications.proto

package applications

import (
	context "context"
	_ "github.com/chef/automate/api/external/annotations/iam"
	query "github.com/chef/automate/api/external/common/query"
	version "github.com/chef/automate/api/external/common/version"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The HealthStatus enumerable matches the Chef Habitat implementation for health-check status:
// => https://www.habitat.sh/docs/reference/#health-check
// For a health status within a service group.
// *critical* means that one or more services are in critical condition.
// *warning* means that one or more services have a warning, but none are in critical condition.
// *unknown* means that one or more services have not responded, but all of the remaining nodes responded to the health check as "OK".
// *OK* means that all of the services are OK and all have responded to the health check.
// *none* means that there is no health check information.
type HealthStatus int32

const (
	HealthStatus_OK       HealthStatus = 0
	HealthStatus_WARNING  HealthStatus = 1
	HealthStatus_CRITICAL HealthStatus = 2
	HealthStatus_UNKNOWN  HealthStatus = 3
	HealthStatus_NONE     HealthStatus = 17
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0:  "OK",
		1:  "WARNING",
		2:  "CRITICAL",
		3:  "UNKNOWN",
		17: "NONE",
	}
	HealthStatus_value = map[string]int32{
		"OK":       0,
		"WARNING":  1,
		"CRITICAL": 2,
		"UNKNOWN":  3,
		"NONE":     17,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_external_applications_applications_proto_enumTypes[0].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_external_applications_applications_proto_enumTypes[0]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus.Descriptor instead.
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{0}
}

// Request message for listing services.
type ServicesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Applies search filters, in the format of `fieldname:value`.
	//
	// Valid filter fieldnames are:
	// * `origin`: origin component of the service's package identifier
	// * `service`: the name component of the service's package identifier
	// * `version`: the version number component of the service's package identifier
	// * `buildstamp`: the build timestamp (also called "release") of the service's package identifier
	// * `channel`: the package channel to which the service subscribes for updates
	// * `application`: the application field of the service's event-stream metadata
	// * `environment`: the environment field of the service's event-stream metadata
	// * `site`: the site field of the service's event-stream metadata
	// * `group`: the suffix of the service group name
	//
	// `status` filters refine service results by a service's
	//  current state or most recent healthcheck result.
	//  Disconnected services keep their last healthcheck result
	//  until their reports are removed by Chef Automate.
	//  When you apply a healthcheck filter, the report includes
	//  all recently disconnected services.
	//  Valid status filter parameters are:
	// * `status:disconnected`: returns services in a disconnected state
	// * `status:critical`: returns services with a "critical" healthcheck result
	// * `status:unknown`: returns services with an "unknown" healthcheck result
	// * `status:warning`: returns services with a "warning" healthcheck result
	// * `status:ok`: returns services with an  "ok" health check result
	Filter []string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	// Applies pagination parameters.
	Pagination *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Applies sorting parameters.
	Sorting *query.Sorting `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
}

func (x *ServicesReq) Reset() {
	*x = ServicesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesReq) ProtoMessage() {}

func (x *ServicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesReq.ProtoReflect.Descriptor instead.
func (*ServicesReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{0}
}

func (x *ServicesReq) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ServicesReq) GetPagination() *query.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ServicesReq) GetSorting() *query.Sorting {
	if x != nil {
		return x.Sorting
	}
	return nil
}

// Request message for listing available service filters.
type ServicesDistinctValuesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field name of service values.
	FieldName string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// Query value, supports wildcards (* and ?).
	QueryFragment string `protobuf:"bytes,2,opt,name=query_fragment,json=queryFragment,proto3" json:"query_fragment,omitempty"`
	// Applies filters, in the format of `fieldname:value`.
	// See documentation for ServicesReq for valid filter parameters
	Filter []string `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ServicesDistinctValuesReq) Reset() {
	*x = ServicesDistinctValuesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicesDistinctValuesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesDistinctValuesReq) ProtoMessage() {}

func (x *ServicesDistinctValuesReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesDistinctValuesReq.ProtoReflect.Descriptor instead.
func (*ServicesDistinctValuesReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{1}
}

func (x *ServicesDistinctValuesReq) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *ServicesDistinctValuesReq) GetQueryFragment() string {
	if x != nil {
		return x.QueryFragment
	}
	return ""
}

func (x *ServicesDistinctValuesReq) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Request message for listing services by service group.
type ServicesBySGReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service group ID.
	ServiceGroupId string `protobuf:"bytes,1,opt,name=service_group_id,json=serviceGroupId,proto3" json:"service_group_id,omitempty"`
	// Applies pagination parameters.
	Pagination *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Applies sorting parameters.
	Sorting *query.Sorting `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	// Applies filters, in the format of `fieldname:value`.
	// See documentation for ServicesReq for valid filter parameters
	Filter []string `protobuf:"bytes,5,rep,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ServicesBySGReq) Reset() {
	*x = ServicesBySGReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicesBySGReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesBySGReq) ProtoMessage() {}

func (x *ServicesBySGReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesBySGReq.ProtoReflect.Descriptor instead.
func (*ServicesBySGReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{2}
}

func (x *ServicesBySGReq) GetServiceGroupId() string {
	if x != nil {
		return x.ServiceGroupId
	}
	return ""
}

func (x *ServicesBySGReq) GetPagination() *query.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ServicesBySGReq) GetSorting() *query.Sorting {
	if x != nil {
		return x.Sorting
	}
	return nil
}

func (x *ServicesBySGReq) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Response message for GetServicesBySG.
type ServicesBySGRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service group name.
	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// List of services.
	Services []*Service `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	// Intentionally blank.
	ServicesHealthCounts *HealthCounts `protobuf:"bytes,3,opt,name=services_health_counts,json=servicesHealthCounts,proto3" json:"services_health_counts,omitempty"`
}

func (x *ServicesBySGRes) Reset() {
	*x = ServicesBySGRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicesBySGRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesBySGRes) ProtoMessage() {}

func (x *ServicesBySGRes) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesBySGRes.ProtoReflect.Descriptor instead.
func (*ServicesBySGRes) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{3}
}

func (x *ServicesBySGRes) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ServicesBySGRes) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ServicesBySGRes) GetServicesHealthCounts() *HealthCounts {
	if x != nil {
		return x.ServicesHealthCounts
	}
	return nil
}

// Response message for GetServices.
type ServicesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of services.
	Services []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *ServicesRes) Reset() {
	*x = ServicesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesRes) ProtoMessage() {}

func (x *ServicesRes) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesRes.ProtoReflect.Descriptor instead.
func (*ServicesRes) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{4}
}

func (x *ServicesRes) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

// Response message for GetServicesDistinctValues.
type ServicesDistinctValuesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of distinct values fitting query_fragment and filters.
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ServicesDistinctValuesRes) Reset() {
	*x = ServicesDistinctValuesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicesDistinctValuesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesDistinctValuesRes) ProtoMessage() {}

func (x *ServicesDistinctValuesRes) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesDistinctValuesRes.ProtoReflect.Descriptor instead.
func (*ServicesDistinctValuesRes) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{5}
}

func (x *ServicesDistinctValuesRes) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// Request message for GetDisconnectedServices.
type DisconnectedServicesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Threshold for marking services disconnected in seconds.
	ThresholdSeconds int32 `protobuf:"varint,2,opt,name=threshold_seconds,json=thresholdSeconds,proto3" json:"threshold_seconds,omitempty"`
}

func (x *DisconnectedServicesReq) Reset() {
	*x = DisconnectedServicesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectedServicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectedServicesReq) ProtoMessage() {}

func (x *DisconnectedServicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectedServicesReq.ProtoReflect.Descriptor instead.
func (*DisconnectedServicesReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{6}
}

func (x *DisconnectedServicesReq) GetThresholdSeconds() int32 {
	if x != nil {
		return x.ThresholdSeconds
	}
	return 0
}

type DeleteServicesByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of the database IDs of the services to be deleted.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteServicesByIDReq) Reset() {
	*x = DeleteServicesByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServicesByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServicesByIDReq) ProtoMessage() {}

func (x *DeleteServicesByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServicesByIDReq.ProtoReflect.Descriptor instead.
func (*DeleteServicesByIDReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteServicesByIDReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Request message for ServicesStats.
type ServicesStatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServicesStatsReq) Reset() {
	*x = ServicesStatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicesStatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesStatsReq) ProtoMessage() {}

func (x *ServicesStatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesStatsReq.ProtoReflect.Descriptor instead.
func (*ServicesStatsReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{8}
}

// Response message for ServicesStats.
type ServicesStatsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of service groups reporting to Chef Automate.
	TotalServiceGroups int32 `protobuf:"varint,1,opt,name=total_service_groups,json=totalServiceGroups,proto3" json:"total_service_groups,omitempty"`
	// Total number of services reporting to Chef Automate, counts both connected and disconnected services.
	TotalServices int32 `protobuf:"varint,2,opt,name=total_services,json=totalServices,proto3" json:"total_services,omitempty"`
	// Total number of supervisors reporting to Chef Automate.
	TotalSupervisors int32 `protobuf:"varint,3,opt,name=total_supervisors,json=totalSupervisors,proto3" json:"total_supervisors,omitempty"`
	// Total number of deployments reporting to Chef Automate.
	TotalDeployments int32 `protobuf:"varint,4,opt,name=total_deployments,json=totalDeployments,proto3" json:"total_deployments,omitempty"`
}

func (x *ServicesStatsRes) Reset() {
	*x = ServicesStatsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicesStatsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesStatsRes) ProtoMessage() {}

func (x *ServicesStatsRes) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesStatsRes.ProtoReflect.Descriptor instead.
func (*ServicesStatsRes) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{9}
}

func (x *ServicesStatsRes) GetTotalServiceGroups() int32 {
	if x != nil {
		return x.TotalServiceGroups
	}
	return 0
}

func (x *ServicesStatsRes) GetTotalServices() int32 {
	if x != nil {
		return x.TotalServices
	}
	return 0
}

func (x *ServicesStatsRes) GetTotalSupervisors() int32 {
	if x != nil {
		return x.TotalSupervisors
	}
	return 0
}

func (x *ServicesStatsRes) GetTotalDeployments() int32 {
	if x != nil {
		return x.TotalDeployments
	}
	return 0
}

// Periodic job configuration.
type PeriodicJobConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable/disable the job. `false` is disabled, `true` is enabled.
	Running bool `protobuf:"varint,1,opt,name=running,proto3" json:"running,omitempty"`
	// The `threshold` setting used by periodic jobs for evaluating services.
	// Threshold is a string that follows Elasticsearch's date math expressions. For more information, see the simpledatemath package under `lib/`.
	Threshold string `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// A recurrence rule that determines how often, at what interval, and when to
	// initially start a scheduled job.
	//
	// If the field is omitted from the request or is set to an emtpy string, no
	// change will be made to the current value. Otherwise, the value should match
	// the  [recurrence rule format defined in section 4.3.10 of RFC 2445](https://www.ietf.org/rfc/rfc2445.txt).
	//
	// It is not recommended to change this value from the default setting of a
	// 60 second interval. This configuration option is provided only for
	// consistency with other data lifecyle APIs.
	Recurrence string           `protobuf:"bytes,3,opt,name=recurrence,proto3" json:"recurrence,omitempty"`
	JobInfo    *PeriodicJobInfo `protobuf:"bytes,4,opt,name=job_info,json=jobInfo,proto3" json:"job_info,omitempty"`
}

func (x *PeriodicJobConfig) Reset() {
	*x = PeriodicJobConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicJobConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicJobConfig) ProtoMessage() {}

func (x *PeriodicJobConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicJobConfig.ProtoReflect.Descriptor instead.
func (*PeriodicJobConfig) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{10}
}

func (x *PeriodicJobConfig) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *PeriodicJobConfig) GetThreshold() string {
	if x != nil {
		return x.Threshold
	}
	return ""
}

func (x *PeriodicJobConfig) GetRecurrence() string {
	if x != nil {
		return x.Recurrence
	}
	return ""
}

func (x *PeriodicJobConfig) GetJobInfo() *PeriodicJobInfo {
	if x != nil {
		return x.JobInfo
	}
	return nil
}

// Configuration for a periodic job. Initially Jobs using this message type
// were designed such that they could not be disabled, but that has been
// changed to make the various data lifecycle APIs consistent with each other.
// Thus, there is a `running` field which will disable the job if set to false.
// That is not recommended.
type PeriodicMandatoryJobConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The `threshold` setting used by periodic jobs for evaluating services.
	// Threshold is a string that follows Elasticsearch's date math expressions. For more information, see the simpledatemath package under `lib/`.
	Threshold string `protobuf:"bytes,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// Enable/disable the job. `false` is disabled, `true` is enabled. It is not
	// recommended to disable this job.
	Running *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=running,proto3" json:"running,omitempty"`
	// A recurrence rule that determines how often, at what interval, and when to
	// initially start a scheduled job.
	//
	// If the field is omitted from the request or is set to an emtpy string, no
	// change will be made to the current value. Otherwise, the value should match
	// the  [recurrence rule format defined in section 4.3.10 of RFC 2445](https://www.ietf.org/rfc/rfc2445.txt).
	//
	// It is not recommended to change this value from the default setting of a
	// 60 second interval. This configuration option is provided only for
	// consistency with other data lifecyle APIs.
	Recurrence string `protobuf:"bytes,3,opt,name=recurrence,proto3" json:"recurrence,omitempty"`
	// Information about the last and next scheduled executions of the job. This
	// is only used in a response context.
	JobInfo *PeriodicJobInfo `protobuf:"bytes,4,opt,name=job_info,json=jobInfo,proto3" json:"job_info,omitempty"`
}

func (x *PeriodicMandatoryJobConfig) Reset() {
	*x = PeriodicMandatoryJobConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicMandatoryJobConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicMandatoryJobConfig) ProtoMessage() {}

func (x *PeriodicMandatoryJobConfig) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicMandatoryJobConfig.ProtoReflect.Descriptor instead.
func (*PeriodicMandatoryJobConfig) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{11}
}

func (x *PeriodicMandatoryJobConfig) GetThreshold() string {
	if x != nil {
		return x.Threshold
	}
	return ""
}

func (x *PeriodicMandatoryJobConfig) GetRunning() *wrapperspb.BoolValue {
	if x != nil {
		return x.Running
	}
	return nil
}

func (x *PeriodicMandatoryJobConfig) GetRecurrence() string {
	if x != nil {
		return x.Recurrence
	}
	return ""
}

func (x *PeriodicMandatoryJobConfig) GetJobInfo() *PeriodicJobInfo {
	if x != nil {
		return x.JobInfo
	}
	return nil
}

// PeriodicJobInfo gives information about the last and next scheduled
// executions of a periodic job.
type PeriodicJobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastEnqueuedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_enqueued_at,json=lastEnqueuedAt,proto3" json:"last_enqueued_at,omitempty"`
	LastStartedAt  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_started_at,json=lastStartedAt,proto3" json:"last_started_at,omitempty"`
	LastEndedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_ended_at,json=lastEndedAt,proto3" json:"last_ended_at,omitempty"`
	LastElapsed    *durationpb.Duration   `protobuf:"bytes,4,opt,name=last_elapsed,json=lastElapsed,proto3" json:"last_elapsed,omitempty"`
	NextDueAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=next_due_at,json=nextDueAt,proto3" json:"next_due_at,omitempty"`
}

func (x *PeriodicJobInfo) Reset() {
	*x = PeriodicJobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicJobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicJobInfo) ProtoMessage() {}

func (x *PeriodicJobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicJobInfo.ProtoReflect.Descriptor instead.
func (*PeriodicJobInfo) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{12}
}

func (x *PeriodicJobInfo) GetLastEnqueuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEnqueuedAt
	}
	return nil
}

func (x *PeriodicJobInfo) GetLastStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStartedAt
	}
	return nil
}

func (x *PeriodicJobInfo) GetLastEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEndedAt
	}
	return nil
}

func (x *PeriodicJobInfo) GetLastElapsed() *durationpb.Duration {
	if x != nil {
		return x.LastElapsed
	}
	return nil
}

func (x *PeriodicJobInfo) GetNextDueAt() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDueAt
	}
	return nil
}

type GetDisconnectedServicesConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDisconnectedServicesConfigReq) Reset() {
	*x = GetDisconnectedServicesConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDisconnectedServicesConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDisconnectedServicesConfigReq) ProtoMessage() {}

func (x *GetDisconnectedServicesConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDisconnectedServicesConfigReq.ProtoReflect.Descriptor instead.
func (*GetDisconnectedServicesConfigReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{13}
}

type UpdateDisconnectedServicesConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDisconnectedServicesConfigRes) Reset() {
	*x = UpdateDisconnectedServicesConfigRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDisconnectedServicesConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDisconnectedServicesConfigRes) ProtoMessage() {}

func (x *UpdateDisconnectedServicesConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDisconnectedServicesConfigRes.ProtoReflect.Descriptor instead.
func (*UpdateDisconnectedServicesConfigRes) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{14}
}

type RunDisconnectedServicesJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunDisconnectedServicesJobReq) Reset() {
	*x = RunDisconnectedServicesJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDisconnectedServicesJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDisconnectedServicesJobReq) ProtoMessage() {}

func (x *RunDisconnectedServicesJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDisconnectedServicesJobReq.ProtoReflect.Descriptor instead.
func (*RunDisconnectedServicesJobReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{15}
}

type RunDisconnectedServicesJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunDisconnectedServicesJobResponse) Reset() {
	*x = RunDisconnectedServicesJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDisconnectedServicesJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDisconnectedServicesJobResponse) ProtoMessage() {}

func (x *RunDisconnectedServicesJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDisconnectedServicesJobResponse.ProtoReflect.Descriptor instead.
func (*RunDisconnectedServicesJobResponse) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{16}
}

type GetDeleteDisconnectedServicesConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDeleteDisconnectedServicesConfigReq) Reset() {
	*x = GetDeleteDisconnectedServicesConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeleteDisconnectedServicesConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeleteDisconnectedServicesConfigReq) ProtoMessage() {}

func (x *GetDeleteDisconnectedServicesConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeleteDisconnectedServicesConfigReq.ProtoReflect.Descriptor instead.
func (*GetDeleteDisconnectedServicesConfigReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{17}
}

type UpdateDeleteDisconnectedServicesConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDeleteDisconnectedServicesConfigRes) Reset() {
	*x = UpdateDeleteDisconnectedServicesConfigRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeleteDisconnectedServicesConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeleteDisconnectedServicesConfigRes) ProtoMessage() {}

func (x *UpdateDeleteDisconnectedServicesConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeleteDisconnectedServicesConfigRes.ProtoReflect.Descriptor instead.
func (*UpdateDeleteDisconnectedServicesConfigRes) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{18}
}

type RunDeleteDisconnectedServicesJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunDeleteDisconnectedServicesJobReq) Reset() {
	*x = RunDeleteDisconnectedServicesJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDeleteDisconnectedServicesJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDeleteDisconnectedServicesJobReq) ProtoMessage() {}

func (x *RunDeleteDisconnectedServicesJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDeleteDisconnectedServicesJobReq.ProtoReflect.Descriptor instead.
func (*RunDeleteDisconnectedServicesJobReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{19}
}

type RunDeleteDisconnectedServicesJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunDeleteDisconnectedServicesJobResponse) Reset() {
	*x = RunDeleteDisconnectedServicesJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDeleteDisconnectedServicesJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDeleteDisconnectedServicesJobResponse) ProtoMessage() {}

func (x *RunDeleteDisconnectedServicesJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDeleteDisconnectedServicesJobResponse.ProtoReflect.Descriptor instead.
func (*RunDeleteDisconnectedServicesJobResponse) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{20}
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Chef Habitat Supervisor ID.
	SupervisorId string `protobuf:"bytes,1,opt,name=supervisor_id,json=supervisorId,proto3" json:"supervisor_id,omitempty"`
	// Combination of the service version and release in a single string.
	// Example: 0.1.0/8743278934278923.
	Release string `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	// Service group name.
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	// Intentionally blank.
	HealthCheck HealthStatus `protobuf:"varint,4,opt,name=health_check,json=healthCheck,proto3,enum=chef.automate.api.applications.HealthStatus" json:"health_check,omitempty"`
	// Application name.
	Application string `protobuf:"bytes,6,opt,name=application,proto3" json:"application,omitempty"`
	// Environment name.
	Environment string `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	// FQDN reported by a Chef Habitat Supervisor.
	Fqdn string `protobuf:"bytes,8,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// Chef Habitat channel that the service is subscribed to.
	Channel string `protobuf:"bytes,9,opt,name=channel,proto3" json:"channel,omitempty"`
	// Update strategy that the service employs.
	UpdateStrategy string `protobuf:"bytes,10,opt,name=update_strategy,json=updateStrategy,proto3" json:"update_strategy,omitempty"`
	// Site reported by Chef Habitat service, a user defined flag.
	Site string `protobuf:"bytes,17,opt,name=site,proto3" json:"site,omitempty"`
	// Intentionally blank.
	PreviousHealthCheck HealthStatus `protobuf:"varint,18,opt,name=previous_health_check,json=previousHealthCheck,proto3,enum=chef.automate.api.applications.HealthStatus" json:"previous_health_check,omitempty"`
	// Time interval of current health status from last status change until now.
	CurrentHealthSince string `protobuf:"bytes,19,opt,name=current_health_since,json=currentHealthSince,proto3" json:"current_health_since,omitempty"`
	// Timestamp since health status change.
	HealthUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=health_updated_at,json=healthUpdatedAt,proto3" json:"health_updated_at,omitempty"`
	// Service connection information.
	// Based on time since last healthcheck received and disconnected service configuration.
	Disconnected bool `protobuf:"varint,21,opt,name=disconnected,proto3" json:"disconnected,omitempty"`
	// Timestamp of last received health check message.
	LastEventOccurredAt *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=last_event_occurred_at,json=lastEventOccurredAt,proto3" json:"last_event_occurred_at,omitempty"`
	// Interval since last event received until now.
	LastEventSince string `protobuf:"bytes,23,opt,name=last_event_since,json=lastEventSince,proto3" json:"last_event_since,omitempty"`
	// Intentionally blank.
	HealthCheckResult *HealthCheckResult `protobuf:"bytes,24,opt,name=health_check_result,json=healthCheckResult,proto3" json:"health_check_result,omitempty"`
	// Internal ID
	Id string `protobuf:"bytes,25,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{21}
}

func (x *Service) GetSupervisorId() string {
	if x != nil {
		return x.SupervisorId
	}
	return ""
}

func (x *Service) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *Service) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Service) GetHealthCheck() HealthStatus {
	if x != nil {
		return x.HealthCheck
	}
	return HealthStatus_OK
}

func (x *Service) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *Service) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Service) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *Service) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Service) GetUpdateStrategy() string {
	if x != nil {
		return x.UpdateStrategy
	}
	return ""
}

func (x *Service) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *Service) GetPreviousHealthCheck() HealthStatus {
	if x != nil {
		return x.PreviousHealthCheck
	}
	return HealthStatus_OK
}

func (x *Service) GetCurrentHealthSince() string {
	if x != nil {
		return x.CurrentHealthSince
	}
	return ""
}

func (x *Service) GetHealthUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.HealthUpdatedAt
	}
	return nil
}

func (x *Service) GetDisconnected() bool {
	if x != nil {
		return x.Disconnected
	}
	return false
}

func (x *Service) GetLastEventOccurredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEventOccurredAt
	}
	return nil
}

func (x *Service) GetLastEventSince() string {
	if x != nil {
		return x.LastEventSince
	}
	return ""
}

func (x *Service) GetHealthCheckResult() *HealthCheckResult {
	if x != nil {
		return x.HealthCheckResult
	}
	return nil
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Request message for GetServiceGroupsHealthCounts
type ServiceGroupsHealthCountsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Applies search filters, in the format of `fieldname:value`.
	// See the documentation for ServiceGroupsReq for valid filter parameters.
	Filter []string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ServiceGroupsHealthCountsReq) Reset() {
	*x = ServiceGroupsHealthCountsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGroupsHealthCountsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGroupsHealthCountsReq) ProtoMessage() {}

func (x *ServiceGroupsHealthCountsReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGroupsHealthCountsReq.ProtoReflect.Descriptor instead.
func (*ServiceGroupsHealthCountsReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{22}
}

func (x *ServiceGroupsHealthCountsReq) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Request message for GetServiceGroups
type ServiceGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Applies search and status filters, in the format of `fieldname:value` or `status:value`.
	//
	// Valid filter fieldnames are:
	// * `origin`: origin component of the service's package identifier
	// * `service`: the name component of the service's package identifier
	// * `version`: the version number component of the service's package identifier
	// * `buildstamp`: the build timestamp (also called "release") of the service's package identifier
	// * `channel`: the package channel to which the service subscribes for updates
	// * `application`: the application field of the service's event-stream metadata
	// * `environment`: the environment field of the service's event-stream metadata
	// * `site`: the site field of the service's event-stream metadata
	// * `group`: the suffix of the service group name
	//
	// `status` filters refine the service group results by a service's
	//  most recent connected/disconnected state or healthcheck result.
	//
	//  Valid status filter parameters are:
	// * `status:disconnected`: returns service groups with at least one service in a disconnected state
	// * `status:critical`: returns service groups with a with at least one service in a "critical" healthcheck result
	// * `status:unknown`: returns service groups with at least one service with an "unknown" healthcheck result
	// * `status:warning`: returns service groups with at least one service with a "warning" healthcheck result
	// * `status:ok`: returns service groups with at least one service with an "ok" health check result
	Filter []string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	// Pagination parameters for service groups list.
	Pagination *query.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Sorting parameters for service groups list.
	Sorting *query.Sorting `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
}

func (x *ServiceGroupsReq) Reset() {
	*x = ServiceGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGroupsReq) ProtoMessage() {}

func (x *ServiceGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGroupsReq.ProtoReflect.Descriptor instead.
func (*ServiceGroupsReq) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{23}
}

func (x *ServiceGroupsReq) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ServiceGroupsReq) GetPagination() *query.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ServiceGroupsReq) GetSorting() *query.Sorting {
	if x != nil {
		return x.Sorting
	}
	return nil
}

// A service group message is the representation of an individual service group that
// is internally generated by aggregating all of its services.
type ServiceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of service group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Combination of the version and release in a single string.
	// Example: 0.1.0/8743278934278923.
	Release string `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	// Intentionally blank.
	Status HealthStatus `protobuf:"varint,3,opt,name=status,proto3,enum=chef.automate.api.applications.HealthStatus" json:"status,omitempty"`
	// Percentage of services reporting OK status.
	// The health_percentage can be a number between 0-100.
	HealthPercentage int32 `protobuf:"varint,4,opt,name=health_percentage,json=healthPercentage,proto3" json:"health_percentage,omitempty"`
	// Intentionally blank.
	ServicesHealthCounts *HealthCounts `protobuf:"bytes,5,opt,name=services_health_counts,json=servicesHealthCounts,proto3" json:"services_health_counts,omitempty"`
	// Service group ID. This is a value constructed by Chef Automate and is not reported by Chef Habitat.
	Id string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	// Application name for the service group.
	Application string `protobuf:"bytes,7,opt,name=application,proto3" json:"application,omitempty"`
	// Environment name for the service group.
	Environment string `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	// Combination of the origin and package name in a single string.
	// Example: core/redis.
	Package string `protobuf:"bytes,9,opt,name=package,proto3" json:"package,omitempty"`
	// Count of disconnected services within this service group.
	DisconnectedCount int32 `protobuf:"varint,10,opt,name=disconnected_count,json=disconnectedCount,proto3" json:"disconnected_count,omitempty"`
}

func (x *ServiceGroup) Reset() {
	*x = ServiceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGroup) ProtoMessage() {}

func (x *ServiceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGroup.ProtoReflect.Descriptor instead.
func (*ServiceGroup) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{24}
}

func (x *ServiceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceGroup) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *ServiceGroup) GetStatus() HealthStatus {
	if x != nil {
		return x.Status
	}
	return HealthStatus_OK
}

func (x *ServiceGroup) GetHealthPercentage() int32 {
	if x != nil {
		return x.HealthPercentage
	}
	return 0
}

func (x *ServiceGroup) GetServicesHealthCounts() *HealthCounts {
	if x != nil {
		return x.ServicesHealthCounts
	}
	return nil
}

func (x *ServiceGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceGroup) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *ServiceGroup) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ServiceGroup) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *ServiceGroup) GetDisconnectedCount() int32 {
	if x != nil {
		return x.DisconnectedCount
	}
	return 0
}

// Combined count values from the health status and disconnected status reports.
type HealthCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total        int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Ok           int32 `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	Warning      int32 `protobuf:"varint,3,opt,name=warning,proto3" json:"warning,omitempty"`
	Critical     int32 `protobuf:"varint,4,opt,name=critical,proto3" json:"critical,omitempty"`
	Unknown      int32 `protobuf:"varint,5,opt,name=unknown,proto3" json:"unknown,omitempty"`
	Disconnected int32 `protobuf:"varint,6,opt,name=disconnected,proto3" json:"disconnected,omitempty"`
}

func (x *HealthCounts) Reset() {
	*x = HealthCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCounts) ProtoMessage() {}

func (x *HealthCounts) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCounts.ProtoReflect.Descriptor instead.
func (*HealthCounts) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{25}
}

func (x *HealthCounts) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *HealthCounts) GetOk() int32 {
	if x != nil {
		return x.Ok
	}
	return 0
}

func (x *HealthCounts) GetWarning() int32 {
	if x != nil {
		return x.Warning
	}
	return 0
}

func (x *HealthCounts) GetCritical() int32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

func (x *HealthCounts) GetUnknown() int32 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *HealthCounts) GetDisconnected() int32 {
	if x != nil {
		return x.Disconnected
	}
	return 0
}

// The package identifier of a service is unique and is the combination
// of origin/name/version/release
//
// Example: core/redis/0.1.0/8743278934278923
type PackageIdent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chef Habitat origin.
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// Chef Habitat package name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Chef Habitat release version number.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Chef Habitat release buildstamp.
	Release string `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *PackageIdent) Reset() {
	*x = PackageIdent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageIdent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageIdent) ProtoMessage() {}

func (x *PackageIdent) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageIdent.ProtoReflect.Descriptor instead.
func (*PackageIdent) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{26}
}

func (x *PackageIdent) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *PackageIdent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackageIdent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PackageIdent) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

// List of service groups.
type ServiceGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of service groups.
	ServiceGroups []*ServiceGroup `protobuf:"bytes,1,rep,name=service_groups,json=serviceGroups,proto3" json:"service_groups,omitempty"`
}

func (x *ServiceGroups) Reset() {
	*x = ServiceGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGroups) ProtoMessage() {}

func (x *ServiceGroups) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGroups.ProtoReflect.Descriptor instead.
func (*ServiceGroups) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{27}
}

func (x *ServiceGroups) GetServiceGroups() []*ServiceGroup {
	if x != nil {
		return x.ServiceGroups
	}
	return nil
}

// HealthCheckResult aggregates the stdout output, stderr output and process
// exit status of a habitat health check
type HealthCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdout     string `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr     string `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	ExitStatus int32  `protobuf:"varint,3,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
}

func (x *HealthCheckResult) Reset() {
	*x = HealthCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResult) ProtoMessage() {}

func (x *HealthCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResult.ProtoReflect.Descriptor instead.
func (*HealthCheckResult) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{28}
}

func (x *HealthCheckResult) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *HealthCheckResult) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *HealthCheckResult) GetExitStatus() int32 {
	if x != nil {
		return x.ExitStatus
	}
	return 0
}

// Telemetry
type UpdateTelemetryReportedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last application service telemetry reported date
	LastTelemetryReportedAt string `protobuf:"bytes,1,opt,name=last_telemetry_reported_at,json=lastTelemetryReportedAt,proto3" json:"last_telemetry_reported_at,omitempty"`
}

func (x *UpdateTelemetryReportedRequest) Reset() {
	*x = UpdateTelemetryReportedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTelemetryReportedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTelemetryReportedRequest) ProtoMessage() {}

func (x *UpdateTelemetryReportedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTelemetryReportedRequest.ProtoReflect.Descriptor instead.
func (*UpdateTelemetryReportedRequest) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateTelemetryReportedRequest) GetLastTelemetryReportedAt() string {
	if x != nil {
		return x.LastTelemetryReportedAt
	}
	return ""
}

type UpdateTelemetryReportedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTelemetryReportedResponse) Reset() {
	*x = UpdateTelemetryReportedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTelemetryReportedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTelemetryReportedResponse) ProtoMessage() {}

func (x *UpdateTelemetryReportedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTelemetryReportedResponse.ProtoReflect.Descriptor instead.
func (*UpdateTelemetryReportedResponse) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{30}
}

type GetServicesUsageCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServicesUsageCountRequest) Reset() {
	*x = GetServicesUsageCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesUsageCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesUsageCountRequest) ProtoMessage() {}

func (x *GetServicesUsageCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesUsageCountRequest.ProtoReflect.Descriptor instead.
func (*GetServicesUsageCountRequest) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{31}
}

type GetServicesUsageCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique services count in a duration
	TotalServices int64 `protobuf:"varint,1,opt,name=total_services,json=totalServices,proto3" json:"total_services,omitempty"`
	// number of days since telematics was last posted
	DaysSinceLastPost int64 `protobuf:"varint,2,opt,name=days_since_last_post,json=daysSinceLastPost,proto3" json:"days_since_last_post,omitempty"`
}

func (x *GetServicesUsageCountResponse) Reset() {
	*x = GetServicesUsageCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_applications_applications_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesUsageCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesUsageCountResponse) ProtoMessage() {}

func (x *GetServicesUsageCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_applications_applications_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesUsageCountResponse.ProtoReflect.Descriptor instead.
func (*GetServicesUsageCountResponse) Descriptor() ([]byte, []int) {
	return file_external_applications_applications_proto_rawDescGZIP(), []int{32}
}

func (x *GetServicesUsageCountResponse) GetTotalServices() int64 {
	if x != nil {
		return x.TotalServices
	}
	return 0
}

func (x *GetServicesUsageCountResponse) GetDaysSinceLastPost() int64 {
	if x != nil {
		return x.DaysSinceLastPost
	}
	return 0
}

var File_external_applications_applications_proto protoreflect.FileDescriptor

var file_external_applications_applications_proto_rawDesc = []byte{
	0x0a, 0x28, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x79, 0x0a, 0x19, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x42, 0x79, 0x53, 0x47, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x53, 0x47, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x33, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x22, 0x29, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x12,
	0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x22, 0xc5, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6a, 0x6f, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xd5, 0x02, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12,
	0x3a, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x75, 0x65, 0x41, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x22,
	0x25, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x75, 0x6e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x22, 0x24, 0x0a, 0x22, 0x52, 0x75, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a,
	0x26, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x22, 0x2b, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x22, 0x2a, 0x0a, 0x28, 0x52,
	0x75, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x06, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4f, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x11,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x36, 0x0a, 0x1c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0xb0, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x62, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x6e,
	0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x64,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x53, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0x64, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x65, 0x78, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x64, 0x61, 0x79, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x2a, 0x48, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x11, 0x32,
	0xa5, 0x29, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf4, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x30, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x7f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x3d, 0x0a, 0x1a,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x92, 0x41, 0x10, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x9e,
	0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x92, 0x41, 0x10, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0xe6, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x8a, 0xb5, 0x18, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x3a, 0x6c, 0x69, 0x73, 0x74, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6e,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x58, 0x8a, 0xb5, 0x18, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x30, 0x01, 0x12, 0xa1, 0x02, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x8d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x92, 0x41, 0x10, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x8c, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x47, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x53,
	0x47, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79,
	0x53, 0x47, 0x52, 0x65, 0x73, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x92, 0x41, 0x10, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xf2,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x7a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12,
	0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x1c, 0x0a,
	0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x21, 0x12,
	0x1f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74,
	0x92, 0x41, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x8c, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x1c, 0x0a, 0x1a,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x92,
	0x41, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x9b, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x96, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36,
	0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x23, 0x12, 0x21, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x92, 0x41, 0x10,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x8a, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x2b,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x23, 0x12, 0x21, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xdd, 0x01,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x8a, 0xb5, 0x18, 0x18, 0x0a, 0x16, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x8a, 0xb5, 0x18, 0x1b, 0x12, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x67,
	0x65, 0x74, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0xb1, 0x02,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x4d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x91, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x8a, 0xb5, 0x18, 0x19, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x8a, 0xb5, 0x18, 0x1d, 0x12, 0x1b, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a,
	0x67, 0x65, 0x74, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xbd, 0x02, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x43, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x97, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x22, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a,
	0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x19, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a,
	0xb5, 0x18, 0x20, 0x12, 0x1e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xb6, 0x02, 0x0a, 0x1a, 0x52, 0x75, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4a, 0x6f, 0x62,
	0x12, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a,
	0x42, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x75, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x19, 0x0a,
	0x17, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x20, 0x12, 0x1e, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x92, 0x41, 0x0b, 0x0a,
	0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbb, 0x02, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x46, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x98, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x8a, 0xb5, 0x18, 0x19,
	0x0a, 0x17, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x1d, 0x12, 0x1b, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc7, 0x02, 0x0a, 0x26, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x4a, 0x6f, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x49, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x22, 0x9e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x22, 0x44, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x19, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x8a, 0xb5, 0x18, 0x20, 0x12, 0x1e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xcf, 0x02, 0x0a, 0x20, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x43, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x48, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x75,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x22,
	0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x72,
	0x75, 0x6e, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x19, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x8a, 0xb5, 0x18, 0x20, 0x12, 0x1e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x1a, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x27, 0x0a, 0x0e, 0x69, 0x61, 0x6d, 0x3a, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x15, 0x69, 0x61, 0x6d, 0x3a, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x3a, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0xf6,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x27,
	0x0a, 0x0e, 0x69, 0x61, 0x6d, 0x3a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x12, 0x15, 0x69, 0x61, 0x6d, 0x3a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x3a, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_applications_applications_proto_rawDescOnce sync.Once
	file_external_applications_applications_proto_rawDescData = file_external_applications_applications_proto_rawDesc
)

func file_external_applications_applications_proto_rawDescGZIP() []byte {
	file_external_applications_applications_proto_rawDescOnce.Do(func() {
		file_external_applications_applications_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_applications_applications_proto_rawDescData)
	})
	return file_external_applications_applications_proto_rawDescData
}

var file_external_applications_applications_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_external_applications_applications_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_external_applications_applications_proto_goTypes = []interface{}{
	(HealthStatus)(0),                                 // 0: chef.automate.api.applications.HealthStatus
	(*ServicesReq)(nil),                               // 1: chef.automate.api.applications.ServicesReq
	(*ServicesDistinctValuesReq)(nil),                 // 2: chef.automate.api.applications.ServicesDistinctValuesReq
	(*ServicesBySGReq)(nil),                           // 3: chef.automate.api.applications.ServicesBySGReq
	(*ServicesBySGRes)(nil),                           // 4: chef.automate.api.applications.ServicesBySGRes
	(*ServicesRes)(nil),                               // 5: chef.automate.api.applications.ServicesRes
	(*ServicesDistinctValuesRes)(nil),                 // 6: chef.automate.api.applications.ServicesDistinctValuesRes
	(*DisconnectedServicesReq)(nil),                   // 7: chef.automate.api.applications.DisconnectedServicesReq
	(*DeleteServicesByIDReq)(nil),                     // 8: chef.automate.api.applications.DeleteServicesByIDReq
	(*ServicesStatsReq)(nil),                          // 9: chef.automate.api.applications.ServicesStatsReq
	(*ServicesStatsRes)(nil),                          // 10: chef.automate.api.applications.ServicesStatsRes
	(*PeriodicJobConfig)(nil),                         // 11: chef.automate.api.applications.PeriodicJobConfig
	(*PeriodicMandatoryJobConfig)(nil),                // 12: chef.automate.api.applications.PeriodicMandatoryJobConfig
	(*PeriodicJobInfo)(nil),                           // 13: chef.automate.api.applications.PeriodicJobInfo
	(*GetDisconnectedServicesConfigReq)(nil),          // 14: chef.automate.api.applications.GetDisconnectedServicesConfigReq
	(*UpdateDisconnectedServicesConfigRes)(nil),       // 15: chef.automate.api.applications.UpdateDisconnectedServicesConfigRes
	(*RunDisconnectedServicesJobReq)(nil),             // 16: chef.automate.api.applications.RunDisconnectedServicesJobReq
	(*RunDisconnectedServicesJobResponse)(nil),        // 17: chef.automate.api.applications.RunDisconnectedServicesJobResponse
	(*GetDeleteDisconnectedServicesConfigReq)(nil),    // 18: chef.automate.api.applications.GetDeleteDisconnectedServicesConfigReq
	(*UpdateDeleteDisconnectedServicesConfigRes)(nil), // 19: chef.automate.api.applications.UpdateDeleteDisconnectedServicesConfigRes
	(*RunDeleteDisconnectedServicesJobReq)(nil),       // 20: chef.automate.api.applications.RunDeleteDisconnectedServicesJobReq
	(*RunDeleteDisconnectedServicesJobResponse)(nil),  // 21: chef.automate.api.applications.RunDeleteDisconnectedServicesJobResponse
	(*Service)(nil),                                   // 22: chef.automate.api.applications.Service
	(*ServiceGroupsHealthCountsReq)(nil),              // 23: chef.automate.api.applications.ServiceGroupsHealthCountsReq
	(*ServiceGroupsReq)(nil),                          // 24: chef.automate.api.applications.ServiceGroupsReq
	(*ServiceGroup)(nil),                              // 25: chef.automate.api.applications.ServiceGroup
	(*HealthCounts)(nil),                              // 26: chef.automate.api.applications.HealthCounts
	(*PackageIdent)(nil),                              // 27: chef.automate.api.applications.PackageIdent
	(*ServiceGroups)(nil),                             // 28: chef.automate.api.applications.ServiceGroups
	(*HealthCheckResult)(nil),                         // 29: chef.automate.api.applications.HealthCheckResult
	(*UpdateTelemetryReportedRequest)(nil),            // 30: chef.automate.api.applications.UpdateTelemetryReportedRequest
	(*UpdateTelemetryReportedResponse)(nil),           // 31: chef.automate.api.applications.UpdateTelemetryReportedResponse
	(*GetServicesUsageCountRequest)(nil),              // 32: chef.automate.api.applications.GetServicesUsageCountRequest
	(*GetServicesUsageCountResponse)(nil),             // 33: chef.automate.api.applications.GetServicesUsageCountResponse
	(*query.Pagination)(nil),                          // 34: chef.automate.api.common.query.Pagination
	(*query.Sorting)(nil),                             // 35: chef.automate.api.common.query.Sorting
	(*wrapperspb.BoolValue)(nil),                      // 36: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),                     // 37: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                       // 38: google.protobuf.Duration
	(*version.VersionInfoRequest)(nil),                // 39: chef.automate.api.common.version.VersionInfoRequest
	(*version.VersionInfo)(nil),                       // 40: chef.automate.api.common.version.VersionInfo
}
var file_external_applications_applications_proto_depIdxs = []int32{
	34, // 0: chef.automate.api.applications.ServicesReq.pagination:type_name -> chef.automate.api.common.query.Pagination
	35, // 1: chef.automate.api.applications.ServicesReq.sorting:type_name -> chef.automate.api.common.query.Sorting
	34, // 2: chef.automate.api.applications.ServicesBySGReq.pagination:type_name -> chef.automate.api.common.query.Pagination
	35, // 3: chef.automate.api.applications.ServicesBySGReq.sorting:type_name -> chef.automate.api.common.query.Sorting
	22, // 4: chef.automate.api.applications.ServicesBySGRes.services:type_name -> chef.automate.api.applications.Service
	26, // 5: chef.automate.api.applications.ServicesBySGRes.services_health_counts:type_name -> chef.automate.api.applications.HealthCounts
	22, // 6: chef.automate.api.applications.ServicesRes.services:type_name -> chef.automate.api.applications.Service
	13, // 7: chef.automate.api.applications.PeriodicJobConfig.job_info:type_name -> chef.automate.api.applications.PeriodicJobInfo
	36, // 8: chef.automate.api.applications.PeriodicMandatoryJobConfig.running:type_name -> google.protobuf.BoolValue
	13, // 9: chef.automate.api.applications.PeriodicMandatoryJobConfig.job_info:type_name -> chef.automate.api.applications.PeriodicJobInfo
	37, // 10: chef.automate.api.applications.PeriodicJobInfo.last_enqueued_at:type_name -> google.protobuf.Timestamp
	37, // 11: chef.automate.api.applications.PeriodicJobInfo.last_started_at:type_name -> google.protobuf.Timestamp
	37, // 12: chef.automate.api.applications.PeriodicJobInfo.last_ended_at:type_name -> google.protobuf.Timestamp
	38, // 13: chef.automate.api.applications.PeriodicJobInfo.last_elapsed:type_name -> google.protobuf.Duration
	37, // 14: chef.automate.api.applications.PeriodicJobInfo.next_due_at:type_name -> google.protobuf.Timestamp
	0,  // 15: chef.automate.api.applications.Service.health_check:type_name -> chef.automate.api.applications.HealthStatus
	0,  // 16: chef.automate.api.applications.Service.previous_health_check:type_name -> chef.automate.api.applications.HealthStatus
	37, // 17: chef.automate.api.applications.Service.health_updated_at:type_name -> google.protobuf.Timestamp
	37, // 18: chef.automate.api.applications.Service.last_event_occurred_at:type_name -> google.protobuf.Timestamp
	29, // 19: chef.automate.api.applications.Service.health_check_result:type_name -> chef.automate.api.applications.HealthCheckResult
	34, // 20: chef.automate.api.applications.ServiceGroupsReq.pagination:type_name -> chef.automate.api.common.query.Pagination
	35, // 21: chef.automate.api.applications.ServiceGroupsReq.sorting:type_name -> chef.automate.api.common.query.Sorting
	0,  // 22: chef.automate.api.applications.ServiceGroup.status:type_name -> chef.automate.api.applications.HealthStatus
	26, // 23: chef.automate.api.applications.ServiceGroup.services_health_counts:type_name -> chef.automate.api.applications.HealthCounts
	25, // 24: chef.automate.api.applications.ServiceGroups.service_groups:type_name -> chef.automate.api.applications.ServiceGroup
	24, // 25: chef.automate.api.applications.ApplicationsService.GetServiceGroups:input_type -> chef.automate.api.applications.ServiceGroupsReq
	23, // 26: chef.automate.api.applications.ApplicationsService.GetServiceGroupsHealthCounts:input_type -> chef.automate.api.applications.ServiceGroupsHealthCountsReq
	1,  // 27: chef.automate.api.applications.ApplicationsService.GetServices:input_type -> chef.automate.api.applications.ServicesReq
	1,  // 28: chef.automate.api.applications.ApplicationsService.FindServices:input_type -> chef.automate.api.applications.ServicesReq
	2,  // 29: chef.automate.api.applications.ApplicationsService.GetServicesDistinctValues:input_type -> chef.automate.api.applications.ServicesDistinctValuesReq
	3,  // 30: chef.automate.api.applications.ApplicationsService.GetServicesBySG:input_type -> chef.automate.api.applications.ServicesBySGReq
	9,  // 31: chef.automate.api.applications.ApplicationsService.GetServicesStats:input_type -> chef.automate.api.applications.ServicesStatsReq
	7,  // 32: chef.automate.api.applications.ApplicationsService.GetDisconnectedServices:input_type -> chef.automate.api.applications.DisconnectedServicesReq
	7,  // 33: chef.automate.api.applications.ApplicationsService.DeleteDisconnectedServices:input_type -> chef.automate.api.applications.DisconnectedServicesReq
	8,  // 34: chef.automate.api.applications.ApplicationsService.DeleteServicesByID:input_type -> chef.automate.api.applications.DeleteServicesByIDReq
	39, // 35: chef.automate.api.applications.ApplicationsService.GetVersion:input_type -> chef.automate.api.common.version.VersionInfoRequest
	14, // 36: chef.automate.api.applications.ApplicationsService.GetDisconnectedServicesConfig:input_type -> chef.automate.api.applications.GetDisconnectedServicesConfigReq
	12, // 37: chef.automate.api.applications.ApplicationsService.UpdateDisconnectedServicesConfig:input_type -> chef.automate.api.applications.PeriodicMandatoryJobConfig
	16, // 38: chef.automate.api.applications.ApplicationsService.RunDisconnectedServicesJob:input_type -> chef.automate.api.applications.RunDisconnectedServicesJobReq
	18, // 39: chef.automate.api.applications.ApplicationsService.GetDeleteDisconnectedServicesConfig:input_type -> chef.automate.api.applications.GetDeleteDisconnectedServicesConfigReq
	11, // 40: chef.automate.api.applications.ApplicationsService.UpdateDeleteDisconnectedServicesConfig:input_type -> chef.automate.api.applications.PeriodicJobConfig
	20, // 41: chef.automate.api.applications.ApplicationsService.RunDeleteDisconnectedServicesJob:input_type -> chef.automate.api.applications.RunDeleteDisconnectedServicesJobReq
	30, // 42: chef.automate.api.applications.ApplicationsService.UpdateTelemetryReported:input_type -> chef.automate.api.applications.UpdateTelemetryReportedRequest
	32, // 43: chef.automate.api.applications.ApplicationsService.GetServicesUsageCount:input_type -> chef.automate.api.applications.GetServicesUsageCountRequest
	28, // 44: chef.automate.api.applications.ApplicationsService.GetServiceGroups:output_type -> chef.automate.api.applications.ServiceGroups
	26, // 45: chef.automate.api.applications.ApplicationsService.GetServiceGroupsHealthCounts:output_type -> chef.automate.api.applications.HealthCounts
	5,  // 46: chef.automate.api.applications.ApplicationsService.GetServices:output_type -> chef.automate.api.applications.ServicesRes
	22, // 47: chef.automate.api.applications.ApplicationsService.FindServices:output_type -> chef.automate.api.applications.Service
	6,  // 48: chef.automate.api.applications.ApplicationsService.GetServicesDistinctValues:output_type -> chef.automate.api.applications.ServicesDistinctValuesRes
	4,  // 49: chef.automate.api.applications.ApplicationsService.GetServicesBySG:output_type -> chef.automate.api.applications.ServicesBySGRes
	10, // 50: chef.automate.api.applications.ApplicationsService.GetServicesStats:output_type -> chef.automate.api.applications.ServicesStatsRes
	5,  // 51: chef.automate.api.applications.ApplicationsService.GetDisconnectedServices:output_type -> chef.automate.api.applications.ServicesRes
	5,  // 52: chef.automate.api.applications.ApplicationsService.DeleteDisconnectedServices:output_type -> chef.automate.api.applications.ServicesRes
	5,  // 53: chef.automate.api.applications.ApplicationsService.DeleteServicesByID:output_type -> chef.automate.api.applications.ServicesRes
	40, // 54: chef.automate.api.applications.ApplicationsService.GetVersion:output_type -> chef.automate.api.common.version.VersionInfo
	12, // 55: chef.automate.api.applications.ApplicationsService.GetDisconnectedServicesConfig:output_type -> chef.automate.api.applications.PeriodicMandatoryJobConfig
	15, // 56: chef.automate.api.applications.ApplicationsService.UpdateDisconnectedServicesConfig:output_type -> chef.automate.api.applications.UpdateDisconnectedServicesConfigRes
	17, // 57: chef.automate.api.applications.ApplicationsService.RunDisconnectedServicesJob:output_type -> chef.automate.api.applications.RunDisconnectedServicesJobResponse
	11, // 58: chef.automate.api.applications.ApplicationsService.GetDeleteDisconnectedServicesConfig:output_type -> chef.automate.api.applications.PeriodicJobConfig
	19, // 59: chef.automate.api.applications.ApplicationsService.UpdateDeleteDisconnectedServicesConfig:output_type -> chef.automate.api.applications.UpdateDeleteDisconnectedServicesConfigRes
	21, // 60: chef.automate.api.applications.ApplicationsService.RunDeleteDisconnectedServicesJob:output_type -> chef.automate.api.applications.RunDeleteDisconnectedServicesJobResponse
	31, // 61: chef.automate.api.applications.ApplicationsService.UpdateTelemetryReported:output_type -> chef.automate.api.applications.UpdateTelemetryReportedResponse
	33, // 62: chef.automate.api.applications.ApplicationsService.GetServicesUsageCount:output_type -> chef.automate.api.applications.GetServicesUsageCountResponse
	44, // [44:63] is the sub-list for method output_type
	25, // [25:44] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_external_applications_applications_proto_init() }
func file_external_applications_applications_proto_init() {
	if File_external_applications_applications_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_external_applications_applications_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicesDistinctValuesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicesBySGReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicesBySGRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicesDistinctValuesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectedServicesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServicesByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicesStatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicesStatsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicJobConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicMandatoryJobConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicJobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDisconnectedServicesConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDisconnectedServicesConfigRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDisconnectedServicesJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDisconnectedServicesJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeleteDisconnectedServicesConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeleteDisconnectedServicesConfigRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDeleteDisconnectedServicesJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDeleteDisconnectedServicesJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGroupsHealthCountsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageIdent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTelemetryReportedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTelemetryReportedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesUsageCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_applications_applications_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesUsageCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_applications_applications_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_applications_applications_proto_goTypes,
		DependencyIndexes: file_external_applications_applications_proto_depIdxs,
		EnumInfos:         file_external_applications_applications_proto_enumTypes,
		MessageInfos:      file_external_applications_applications_proto_msgTypes,
	}.Build()
	File_external_applications_applications_proto = out.File
	file_external_applications_applications_proto_rawDesc = nil
	file_external_applications_applications_proto_goTypes = nil
	file_external_applications_applications_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApplicationsServiceClient is the client API for ApplicationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationsServiceClient interface {
	//
	//List Service Groups
	//
	//Lists service groups with name, health information, and application, environment, package, release metadata.
	//Accepts pagination, sorting, search, and status filters.
	//
	//Example:
	//```
	//applications/service-groups?sorting.field=percent_ok&sorting.order=ASC&pagination.page=1&pagination.size=25
	//```
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServiceGroups(ctx context.Context, in *ServiceGroupsReq, opts ...grpc.CallOption) (*ServiceGroups, error)
	//
	//List Service Groups Health Counts
	//
	//Lists the total service group health reports by critical, warning, ok and unknown responses. Supports search and status filtering.
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServiceGroupsHealthCounts(ctx context.Context, in *ServiceGroupsHealthCountsReq, opts ...grpc.CallOption) (*HealthCounts, error)
	//
	//List Services
	//
	//Lists service health status and service metadata for services.
	//Supports pagination and search and status filtering. For a list of services for a specific service-group see "List Services for a Service Group" (GetServicesBySG endpoint).
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServices(ctx context.Context, in *ServicesReq, opts ...grpc.CallOption) (*ServicesRes, error)
	//
	//Find Services
	//
	//Lists service health status and service metadata for services matching the given criteria. All matching services are returned via a stream response.
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	FindServices(ctx context.Context, in *ServicesReq, opts ...grpc.CallOption) (ApplicationsService_FindServicesClient, error)
	//
	//List Filter Values
	//
	//Lists all of the possible filter values for a given valid field.
	//Limit the returned values by providing at one or more characters in the `query_fragment` parameter.
	//Supports wildcard (* and ?)
	//
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServicesDistinctValues(ctx context.Context, in *ServicesDistinctValuesReq, opts ...grpc.CallOption) (*ServicesDistinctValuesRes, error)
	//
	//List Services for a Service Group
	//
	//List the services for a service group with health status and service metadata.
	//Uses the service group ID generated by Chef Automate instead of the Chef Habitat- provided ID.
	//Supports pagination and filtering.
	//
	//Example:
	//```
	//applications/service-groups/1dfff679054c60a10c51d059b6dbf81a765c46f8d3e8ce0752b22ffe8d4d9716?pagination.page=1&pagination.size=25
	//```
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServicesBySG(ctx context.Context, in *ServicesBySGReq, opts ...grpc.CallOption) (*ServicesBySGRes, error)
	//
	//Show Summary
	//
	//Shows a summary of service-groups, services, deployments, and supervisors.
	//Used for telemetry.
	//Does not support filtering.
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServicesStats(ctx context.Context, in *ServicesStatsReq, opts ...grpc.CallOption) (*ServicesStatsRes, error)
	//
	//Mark Services as Disconnected
	//
	//Marks services as disconnected based on the `threshold_seconds` setting.
	//This function is not used by the API or CLI and is here for testing purposes.
	//The functionality is currently covered by a periodically running job that can be configured
	//by utilizing the `UpdateDisconnectedServicesConfig` endpoint.
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetDisconnectedServices(ctx context.Context, in *DisconnectedServicesReq, opts ...grpc.CallOption) (*ServicesRes, error)
	//
	//Remove Disconnected Services
	//
	//Removes services marked as disconnected based on the `threshold_seconds` setting.
	//This function is not used by the API or CLI and is here for testing purposes.
	//The functionality is currently covered by a periodically running job that can be configured using `UpdateDeleteDisconnectedServicesConfig`.
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:delete
	//```
	DeleteDisconnectedServices(ctx context.Context, in *DisconnectedServicesReq, opts ...grpc.CallOption) (*ServicesRes, error)
	//
	//Delete the services with the given IDs
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:delete
	//```
	DeleteServicesByID(ctx context.Context, in *DeleteServicesByIDReq, opts ...grpc.CallOption) (*ServicesRes, error)
	//
	//Show Version
	//
	//Displays the current version of the applications-service
	//
	//Authorization Action:
	//```
	//system:serviceVersion:get
	//```
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	//
	//Show 'Disconnected Services' configuration
	//
	//Returns the configuration for the task that marks services as disconnected. The `threshold` setting defines the period of time between the last report from a node and the moment when Chef Automate marks it as disconnected. `Threshold` is a string that follows Elasticsearch's date math expressions.
	//This task is always enabled, cannot be disabled. Because this task runs continuously, the response does not return information about its status.
	//
	//Authorization Action:
	//```
	//retention:serviceGroups:get
	//```
	GetDisconnectedServicesConfig(ctx context.Context, in *GetDisconnectedServicesConfigReq, opts ...grpc.CallOption) (*PeriodicMandatoryJobConfig, error)
	//
	//Change 'Disconnected Services' Configuration
	//
	//Changes the configuration for the task that marks services as disconnected.
	//
	//The periodic task to check for disconnected services can be enabled or
	//disabled by setting the 'running' setting to `true` or `false`, respectively.
	//When disabled, no services will be marked disconnected, regardless of the
	//time that has elapsed since the last health check. It is not recommened to
	//disable the job.
	//
	//The frequency of the job's execution can be modified by changing the
	//'recurrence'. This setting is a string
	//[as defined in section 4.3.10 of RFC 2445](https://www.ietf.org/rfc/rfc2445.txt).
	//By default, the task runs every 60 seconds. It is not recommended to change
	//the recurrence.
	//
	//When enabled, services are marked disconnected when the time elapsed since
	//Automate last received a health check exceeds 'threshold'. Threshold is a
	//string that follows Elasticsearch's date math expressions.
	//
	//
	//Example:
	//```
	///retention/service_groups/disconnected_services/config
	//'{
	//"threshold": "15m",
	//"running": true,
	//"recurrence": "FREQ=SECONDLY;DTSTART=20200612T182166Z;INTERVAL=60"
	//}'
	//```
	//
	//Authorization Action:
	//```
	//retention:serviceGroups:update
	//```
	UpdateDisconnectedServicesConfig(ctx context.Context, in *PeriodicMandatoryJobConfig, opts ...grpc.CallOption) (*UpdateDisconnectedServicesConfigRes, error)
	//
	//Runs the job to mark services as disconnected immediately.
	//
	//Authorization Action:
	//```
	//retention:serviceGroups:update
	//```
	RunDisconnectedServicesJob(ctx context.Context, in *RunDisconnectedServicesJobReq, opts ...grpc.CallOption) (*RunDisconnectedServicesJobResponse, error)
	//
	//Show 'Remove Disconnected Services' Configuration
	//
	//Displays configuration for the task that deletes services marked as disconnected
	//after 'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
	//This job is disabled if running is set to false.
	//
	//Authorization Action:
	//```
	//retention:serviceGroups:get
	//```
	GetDeleteDisconnectedServicesConfig(ctx context.Context, in *GetDeleteDisconnectedServicesConfigReq, opts ...grpc.CallOption) (*PeriodicJobConfig, error)
	//
	//Change 'Remove Disconnected Services' Configuration
	//
	//Updates configuration information for the task that deletes services marked as disconnected
	//after 'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
	//This job can be disabled by setting `"running": false`.
	//
	//The frequency of the job's execution can be modified by changing the
	//'recurrence'. This setting is a string
	//[as defined in section 4.3.10 of RFC 2445](https://www.ietf.org/rfc/rfc2445.txt).
	//By default, the task runs every 60 seconds. It is not recommended to change
	//the recurrence.
	//
	//Example:
	//```
	//service_groups/delete_disconnected_services/config" -d
	//'{
	//"threshold": "1d",
	//"running":true,
	//"recurrence": "FREQ=SECONDLY;DTSTART=20200612T182166Z;INTERVAL=60"
	//}'
	//```
	//
	//Authorization Action:
	//```
	//retention:serviceGroups:update
	//```
	UpdateDeleteDisconnectedServicesConfig(ctx context.Context, in *PeriodicJobConfig, opts ...grpc.CallOption) (*UpdateDeleteDisconnectedServicesConfigRes, error)
	RunDeleteDisconnectedServicesJob(ctx context.Context, in *RunDeleteDisconnectedServicesJobReq, opts ...grpc.CallOption) (*RunDeleteDisconnectedServicesJobResponse, error)
	UpdateTelemetryReported(ctx context.Context, in *UpdateTelemetryReportedRequest, opts ...grpc.CallOption) (*UpdateTelemetryReportedResponse, error)
	GetServicesUsageCount(ctx context.Context, in *GetServicesUsageCountRequest, opts ...grpc.CallOption) (*GetServicesUsageCountResponse, error)
}

type applicationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsServiceClient(cc grpc.ClientConnInterface) ApplicationsServiceClient {
	return &applicationsServiceClient{cc}
}

func (c *applicationsServiceClient) GetServiceGroups(ctx context.Context, in *ServiceGroupsReq, opts ...grpc.CallOption) (*ServiceGroups, error) {
	out := new(ServiceGroups)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServiceGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServiceGroupsHealthCounts(ctx context.Context, in *ServiceGroupsHealthCountsReq, opts ...grpc.CallOption) (*HealthCounts, error) {
	out := new(HealthCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServiceGroupsHealthCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServices(ctx context.Context, in *ServicesReq, opts ...grpc.CallOption) (*ServicesRes, error) {
	out := new(ServicesRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) FindServices(ctx context.Context, in *ServicesReq, opts ...grpc.CallOption) (ApplicationsService_FindServicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ApplicationsService_serviceDesc.Streams[0], "/chef.automate.api.applications.ApplicationsService/FindServices", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationsServiceFindServicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApplicationsService_FindServicesClient interface {
	Recv() (*Service, error)
	grpc.ClientStream
}

type applicationsServiceFindServicesClient struct {
	grpc.ClientStream
}

func (x *applicationsServiceFindServicesClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationsServiceClient) GetServicesDistinctValues(ctx context.Context, in *ServicesDistinctValuesReq, opts ...grpc.CallOption) (*ServicesDistinctValuesRes, error) {
	out := new(ServicesDistinctValuesRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServicesDistinctValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServicesBySG(ctx context.Context, in *ServicesBySGReq, opts ...grpc.CallOption) (*ServicesBySGRes, error) {
	out := new(ServicesBySGRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServicesBySG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServicesStats(ctx context.Context, in *ServicesStatsReq, opts ...grpc.CallOption) (*ServicesStatsRes, error) {
	out := new(ServicesStatsRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServicesStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetDisconnectedServices(ctx context.Context, in *DisconnectedServicesReq, opts ...grpc.CallOption) (*ServicesRes, error) {
	out := new(ServicesRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetDisconnectedServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) DeleteDisconnectedServices(ctx context.Context, in *DisconnectedServicesReq, opts ...grpc.CallOption) (*ServicesRes, error) {
	out := new(ServicesRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/DeleteDisconnectedServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) DeleteServicesByID(ctx context.Context, in *DeleteServicesByIDReq, opts ...grpc.CallOption) (*ServicesRes, error) {
	out := new(ServicesRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/DeleteServicesByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetDisconnectedServicesConfig(ctx context.Context, in *GetDisconnectedServicesConfigReq, opts ...grpc.CallOption) (*PeriodicMandatoryJobConfig, error) {
	out := new(PeriodicMandatoryJobConfig)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetDisconnectedServicesConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) UpdateDisconnectedServicesConfig(ctx context.Context, in *PeriodicMandatoryJobConfig, opts ...grpc.CallOption) (*UpdateDisconnectedServicesConfigRes, error) {
	out := new(UpdateDisconnectedServicesConfigRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/UpdateDisconnectedServicesConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) RunDisconnectedServicesJob(ctx context.Context, in *RunDisconnectedServicesJobReq, opts ...grpc.CallOption) (*RunDisconnectedServicesJobResponse, error) {
	out := new(RunDisconnectedServicesJobResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/RunDisconnectedServicesJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetDeleteDisconnectedServicesConfig(ctx context.Context, in *GetDeleteDisconnectedServicesConfigReq, opts ...grpc.CallOption) (*PeriodicJobConfig, error) {
	out := new(PeriodicJobConfig)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetDeleteDisconnectedServicesConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) UpdateDeleteDisconnectedServicesConfig(ctx context.Context, in *PeriodicJobConfig, opts ...grpc.CallOption) (*UpdateDeleteDisconnectedServicesConfigRes, error) {
	out := new(UpdateDeleteDisconnectedServicesConfigRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/UpdateDeleteDisconnectedServicesConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) RunDeleteDisconnectedServicesJob(ctx context.Context, in *RunDeleteDisconnectedServicesJobReq, opts ...grpc.CallOption) (*RunDeleteDisconnectedServicesJobResponse, error) {
	out := new(RunDeleteDisconnectedServicesJobResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/RunDeleteDisconnectedServicesJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) UpdateTelemetryReported(ctx context.Context, in *UpdateTelemetryReportedRequest, opts ...grpc.CallOption) (*UpdateTelemetryReportedResponse, error) {
	out := new(UpdateTelemetryReportedResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/UpdateTelemetryReported", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetServicesUsageCount(ctx context.Context, in *GetServicesUsageCountRequest, opts ...grpc.CallOption) (*GetServicesUsageCountResponse, error) {
	out := new(GetServicesUsageCountResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.applications.ApplicationsService/GetServicesUsageCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServiceServer is the server API for ApplicationsService service.
type ApplicationsServiceServer interface {
	//
	//List Service Groups
	//
	//Lists service groups with name, health information, and application, environment, package, release metadata.
	//Accepts pagination, sorting, search, and status filters.
	//
	//Example:
	//```
	//applications/service-groups?sorting.field=percent_ok&sorting.order=ASC&pagination.page=1&pagination.size=25
	//```
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServiceGroups(context.Context, *ServiceGroupsReq) (*ServiceGroups, error)
	//
	//List Service Groups Health Counts
	//
	//Lists the total service group health reports by critical, warning, ok and unknown responses. Supports search and status filtering.
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServiceGroupsHealthCounts(context.Context, *ServiceGroupsHealthCountsReq) (*HealthCounts, error)
	//
	//List Services
	//
	//Lists service health status and service metadata for services.
	//Supports pagination and search and status filtering. For a list of services for a specific service-group see "List Services for a Service Group" (GetServicesBySG endpoint).
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServices(context.Context, *ServicesReq) (*ServicesRes, error)
	//
	//Find Services
	//
	//Lists service health status and service metadata for services matching the given criteria. All matching services are returned via a stream response.
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	FindServices(*ServicesReq, ApplicationsService_FindServicesServer) error
	//
	//List Filter Values
	//
	//Lists all of the possible filter values for a given valid field.
	//Limit the returned values by providing at one or more characters in the `query_fragment` parameter.
	//Supports wildcard (* and ?)
	//
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServicesDistinctValues(context.Context, *ServicesDistinctValuesReq) (*ServicesDistinctValuesRes, error)
	//
	//List Services for a Service Group
	//
	//List the services for a service group with health status and service metadata.
	//Uses the service group ID generated by Chef Automate instead of the Chef Habitat- provided ID.
	//Supports pagination and filtering.
	//
	//Example:
	//```
	//applications/service-groups/1dfff679054c60a10c51d059b6dbf81a765c46f8d3e8ce0752b22ffe8d4d9716?pagination.page=1&pagination.size=25
	//```
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServicesBySG(context.Context, *ServicesBySGReq) (*ServicesBySGRes, error)
	//
	//Show Summary
	//
	//Shows a summary of service-groups, services, deployments, and supervisors.
	//Used for telemetry.
	//Does not support filtering.
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetServicesStats(context.Context, *ServicesStatsReq) (*ServicesStatsRes, error)
	//
	//Mark Services as Disconnected
	//
	//Marks services as disconnected based on the `threshold_seconds` setting.
	//This function is not used by the API or CLI and is here for testing purposes.
	//The functionality is currently covered by a periodically running job that can be configured
	//by utilizing the `UpdateDisconnectedServicesConfig` endpoint.
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:list
	//```
	GetDisconnectedServices(context.Context, *DisconnectedServicesReq) (*ServicesRes, error)
	//
	//Remove Disconnected Services
	//
	//Removes services marked as disconnected based on the `threshold_seconds` setting.
	//This function is not used by the API or CLI and is here for testing purposes.
	//The functionality is currently covered by a periodically running job that can be configured using `UpdateDeleteDisconnectedServicesConfig`.
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:delete
	//```
	DeleteDisconnectedServices(context.Context, *DisconnectedServicesReq) (*ServicesRes, error)
	//
	//Delete the services with the given IDs
	//
	//Authorization Action:
	//```
	//applications:serviceGroups:delete
	//```
	DeleteServicesByID(context.Context, *DeleteServicesByIDReq) (*ServicesRes, error)
	//
	//Show Version
	//
	//Displays the current version of the applications-service
	//
	//Authorization Action:
	//```
	//system:serviceVersion:get
	//```
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	//
	//Show 'Disconnected Services' configuration
	//
	//Returns the configuration for the task that marks services as disconnected. The `threshold` setting defines the period of time between the last report from a node and the moment when Chef Automate marks it as disconnected. `Threshold` is a string that follows Elasticsearch's date math expressions.
	//This task is always enabled, cannot be disabled. Because this task runs continuously, the response does not return information about its status.
	//
	//Authorization Action:
	//```
	//retention:serviceGroups:get
	//```
	GetDisconnectedServicesConfig(context.Context, *GetDisconnectedServicesConfigReq) (*PeriodicMandatoryJobConfig, error)
	//
	//Change 'Disconnected Services' Configuration
	//
	//Changes the configuration for the task that marks services as disconnected.
	//
	//The periodic task to check for disconnected services can be enabled or
	//disabled by setting the 'running' setting to `true` or `false`, respectively.
	//When disabled, no services will be marked disconnected, regardless of the
	//time that has elapsed since the last health check. It is not recommened to
	//disable the job.
	//
	//The frequency of the job's execution can be modified by changing the
	//'recurrence'. This setting is a string
	//[as defined in section 4.3.10 of RFC 2445](https://www.ietf.org/rfc/rfc2445.txt).
	//By default, the task runs every 60 seconds. It is not recommended to change
	//the recurrence.
	//
	//When enabled, services are marked disconnected when the time elapsed since
	//Automate last received a health check exceeds 'threshold'. Threshold is a
	//string that follows Elasticsearch's date math expressions.
	//
	//
	//Example:
	//```
	///retention/service_groups/disconnected_services/config
	//'{
	//"threshold": "15m",
	//"running": true,
	//"recurrence": "FREQ=SECONDLY;DTSTART=20200612T182166Z;INTERVAL=60"
	//}'
	//```
	//
	//Authorization Action:
	//```
	//retention:serviceGroups:update
	//```
	UpdateDisconnectedServicesConfig(context.Context, *PeriodicMandatoryJobConfig) (*UpdateDisconnectedServicesConfigRes, error)
	//
	//Runs the job to mark services as disconnected immediately.
	//
	//Authorization Action:
	//```
	//retention:serviceGroups:update
	//```
	RunDisconnectedServicesJob(context.Context, *RunDisconnectedServicesJobReq) (*RunDisconnectedServicesJobResponse, error)
	//
	//Show 'Remove Disconnected Services' Configuration
	//
	//Displays configuration for the task that deletes services marked as disconnected
	//after 'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
	//This job is disabled if running is set to false.
	//
	//Authorization Action:
	//```
	//retention:serviceGroups:get
	//```
	GetDeleteDisconnectedServicesConfig(context.Context, *GetDeleteDisconnectedServicesConfigReq) (*PeriodicJobConfig, error)
	//
	//Change 'Remove Disconnected Services' Configuration
	//
	//Updates configuration information for the task that deletes services marked as disconnected
	//after 'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
	//This job can be disabled by setting `"running": false`.
	//
	//The frequency of the job's execution can be modified by changing the
	//'recurrence'. This setting is a string
	//[as defined in section 4.3.10 of RFC 2445](https://www.ietf.org/rfc/rfc2445.txt).
	//By default, the task runs every 60 seconds. It is not recommended to change
	//the recurrence.
	//
	//Example:
	//```
	//service_groups/delete_disconnected_services/config" -d
	//'{
	//"threshold": "1d",
	//"running":true,
	//"recurrence": "FREQ=SECONDLY;DTSTART=20200612T182166Z;INTERVAL=60"
	//}'
	//```
	//
	//Authorization Action:
	//```
	//retention:serviceGroups:update
	//```
	UpdateDeleteDisconnectedServicesConfig(context.Context, *PeriodicJobConfig) (*UpdateDeleteDisconnectedServicesConfigRes, error)
	RunDeleteDisconnectedServicesJob(context.Context, *RunDeleteDisconnectedServicesJobReq) (*RunDeleteDisconnectedServicesJobResponse, error)
	UpdateTelemetryReported(context.Context, *UpdateTelemetryReportedRequest) (*UpdateTelemetryReportedResponse, error)
	GetServicesUsageCount(context.Context, *GetServicesUsageCountRequest) (*GetServicesUsageCountResponse, error)
}

// UnimplementedApplicationsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApplicationsServiceServer struct {
}

func (*UnimplementedApplicationsServiceServer) GetServiceGroups(context.Context, *ServiceGroupsReq) (*ServiceGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceGroups not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServiceGroupsHealthCounts(context.Context, *ServiceGroupsHealthCountsReq) (*HealthCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceGroupsHealthCounts not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServices(context.Context, *ServicesReq) (*ServicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (*UnimplementedApplicationsServiceServer) FindServices(*ServicesReq, ApplicationsService_FindServicesServer) error {
	return status.Errorf(codes.Unimplemented, "method FindServices not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServicesDistinctValues(context.Context, *ServicesDistinctValuesReq) (*ServicesDistinctValuesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesDistinctValues not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServicesBySG(context.Context, *ServicesBySGReq) (*ServicesBySGRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesBySG not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServicesStats(context.Context, *ServicesStatsReq) (*ServicesStatsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesStats not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetDisconnectedServices(context.Context, *DisconnectedServicesReq) (*ServicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisconnectedServices not implemented")
}
func (*UnimplementedApplicationsServiceServer) DeleteDisconnectedServices(context.Context, *DisconnectedServicesReq) (*ServicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDisconnectedServices not implemented")
}
func (*UnimplementedApplicationsServiceServer) DeleteServicesByID(context.Context, *DeleteServicesByIDReq) (*ServicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServicesByID not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetDisconnectedServicesConfig(context.Context, *GetDisconnectedServicesConfigReq) (*PeriodicMandatoryJobConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisconnectedServicesConfig not implemented")
}
func (*UnimplementedApplicationsServiceServer) UpdateDisconnectedServicesConfig(context.Context, *PeriodicMandatoryJobConfig) (*UpdateDisconnectedServicesConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisconnectedServicesConfig not implemented")
}
func (*UnimplementedApplicationsServiceServer) RunDisconnectedServicesJob(context.Context, *RunDisconnectedServicesJobReq) (*RunDisconnectedServicesJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunDisconnectedServicesJob not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetDeleteDisconnectedServicesConfig(context.Context, *GetDeleteDisconnectedServicesConfigReq) (*PeriodicJobConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeleteDisconnectedServicesConfig not implemented")
}
func (*UnimplementedApplicationsServiceServer) UpdateDeleteDisconnectedServicesConfig(context.Context, *PeriodicJobConfig) (*UpdateDeleteDisconnectedServicesConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeleteDisconnectedServicesConfig not implemented")
}
func (*UnimplementedApplicationsServiceServer) RunDeleteDisconnectedServicesJob(context.Context, *RunDeleteDisconnectedServicesJobReq) (*RunDeleteDisconnectedServicesJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunDeleteDisconnectedServicesJob not implemented")
}
func (*UnimplementedApplicationsServiceServer) UpdateTelemetryReported(context.Context, *UpdateTelemetryReportedRequest) (*UpdateTelemetryReportedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelemetryReported not implemented")
}
func (*UnimplementedApplicationsServiceServer) GetServicesUsageCount(context.Context, *GetServicesUsageCountRequest) (*GetServicesUsageCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesUsageCount not implemented")
}

func RegisterApplicationsServiceServer(s *grpc.Server, srv ApplicationsServiceServer) {
	s.RegisterService(&_ApplicationsService_serviceDesc, srv)
}

func _ApplicationsService_GetServiceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServiceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServiceGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServiceGroups(ctx, req.(*ServiceGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServiceGroupsHealthCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceGroupsHealthCountsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServiceGroupsHealthCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServiceGroupsHealthCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServiceGroupsHealthCounts(ctx, req.(*ServiceGroupsHealthCountsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServices(ctx, req.(*ServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_FindServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServicesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationsServiceServer).FindServices(m, &applicationsServiceFindServicesServer{stream})
}

type ApplicationsService_FindServicesServer interface {
	Send(*Service) error
	grpc.ServerStream
}

type applicationsServiceFindServicesServer struct {
	grpc.ServerStream
}

func (x *applicationsServiceFindServicesServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

func _ApplicationsService_GetServicesDistinctValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesDistinctValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServicesDistinctValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServicesDistinctValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServicesDistinctValues(ctx, req.(*ServicesDistinctValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServicesBySG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesBySGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServicesBySG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServicesBySG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServicesBySG(ctx, req.(*ServicesBySGReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServicesStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServicesStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServicesStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServicesStats(ctx, req.(*ServicesStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetDisconnectedServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectedServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetDisconnectedServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetDisconnectedServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetDisconnectedServices(ctx, req.(*DisconnectedServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_DeleteDisconnectedServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectedServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).DeleteDisconnectedServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/DeleteDisconnectedServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).DeleteDisconnectedServices(ctx, req.(*DisconnectedServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_DeleteServicesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServicesByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).DeleteServicesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/DeleteServicesByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).DeleteServicesByID(ctx, req.(*DeleteServicesByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetDisconnectedServicesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDisconnectedServicesConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetDisconnectedServicesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetDisconnectedServicesConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetDisconnectedServicesConfig(ctx, req.(*GetDisconnectedServicesConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_UpdateDisconnectedServicesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicMandatoryJobConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).UpdateDisconnectedServicesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/UpdateDisconnectedServicesConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).UpdateDisconnectedServicesConfig(ctx, req.(*PeriodicMandatoryJobConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_RunDisconnectedServicesJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunDisconnectedServicesJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).RunDisconnectedServicesJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/RunDisconnectedServicesJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).RunDisconnectedServicesJob(ctx, req.(*RunDisconnectedServicesJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetDeleteDisconnectedServicesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeleteDisconnectedServicesConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetDeleteDisconnectedServicesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetDeleteDisconnectedServicesConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetDeleteDisconnectedServicesConfig(ctx, req.(*GetDeleteDisconnectedServicesConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_UpdateDeleteDisconnectedServicesConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicJobConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).UpdateDeleteDisconnectedServicesConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/UpdateDeleteDisconnectedServicesConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).UpdateDeleteDisconnectedServicesConfig(ctx, req.(*PeriodicJobConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_RunDeleteDisconnectedServicesJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunDeleteDisconnectedServicesJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).RunDeleteDisconnectedServicesJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/RunDeleteDisconnectedServicesJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).RunDeleteDisconnectedServicesJob(ctx, req.(*RunDeleteDisconnectedServicesJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_UpdateTelemetryReported_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTelemetryReportedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).UpdateTelemetryReported(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/UpdateTelemetryReported",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).UpdateTelemetryReported(ctx, req.(*UpdateTelemetryReportedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetServicesUsageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesUsageCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetServicesUsageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.applications.ApplicationsService/GetServicesUsageCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetServicesUsageCount(ctx, req.(*GetServicesUsageCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.applications.ApplicationsService",
	HandlerType: (*ApplicationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceGroups",
			Handler:    _ApplicationsService_GetServiceGroups_Handler,
		},
		{
			MethodName: "GetServiceGroupsHealthCounts",
			Handler:    _ApplicationsService_GetServiceGroupsHealthCounts_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _ApplicationsService_GetServices_Handler,
		},
		{
			MethodName: "GetServicesDistinctValues",
			Handler:    _ApplicationsService_GetServicesDistinctValues_Handler,
		},
		{
			MethodName: "GetServicesBySG",
			Handler:    _ApplicationsService_GetServicesBySG_Handler,
		},
		{
			MethodName: "GetServicesStats",
			Handler:    _ApplicationsService_GetServicesStats_Handler,
		},
		{
			MethodName: "GetDisconnectedServices",
			Handler:    _ApplicationsService_GetDisconnectedServices_Handler,
		},
		{
			MethodName: "DeleteDisconnectedServices",
			Handler:    _ApplicationsService_DeleteDisconnectedServices_Handler,
		},
		{
			MethodName: "DeleteServicesByID",
			Handler:    _ApplicationsService_DeleteServicesByID_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ApplicationsService_GetVersion_Handler,
		},
		{
			MethodName: "GetDisconnectedServicesConfig",
			Handler:    _ApplicationsService_GetDisconnectedServicesConfig_Handler,
		},
		{
			MethodName: "UpdateDisconnectedServicesConfig",
			Handler:    _ApplicationsService_UpdateDisconnectedServicesConfig_Handler,
		},
		{
			MethodName: "RunDisconnectedServicesJob",
			Handler:    _ApplicationsService_RunDisconnectedServicesJob_Handler,
		},
		{
			MethodName: "GetDeleteDisconnectedServicesConfig",
			Handler:    _ApplicationsService_GetDeleteDisconnectedServicesConfig_Handler,
		},
		{
			MethodName: "UpdateDeleteDisconnectedServicesConfig",
			Handler:    _ApplicationsService_UpdateDeleteDisconnectedServicesConfig_Handler,
		},
		{
			MethodName: "RunDeleteDisconnectedServicesJob",
			Handler:    _ApplicationsService_RunDeleteDisconnectedServicesJob_Handler,
		},
		{
			MethodName: "UpdateTelemetryReported",
			Handler:    _ApplicationsService_UpdateTelemetryReported_Handler,
		},
		{
			MethodName: "GetServicesUsageCount",
			Handler:    _ApplicationsService_GetServicesUsageCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindServices",
			Handler:       _ApplicationsService_FindServices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "external/applications/applications.proto",
}
