syntax = "proto3";

package chef.automate.api.applications;
option go_package = "github.com/chef/automate/api/external/applications";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// TODO @afiune Move or re-create the common messages inside the api/ folder
import "api/external/common/version/version.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";
// for sorting and pagination
import "api/external/common/query/parameters.proto";

service ApplicationsService {
  rpc GetServiceGroups(ServiceGroupsReq) returns (ServiceGroups) {
    option (google.api.http).get = "/applications/service-groups";
    option (chef.automate.api.policy) = {
      resource: "service_groups"
      action: "list"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "applications:serviceGroups"
      action: "applications:serviceGroups:list"
    };
  };
  rpc GetServiceGroupsHealthCounts(ServiceGroupsHealthCountsReq) returns (HealthCounts) {
    option (google.api.http).get = "/applications/service_groups_health_counts";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };

  rpc GetServices(ServicesReq) returns (ServicesRes) {
    option (google.api.http).get = "/applications/services";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };

  rpc GetServicesDistinctValues(ServicesDistinctValuesReq) returns (ServicesDistinctValuesRes) {
    option (google.api.http).get = "/applications/services-distinct-values";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };

  rpc GetServicesBySG(ServicesBySGReq) returns (ServicesBySGRes) {
    option (google.api.http).get = "/applications/service-groups/{service_group_id}";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };

  rpc GetServicesStats(ServicesStatsReq) returns (ServicesStatsRes) {
    option (google.api.http).get = "/applications/stats";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };

  rpc GetDisconnectedServices(DisconnectedServicesReq) returns (ServicesRes ) {
    option (google.api.http).get = "/applications/disconnected_services";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };

  rpc DeleteDisconnectedServices(DisconnectedServicesReq) returns (ServicesRes ) {
    option (google.api.http) = {
      post: "/applications/delete_disconnected_services"
      body: "*"
    };
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:delete";
  };

  rpc GetDisconnectedServicesConfig(GetDisconnectedServicesConfigReq) returns (PeriodicMandatoryJobConfig) {
    option (google.api.http).get = "/retention/service_groups/disconnected_services/config";

    option (chef.automate.api.policy).resource = "service_groups:scheduler:disconnected_services";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:get";
  };

  rpc UpdateDisconnectedServicesConfig(PeriodicMandatoryJobConfig) returns (UpdateDisconnectedServicesConfigRes) {
    option (google.api.http) = {
      post: "/retention/service_groups/disconnected_services/config"
      body: "*"
    };

    option (chef.automate.api.policy).resource = "service_groups:scheduler:disconnected_services";
    option (chef.automate.api.policy).action = "configure";
    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:update";
  };

  rpc GetDeleteDisconnectedServicesConfig(GetDeleteDisconnectedServicesConfigReq) returns (PeriodicJobConfig) {
    option (google.api.http).get = "/retention/service_groups/delete_disconnected_services/config";

    option (chef.automate.api.policy).resource = "service_groups:scheduler:delete_disconnected_services";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:get";
  };

  rpc UpdateDeleteDisconnectedServicesConfig(PeriodicJobConfig) returns (UpdateDeleteDisconnectedServicesConfigRes) {
    option (google.api.http) = {
      post: "/retention/service_groups/delete_disconnected_services/config"
      body: "*"
    };

    option (chef.automate.api.policy).resource = "service_groups:scheduler:delete_disconnected_services";
    option (chef.automate.api.policy).action = "configure";
    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:update";
  };

  rpc GetVersion (common.version.VersionInfoRequest) returns (common.version.VersionInfo) {
    option (google.api.http).get = "/applications/version";
    option (chef.automate.api.policy).resource = "service_info:version";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "system:service:version";
    option (chef.automate.api.iam.policy).action = "system:serviceVersion:get";
  };
}

message ServicesReq {
  repeated string filter = 1;
  common.query.Pagination pagination = 2;
  common.query.Sorting sorting = 3;
}

message ServicesDistinctValuesReq {
  string field_name = 1;
  string query_fragment = 2;
  repeated string filter = 3;
}

message ServicesBySGReq {
  string service_group_id = 1;
  common.query.Pagination pagination = 2;
  common.query.Sorting sorting = 3;
  repeated string filter = 5;
}

message ServicesBySGRes {
  string group = 1;
  repeated Service services = 2;
  HealthCounts services_health_counts = 3;
}

message ServicesRes {
  repeated Service services = 1;
}

message ServicesDistinctValuesRes {
  repeated string values = 1;
}

message DisconnectedServicesReq {
  reserved 1;
  int32 threshold_seconds = 2;
}

message ServicesStatsReq {
}

message ServicesStatsRes {
  int32 total_service_groups = 1;
  int32 total_services = 2;
  int32 total_supervisors = 3;
  int32 total_deployments = 4;
}


message PeriodicJobConfig {
  bool running = 1;
  // To match the ingest API at /retention/nodes/missing-nodes/config, we use a
  // string format that is a subset of elasticsearch's date math. See the
  // simpledatemath package under lib/ for more details
  string threshold = 2;
}

// it's like a PeriodicJobConfig but the user isn't allowed to change whether
// or not the job runs
message PeriodicMandatoryJobConfig {
  // To match the ingest API at /retention/nodes/missing-nodes/config, we use a
  // string format that is a subset of elasticsearch's date math. See the
  // simpledatemath package under lib/ for more details
  string threshold = 1;
}

message GetDisconnectedServicesConfigReq{}
message UpdateDisconnectedServicesConfigRes {}

message GetDeleteDisconnectedServicesConfigReq{}
message UpdateDeleteDisconnectedServicesConfigRes {}

message Service {
  string supervisor_id = 1;
  string release = 2;
  string group = 3;
  HealthStatus health_check = 4;
  ServiceStatus status = 5;
  string application = 6;
  string environment = 7;
  string fqdn = 8;
  string channel = 9;
  string update_strategy = 10;
  string site = 17;
  HealthStatus previous_health_check = 18;
  string current_health_since = 19;
  google.protobuf.Timestamp health_updated_at = 20;
  bool disconnected = 21;
  google.protobuf.Timestamp last_event_occurred_at = 22;
  string last_event_since = 23;
}

message ServiceGroupsHealthCountsReq {
  repeated string filter = 1;
}
message ServiceGroupsReq {
  repeated string filter = 1;
  common.query.Pagination pagination = 2;
  common.query.Sorting sorting = 3;
}

// A service group message is the representation of one single service group that
// is internally generated by aggregating all the services
message ServiceGroup {
  string name = 1;
  // Combination of the version and release in a single string like:
  // Example: 0.1.0/8743278934278923
  string release = 2;
  HealthStatus status = 3;

  // The health_percentage can be a number between 0-100
  int32 health_percentage = 4;

  HealthCounts services_health_counts = 5;
  string id = 6;
  string application = 7;
  string environment = 8;

  // Combination of the origin and package name in a single string like:
  // Example: core/redis
  string package = 9;

  int32 disconnected_count = 10;
}

message HealthCounts {
  int32 total = 1;
  int32 ok = 2;
  int32 warning = 3;
  int32 critical = 4;
  int32 unknown = 5;
  int32 disconnected = 6;
}

// The package identifier of a service is unique and is the combination
// of origin/name/version/release
//
// Example: core/redis/0.1.0/8743278934278923
message PackageIdent {
  string origin = 1;
  string name = 2;
  string version = 3;
  string release = 4;
}

message ServiceGroups  {
  repeated ServiceGroup service_groups = 1;
}

// The ServiceStatus enum describes the status of the service
// @afiune have we defined these states somewhere?
enum ServiceStatus {
  RUNNING = 0;
  INITIALIZING = 1;
  DEPLOYING = 2;
  DOWN = 3;
}

// The HealthStatus enum matches the habitat implementation for health-check status:
// => https://www.habitat.sh/docs/reference/#health-check
enum HealthStatus {
  OK = 0;
  WARNING = 1;
  CRITICAL = 2;
  UNKNOWN = 3;

  // The representation of NO health check status
  // TODO @afiune how much effort would be to change
  // the OK enum to be NONE
  NONE = 17;
}
