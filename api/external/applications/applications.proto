syntax = "proto3";

package chef.automate.api.applications;
option go_package = "github.com/chef/automate/api/external/applications";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "google/protobuf/wrappers.proto";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
// TODO @afiune Move or re-create the common messages inside the api/ folder
import "external/common/version/version.proto";

import "external/annotations/iam/annotations.proto";
// for sorting and pagination
import "external/common/query/parameters.proto";

service ApplicationsService {
  /*
  List Service Groups

  Lists service groups with name, health information, and application, environment, package, release metadata.
  Accepts pagination, sorting, search, and status filters.

  Example:
  ```
  applications/service-groups?sorting.field=percent_ok&sorting.order=ASC&pagination.page=1&pagination.size=25
  ```

  Authorization Action:
  ```
  applications:serviceGroups:list
  ```
  */
  rpc GetServiceGroups(ServiceGroupsReq) returns (ServiceGroups) {
    option (google.api.http).get = "/api/v0/applications/service-groups";
    option (chef.automate.api.iam.policy) = {
      resource: "applications:serviceGroups"
      action: "applications:serviceGroups:list"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "service_groups";
		};
  };
  /*
  List Service Groups Health Counts

  Lists the total service group health reports by critical, warning, ok and unknown responses. Supports search and status filtering.

  Authorization Action:
  ```
  applications:serviceGroups:list
  ```
  */
  rpc GetServiceGroupsHealthCounts(ServiceGroupsHealthCountsReq) returns (HealthCounts) {
    option (google.api.http).get = "/api/v0/applications/service_groups_health_counts";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "service_groups";
		};
  };
  /*
  List Services

  Lists service health status and service metadata for services.
  Supports pagination and search and status filtering. For a list of services for a specific service-group see "List Services for a Service Group" (GetServicesBySG endpoint).

  Authorization Action:
  ```
  applications:serviceGroups:list
  ```
  */
  rpc GetServices(ServicesReq) returns (ServicesRes) {
    option (google.api.http).get = "/api/v0/applications/services";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "service_groups";
		};
  };

  /*
  Find Services

  Lists service health status and service metadata for services matching the given criteria. All matching services are returned via a stream response.

  Authorization Action:
  ```
  applications:serviceGroups:list
  ```
  */
  rpc FindServices(ServicesReq) returns (stream Service) {
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "service_groups";
		};
  };

  /*
  List Filter Values

  Lists all of the possible filter values for a given valid field.
  Limit the returned values by providing at one or more characters in the `query_fragment` parameter.
  Supports wildcard (* and ?)


  Authorization Action:
  ```
  applications:serviceGroups:list
  ```
  */
  rpc GetServicesDistinctValues(ServicesDistinctValuesReq) returns (ServicesDistinctValuesRes) {
    option (google.api.http).get = "/api/v0/applications/services-distinct-values";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "service_groups";
		};
  };
  /*
  List Services for a Service Group

  List the services for a service group with health status and service metadata.
  Uses the service group ID generated by Chef Automate instead of the Chef Habitat- provided ID.
  Supports pagination and filtering.

  Example:
  ```
  applications/service-groups/1dfff679054c60a10c51d059b6dbf81a765c46f8d3e8ce0752b22ffe8d4d9716?pagination.page=1&pagination.size=25
  ```

  Authorization Action:
  ```
  applications:serviceGroups:list
  ```
  */
  rpc GetServicesBySG(ServicesBySGReq) returns (ServicesBySGRes) {
    option (google.api.http).get = "/api/v0/applications/service-groups/{service_group_id}";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "service_groups";
		};
  };

  /*
  Show Summary

  Shows a summary of service-groups, services, deployments, and supervisors.
  Used for telemetry.
  Does not support filtering.

  Authorization Action:
  ```
  applications:serviceGroups:list
  ```
  */
  rpc GetServicesStats(ServicesStatsReq) returns (ServicesStatsRes) {
    option (google.api.http).get = "/api/v0/applications/stats";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "service_groups";
		};
  };

  /*
  Mark Services as Disconnected

  Marks services as disconnected based on the `threshold_seconds` setting.
  This function is not used by the API or CLI and is here for testing purposes.
  The functionality is currently covered by a periodically running job that can be configured
  by utilizing the `UpdateDisconnectedServicesConfig` endpoint.

  Authorization Action:
  ```
  applications:serviceGroups:list
  ```
  */
  rpc GetDisconnectedServices(DisconnectedServicesReq) returns (ServicesRes ) {
    option (google.api.http).get = "/api/v0/applications/disconnected_services";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "service_groups";
		};
  };

  /*
  Remove Disconnected Services

  Removes services marked as disconnected based on the `threshold_seconds` setting.
  This function is not used by the API or CLI and is here for testing purposes.
  The functionality is currently covered by a periodically running job that can be configured using `UpdateDeleteDisconnectedServicesConfig`.

  Authorization Action:
  ```
  applications:serviceGroups:delete
  ```
  */
  rpc DeleteDisconnectedServices(DisconnectedServicesReq) returns (ServicesRes ) {
    option (google.api.http) = {
      post: "/api/v0/applications/delete_disconnected_services"
      body: "*"
    };
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:delete";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "service_groups";
		};
  };


  /*
  Delete the services with the given IDs

  Authorization Action:
  ```
  applications:serviceGroups:delete
  ```
  */
  rpc DeleteServicesByID(DeleteServicesByIDReq) returns (ServicesRes ) {
    option (google.api.http) = {
      post: "/api/v0/applications/delete_services_by_id"
      body: "*"
    };
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:delete";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "service_groups";
		};
  };
  /*
  Show Version

  Displays the current version of the applications-service

  Authorization Action:
  ```
  system:serviceVersion:get
  ```
  */
  rpc GetVersion (common.version.VersionInfoRequest) returns (common.version.VersionInfo) {
    option (google.api.http).get = "/api/v0/applications/version";
    option (chef.automate.api.iam.policy).resource = "system:service:version";
    option (chef.automate.api.iam.policy).action = "system:serviceVersion:get";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "hidden";
		};
  };

  /*
  Show 'Disconnected Services' configuration

  Returns the configuration for the task that marks services as disconnected. The `threshold` setting defines the period of time between the last report from a node and the moment when Chef Automate marks it as disconnected. `Threshold` is a string that follows Elasticsearch's date math expressions.
  This task is always enabled, cannot be disabled. Because this task runs continuously, the response does not return information about its status.

  Authorization Action:
  ```
  retention:serviceGroups:get
  ```
  */
  rpc GetDisconnectedServicesConfig(GetDisconnectedServicesConfigReq) returns (PeriodicMandatoryJobConfig) {
    option (google.api.http).get = "/api/v0/retention/service_groups/disconnected_services/config";

    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:get";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "retention";
		};
  };
  /*
  Change 'Disconnected Services' Configuration

  Changes the configuration for the task that marks services as disconnected.

  The periodic task to check for disconnected services can be enabled or
  disabled by setting the 'running' setting to `true` or `false`, respectively.
  When disabled, no services will be marked disconnected, regardless of the
  time that has elapsed since the last health check. It is not recommened to
  disable the job.

  The frequency of the job's execution can be modified by changing the
  'recurrence'. This setting is a string
  [as defined in section 4.3.10 of RFC 2445](https://www.ietf.org/rfc/rfc2445.txt).
  By default, the task runs every 60 seconds. It is not recommended to change
  the recurrence.

  When enabled, services are marked disconnected when the time elapsed since
  Automate last received a health check exceeds 'threshold'. Threshold is a
  string that follows Elasticsearch's date math expressions.


  Example:
  ```
  /retention/service_groups/disconnected_services/config
  '{
    "threshold": "15m",
    "running": true,
    "recurrence": "FREQ=SECONDLY;DTSTART=20200612T182166Z;INTERVAL=60"
  }'
  ```

  Authorization Action:
  ```
  retention:serviceGroups:update
  ```
  */
  rpc UpdateDisconnectedServicesConfig(PeriodicMandatoryJobConfig) returns (UpdateDisconnectedServicesConfigRes) {
    option (google.api.http) = {
      post: "/api/v0/retention/service_groups/disconnected_services/config"
      body: "*"
    };

    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:update";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "retention";
		};
  };

  /*
  Runs the job to mark services as disconnected immediately.

  Authorization Action:
  ```
  retention:serviceGroups:update
  ```
  */
  rpc RunDisconnectedServicesJob(RunDisconnectedServicesJobReq) returns (RunDisconnectedServicesJobResponse) {
    option (google.api.http) = {
      post: "/api/v0/retention/service_groups/disconnected_services/run"
      body: "*"
    };

    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:update";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "retention";
		};
  }

  /*
  Show 'Remove Disconnected Services' Configuration

  Displays configuration for the task that deletes services marked as disconnected
  after 'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
  This job is disabled if running is set to false.

  Authorization Action:
  ```
  retention:serviceGroups:get
  ```
  */
  rpc GetDeleteDisconnectedServicesConfig(GetDeleteDisconnectedServicesConfigReq) returns (PeriodicJobConfig) {
    option (google.api.http).get = "/api/v0/retention/service_groups/delete_disconnected_services/config";

    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:get";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "retention";
		};
  };
  /*
  Change 'Remove Disconnected Services' Configuration

  Updates configuration information for the task that deletes services marked as disconnected
  after 'threshold'. Threshold is a string that follows Elasticsearch's date math expressions.
  This job can be disabled by setting `"running": false`.

  The frequency of the job's execution can be modified by changing the
  'recurrence'. This setting is a string
  [as defined in section 4.3.10 of RFC 2445](https://www.ietf.org/rfc/rfc2445.txt).
  By default, the task runs every 60 seconds. It is not recommended to change
  the recurrence.

  Example:
  ```
  service_groups/delete_disconnected_services/config" -d
  '{
    "threshold": "1d",
    "running":true,
    "recurrence": "FREQ=SECONDLY;DTSTART=20200612T182166Z;INTERVAL=60"
  }'
  ```

  Authorization Action:
  ```
  retention:serviceGroups:update
  ```
  */
  rpc UpdateDeleteDisconnectedServicesConfig(PeriodicJobConfig) returns (UpdateDeleteDisconnectedServicesConfigRes) {
    option (google.api.http) = {
      post: "/api/v0/retention/service_groups/delete_disconnected_services/config"
      body: "*"
    };

    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:update";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "retention";
		};
  };

  rpc RunDeleteDisconnectedServicesJob(RunDeleteDisconnectedServicesJobReq) returns (RunDeleteDisconnectedServicesJobResponse) {
    option (google.api.http) = {
      post: "/api/v0/retention/service_groups/delete_disconnected_services/run"
      body: "*"
    };

    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:update";
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "retention";
		};
  }


  /*
  UpdateTelemetryReported
  update the last reported talemetry date for the application service.
  Authorization Action:
  ```
  iam:introspect:getAll
  ```
  */

  rpc UpdateTelemetryReported(UpdateTelemetryReportedRequest) returns (UpdateTelemetryReportedResponse) {
		option (google.api.http) = {
			put: "/api/v0/applications/telemetry/services/count/updated"
			body: "*"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "iam:introspect"
			action: "iam:introspect:getAll"
		};
	};

  /*
  GetservicesUsageCount

  Returns the count of unique services with lastRun in a given time.
  The time duration can be between the last time Telemetry data sent and the day before the current date.
  If the duration < 15 days --> 15 days
  duration > 15 days --> duration
  Authorization Action:
  ```
  iam:introspect:getAll
  ```
  */

  rpc GetServicesUsageCount(GetServicesUsageCountRequest) returns (GetServicesUsageCountResponse) {
    option (google.api.http) = {
      get: "/api/v0/applications/telemetry/services/count"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "iam:introspect"
      action: "iam:introspect:getAll"
    };
  }

}


// Request message for listing services.
message ServicesReq {
  // Applies search filters, in the format of `fieldname:value`.
  //
  // Valid filter fieldnames are:
  // * `origin`: origin component of the service's package identifier
  // * `service`: the name component of the service's package identifier
  // * `version`: the version number component of the service's package identifier
  // * `buildstamp`: the build timestamp (also called "release") of the service's package identifier
  // * `channel`: the package channel to which the service subscribes for updates
  // * `application`: the application field of the service's event-stream metadata
  // * `environment`: the environment field of the service's event-stream metadata
  // * `site`: the site field of the service's event-stream metadata
  // * `group`: the suffix of the service group name
  //
  // `status` filters refine service results by a service's
  //  current state or most recent healthcheck result.
  //  Disconnected services keep their last healthcheck result
  //  until their reports are removed by Chef Automate.
  //  When you apply a healthcheck filter, the report includes
  //  all recently disconnected services.
  //  Valid status filter parameters are:
  // * `status:disconnected`: returns services in a disconnected state
  // * `status:critical`: returns services with a "critical" healthcheck result
  // * `status:unknown`: returns services with an "unknown" healthcheck result
  // * `status:warning`: returns services with a "warning" healthcheck result
  // * `status:ok`: returns services with an  "ok" health check result
  repeated string filter = 1;
  // Applies pagination parameters.
  common.query.Pagination pagination = 2;
  // Applies sorting parameters.
  common.query.Sorting sorting = 3;
}

// Request message for listing available service filters.
message ServicesDistinctValuesReq {
  // Field name of service values.
  string field_name = 1;
  // Query value, supports wildcards (* and ?).
  string query_fragment = 2;
  // Applies filters, in the format of `fieldname:value`.
  // See documentation for ServicesReq for valid filter parameters
  repeated string filter = 3;
}

// Request message for listing services by service group.
message ServicesBySGReq {
  // Service group ID.
  string service_group_id = 1;
  // Applies pagination parameters.
  common.query.Pagination pagination = 2;
  // Applies sorting parameters.
  common.query.Sorting sorting = 3;
  // Applies filters, in the format of `fieldname:value`.
  // See documentation for ServicesReq for valid filter parameters
  repeated string filter = 5;
}

// Response message for GetServicesBySG.
message ServicesBySGRes {
  // Service group name.
  string group = 1;
  // List of services.
  repeated Service services = 2;
  // Intentionally blank.
  HealthCounts services_health_counts = 3;
}

// Response message for GetServices.
message ServicesRes {
  // List of services.
  repeated Service services = 1;
}

// Response message for GetServicesDistinctValues.
message ServicesDistinctValuesRes {
  // List of distinct values fitting query_fragment and filters.
  repeated string values = 1;
}

// Request message for GetDisconnectedServices.
message DisconnectedServicesReq {
  // Unused.
  reserved 1;
  // Threshold for marking services disconnected in seconds.
  int32 threshold_seconds = 2;
}

message DeleteServicesByIDReq {
  // List of the database IDs of the services to be deleted.
  repeated string ids = 1;
}
// Request message for ServicesStats.
message ServicesStatsReq {
}

// Response message for ServicesStats.
message ServicesStatsRes {
  // Total number of service groups reporting to Chef Automate.
  int32 total_service_groups = 1;
  // Total number of services reporting to Chef Automate, counts both connected and disconnected services.
  int32 total_services = 2;
  // Total number of supervisors reporting to Chef Automate.
  int32 total_supervisors = 3;
  // Total number of deployments reporting to Chef Automate.
  int32 total_deployments = 4;
}

// Periodic job configuration.
message PeriodicJobConfig {
  // Enable/disable the job. `false` is disabled, `true` is enabled.
  bool running = 1;
  // The `threshold` setting used by periodic jobs for evaluating services.
  // Threshold is a string that follows Elasticsearch's date math expressions. For more information, see the simpledatemath package under `lib/`.
  string threshold = 2;
  // A recurrence rule that determines how often, at what interval, and when to
  // initially start a scheduled job.
  //
  // If the field is omitted from the request or is set to an emtpy string, no
  // change will be made to the current value. Otherwise, the value should match
  // the  [recurrence rule format defined in section 4.3.10 of RFC 2445](https://www.ietf.org/rfc/rfc2445.txt).
  //
  // It is not recommended to change this value from the default setting of a
  // 60 second interval. This configuration option is provided only for
  // consistency with other data lifecyle APIs.
	string recurrence = 3;
  PeriodicJobInfo job_info = 4;
}

// Configuration for a periodic job. Initially Jobs using this message type
// were designed such that they could not be disabled, but that has been
// changed to make the various data lifecycle APIs consistent with each other.
// Thus, there is a `running` field which will disable the job if set to false.
// That is not recommended.
message PeriodicMandatoryJobConfig {
  // The `threshold` setting used by periodic jobs for evaluating services.
  // Threshold is a string that follows Elasticsearch's date math expressions. For more information, see the simpledatemath package under `lib/`.
  string threshold = 1;
  // Enable/disable the job. `false` is disabled, `true` is enabled. It is not
  // recommended to disable this job.
  google.protobuf.BoolValue running = 2;
  // A recurrence rule that determines how often, at what interval, and when to
  // initially start a scheduled job.
  //
  // If the field is omitted from the request or is set to an emtpy string, no
  // change will be made to the current value. Otherwise, the value should match
  // the  [recurrence rule format defined in section 4.3.10 of RFC 2445](https://www.ietf.org/rfc/rfc2445.txt).
  //
  // It is not recommended to change this value from the default setting of a
  // 60 second interval. This configuration option is provided only for
  // consistency with other data lifecyle APIs.
	string recurrence = 3;
  // Information about the last and next scheduled executions of the job. This
  // is only used in a response context.
  PeriodicJobInfo job_info = 4;
}

// PeriodicJobInfo gives information about the last and next scheduled
// executions of a periodic job. 
message PeriodicJobInfo {
	google.protobuf.Timestamp last_enqueued_at = 1;
	google.protobuf.Timestamp last_started_at = 2;
	google.protobuf.Timestamp last_ended_at = 3;
	google.protobuf.Duration last_elapsed = 4;
	google.protobuf.Timestamp next_due_at = 5;
}

message GetDisconnectedServicesConfigReq{}
message UpdateDisconnectedServicesConfigRes {}

message RunDisconnectedServicesJobReq {}
message RunDisconnectedServicesJobResponse {}

message GetDeleteDisconnectedServicesConfigReq{}
message UpdateDeleteDisconnectedServicesConfigRes {}

message RunDeleteDisconnectedServicesJobReq {}
message RunDeleteDisconnectedServicesJobResponse {}


message Service {
  // The Chef Habitat Supervisor ID.
  string supervisor_id = 1;
  // Combination of the service version and release in a single string.
  // Example: 0.1.0/8743278934278923.
  string release = 2;
  // Service group name.
  string group = 3;
  // Intentionally blank.
  HealthStatus health_check = 4;
  // Unused.
  reserved 5;
  // Application name.
  string application = 6;
  // Environment name.
  string environment = 7;
  // FQDN reported by a Chef Habitat Supervisor.
  string fqdn = 8;
  // Chef Habitat channel that the service is subscribed to.
  string channel = 9;
  // Update strategy that the service employs.
  string update_strategy = 10;
  // Site reported by Chef Habitat service, a user defined flag.
  string site = 17;
  // Intentionally blank.
  HealthStatus previous_health_check = 18;
  // Time interval of current health status from last status change until now.
  string current_health_since = 19;
  // Timestamp since health status change.
  google.protobuf.Timestamp health_updated_at = 20;
  // Service connection information.
  // Based on time since last healthcheck received and disconnected service configuration.
  bool disconnected = 21;
  // Timestamp of last received health check message.
  google.protobuf.Timestamp last_event_occurred_at = 22;
  // Interval since last event received until now.
  string last_event_since = 23;
  // Intentionally blank.
  HealthCheckResult health_check_result = 24;
  // Internal ID
  string id = 25;
}

// Request message for GetServiceGroupsHealthCounts
message ServiceGroupsHealthCountsReq {
  // Applies search filters, in the format of `fieldname:value`.
  // See the documentation for ServiceGroupsReq for valid filter parameters.
  repeated string filter = 1;
}

// Request message for GetServiceGroups
message ServiceGroupsReq {
  // Applies search and status filters, in the format of `fieldname:value` or `status:value`.
  //
  // Valid filter fieldnames are:
  // * `origin`: origin component of the service's package identifier
  // * `service`: the name component of the service's package identifier
  // * `version`: the version number component of the service's package identifier
  // * `buildstamp`: the build timestamp (also called "release") of the service's package identifier
  // * `channel`: the package channel to which the service subscribes for updates
  // * `application`: the application field of the service's event-stream metadata
  // * `environment`: the environment field of the service's event-stream metadata
  // * `site`: the site field of the service's event-stream metadata
  // * `group`: the suffix of the service group name
  //
  // `status` filters refine the service group results by a service's
  //  most recent connected/disconnected state or healthcheck result.
  //
  //  Valid status filter parameters are:
  // * `status:disconnected`: returns service groups with at least one service in a disconnected state
  // * `status:critical`: returns service groups with a with at least one service in a "critical" healthcheck result
  // * `status:unknown`: returns service groups with at least one service with an "unknown" healthcheck result
  // * `status:warning`: returns service groups with at least one service with a "warning" healthcheck result
  // * `status:ok`: returns service groups with at least one service with an "ok" health check result
  repeated string filter = 1;
  // Pagination parameters for service groups list.
  common.query.Pagination pagination = 2;
  // Sorting parameters for service groups list.
  common.query.Sorting sorting = 3;
}

// A service group message is the representation of an individual service group that
// is internally generated by aggregating all of its services.
message ServiceGroup {
  // Name of service group.
  string name = 1;
  // Combination of the version and release in a single string.
  // Example: 0.1.0/8743278934278923.
  string release = 2;
  // Intentionally blank.
  HealthStatus status = 3;
  // Percentage of services reporting OK status.
  // The health_percentage can be a number between 0-100.
  int32 health_percentage = 4;
  // Intentionally blank.
  HealthCounts services_health_counts = 5;
  // Service group ID. This is a value constructed by Chef Automate and is not reported by Chef Habitat.
  string id = 6;
  // Application name for the service group.
  string application = 7;
  // Environment name for the service group.
  string environment = 8;
  // Combination of the origin and package name in a single string.
  // Example: core/redis.
  string package = 9;
  // Count of disconnected services within this service group.
  int32 disconnected_count = 10;
}

// Combined count values from the health status and disconnected status reports.
message HealthCounts {
  int32 total = 1;
  int32 ok = 2;
  int32 warning = 3;
  int32 critical = 4;
  int32 unknown = 5;
  int32 disconnected = 6;
}

// The package identifier of a service is unique and is the combination
// of origin/name/version/release
//
// Example: core/redis/0.1.0/8743278934278923
message PackageIdent {
  // Chef Habitat origin.
  string origin = 1;
  // Chef Habitat package name.
  string name = 2;
  // Chef Habitat release version number.
  string version = 3;
  // Chef Habitat release buildstamp.
  string release = 4;
}

// List of service groups.
message ServiceGroups  {
  // List of service groups.
  repeated ServiceGroup service_groups = 1;
}

// The HealthStatus enumerable matches the Chef Habitat implementation for health-check status:
// => https://www.habitat.sh/docs/reference/#health-check
// For a health status within a service group.
// *critical* means that one or more services are in critical condition.
// *warning* means that one or more services have a warning, but none are in critical condition.
// *unknown* means that one or more services have not responded, but all of the remaining nodes responded to the health check as "OK".
// *OK* means that all of the services are OK and all have responded to the health check.
// *none* means that there is no health check information.
enum HealthStatus {
  OK = 0;
  WARNING = 1;
  CRITICAL = 2;
  UNKNOWN = 3;
  NONE = 17;
}

// HealthCheckResult aggregates the stdout output, stderr output and process
// exit status of a habitat health check
message HealthCheckResult {
  string stdout = 1;
  string stderr = 2;
  int32 exit_status = 3;
}

// Telemetry
message UpdateTelemetryReportedRequest {
	// last application service telemetry reported date
	string last_telemetry_reported_at = 1;
}

message UpdateTelemetryReportedResponse {}

message GetServicesUsageCountRequest {}

message	GetServicesUsageCountResponse {
  // unique services count in a duration
  int64 total_services = 1;
  // number of days since telematics was last posted
  int64 days_since_last_post =2;
}
