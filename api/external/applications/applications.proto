syntax = "proto3";

package chef.automate.api.applications;
option go_package = "github.com/chef/automate/api/external/applications";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// TODO @afiune Move or re-create the common messages inside the api/ folder
import "api/external/common/version/version.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";
// for sorting and pagination
import "api/external/common/query/parameters.proto";

service ApplicationsService {
  /*
  GetServiceGroups

  Returns a list of service groups with name, health information, and app, env, package, release metadata.
  Accepts pagination, sorting, search bar and status filters.

  Example:
  ```
  applications/service-groups?sorting.field=percent_ok&sorting.order=ASC&pagination.page=1&pagination.size=25
  ```
  */
  rpc GetServiceGroups(ServiceGroupsReq) returns (ServiceGroups) {
    option (google.api.http).get = "/applications/service-groups";
    option (chef.automate.api.policy) = {
      resource: "service_groups"
      action: "list"
    };
    option (chef.automate.api.iam.policy) = {
      resource: "applications:serviceGroups"
      action: "applications:serviceGroups:list"
    };
  };
  /*
  GetServiceGroupsHealthCounts

  Returns totals for critical, warning, ok and unknown service groups.
  Supports search bar filtering.
  */
  rpc GetServiceGroupsHealthCounts(ServiceGroupsHealthCountsReq) returns (HealthCounts) {
    option (google.api.http).get = "/applications/service_groups_health_counts";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };
  /*
  GetServices

  Returns a list of services with service health and service metadata.
  Accepts pagination and filters. To get services for a specific service-group use GetServicesBySG.
  */
  rpc GetServices(ServicesReq) returns (ServicesRes) {
    option (google.api.http).get = "/applications/services";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };

  /*
  GetServicesDistinctValues

  Returns possible distinct filter values for a given valid field name. All values returned until one or more
  characters are provided for the `query_fragment` parameter.
  Supports wildcard (* and ?)

  */
  rpc GetServicesDistinctValues(ServicesDistinctValuesReq) returns (ServicesDistinctValuesRes) {
    option (google.api.http).get = "/applications/services-distinct-values";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };
  /*
  GetServicesBySG

  Returns a list of services for a service group ID with health status and service metadata.
  The service group ID is a value generated by automate based on unique identifiers, and is not reported by habitat.
  Accepts status filters, search bar filters and sidebar pagination parameters

  Example:
  ```
  applications/service-groups/1dfff679054c60a10c51d059b6dbf81a765c46f8d3e8ce0752b22ffe8d4d9716?pagination.page=1&pagination.size=25
  ```
  */
  rpc GetServicesBySG(ServicesBySGReq) returns (ServicesBySGRes) {
    option (google.api.http).get = "/applications/service-groups/{service_group_id}";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };

  /*
  GetServicesStats

  Returns the total service-groups, services, deployments and supervisors. Used for telemetry purposes.
  Accepts to filters as the intent is to get an overall snapshot.
  */
  rpc GetServicesStats(ServicesStatsReq) returns (ServicesStatsRes) {
    option (google.api.http).get = "/applications/stats";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };

  /*
  GetDisconnectedServices

  Marks services as disconnected based on 'threshold_seconds'.
  This function is not used by the API or CLI and is here for testing purposes.
  The functionality is currently covered by a periodicly runnig job that can be configured
  by utilizing UpdateDisconnectedServicesConfig.
  */
  rpc GetDisconnectedServices(DisconnectedServicesReq) returns (ServicesRes ) {
    option (google.api.http).get = "/applications/disconnected_services";
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "list";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:list";
  };

  /*
  DeleteDisconnectedServices

  Deletes services that have been marked as disconnected after 'threshold_seconds'.
  This function is not used by the API or CLI and is here for testing purposes.
  The functionality is currently covered by a periodicly runnig job that can be configured
  by utilizing UpdateDeleteDisconnectedServicesConfig.
  */
  rpc DeleteDisconnectedServices(DisconnectedServicesReq) returns (ServicesRes ) {
    option (google.api.http) = {
      post: "/applications/delete_disconnected_services"
      body: "*"
    };
    option (chef.automate.api.policy).resource = "service_groups";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "applications:serviceGroups";
    option (chef.automate.api.iam.policy).action = "applications:serviceGroups:delete";
  };

  /*
  GetDisconnectedServicesConfig

  Returns config information for the periodicly running task that marks services as disconnected after
  'threshold'. Threshold is a string that follows elasticsearch's date math expressions.
  This job cannot be disabled, and therefor no information about running or not is provided.
  */
  rpc GetDisconnectedServicesConfig(GetDisconnectedServicesConfigReq) returns (PeriodicMandatoryJobConfig) {
    option (google.api.http).get = "/retention/service_groups/disconnected_services/config";

    option (chef.automate.api.policy).resource = "service_groups:scheduler:disconnected_services";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:get";
  };

  /*
  UpdateDisconnectedServicesConfig

  Updates config information for the periodicly running task that marks services as disconnected after
  'threshold'. Threshold is a string that follows elasticsearch's date math expressions.
  This job cannot be disabled, and therefor no information about running is accepted.

  Example:
  ```
  /retention/service_groups/disconnected_services/config
  '{
    "threshold": "15m"
  }'
  ```
  */
  rpc UpdateDisconnectedServicesConfig(PeriodicMandatoryJobConfig) returns (UpdateDisconnectedServicesConfigRes) {
    option (google.api.http) = {
      post: "/retention/service_groups/disconnected_services/config"
      body: "*"
    };

    option (chef.automate.api.policy).resource = "service_groups:scheduler:disconnected_services";
    option (chef.automate.api.policy).action = "configure";
    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:update";
  };

  /*
  GetDeleteDisconnectedServicesConfig

  Returns config information for the periodicly running task that deletes services already marked as disconnected
  after 'threshold'. Threshold is a string that follows elasticsearch's date math expressions.
  This job is disabled if running is set to false.
  */
  rpc GetDeleteDisconnectedServicesConfig(GetDeleteDisconnectedServicesConfigReq) returns (PeriodicJobConfig) {
    option (google.api.http).get = "/retention/service_groups/delete_disconnected_services/config";

    option (chef.automate.api.policy).resource = "service_groups:scheduler:delete_disconnected_services";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:get";
  };
  /*
  UpdateDeleteDisconnectedServicesConfig

  Updates config information for the periodicly running task that deletes services already marked as disconnected
  after 'threshold'. Threshold is a string that follows elasticsearch's date math expressions.
  This job can be disabled/enabled by setting running to false.

  Example:
  ```
  service_groups/delete_disconnected_services/config" -d
  '{
    "threshold": "1d",
    "running":true
  }'
  ```
  */
  rpc UpdateDeleteDisconnectedServicesConfig(PeriodicJobConfig) returns (UpdateDeleteDisconnectedServicesConfigRes) {
    option (google.api.http) = {
      post: "/retention/service_groups/delete_disconnected_services/config"
      body: "*"
    };

    option (chef.automate.api.policy).resource = "service_groups:scheduler:delete_disconnected_services";
    option (chef.automate.api.policy).action = "configure";
    option (chef.automate.api.iam.policy).resource = "retention:serviceGroups";
    option (chef.automate.api.iam.policy).action = "retention:serviceGroups:update";
  };
  /*
  GetVersion

  Returns the current version of the applications-service
  */
  rpc GetVersion (common.version.VersionInfoRequest) returns (common.version.VersionInfo) {
    option (google.api.http).get = "/applications/version";
    option (chef.automate.api.policy).resource = "service_info:version";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "system:service:version";
    option (chef.automate.api.iam.policy).action = "system:serviceVersion:get";
  };
}

// Request message for GetServices.
message ServicesReq {
  // Search bar filters to apply to services, in the format of fieldname:value.
  repeated string filter = 1;
  // Pagination parameters to apply to the returns services list.
  common.query.Pagination pagination = 2;
  // Sorting parameters to apply to the returns services list.
  common.query.Sorting sorting = 3;
}

// Request message for GetServicesDistinctValues.
message ServicesDistinctValuesReq {
  // Field name of service values to retrieve.
  string field_name = 1;
  // Text of value to query, supports wildcards (* and ?).
  string query_fragment = 2;
  // Filters to apply to values, in the format of fieldname:value.
  repeated string filter = 3;
}

// Request message for GetServicesBySG.
message ServicesBySGReq {
  // Service group ID of the services.
  string service_group_id = 1;
  // Pagination parameters to apply to the returned list of services.
  common.query.Pagination pagination = 2;
  // Sorting paramters to apply to the returned list of services.
  common.query.Sorting sorting = 3;
  // Filters to apply to services, in the format of fieldname:value.
  repeated string filter = 5;
}

// Response message for GetServicesBySG.
message ServicesBySGRes {
  // Service group name.
  string group = 1;
  // List of services.
  repeated Service services = 2;
  // Health counts for services in the service group.
  HealthCounts services_health_counts = 3;
}

// Response message for GetServices.
message ServicesRes {
  // List of services.
  repeated Service services = 1;
}

// Response message for GetServicesDistinctValues.
message ServicesDistinctValuesRes {
  // List of distinct values fitting query_fragment and filters.
  repeated string values = 1;
}

// Request message for GetDisconnectedServices.
message DisconnectedServicesReq {
  // Unused.
  reserved 1;
  // Threshold for marking services disconnected in seconds.
  int32 threshold_seconds = 2;
}

// Request message for ServicesStats.
message ServicesStatsReq {
}

// Response message for ServicesStats.
message ServicesStatsRes {
  // Total service groups reporting to automate.
  int32 total_service_groups = 1;
  // Total services reporting to automate (connected and disconnected).
  int32 total_services = 2;
  // Total supervisors reporting to automate.
  int32 total_supervisors = 3;
  // Total deployments reporting to automate.
  int32 total_deployments = 4;
}

// Configuration information for periodic jobs.
message PeriodicJobConfig {
  // Is the job running? false is disabled, true is enabled.
  bool running = 1;
  // Time based threshold for the periodic job to use in evaluating services.
  // To match the ingest API at /retention/nodes/missing-nodes/config, we use a
  // string format that is a subset of elasticsearch's date math. See the
  // simpledatemath package under lib/ for more details
  string threshold = 2;
}

// Configuration information for a mandatory periodic job.
// it's like a PeriodicJobConfig but the user isn't allowed to change whether
// or not the job runs
message PeriodicMandatoryJobConfig {
    // Time based threshold for the periodic job to use in evaluating services.
  // To match the ingest API at /retention/nodes/missing-nodes/config, we use a
  // string format that is a subset of elasticsearch's date math. See the
  // simpledatemath package under lib/ for more details
  string threshold = 1;
}

message GetDisconnectedServicesConfigReq{}
message UpdateDisconnectedServicesConfigRes {}

message GetDeleteDisconnectedServicesConfigReq{}
message UpdateDeleteDisconnectedServicesConfigRes {}

message Service {
  // The habitat supervisor ID.
  string supervisor_id = 1;
  // Combination of the service version and release in a single string like:
  // Example: 0.1.0/8743278934278923.
  string release = 2;
  // Service group name
  string group = 3;
  // Enumerated value for health status.
  HealthStatus health_check = 4;
  // The ServiceStatus enum describes the status of the service (Currently Unimplemented).
  ServiceStatus status = 5;
  // Application name.
  string application = 6;
  // Environment name.
  string environment = 7;
  // FQDN reported by habitat supervisor.
  string fqdn = 8;
  // Habitat channel that the service is subscribed to.
  string channel = 9;
  // Update strategy that the service employs.
  string update_strategy = 10;
  // Site reported by habitat service, a user defined flag.
  string site = 17;
  // Last reported health status before currently health status.
  HealthStatus previous_health_check = 18;
  // Time interval of current health status from last status change until now.
  string current_health_since = 19;
  // Timestamp since health status change.
  google.protobuf.Timestamp health_updated_at = 20;
  // Service connection information.
  // based on time since last healthcheck received and disconnected service configuration
  bool disconnected = 21;
  // Timestamp of last received health check message.
  google.protobuf.Timestamp last_event_occurred_at = 22;
  // Interval since last event received until now.
  string last_event_since = 23;
  HealthCheckResult health_check_result = 24;
}

// Request message for GetServiceGroupsHealthCounts
message ServiceGroupsHealthCountsReq {
  // Applicable search bar filters to apply to counts, in the format of fieldname:value.
  repeated string filter = 1;
}

// Request message for GetServiceGroups
message ServiceGroupsReq {
  // Search bar and status filters, in the format of fieldname:value or status:value.
  repeated string filter = 1;
  // Pagination parameters for service groups list.
  common.query.Pagination pagination = 2;
  // Sorting parameters for service groups list.
  common.query.Sorting sorting = 3;
}

// A service group message is the representation of one single service group that
// is internally generated by aggregating all the services
message ServiceGroup {
  // Name of service group.
  string name = 1;
  // Combination of the version and release in a single string like:
  // Example: 0.1.0/8743278934278923.
  string release = 2;
  // Status of the service group. If any services are critical it is critical.
  // If any of the services are warning with no critical services then the status is warning.
  // If any of the services are unknown with no warning or critical services then the status if unknown.
  // If all of the services are ok then the status is ok.
  HealthStatus status = 3;
  // Percentage of services reporting OK status.
  // The health_percentage can be a number between 0-100
  int32 health_percentage = 4;
  // Health status counts for services within this service group.
  HealthCounts services_health_counts = 5;
  // Service group ID. This is a value constructed by automate and is not reported by habitat.
  string id = 6;
  // Application name for the service group.
  string application = 7;
  // Environment name for the service group.
  string environment = 8;
  // Combination of the origin and package name in a single string like:
  // Example: core/redis.
  string package = 9;
  // Count of disconnected services within this service group.
  int32 disconnected_count = 10;
}

// Count values for health statuses and disconnected status
message HealthCounts {
  int32 total = 1;
  int32 ok = 2;
  int32 warning = 3;
  int32 critical = 4;
  int32 unknown = 5;
  int32 disconnected = 6;
}

// The package identifier of a service is unique and is the combination
// of origin/name/version/release
//
// Example: core/redis/0.1.0/8743278934278923
message PackageIdent {
  // Habitat origin.
  string origin = 1;
  // Habitat package name.
  string name = 2;
  // Habitat release version number.
  string version = 3;
  // Habitat release buildstamp.
  string release = 4;
}

message ServiceGroups  {
  // List of service groups.
  repeated ServiceGroup service_groups = 1;
}

// The ServiceStatus enum describes the status of the service
// Currently unimplemented
enum ServiceStatus {
  RUNNING = 0;
  INITIALIZING = 1;
  DEPLOYING = 2;
  DOWN = 3;
}

// The HealthStatus enum matches the habitat implementation for health-check status:
// => https://www.habitat.sh/docs/reference/#health-check
enum HealthStatus {
  OK = 0;
  WARNING = 1;
  CRITICAL = 2;
  UNKNOWN = 3;

  // The representation of NO health check status
  // TODO @afiune how much effort would be to change
  // the OK enum to be NONE
  NONE = 17;
}

// HealthCheckResult aggregates the stdout output, stderr output and process
// exit status of a habitat health check
message HealthCheckResult {
  string stdout = 1;
  string stderr = 2;
  int32 exit_status = 3;
}
