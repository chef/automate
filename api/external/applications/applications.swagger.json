{
  "swagger": "2.0",
  "info": {
    "title": "api/external/applications/applications.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/applications/delete_disconnected_services": {
      "post": {
        "summary": "DeleteDisconnectedServices",
        "description": "Deletes services that have been marked as disconnected after 'threshold_seconds'.\nThis function is not used by the API or CLI and is here for testing purposes.\nThe functionality is currently covered by a periodicly runnig job that can be configured\nby utilizing UpdateDeleteDisconnectedServicesConfig.",
        "operationId": "DeleteDisconnectedServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.ServicesRes"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.DisconnectedServicesReq"
            }
          }
        ],
        "tags": [
          "ApplicationsService"
        ]
      }
    },
    "/applications/disconnected_services": {
      "get": {
        "summary": "GetDisconnectedServices",
        "description": "Marks services as disconnected based on 'threshold_seconds'.\nThis function is not used by the API or CLI and is here for testing purposes.\nThe functionality is currently covered by a periodicly runnig job that can be configured\nby utilizing UpdateDisconnectedServicesConfig.",
        "operationId": "GetDisconnectedServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.ServicesRes"
            }
          }
        },
        "parameters": [
          {
            "name": "threshold_seconds",
            "description": "Threshold for marking services disconnected in seconds.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ApplicationsService"
        ]
      }
    },
    "/applications/service-groups": {
      "get": {
        "summary": "GetServiceGroups",
        "description": "Returns a list of service groups with name, health information, and app, env, package, release metadata.\nAccepts pagination, sorting, search bar and status filters.\n\nExample:\n```\napplications/service-groups?sorting.field=percent_ok\u0026sorting.order=ASC\u0026pagination.page=1\u0026pagination.size=25\n```",
        "operationId": "GetServiceGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.ServiceGroups"
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "description": "Search bar and status filters, in the format of fieldname:value or status:value.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pagination.page",
            "description": "Page number of the results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.size",
            "description": "Amount of results to include per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sorting.field",
            "description": "Field to sort the list results on.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sorting.order",
            "description": "Order the results should be returned in.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "ASC"
          }
        ],
        "tags": [
          "ApplicationsService"
        ]
      }
    },
    "/applications/service-groups/{service_group_id}": {
      "get": {
        "summary": "GetServicesBySG",
        "description": "Returns a list of services for a service group ID with health status and service metadata.\nThe service group ID is a value generated by automate based on unique identifiers, and is not reported by habitat.\nAccepts status filters, search bar filters and sidebar pagination parameters\n\nExample:\n```\napplications/service-groups/1dfff679054c60a10c51d059b6dbf81a765c46f8d3e8ce0752b22ffe8d4d9716?pagination.page=1\u0026pagination.size=25\n```",
        "operationId": "GetServicesBySG",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.ServicesBySGRes"
            }
          }
        },
        "parameters": [
          {
            "name": "service_group_id",
            "description": "Service group ID of the services.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.page",
            "description": "Page number of the results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.size",
            "description": "Amount of results to include per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sorting.field",
            "description": "Field to sort the list results on.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sorting.order",
            "description": "Order the results should be returned in.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "ASC"
          },
          {
            "name": "filter",
            "description": "Filters to apply to services, in the format of fieldname:value.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ApplicationsService"
        ]
      }
    },
    "/applications/service_groups_health_counts": {
      "get": {
        "summary": "GetServiceGroupsHealthCounts",
        "description": "Returns totals for critical, warning, ok and unknown service groups.\nSupports search bar filtering.",
        "operationId": "GetServiceGroupsHealthCounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.HealthCounts"
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "description": "Applicable search bar filters to apply to counts, in the format of fieldname:value.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ApplicationsService"
        ]
      }
    },
    "/applications/services": {
      "get": {
        "summary": "GetServices",
        "description": "Returns a list of services with service health and service metadata.\nAccepts pagination and filters. To get services for a specific service-group use GetServicesBySG.",
        "operationId": "GetServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.ServicesRes"
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "description": "Search bar filters to apply to services, in the format of fieldname:value.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pagination.page",
            "description": "Page number of the results to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.size",
            "description": "Amount of results to include per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sorting.field",
            "description": "Field to sort the list results on.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sorting.order",
            "description": "Order the results should be returned in.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ],
            "default": "ASC"
          }
        ],
        "tags": [
          "ApplicationsService"
        ]
      }
    },
    "/applications/services-distinct-values": {
      "get": {
        "summary": "GetServicesDistinctValues",
        "description": "Returns possible distinct filter values for a given valid field name. All values returned until one or more\ncharacters are provided for the `query_fragment` parameter.\nSupports wildcard (* and ?)",
        "operationId": "GetServicesDistinctValues",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.ServicesDistinctValuesRes"
            }
          }
        },
        "parameters": [
          {
            "name": "field_name",
            "description": "Field name of service values to retrieve.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query_fragment",
            "description": "Text of value to query, supports wildcards (* and ?).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Filters to apply to values, in the format of fieldname:value.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ApplicationsService"
        ]
      }
    },
    "/applications/stats": {
      "get": {
        "summary": "GetServicesStats",
        "description": "Returns the total service-groups, services, deployments and supervisors. Used for telemetry purposes.\nAccepts to filters as the intent is to get an overall snapshot.",
        "operationId": "GetServicesStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.ServicesStatsRes"
            }
          }
        },
        "tags": [
          "ApplicationsService"
        ]
      }
    },
    "/applications/version": {
      "get": {
        "summary": "GetVersion",
        "description": "Returns the current version of the applications-service",
        "operationId": "GetVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.common.version.VersionInfo"
            }
          }
        },
        "tags": [
          "ApplicationsService"
        ]
      }
    },
    "/retention/service_groups/delete_disconnected_services/config": {
      "get": {
        "summary": "GetDeleteDisconnectedServicesConfig",
        "description": "Returns config information for the periodicly running task that deletes services already marked as disconnected\nafter 'threshold'. Threshold is a string that follows elasticsearch's date math expressions.\nThis job is disabled if running is set to false.",
        "operationId": "GetDeleteDisconnectedServicesConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.PeriodicJobConfig"
            }
          }
        },
        "tags": [
          "ApplicationsService"
        ]
      },
      "post": {
        "summary": "UpdateDeleteDisconnectedServicesConfig",
        "description": "Updates config information for the periodicly running task that deletes services already marked as disconnected\nafter 'threshold'. Threshold is a string that follows elasticsearch's date math expressions.\nThis job can be disabled/enabled by setting running to false.\n\nExample:\n```\nservice_groups/delete_disconnected_services/config\" -d\n'{\n\"threshold\": \"1d\",\n\"running\":true\n}'\n```",
        "operationId": "UpdateDeleteDisconnectedServicesConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.UpdateDeleteDisconnectedServicesConfigRes"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.PeriodicJobConfig"
            }
          }
        ],
        "tags": [
          "ApplicationsService"
        ]
      }
    },
    "/retention/service_groups/disconnected_services/config": {
      "get": {
        "summary": "GetDisconnectedServicesConfig",
        "description": "Returns config information for the periodicly running task that marks services as disconnected after\n'threshold'. Threshold is a string that follows elasticsearch's date math expressions.\nThis job cannot be disabled, and therefor no information about running or not is provided.",
        "operationId": "GetDisconnectedServicesConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.PeriodicMandatoryJobConfig"
            }
          }
        },
        "tags": [
          "ApplicationsService"
        ]
      },
      "post": {
        "summary": "UpdateDisconnectedServicesConfig",
        "description": "Updates config information for the periodicly running task that marks services as disconnected after\n'threshold'. Threshold is a string that follows elasticsearch's date math expressions.\nThis job cannot be disabled, and therefor no information about running is accepted.\n\nExample:\n```\n/retention/service_groups/disconnected_services/config\n'{\n\"threshold\": \"15m\"\n}'\n```",
        "operationId": "UpdateDisconnectedServicesConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.UpdateDisconnectedServicesConfigRes"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chef.automate.api.applications.PeriodicMandatoryJobConfig"
            }
          }
        ],
        "tags": [
          "ApplicationsService"
        ]
      }
    }
  },
  "definitions": {
    "chef.automate.api.applications.DisconnectedServicesReq": {
      "type": "object",
      "properties": {
        "threshold_seconds": {
          "type": "integer",
          "format": "int32",
          "description": "Threshold for marking services disconnected in seconds."
        }
      },
      "description": "Request message for GetDisconnectedServices."
    },
    "chef.automate.api.applications.HealthCheckResult": {
      "type": "object",
      "properties": {
        "stdout": {
          "type": "string"
        },
        "stderr": {
          "type": "string"
        },
        "exit_status": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "HealthCheckResult aggregates the stdout output, stderr output and process\nexit status of a habitat health check"
    },
    "chef.automate.api.applications.HealthCounts": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "ok": {
          "type": "integer",
          "format": "int32"
        },
        "warning": {
          "type": "integer",
          "format": "int32"
        },
        "critical": {
          "type": "integer",
          "format": "int32"
        },
        "unknown": {
          "type": "integer",
          "format": "int32"
        },
        "disconnected": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Count values for health statuses and disconnected status"
    },
    "chef.automate.api.applications.HealthStatus": {
      "type": "string",
      "enum": [
        "OK",
        "WARNING",
        "CRITICAL",
        "UNKNOWN",
        "NONE"
      ],
      "default": "OK",
      "description": "- NONE: The representation of NO health check status\nTODO @afiune how much effort would be to change\nthe OK enum to be NONE",
      "title": "The HealthStatus enum matches the habitat implementation for health-check status:\n=\u003e https://www.habitat.sh/docs/reference/#health-check"
    },
    "chef.automate.api.applications.PeriodicJobConfig": {
      "type": "object",
      "properties": {
        "running": {
          "type": "boolean",
          "format": "boolean",
          "description": "Is the job running? false is disabled, true is enabled."
        },
        "threshold": {
          "type": "string",
          "title": "Time based threshold for the periodic job to use in evaluating services.\nTo match the ingest API at /retention/nodes/missing-nodes/config, we use a\nstring format that is a subset of elasticsearch's date math. See the\nsimpledatemath package under lib/ for more details"
        }
      },
      "description": "Configuration information for periodic jobs."
    },
    "chef.automate.api.applications.PeriodicMandatoryJobConfig": {
      "type": "object",
      "properties": {
        "threshold": {
          "type": "string",
          "title": "Time based threshold for the periodic job to use in evaluating services.\nTo match the ingest API at /retention/nodes/missing-nodes/config, we use a\nstring format that is a subset of elasticsearch's date math. See the\nsimpledatemath package under lib/ for more details"
        }
      },
      "title": "Configuration information for a mandatory periodic job.\nit's like a PeriodicJobConfig but the user isn't allowed to change whether\nor not the job runs"
    },
    "chef.automate.api.applications.Service": {
      "type": "object",
      "properties": {
        "supervisor_id": {
          "type": "string",
          "description": "The habitat supervisor ID."
        },
        "release": {
          "type": "string",
          "description": "Combination of the service version and release in a single string like:\nExample: 0.1.0/8743278934278923."
        },
        "group": {
          "type": "string",
          "title": "Service group name"
        },
        "health_check": {
          "$ref": "#/definitions/chef.automate.api.applications.HealthStatus",
          "description": "Enumerated value for health status."
        },
        "status": {
          "$ref": "#/definitions/chef.automate.api.applications.ServiceStatus",
          "description": "The ServiceStatus enum describes the status of the service (Currently Unimplemented)."
        },
        "application": {
          "type": "string",
          "description": "Application name."
        },
        "environment": {
          "type": "string",
          "description": "Environment name."
        },
        "fqdn": {
          "type": "string",
          "description": "FQDN reported by habitat supervisor."
        },
        "channel": {
          "type": "string",
          "description": "Habitat channel that the service is subscribed to."
        },
        "update_strategy": {
          "type": "string",
          "description": "Update strategy that the service employs."
        },
        "site": {
          "type": "string",
          "description": "Site reported by habitat service, a user defined flag."
        },
        "previous_health_check": {
          "$ref": "#/definitions/chef.automate.api.applications.HealthStatus",
          "description": "Last reported health status before currently health status."
        },
        "current_health_since": {
          "type": "string",
          "description": "Time interval of current health status from last status change until now."
        },
        "health_updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp since health status change."
        },
        "disconnected": {
          "type": "boolean",
          "format": "boolean",
          "title": "Service connection information.\nbased on time since last healthcheck received and disconnected service configuration"
        },
        "last_event_occurred_at": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of last received health check message."
        },
        "last_event_since": {
          "type": "string",
          "description": "Interval since last event received until now."
        }
      }
    },
    "chef.automate.api.applications.ServiceGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of service group."
        },
        "release": {
          "type": "string",
          "description": "Combination of the version and release in a single string like:\nExample: 0.1.0/8743278934278923."
        },
        "status": {
          "$ref": "#/definitions/chef.automate.api.applications.HealthStatus",
          "description": "Status of the service group. If any services are critical it is critical.\nIf any of the services are warning with no critical services then the status is warning.\nIf any of the services are unknown with no warning or critical services then the status if unknown.\nIf all of the services are ok then the status is ok."
        },
        "health_percentage": {
          "type": "integer",
          "format": "int32",
          "title": "Percentage of services reporting OK status.\nThe health_percentage can be a number between 0-100"
        },
        "services_health_counts": {
          "$ref": "#/definitions/chef.automate.api.applications.HealthCounts",
          "description": "Health status counts for services within this service group."
        },
        "id": {
          "type": "string",
          "description": "Service group ID. This is a value constructed by automate and is not reported by habitat."
        },
        "application": {
          "type": "string",
          "description": "Application name for the service group."
        },
        "environment": {
          "type": "string",
          "description": "Environment name for the service group."
        },
        "package": {
          "type": "string",
          "description": "Combination of the origin and package name in a single string like:\nExample: core/redis."
        },
        "disconnected_count": {
          "type": "integer",
          "format": "int32",
          "description": "Count of disconnected services within this service group."
        }
      },
      "title": "A service group message is the representation of one single service group that\nis internally generated by aggregating all the services"
    },
    "chef.automate.api.applications.ServiceGroups": {
      "type": "object",
      "properties": {
        "service_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/chef.automate.api.applications.ServiceGroup"
          },
          "description": "List of service groups."
        }
      }
    },
    "chef.automate.api.applications.ServiceStatus": {
      "type": "string",
      "enum": [
        "RUNNING",
        "INITIALIZING",
        "DEPLOYING",
        "DOWN"
      ],
      "default": "RUNNING",
      "title": "The ServiceStatus enum describes the status of the service\nCurrently unimplemented"
    },
    "chef.automate.api.applications.ServicesBySGRes": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "description": "Service group name."
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/chef.automate.api.applications.Service"
          },
          "description": "List of services."
        },
        "services_health_counts": {
          "$ref": "#/definitions/chef.automate.api.applications.HealthCounts",
          "description": "Health counts for services in the service group."
        }
      },
      "description": "Response message for GetServicesBySG."
    },
    "chef.automate.api.applications.ServicesDistinctValuesRes": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of distinct values fitting query_fragment and filters."
        }
      },
      "description": "Response message for GetServicesDistinctValues."
    },
    "chef.automate.api.applications.ServicesRes": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/chef.automate.api.applications.Service"
          },
          "description": "List of services."
        }
      },
      "description": "Response message for GetServices."
    },
    "chef.automate.api.applications.ServicesStatsRes": {
      "type": "object",
      "properties": {
        "total_service_groups": {
          "type": "integer",
          "format": "int32",
          "description": "Total service groups reporting to automate."
        },
        "total_services": {
          "type": "integer",
          "format": "int32",
          "description": "Total services reporting to automate (connected and disconnected)."
        },
        "total_supervisors": {
          "type": "integer",
          "format": "int32",
          "description": "Total supervisors reporting to automate."
        },
        "total_deployments": {
          "type": "integer",
          "format": "int32",
          "description": "Total deployments reporting to automate."
        }
      },
      "description": "Response message for ServicesStats."
    },
    "chef.automate.api.applications.UpdateDeleteDisconnectedServicesConfigRes": {
      "type": "object"
    },
    "chef.automate.api.applications.UpdateDisconnectedServicesConfigRes": {
      "type": "object"
    },
    "chef.automate.api.common.query.Pagination": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of the results to return."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "Amount of results to include per page."
        }
      }
    },
    "chef.automate.api.common.query.SortOrder": {
      "type": "string",
      "enum": [
        "ASC",
        "DESC"
      ],
      "default": "ASC"
    },
    "chef.automate.api.common.query.Sorting": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "description": "Field to sort the list results on."
        },
        "order": {
          "$ref": "#/definitions/chef.automate.api.common.query.SortOrder",
          "description": "Order the results should be returned in."
        }
      }
    },
    "chef.automate.api.common.version.VersionInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        },
        "built": {
          "type": "string"
        }
      }
    }
  }
}
