syntax = "proto3";

package chef.automate.api.iam.v2;
option go_package = "github.com/chef/automate/api/external/iam/v2";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "external/iam/v2/request/users.proto";
import "external/iam/v2/response/users.proto";

import "external/annotations/iam/annotations.proto";

service Users {

  /*
  Create a user

  Creates a local user that can sign in to Automate and be a member of IAM teams
  and IAM policies.

  Authorization Action:
  ```
  iam:users:create
  ```
  */
  rpc CreateUser (CreateUserReq) returns (CreateUserResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "users";
			extensions: {
				key: "x-code-samples";
				value {
					list_value: {
						values: {
							struct_value {
								fields {
									key: "lang";
									value {
										string_value: "JSON";
									}
								}
								fields {
									key: "source";
									value {
                    string_value: '{"name": "Display Name", "id": "username001rulez", "password": "aSafePassword"}';
                  }
								}
							}
						}
					}
				}
			}
		};
    option (google.api.http) = {
      post: "/apis/iam/v2/users"
      body: "*"
    };
    option (chef.automate.api.iam.policy).resource = "iam:users";
    option (chef.automate.api.iam.policy).action = "iam:users:create";
  };

  /*
  List all users

  Lists all local users.

  Authorization Action:
  ```
  iam:users:list
  ```
  */
  rpc ListUsers (ListUsersReq) returns (ListUsersResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "users";
    };
    option (google.api.http) = {
      get: "/apis/iam/v2/users"
    };
    option (chef.automate.api.iam.policy).resource = "iam:users";
    option (chef.automate.api.iam.policy).action = "iam:users:list";
  };

  /*
  Get a user

  Returns the details for a local user.

  Authorization Action:
  ```
  iam:users:get
  ```
  */
  rpc GetUser (GetUserReq) returns (GetUserResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "users";
    };
    option (google.api.http) = {
      get: "/apis/iam/v2/users/{id}"
    };
    option (chef.automate.api.iam.policy).resource = "iam:users:{id}";
    option (chef.automate.api.iam.policy).action = "iam:users:get";
  };

  /*
  Delete a user

  Deletes a local user.

  Authorization Action:
  ```
  iam:users:delete
  ```
  */
  rpc DeleteUser (DeleteUserReq) returns (DeleteUserResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "users";
    };
    option (google.api.http) = {
      delete: "/apis/iam/v2/users/{id}"
    };
    option (chef.automate.api.iam.policy).resource = "iam:users:{id}";
    option (chef.automate.api.iam.policy).action = "iam:users:delete";
  };

  /*
  Update a user

  Updates a local user's name or password.

  Authorization Action:
  ```
  iam:users:update
  ```
  */
  rpc UpdateUser (UpdateUserReq) returns (UpdateUserResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "users";
			extensions: {
				key: "x-code-samples";
				value {
					list_value: {
						values: {
							struct_value {
								fields {
									key: "lang";
									value {
										string_value: "JSON";
									}
								}
								fields {
									key: "source";
									value {
                    string_value: '{"name": "New Name", "password": "aSafePassword"}';
                  }
								}
							}
						}
					}
				}
			}
		};
    option (google.api.http) = {
      put: "/apis/iam/v2/users/{id}"
      body: "*"
    };
    option (chef.automate.api.iam.policy).resource = "iam:users:{id}";
    option (chef.automate.api.iam.policy).action = "iam:users:update";
  };

  /*
  Update self (as user)

  Updates a local user's own name or password.
  If changing the password, both "password" and "previous_password" are required.

  Authorization Action:
  ```
  iam:usersSelf:update
  ```
  */
  rpc UpdateSelf (UpdateSelfReq) returns (UpdateSelfResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "users";
			extensions: {
				key: "x-code-samples";
				value {
					list_value: {
						values: {
							struct_value {
								fields {
									key: "lang";
									value {
										string_value: "JSON";
									}
								}
								fields {
									key: "source";
									value {
                    string_value: '{"name": "My New Name", "password": "aNewSafePassword", "previous_password": "aPreviousSafePassword"}';
                  }
								}
							}
						}
					}
				}
			}
		};
    option (google.api.http) = {
      put: "/apis/iam/v2/self/{id}"
      body: "*"
    };
    // The users namespace, as opposed for auth:users, is for actions users
    // are allowed to perform on themselves by default without admin permissions.
    option (chef.automate.api.iam.policy).resource = "iam:usersSelf:{id}";
    option (chef.automate.api.iam.policy).action = "iam:usersSelf:update";
  };
};
