syntax = "proto3";

package chef.automate.api.ingest;
option go_package = "github.com/chef/automate/api/external/ingest";

import "google/api/annotations.proto";

import "external/annotations/iam/annotations.proto";

import "external/common/version/version.proto";

import "external/ingest/request/chef.proto";
import "external/ingest/request/action.proto";
import "external/ingest/request/liveness.proto";

import "external/ingest/response/chef.proto";
import "external/ingest/response/action.proto";
import "external/ingest/response/liveness.proto";

service ChefIngester {
  rpc ProcessChefRun (ingest.request.Run) returns (ingest.response.ProcessChefRunResponse) {
    option (google.api.http) = {
      post: "/api/v0/ingest/events/chef/run"
      body: "*"
    };
    option (chef.automate.api.iam.policy).resource = "ingest:nodes:{entity_uuid}:runs";
    option (chef.automate.api.iam.policy).action = "ingest:nodes:create";
  };
  rpc ProcessChefAction (ingest.request.Action) returns (ingest.response.ProcessChefActionResponse) {
    option (google.api.http) = {
      post: "/api/v0/ingest/events/chef/action"
      body: "*"
    };
    // actions can be anything a user does on chef server
    // not necessarily related to nodes
    option (chef.automate.api.iam.policy).resource = "ingest:actions";
    option (chef.automate.api.iam.policy).action = "ingest:actions:create";
  };
  rpc ProcessNodeDelete (ingest.request.Delete) returns (ingest.response.ProcessNodeDeleteResponse) {
    option (google.api.http) = {
      post: "/api/v0/ingest/events/chef/nodedelete"
      body: "*"
    };
    // special action that marks a node for deletion
    // but scheduler actually deletes it
    // NOTE: if this is called by chef server, node_id will not be provided
    // for now we cannot enforce deleting a specific node, just any node or none
    option (chef.automate.api.iam.policy).resource = "ingest:nodes";
    option (chef.automate.api.iam.policy).action = "ingest:nodes:delete";
  };
  rpc ProcessMultipleNodeDeletes (ingest.request.MultipleNodeDeleteRequest) returns (ingest.response.ProcessMultipleNodeDeleteResponse) {
    option (google.api.http) = {
      post: "/api/v0/ingest/events/chef/node-multiple-deletes"
      body: "*"
    };
    option (chef.automate.api.iam.policy).resource = "ingest:nodes";
    option (chef.automate.api.iam.policy).action = "ingest:nodes:delete";
  };
  rpc ProcessLivenessPing(ingest.request.Liveness) returns (ingest.response.ProcessLivenessResponse) {
    option (google.api.http) = {
      post: "/api/v0/ingest/events/chef/liveness"
      body: "*"
    };
    option (chef.automate.api.iam.policy).resource = "ingest:nodes:{entity_uuid}:liveness";
    option (chef.automate.api.iam.policy).action = "ingest:nodes:create";
  }
  rpc GetVersion (common.version.VersionInfoRequest) returns (common.version.VersionInfo) {
    option (google.api.http).get = "/api/v0/ingest/version";
    option (chef.automate.api.iam.policy).resource = "system:service:version";
    option (chef.automate.api.iam.policy).action = "system:serviceVersion:get";
  };
}
