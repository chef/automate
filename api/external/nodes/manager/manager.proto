syntax = "proto3";

package chef.automate.api.nodes.manager.v1;
option go_package = "github.com/chef/automate/api/external/nodes/manager";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

import "components/compliance-service/api/common/common.proto";

service NodeManagerService {
	rpc Create(NodeManager) returns (Ids) {
		option (google.api.http) = {
			post: "/nodemanagers"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers"
			action: "create"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers"
			action: "infra:nodeManagers:create"
		};
	};
	rpc Read(Id) returns (NodeManager) {
		option (google.api.http) = {
			get: "/nodemanagers/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers:{id}"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers:{id}"
			action: "infra:nodeManagers:get"
		};
	};
	rpc Update(NodeManager) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			put: "/nodemanagers/id/{id}"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers:{id}"
			action: "update"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers:{id}"
			action: "infra:nodeManagers:update"
		};
	};
	rpc Delete(Id) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/nodemanagers/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers:{id}"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers:{id}"
			action: "infra:nodeManagers:delete"
		};
	};
	rpc DeleteWithNodes(Id) returns (Ids) {
		option (google.api.http) = {
			delete: "/nodemanagers/id/{id}/with-nodes"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers:{id}"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers:{id}"
			action: "infra:nodeManagers:delete"
		};
	};
	rpc DeleteWithNodeStateStopped(Id) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/nodemanagers/id/{id}/with-node-state/stopped"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers:{id}"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers:{id}"
			action: "infra:nodeManagers:delete"
		};
	};
	rpc DeleteWithNodeStateTerminated(Id) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/nodemanagers/id/{id}/with-node-state/terminated"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers:{id}"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers:{id}"
			action: "infra:nodeManagers:delete"
		};
	};
	rpc List(Query) returns (NodeManagers) {
		option (google.api.http) = {
			post: "/nodemanagers/search"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers"
			action: "list"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers"
			action: "infra:nodeManagers:list"
		};
	};
	rpc SearchNodeFields(FieldQuery) returns (Fields) {
		option (google.api.http) = {
			post: "/nodemanagers/id/{node_manager_id}/search-fields"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers:{node_manager_id}:fields"
			action: "search"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers:{node_manager_id}:fields"
			action: "infra:nodeManagers:list"
		};
	};
	rpc SearchNodes(NodeQuery) returns (Nodes) {
		option (google.api.http) = {
			post: "/nodemanagers/id/{node_manager_id}/search-nodes"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers:{node_manager_id}:nodes"
			action: "search"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers:{node_manager_id}:nodes"
			action: "infra:nodeManagers:list"
		};
	};
	rpc Connect(Id) returns (ConnectResponse) {
		option (google.api.http) = {
			post: "/nodemanagers/rerun/id/{id}"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodemanagers:{id}:nodes"
			action: "rerun"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodeManagers:{id}:nodes"
			action: "infra:nodeManagers:rerun"
		};
	};
}

message ConnectResponse{}

message Id {
	string id = 1;
}
message Ids {
	repeated Id ids = 1;
}

message Query {
	repeated chef.automate.domain.compliance.api.common.Filter filter_map = 25;

	enum OrderType {
		ASC = 0;
		DESC = 1;
	}
	OrderType order = 21;
	string sort = 22;
	int32 page = 23;
	int32 per_page = 24;
}

message Fields {
	repeated string fields = 1;
}

message FieldQuery {
		Query query = 20;
		string field = 21;
		string node_manager_id = 22;
}

message Nodes {
		repeated string nodes = 1;
		int32 total = 20;
}

message NodeQuery {
		Query query = 20;
		string node_manager_id = 21;
}

message NodeManager {
		string id = 1;
		string name = 2;
		string type = 3;
		string credential_id = 20; // aws or azure cred id
		repeated CredentialsByTags instance_credentials = 21; // ssh, winrm creds
		string status = 22;
		string account_id = 24;
		google.protobuf.Timestamp date_added = 25;
		repeated chef.automate.domain.compliance.api.common.Kv credential_data = 26;
}
message CredentialsByTags {
	string tag_key = 20;
	string tag_value = 21;
	repeated string credential_ids = 22;
}
message NodeManagers {
		repeated NodeManager managers = 1;
		int32 total = 20;
}
