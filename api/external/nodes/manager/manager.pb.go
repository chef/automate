// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/nodes/manager/manager.proto

package manager

import (
	context "context"
	fmt "fmt"
	query "github.com/chef/automate/api/external/common/query"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Sort the results in ascending or descending order.
type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

var Query_OrderType_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var Query_OrderType_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x Query_OrderType) String() string {
	return proto.EnumName(Query_OrderType_name, int32(x))
}

func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{3, 0}
}

type ConnectResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{0}
}

func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectResponse.Unmarshal(m, b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
}
func (m *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(m, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectResponse.Size(m)
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

type Id struct {
	// UUID for the node manager.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{1}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Ids struct {
	// List of node manager UUIDs.
	Ids                  []*Id    `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ids) Reset()         { *m = Ids{} }
func (m *Ids) String() string { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()    {}
func (*Ids) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{2}
}

func (m *Ids) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ids.Unmarshal(m, b)
}
func (m *Ids) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ids.Marshal(b, m, deterministic)
}
func (m *Ids) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ids.Merge(m, src)
}
func (m *Ids) XXX_Size() int {
	return xxx_messageInfo_Ids.Size(m)
}
func (m *Ids) XXX_DiscardUnknown() {
	xxx_messageInfo_Ids.DiscardUnknown(m)
}

var xxx_messageInfo_Ids proto.InternalMessageInfo

func (m *Ids) GetIds() []*Id {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Query struct {
	// Filters for the query: "manager_type".
	FilterMap []*query.Filter `protobuf:"bytes,25,rep,name=filter_map,json=filterMap,proto3" json:"filter_map,omitempty"`
	Order     Query_OrderType `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.api.nodes.manager.v1.Query_OrderType" json:"order,omitempty"`
	// Field to use for sorting.
	// Valid fields are: name, type, status, status_message, date_added.
	Sort string `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty"`
	// Starting page for the list. For example, if your query returns 100 pages,
	// and you know you're looking for a node manager somewhere in the middle,
	// you might want to start on page 50.
	Page int32 `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`
	// Number of results on each page.
	PerPage              int32    `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{3}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetFilterMap() []*query.Filter {
	if m != nil {
		return m.FilterMap
	}
	return nil
}

func (m *Query) GetOrder() Query_OrderType {
	if m != nil {
		return m.Order
	}
	return Query_ASC
}

func (m *Query) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *Query) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Query) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type Fields struct {
	// One or more fields: regions, tags, name, subscription_id.
	Fields               []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fields) Reset()         { *m = Fields{} }
func (m *Fields) String() string { return proto.CompactTextString(m) }
func (*Fields) ProtoMessage()    {}
func (*Fields) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{4}
}

func (m *Fields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fields.Unmarshal(m, b)
}
func (m *Fields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fields.Marshal(b, m, deterministic)
}
func (m *Fields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fields.Merge(m, src)
}
func (m *Fields) XXX_Size() int {
	return xxx_messageInfo_Fields.Size(m)
}
func (m *Fields) XXX_DiscardUnknown() {
	xxx_messageInfo_Fields.DiscardUnknown(m)
}

var xxx_messageInfo_Fields proto.InternalMessageInfo

func (m *Fields) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type FieldQuery struct {
	// Query details (filters) to be applied to the results.
	Query *Query `protobuf:"bytes,20,opt,name=query,proto3" json:"query,omitempty"`
	// Possible search fields: regions, tags, name, subscription_id.
	Field string `protobuf:"bytes,21,opt,name=field,proto3" json:"field,omitempty"`
	// Node manager ID.
	NodeManagerId        string   `protobuf:"bytes,22,opt,name=node_manager_id,json=nodeManagerId,proto3" json:"node_manager_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldQuery) Reset()         { *m = FieldQuery{} }
func (m *FieldQuery) String() string { return proto.CompactTextString(m) }
func (*FieldQuery) ProtoMessage()    {}
func (*FieldQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{5}
}

func (m *FieldQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldQuery.Unmarshal(m, b)
}
func (m *FieldQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldQuery.Marshal(b, m, deterministic)
}
func (m *FieldQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldQuery.Merge(m, src)
}
func (m *FieldQuery) XXX_Size() int {
	return xxx_messageInfo_FieldQuery.Size(m)
}
func (m *FieldQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FieldQuery proto.InternalMessageInfo

func (m *FieldQuery) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *FieldQuery) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *FieldQuery) GetNodeManagerId() string {
	if m != nil {
		return m.NodeManagerId
	}
	return ""
}

type Nodes struct {
	// List of node names matching the request.
	Nodes []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Total count of node names matching the request.
	Total                int32    `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{6}
}

func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nodes.Unmarshal(m, b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return xxx_messageInfo_Nodes.Size(m)
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Nodes) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type NodeQuery struct {
	// Valid search filters: manager_type.
	Query *Query `protobuf:"bytes,20,opt,name=query,proto3" json:"query,omitempty"`
	// Node manager ID.
	NodeManagerId        string   `protobuf:"bytes,21,opt,name=node_manager_id,json=nodeManagerId,proto3" json:"node_manager_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeQuery) Reset()         { *m = NodeQuery{} }
func (m *NodeQuery) String() string { return proto.CompactTextString(m) }
func (*NodeQuery) ProtoMessage()    {}
func (*NodeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{7}
}

func (m *NodeQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeQuery.Unmarshal(m, b)
}
func (m *NodeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeQuery.Marshal(b, m, deterministic)
}
func (m *NodeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeQuery.Merge(m, src)
}
func (m *NodeQuery) XXX_Size() int {
	return xxx_messageInfo_NodeQuery.Size(m)
}
func (m *NodeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_NodeQuery proto.InternalMessageInfo

func (m *NodeQuery) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *NodeQuery) GetNodeManagerId() string {
	if m != nil {
		return m.NodeManagerId
	}
	return ""
}

type NodeManager struct {
	// UUID for the nodemanager.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User defined name for the node manager.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of nodemanager (aws-ec2, azure-vm, aws-api, azure-api, gcp).
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Use either 'credential_id' OR 'credential_data'.
	// 'credential_data' will overwrite values in 'credential_id'.
	// The 'credential_id' is the UUID of credential with the information
	// you need to connect to aws, azure, or gcp.
	CredentialId string `protobuf:"bytes,20,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// List of tag and credential UUID associations for making node managers.
	// These are ssh, winrm, and sudo creds used to access instances.
	InstanceCredentials []*CredentialsByTags `protobuf:"bytes,21,rep,name=instance_credentials,json=instanceCredentials,proto3" json:"instance_credentials,omitempty"`
	// Status of the nodemanager (reachable, unreachable).
	Status string `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"`
	// Account id associated with the nodemanager.
	AccountId string `protobuf:"bytes,24,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Date the nodemanager was created.
	DateAdded *timestamp.Timestamp `protobuf:"bytes,25,opt,name=date_added,json=dateAdded,proto3" json:"date_added,omitempty"`
	// Use either 'credential_data' OR 'credential_id'.
	// 'credential_data' will overwrite values in 'credential_id'.
	// Use 'credential_data' when you have not yet created node credentials
	// and provide credential data (such as AWS_ACCESS_KEY) inline.
	CredentialData       []*query.Kv `protobuf:"bytes,26,rep,name=credential_data,json=credentialData,proto3" json:"credential_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NodeManager) Reset()         { *m = NodeManager{} }
func (m *NodeManager) String() string { return proto.CompactTextString(m) }
func (*NodeManager) ProtoMessage()    {}
func (*NodeManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{8}
}

func (m *NodeManager) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeManager.Unmarshal(m, b)
}
func (m *NodeManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeManager.Marshal(b, m, deterministic)
}
func (m *NodeManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeManager.Merge(m, src)
}
func (m *NodeManager) XXX_Size() int {
	return xxx_messageInfo_NodeManager.Size(m)
}
func (m *NodeManager) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeManager.DiscardUnknown(m)
}

var xxx_messageInfo_NodeManager proto.InternalMessageInfo

func (m *NodeManager) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeManager) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeManager) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NodeManager) GetCredentialId() string {
	if m != nil {
		return m.CredentialId
	}
	return ""
}

func (m *NodeManager) GetInstanceCredentials() []*CredentialsByTags {
	if m != nil {
		return m.InstanceCredentials
	}
	return nil
}

func (m *NodeManager) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NodeManager) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *NodeManager) GetDateAdded() *timestamp.Timestamp {
	if m != nil {
		return m.DateAdded
	}
	return nil
}

func (m *NodeManager) GetCredentialData() []*query.Kv {
	if m != nil {
		return m.CredentialData
	}
	return nil
}

type CredentialsByTags struct {
	// Tag key to match on.
	TagKey string `protobuf:"bytes,20,opt,name=tag_key,json=tagKey,proto3" json:"tag_key,omitempty"`
	// Tag value to match on.
	TagValue string `protobuf:"bytes,21,opt,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
	// List of credential ids to associate with the key/value pair.
	CredentialIds        []string `protobuf:"bytes,22,rep,name=credential_ids,json=credentialIds,proto3" json:"credential_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CredentialsByTags) Reset()         { *m = CredentialsByTags{} }
func (m *CredentialsByTags) String() string { return proto.CompactTextString(m) }
func (*CredentialsByTags) ProtoMessage()    {}
func (*CredentialsByTags) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{9}
}

func (m *CredentialsByTags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CredentialsByTags.Unmarshal(m, b)
}
func (m *CredentialsByTags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CredentialsByTags.Marshal(b, m, deterministic)
}
func (m *CredentialsByTags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialsByTags.Merge(m, src)
}
func (m *CredentialsByTags) XXX_Size() int {
	return xxx_messageInfo_CredentialsByTags.Size(m)
}
func (m *CredentialsByTags) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialsByTags.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialsByTags proto.InternalMessageInfo

func (m *CredentialsByTags) GetTagKey() string {
	if m != nil {
		return m.TagKey
	}
	return ""
}

func (m *CredentialsByTags) GetTagValue() string {
	if m != nil {
		return m.TagValue
	}
	return ""
}

func (m *CredentialsByTags) GetCredentialIds() []string {
	if m != nil {
		return m.CredentialIds
	}
	return nil
}

type NodeManagers struct {
	// List of nodemanagers.
	Managers []*NodeManager `protobuf:"bytes,1,rep,name=managers,proto3" json:"managers,omitempty"`
	// Total count of nodemanagers.
	Total                int32    `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeManagers) Reset()         { *m = NodeManagers{} }
func (m *NodeManagers) String() string { return proto.CompactTextString(m) }
func (*NodeManagers) ProtoMessage()    {}
func (*NodeManagers) Descriptor() ([]byte, []int) {
	return fileDescriptor_35873baec8b363ec, []int{10}
}

func (m *NodeManagers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeManagers.Unmarshal(m, b)
}
func (m *NodeManagers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeManagers.Marshal(b, m, deterministic)
}
func (m *NodeManagers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeManagers.Merge(m, src)
}
func (m *NodeManagers) XXX_Size() int {
	return xxx_messageInfo_NodeManagers.Size(m)
}
func (m *NodeManagers) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeManagers.DiscardUnknown(m)
}

var xxx_messageInfo_NodeManagers proto.InternalMessageInfo

func (m *NodeManagers) GetManagers() []*NodeManager {
	if m != nil {
		return m.Managers
	}
	return nil
}

func (m *NodeManagers) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterEnum("chef.automate.api.nodes.manager.v1.Query_OrderType", Query_OrderType_name, Query_OrderType_value)
	proto.RegisterType((*ConnectResponse)(nil), "chef.automate.api.nodes.manager.v1.ConnectResponse")
	proto.RegisterType((*Id)(nil), "chef.automate.api.nodes.manager.v1.Id")
	proto.RegisterType((*Ids)(nil), "chef.automate.api.nodes.manager.v1.Ids")
	proto.RegisterType((*Query)(nil), "chef.automate.api.nodes.manager.v1.Query")
	proto.RegisterType((*Fields)(nil), "chef.automate.api.nodes.manager.v1.Fields")
	proto.RegisterType((*FieldQuery)(nil), "chef.automate.api.nodes.manager.v1.FieldQuery")
	proto.RegisterType((*Nodes)(nil), "chef.automate.api.nodes.manager.v1.Nodes")
	proto.RegisterType((*NodeQuery)(nil), "chef.automate.api.nodes.manager.v1.NodeQuery")
	proto.RegisterType((*NodeManager)(nil), "chef.automate.api.nodes.manager.v1.NodeManager")
	proto.RegisterType((*CredentialsByTags)(nil), "chef.automate.api.nodes.manager.v1.CredentialsByTags")
	proto.RegisterType((*NodeManagers)(nil), "chef.automate.api.nodes.manager.v1.NodeManagers")
}

func init() {
	proto.RegisterFile("api/external/nodes/manager/manager.proto", fileDescriptor_35873baec8b363ec)
}

var fileDescriptor_35873baec8b363ec = []byte{
	// 1694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x41, 0x73, 0x1b, 0x49,
	0x15, 0xa6, 0xad, 0xc8, 0x8e, 0x3a, 0x1b, 0x27, 0x69, 0x9c, 0x64, 0xac, 0x6c, 0x16, 0xd1, 0x14,
	0x1b, 0x47, 0x48, 0x9a, 0x58, 0x76, 0x62, 0xac, 0x65, 0x59, 0xb4, 0x92, 0x4c, 0x09, 0xad, 0xed,
	0xec, 0x48, 0x26, 0x09, 0x4b, 0x4a, 0xd5, 0x99, 0x6e, 0x8d, 0x87, 0x48, 0x33, 0xc3, 0x74, 0xcb,
	0x5e, 0xe1, 0xd2, 0x85, 0x13, 0xe5, 0x82, 0x8b, 0xb9, 0x73, 0xa2, 0xf8, 0x01, 0x54, 0x99, 0x03,
	0xc5, 0x89, 0x2a, 0x4e, 0xdc, 0xc4, 0x85, 0x1f, 0x40, 0x15, 0x67, 0xaa, 0x38, 0x70, 0x80, 0x2a,
	0xaa, 0x7b, 0x46, 0x96, 0x2c, 0xcb, 0xde, 0xf1, 0x26, 0xbe, 0x78, 0xba, 0xfb, 0xbd, 0xaf, 0xbf,
	0xef, 0xbd, 0x7e, 0x4f, 0x3d, 0x03, 0x97, 0x88, 0x67, 0xeb, 0xec, 0x73, 0xc1, 0x7c, 0x87, 0xb4,
	0x75, 0xc7, 0xa5, 0x8c, 0xeb, 0x1d, 0xe2, 0x10, 0x8b, 0xf9, 0xc3, 0xff, 0x39, 0xcf, 0x77, 0x85,
	0x8b, 0xb0, 0xb9, 0xcb, 0x5a, 0x39, 0xd2, 0x15, 0x6e, 0x87, 0x08, 0x96, 0x23, 0x9e, 0x9d, 0x53,
	0xe6, 0xb9, 0xa1, 0xd9, 0xde, 0x72, 0xf2, 0x5d, 0xcb, 0x75, 0xad, 0x36, 0xd3, 0x25, 0x28, 0x71,
	0x1c, 0x57, 0x10, 0x61, 0xbb, 0x0e, 0x0f, 0x10, 0x92, 0xf7, 0xc2, 0x55, 0x35, 0x7a, 0xd5, 0x6d,
	0xe9, 0xac, 0xe3, 0x89, 0x5e, 0xb8, 0xf8, 0xb5, 0xc9, 0x45, 0x61, 0x77, 0x18, 0x17, 0xa4, 0xe3,
	0x85, 0x06, 0xdf, 0x33, 0xdd, 0x8e, 0xe7, 0x3a, 0xcc, 0x11, 0x5c, 0x1f, 0xb2, 0xc8, 0x5a, 0xbe,
	0x67, 0x06, 0x2e, 0x66, 0xd6, 0x62, 0x4e, 0xd6, 0x73, 0xdb, 0xb6, 0xd9, 0xd3, 0x6d, 0xd2, 0x99,
	0xb2, 0x7f, 0xfa, 0x94, 0x56, 0xd3, 0xed, 0x74, 0x5c, 0x47, 0xff, 0x69, 0x97, 0xf9, 0x3d, 0xdd,
	0x23, 0x3e, 0xe9, 0x30, 0xc1, 0xfc, 0xa1, 0x6d, 0x66, 0x0c, 0x94, 0xef, 0x13, 0x4b, 0xc6, 0xc3,
	0xf5, 0x14, 0xda, 0x59, 0x64, 0x7c, 0x0b, 0xde, 0x28, 0xb9, 0x8e, 0xc3, 0x4c, 0x61, 0x30, 0xee,
	0xb9, 0x0e, 0x67, 0xb8, 0x01, 0x67, 0xaa, 0x14, 0xcd, 0xc3, 0x19, 0x9b, 0x6a, 0x20, 0x05, 0x96,
	0x12, 0xc6, 0x8c, 0x4d, 0x0b, 0xdf, 0x3d, 0x2a, 0x7e, 0x00, 0xe3, 0x03, 0x30, 0x63, 0xd3, 0x7c,
	0x1e, 0x3d, 0x3a, 0xc0, 0xdd, 0xae, 0x4d, 0x71, 0x21, 0x85, 0x4d, 0xba, 0x42, 0xe8, 0x0a, 0x5d,
	0xcf, 0xe6, 0xd7, 0xd6, 0x9e, 0x64, 0x57, 0x59, 0x6b, 0x39, 0x4b, 0xd6, 0x1f, 0xad, 0x66, 0x57,
	0xcd, 0x7c, 0x7e, 0x9d, 0x2e, 0x3f, 0x59, 0xcd, 0x33, 0x86, 0xfb, 0xf8, 0x23, 0x18, 0xab, 0x52,
	0x8e, 0xbe, 0x0d, 0x63, 0x36, 0xe5, 0x1a, 0x48, 0xc5, 0x96, 0xae, 0xe5, 0xdf, 0xcf, 0x7d, 0x71,
	0x66, 0x72, 0x55, 0x6a, 0x48, 0x17, 0xfc, 0xcf, 0x19, 0x18, 0xff, 0x54, 0x4a, 0x46, 0x15, 0x08,
	0x5b, 0x76, 0x5b, 0x30, 0xbf, 0xd9, 0x21, 0x9e, 0xb6, 0x78, 0x2e, 0x54, 0x10, 0xa7, 0x9c, 0x8a,
	0x53, 0x6e, 0x43, 0x79, 0x18, 0x89, 0xc0, 0x73, 0x93, 0x78, 0xa8, 0x0a, 0xe3, 0xae, 0x4f, 0x99,
	0xaf, 0xdd, 0x4e, 0x81, 0xa5, 0xf9, 0xfc, 0x4a, 0x14, 0x32, 0x8a, 0x40, 0x6e, 0x5b, 0xba, 0x35,
	0x7a, 0x1e, 0x33, 0x02, 0x04, 0x84, 0xe0, 0x15, 0xee, 0xfa, 0x42, 0xbb, 0xa3, 0xc2, 0xa5, 0x9e,
	0xe5, 0x9c, 0x47, 0x2c, 0xa6, 0xdd, 0x4d, 0x81, 0xa5, 0xb8, 0xa1, 0x9e, 0xd1, 0x22, 0xbc, 0xea,
	0x31, 0xbf, 0xa9, 0xe6, 0x35, 0x35, 0x3f, 0xe7, 0x31, 0xff, 0x29, 0xb1, 0x18, 0x7e, 0x0f, 0x26,
	0x4e, 0x60, 0xd1, 0x1c, 0x8c, 0x15, 0xeb, 0xa5, 0x9b, 0x5f, 0x41, 0x57, 0xe1, 0x95, 0x72, 0xa5,
	0x5e, 0xba, 0x09, 0x0a, 0xf6, 0x51, 0xb1, 0x05, 0xaf, 0x0f, 0xc0, 0x98, 0xf4, 0xfc, 0x0e, 0xaa,
	0x1f, 0xe0, 0xd1, 0x18, 0x17, 0x52, 0x9f, 0x1d, 0xe0, 0xd7, 0xac, 0x27, 0xd3, 0x12, 0x92, 0x6e,
	0x8a, 0x9e, 0xc7, 0x70, 0x06, 0xef, 0x91, 0x76, 0x97, 0x71, 0x5c, 0xf8, 0x0c, 0x93, 0x7d, 0x9e,
	0x65, 0x66, 0x1e, 0xbf, 0xec, 0xbf, 0xcc, 0x60, 0xc9, 0x54, 0x5a, 0x53, 0x22, 0x58, 0x93, 0x50,
	0xca, 0x28, 0xee, 0xe3, 0x14, 0x9c, 0xdd, 0xb0, 0x59, 0x9b, 0x72, 0x74, 0x07, 0xce, 0xb6, 0xd4,
	0x93, 0x4a, 0x58, 0xc2, 0x08, 0x47, 0xf8, 0xb7, 0x00, 0x42, 0x65, 0x12, 0x24, 0xe4, 0x23, 0x18,
	0x57, 0x41, 0xd6, 0x16, 0x52, 0x60, 0xe9, 0x5a, 0xfe, 0x61, 0xe4, 0x48, 0x1a, 0x81, 0x1f, 0x5a,
	0x80, 0x71, 0x85, 0xac, 0x52, 0x91, 0x30, 0x82, 0x01, 0x7a, 0x1f, 0xde, 0x90, 0x6e, 0xcd, 0xa1,
	0x14, 0x9b, 0x86, 0x01, 0xbe, 0x2e, 0xa7, 0x37, 0x83, 0xd9, 0x2a, 0x2d, 0xdc, 0x3d, 0x2a, 0x2e,
	0x40, 0x34, 0x00, 0x93, 0xd6, 0x78, 0x05, 0xc6, 0xb7, 0xe4, 0xbe, 0x12, 0x5f, 0x11, 0x08, 0x65,
	0x04, 0x03, 0x39, 0x2b, 0x5c, 0x41, 0xda, 0x8a, 0x76, 0xdc, 0x08, 0x06, 0xf8, 0x57, 0x00, 0x26,
	0xa4, 0xd7, 0x5b, 0x92, 0x36, 0x45, 0xc4, 0xed, 0x4b, 0x89, 0x38, 0x9a, 0x83, 0xd7, 0xb6, 0x46,
	0xa6, 0x93, 0x85, 0x29, 0xcf, 0x99, 0x43, 0x3a, 0x4c, 0x9b, 0x09, 0xce, 0x9e, 0x7c, 0x96, 0x73,
	0x32, 0xef, 0x5a, 0x2c, 0x98, 0x93, 0xcf, 0xe8, 0x1b, 0xf0, 0xba, 0xe9, 0x33, 0xca, 0x1c, 0x61,
	0x93, 0xb6, 0xa4, 0xb1, 0xa0, 0x16, 0xdf, 0x19, 0x4d, 0x56, 0x29, 0xda, 0x85, 0x0b, 0xb6, 0xc3,
	0x05, 0x71, 0x4c, 0xd6, 0x1c, 0x2d, 0x70, 0xed, 0xb6, 0x2a, 0xb2, 0xc7, 0x51, 0xd4, 0x97, 0x46,
	0x6e, 0x1f, 0xf7, 0x1a, 0xc4, 0xe2, 0xc6, 0x57, 0x87, 0x90, 0x63, 0x4b, 0xf2, 0x68, 0x71, 0x41,
	0x44, 0x97, 0x87, 0x39, 0x0d, 0x47, 0xe8, 0x3e, 0x84, 0xc4, 0x34, 0xdd, 0xae, 0x23, 0x24, 0x47,
	0x4d, 0xad, 0x25, 0xc2, 0x99, 0x2a, 0x45, 0xeb, 0x10, 0x8e, 0xce, 0xaa, 0xb6, 0xa8, 0x92, 0x92,
	0xcc, 0x05, 0x1d, 0x38, 0x37, 0xec, 0xc0, 0xb9, 0xc6, 0xb0, 0x03, 0x1b, 0x09, 0x69, 0x5d, 0x94,
	0xc6, 0xa8, 0x06, 0x6f, 0x8c, 0x05, 0x80, 0x12, 0x41, 0xb4, 0xa4, 0x92, 0x85, 0xbf, 0xa8, 0x77,
	0xd4, 0xf6, 0x8c, 0xf9, 0x91, 0x6b, 0x99, 0x08, 0x52, 0xf8, 0x6f, 0xec, 0xa8, 0xf8, 0x9f, 0x18,
	0xcc, 0xa9, 0x86, 0x38, 0x00, 0xa7, 0x43, 0x3b, 0x00, 0x93, 0x3b, 0x0d, 0x80, 0x4a, 0x42, 0xfe,
	0x2f, 0x31, 0xf4, 0xe7, 0xd8, 0x01, 0x1e, 0x29, 0x94, 0xc5, 0xb7, 0x9c, 0x5f, 0x59, 0x7d, 0x5c,
	0x79, 0x5e, 0xdc, 0x7c, 0xfa, 0x49, 0x05, 0x67, 0xf0, 0x84, 0xeb, 0xa9, 0xaa, 0x2e, 0x3e, 0xab,
	0x37, 0x8b, 0xa5, 0x52, 0xa5, 0x5e, 0x6f, 0xd6, 0x2a, 0x2f, 0x9a, 0xd5, 0xf2, 0xb0, 0xb4, 0xd5,
	0x62, 0xad, 0x5a, 0xac, 0x6e, 0xd7, 0x37, 0xb6, 0xcb, 0x5b, 0x5b, 0x6b, 0x43, 0xbc, 0x7e, 0xe6,
	0x94, 0x73, 0xbd, 0x52, 0x32, 0x2a, 0x8d, 0x31, 0x8c, 0x71, 0x80, 0xfd, 0x1f, 0x90, 0xb6, 0xff,
	0x7c, 0x47, 0x38, 0x1b, 0x95, 0xcd, 0xaa, 0x5e, 0x5b, 0xdb, 0x2c, 0x57, 0xb6, 0xbe, 0xaf, 0xbf,
	0x7a, 0xfa, 0xb9, 0xd1, 0xb2, 0x4b, 0x2f, 0x42, 0x44, 0xe9, 0x73, 0x06, 0xb4, 0x5e, 0xaf, 0x6e,
	0x6f, 0x35, 0x1b, 0xdb, 0xb5, 0xca, 0xd6, 0x29, 0x46, 0x9f, 0xba, 0xe5, 0x17, 0xcf, 0xe9, 0xcf,
	0x2a, 0x4f, 0x1b, 0xfa, 0xc9, 0xdf, 0x7e, 0x08, 0x24, 0x3e, 0xfc, 0x10, 0xcb, 0x1e, 0x34, 0xa6,
	0xb7, 0x5a, 0x56, 0xad, 0xab, 0x97, 0x1d, 0xcd, 0x65, 0x77, 0x76, 0x94, 0xca, 0x8b, 0x7f, 0x6c,
	0x96, 0x43, 0xcc, 0xa1, 0xf1, 0x94, 0x33, 0x2c, 0xe3, 0xf8, 0x32, 0x83, 0x65, 0x7d, 0x04, 0x9b,
	0xa4, 0xc8, 0x3e, 0x4f, 0x11, 0xcf, 0x4e, 0xd9, 0x8e, 0x60, 0x96, 0xaf, 0x7e, 0x16, 0x53, 0xfb,
	0xb6, 0xd8, 0x4d, 0x71, 0xc6, 0xb9, 0x1c, 0x08, 0xf7, 0x35, 0x73, 0x70, 0x06, 0xab, 0x1e, 0x5a,
	0x48, 0x9d, 0xb4, 0xce, 0x3e, 0xfe, 0x0d, 0x80, 0xb7, 0xce, 0x1c, 0x74, 0x74, 0x17, 0xce, 0x09,
	0x62, 0x35, 0x5f, 0xb3, 0x5e, 0x58, 0x5c, 0xb3, 0x82, 0x58, 0x35, 0xd6, 0x43, 0xf7, 0x60, 0x42,
	0x2e, 0xa8, 0xb8, 0x84, 0xe5, 0x7f, 0x55, 0x10, 0xeb, 0x87, 0x72, 0x8c, 0xbe, 0x09, 0xe7, 0x4f,
	0x9d, 0x1e, 0x59, 0x11, 0xb2, 0x4b, 0x5d, 0x1f, 0xaf, 0x4c, 0x5e, 0xc8, 0x1c, 0x15, 0x1f, 0xc2,
	0x07, 0x03, 0x30, 0xdc, 0x62, 0x00, 0x46, 0x98, 0x03, 0x30, 0x01, 0x81, 0x7f, 0x01, 0xe0, 0x3b,
	0x63, 0x5d, 0x83, 0xa3, 0x1a, 0xbc, 0x1a, 0x16, 0xe9, 0xf0, 0xd7, 0x57, 0x8f, 0x52, 0xcd, 0x63,
	0x18, 0xc6, 0x09, 0xc0, 0xf4, 0xce, 0x59, 0xb8, 0x7d, 0x54, 0x44, 0xf9, 0x9b, 0x68, 0xfe, 0x00,
	0x07, 0x9d, 0x54, 0x1e, 0x6d, 0xdc, 0xcf, 0xff, 0xeb, 0x16, 0x44, 0x63, 0x30, 0x75, 0xe6, 0xef,
	0xd9, 0x26, 0x43, 0x7f, 0x00, 0x70, 0xb6, 0xe4, 0x33, 0x22, 0x18, 0xba, 0x2c, 0x93, 0xe4, 0x83,
	0x68, 0x17, 0x07, 0x8e, 0x8d, 0xc3, 0x63, 0x4d, 0x87, 0xc8, 0x76, 0x5a, 0x3e, 0x29, 0x38, 0xe3,
	0xf1, 0x58, 0x3c, 0x3b, 0x57, 0x30, 0x15, 0x9d, 0x9f, 0xff, 0xed, 0x1f, 0xbf, 0x9e, 0x59, 0xc4,
	0x0b, 0xea, 0x2e, 0xb8, 0xf7, 0x48, 0x5d, 0x2d, 0x87, 0xca, 0x0b, 0x20, 0x8d, 0xfe, 0x08, 0xe0,
	0x15, 0x83, 0x11, 0x8a, 0x22, 0x5e, 0x5f, 0x92, 0x97, 0x95, 0x87, 0x5f, 0x1c, 0x1e, 0x6b, 0xcb,
	0xf0, 0xee, 0x14, 0x86, 0x07, 0x36, 0xed, 0xa3, 0x3b, 0x53, 0x16, 0x2c, 0x26, 0x14, 0xef, 0xf7,
	0xd0, 0xbb, 0xd3, 0x78, 0xeb, 0x36, 0xd5, 0x95, 0xef, 0xef, 0x01, 0x9c, 0xdd, 0xf1, 0xe8, 0x97,
	0x8a, 0xfa, 0x9d, 0x33, 0x7d, 0xb6, 0x22, 0xaf, 0xc1, 0xb8, 0x79, 0x78, 0xac, 0xad, 0x9e, 0x4f,
	0x77, 0x5a, 0xa4, 0xbb, 0x8a, 0x82, 0x62, 0xfc, 0xf5, 0xe4, 0x85, 0x8c, 0x65, 0xc4, 0x7f, 0x07,
	0xe0, 0x6c, 0x99, 0xb5, 0x99, 0x60, 0x91, 0x63, 0x7e, 0x1e, 0xd7, 0x1f, 0x5f, 0x9e, 0x2b, 0x55,
	0x3b, 0x07, 0xd1, 0x4d, 0x5f, 0x1c, 0xdd, 0xbf, 0x02, 0x78, 0x23, 0x20, 0xfa, 0xcc, 0x16, 0xbb,
	0xc1, 0xdd, 0x23, 0x2a, 0xe3, 0xc8, 0x67, 0xda, 0x7a, 0x23, 0x09, 0x0f, 0xd3, 0x0f, 0x2e, 0x92,
	0xa0, 0xcb, 0x06, 0x98, 0x0d, 0xee, 0x47, 0x03, 0x00, 0x93, 0xa7, 0xd5, 0xd4, 0x05, 0x11, 0xac,
	0x2e, 0x5c, 0xcf, 0x63, 0xf4, 0x8d, 0x53, 0x21, 0xde, 0x48, 0xc7, 0x93, 0xf4, 0x6a, 0x34, 0x1d,
	0x59, 0x79, 0xb1, 0x60, 0x3a, 0x0f, 0x59, 0xff, 0x1d, 0xc0, 0xfb, 0x53, 0x44, 0x35, 0x98, 0xdf,
	0xb1, 0x1d, 0x22, 0xde, 0x82, 0xae, 0xfd, 0x37, 0xd2, 0xb5, 0x9e, 0x5e, 0xbb, 0x94, 0x2e, 0x31,
	0x22, 0xfe, 0x27, 0x00, 0xaf, 0x7c, 0x62, 0x73, 0x81, 0xa2, 0xdf, 0x52, 0x93, 0x8f, 0x2e, 0xd9,
	0x04, 0x38, 0x7e, 0x76, 0x78, 0xac, 0x65, 0xa7, 0xb6, 0xd4, 0x69, 0x92, 0xdb, 0x36, 0x0f, 0x1a,
	0x53, 0x0a, 0xdf, 0x9b, 0xaa, 0x8b, 0x33, 0xe2, 0x9b, 0xbb, 0xb2, 0xca, 0xff, 0x07, 0xe0, 0xcd,
	0xba, 0x1a, 0xc9, 0xfd, 0xc2, 0x37, 0x90, 0x5c, 0x14, 0x7e, 0xa3, 0x57, 0x91, 0x64, 0x3a, 0xb2,
	0x3d, 0xc7, 0xbf, 0x04, 0x87, 0xc7, 0xda, 0x06, 0xfc, 0xd6, 0xb4, 0x4c, 0x4d, 0xdc, 0xc2, 0xfb,
	0x85, 0xe0, 0xcd, 0xe7, 0x62, 0x8d, 0xdf, 0xc1, 0xe7, 0xe7, 0x6e, 0x12, 0x30, 0x14, 0x9e, 0x0d,
	0x70, 0xa5, 0xfe, 0x7f, 0x03, 0x78, 0x6d, 0xa4, 0x9f, 0xa3, 0x6c, 0xd4, 0xd4, 0x04, 0xca, 0x1f,
	0x46, 0x35, 0xe7, 0xf8, 0x50, 0x0a, 0xaf, 0xc0, 0x74, 0x24, 0xe1, 0x41, 0x2f, 0xb8, 0x50, 0xf7,
	0x07, 0xf8, 0xc9, 0xa5, 0x75, 0x2b, 0x58, 0x29, 0x7b, 0x00, 0xe0, 0x5c, 0xf8, 0x09, 0x22, 0x72,
	0xe9, 0x45, 0x7a, 0x57, 0x9f, 0xfc, 0xae, 0xf1, 0x93, 0xc3, 0x63, 0x6d, 0x1d, 0xde, 0x3f, 0xa7,
	0x2e, 0x43, 0x9d, 0xda, 0x94, 0x65, 0x9f, 0xf9, 0x5d, 0x47, 0x09, 0x7d, 0x80, 0xf1, 0x54, 0xa1,
	0xca, 0x62, 0xec, 0x17, 0xeb, 0xe3, 0xc7, 0x3f, 0x5a, 0xb1, 0x6c, 0xb1, 0xdb, 0x7d, 0x25, 0x5f,
	0x24, 0x74, 0x49, 0xf6, 0xe4, 0xcb, 0x8f, 0x7e, 0xfe, 0x77, 0xab, 0x57, 0xb3, 0xaa, 0x95, 0xac,
	0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x38, 0x7b, 0x32, 0xdc, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeManagerServiceClient is the client API for NodeManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeManagerServiceClient interface {
	//
	//Create a Node Manager
	//
	//Creates a node manager given a name, credential id *or* credential data, and type.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:create
	//```
	Create(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*Ids, error)
	//
	//View a Node Manager
	//
	//List the details of a node manager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:get
	//```
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NodeManager, error)
	//
	//Update a Node Manager
	//
	//Update a node manager's metadata, such as its name, associated credential id, or data.
	//This is a PUT operation and it overwrites ALL of the existing node manager metadata. Include all fields, because a PUT operation overwrites any missing fields to empty ("").
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:update
	//```
	Update(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	//Delete a Node Manager
	//
	//Delete a single node manager. This deletes the node manager itself and
	//reassigns its associated nodes to the Automate node manager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	//Delete a Node Manager and Delete Nodes
	//
	//Delete a node manager and all of its associated nodes.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error)
	//
	//Delete a Node Manager and Stop Nodes
	//
	//Delete a node manager and update its associated nodes to `stopped`.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodeStateStopped(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	//Delete a Node Manager and Terminate Nodes
	//
	//Delete a node manager and update its associated nodes to `terminated`.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodeStateTerminated(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	//List all Node Managers
	//
	//Returns a list of node managers.
	//Supports filtering, sorting, and pagination.
	//
	//Valid filtering fields: manager_type
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*NodeManagers, error)
	//
	//Search Node Fields
	//
	//Searches the available values for a given field across all nodes associated with the nodemanager id.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	SearchNodeFields(ctx context.Context, in *FieldQuery, opts ...grpc.CallOption) (*Fields, error)
	//
	//Search nodes
	//
	//Searches the available nodes for a single node manager by id.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	SearchNodes(ctx context.Context, in *NodeQuery, opts ...grpc.CallOption) (*Nodes, error)
	//
	//Connect
	//
	//Attempts to reach the API for the given nodemanager id to validate the
	//credentials associated with the nodemanager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:rerun
	//```
	Connect(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConnectResponse, error)
}

type nodeManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeManagerServiceClient(cc grpc.ClientConnInterface) NodeManagerServiceClient {
	return &nodeManagerServiceClient{cc}
}

func (c *nodeManagerServiceClient) Create(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NodeManager, error) {
	out := new(NodeManager)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Update(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) DeleteWithNodes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) DeleteWithNodeStateStopped(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodeStateStopped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) DeleteWithNodeStateTerminated(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodeStateTerminated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*NodeManagers, error) {
	out := new(NodeManagers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) SearchNodeFields(ctx context.Context, in *FieldQuery, opts ...grpc.CallOption) (*Fields, error) {
	out := new(Fields)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/SearchNodeFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) SearchNodes(ctx context.Context, in *NodeQuery, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/SearchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Connect(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeManagerServiceServer is the server API for NodeManagerService service.
type NodeManagerServiceServer interface {
	//
	//Create a Node Manager
	//
	//Creates a node manager given a name, credential id *or* credential data, and type.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:create
	//```
	Create(context.Context, *NodeManager) (*Ids, error)
	//
	//View a Node Manager
	//
	//List the details of a node manager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:get
	//```
	Read(context.Context, *Id) (*NodeManager, error)
	//
	//Update a Node Manager
	//
	//Update a node manager's metadata, such as its name, associated credential id, or data.
	//This is a PUT operation and it overwrites ALL of the existing node manager metadata. Include all fields, because a PUT operation overwrites any missing fields to empty ("").
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:update
	//```
	Update(context.Context, *NodeManager) (*empty.Empty, error)
	//
	//Delete a Node Manager
	//
	//Delete a single node manager. This deletes the node manager itself and
	//reassigns its associated nodes to the Automate node manager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	Delete(context.Context, *Id) (*empty.Empty, error)
	//
	//Delete a Node Manager and Delete Nodes
	//
	//Delete a node manager and all of its associated nodes.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodes(context.Context, *Id) (*Ids, error)
	//
	//Delete a Node Manager and Stop Nodes
	//
	//Delete a node manager and update its associated nodes to `stopped`.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodeStateStopped(context.Context, *Id) (*empty.Empty, error)
	//
	//Delete a Node Manager and Terminate Nodes
	//
	//Delete a node manager and update its associated nodes to `terminated`.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodeStateTerminated(context.Context, *Id) (*empty.Empty, error)
	//
	//List all Node Managers
	//
	//Returns a list of node managers.
	//Supports filtering, sorting, and pagination.
	//
	//Valid filtering fields: manager_type
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	List(context.Context, *Query) (*NodeManagers, error)
	//
	//Search Node Fields
	//
	//Searches the available values for a given field across all nodes associated with the nodemanager id.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	SearchNodeFields(context.Context, *FieldQuery) (*Fields, error)
	//
	//Search nodes
	//
	//Searches the available nodes for a single node manager by id.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	SearchNodes(context.Context, *NodeQuery) (*Nodes, error)
	//
	//Connect
	//
	//Attempts to reach the API for the given nodemanager id to validate the
	//credentials associated with the nodemanager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:rerun
	//```
	Connect(context.Context, *Id) (*ConnectResponse, error)
}

// UnimplementedNodeManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeManagerServiceServer struct {
}

func (*UnimplementedNodeManagerServiceServer) Create(ctx context.Context, req *NodeManager) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Read(ctx context.Context, req *Id) (*NodeManager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Update(ctx context.Context, req *NodeManager) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Delete(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedNodeManagerServiceServer) DeleteWithNodes(ctx context.Context, req *Id) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithNodes not implemented")
}
func (*UnimplementedNodeManagerServiceServer) DeleteWithNodeStateStopped(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithNodeStateStopped not implemented")
}
func (*UnimplementedNodeManagerServiceServer) DeleteWithNodeStateTerminated(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithNodeStateTerminated not implemented")
}
func (*UnimplementedNodeManagerServiceServer) List(ctx context.Context, req *Query) (*NodeManagers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedNodeManagerServiceServer) SearchNodeFields(ctx context.Context, req *FieldQuery) (*Fields, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodeFields not implemented")
}
func (*UnimplementedNodeManagerServiceServer) SearchNodes(ctx context.Context, req *NodeQuery) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodes not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Connect(ctx context.Context, req *Id) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterNodeManagerServiceServer(s *grpc.Server, srv NodeManagerServiceServer) {
	s.RegisterService(&_NodeManagerService_serviceDesc, srv)
}

func _NodeManagerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Create(ctx, req.(*NodeManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Update(ctx, req.(*NodeManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_DeleteWithNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).DeleteWithNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).DeleteWithNodes(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_DeleteWithNodeStateStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodeStateStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateStopped(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_DeleteWithNodeStateTerminated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateTerminated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodeStateTerminated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateTerminated(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).List(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_SearchNodeFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).SearchNodeFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/SearchNodeFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).SearchNodeFields(ctx, req.(*FieldQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_SearchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).SearchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/SearchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).SearchNodes(ctx, req.(*NodeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Connect(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.nodes.manager.v1.NodeManagerService",
	HandlerType: (*NodeManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NodeManagerService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NodeManagerService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NodeManagerService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NodeManagerService_Delete_Handler,
		},
		{
			MethodName: "DeleteWithNodes",
			Handler:    _NodeManagerService_DeleteWithNodes_Handler,
		},
		{
			MethodName: "DeleteWithNodeStateStopped",
			Handler:    _NodeManagerService_DeleteWithNodeStateStopped_Handler,
		},
		{
			MethodName: "DeleteWithNodeStateTerminated",
			Handler:    _NodeManagerService_DeleteWithNodeStateTerminated_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NodeManagerService_List_Handler,
		},
		{
			MethodName: "SearchNodeFields",
			Handler:    _NodeManagerService_SearchNodeFields_Handler,
		},
		{
			MethodName: "SearchNodes",
			Handler:    _NodeManagerService_SearchNodes_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _NodeManagerService_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/nodes/manager/manager.proto",
}
