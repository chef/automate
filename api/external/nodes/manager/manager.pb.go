// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: external/nodes/manager/manager.proto

package manager

import (
	context "context"
	_ "github.com/chef/automate/api/external/annotations/iam"
	query "github.com/chef/automate/api/external/common/query"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Sort the results in ascending or descending order.
type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

// Enum value maps for Query_OrderType.
var (
	Query_OrderType_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Query_OrderType_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Query_OrderType) Enum() *Query_OrderType {
	p := new(Query_OrderType)
	*p = x
	return p
}

func (x Query_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_external_nodes_manager_manager_proto_enumTypes[0].Descriptor()
}

func (Query_OrderType) Type() protoreflect.EnumType {
	return &file_external_nodes_manager_manager_proto_enumTypes[0]
}

func (x Query_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_OrderType.Descriptor instead.
func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{3, 0}
}

type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{0}
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the node manager.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{1}
}

func (x *Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Ids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of node manager UUIDs.
	Ids []*Id `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *Ids) Reset() {
	*x = Ids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{2}
}

func (x *Ids) GetIds() []*Id {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters for the query: "manager_type".
	FilterMap []*query.Filter `protobuf:"bytes,25,rep,name=filter_map,json=filterMap,proto3" json:"filter_map,omitempty"`
	Order     Query_OrderType `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.api.nodes.manager.v1.Query_OrderType" json:"order,omitempty"`
	// Field to use for sorting.
	// Valid fields are: name, type, status, status_message, date_added.
	Sort string `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty"`
	// Starting page for the list. For example, if your query returns 100 pages,
	// and you know you're looking for a node manager somewhere in the middle,
	// you might want to start on page 50.
	Page int32 `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`
	// Number of results on each page.
	PerPage int32 `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{3}
}

func (x *Query) GetFilterMap() []*query.Filter {
	if x != nil {
		return x.FilterMap
	}
	return nil
}

func (x *Query) GetOrder() Query_OrderType {
	if x != nil {
		return x.Order
	}
	return Query_ASC
}

func (x *Query) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *Query) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Query) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more fields: regions, tags, name, subscription_id.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Fields) Reset() {
	*x = Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fields) ProtoMessage() {}

func (x *Fields) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fields.ProtoReflect.Descriptor instead.
func (*Fields) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{4}
}

func (x *Fields) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type FieldQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query details (filters) to be applied to the results.
	Query *Query `protobuf:"bytes,20,opt,name=query,proto3" json:"query,omitempty"`
	// Possible search fields: regions, tags, name, subscription_id.
	Field string `protobuf:"bytes,21,opt,name=field,proto3" json:"field,omitempty"`
	// Node manager ID.
	NodeManagerId string `protobuf:"bytes,22,opt,name=node_manager_id,json=nodeManagerId,proto3" json:"node_manager_id,omitempty"`
}

func (x *FieldQuery) Reset() {
	*x = FieldQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldQuery) ProtoMessage() {}

func (x *FieldQuery) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldQuery.ProtoReflect.Descriptor instead.
func (*FieldQuery) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{5}
}

func (x *FieldQuery) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *FieldQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FieldQuery) GetNodeManagerId() string {
	if x != nil {
		return x.NodeManagerId
	}
	return ""
}

type Nodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of node names matching the request.
	Nodes []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Total count of node names matching the request.
	Total int32 `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Nodes) Reset() {
	*x = Nodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodes) ProtoMessage() {}

func (x *Nodes) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodes.ProtoReflect.Descriptor instead.
func (*Nodes) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{6}
}

func (x *Nodes) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Nodes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type NodeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Valid search filters: manager_type.
	Query *Query `protobuf:"bytes,20,opt,name=query,proto3" json:"query,omitempty"`
	// Node manager ID.
	NodeManagerId string `protobuf:"bytes,21,opt,name=node_manager_id,json=nodeManagerId,proto3" json:"node_manager_id,omitempty"`
}

func (x *NodeQuery) Reset() {
	*x = NodeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeQuery) ProtoMessage() {}

func (x *NodeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeQuery.ProtoReflect.Descriptor instead.
func (*NodeQuery) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{7}
}

func (x *NodeQuery) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *NodeQuery) GetNodeManagerId() string {
	if x != nil {
		return x.NodeManagerId
	}
	return ""
}

type NodeManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the nodemanager.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User defined name for the node manager.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of nodemanager (aws-ec2, azure-vm, aws-api, azure-api, gcp).
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Use either 'credential_id' OR 'credential_data'.
	// 'credential_data' will overwrite values in 'credential_id'.
	// The 'credential_id' is the UUID of credential with the information
	// you need to connect to aws, azure, or gcp.
	CredentialId string `protobuf:"bytes,20,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// List of tag and credential UUID associations for making node managers.
	// These are ssh, winrm, and sudo creds used to access instances.
	InstanceCredentials []*CredentialsByTags `protobuf:"bytes,21,rep,name=instance_credentials,json=instanceCredentials,proto3" json:"instance_credentials,omitempty"`
	// Status of the nodemanager (reachable, unreachable).
	Status string `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"`
	// Account id associated with the nodemanager.
	AccountId string `protobuf:"bytes,24,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Date the nodemanager was created.
	DateAdded *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=date_added,json=dateAdded,proto3" json:"date_added,omitempty"`
	// Use either 'credential_data' OR 'credential_id'.
	// 'credential_data' will overwrite values in 'credential_id'.
	// Use 'credential_data' when you have not yet created node credentials
	// and provide credential data (such as AWS_ACCESS_KEY) inline.
	CredentialData []*query.Kv `protobuf:"bytes,26,rep,name=credential_data,json=credentialData,proto3" json:"credential_data,omitempty"`
}

func (x *NodeManager) Reset() {
	*x = NodeManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeManager) ProtoMessage() {}

func (x *NodeManager) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeManager.ProtoReflect.Descriptor instead.
func (*NodeManager) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{8}
}

func (x *NodeManager) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeManager) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeManager) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeManager) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *NodeManager) GetInstanceCredentials() []*CredentialsByTags {
	if x != nil {
		return x.InstanceCredentials
	}
	return nil
}

func (x *NodeManager) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeManager) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *NodeManager) GetDateAdded() *timestamppb.Timestamp {
	if x != nil {
		return x.DateAdded
	}
	return nil
}

func (x *NodeManager) GetCredentialData() []*query.Kv {
	if x != nil {
		return x.CredentialData
	}
	return nil
}

type CredentialsByTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tag key to match on.
	TagKey string `protobuf:"bytes,20,opt,name=tag_key,json=tagKey,proto3" json:"tag_key,omitempty"`
	// Tag value to match on.
	TagValue string `protobuf:"bytes,21,opt,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
	// List of credential ids to associate with the key/value pair.
	CredentialIds []string `protobuf:"bytes,22,rep,name=credential_ids,json=credentialIds,proto3" json:"credential_ids,omitempty"`
}

func (x *CredentialsByTags) Reset() {
	*x = CredentialsByTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialsByTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialsByTags) ProtoMessage() {}

func (x *CredentialsByTags) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialsByTags.ProtoReflect.Descriptor instead.
func (*CredentialsByTags) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{9}
}

func (x *CredentialsByTags) GetTagKey() string {
	if x != nil {
		return x.TagKey
	}
	return ""
}

func (x *CredentialsByTags) GetTagValue() string {
	if x != nil {
		return x.TagValue
	}
	return ""
}

func (x *CredentialsByTags) GetCredentialIds() []string {
	if x != nil {
		return x.CredentialIds
	}
	return nil
}

type NodeManagers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of nodemanagers.
	Managers []*NodeManager `protobuf:"bytes,1,rep,name=managers,proto3" json:"managers,omitempty"`
	// Total count of nodemanagers.
	Total int32 `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *NodeManagers) Reset() {
	*x = NodeManagers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_nodes_manager_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeManagers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeManagers) ProtoMessage() {}

func (x *NodeManagers) ProtoReflect() protoreflect.Message {
	mi := &file_external_nodes_manager_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeManagers.ProtoReflect.Descriptor instead.
func (*NodeManagers) Descriptor() ([]byte, []int) {
	return file_external_nodes_manager_manager_proto_rawDescGZIP(), []int{10}
}

func (x *NodeManagers) GetManagers() []*NodeManager {
	if x != nil {
		return x.Managers
	}
	return nil
}

func (x *NodeManagers) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_external_nodes_manager_manager_proto protoreflect.FileDescriptor

var file_external_nodes_manager_manager_proto_rawDesc = []byte{
	0x0a, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x02, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x32, 0x32, 0x12,
	0x30, 0x7b, 0x22, 0x75, 0x75, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x63, 0x64, 0x33, 0x61, 0x64,
	0x33, 0x64, 0x39, 0x2d, 0x32, 0x37, 0x37, 0x36, 0x2d, 0x34, 0x65, 0x66, 0x31, 0x2d, 0x61, 0x39,
	0x30, 0x34, 0x2d, 0x34, 0x63, 0x32, 0x32, 0x39, 0x64, 0x31, 0x36, 0x34, 0x32, 0x65, 0x65, 0x22,
	0x7d, 0x22, 0x3f, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x22, 0x1e, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10,
	0x01, 0x3a, 0x69, 0x92, 0x41, 0x66, 0x0a, 0x0d, 0xd2, 0x01, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x70, 0x32, 0x55, 0x12, 0x53, 0x7b, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x6b, 0x65, 0x79, 0x22, 0x3a,
	0x20, 0x22, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2c,
	0x22, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x61, 0x77, 0x73, 0x2d, 0x65,
	0x63, 0x32, 0x22, 0x5d, 0x7d, 0x5d, 0x2c, 0x22, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x3a, 0x20, 0x22,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x22, 0x7d, 0x22, 0x20, 0x0a, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xa4,
	0x01, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x17, 0x92, 0x41,
	0x14, 0x0a, 0x12, 0xd2, 0x01, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x4e,
	0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x3a, 0x17, 0x92, 0x41, 0x14, 0x0a, 0x12, 0xd2, 0x01, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x92, 0x07, 0x0a, 0x0b, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x13, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4b, 0x76,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x3a, 0xfc, 0x03, 0x92, 0x41, 0xf8, 0x03, 0x0a, 0x2e, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01,
	0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0xd2, 0x01,
	0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0xd2, 0x01, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0xc5, 0x03, 0x12, 0xc2, 0x03, 0x7b, 0x22, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x32, 0x33,
	0x34, 0x35, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x5b, 0x7b,
	0x22, 0x6b, 0x65, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x41, 0x57, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x44, 0x22, 0x2c, 0x22, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x41, 0x4b, 0x49, 0x41, 0x49, 0x4f, 0x53, 0x46, 0x4f, 0x44, 0x4e,
	0x4e, 0x37, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x6b, 0x65,
	0x79, 0x22, 0x3a, 0x20, 0x22, 0x41, 0x57, 0x53, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x22, 0x2c, 0x22, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x77, 0x4a, 0x61, 0x6c, 0x72, 0x58, 0x55, 0x74, 0x6e, 0x46,
	0x45, 0x4d, 0x49, 0x2f, 0x4b, 0x37, 0x4d, 0x44, 0x45, 0x4e, 0x47, 0x2f, 0x62, 0x50, 0x78, 0x52,
	0x66, 0x69, 0x43, 0x59, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x4b, 0x45, 0x59, 0x22, 0x7d,
	0x2c, 0x7b, 0x22, 0x6b, 0x65, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x41, 0x57, 0x53, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x22, 0x2c, 0x22, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x41, 0x51, 0x6f, 0x44, 0x59, 0x58, 0x64, 0x7a, 0x45,
	0x50, 0x54, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x77, 0x45, 0x58, 0x41,
	0x4d, 0x50, 0x4c, 0x45, 0x74, 0x3d, 0x3d, 0x22, 0x7d, 0x5d, 0x2c, 0x22, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x79, 0x2d,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2d, 0x55, 0x55, 0x49, 0x44, 0x22,
	0x2c, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x63, 0x64, 0x33, 0x61, 0x64, 0x33, 0x64, 0x39,
	0x2d, 0x32, 0x37, 0x37, 0x36, 0x2d, 0x34, 0x65, 0x66, 0x31, 0x2d, 0x61, 0x39, 0x30, 0x34, 0x2d,
	0x31, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x55, 0x55, 0x49, 0x44, 0x22, 0x2c, 0x22, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x5d, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0x6d, 0x79, 0x20, 0x61, 0x77, 0x73, 0x20, 0x61, 0x70, 0x69, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x22, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x61, 0x77, 0x73, 0x2d, 0x65, 0x63, 0x32, 0x22, 0x7d, 0x22,
	0x9e, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42,
	0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x73, 0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0xd2, 0x01, 0x07, 0x74, 0x61, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0xd2, 0x01, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xd2,
	0x01, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73,
	0x22, 0x88, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x3a, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x12, 0x0e, 0x7b, 0x22, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x22, 0x7d, 0x32, 0xf1, 0x11, 0x0a, 0x12,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x27,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x73, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22,
	0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x2f, 0x0a, 0x12, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73,
	0x12, 0x19, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x04,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x1a, 0x2f, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0x59, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18, 0x31, 0x0a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e,
	0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x16, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xb2, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x1a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x19, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xa6, 0x01,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xb5,
	0x18, 0x34, 0x0a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x19, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x73, 0x22, 0x67, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x34,
	0x0a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x19, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0xd2, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x2d, 0x6e,
	0x6f, 0x64, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x19,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xd8, 0x01, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x77, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x39, 0x2a, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x8a, 0xb5, 0x18, 0x34,
	0x0a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x19, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a,
	0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x17, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0xfd, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x37, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x46, 0x0a, 0x2b, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x3a, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x17, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0xf4, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x8a, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x69, 0x64, 0x2f,
	0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x8a, 0xb5, 0x18, 0x45, 0x0a, 0x2a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x1a, 0x33,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x2f, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a,
	0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x39, 0x0a, 0x1d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x3a,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x6e, 0x6f, 0x64,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x3a, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x42,
	0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68,
	0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_nodes_manager_manager_proto_rawDescOnce sync.Once
	file_external_nodes_manager_manager_proto_rawDescData = file_external_nodes_manager_manager_proto_rawDesc
)

func file_external_nodes_manager_manager_proto_rawDescGZIP() []byte {
	file_external_nodes_manager_manager_proto_rawDescOnce.Do(func() {
		file_external_nodes_manager_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_nodes_manager_manager_proto_rawDescData)
	})
	return file_external_nodes_manager_manager_proto_rawDescData
}

var file_external_nodes_manager_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_external_nodes_manager_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_external_nodes_manager_manager_proto_goTypes = []interface{}{
	(Query_OrderType)(0),          // 0: chef.automate.api.nodes.manager.v1.Query.OrderType
	(*ConnectResponse)(nil),       // 1: chef.automate.api.nodes.manager.v1.ConnectResponse
	(*Id)(nil),                    // 2: chef.automate.api.nodes.manager.v1.Id
	(*Ids)(nil),                   // 3: chef.automate.api.nodes.manager.v1.Ids
	(*Query)(nil),                 // 4: chef.automate.api.nodes.manager.v1.Query
	(*Fields)(nil),                // 5: chef.automate.api.nodes.manager.v1.Fields
	(*FieldQuery)(nil),            // 6: chef.automate.api.nodes.manager.v1.FieldQuery
	(*Nodes)(nil),                 // 7: chef.automate.api.nodes.manager.v1.Nodes
	(*NodeQuery)(nil),             // 8: chef.automate.api.nodes.manager.v1.NodeQuery
	(*NodeManager)(nil),           // 9: chef.automate.api.nodes.manager.v1.NodeManager
	(*CredentialsByTags)(nil),     // 10: chef.automate.api.nodes.manager.v1.CredentialsByTags
	(*NodeManagers)(nil),          // 11: chef.automate.api.nodes.manager.v1.NodeManagers
	(*query.Filter)(nil),          // 12: chef.automate.api.common.query.Filter
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*query.Kv)(nil),              // 14: chef.automate.api.common.query.Kv
	(*emptypb.Empty)(nil),         // 15: google.protobuf.Empty
}
var file_external_nodes_manager_manager_proto_depIdxs = []int32{
	2,  // 0: chef.automate.api.nodes.manager.v1.Ids.ids:type_name -> chef.automate.api.nodes.manager.v1.Id
	12, // 1: chef.automate.api.nodes.manager.v1.Query.filter_map:type_name -> chef.automate.api.common.query.Filter
	0,  // 2: chef.automate.api.nodes.manager.v1.Query.order:type_name -> chef.automate.api.nodes.manager.v1.Query.OrderType
	4,  // 3: chef.automate.api.nodes.manager.v1.FieldQuery.query:type_name -> chef.automate.api.nodes.manager.v1.Query
	4,  // 4: chef.automate.api.nodes.manager.v1.NodeQuery.query:type_name -> chef.automate.api.nodes.manager.v1.Query
	10, // 5: chef.automate.api.nodes.manager.v1.NodeManager.instance_credentials:type_name -> chef.automate.api.nodes.manager.v1.CredentialsByTags
	13, // 6: chef.automate.api.nodes.manager.v1.NodeManager.date_added:type_name -> google.protobuf.Timestamp
	14, // 7: chef.automate.api.nodes.manager.v1.NodeManager.credential_data:type_name -> chef.automate.api.common.query.Kv
	9,  // 8: chef.automate.api.nodes.manager.v1.NodeManagers.managers:type_name -> chef.automate.api.nodes.manager.v1.NodeManager
	9,  // 9: chef.automate.api.nodes.manager.v1.NodeManagerService.Create:input_type -> chef.automate.api.nodes.manager.v1.NodeManager
	2,  // 10: chef.automate.api.nodes.manager.v1.NodeManagerService.Read:input_type -> chef.automate.api.nodes.manager.v1.Id
	9,  // 11: chef.automate.api.nodes.manager.v1.NodeManagerService.Update:input_type -> chef.automate.api.nodes.manager.v1.NodeManager
	2,  // 12: chef.automate.api.nodes.manager.v1.NodeManagerService.Delete:input_type -> chef.automate.api.nodes.manager.v1.Id
	2,  // 13: chef.automate.api.nodes.manager.v1.NodeManagerService.DeleteWithNodes:input_type -> chef.automate.api.nodes.manager.v1.Id
	2,  // 14: chef.automate.api.nodes.manager.v1.NodeManagerService.DeleteWithNodeStateStopped:input_type -> chef.automate.api.nodes.manager.v1.Id
	2,  // 15: chef.automate.api.nodes.manager.v1.NodeManagerService.DeleteWithNodeStateTerminated:input_type -> chef.automate.api.nodes.manager.v1.Id
	4,  // 16: chef.automate.api.nodes.manager.v1.NodeManagerService.List:input_type -> chef.automate.api.nodes.manager.v1.Query
	6,  // 17: chef.automate.api.nodes.manager.v1.NodeManagerService.SearchNodeFields:input_type -> chef.automate.api.nodes.manager.v1.FieldQuery
	8,  // 18: chef.automate.api.nodes.manager.v1.NodeManagerService.SearchNodes:input_type -> chef.automate.api.nodes.manager.v1.NodeQuery
	2,  // 19: chef.automate.api.nodes.manager.v1.NodeManagerService.Connect:input_type -> chef.automate.api.nodes.manager.v1.Id
	3,  // 20: chef.automate.api.nodes.manager.v1.NodeManagerService.Create:output_type -> chef.automate.api.nodes.manager.v1.Ids
	9,  // 21: chef.automate.api.nodes.manager.v1.NodeManagerService.Read:output_type -> chef.automate.api.nodes.manager.v1.NodeManager
	15, // 22: chef.automate.api.nodes.manager.v1.NodeManagerService.Update:output_type -> google.protobuf.Empty
	15, // 23: chef.automate.api.nodes.manager.v1.NodeManagerService.Delete:output_type -> google.protobuf.Empty
	3,  // 24: chef.automate.api.nodes.manager.v1.NodeManagerService.DeleteWithNodes:output_type -> chef.automate.api.nodes.manager.v1.Ids
	15, // 25: chef.automate.api.nodes.manager.v1.NodeManagerService.DeleteWithNodeStateStopped:output_type -> google.protobuf.Empty
	15, // 26: chef.automate.api.nodes.manager.v1.NodeManagerService.DeleteWithNodeStateTerminated:output_type -> google.protobuf.Empty
	11, // 27: chef.automate.api.nodes.manager.v1.NodeManagerService.List:output_type -> chef.automate.api.nodes.manager.v1.NodeManagers
	5,  // 28: chef.automate.api.nodes.manager.v1.NodeManagerService.SearchNodeFields:output_type -> chef.automate.api.nodes.manager.v1.Fields
	7,  // 29: chef.automate.api.nodes.manager.v1.NodeManagerService.SearchNodes:output_type -> chef.automate.api.nodes.manager.v1.Nodes
	1,  // 30: chef.automate.api.nodes.manager.v1.NodeManagerService.Connect:output_type -> chef.automate.api.nodes.manager.v1.ConnectResponse
	20, // [20:31] is the sub-list for method output_type
	9,  // [9:20] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_external_nodes_manager_manager_proto_init() }
func file_external_nodes_manager_manager_proto_init() {
	if File_external_nodes_manager_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_external_nodes_manager_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_nodes_manager_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_nodes_manager_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_nodes_manager_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_nodes_manager_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_nodes_manager_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_nodes_manager_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_nodes_manager_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_nodes_manager_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_nodes_manager_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialsByTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_nodes_manager_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeManagers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_nodes_manager_manager_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_nodes_manager_manager_proto_goTypes,
		DependencyIndexes: file_external_nodes_manager_manager_proto_depIdxs,
		EnumInfos:         file_external_nodes_manager_manager_proto_enumTypes,
		MessageInfos:      file_external_nodes_manager_manager_proto_msgTypes,
	}.Build()
	File_external_nodes_manager_manager_proto = out.File
	file_external_nodes_manager_manager_proto_rawDesc = nil
	file_external_nodes_manager_manager_proto_goTypes = nil
	file_external_nodes_manager_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeManagerServiceClient is the client API for NodeManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeManagerServiceClient interface {
	//
	//Create a Node Manager
	//
	//Creates a node manager given a name, credential id *or* credential data, and type.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:create
	//```
	Create(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*Ids, error)
	//
	//View a Node Manager
	//
	//List the details of a node manager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:get
	//```
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NodeManager, error)
	//
	//Update a Node Manager
	//
	//Update a node manager's metadata, such as its name, associated credential id, or data.
	//This is a PUT operation and it overwrites ALL of the existing node manager metadata. Include all fields, because a PUT operation overwrites any missing fields to empty ("").
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:update
	//```
	Update(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	//Delete a Node Manager
	//
	//Delete a single node manager. This deletes the node manager itself and
	//reassigns its associated nodes to the Automate node manager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	//Delete a Node Manager and Delete Nodes
	//
	//Delete a node manager and all of its associated nodes.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error)
	//
	//Delete a Node Manager and Stop Nodes
	//
	//Delete a node manager and update its associated nodes to `stopped`.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodeStateStopped(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	//Delete a Node Manager and Terminate Nodes
	//
	//Delete a node manager and update its associated nodes to `terminated`.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodeStateTerminated(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//
	//List all Node Managers
	//
	//Returns a list of node managers.
	//Supports filtering, sorting, and pagination.
	//
	//Valid filtering fields: manager_type
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*NodeManagers, error)
	//
	//Search Node Fields
	//
	//Searches the available values for a given field across all nodes associated with the nodemanager id.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	SearchNodeFields(ctx context.Context, in *FieldQuery, opts ...grpc.CallOption) (*Fields, error)
	//
	//Search nodes
	//
	//Searches the available nodes for a single node manager by id.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	SearchNodes(ctx context.Context, in *NodeQuery, opts ...grpc.CallOption) (*Nodes, error)
	//
	//Connect
	//
	//Attempts to reach the API for the given nodemanager id to validate the
	//credentials associated with the nodemanager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:rerun
	//```
	Connect(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConnectResponse, error)
}

type nodeManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeManagerServiceClient(cc grpc.ClientConnInterface) NodeManagerServiceClient {
	return &nodeManagerServiceClient{cc}
}

func (c *nodeManagerServiceClient) Create(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NodeManager, error) {
	out := new(NodeManager)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Update(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) DeleteWithNodes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) DeleteWithNodeStateStopped(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodeStateStopped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) DeleteWithNodeStateTerminated(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodeStateTerminated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*NodeManagers, error) {
	out := new(NodeManagers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) SearchNodeFields(ctx context.Context, in *FieldQuery, opts ...grpc.CallOption) (*Fields, error) {
	out := new(Fields)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/SearchNodeFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) SearchNodes(ctx context.Context, in *NodeQuery, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/SearchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Connect(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.manager.v1.NodeManagerService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeManagerServiceServer is the server API for NodeManagerService service.
type NodeManagerServiceServer interface {
	//
	//Create a Node Manager
	//
	//Creates a node manager given a name, credential id *or* credential data, and type.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:create
	//```
	Create(context.Context, *NodeManager) (*Ids, error)
	//
	//View a Node Manager
	//
	//List the details of a node manager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:get
	//```
	Read(context.Context, *Id) (*NodeManager, error)
	//
	//Update a Node Manager
	//
	//Update a node manager's metadata, such as its name, associated credential id, or data.
	//This is a PUT operation and it overwrites ALL of the existing node manager metadata. Include all fields, because a PUT operation overwrites any missing fields to empty ("").
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:update
	//```
	Update(context.Context, *NodeManager) (*emptypb.Empty, error)
	//
	//Delete a Node Manager
	//
	//Delete a single node manager. This deletes the node manager itself and
	//reassigns its associated nodes to the Automate node manager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	Delete(context.Context, *Id) (*emptypb.Empty, error)
	//
	//Delete a Node Manager and Delete Nodes
	//
	//Delete a node manager and all of its associated nodes.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodes(context.Context, *Id) (*Ids, error)
	//
	//Delete a Node Manager and Stop Nodes
	//
	//Delete a node manager and update its associated nodes to `stopped`.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodeStateStopped(context.Context, *Id) (*emptypb.Empty, error)
	//
	//Delete a Node Manager and Terminate Nodes
	//
	//Delete a node manager and update its associated nodes to `terminated`.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:delete
	//```
	DeleteWithNodeStateTerminated(context.Context, *Id) (*emptypb.Empty, error)
	//
	//List all Node Managers
	//
	//Returns a list of node managers.
	//Supports filtering, sorting, and pagination.
	//
	//Valid filtering fields: manager_type
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	List(context.Context, *Query) (*NodeManagers, error)
	//
	//Search Node Fields
	//
	//Searches the available values for a given field across all nodes associated with the nodemanager id.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	SearchNodeFields(context.Context, *FieldQuery) (*Fields, error)
	//
	//Search nodes
	//
	//Searches the available nodes for a single node manager by id.
	//
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:list
	//```
	SearchNodes(context.Context, *NodeQuery) (*Nodes, error)
	//
	//Connect
	//
	//Attempts to reach the API for the given nodemanager id to validate the
	//credentials associated with the nodemanager.
	//
	//Authorization Action:
	//
	//```
	//infra:nodeManagers:rerun
	//```
	Connect(context.Context, *Id) (*ConnectResponse, error)
}

// UnimplementedNodeManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeManagerServiceServer struct {
}

func (*UnimplementedNodeManagerServiceServer) Create(context.Context, *NodeManager) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Read(context.Context, *Id) (*NodeManager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Update(context.Context, *NodeManager) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Delete(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedNodeManagerServiceServer) DeleteWithNodes(context.Context, *Id) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithNodes not implemented")
}
func (*UnimplementedNodeManagerServiceServer) DeleteWithNodeStateStopped(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithNodeStateStopped not implemented")
}
func (*UnimplementedNodeManagerServiceServer) DeleteWithNodeStateTerminated(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithNodeStateTerminated not implemented")
}
func (*UnimplementedNodeManagerServiceServer) List(context.Context, *Query) (*NodeManagers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedNodeManagerServiceServer) SearchNodeFields(context.Context, *FieldQuery) (*Fields, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodeFields not implemented")
}
func (*UnimplementedNodeManagerServiceServer) SearchNodes(context.Context, *NodeQuery) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodes not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Connect(context.Context, *Id) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterNodeManagerServiceServer(s *grpc.Server, srv NodeManagerServiceServer) {
	s.RegisterService(&_NodeManagerService_serviceDesc, srv)
}

func _NodeManagerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Create(ctx, req.(*NodeManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Update(ctx, req.(*NodeManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_DeleteWithNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).DeleteWithNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).DeleteWithNodes(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_DeleteWithNodeStateStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodeStateStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateStopped(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_DeleteWithNodeStateTerminated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateTerminated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/DeleteWithNodeStateTerminated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateTerminated(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).List(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_SearchNodeFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).SearchNodeFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/SearchNodeFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).SearchNodeFields(ctx, req.(*FieldQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_SearchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).SearchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/SearchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).SearchNodes(ctx, req.(*NodeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.manager.v1.NodeManagerService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Connect(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.nodes.manager.v1.NodeManagerService",
	HandlerType: (*NodeManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NodeManagerService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NodeManagerService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NodeManagerService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NodeManagerService_Delete_Handler,
		},
		{
			MethodName: "DeleteWithNodes",
			Handler:    _NodeManagerService_DeleteWithNodes_Handler,
		},
		{
			MethodName: "DeleteWithNodeStateStopped",
			Handler:    _NodeManagerService_DeleteWithNodeStateStopped_Handler,
		},
		{
			MethodName: "DeleteWithNodeStateTerminated",
			Handler:    _NodeManagerService_DeleteWithNodeStateTerminated_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NodeManagerService_List_Handler,
		},
		{
			MethodName: "SearchNodeFields",
			Handler:    _NodeManagerService_SearchNodeFields_Handler,
		},
		{
			MethodName: "SearchNodes",
			Handler:    _NodeManagerService_SearchNodes_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _NodeManagerService_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/nodes/manager/manager.proto",
}
