// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/nodes/nodes.proto

package nodes

import (
	context "context"
	fmt "fmt"
	query "github.com/chef/automate/api/external/common/query"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Return the results in ascending or descending order.
type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

var Query_OrderType_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var Query_OrderType_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x Query_OrderType) String() string {
	return proto.EnumName(Query_OrderType_name, int32(x))
}

func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{3, 0}
}

type LastContactData_Status int32

const (
	LastContactData_UNKNOWN LastContactData_Status = 0
	LastContactData_PASSED  LastContactData_Status = 1
	LastContactData_FAILED  LastContactData_Status = 2
	LastContactData_SKIPPED LastContactData_Status = 3
)

var LastContactData_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "PASSED",
	2: "FAILED",
	3: "SKIPPED",
}

var LastContactData_Status_value = map[string]int32{
	"UNKNOWN": 0,
	"PASSED":  1,
	"FAILED":  2,
	"SKIPPED": 3,
}

func (x LastContactData_Status) String() string {
	return proto.EnumName(LastContactData_Status_name, int32(x))
}

func (LastContactData_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{6, 0}
}

type Id struct {
	// Unique node ID (UUID)
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{0}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Ids struct {
	// List of node UUIDs.
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ids) Reset()         { *m = Ids{} }
func (m *Ids) String() string { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()    {}
func (*Ids) Descriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{1}
}

func (m *Ids) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ids.Unmarshal(m, b)
}
func (m *Ids) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ids.Marshal(b, m, deterministic)
}
func (m *Ids) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ids.Merge(m, src)
}
func (m *Ids) XXX_Size() int {
	return xxx_messageInfo_Ids.Size(m)
}
func (m *Ids) XXX_DiscardUnknown() {
	xxx_messageInfo_Ids.DiscardUnknown(m)
}

var xxx_messageInfo_Ids proto.InternalMessageInfo

func (m *Ids) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type RerunResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RerunResponse) Reset()         { *m = RerunResponse{} }
func (m *RerunResponse) String() string { return proto.CompactTextString(m) }
func (*RerunResponse) ProtoMessage()    {}
func (*RerunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{2}
}

func (m *RerunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RerunResponse.Unmarshal(m, b)
}
func (m *RerunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RerunResponse.Marshal(b, m, deterministic)
}
func (m *RerunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RerunResponse.Merge(m, src)
}
func (m *RerunResponse) XXX_Size() int {
	return xxx_messageInfo_RerunResponse.Size(m)
}
func (m *RerunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RerunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RerunResponse proto.InternalMessageInfo

type Query struct {
	// Use filters to limit the set of nodes to delete.
	Filters []*query.Filter `protobuf:"bytes,20,rep,name=filters,proto3" json:"filters,omitempty"`
	Order   Query_OrderType `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.api.nodes.v1.Query_OrderType" json:"order,omitempty"`
	// Sort the results on a specific field.
	Sort string `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty"`
	// The number of result pages to return.
	Page int32 `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`
	// The number of results on each page.
	PerPage              int32    `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{3}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetFilters() []*query.Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Query) GetOrder() Query_OrderType {
	if m != nil {
		return m.Order
	}
	return Query_ASC
}

func (m *Query) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *Query) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Query) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

// Details for ssh/winrm access of the node.
type TargetConfig struct {
	// List of credential IDs for a node.
	Secrets []string `protobuf:"bytes,20,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// Node backend type (ssh, winrm, aws, ssm, azure, gcp).
	Backend string `protobuf:"bytes,22,opt,name=backend,proto3" json:"backend,omitempty"`
	// Node FQDN or IP address.
	Host string `protobuf:"bytes,23,opt,name=host,proto3" json:"host,omitempty"`
	// ssh or winrm connection port
	Port int32 `protobuf:"varint,24,opt,name=port,proto3" json:"port,omitempty"`
	// Uses `sudo` (boolean).
	Sudo bool `protobuf:"varint,26,opt,name=sudo,proto3" json:"sudo,omitempty"`
	// Check ssl (boolean).
	Ssl bool `protobuf:"varint,27,opt,name=ssl,proto3" json:"ssl,omitempty"`
	// Allow self-signed certificate (boolean).
	SelfSigned bool `protobuf:"varint,28,opt,name=self_signed,json=selfSigned,proto3" json:"self_signed,omitempty"`
	// Username from the credential ID for this node.
	User string `protobuf:"bytes,29,opt,name=user,proto3" json:"user,omitempty"`
	// Sudo options to use when accessing the node.
	SudoOptions string `protobuf:"bytes,33,opt,name=sudo_options,json=sudoOptions,proto3" json:"sudo_options,omitempty"`
	// List of hostnames (FQDN or IP address) for bulk creating nodes.
	Hosts                []string `protobuf:"bytes,40,rep,name=hosts,proto3" json:"hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TargetConfig) Reset()         { *m = TargetConfig{} }
func (m *TargetConfig) String() string { return proto.CompactTextString(m) }
func (*TargetConfig) ProtoMessage()    {}
func (*TargetConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{4}
}

func (m *TargetConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TargetConfig.Unmarshal(m, b)
}
func (m *TargetConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TargetConfig.Marshal(b, m, deterministic)
}
func (m *TargetConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetConfig.Merge(m, src)
}
func (m *TargetConfig) XXX_Size() int {
	return xxx_messageInfo_TargetConfig.Size(m)
}
func (m *TargetConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TargetConfig proto.InternalMessageInfo

func (m *TargetConfig) GetSecrets() []string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *TargetConfig) GetBackend() string {
	if m != nil {
		return m.Backend
	}
	return ""
}

func (m *TargetConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *TargetConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *TargetConfig) GetSudo() bool {
	if m != nil {
		return m.Sudo
	}
	return false
}

func (m *TargetConfig) GetSsl() bool {
	if m != nil {
		return m.Ssl
	}
	return false
}

func (m *TargetConfig) GetSelfSigned() bool {
	if m != nil {
		return m.SelfSigned
	}
	return false
}

func (m *TargetConfig) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *TargetConfig) GetSudoOptions() string {
	if m != nil {
		return m.SudoOptions
	}
	return ""
}

func (m *TargetConfig) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

// Node information.
type Node struct {
	// Unique node ID (UUID).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User-specified node name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Node platform.
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// Node platform version.
	PlatformVersion string `protobuf:"bytes,4,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty"`
	// Node manager (automate, aws-ec2, aws-api, azure-vm, azure-api, gcp).
	Manager string `protobuf:"bytes,5,opt,name=manager,proto3" json:"manager,omitempty"`
	// Node tags.
	Tags []*query.Kv `protobuf:"bytes,20,rep,name=tags,proto3" json:"tags,omitempty"`
	// Timestamp of the last `detect` or `exec` job.
	LastContact *timestamp.Timestamp `protobuf:"bytes,21,opt,name=last_contact,json=lastContact,proto3" json:"last_contact,omitempty"`
	// Node status (unreachable, reachable, unknown).
	Status string `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"`
	// Results of the last compliance scan job for this node.
	LastJob *ResultsRow `protobuf:"bytes,23,opt,name=last_job,json=lastJob,proto3" json:"last_job,omitempty"`
	// Node configuration for ssh or winrm.
	TargetConfig *TargetConfig `protobuf:"bytes,99,opt,name=target_config,json=targetConfig,proto3" json:"target_config,omitempty"`
	// List of manager IDs for the node.
	ManagerIds []string `protobuf:"bytes,24,rep,name=manager_ids,json=managerIds,proto3" json:"manager_ids,omitempty"`
	// Last connection error received when trying to contact the node.
	ConnectionError string `protobuf:"bytes,25,opt,name=connection_error,json=connectionError,proto3" json:"connection_error,omitempty"`
	// Last known node state (running, stopped, terminated).
	State string `protobuf:"bytes,26,opt,name=state,proto3" json:"state,omitempty"`
	// Prefix for node name. The full node name is the prefix + the host.
	NamePrefix string `protobuf:"bytes,27,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	// List of projects associated with the node. Projects are a concept introduced in IAMv2.
	Projects []string `protobuf:"bytes,28,rep,name=projects,proto3" json:"projects,omitempty"`
	// Most recent node data from the last Chef Infra run results.
	RunData *LastContactData `protobuf:"bytes,29,opt,name=run_data,json=runData,proto3" json:"run_data,omitempty"`
	// Most recent compliance scan data for the node from the last InSpec scan.
	ScanData             *LastContactData `protobuf:"bytes,30,opt,name=scan_data,json=scanData,proto3" json:"scan_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{5}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Node) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *Node) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *Node) GetTags() []*query.Kv {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Node) GetLastContact() *timestamp.Timestamp {
	if m != nil {
		return m.LastContact
	}
	return nil
}

func (m *Node) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Node) GetLastJob() *ResultsRow {
	if m != nil {
		return m.LastJob
	}
	return nil
}

func (m *Node) GetTargetConfig() *TargetConfig {
	if m != nil {
		return m.TargetConfig
	}
	return nil
}

func (m *Node) GetManagerIds() []string {
	if m != nil {
		return m.ManagerIds
	}
	return nil
}

func (m *Node) GetConnectionError() string {
	if m != nil {
		return m.ConnectionError
	}
	return ""
}

func (m *Node) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Node) GetNamePrefix() string {
	if m != nil {
		return m.NamePrefix
	}
	return ""
}

func (m *Node) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *Node) GetRunData() *LastContactData {
	if m != nil {
		return m.RunData
	}
	return nil
}

func (m *Node) GetScanData() *LastContactData {
	if m != nil {
		return m.ScanData
	}
	return nil
}

// Most recent node data from the latest Chef Infra run and InSpec scan.
type LastContactData struct {
	// Chef Infra run report ID or InSpec scan report ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Last node report status.
	Status LastContactData_Status `protobuf:"varint,2,opt,name=status,proto3,enum=chef.automate.api.nodes.v1.LastContactData_Status" json:"status,omitempty"`
	// Next-to-last node status report.
	PenultimateStatus LastContactData_Status `protobuf:"varint,3,opt,name=penultimate_status,json=penultimateStatus,proto3,enum=chef.automate.api.nodes.v1.LastContactData_Status" json:"penultimate_status,omitempty"`
	// Last node report endtime.
	EndTime              *timestamp.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LastContactData) Reset()         { *m = LastContactData{} }
func (m *LastContactData) String() string { return proto.CompactTextString(m) }
func (*LastContactData) ProtoMessage()    {}
func (*LastContactData) Descriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{6}
}

func (m *LastContactData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastContactData.Unmarshal(m, b)
}
func (m *LastContactData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastContactData.Marshal(b, m, deterministic)
}
func (m *LastContactData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastContactData.Merge(m, src)
}
func (m *LastContactData) XXX_Size() int {
	return xxx_messageInfo_LastContactData.Size(m)
}
func (m *LastContactData) XXX_DiscardUnknown() {
	xxx_messageInfo_LastContactData.DiscardUnknown(m)
}

var xxx_messageInfo_LastContactData proto.InternalMessageInfo

func (m *LastContactData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LastContactData) GetStatus() LastContactData_Status {
	if m != nil {
		return m.Status
	}
	return LastContactData_UNKNOWN
}

func (m *LastContactData) GetPenultimateStatus() LastContactData_Status {
	if m != nil {
		return m.PenultimateStatus
	}
	return LastContactData_UNKNOWN
}

func (m *LastContactData) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type Nodes struct {
	// List of nodes.
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Total number of nodes in the system.
	Total int32 `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
	// Total number of unreachable nodes in the system.
	TotalUnreachable int32 `protobuf:"varint,21,opt,name=total_unreachable,json=totalUnreachable,proto3" json:"total_unreachable,omitempty"`
	// Total number of reachable nodes in the system.
	TotalReachable int32 `protobuf:"varint,22,opt,name=total_reachable,json=totalReachable,proto3" json:"total_reachable,omitempty"`
	// Total number of unknown nodes in the system.
	TotalUnknown         int32    `protobuf:"varint,23,opt,name=total_unknown,json=totalUnknown,proto3" json:"total_unknown,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{7}
}

func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nodes.Unmarshal(m, b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return xxx_messageInfo_Nodes.Size(m)
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Nodes) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Nodes) GetTotalUnreachable() int32 {
	if m != nil {
		return m.TotalUnreachable
	}
	return 0
}

func (m *Nodes) GetTotalReachable() int32 {
	if m != nil {
		return m.TotalReachable
	}
	return 0
}

func (m *Nodes) GetTotalUnknown() int32 {
	if m != nil {
		return m.TotalUnknown
	}
	return 0
}

// Summary of the last Chef InSpec scan job run on the node.
type ResultsRow struct {
	// Unique node ID.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Unique ID of the report generated by the InSpec scan.
	ReportId string `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// Status of the report (failed, success, skipped).
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Error message returned after several failed attempts to contact a node.
	Result string `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	// Unique ID of the scan job that generated the report.
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Start time on the report.
	StartTime *timestamp.Timestamp `protobuf:"bytes,20,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time on the report.
	EndTime              *timestamp.Timestamp `protobuf:"bytes,21,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ResultsRow) Reset()         { *m = ResultsRow{} }
func (m *ResultsRow) String() string { return proto.CompactTextString(m) }
func (*ResultsRow) ProtoMessage()    {}
func (*ResultsRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{8}
}

func (m *ResultsRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultsRow.Unmarshal(m, b)
}
func (m *ResultsRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultsRow.Marshal(b, m, deterministic)
}
func (m *ResultsRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultsRow.Merge(m, src)
}
func (m *ResultsRow) XXX_Size() int {
	return xxx_messageInfo_ResultsRow.Size(m)
}
func (m *ResultsRow) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultsRow.DiscardUnknown(m)
}

var xxx_messageInfo_ResultsRow proto.InternalMessageInfo

func (m *ResultsRow) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ResultsRow) GetReportId() string {
	if m != nil {
		return m.ReportId
	}
	return ""
}

func (m *ResultsRow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ResultsRow) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *ResultsRow) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *ResultsRow) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *ResultsRow) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type BulkDeleteResponse struct {
	// List of deleted nodes, by name.
	Names                []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BulkDeleteResponse) Reset()         { *m = BulkDeleteResponse{} }
func (m *BulkDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*BulkDeleteResponse) ProtoMessage()    {}
func (*BulkDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36a1516efcb16aeb, []int{9}
}

func (m *BulkDeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BulkDeleteResponse.Unmarshal(m, b)
}
func (m *BulkDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BulkDeleteResponse.Marshal(b, m, deterministic)
}
func (m *BulkDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkDeleteResponse.Merge(m, src)
}
func (m *BulkDeleteResponse) XXX_Size() int {
	return xxx_messageInfo_BulkDeleteResponse.Size(m)
}
func (m *BulkDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BulkDeleteResponse proto.InternalMessageInfo

func (m *BulkDeleteResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func init() {
	proto.RegisterEnum("chef.automate.api.nodes.v1.Query_OrderType", Query_OrderType_name, Query_OrderType_value)
	proto.RegisterEnum("chef.automate.api.nodes.v1.LastContactData_Status", LastContactData_Status_name, LastContactData_Status_value)
	proto.RegisterType((*Id)(nil), "chef.automate.api.nodes.v1.Id")
	proto.RegisterType((*Ids)(nil), "chef.automate.api.nodes.v1.Ids")
	proto.RegisterType((*RerunResponse)(nil), "chef.automate.api.nodes.v1.RerunResponse")
	proto.RegisterType((*Query)(nil), "chef.automate.api.nodes.v1.Query")
	proto.RegisterType((*TargetConfig)(nil), "chef.automate.api.nodes.v1.TargetConfig")
	proto.RegisterType((*Node)(nil), "chef.automate.api.nodes.v1.Node")
	proto.RegisterType((*LastContactData)(nil), "chef.automate.api.nodes.v1.LastContactData")
	proto.RegisterType((*Nodes)(nil), "chef.automate.api.nodes.v1.Nodes")
	proto.RegisterType((*ResultsRow)(nil), "chef.automate.api.nodes.v1.ResultsRow")
	proto.RegisterType((*BulkDeleteResponse)(nil), "chef.automate.api.nodes.v1.BulkDeleteResponse")
}

func init() {
	proto.RegisterFile("api/external/nodes/nodes.proto", fileDescriptor_36a1516efcb16aeb)
}

var fileDescriptor_36a1516efcb16aeb = []byte{
	// 1500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcb, 0x6e, 0x1b, 0x37,
	0x17, 0xce, 0x48, 0xd6, 0xed, 0xc8, 0x17, 0x99, 0xbf, 0x63, 0x4f, 0x94, 0xfc, 0xbe, 0x4c, 0xd0,
	0x54, 0x71, 0xe0, 0x11, 0xea, 0xa2, 0x01, 0xea, 0x22, 0x40, 0x7c, 0x51, 0x50, 0x25, 0xa9, 0xe3,
	0x8e, 0x92, 0x16, 0xe8, 0x46, 0xa0, 0x66, 0x28, 0x79, 0xec, 0xd1, 0x70, 0x4a, 0x72, 0x9c, 0x18,
	0x45, 0x37, 0xd9, 0x04, 0xf5, 0xb6, 0xdd, 0x74, 0xd3, 0x55, 0xdf, 0xa0, 0xf0, 0x13, 0xf4, 0x05,
	0x0a, 0x74, 0xdd, 0x5d, 0xf7, 0x7d, 0x80, 0x02, 0x45, 0x41, 0x72, 0x74, 0xf1, 0x25, 0x92, 0xd3,
	0x8d, 0x71, 0xce, 0xe1, 0xe1, 0x39, 0xdf, 0x9c, 0xef, 0x23, 0x45, 0xc3, 0x22, 0x8e, 0xfc, 0x2a,
	0x79, 0x25, 0x08, 0x0b, 0x71, 0x50, 0x0d, 0xa9, 0x47, 0xb8, 0xfe, 0x6b, 0x47, 0x8c, 0x0a, 0x8a,
	0xca, 0xee, 0x3e, 0x69, 0xdb, 0x38, 0x16, 0xb4, 0x8b, 0x05, 0xb1, 0x71, 0xe4, 0xdb, 0x7a, 0xf9,
	0xe8, 0x83, 0xf2, 0x52, 0x87, 0xd2, 0x4e, 0x40, 0xaa, 0x2a, 0xb3, 0x15, 0xb7, 0xab, 0xc2, 0xef,
	0x12, 0x2e, 0x70, 0x37, 0xd2, 0x9b, 0xcb, 0xb7, 0x92, 0x04, 0xd9, 0x03, 0x87, 0x21, 0x15, 0x58,
	0xf8, 0x34, 0x4c, 0x4a, 0x97, 0x6f, 0x9e, 0xdf, 0x4e, 0xba, 0x91, 0x38, 0x4e, 0x16, 0x1f, 0xba,
	0xb4, 0x1b, 0xd1, 0x90, 0x84, 0x82, 0x57, 0x7b, 0xdd, 0xd7, 0x3a, 0x2c, 0x72, 0x75, 0xba, 0xbb,
	0xd6, 0x21, 0xe1, 0x5a, 0x44, 0x03, 0xdf, 0x3d, 0xae, 0xfa, 0xb8, 0x7b, 0x49, 0xf9, 0xd5, 0x33,
	0x5f, 0xe6, 0xd2, 0x6e, 0x97, 0x86, 0xd5, 0xaf, 0x63, 0xc2, 0x8e, 0xab, 0x11, 0x66, 0xb8, 0x4b,
	0x04, 0x61, 0x49, 0xae, 0x35, 0x07, 0xa9, 0xba, 0x87, 0xa6, 0x21, 0xe5, 0x7b, 0xa6, 0xb1, 0x6c,
	0x54, 0x0a, 0x4e, 0xca, 0xf7, 0xac, 0x05, 0x48, 0xd7, 0x3d, 0x8e, 0x4a, 0x90, 0xf6, 0x3d, 0x6e,
	0x1a, 0xcb, 0xe9, 0x4a, 0xc1, 0x91, 0xa6, 0x35, 0x03, 0x53, 0x0e, 0x61, 0x71, 0xe8, 0x10, 0x1e,
	0xd1, 0x90, 0x13, 0xeb, 0x2f, 0x03, 0x32, 0x9f, 0xcb, 0xd2, 0xe8, 0x21, 0xe4, 0xda, 0x7e, 0x20,
	0x4b, 0x9b, 0x73, 0xcb, 0xe9, 0x4a, 0x71, 0xfd, 0x8e, 0x7d, 0x71, 0x82, 0x1a, 0x8c, 0xad, 0xc0,
	0xd8, 0x8f, 0x54, 0xba, 0xd3, 0xdb, 0x86, 0x36, 0x21, 0x43, 0x99, 0x47, 0x98, 0x79, 0x7d, 0xd9,
	0xa8, 0x4c, 0xaf, 0xdf, 0xb3, 0xdf, 0xce, 0x80, 0xad, 0x7a, 0xda, 0xcf, 0x64, 0xfa, 0xf3, 0xe3,
	0x88, 0x38, 0x7a, 0x27, 0x42, 0x30, 0xc1, 0x29, 0x13, 0xe6, 0xbc, 0xfa, 0x14, 0x65, 0xcb, 0x58,
	0x84, 0x3b, 0xc4, 0x5c, 0x58, 0x36, 0x2a, 0x19, 0x47, 0xd9, 0xe8, 0x06, 0xe4, 0x23, 0xc2, 0x9a,
	0x2a, 0x6e, 0xaa, 0x78, 0x2e, 0x22, 0x6c, 0x0f, 0x77, 0x88, 0xb5, 0x08, 0x85, 0x7e, 0x59, 0x94,
	0x83, 0xf4, 0x66, 0x63, 0xbb, 0x74, 0x0d, 0xe5, 0x61, 0x62, 0xa7, 0xd6, 0xd8, 0x2e, 0x19, 0xd6,
	0x3f, 0x06, 0x4c, 0x3e, 0xc7, 0xac, 0x43, 0xc4, 0x36, 0x0d, 0xdb, 0x7e, 0x07, 0x99, 0x90, 0xe3,
	0xc4, 0x65, 0x44, 0xe8, 0x0f, 0x2f, 0x38, 0x3d, 0x57, 0xae, 0xb4, 0xb0, 0x7b, 0x48, 0x42, 0x2f,
	0x01, 0xd4, 0x73, 0x25, 0xa6, 0x7d, 0xca, 0x85, 0xc2, 0x54, 0x70, 0x94, 0xad, 0x70, 0x4a, 0xec,
	0x66, 0x82, 0x33, 0xc1, 0xce, 0x63, 0x8f, 0x9a, 0xe5, 0x65, 0xa3, 0x92, 0x77, 0x94, 0x2d, 0x59,
	0xe1, 0x3c, 0x30, 0x6f, 0xaa, 0x90, 0x34, 0xd1, 0x12, 0x14, 0x39, 0x09, 0xda, 0x4d, 0xee, 0x77,
	0x42, 0xe2, 0x99, 0xb7, 0xd4, 0x0a, 0xc8, 0x50, 0x43, 0x45, 0x64, 0x99, 0x98, 0x13, 0x66, 0xfe,
	0x5f, 0xb7, 0x93, 0x36, 0x5a, 0x81, 0x49, 0x59, 0xae, 0x49, 0x23, 0xa5, 0x1d, 0x73, 0x45, 0xad,
	0x15, 0x65, 0xec, 0x99, 0x0e, 0xa1, 0x39, 0xc8, 0x48, 0x64, 0xdc, 0xac, 0xa8, 0xef, 0xd2, 0x8e,
	0xf5, 0x47, 0x06, 0x26, 0x76, 0xa9, 0x47, 0xce, 0xab, 0x46, 0x76, 0x09, 0x71, 0x97, 0x98, 0x29,
	0xdd, 0x45, 0xda, 0xa8, 0x0c, 0xf9, 0x28, 0xc0, 0xa2, 0x4d, 0x59, 0xd7, 0x4c, 0xab, 0x78, 0xdf,
	0x47, 0x77, 0xa1, 0xd4, 0xb3, 0x9b, 0x47, 0x84, 0x71, 0x9f, 0x86, 0xe6, 0x84, 0xca, 0x99, 0xe9,
	0xc5, 0xbf, 0xd0, 0x61, 0x39, 0xc9, 0x2e, 0x0e, 0x71, 0x87, 0x30, 0x33, 0xa3, 0x27, 0x99, 0xb8,
	0xe8, 0x3e, 0x4c, 0x08, 0xdc, 0xe9, 0x69, 0xce, 0x1a, 0xa7, 0xb9, 0x27, 0x47, 0x8e, 0xca, 0x47,
	0x0f, 0x60, 0x32, 0xc0, 0x5c, 0x34, 0x5d, 0x1a, 0x0a, 0xec, 0x0a, 0xa5, 0xb9, 0xe2, 0x7a, 0xd9,
	0xd6, 0x47, 0xd3, 0xee, 0x1d, 0x4d, 0xfb, 0x79, 0xef, 0x64, 0x3b, 0x45, 0x99, 0xbf, 0xad, 0xd3,
	0xd1, 0x3c, 0x64, 0xb9, 0xc0, 0x22, 0xe6, 0x09, 0xb3, 0x89, 0x87, 0x36, 0x21, 0xaf, 0xca, 0x1e,
	0xd0, 0x96, 0x22, 0xf7, 0xf2, 0x63, 0xd0, 0x97, 0xb1, 0x43, 0x78, 0x1c, 0x08, 0xee, 0xd0, 0x97,
	0x4e, 0x4e, 0xee, 0x7b, 0x4c, 0x5b, 0xe8, 0x33, 0x98, 0x12, 0x4a, 0x5f, 0x12, 0x5b, 0xdb, 0xef,
	0x98, 0xae, 0xaa, 0x53, 0x19, 0x55, 0x67, 0x58, 0x90, 0xce, 0xa4, 0x18, 0x96, 0xe7, 0x12, 0x14,
	0x93, 0x59, 0x35, 0xe5, 0x61, 0x36, 0x15, 0x95, 0x90, 0x84, 0xe4, 0x29, 0xbf, 0x0b, 0x25, 0x97,
	0x86, 0x21, 0x71, 0x25, 0xe9, 0x4d, 0xc2, 0x18, 0x65, 0xe6, 0x0d, 0x4d, 0xc3, 0x20, 0x5e, 0x93,
	0x61, 0x29, 0x08, 0xf9, 0x9d, 0x44, 0xe9, 0xb1, 0xe0, 0x68, 0x47, 0x76, 0x90, 0x5c, 0x37, 0x23,
	0x46, 0xda, 0xfe, 0x2b, 0x25, 0xcc, 0x82, 0x03, 0x32, 0xb4, 0xa7, 0x22, 0x4a, 0x04, 0x8c, 0x1e,
	0x10, 0x57, 0x70, 0xf3, 0x96, 0xea, 0xdf, 0xf7, 0xd1, 0x23, 0xc8, 0xb3, 0x38, 0x6c, 0x7a, 0x58,
	0x60, 0x25, 0xcf, 0xe2, 0xe8, 0x73, 0xff, 0x74, 0xc0, 0xc1, 0x0e, 0x16, 0xd8, 0xc9, 0xb1, 0x38,
	0x94, 0x06, 0xfa, 0x14, 0x0a, 0xdc, 0xc5, 0x49, 0xa1, 0xc5, 0x77, 0x2f, 0x94, 0x97, 0xbb, 0xa5,
	0x65, 0xfd, 0x9a, 0x82, 0x99, 0x73, 0xab, 0x17, 0xa4, 0xfe, 0xb8, 0x4f, 0x7f, 0x4a, 0xdd, 0x55,
	0xeb, 0xef, 0xd0, 0xca, 0x6e, 0xa8, 0x9d, 0x7d, 0xc9, 0x60, 0x40, 0x11, 0x09, 0xe3, 0x40, 0xf8,
	0x72, 0x6b, 0x33, 0xa9, 0x9b, 0xfe, 0xcf, 0x75, 0x67, 0x87, 0xaa, 0xe9, 0x10, 0xfa, 0x08, 0xf2,
	0x24, 0xf4, 0x9a, 0xf2, 0x57, 0x4a, 0x9d, 0xb0, 0xd1, 0x42, 0xcf, 0x91, 0xd0, 0x93, 0x9e, 0xb5,
	0x01, 0xd9, 0xa4, 0x40, 0x11, 0x72, 0x2f, 0x76, 0x9f, 0xec, 0x3e, 0xfb, 0x72, 0xb7, 0x74, 0x0d,
	0x01, 0x64, 0xf7, 0x36, 0x1b, 0x8d, 0xda, 0x4e, 0xc9, 0x90, 0xf6, 0xa3, 0xcd, 0xfa, 0xd3, 0xda,
	0x4e, 0x29, 0x25, 0x93, 0x1a, 0x4f, 0xea, 0x7b, 0x7b, 0xb5, 0x9d, 0x52, 0xda, 0xfa, 0xcd, 0x80,
	0x8c, 0xbc, 0x25, 0x38, 0xba, 0x0f, 0x19, 0x05, 0x59, 0xfd, 0x8e, 0x14, 0xd7, 0x97, 0x47, 0x7d,
	0x92, 0xdc, 0xe1, 0xe8, 0x74, 0x29, 0x36, 0x41, 0x05, 0x0e, 0xcc, 0x39, 0x75, 0x21, 0x6a, 0x07,
	0xdd, 0x83, 0x59, 0x65, 0x34, 0xe3, 0x90, 0x11, 0xec, 0xee, 0xe3, 0x56, 0x40, 0xd4, 0xe1, 0xcd,
	0x38, 0x25, 0xb5, 0xf0, 0x62, 0x10, 0x47, 0xef, 0xc3, 0x8c, 0x4e, 0x1e, 0xa4, 0xce, 0xab, 0xd4,
	0x69, 0x15, 0x76, 0xfa, 0x89, 0xb7, 0x61, 0xaa, 0x57, 0xf5, 0x30, 0xa4, 0x2f, 0xc3, 0xe4, 0xc7,
	0x62, 0x32, 0xa9, 0xa8, 0x62, 0xd6, 0xdf, 0x06, 0xc0, 0xe0, 0xc0, 0xa2, 0x05, 0xc8, 0x49, 0xa0,
	0xcd, 0xbe, 0x30, 0xb2, 0xd2, 0xad, 0x7b, 0xe8, 0x26, 0x14, 0x18, 0x91, 0xd7, 0xb7, 0x5c, 0xd2,
	0x97, 0x61, 0x5e, 0x07, 0xea, 0xde, 0xd0, 0xc5, 0x91, 0x3e, 0x73, 0x71, 0xcc, 0x43, 0x96, 0xa9,
	0xda, 0xc9, 0x15, 0x98, 0x78, 0xe8, 0x3a, 0x64, 0x0f, 0x68, 0x4b, 0x56, 0xd2, 0x17, 0x5f, 0xe6,
	0x80, 0xb6, 0xea, 0x1e, 0xfa, 0x18, 0x80, 0x0b, 0xcc, 0x84, 0xe6, 0x74, 0x6e, 0x2c, 0xa7, 0x05,
	0x95, 0x2d, 0xfd, 0x33, 0x62, 0xb8, 0x7e, 0x75, 0x31, 0xac, 0x02, 0xda, 0x8a, 0x83, 0xc3, 0x1d,
	0x12, 0x10, 0x41, 0x7a, 0xbf, 0xff, 0x92, 0x24, 0x79, 0xd0, 0x7b, 0x8f, 0x04, 0xed, 0xac, 0xff,
	0x02, 0x30, 0xa9, 0xc8, 0x6f, 0x10, 0x76, 0xe4, 0xbb, 0x04, 0xbd, 0x36, 0x20, 0xbb, 0xcd, 0x88,
	0xbc, 0x2d, 0xc6, 0xf2, 0x5f, 0x5e, 0x1c, 0x95, 0x51, 0xf7, 0xac, 0xfb, 0x27, 0xa7, 0xe6, 0x0a,
	0x14, 0xfd, 0xb0, 0xcd, 0xf0, 0x86, 0xd6, 0x0a, 0x1a, 0x72, 0x36, 0x5c, 0xd5, 0xe8, 0xf5, 0xef,
	0x7f, 0x7e, 0x9f, 0x2a, 0x5a, 0x59, 0xfd, 0xa8, 0xdb, 0x30, 0x56, 0xd1, 0x1b, 0x03, 0x26, 0x1c,
	0x82, 0x3d, 0x34, 0xa6, 0x41, 0x79, 0x2c, 0x44, 0xeb, 0xc1, 0xc9, 0xa9, 0x79, 0x1b, 0x4a, 0xc3,
	0x5d, 0xbf, 0xf1, 0xbd, 0x6f, 0xd1, 0xcc, 0x70, 0xa4, 0x43, 0x84, 0x02, 0x51, 0x42, 0xd3, 0xc9,
	0xfb, 0xd2, 0xf7, 0xaa, 0x2a, 0xed, 0x8d, 0x01, 0xd9, 0x17, 0x91, 0x77, 0xb5, 0x71, 0xcc, 0x5f,
	0x60, 0xa7, 0x26, 0x9f, 0x8b, 0xd6, 0xf6, 0xc9, 0xa9, 0x79, 0xe7, 0x12, 0x0c, 0x67, 0x66, 0x11,
	0xab, 0x2e, 0x0a, 0xc6, 0xff, 0xca, 0xe7, 0x60, 0xc8, 0x99, 0x48, 0x62, 0x34, 0xa5, 0x63, 0xa7,
	0xf2, 0x36, 0x1c, 0x0f, 0xaf, 0x82, 0xc3, 0x53, 0x3d, 0xf4, 0x38, 0x56, 0xcf, 0x8f, 0xe3, 0x67,
	0x03, 0xa6, 0x07, 0xda, 0xda, 0x3a, 0xae, 0x7b, 0x68, 0x69, 0x34, 0x18, 0x5e, 0xb6, 0x47, 0x25,
	0x5c, 0x14, 0xaa, 0xb5, 0x39, 0x46, 0x34, 0x43, 0x00, 0xe7, 0xad, 0xd9, 0x04, 0xa0, 0x0e, 0x56,
	0x7d, 0x4f, 0xe9, 0xe7, 0x3b, 0x03, 0x26, 0x9e, 0xfa, 0x5c, 0xa0, 0x95, 0xb1, 0x2f, 0xd3, 0xf2,
	0xca, 0x38, 0x5a, 0xb9, 0xf5, 0xc9, 0xc9, 0xa9, 0xb9, 0x74, 0x16, 0xd1, 0x99, 0x21, 0x06, 0x3e,
	0xd7, 0xfa, 0x41, 0xd6, 0x54, 0x82, 0x87, 0x13, 0xcc, 0xdc, 0x7d, 0x89, 0xe5, 0x47, 0x03, 0x32,
	0xea, 0x25, 0x3e, 0x96, 0xb6, 0xbb, 0xa3, 0xdf, 0x1f, 0xc3, 0x8f, 0xf9, 0xda, 0xc9, 0xa9, 0xf9,
	0xde, 0x25, 0x4c, 0xce, 0x0e, 0x47, 0x98, 0xdc, 0xa2, 0xe7, 0x84, 0xe6, 0x12, 0x5c, 0x2a, 0xd6,
	0xa7, 0xf3, 0x27, 0x03, 0x60, 0xc0, 0xc0, 0x55, 0xa6, 0xf5, 0xae, 0x64, 0x3e, 0xb8, 0x3a, 0x99,
	0x83, 0xe1, 0xe9, 0xa0, 0x1c, 0xde, 0x0f, 0x09, 0xc0, 0xe4, 0x46, 0x1a, 0xcf, 0x55, 0x79, 0x9c,
	0x1c, 0xad, 0xad, 0xab, 0xdf, 0x49, 0x0b, 0x16, 0x4a, 0x10, 0xb5, 0xe2, 0xe0, 0x70, 0x4d, 0xaf,
	0x6c, 0x18, 0xab, 0x5b, 0x6b, 0x5f, 0xdd, 0xeb, 0xf8, 0x62, 0x3f, 0x6e, 0xc9, 0x27, 0x6b, 0x55,
	0x36, 0xec, 0xff, 0x03, 0x58, 0xbd, 0xf8, 0xcf, 0x6a, 0x2b, 0xab, 0xce, 0xe1, 0x87, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x94, 0x63, 0x10, 0x5a, 0xc9, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodesServiceClient is the client API for NodesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodesServiceClient interface {
	//
	//Create a node
	//
	//Creates a node and adds it to the Automate node manager.
	//Requires a FQDN or IP address, a user-specified name, and a ssh or winrm credential reference.
	//Useful for creating nodes for the purpose of running compliance scan jobs.
	//
	//Example:
	//```
	//{
	//"name": "my-vagrant-node",
	//"manager":"automate",
	//"target_config": {
	//"backend":"ssh",
	//"host":"localhost",
	//"secrets":["b75195e5-a173-4502-9f59-d949adfe2c38"],
	//"port": 22
	//},
	//"tags": [
	//{ "key":"test-node", "value":"is amazing" }
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:create
	//```
	Create(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Id, error)
	//
	//Read a node
	//
	//Returns the details for a node given the node ID.
	//
	//Authorization Action:
	//```
	//infra:nodes:get
	//```
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error)
	//
	//Update a node
	//
	//This PUT operation overwrites ALL node details and requires the complete set of node details,
	//consisting of a FQDN or IP address, a user-specified name, and the ID for an ssh or winrm credential.
	//Substitute the desired values for the existing node details in the PUT message.
	//
	//Authorization Action:
	//```
	//infra:nodes:update
	//```
	Update(ctx context.Context, in *Node, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	//Delete a node
	//
	//Deletes the node with the node ID.
	//
	//Authorization Action:
	//```
	//infra:nodes:delete
	//```
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	//
	//Bulk delete by ID
	//
	//Deletes a set of nodes given a list of IDs.
	//Invalid IDs will be ignored.
	//
	//Authorization Action:
	//```
	//infra:nodes:delete
	//```
	BulkDeleteById(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*BulkDeleteResponse, error)
	//
	//List and filter nodes
	//
	//Makes a list of nodes.
	//Supports filtering, pagination, and sorting.
	//Adding a filter narrows the list of nodes only those that match the filter or filters.
	//Supported filters:
	//account_id, last_contact, manager_id, manager_type, name, platform_name,
	//platform_release, region, source_id, state, statechange_timerange, status,
	//last_run_timerange, last_scan_timerange, last_run_status, last_scan_status,
	//last_run_penultimate_status, last_scan_penultimate_status
	//
	//Example:
	//```
	//{
	//"filters":[
	//{"key": "last_scan_status", "values": ["FAILED"]},
	//{"key": "last_scan_penultimate_status", "values": ["PASSED"]},
	//{"key": "name", "values": ["MyNode*"]}
	//],
	//"page":1, "per_page":100,
	//"sort":"status", "order":"ASC"
	//}
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Nodes, error)
	//
	//Node status
	//
	//Use this to run an `inspec detect` job on the node, which updates the status to reflect
	//that the node is reachable or unreachable.
	//
	//Authorization Action:
	//```
	//infra:nodes:rerun
	//```
	Rerun(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RerunResponse, error)
	//
	//Bulk delete nodes
	//
	//Deletes a set of nodes that match a filter.
	//Available filters: account_id, last_contact, manager_id, manager_type, name, platform_name,
	//platform_release, region, source_id, state, statechange_timerange, status,
	//last_run_timerange, last_scan_timerange, last_run_status, last_scan_status,
	//last_run_penultimate_status, last_scan_penultimate_status
	//
	//Example:
	//```
	//{"filters": [{"key": "name", "values": ["vj*"]}]}'
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:delete
	//```
	BulkDelete(ctx context.Context, in *Query, opts ...grpc.CallOption) (*BulkDeleteResponse, error)
	//
	//Bulk create nodes
	//
	//Creates multiple nodes from a list of node data.
	//Hosts field is required. Multiple hosts may be defined in this field.
	//
	//Example:
	//```
	//{
	//"name_prefix": "000-my-ssh-node",
	//"manager":"automate",
	//"target_config": {
	//"backend":"ssh",
	//"hosts":["localhost","127.0.0.1"],
	//"secrets":["b75195e5-a173-4502-9f59-d949adfe2c38"],
	//"port": 22
	//},
	//"tags": [
	//{ "key":"test-node", "value":"is-amazing" },
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:create
	//```
	BulkCreate(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Ids, error)
}

type nodesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodesServiceClient(cc grpc.ClientConnInterface) NodesServiceClient {
	return &nodesServiceClient{cc}
}

func (c *nodesServiceClient) Create(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.v1.NodesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.v1.NodesService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) Update(ctx context.Context, in *Node, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.v1.NodesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.v1.NodesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) BulkDeleteById(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*BulkDeleteResponse, error) {
	out := new(BulkDeleteResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.v1.NodesService/BulkDeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.v1.NodesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) Rerun(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RerunResponse, error) {
	out := new(RerunResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.v1.NodesService/Rerun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) BulkDelete(ctx context.Context, in *Query, opts ...grpc.CallOption) (*BulkDeleteResponse, error) {
	out := new(BulkDeleteResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.v1.NodesService/BulkDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) BulkCreate(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/chef.automate.api.nodes.v1.NodesService/BulkCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodesServiceServer is the server API for NodesService service.
type NodesServiceServer interface {
	//
	//Create a node
	//
	//Creates a node and adds it to the Automate node manager.
	//Requires a FQDN or IP address, a user-specified name, and a ssh or winrm credential reference.
	//Useful for creating nodes for the purpose of running compliance scan jobs.
	//
	//Example:
	//```
	//{
	//"name": "my-vagrant-node",
	//"manager":"automate",
	//"target_config": {
	//"backend":"ssh",
	//"host":"localhost",
	//"secrets":["b75195e5-a173-4502-9f59-d949adfe2c38"],
	//"port": 22
	//},
	//"tags": [
	//{ "key":"test-node", "value":"is amazing" }
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:create
	//```
	Create(context.Context, *Node) (*Id, error)
	//
	//Read a node
	//
	//Returns the details for a node given the node ID.
	//
	//Authorization Action:
	//```
	//infra:nodes:get
	//```
	Read(context.Context, *Id) (*Node, error)
	//
	//Update a node
	//
	//This PUT operation overwrites ALL node details and requires the complete set of node details,
	//consisting of a FQDN or IP address, a user-specified name, and the ID for an ssh or winrm credential.
	//Substitute the desired values for the existing node details in the PUT message.
	//
	//Authorization Action:
	//```
	//infra:nodes:update
	//```
	Update(context.Context, *Node) (*empty.Empty, error)
	//
	//Delete a node
	//
	//Deletes the node with the node ID.
	//
	//Authorization Action:
	//```
	//infra:nodes:delete
	//```
	Delete(context.Context, *Id) (*empty.Empty, error)
	//
	//Bulk delete by ID
	//
	//Deletes a set of nodes given a list of IDs.
	//Invalid IDs will be ignored.
	//
	//Authorization Action:
	//```
	//infra:nodes:delete
	//```
	BulkDeleteById(context.Context, *Ids) (*BulkDeleteResponse, error)
	//
	//List and filter nodes
	//
	//Makes a list of nodes.
	//Supports filtering, pagination, and sorting.
	//Adding a filter narrows the list of nodes only those that match the filter or filters.
	//Supported filters:
	//account_id, last_contact, manager_id, manager_type, name, platform_name,
	//platform_release, region, source_id, state, statechange_timerange, status,
	//last_run_timerange, last_scan_timerange, last_run_status, last_scan_status,
	//last_run_penultimate_status, last_scan_penultimate_status
	//
	//Example:
	//```
	//{
	//"filters":[
	//{"key": "last_scan_status", "values": ["FAILED"]},
	//{"key": "last_scan_penultimate_status", "values": ["PASSED"]},
	//{"key": "name", "values": ["MyNode*"]}
	//],
	//"page":1, "per_page":100,
	//"sort":"status", "order":"ASC"
	//}
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:list
	//```
	List(context.Context, *Query) (*Nodes, error)
	//
	//Node status
	//
	//Use this to run an `inspec detect` job on the node, which updates the status to reflect
	//that the node is reachable or unreachable.
	//
	//Authorization Action:
	//```
	//infra:nodes:rerun
	//```
	Rerun(context.Context, *Id) (*RerunResponse, error)
	//
	//Bulk delete nodes
	//
	//Deletes a set of nodes that match a filter.
	//Available filters: account_id, last_contact, manager_id, manager_type, name, platform_name,
	//platform_release, region, source_id, state, statechange_timerange, status,
	//last_run_timerange, last_scan_timerange, last_run_status, last_scan_status,
	//last_run_penultimate_status, last_scan_penultimate_status
	//
	//Example:
	//```
	//{"filters": [{"key": "name", "values": ["vj*"]}]}'
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:delete
	//```
	BulkDelete(context.Context, *Query) (*BulkDeleteResponse, error)
	//
	//Bulk create nodes
	//
	//Creates multiple nodes from a list of node data.
	//Hosts field is required. Multiple hosts may be defined in this field.
	//
	//Example:
	//```
	//{
	//"name_prefix": "000-my-ssh-node",
	//"manager":"automate",
	//"target_config": {
	//"backend":"ssh",
	//"hosts":["localhost","127.0.0.1"],
	//"secrets":["b75195e5-a173-4502-9f59-d949adfe2c38"],
	//"port": 22
	//},
	//"tags": [
	//{ "key":"test-node", "value":"is-amazing" },
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//infra:nodes:create
	//```
	BulkCreate(context.Context, *Nodes) (*Ids, error)
}

// UnimplementedNodesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodesServiceServer struct {
}

func (*UnimplementedNodesServiceServer) Create(ctx context.Context, req *Node) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedNodesServiceServer) Read(ctx context.Context, req *Id) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedNodesServiceServer) Update(ctx context.Context, req *Node) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedNodesServiceServer) Delete(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedNodesServiceServer) BulkDeleteById(ctx context.Context, req *Ids) (*BulkDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteById not implemented")
}
func (*UnimplementedNodesServiceServer) List(ctx context.Context, req *Query) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedNodesServiceServer) Rerun(ctx context.Context, req *Id) (*RerunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rerun not implemented")
}
func (*UnimplementedNodesServiceServer) BulkDelete(ctx context.Context, req *Query) (*BulkDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDelete not implemented")
}
func (*UnimplementedNodesServiceServer) BulkCreate(ctx context.Context, req *Nodes) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreate not implemented")
}

func RegisterNodesServiceServer(s *grpc.Server, srv NodesServiceServer) {
	s.RegisterService(&_NodesService_serviceDesc, srv)
}

func _NodesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.v1.NodesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).Create(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.v1.NodesService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.v1.NodesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).Update(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.v1.NodesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_BulkDeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).BulkDeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.v1.NodesService/BulkDeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).BulkDeleteById(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.v1.NodesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).List(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_Rerun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).Rerun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.v1.NodesService/Rerun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).Rerun(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_BulkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).BulkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.v1.NodesService/BulkDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).BulkDelete(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_BulkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).BulkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.nodes.v1.NodesService/BulkCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).BulkCreate(ctx, req.(*Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.nodes.v1.NodesService",
	HandlerType: (*NodesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NodesService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NodesService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NodesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NodesService_Delete_Handler,
		},
		{
			MethodName: "BulkDeleteById",
			Handler:    _NodesService_BulkDeleteById_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NodesService_List_Handler,
		},
		{
			MethodName: "Rerun",
			Handler:    _NodesService_Rerun_Handler,
		},
		{
			MethodName: "BulkDelete",
			Handler:    _NodesService_BulkDelete_Handler,
		},
		{
			MethodName: "BulkCreate",
			Handler:    _NodesService_BulkCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/nodes/nodes.proto",
}
