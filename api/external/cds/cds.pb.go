// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/cds/cds.proto

package cds

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/api/external/cds/request"
	response "github.com/chef/automate/api/external/cds/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/external/cds/cds.proto", fileDescriptor_5676bc0e222533b1)
}

var fileDescriptor_5676bc0e222533b1 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x3f, 0x4e, 0x33, 0x31,
	0x10, 0xc5, 0x95, 0xef, 0x93, 0x28, 0x56, 0x42, 0xa0, 0x15, 0x88, 0xb0, 0xa2, 0x02, 0x1a, 0x94,
	0xc4, 0x23, 0x41, 0x97, 0x0a, 0x91, 0x0a, 0xc4, 0x09, 0xe8, 0xbc, 0xce, 0xc4, 0xb1, 0xb4, 0xeb,
	0x31, 0x9e, 0x59, 0x01, 0x2d, 0x65, 0x5a, 0xce, 0x92, 0x82, 0x92, 0x33, 0x70, 0x05, 0x0e, 0x82,
	0x76, 0x13, 0x50, 0xfe, 0x2c, 0x85, 0x65, 0xf9, 0xf9, 0x37, 0x4f, 0x33, 0x6f, 0x92, 0x4c, 0x07,
	0x07, 0xf8, 0x2c, 0x18, 0xbd, 0x2e, 0xc0, 0x8c, 0xb9, 0x3e, 0x2a, 0x44, 0x12, 0x4a, 0x0f, 0xcd,
	0x14, 0x27, 0x4a, 0x57, 0x42, 0xa5, 0x16, 0x54, 0x3a, 0x38, 0x65, 0xc6, 0x9c, 0x9d, 0x6d, 0x95,
	0x44, 0x7c, 0xac, 0x90, 0x05, 0x22, 0x91, 0x2c, 0x6a, 0xb3, 0xf3, 0x16, 0x88, 0x03, 0x79, 0xc6,
	0x55, 0xea, 0xc4, 0x12, 0xd9, 0x02, 0xa1, 0x79, 0xe5, 0xd5, 0x04, 0x58, 0x62, 0x65, 0x36, 0x7f,
	0x6b, 0x2b, 0xed, 0x3d, 0x89, 0x16, 0x47, 0x7e, 0xd9, 0x5d, 0xd6, 0x6f, 0x2e, 0x33, 0xb0, 0xe8,
	0x07, 0xfc, 0xa4, 0xad, 0xc5, 0x08, 0x14, 0x1a, 0xa2, 0x85, 0xbe, 0x36, 0x54, 0x06, 0xf2, 0xe8,
	0x85, 0xe1, 0x67, 0xa2, 0x81, 0x8d, 0xc1, 0xc0, 0x8a, 0x4d, 0xa0, 0xc2, 0x99, 0x17, 0x70, 0xba,
	0xdc, 0x76, 0xb8, 0xfc, 0xe8, 0x24, 0xff, 0x47, 0x63, 0x4e, 0xdf, 0x3b, 0xc9, 0xfe, 0xbd, 0x63,
	0x19, 0x91, 0x17, 0xf4, 0x72, 0x2b, 0x58, 0x72, 0xda, 0x53, 0xad, 0x59, 0xa9, 0x65, 0x32, 0x6a,
	0x15, 0xce, 0xfa, 0x7f, 0xc2, 0x8b, 0x84, 0xd6, 0xe8, 0xd3, 0xbb, 0xd9, 0xbc, 0xbb, 0x97, 0xec,
	0x9a, 0x85, 0x36, 0x74, 0xb5, 0x38, 0x9b, 0x77, 0x0f, 0xd2, 0x74, 0x4d, 0x1a, 0x16, 0x8e, 0xe5,
	0xf5, 0xf3, 0xeb, 0xed, 0xdf, 0x71, 0x7a, 0xd4, 0x44, 0x96, 0xa3, 0x68, 0x58, 0x32, 0xd0, 0x30,
	0x37, 0xbd, 0x87, 0x0b, 0xeb, 0x64, 0x5a, 0xe5, 0xca, 0x50, 0x09, 0x75, 0x17, 0xbf, 0x61, 0xc0,
	0xe6, 0xc2, 0xf2, 0x9d, 0x66, 0xee, 0xab, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0xf2, 0xb5,
	0xdd, 0x23, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CdsClient is the client API for Cds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CdsClient interface {
	//
	//ListContentItems
	//
	//Returns a list of metadata for each CDS content. Provides a description and current
	//state of each content item.
	//
	//Authorization Action:
	//```
	//content:items:list
	//```
	ListContentItems(ctx context.Context, in *request.ContentItems, opts ...grpc.CallOption) (*response.ContentItems, error)
}

type cdsClient struct {
	cc grpc.ClientConnInterface
}

func NewCdsClient(cc grpc.ClientConnInterface) CdsClient {
	return &cdsClient{cc}
}

func (c *cdsClient) ListContentItems(ctx context.Context, in *request.ContentItems, opts ...grpc.CallOption) (*response.ContentItems, error) {
	out := new(response.ContentItems)
	err := c.cc.Invoke(ctx, "/chef.automate.api.cds.Cds/ListContentItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CdsServer is the server API for Cds service.
type CdsServer interface {
	//
	//ListContentItems
	//
	//Returns a list of metadata for each CDS content. Provides a description and current
	//state of each content item.
	//
	//Authorization Action:
	//```
	//content:items:list
	//```
	ListContentItems(context.Context, *request.ContentItems) (*response.ContentItems, error)
}

// UnimplementedCdsServer can be embedded to have forward compatible implementations.
type UnimplementedCdsServer struct {
}

func (*UnimplementedCdsServer) ListContentItems(ctx context.Context, req *request.ContentItems) (*response.ContentItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContentItems not implemented")
}

func RegisterCdsServer(s *grpc.Server, srv CdsServer) {
	s.RegisterService(&_Cds_serviceDesc, srv)
}

func _Cds_ListContentItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ContentItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdsServer).ListContentItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.cds.Cds/ListContentItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdsServer).ListContentItems(ctx, req.(*request.ContentItems))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cds_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.cds.Cds",
	HandlerType: (*CdsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListContentItems",
			Handler:    _Cds_ListContentItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/cds/cds.proto",
}
