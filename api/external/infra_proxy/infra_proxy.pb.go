// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/external/infra_proxy/infra_proxy.proto

package infra_proxy

import (
	context "context"
	fmt "fmt"
	version "github.com/chef/automate/api/external/common/version"
	request "github.com/chef/automate/api/external/infra_proxy/request"
	response "github.com/chef/automate/api/external/infra_proxy/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/external/infra_proxy/infra_proxy.proto", fileDescriptor_8898095cc3dd9190)
}

var fileDescriptor_8898095cc3dd9190 = []byte{
	// 1400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcf, 0x6b, 0x24, 0x45,
	0x14, 0xa6, 0x47, 0x58, 0x4d, 0x19, 0x7f, 0x50, 0xea, 0x6e, 0xd2, 0xbb, 0x5e, 0x4a, 0x94, 0x38,
	0xc9, 0x74, 0xcf, 0x64, 0x66, 0xf3, 0x63, 0xa2, 0x21, 0x26, 0x59, 0x87, 0x88, 0xe8, 0x9a, 0xc5,
	0xdf, 0x68, 0xe8, 0xf4, 0xd4, 0xf4, 0x36, 0x3b, 0xd3, 0x35, 0x76, 0x57, 0xc2, 0x86, 0x10, 0x14,
	0xd1, 0x83, 0xb9, 0x88, 0x2c, 0xa2, 0xcb, 0xb2, 0x2a, 0x22, 0x0a, 0x8a, 0x78, 0x0a, 0xfe, 0x09,
	0x1e, 0x16, 0x4f, 0x5e, 0xf4, 0x24, 0x88, 0x78, 0x5f, 0x3c, 0x2a, 0x28, 0xd5, 0xd5, 0x3d, 0x5d,
	0xb3, 0x99, 0xa4, 0xaa, 0x66, 0x76, 0x2e, 0xbb, 0x49, 0xfa, 0x7d, 0xd5, 0xef, 0xfb, 0xbe, 0xf7,
	0xaa, 0xba, 0xaa, 0x40, 0xde, 0x69, 0xfb, 0x36, 0xbe, 0x4c, 0x71, 0x18, 0x38, 0x4d, 0xdb, 0x0f,
	0x1a, 0xa1, 0xb3, 0xd1, 0x0e, 0xc9, 0xe5, 0x1d, 0xf1, 0x67, 0xab, 0x1d, 0x12, 0x4a, 0xe0, 0xc3,
	0xee, 0x45, 0xdc, 0xb0, 0x9c, 0x2d, 0x4a, 0x5a, 0x0e, 0xc5, 0x96, 0xd3, 0xf6, 0x2d, 0x21, 0xc8,
	0x3c, 0xe3, 0x11, 0xe2, 0x35, 0xb1, 0xcd, 0x46, 0x74, 0x82, 0x80, 0x50, 0x87, 0xfa, 0x24, 0x88,
	0x38, 0xd8, 0x9c, 0x3c, 0xf2, 0x45, 0x21, 0x7e, 0x6b, 0x0b, 0x47, 0xd4, 0x26, 0xa1, 0x97, 0x06,
	0x5b, 0xd2, 0xe0, 0x08, 0x87, 0xdb, 0x38, 0x4c, 0xe3, 0x8b, 0xd2, 0x78, 0x97, 0x90, 0x4b, 0x9b,
	0x84, 0x5c, 0x4a, 0x11, 0x53, 0x52, 0x44, 0x48, 0x9a, 0x58, 0x3d, 0x1f, 0xb7, 0xe9, 0xe3, 0x80,
	0xa6, 0xf1, 0xb6, 0x34, 0xbe, 0xee, 0x50, 0x67, 0xd3, 0xe9, 0x10, 0x2e, 0x4b, 0x01, 0x38, 0xd8,
	0xf6, 0x43, 0x12, 0xb4, 0x84, 0xb7, 0xc8, 0x39, 0x04, 0xa4, 0xde, 0xe1, 0x30, 0x2d, 0x8d, 0x6e,
	0x93, 0xa6, 0xef, 0xee, 0x34, 0xfc, 0x8c, 0xf7, 0x71, 0x6f, 0x88, 0xda, 0x24, 0x88, 0xb0, 0xe8,
	0x9a, 0x2d, 0x8f, 0xee, 0xb6, 0xad, 0x24, 0x07, 0xdc, 0xea, 0x5b, 0x41, 0x0e, 0x11, 0x8d, 0x53,
	0x48, 0xa9, 0xdb, 0xb9, 0xa2, 0x1c, 0x70, 0x8b, 0x75, 0x15, 0x39, 0xa2, 0x87, 0x77, 0x0a, 0x3c,
	0x44, 0xf3, 0xca, 0xf2, 0xf0, 0xc3, 0xee, 0x3d, 0xde, 0x05, 0x72, 0x49, 0xab, 0x45, 0x02, 0x9b,
	0xc9, 0xef, 0x67, 0xff, 0x27, 0xa1, 0x4b, 0x2e, 0x69, 0xb5, 0x49, 0xc0, 0x12, 0xb4, 0xd3, 0x06,
	0x2f, 0x78, 0x61, 0xdb, 0xb5, 0xe3, 0xe7, 0x6e, 0xc1, 0xc3, 0x41, 0x81, 0xbf, 0xc1, 0xf6, 0x9d,
	0xd6, 0xe1, 0xfe, 0x9e, 0xbe, 0x39, 0x03, 0xc0, 0x1a, 0xcb, 0xeb, 0x3c, 0x4b, 0x0b, 0xde, 0x30,
	0x00, 0xa8, 0x61, 0xfa, 0x12, 0x7f, 0x0b, 0xac, 0x58, 0x87, 0xe7, 0x0e, 0x9e, 0x90, 0x95, 0x26,
	0x92, 0x84, 0xae, 0x05, 0x0d, 0xb2, 0xce, 0x0b, 0xd2, 0x2c, 0x68, 0xa1, 0xd0, 0x2b, 0xfb, 0x07,
	0x63, 0x63, 0xe0, 0x64, 0xb4, 0x13, 0x51, 0xdc, 0xaa, 0xb2, 0x52, 0xf3, 0x5d, 0x5c, 0x4d, 0x22,
	0xf7, 0x0f, 0xc6, 0x4e, 0xc3, 0xf1, 0xee, 0x67, 0x09, 0xb8, 0xea, 0x61, 0xfa, 0xee, 0x2f, 0x7f,
	0x5e, 0xc9, 0x9d, 0x82, 0x0f, 0xc5, 0x05, 0xb3, 0x5d, 0xe4, 0x12, 0xa7, 0x22, 0xc1, 0x9f, 0x38,
	0x9b, 0x0b, 0xbc, 0x7a, 0x61, 0xc9, 0x3a, 0x76, 0x26, 0xb4, 0x92, 0x86, 0xb2, 0x32, 0x88, 0x39,
	0x2d, 0x85, 0x70, 0x1b, 0x05, 0x0c, 0x5a, 0xdf, 0x3f, 0x18, 0x7b, 0x10, 0xc0, 0x38, 0xac, 0x1a,
	0xff, 0x9b, 0x3c, 0xd9, 0x3f, 0x18, 0x1b, 0x87, 0xa7, 0x0e, 0xff, 0xbd, 0xda, 0xf4, 0xa3, 0x23,
	0x98, 0x24, 0x8d, 0x07, 0x7f, 0x36, 0xc0, 0x48, 0xe7, 0x15, 0xb0, 0xa8, 0x4b, 0xc4, 0x2c, 0x69,
	0xf3, 0x40, 0xaf, 0xb3, 0x74, 0x41, 0xaf, 0x74, 0x77, 0xfd, 0xfa, 0x1e, 0xf3, 0x0c, 0x9e, 0xec,
	0xf1, 0x30, 0x35, 0xe5, 0x0c, 0x34, 0x7b, 0x52, 0xb1, 0x19, 0x1a, 0xfe, 0x6a, 0x80, 0xd1, 0x95,
	0x10, 0x3b, 0x14, 0x27, 0x94, 0xca, 0x8a, 0x94, 0x44, 0x90, 0x59, 0x51, 0x65, 0x25, 0xa2, 0xd0,
	0x1b, 0xc7, 0xf8, 0x73, 0x1a, 0x8e, 0xf7, 0xe0, 0xe4, 0xc6, 0x70, 0xee, 0x10, 0xea, 0xed, 0x50,
	0xfc, 0xf0, 0x8e, 0xaa, 0x91, 0x87, 0x7f, 0x18, 0x60, 0xf4, 0xc5, 0x76, 0x5d, 0x9f, 0x9a, 0x08,
	0x52, 0xa7, 0x26, 0xa2, 0x90, 0x27, 0xf3, 0xac, 0x37, 0xbf, 0xad, 0x78, 0x0c, 0x6e, 0x9b, 0x79,
	0x8c, 0x6d, 0x19, 0xc9, 0xdf, 0x0c, 0x30, 0xba, 0x8a, 0x9b, 0x58, 0x9b, 0xa4, 0x08, 0x52, 0x27,
	0x29, 0xa2, 0xd0, 0x9b, 0xfd, 0x91, 0xac, 0xc7, 0x63, 0x70, 0x92, 0xf9, 0xe3, 0x6a, 0xf3, 0x77,
	0x03, 0xdc, 0x59, 0xc3, 0xf4, 0xf9, 0xd0, 0x8b, 0xa0, 0xa5, 0xde, 0x69, 0x2c, 0xde, 0xb4, 0x35,
	0xfa, 0x8c, 0x01, 0x10, 0x2b, 0xba, 0x47, 0xc1, 0x23, 0xbd, 0xc8, 0xf0, 0xa4, 0x36, 0xfc, 0xfa,
	0x5e, 0x95, 0xad, 0xd6, 0xd2, 0x8e, 0x9b, 0x80, 0x8f, 0x1d, 0xc1, 0x2a, 0x1b, 0x29, 0x5e, 0xf7,
	0xe1, 0x5f, 0x06, 0x38, 0xc1, 0x13, 0x80, 0x05, 0x2d, 0x82, 0xa6, 0xa5, 0xc7, 0x0f, 0x31, 0x3b,
	0xf2, 0x60, 0x42, 0x81, 0x9e, 0xda, 0xac, 0x52, 0x80, 0x93, 0x6a, 0x1c, 0xb9, 0x95, 0x37, 0x0d,
	0x30, 0xc2, 0x7b, 0x9f, 0x71, 0x2d, 0x6a, 0xcd, 0x31, 0x8c, 0x6e, 0x49, 0x6f, 0x82, 0x61, 0x8c,
	0xdf, 0xd6, 0x31, 0x54, 0xda, 0x8e, 0x13, 0x48, 0xd1, 0xd3, 0xac, 0x35, 0xff, 0x35, 0xc0, 0x08,
	0x9f, 0x14, 0x74, 0x38, 0x77, 0x10, 0xea, 0x9c, 0x3b, 0x10, 0xf4, 0x81, 0xa1, 0x6d, 0xb3, 0x94,
	0x79, 0xc1, 0xd4, 0x71, 0x3a, 0xa3, 0xff, 0xb7, 0x01, 0x46, 0xf8, 0x74, 0xa1, 0x43, 0xbf, 0x83,
	0x50, 0xa7, 0xdf, 0x81, 0xa0, 0x77, 0x86, 0x41, 0x3f, 0xaf, 0x55, 0xe8, 0x1f, 0xe6, 0xc0, 0x68,
	0x0d, 0xd3, 0x95, 0xf4, 0xb3, 0x5b, 0xbd, 0xd6, 0x53, 0x84, 0x46, 0xad, 0xa7, 0x10, 0x74, 0x95,
	0x11, 0x9f, 0x03, 0x33, 0x4a, 0xc4, 0x49, 0xe8, 0xc5, 0xbf, 0x75, 0xb6, 0x06, 0xd2, 0x66, 0x5f,
	0x80, 0xf3, 0xaa, 0x1a, 0x24, 0x83, 0x67, 0xfb, 0x0e, 0xf8, 0x5d, 0x0e, 0x3c, 0x20, 0x28, 0x92,
	0x7c, 0x33, 0x46, 0x70, 0x56, 0x53, 0x98, 0x14, 0x68, 0xce, 0xe9, 0xea, 0x93, 0x22, 0xd1, 0x17,
	0xc3, 0x95, 0x69, 0x19, 0x2e, 0xf5, 0x2d, 0x93, 0xbd, 0x1b, 0x38, 0x2d, 0xbc, 0x07, 0xaf, 0xe7,
	0xc0, 0xdd, 0x82, 0x5a, 0xd0, 0xd6, 0x54, 0xc9, 0x2c, 0xea, 0xaa, 0x83, 0xbe, 0x1d, 0xae, 0x2a,
	0xcf, 0xc2, 0x67, 0x06, 0x55, 0xc5, 0xde, 0x4d, 0x36, 0x12, 0x7b, 0xf0, 0x46, 0x0e, 0x9c, 0x14,
	0xf4, 0x79, 0xda, 0x6f, 0xe2, 0x15, 0x12, 0x50, 0x1c, 0x50, 0x58, 0xd5, 0x94, 0x4a, 0xc0, 0x9a,
	0x0b, 0xba, 0xaa, 0x09, 0x60, 0xf4, 0xe3, 0x70, 0x05, 0x7c, 0x15, 0xbe, 0x7c, 0xfb, 0x04, 0xb4,
	0xd9, 0x06, 0xb7, 0xe0, 0x26, 0x92, 0xfd, 0x63, 0x80, 0xbb, 0x6a, 0x98, 0xae, 0xb3, 0x1d, 0x3f,
	0x9c, 0x52, 0xd4, 0x2f, 0x8e, 0x36, 0x0b, 0xaa, 0x8a, 0xc5, 0xe1, 0xe8, 0x23, 0xa6, 0x51, 0x05,
	0x4c, 0x6b, 0x69, 0x14, 0x9f, 0x44, 0x48, 0xf5, 0x99, 0x85, 0x67, 0x75, 0xf5, 0x89, 0x07, 0x86,
	0xff, 0xf1, 0xef, 0x4b, 0x96, 0x20, 0x9c, 0xd4, 0x20, 0x6f, 0x4e, 0xe9, 0x70, 0x47, 0x9f, 0x0e,
	0x8f, 0xfa, 0x22, 0x7c, 0xa2, 0x2f, 0xea, 0xe9, 0x6c, 0xf3, 0x7e, 0x0e, 0x00, 0xbe, 0x7c, 0x0e,
	0x5b, 0x84, 0x6b, 0x83, 0x88, 0x20, 0x5d, 0xa4, 0x17, 0xf3, 0x83, 0xeb, 0xc0, 0x66, 0x15, 0x7e,
	0x94, 0xa5, 0xbc, 0xd9, 0x48, 0xe2, 0xd5, 0x37, 0x1b, 0x09, 0x00, 0x7d, 0xcc, 0xd4, 0x98, 0x01,
	0x15, 0xbd, 0x19, 0x83, 0x83, 0xa5, 0x45, 0x31, 0x0f, 0x67, 0xb5, 0xe7, 0x8b, 0x84, 0xf8, 0x7b,
	0xb9, 0xf8, 0x74, 0x83, 0xa7, 0xa9, 0xbc, 0x25, 0xe1, 0xe1, 0xea, 0x5b, 0x12, 0x1e, 0x8f, 0x3e,
	0x61, 0x22, 0x94, 0x00, 0x4f, 0xb2, 0x1a, 0xdd, 0x36, 0xfe, 0x4b, 0x70, 0xb1, 0x4f, 0xfe, 0x69,
	0x39, 0x5c, 0xe1, 0x8b, 0xf0, 0xaa, 0x43, 0x9d, 0x65, 0xc7, 0x8b, 0x94, 0x17, 0xe1, 0x14, 0xa0,
	0xbe, 0x08, 0xa7, 0x88, 0xfe, 0x3e, 0x4d, 0xea, 0x0e, 0x75, 0x36, 0x36, 0x1d, 0x6f, 0x28, 0x9f,
	0x26, 0x9d, 0xc1, 0x53, 0x55, 0xae, 0xe5, 0xc0, 0xbd, 0x99, 0x2a, 0x6b, 0x14, 0xb7, 0x94, 0x1b,
	0x25, 0xc1, 0xa8, 0x37, 0x4a, 0x02, 0x40, 0xdf, 0x0c, 0x57, 0x96, 0x35, 0x58, 0x1b, 0x54, 0x16,
	0x7b, 0xd7, 0xa7, 0xb8, 0xb5, 0x07, 0x3f, 0xcb, 0x81, 0xfb, 0x6a, 0x98, 0x9e, 0x13, 0x8e, 0xaa,
	0x95, 0xcf, 0x62, 0x44, 0x90, 0xfa, 0x59, 0x8c, 0x88, 0x42, 0x9f, 0x33, 0xa1, 0x16, 0xc0, 0xbc,
	0x96, 0x50, 0xe2, 0xb9, 0xfa, 0x30, 0xd6, 0x1a, 0x71, 0x7c, 0xf8, 0x25, 0x2f, 0x1f, 0x21, 0x6b,
	0x38, 0xad, 0xaf, 0x8f, 0x59, 0xee, 0x43, 0x1e, 0xf4, 0xf5, 0xd0, 0xd5, 0x39, 0x07, 0x57, 0x06,
	0x51, 0x27, 0xed, 0xb1, 0x1f, 0x72, 0xe0, 0xfe, 0x1a, 0xa6, 0x4f, 0x35, 0x1a, 0xd8, 0xa5, 0xb8,
	0xfe, 0x1c, 0xa9, 0xe3, 0x08, 0x56, 0x14, 0x65, 0xea, 0x42, 0x99, 0x67, 0x55, 0x85, 0xea, 0x82,
	0xa1, 0xef, 0xfb, 0x59, 0xa8, 0xe3, 0xab, 0x16, 0xa9, 0x46, 0x17, 0xe0, 0x0b, 0xba, 0x1a, 0x39,
	0x49, 0x6e, 0x85, 0xf8, 0x0d, 0xf6, 0x2e, 0xa3, 0xb4, 0x41, 0x77, 0xda, 0xac, 0xef, 0xb8, 0x62,
	0x57, 0x79, 0x59, 0x9d, 0xcf, 0x6e, 0x6f, 0x94, 0xcb, 0x4a, 0xc0, 0xa8, 0x97, 0x95, 0x00, 0x42,
	0xd7, 0x99, 0x56, 0x55, 0x30, 0xa7, 0xa5, 0x95, 0x70, 0xcf, 0x24, 0x55, 0xec, 0x49, 0xb8, 0xa0,
	0xab, 0x98, 0x30, 0x3c, 0xdb, 0x4c, 0xde, 0xd3, 0xa5, 0x8d, 0xf2, 0xcd, 0x4b, 0x06, 0x51, 0xbf,
	0x79, 0xc9, 0x30, 0xe8, 0xab, 0x61, 0x0b, 0xb3, 0x0a, 0x97, 0x07, 0x10, 0x26, 0xa9, 0x9d, 0xe5,
	0xf2, 0x6b, 0x25, 0xcf, 0xa7, 0x17, 0xb7, 0x36, 0x2d, 0x97, 0xb4, 0x6c, 0x46, 0xb3, 0x73, 0x79,
	0x77, 0xe4, 0xc5, 0xe7, 0xe6, 0x89, 0xf8, 0xbe, 0xae, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc7, 0x78, 0x2f, 0xd0, 0xfa, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InfraProxyClient is the client API for InfraProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfraProxyClient interface {
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error)
	GetServer(ctx context.Context, in *request.GetServer, opts ...grpc.CallOption) (*response.GetServer, error)
	CreateServer(ctx context.Context, in *request.CreateServer, opts ...grpc.CallOption) (*response.CreateServer, error)
	UpdateServer(ctx context.Context, in *request.UpdateServer, opts ...grpc.CallOption) (*response.UpdateServer, error)
	DeleteServer(ctx context.Context, in *request.DeleteServer, opts ...grpc.CallOption) (*response.DeleteServer, error)
	GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error)
	GetOrg(ctx context.Context, in *request.GetOrg, opts ...grpc.CallOption) (*response.GetOrg, error)
	CreateOrg(ctx context.Context, in *request.CreateOrg, opts ...grpc.CallOption) (*response.CreateOrg, error)
	UpdateOrg(ctx context.Context, in *request.UpdateOrg, opts ...grpc.CallOption) (*response.UpdateOrg, error)
	DeleteOrg(ctx context.Context, in *request.DeleteOrg, opts ...grpc.CallOption) (*response.DeleteOrg, error)
	GetCookbooks(ctx context.Context, in *request.Cookbooks, opts ...grpc.CallOption) (*response.Cookbooks, error)
	GetCookbookVersions(ctx context.Context, in *request.CookbookVersions, opts ...grpc.CallOption) (*response.CookbookVersions, error)
	GetCookbook(ctx context.Context, in *request.Cookbook, opts ...grpc.CallOption) (*response.Cookbook, error)
	GetCookbookFileContent(ctx context.Context, in *request.CookbookFileContent, opts ...grpc.CallOption) (*response.CookbookFileContent, error)
	GetRoles(ctx context.Context, in *request.Roles, opts ...grpc.CallOption) (*response.Roles, error)
	GetRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error)
	DeleteRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error)
	GetClients(ctx context.Context, in *request.Clients, opts ...grpc.CallOption) (*response.Clients, error)
	GetClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error)
	GetDataBags(ctx context.Context, in *request.DataBags, opts ...grpc.CallOption) (*response.DataBags, error)
	GetDataBagItem(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error)
	GetEnvironments(ctx context.Context, in *request.Environments, opts ...grpc.CallOption) (*response.Environments, error)
	GetEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error)
	GetAffectedNodes(ctx context.Context, in *request.AffectedNodes, opts ...grpc.CallOption) (*response.AffectedNodes, error)
	GetPolicyfiles(ctx context.Context, in *request.Policyfiles, opts ...grpc.CallOption) (*response.Policyfiles, error)
	GetPolicyfile(ctx context.Context, in *request.Policyfile, opts ...grpc.CallOption) (*response.Policyfile, error)
}

type infraProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewInfraProxyClient(cc grpc.ClientConnInterface) InfraProxyClient {
	return &infraProxyClient{cc}
}

func (c *infraProxyClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error) {
	out := new(response.GetServers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetServer(ctx context.Context, in *request.GetServer, opts ...grpc.CallOption) (*response.GetServer, error) {
	out := new(response.GetServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateServer(ctx context.Context, in *request.CreateServer, opts ...grpc.CallOption) (*response.CreateServer, error) {
	out := new(response.CreateServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateServer(ctx context.Context, in *request.UpdateServer, opts ...grpc.CallOption) (*response.UpdateServer, error) {
	out := new(response.UpdateServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteServer(ctx context.Context, in *request.DeleteServer, opts ...grpc.CallOption) (*response.DeleteServer, error) {
	out := new(response.DeleteServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error) {
	out := new(response.GetOrgs)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrg(ctx context.Context, in *request.GetOrg, opts ...grpc.CallOption) (*response.GetOrg, error) {
	out := new(response.GetOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateOrg(ctx context.Context, in *request.CreateOrg, opts ...grpc.CallOption) (*response.CreateOrg, error) {
	out := new(response.CreateOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateOrg(ctx context.Context, in *request.UpdateOrg, opts ...grpc.CallOption) (*response.UpdateOrg, error) {
	out := new(response.UpdateOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteOrg(ctx context.Context, in *request.DeleteOrg, opts ...grpc.CallOption) (*response.DeleteOrg, error) {
	out := new(response.DeleteOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbooks(ctx context.Context, in *request.Cookbooks, opts ...grpc.CallOption) (*response.Cookbooks, error) {
	out := new(response.Cookbooks)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbookVersions(ctx context.Context, in *request.CookbookVersions, opts ...grpc.CallOption) (*response.CookbookVersions, error) {
	out := new(response.CookbookVersions)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbook(ctx context.Context, in *request.Cookbook, opts ...grpc.CallOption) (*response.Cookbook, error) {
	out := new(response.Cookbook)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbookFileContent(ctx context.Context, in *request.CookbookFileContent, opts ...grpc.CallOption) (*response.CookbookFileContent, error) {
	out := new(response.CookbookFileContent)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRoles(ctx context.Context, in *request.Roles, opts ...grpc.CallOption) (*response.Roles, error) {
	out := new(response.Roles)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetClients(ctx context.Context, in *request.Clients, opts ...grpc.CallOption) (*response.Clients, error) {
	out := new(response.Clients)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error) {
	out := new(response.Client)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetDataBags(ctx context.Context, in *request.DataBags, opts ...grpc.CallOption) (*response.DataBags, error) {
	out := new(response.DataBags)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetDataBags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetDataBagItem(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error) {
	out := new(response.DataBag)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetEnvironments(ctx context.Context, in *request.Environments, opts ...grpc.CallOption) (*response.Environments, error) {
	out := new(response.Environments)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetAffectedNodes(ctx context.Context, in *request.AffectedNodes, opts ...grpc.CallOption) (*response.AffectedNodes, error) {
	out := new(response.AffectedNodes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetAffectedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicyfiles(ctx context.Context, in *request.Policyfiles, opts ...grpc.CallOption) (*response.Policyfiles, error) {
	out := new(response.Policyfiles)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicyfile(ctx context.Context, in *request.Policyfile, opts ...grpc.CallOption) (*response.Policyfile, error) {
	out := new(response.Policyfile)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraProxyServer is the server API for InfraProxy service.
type InfraProxyServer interface {
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	GetServers(context.Context, *request.GetServers) (*response.GetServers, error)
	GetServer(context.Context, *request.GetServer) (*response.GetServer, error)
	CreateServer(context.Context, *request.CreateServer) (*response.CreateServer, error)
	UpdateServer(context.Context, *request.UpdateServer) (*response.UpdateServer, error)
	DeleteServer(context.Context, *request.DeleteServer) (*response.DeleteServer, error)
	GetOrgs(context.Context, *request.GetOrgs) (*response.GetOrgs, error)
	GetOrg(context.Context, *request.GetOrg) (*response.GetOrg, error)
	CreateOrg(context.Context, *request.CreateOrg) (*response.CreateOrg, error)
	UpdateOrg(context.Context, *request.UpdateOrg) (*response.UpdateOrg, error)
	DeleteOrg(context.Context, *request.DeleteOrg) (*response.DeleteOrg, error)
	GetCookbooks(context.Context, *request.Cookbooks) (*response.Cookbooks, error)
	GetCookbookVersions(context.Context, *request.CookbookVersions) (*response.CookbookVersions, error)
	GetCookbook(context.Context, *request.Cookbook) (*response.Cookbook, error)
	GetCookbookFileContent(context.Context, *request.CookbookFileContent) (*response.CookbookFileContent, error)
	GetRoles(context.Context, *request.Roles) (*response.Roles, error)
	GetRole(context.Context, *request.Role) (*response.Role, error)
	DeleteRole(context.Context, *request.Role) (*response.Role, error)
	GetClients(context.Context, *request.Clients) (*response.Clients, error)
	GetClient(context.Context, *request.Client) (*response.Client, error)
	GetDataBags(context.Context, *request.DataBags) (*response.DataBags, error)
	GetDataBagItem(context.Context, *request.DataBag) (*response.DataBag, error)
	GetEnvironments(context.Context, *request.Environments) (*response.Environments, error)
	GetEnvironment(context.Context, *request.Environment) (*response.Environment, error)
	GetAffectedNodes(context.Context, *request.AffectedNodes) (*response.AffectedNodes, error)
	GetPolicyfiles(context.Context, *request.Policyfiles) (*response.Policyfiles, error)
	GetPolicyfile(context.Context, *request.Policyfile) (*response.Policyfile, error)
}

// UnimplementedInfraProxyServer can be embedded to have forward compatible implementations.
type UnimplementedInfraProxyServer struct {
}

func (*UnimplementedInfraProxyServer) GetVersion(ctx context.Context, req *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedInfraProxyServer) GetServers(ctx context.Context, req *request.GetServers) (*response.GetServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (*UnimplementedInfraProxyServer) GetServer(ctx context.Context, req *request.GetServer) (*response.GetServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (*UnimplementedInfraProxyServer) CreateServer(ctx context.Context, req *request.CreateServer) (*response.CreateServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateServer(ctx context.Context, req *request.UpdateServer) (*response.UpdateServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteServer(ctx context.Context, req *request.DeleteServer) (*response.DeleteServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrgs(ctx context.Context, req *request.GetOrgs) (*response.GetOrgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgs not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrg(ctx context.Context, req *request.GetOrg) (*response.GetOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}
func (*UnimplementedInfraProxyServer) CreateOrg(ctx context.Context, req *request.CreateOrg) (*response.CreateOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateOrg(ctx context.Context, req *request.UpdateOrg) (*response.UpdateOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteOrg(ctx context.Context, req *request.DeleteOrg) (*response.DeleteOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrg not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbooks(ctx context.Context, req *request.Cookbooks) (*response.Cookbooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbooks not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbookVersions(ctx context.Context, req *request.CookbookVersions) (*response.CookbookVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbookVersions not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbook(ctx context.Context, req *request.Cookbook) (*response.Cookbook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbook not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbookFileContent(ctx context.Context, req *request.CookbookFileContent) (*response.CookbookFileContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbookFileContent not implemented")
}
func (*UnimplementedInfraProxyServer) GetRoles(ctx context.Context, req *request.Roles) (*response.Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (*UnimplementedInfraProxyServer) GetRole(ctx context.Context, req *request.Role) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteRole(ctx context.Context, req *request.Role) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedInfraProxyServer) GetClients(ctx context.Context, req *request.Clients) (*response.Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (*UnimplementedInfraProxyServer) GetClient(ctx context.Context, req *request.Client) (*response.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (*UnimplementedInfraProxyServer) GetDataBags(ctx context.Context, req *request.DataBags) (*response.DataBags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBags not implemented")
}
func (*UnimplementedInfraProxyServer) GetDataBagItem(ctx context.Context, req *request.DataBag) (*response.DataBag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) GetEnvironments(ctx context.Context, req *request.Environments) (*response.Environments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironments not implemented")
}
func (*UnimplementedInfraProxyServer) GetEnvironment(ctx context.Context, req *request.Environment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) GetAffectedNodes(ctx context.Context, req *request.AffectedNodes) (*response.AffectedNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAffectedNodes not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicyfiles(ctx context.Context, req *request.Policyfiles) (*response.Policyfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyfiles not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicyfile(ctx context.Context, req *request.Policyfile) (*response.Policyfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyfile not implemented")
}

func RegisterInfraProxyServer(s *grpc.Server, srv InfraProxyServer) {
	s.RegisterService(&_InfraProxy_serviceDesc, srv)
}

func _InfraProxy_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServers(ctx, req.(*request.GetServers))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServer(ctx, req.(*request.GetServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateServer(ctx, req.(*request.CreateServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateServer(ctx, req.(*request.UpdateServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteServer(ctx, req.(*request.DeleteServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetOrgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrgs(ctx, req.(*request.GetOrgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrg(ctx, req.(*request.GetOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateOrg(ctx, req.(*request.CreateOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateOrg(ctx, req.(*request.UpdateOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteOrg(ctx, req.(*request.DeleteOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Cookbooks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbooks(ctx, req.(*request.Cookbooks))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbookVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CookbookVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbookVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbookVersions(ctx, req.(*request.CookbookVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Cookbook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbook(ctx, req.(*request.Cookbook))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbookFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CookbookFileContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbookFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbookFileContent(ctx, req.(*request.CookbookFileContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Roles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRoles(ctx, req.(*request.Roles))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRole(ctx, req.(*request.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteRole(ctx, req.(*request.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Clients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetClients(ctx, req.(*request.Clients))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetClient(ctx, req.(*request.Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetDataBags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetDataBags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetDataBags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetDataBags(ctx, req.(*request.DataBags))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetDataBagItem(ctx, req.(*request.DataBag))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetEnvironments(ctx, req.(*request.Environments))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetEnvironment(ctx, req.(*request.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetAffectedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.AffectedNodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetAffectedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetAffectedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetAffectedNodes(ctx, req.(*request.AffectedNodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicyfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Policyfiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicyfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicyfiles(ctx, req.(*request.Policyfiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicyfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Policyfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicyfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicyfile(ctx, req.(*request.Policyfile))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfraProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.infra_proxy.InfraProxy",
	HandlerType: (*InfraProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _InfraProxy_GetVersion_Handler,
		},
		{
			MethodName: "GetServers",
			Handler:    _InfraProxy_GetServers_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _InfraProxy_GetServer_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _InfraProxy_CreateServer_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _InfraProxy_UpdateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _InfraProxy_DeleteServer_Handler,
		},
		{
			MethodName: "GetOrgs",
			Handler:    _InfraProxy_GetOrgs_Handler,
		},
		{
			MethodName: "GetOrg",
			Handler:    _InfraProxy_GetOrg_Handler,
		},
		{
			MethodName: "CreateOrg",
			Handler:    _InfraProxy_CreateOrg_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _InfraProxy_UpdateOrg_Handler,
		},
		{
			MethodName: "DeleteOrg",
			Handler:    _InfraProxy_DeleteOrg_Handler,
		},
		{
			MethodName: "GetCookbooks",
			Handler:    _InfraProxy_GetCookbooks_Handler,
		},
		{
			MethodName: "GetCookbookVersions",
			Handler:    _InfraProxy_GetCookbookVersions_Handler,
		},
		{
			MethodName: "GetCookbook",
			Handler:    _InfraProxy_GetCookbook_Handler,
		},
		{
			MethodName: "GetCookbookFileContent",
			Handler:    _InfraProxy_GetCookbookFileContent_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _InfraProxy_GetRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _InfraProxy_GetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _InfraProxy_DeleteRole_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _InfraProxy_GetClients_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _InfraProxy_GetClient_Handler,
		},
		{
			MethodName: "GetDataBags",
			Handler:    _InfraProxy_GetDataBags_Handler,
		},
		{
			MethodName: "GetDataBagItem",
			Handler:    _InfraProxy_GetDataBagItem_Handler,
		},
		{
			MethodName: "GetEnvironments",
			Handler:    _InfraProxy_GetEnvironments_Handler,
		},
		{
			MethodName: "GetEnvironment",
			Handler:    _InfraProxy_GetEnvironment_Handler,
		},
		{
			MethodName: "GetAffectedNodes",
			Handler:    _InfraProxy_GetAffectedNodes_Handler,
		},
		{
			MethodName: "GetPolicyfiles",
			Handler:    _InfraProxy_GetPolicyfiles_Handler,
		},
		{
			MethodName: "GetPolicyfile",
			Handler:    _InfraProxy_GetPolicyfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/external/infra_proxy/infra_proxy.proto",
}
