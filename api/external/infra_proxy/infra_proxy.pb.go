// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: external/infra_proxy/infra_proxy.proto

package infra_proxy

import (
	context "context"
	_ "github.com/chef/automate/api/external/annotations/iam"
	request "github.com/chef/automate/api/external/infra_proxy/request"
	response "github.com/chef/automate/api/external/infra_proxy/response"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_external_infra_proxy_infra_proxy_proto protoreflect.FileDescriptor

var file_external_infra_proxy_infra_proxy_proto_rawDesc = []byte{
	0x0a, 0x26, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73,
	0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0x86, 0x8e, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0xc7, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x8a, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x8a, 0xb5, 0x18,
	0x19, 0x12, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xee, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x8a, 0xb5, 0x18, 0x14,
	0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x8a, 0xb5, 0x18, 0x18, 0x12, 0x16, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x67, 0x65, 0x74,
	0x92, 0x41, 0x08, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0xea, 0x01, 0x0a, 0x10,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x75, 0x69, 0x4b, 0x65, 0x79,
	0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x75, 0x69, 0x4b, 0x65, 0x79, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x75, 0x69,
	0x4b, 0x65, 0x79, 0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x8a, 0xb5, 0x18, 0x18,
	0x12, 0x16, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xe5, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x75, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x75, 0x69, 0x4b,
	0x65, 0x79, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x75, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x8a, 0xb5, 0x18, 0x1b, 0x12, 0x19, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0xcd, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x1a, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18, 0x19, 0x0a, 0x17, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a,
	0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18, 0x18, 0x12, 0x16, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x67, 0x65, 0x74,
	0x12, 0xd8, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x5d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x8a, 0xb5, 0x18, 0x1b,
	0x12, 0x19, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xe2, 0x01, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a,
	0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x19, 0x0a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x69, 0x64,
	0x7d, 0x8a, 0xb5, 0x18, 0x1b, 0x12, 0x19, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0xd9, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x5e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x8a, 0xb5, 0x18, 0x19, 0x0a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18,
	0x1b, 0x12, 0x19, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xe4, 0x01, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x25, 0x0a, 0x23, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72,
	0x67, 0x73, 0x8a, 0xb5, 0x18, 0x1d, 0x12, 0x1b, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x3a, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0xeb, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x12, 0x2d,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x1a, 0x2e, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x22, 0x81, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18, 0x2a, 0x0a, 0x28, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x69, 0x64,
	0x7d, 0x8a, 0xb5, 0x18, 0x1c, 0x12, 0x1a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x3a, 0x67, 0x65,
	0x74, 0x12, 0x81, 0x02, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x12,
	0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5,
	0x18, 0x25, 0x0a, 0x23, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x1f, 0x12, 0x1d, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f,
	0x72, 0x67, 0x73, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x8b, 0x02, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x22, 0x98, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x1a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x2a, 0x0a, 0x28, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a,
	0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73,
	0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18, 0x1f, 0x12, 0x1d, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67,
	0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0xf7, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x22, 0x84, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a,
	0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18, 0x2a,
	0x0a, 0x28, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18, 0x1f, 0x12, 0x1d,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xa6, 0x02,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x1a, 0x38, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x9e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x1a, 0x35,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x2d, 0x6b, 0x65, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5,
	0x18, 0x2a, 0x0a, 0x28, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x69, 0x64, 0x7d, 0x8a, 0xb5, 0x18, 0x1b,
	0x12, 0x19, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x92, 0x41, 0x08, 0x0a, 0x06,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0xa2, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x39, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x73, 0x1a, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4f, 0x72, 0x67, 0x73, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6f, 0x72, 0x67, 0x73,
	0x8a, 0xb5, 0x18, 0x30, 0x0a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x6f, 0x72, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x18, 0x12, 0x16, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x67, 0x65, 0x74,
	0x92, 0x41, 0x08, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x9d, 0x02, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x30, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x1a, 0x31,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x22, 0xa7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6f, 0x6b,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x8a, 0xb5, 0x18, 0x38, 0x0a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x8a, 0xb5, 0x18, 0x26, 0x12, 0x24, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x43, 0x6f, 0x6f,
	0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xb8, 0x02, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6f, 0x6b,
	0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x38, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12,
	0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x8a, 0xb5, 0x18, 0x38, 0x0a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x8a, 0xb5, 0x18,
	0x25, 0x12, 0x23, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xaa, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0xb7, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4c, 0x12, 0x4a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x8a, 0xb5,
	0x18, 0x38, 0x0a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x8a, 0xb5, 0x18, 0x25, 0x12, 0x23,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x3a,
	0x67, 0x65, 0x74, 0x12, 0xd8, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62,
	0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59,
	0x12, 0x57, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x38, 0x0a, 0x36, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72,
	0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x63, 0x6f, 0x6f, 0x6b,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x8a, 0xb5, 0x18, 0x25, 0x12, 0x23, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67,
	0x73, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0x85,
	0x02, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67,
	0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x8a, 0xb5, 0x18, 0x22, 0x12, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x88, 0x02, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a,
	0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xa1, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x21,
	0x12, 0x1f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x67, 0x65,
	0x74, 0x12, 0xc3, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x75, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb7, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12, 0x52, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f,
	0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xad, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x38, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xae, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12,
	0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f,
	0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0x96, 0x02, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xa6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x22, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a,
	0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x7d, 0x3a, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x24, 0x12, 0x22, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x4f, 0x72, 0x67, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x8e, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x2c, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xa4, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3e, 0x2a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x24, 0x12, 0x22, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x9d, 0x02, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x1a, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x1a, 0x3c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01,
	0x2a, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x24, 0x12, 0x22, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x8f, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x9f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x36, 0x0a, 0x34, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18,
	0x22, 0x12, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x3a,
	0x67, 0x65, 0x74, 0x12, 0x8e, 0x02, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x8a, 0xb5, 0x18, 0x31, 0x0a, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xb5,
	0x18, 0x22, 0x12, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x3a, 0x67, 0x65, 0x74, 0x12, 0xa2, 0x02, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x22, 0xa6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x31, 0x0a,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a,
	0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x8a, 0xb5, 0x18, 0x25, 0x12, 0x23, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x94, 0x02, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x40, 0x2a, 0x3e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x8a, 0xb5, 0x18, 0x31, 0x0a, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x25, 0x12, 0x23, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f,
	0x72, 0x67, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0xad, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xb3, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x46, 0x1a, 0x44, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a,
	0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x31, 0x0a, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x25, 0x12, 0x23, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f,
	0x72, 0x67, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x98, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x73,
	0x12, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67,
	0x73, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x61, 0x67, 0x73, 0x22, 0xa5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x62, 0x61, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x38, 0x0a, 0x36, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a,
	0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73,
	0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x61, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x24, 0x12, 0x22, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xaf, 0x02, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb0, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x67, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x8a, 0xb5, 0x18, 0x38, 0x0a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x67,
	0x73, 0x8a, 0xb5, 0x18, 0x28, 0x12, 0x26, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x61, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xb3, 0x02,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xb7, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x49, 0x12, 0x47, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x7d, 0x8a, 0xb5, 0x18, 0x38, 0x0a,
	0x36, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x62, 0x61, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x28, 0x12, 0x26, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f,
	0x72, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x3a,
	0x67, 0x65, 0x74, 0x12, 0xb0, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x61, 0x67, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x1a, 0x35, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x61, 0x67, 0x22, 0xb1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x39, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x62, 0x61, 0x67, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a,
	0xb5, 0x18, 0x38, 0x0a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x27, 0x12,
	0x25, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x73, 0x3a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xc7, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x22, 0xbc, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x22, 0x40, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x62, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x38, 0x0a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x67,
	0x73, 0x8a, 0xb5, 0x18, 0x2b, 0x12, 0x29, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x61, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0xa2, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x61, 0x67, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x61, 0x67, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x61, 0x67, 0x22, 0xaf, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x2a, 0x40, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x62, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x8a, 0xb5,
	0x18, 0x38, 0x0a, 0x36, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x27, 0x12, 0x25,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x73, 0x3a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xb9, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x1a,
	0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x22, 0xba, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x2a, 0x47, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x7b, 0x69, 0x74, 0x65, 0x6d, 0x7d, 0x8a, 0xb5, 0x18, 0x38, 0x0a, 0x36, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a,
	0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61,
	0x67, 0x73, 0x8a, 0xb5, 0x18, 0x2b, 0x12, 0x29, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x61, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0xd1, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65,
	0x6d, 0x1a, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xc6, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x1a, 0x4a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x67, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x38, 0x0a, 0x36,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f,
	0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x62, 0x61, 0x67, 0x73, 0x8a, 0xb5, 0x18, 0x2b, 0x12, 0x29, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72,
	0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x3a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xaf, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x34,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xb0, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x3b, 0x0a,
	0x39, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x29, 0x12, 0x27,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xb2, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x33,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x8a, 0xb5, 0x18, 0x3b, 0x0a, 0x39, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x8a, 0xb5, 0x18, 0x28, 0x12, 0x26, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xc0, 0x02, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x33, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xbb, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22, 0x3c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01,
	0x2a, 0x8a, 0xb5, 0x18, 0x3b, 0x0a, 0x39, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x8a, 0xb5, 0x18, 0x2b, 0x12, 0x29, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0xb8, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb9,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x2a, 0x43, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f,
	0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x8a, 0xb5, 0x18, 0x3b,
	0x0a, 0x39, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x2b, 0x12,
	0x29, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xc7, 0x02, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xc2, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x1a, 0x43, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x3b, 0x0a, 0x39, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a,
	0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x2b, 0x12, 0x29, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0xcc, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x32,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xbe, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x3b, 0x0a, 0x39, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67,
	0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x8a, 0xb5, 0x18, 0x28, 0x12, 0x26, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f,
	0x72, 0x67, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a,
	0x67, 0x65, 0x74, 0x12, 0x84, 0x02, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x2d,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x9a, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x8a, 0xb5, 0x18,
	0x34, 0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0x88, 0x02, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x1a, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67,
	0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0x94, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xa4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x2a, 0x3c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x8a, 0xb5, 0x18, 0x34,
	0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x24, 0x12, 0x22, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x9e, 0x02, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a,
	0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x1a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18,
	0x34, 0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x24, 0x12, 0x22, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xcc, 0x02,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xb8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x1a, 0x47, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x34,
	0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x24, 0x12, 0x22, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xca, 0x02, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xb6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x12, 0x51, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x7b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x8a, 0xb5, 0x18, 0x34,
	0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x21, 0x12, 0x1f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xb4, 0x02, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x35, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x67, 0x73, 0x22, 0xb2, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x43, 0x1a, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a,
	0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x7d, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x24, 0x12, 0x22, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x4f, 0x72, 0x67, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0xd0, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a,
	0x1a, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03,
	0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x24, 0x12,
	0x22, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0xa8, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0xac, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x3a, 0x0a, 0x38, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x8a, 0xb5, 0x18, 0x27, 0x12, 0x25, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xac,
	0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66,
	0x69, 0x6c, 0x65, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xb3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44,
	0x12, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x8a, 0xb5, 0x18, 0x3a, 0x0a, 0x38, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x8a, 0xb5, 0x18, 0x27, 0x12, 0x25, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xc9, 0x02,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x38, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xc1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x2a, 0x42,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x8a, 0xb5, 0x18, 0x3a, 0x0a, 0x38, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x8a, 0xb5, 0x18, 0x2a, 0x12, 0x28, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x92, 0x41,
	0x08, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0xd1, 0x02, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbd, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x4c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x8a, 0xb5, 0x18, 0x3a, 0x0a, 0x38, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x8a, 0xb5, 0x18, 0x27, 0x12, 0x25, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xb2, 0x02,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xb6, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x45, 0x12, 0x43, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x8a, 0xb5, 0x18, 0x3b, 0x0a, 0x39, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a,
	0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72, 0x67, 0x73,
	0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x8a, 0xb5, 0x18, 0x28, 0x12, 0x26, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72,
	0x67, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x67,
	0x65, 0x74, 0x12, 0x88, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f,
	0x72, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4f, 0x72, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x91, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f, 0x72,
	0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x8a, 0xb5, 0x18, 0x18, 0x12, 0x16, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xfd, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x7e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x26, 0x0a, 0x24, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a,
	0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x8a, 0xb5, 0x18, 0x18, 0x12, 0x16, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xcd, 0x02,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x1a, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0xa6, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x73, 0x8a, 0xb5, 0x18, 0x39, 0x0a, 0x37, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x75, 0x73, 0x65, 0x72, 0x73, 0x8a, 0xb5, 0x18, 0x18, 0x12, 0x16, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x67,
	0x65, 0x74, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0xbd, 0x02,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x72, 0x61, 0x4f, 0x72, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x72, 0x61, 0x4f, 0x72, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x72, 0x61, 0x4f, 0x72, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x9f, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x67, 0x2f, 0x7b, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x8a, 0xb5, 0x18, 0x34, 0x0a, 0x32,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x3a, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6f,
	0x72, 0x67, 0x73, 0x3a, 0x7b, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x8a, 0xb5, 0x18, 0x1c, 0x12, 0x1a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x73, 0x3a, 0x67,
	0x65, 0x74, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x9a, 0x02,
	0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x42, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x1a, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x03, 0x3a, 0x01, 0x2a, 0x8a, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x8a, 0xb5, 0x18,
	0x19, 0x12, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x3a, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_external_infra_proxy_infra_proxy_proto_goTypes = []interface{}{
	(*request.GetServers)(nil),                  // 0: chef.automate.api.infra_proxy.request.GetServers
	(*request.GetServerStatus)(nil),             // 1: chef.automate.api.infra_proxy.request.GetServerStatus
	(*request.ValidateWebuiKey)(nil),            // 2: chef.automate.api.infra_proxy.request.ValidateWebuiKey
	(*request.UpdateWebuiKey)(nil),              // 3: chef.automate.api.infra_proxy.request.UpdateWebuiKey
	(*request.GetServer)(nil),                   // 4: chef.automate.api.infra_proxy.request.GetServer
	(*request.CreateServer)(nil),                // 5: chef.automate.api.infra_proxy.request.CreateServer
	(*request.UpdateServer)(nil),                // 6: chef.automate.api.infra_proxy.request.UpdateServer
	(*request.DeleteServer)(nil),                // 7: chef.automate.api.infra_proxy.request.DeleteServer
	(*request.GetOrgs)(nil),                     // 8: chef.automate.api.infra_proxy.request.GetOrgs
	(*request.GetOrg)(nil),                      // 9: chef.automate.api.infra_proxy.request.GetOrg
	(*request.CreateOrg)(nil),                   // 10: chef.automate.api.infra_proxy.request.CreateOrg
	(*request.UpdateOrg)(nil),                   // 11: chef.automate.api.infra_proxy.request.UpdateOrg
	(*request.DeleteOrg)(nil),                   // 12: chef.automate.api.infra_proxy.request.DeleteOrg
	(*request.ResetOrgAdminKey)(nil),            // 13: chef.automate.api.infra_proxy.request.ResetOrgAdminKey
	(*request.GetInfraServerOrgs)(nil),          // 14: chef.automate.api.infra_proxy.request.GetInfraServerOrgs
	(*request.Cookbooks)(nil),                   // 15: chef.automate.api.infra_proxy.request.Cookbooks
	(*request.CookbookVersions)(nil),            // 16: chef.automate.api.infra_proxy.request.CookbookVersions
	(*request.Cookbook)(nil),                    // 17: chef.automate.api.infra_proxy.request.Cookbook
	(*request.CookbookFileContent)(nil),         // 18: chef.automate.api.infra_proxy.request.CookbookFileContent
	(*request.Roles)(nil),                       // 19: chef.automate.api.infra_proxy.request.Roles
	(*request.Role)(nil),                        // 20: chef.automate.api.infra_proxy.request.Role
	(*request.ExpandedRunList)(nil),             // 21: chef.automate.api.infra_proxy.request.ExpandedRunList
	(*request.CreateRole)(nil),                  // 22: chef.automate.api.infra_proxy.request.CreateRole
	(*request.UpdateRole)(nil),                  // 23: chef.automate.api.infra_proxy.request.UpdateRole
	(*request.Clients)(nil),                     // 24: chef.automate.api.infra_proxy.request.Clients
	(*request.Client)(nil),                      // 25: chef.automate.api.infra_proxy.request.Client
	(*request.CreateClient)(nil),                // 26: chef.automate.api.infra_proxy.request.CreateClient
	(*request.ClientKey)(nil),                   // 27: chef.automate.api.infra_proxy.request.ClientKey
	(*request.DataBags)(nil),                    // 28: chef.automate.api.infra_proxy.request.DataBags
	(*request.DataBagItems)(nil),                // 29: chef.automate.api.infra_proxy.request.DataBagItems
	(*request.DataBagItem)(nil),                 // 30: chef.automate.api.infra_proxy.request.DataBagItem
	(*request.CreateDataBag)(nil),               // 31: chef.automate.api.infra_proxy.request.CreateDataBag
	(*request.CreateDataBagItem)(nil),           // 32: chef.automate.api.infra_proxy.request.CreateDataBagItem
	(*request.DataBag)(nil),                     // 33: chef.automate.api.infra_proxy.request.DataBag
	(*request.UpdateDataBagItem)(nil),           // 34: chef.automate.api.infra_proxy.request.UpdateDataBagItem
	(*request.Environments)(nil),                // 35: chef.automate.api.infra_proxy.request.Environments
	(*request.Environment)(nil),                 // 36: chef.automate.api.infra_proxy.request.Environment
	(*request.CreateEnvironment)(nil),           // 37: chef.automate.api.infra_proxy.request.CreateEnvironment
	(*request.UpdateEnvironment)(nil),           // 38: chef.automate.api.infra_proxy.request.UpdateEnvironment
	(*request.Nodes)(nil),                       // 39: chef.automate.api.infra_proxy.request.Nodes
	(*request.Node)(nil),                        // 40: chef.automate.api.infra_proxy.request.Node
	(*request.NodeDetails)(nil),                 // 41: chef.automate.api.infra_proxy.request.NodeDetails
	(*request.UpdateNodeAttributes)(nil),        // 42: chef.automate.api.infra_proxy.request.UpdateNodeAttributes
	(*request.NodeExpandedRunList)(nil),         // 43: chef.automate.api.infra_proxy.request.NodeExpandedRunList
	(*request.UpdateNodeTags)(nil),              // 44: chef.automate.api.infra_proxy.request.UpdateNodeTags
	(*request.UpdateNodeEnvironment)(nil),       // 45: chef.automate.api.infra_proxy.request.UpdateNodeEnvironment
	(*request.Policyfiles)(nil),                 // 46: chef.automate.api.infra_proxy.request.Policyfiles
	(*request.Policyfile)(nil),                  // 47: chef.automate.api.infra_proxy.request.Policyfile
	(*request.DeletePolicyfile)(nil),            // 48: chef.automate.api.infra_proxy.request.DeletePolicyfile
	(*request.PolicyfileRevisions)(nil),         // 49: chef.automate.api.infra_proxy.request.PolicyfileRevisions
	(*request.Policygroup)(nil),                 // 50: chef.automate.api.infra_proxy.request.Policygroup
	(*request.OrgUsers)(nil),                    // 51: chef.automate.api.infra_proxy.request.OrgUsers
	(*request.ServerUsers)(nil),                 // 52: chef.automate.api.infra_proxy.request.ServerUsers
	(*request.AutomateInfraServerUsers)(nil),    // 53: chef.automate.api.infra_proxy.request.AutomateInfraServerUsers
	(*request.AutomateInfraOrgUsers)(nil),       // 54: chef.automate.api.infra_proxy.request.AutomateInfraOrgUsers
	(*request.ResetInfraServerUserKeyReq)(nil),  // 55: chef.automate.api.infra_proxy.request.ResetInfraServerUserKeyReq
	(*response.GetServers)(nil),                 // 56: chef.automate.api.infra_proxy.response.GetServers
	(*response.GetServerStatus)(nil),            // 57: chef.automate.api.infra_proxy.response.GetServerStatus
	(*response.ValidateWebuiKey)(nil),           // 58: chef.automate.api.infra_proxy.response.ValidateWebuiKey
	(*response.UpdateWebuiKey)(nil),             // 59: chef.automate.api.infra_proxy.response.UpdateWebuiKey
	(*response.GetServer)(nil),                  // 60: chef.automate.api.infra_proxy.response.GetServer
	(*response.CreateServer)(nil),               // 61: chef.automate.api.infra_proxy.response.CreateServer
	(*response.UpdateServer)(nil),               // 62: chef.automate.api.infra_proxy.response.UpdateServer
	(*response.DeleteServer)(nil),               // 63: chef.automate.api.infra_proxy.response.DeleteServer
	(*response.GetOrgs)(nil),                    // 64: chef.automate.api.infra_proxy.response.GetOrgs
	(*response.GetOrg)(nil),                     // 65: chef.automate.api.infra_proxy.response.GetOrg
	(*response.CreateOrg)(nil),                  // 66: chef.automate.api.infra_proxy.response.CreateOrg
	(*response.UpdateOrg)(nil),                  // 67: chef.automate.api.infra_proxy.response.UpdateOrg
	(*response.DeleteOrg)(nil),                  // 68: chef.automate.api.infra_proxy.response.DeleteOrg
	(*response.ResetOrgAdminKey)(nil),           // 69: chef.automate.api.infra_proxy.response.ResetOrgAdminKey
	(*response.GetInfraServerOrgs)(nil),         // 70: chef.automate.api.infra_proxy.response.GetInfraServerOrgs
	(*response.Cookbooks)(nil),                  // 71: chef.automate.api.infra_proxy.response.Cookbooks
	(*response.CookbookVersions)(nil),           // 72: chef.automate.api.infra_proxy.response.CookbookVersions
	(*response.Cookbook)(nil),                   // 73: chef.automate.api.infra_proxy.response.Cookbook
	(*response.CookbookFileContent)(nil),        // 74: chef.automate.api.infra_proxy.response.CookbookFileContent
	(*response.Roles)(nil),                      // 75: chef.automate.api.infra_proxy.response.Roles
	(*response.Role)(nil),                       // 76: chef.automate.api.infra_proxy.response.Role
	(*response.ExpandedRunList)(nil),            // 77: chef.automate.api.infra_proxy.response.ExpandedRunList
	(*response.RoleEnvironments)(nil),           // 78: chef.automate.api.infra_proxy.response.RoleEnvironments
	(*response.Clients)(nil),                    // 79: chef.automate.api.infra_proxy.response.Clients
	(*response.Client)(nil),                     // 80: chef.automate.api.infra_proxy.response.Client
	(*response.CreateClient)(nil),               // 81: chef.automate.api.infra_proxy.response.CreateClient
	(*response.ResetClient)(nil),                // 82: chef.automate.api.infra_proxy.response.ResetClient
	(*response.DataBags)(nil),                   // 83: chef.automate.api.infra_proxy.response.DataBags
	(*response.DataBagItems)(nil),               // 84: chef.automate.api.infra_proxy.response.DataBagItems
	(*response.DataBagItem)(nil),                // 85: chef.automate.api.infra_proxy.response.DataBagItem
	(*response.CreateDataBag)(nil),              // 86: chef.automate.api.infra_proxy.response.CreateDataBag
	(*response.CreateDataBagItem)(nil),          // 87: chef.automate.api.infra_proxy.response.CreateDataBagItem
	(*response.DataBag)(nil),                    // 88: chef.automate.api.infra_proxy.response.DataBag
	(*response.UpdateDataBagItem)(nil),          // 89: chef.automate.api.infra_proxy.response.UpdateDataBagItem
	(*response.Environments)(nil),               // 90: chef.automate.api.infra_proxy.response.Environments
	(*response.Environment)(nil),                // 91: chef.automate.api.infra_proxy.response.Environment
	(*response.EnvironmentRecipesList)(nil),     // 92: chef.automate.api.infra_proxy.response.EnvironmentRecipesList
	(*response.Nodes)(nil),                      // 93: chef.automate.api.infra_proxy.response.Nodes
	(*response.Node)(nil),                       // 94: chef.automate.api.infra_proxy.response.Node
	(*response.DeleteNode)(nil),                 // 95: chef.automate.api.infra_proxy.response.DeleteNode
	(*response.UpdateNodeAttributes)(nil),       // 96: chef.automate.api.infra_proxy.response.UpdateNodeAttributes
	(*response.NodeExpandedRunList)(nil),        // 97: chef.automate.api.infra_proxy.response.NodeExpandedRunList
	(*response.UpdateNodeTags)(nil),             // 98: chef.automate.api.infra_proxy.response.UpdateNodeTags
	(*response.UpdateNodeEnvironment)(nil),      // 99: chef.automate.api.infra_proxy.response.UpdateNodeEnvironment
	(*response.Policyfiles)(nil),                // 100: chef.automate.api.infra_proxy.response.Policyfiles
	(*response.Policyfile)(nil),                 // 101: chef.automate.api.infra_proxy.response.Policyfile
	(*response.DeletePolicyfile)(nil),           // 102: chef.automate.api.infra_proxy.response.DeletePolicyfile
	(*response.PolicyfileRevisions)(nil),        // 103: chef.automate.api.infra_proxy.response.PolicyfileRevisions
	(*response.Policygroup)(nil),                // 104: chef.automate.api.infra_proxy.response.Policygroup
	(*response.OrgUsers)(nil),                   // 105: chef.automate.api.infra_proxy.response.OrgUsers
	(*response.ServerUsers)(nil),                // 106: chef.automate.api.infra_proxy.response.ServerUsers
	(*response.AutomateInfraServerUsers)(nil),   // 107: chef.automate.api.infra_proxy.response.AutomateInfraServerUsers
	(*response.AutomateInfraOrgUsers)(nil),      // 108: chef.automate.api.infra_proxy.response.AutomateInfraOrgUsers
	(*response.ResetInfraServerUserKeyRes)(nil), // 109: chef.automate.api.infra_proxy.response.ResetInfraServerUserKeyRes
}
var file_external_infra_proxy_infra_proxy_proto_depIdxs = []int32{
	0,   // 0: chef.automate.api.infra_proxy.InfraProxy.GetServers:input_type -> chef.automate.api.infra_proxy.request.GetServers
	1,   // 1: chef.automate.api.infra_proxy.InfraProxy.GetServerStatus:input_type -> chef.automate.api.infra_proxy.request.GetServerStatus
	2,   // 2: chef.automate.api.infra_proxy.InfraProxy.ValidateWebuiKey:input_type -> chef.automate.api.infra_proxy.request.ValidateWebuiKey
	3,   // 3: chef.automate.api.infra_proxy.InfraProxy.UpdateWebuiKey:input_type -> chef.automate.api.infra_proxy.request.UpdateWebuiKey
	4,   // 4: chef.automate.api.infra_proxy.InfraProxy.GetServer:input_type -> chef.automate.api.infra_proxy.request.GetServer
	5,   // 5: chef.automate.api.infra_proxy.InfraProxy.CreateServer:input_type -> chef.automate.api.infra_proxy.request.CreateServer
	6,   // 6: chef.automate.api.infra_proxy.InfraProxy.UpdateServer:input_type -> chef.automate.api.infra_proxy.request.UpdateServer
	7,   // 7: chef.automate.api.infra_proxy.InfraProxy.DeleteServer:input_type -> chef.automate.api.infra_proxy.request.DeleteServer
	8,   // 8: chef.automate.api.infra_proxy.InfraProxy.GetOrgs:input_type -> chef.automate.api.infra_proxy.request.GetOrgs
	9,   // 9: chef.automate.api.infra_proxy.InfraProxy.GetOrg:input_type -> chef.automate.api.infra_proxy.request.GetOrg
	10,  // 10: chef.automate.api.infra_proxy.InfraProxy.CreateOrg:input_type -> chef.automate.api.infra_proxy.request.CreateOrg
	11,  // 11: chef.automate.api.infra_proxy.InfraProxy.UpdateOrg:input_type -> chef.automate.api.infra_proxy.request.UpdateOrg
	12,  // 12: chef.automate.api.infra_proxy.InfraProxy.DeleteOrg:input_type -> chef.automate.api.infra_proxy.request.DeleteOrg
	13,  // 13: chef.automate.api.infra_proxy.InfraProxy.ResetOrgAdminKey:input_type -> chef.automate.api.infra_proxy.request.ResetOrgAdminKey
	14,  // 14: chef.automate.api.infra_proxy.InfraProxy.GetInfraServerOrgs:input_type -> chef.automate.api.infra_proxy.request.GetInfraServerOrgs
	15,  // 15: chef.automate.api.infra_proxy.InfraProxy.GetCookbooks:input_type -> chef.automate.api.infra_proxy.request.Cookbooks
	16,  // 16: chef.automate.api.infra_proxy.InfraProxy.GetCookbookVersions:input_type -> chef.automate.api.infra_proxy.request.CookbookVersions
	17,  // 17: chef.automate.api.infra_proxy.InfraProxy.GetCookbook:input_type -> chef.automate.api.infra_proxy.request.Cookbook
	18,  // 18: chef.automate.api.infra_proxy.InfraProxy.GetCookbookFileContent:input_type -> chef.automate.api.infra_proxy.request.CookbookFileContent
	19,  // 19: chef.automate.api.infra_proxy.InfraProxy.GetRoles:input_type -> chef.automate.api.infra_proxy.request.Roles
	20,  // 20: chef.automate.api.infra_proxy.InfraProxy.GetRole:input_type -> chef.automate.api.infra_proxy.request.Role
	21,  // 21: chef.automate.api.infra_proxy.InfraProxy.GetRoleExpandedRunList:input_type -> chef.automate.api.infra_proxy.request.ExpandedRunList
	20,  // 22: chef.automate.api.infra_proxy.InfraProxy.GetRoleEnvironments:input_type -> chef.automate.api.infra_proxy.request.Role
	22,  // 23: chef.automate.api.infra_proxy.InfraProxy.CreateRole:input_type -> chef.automate.api.infra_proxy.request.CreateRole
	20,  // 24: chef.automate.api.infra_proxy.InfraProxy.DeleteRole:input_type -> chef.automate.api.infra_proxy.request.Role
	23,  // 25: chef.automate.api.infra_proxy.InfraProxy.UpdateRole:input_type -> chef.automate.api.infra_proxy.request.UpdateRole
	24,  // 26: chef.automate.api.infra_proxy.InfraProxy.GetClients:input_type -> chef.automate.api.infra_proxy.request.Clients
	25,  // 27: chef.automate.api.infra_proxy.InfraProxy.GetClient:input_type -> chef.automate.api.infra_proxy.request.Client
	26,  // 28: chef.automate.api.infra_proxy.InfraProxy.CreateClient:input_type -> chef.automate.api.infra_proxy.request.CreateClient
	25,  // 29: chef.automate.api.infra_proxy.InfraProxy.DeleteClient:input_type -> chef.automate.api.infra_proxy.request.Client
	27,  // 30: chef.automate.api.infra_proxy.InfraProxy.ResetClientKey:input_type -> chef.automate.api.infra_proxy.request.ClientKey
	28,  // 31: chef.automate.api.infra_proxy.InfraProxy.GetDataBags:input_type -> chef.automate.api.infra_proxy.request.DataBags
	29,  // 32: chef.automate.api.infra_proxy.InfraProxy.GetDataBagItems:input_type -> chef.automate.api.infra_proxy.request.DataBagItems
	30,  // 33: chef.automate.api.infra_proxy.InfraProxy.GetDataBagItem:input_type -> chef.automate.api.infra_proxy.request.DataBagItem
	31,  // 34: chef.automate.api.infra_proxy.InfraProxy.CreateDataBag:input_type -> chef.automate.api.infra_proxy.request.CreateDataBag
	32,  // 35: chef.automate.api.infra_proxy.InfraProxy.CreateDataBagItem:input_type -> chef.automate.api.infra_proxy.request.CreateDataBagItem
	33,  // 36: chef.automate.api.infra_proxy.InfraProxy.DeleteDataBag:input_type -> chef.automate.api.infra_proxy.request.DataBag
	30,  // 37: chef.automate.api.infra_proxy.InfraProxy.DeleteDataBagItem:input_type -> chef.automate.api.infra_proxy.request.DataBagItem
	34,  // 38: chef.automate.api.infra_proxy.InfraProxy.UpdateDataBagItem:input_type -> chef.automate.api.infra_proxy.request.UpdateDataBagItem
	35,  // 39: chef.automate.api.infra_proxy.InfraProxy.GetEnvironments:input_type -> chef.automate.api.infra_proxy.request.Environments
	36,  // 40: chef.automate.api.infra_proxy.InfraProxy.GetEnvironment:input_type -> chef.automate.api.infra_proxy.request.Environment
	37,  // 41: chef.automate.api.infra_proxy.InfraProxy.CreateEnvironment:input_type -> chef.automate.api.infra_proxy.request.CreateEnvironment
	36,  // 42: chef.automate.api.infra_proxy.InfraProxy.DeleteEnvironment:input_type -> chef.automate.api.infra_proxy.request.Environment
	38,  // 43: chef.automate.api.infra_proxy.InfraProxy.UpdateEnvironment:input_type -> chef.automate.api.infra_proxy.request.UpdateEnvironment
	36,  // 44: chef.automate.api.infra_proxy.InfraProxy.GetEnvironmentRecipes:input_type -> chef.automate.api.infra_proxy.request.Environment
	39,  // 45: chef.automate.api.infra_proxy.InfraProxy.GetNodes:input_type -> chef.automate.api.infra_proxy.request.Nodes
	40,  // 46: chef.automate.api.infra_proxy.InfraProxy.GetNode:input_type -> chef.automate.api.infra_proxy.request.Node
	40,  // 47: chef.automate.api.infra_proxy.InfraProxy.DeleteNode:input_type -> chef.automate.api.infra_proxy.request.Node
	41,  // 48: chef.automate.api.infra_proxy.InfraProxy.UpdateNode:input_type -> chef.automate.api.infra_proxy.request.NodeDetails
	42,  // 49: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeAttributes:input_type -> chef.automate.api.infra_proxy.request.UpdateNodeAttributes
	43,  // 50: chef.automate.api.infra_proxy.InfraProxy.GetNodeExpandedRunList:input_type -> chef.automate.api.infra_proxy.request.NodeExpandedRunList
	44,  // 51: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeTags:input_type -> chef.automate.api.infra_proxy.request.UpdateNodeTags
	45,  // 52: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeEnvironment:input_type -> chef.automate.api.infra_proxy.request.UpdateNodeEnvironment
	46,  // 53: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfiles:input_type -> chef.automate.api.infra_proxy.request.Policyfiles
	47,  // 54: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfile:input_type -> chef.automate.api.infra_proxy.request.Policyfile
	48,  // 55: chef.automate.api.infra_proxy.InfraProxy.DeletePolicyfile:input_type -> chef.automate.api.infra_proxy.request.DeletePolicyfile
	49,  // 56: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfileRevisions:input_type -> chef.automate.api.infra_proxy.request.PolicyfileRevisions
	50,  // 57: chef.automate.api.infra_proxy.InfraProxy.GetPolicygroup:input_type -> chef.automate.api.infra_proxy.request.Policygroup
	51,  // 58: chef.automate.api.infra_proxy.InfraProxy.GetOrgUsersList:input_type -> chef.automate.api.infra_proxy.request.OrgUsers
	52,  // 59: chef.automate.api.infra_proxy.InfraProxy.GetServerUsersList:input_type -> chef.automate.api.infra_proxy.request.ServerUsers
	53,  // 60: chef.automate.api.infra_proxy.InfraProxy.GetAutomateInfraServerUsersList:input_type -> chef.automate.api.infra_proxy.request.AutomateInfraServerUsers
	54,  // 61: chef.automate.api.infra_proxy.InfraProxy.GetAutomateInfraOrgUsersList:input_type -> chef.automate.api.infra_proxy.request.AutomateInfraOrgUsers
	55,  // 62: chef.automate.api.infra_proxy.InfraProxy.ResetInfraServerUserKey:input_type -> chef.automate.api.infra_proxy.request.ResetInfraServerUserKeyReq
	56,  // 63: chef.automate.api.infra_proxy.InfraProxy.GetServers:output_type -> chef.automate.api.infra_proxy.response.GetServers
	57,  // 64: chef.automate.api.infra_proxy.InfraProxy.GetServerStatus:output_type -> chef.automate.api.infra_proxy.response.GetServerStatus
	58,  // 65: chef.automate.api.infra_proxy.InfraProxy.ValidateWebuiKey:output_type -> chef.automate.api.infra_proxy.response.ValidateWebuiKey
	59,  // 66: chef.automate.api.infra_proxy.InfraProxy.UpdateWebuiKey:output_type -> chef.automate.api.infra_proxy.response.UpdateWebuiKey
	60,  // 67: chef.automate.api.infra_proxy.InfraProxy.GetServer:output_type -> chef.automate.api.infra_proxy.response.GetServer
	61,  // 68: chef.automate.api.infra_proxy.InfraProxy.CreateServer:output_type -> chef.automate.api.infra_proxy.response.CreateServer
	62,  // 69: chef.automate.api.infra_proxy.InfraProxy.UpdateServer:output_type -> chef.automate.api.infra_proxy.response.UpdateServer
	63,  // 70: chef.automate.api.infra_proxy.InfraProxy.DeleteServer:output_type -> chef.automate.api.infra_proxy.response.DeleteServer
	64,  // 71: chef.automate.api.infra_proxy.InfraProxy.GetOrgs:output_type -> chef.automate.api.infra_proxy.response.GetOrgs
	65,  // 72: chef.automate.api.infra_proxy.InfraProxy.GetOrg:output_type -> chef.automate.api.infra_proxy.response.GetOrg
	66,  // 73: chef.automate.api.infra_proxy.InfraProxy.CreateOrg:output_type -> chef.automate.api.infra_proxy.response.CreateOrg
	67,  // 74: chef.automate.api.infra_proxy.InfraProxy.UpdateOrg:output_type -> chef.automate.api.infra_proxy.response.UpdateOrg
	68,  // 75: chef.automate.api.infra_proxy.InfraProxy.DeleteOrg:output_type -> chef.automate.api.infra_proxy.response.DeleteOrg
	69,  // 76: chef.automate.api.infra_proxy.InfraProxy.ResetOrgAdminKey:output_type -> chef.automate.api.infra_proxy.response.ResetOrgAdminKey
	70,  // 77: chef.automate.api.infra_proxy.InfraProxy.GetInfraServerOrgs:output_type -> chef.automate.api.infra_proxy.response.GetInfraServerOrgs
	71,  // 78: chef.automate.api.infra_proxy.InfraProxy.GetCookbooks:output_type -> chef.automate.api.infra_proxy.response.Cookbooks
	72,  // 79: chef.automate.api.infra_proxy.InfraProxy.GetCookbookVersions:output_type -> chef.automate.api.infra_proxy.response.CookbookVersions
	73,  // 80: chef.automate.api.infra_proxy.InfraProxy.GetCookbook:output_type -> chef.automate.api.infra_proxy.response.Cookbook
	74,  // 81: chef.automate.api.infra_proxy.InfraProxy.GetCookbookFileContent:output_type -> chef.automate.api.infra_proxy.response.CookbookFileContent
	75,  // 82: chef.automate.api.infra_proxy.InfraProxy.GetRoles:output_type -> chef.automate.api.infra_proxy.response.Roles
	76,  // 83: chef.automate.api.infra_proxy.InfraProxy.GetRole:output_type -> chef.automate.api.infra_proxy.response.Role
	77,  // 84: chef.automate.api.infra_proxy.InfraProxy.GetRoleExpandedRunList:output_type -> chef.automate.api.infra_proxy.response.ExpandedRunList
	78,  // 85: chef.automate.api.infra_proxy.InfraProxy.GetRoleEnvironments:output_type -> chef.automate.api.infra_proxy.response.RoleEnvironments
	76,  // 86: chef.automate.api.infra_proxy.InfraProxy.CreateRole:output_type -> chef.automate.api.infra_proxy.response.Role
	76,  // 87: chef.automate.api.infra_proxy.InfraProxy.DeleteRole:output_type -> chef.automate.api.infra_proxy.response.Role
	76,  // 88: chef.automate.api.infra_proxy.InfraProxy.UpdateRole:output_type -> chef.automate.api.infra_proxy.response.Role
	79,  // 89: chef.automate.api.infra_proxy.InfraProxy.GetClients:output_type -> chef.automate.api.infra_proxy.response.Clients
	80,  // 90: chef.automate.api.infra_proxy.InfraProxy.GetClient:output_type -> chef.automate.api.infra_proxy.response.Client
	81,  // 91: chef.automate.api.infra_proxy.InfraProxy.CreateClient:output_type -> chef.automate.api.infra_proxy.response.CreateClient
	80,  // 92: chef.automate.api.infra_proxy.InfraProxy.DeleteClient:output_type -> chef.automate.api.infra_proxy.response.Client
	82,  // 93: chef.automate.api.infra_proxy.InfraProxy.ResetClientKey:output_type -> chef.automate.api.infra_proxy.response.ResetClient
	83,  // 94: chef.automate.api.infra_proxy.InfraProxy.GetDataBags:output_type -> chef.automate.api.infra_proxy.response.DataBags
	84,  // 95: chef.automate.api.infra_proxy.InfraProxy.GetDataBagItems:output_type -> chef.automate.api.infra_proxy.response.DataBagItems
	85,  // 96: chef.automate.api.infra_proxy.InfraProxy.GetDataBagItem:output_type -> chef.automate.api.infra_proxy.response.DataBagItem
	86,  // 97: chef.automate.api.infra_proxy.InfraProxy.CreateDataBag:output_type -> chef.automate.api.infra_proxy.response.CreateDataBag
	87,  // 98: chef.automate.api.infra_proxy.InfraProxy.CreateDataBagItem:output_type -> chef.automate.api.infra_proxy.response.CreateDataBagItem
	88,  // 99: chef.automate.api.infra_proxy.InfraProxy.DeleteDataBag:output_type -> chef.automate.api.infra_proxy.response.DataBag
	85,  // 100: chef.automate.api.infra_proxy.InfraProxy.DeleteDataBagItem:output_type -> chef.automate.api.infra_proxy.response.DataBagItem
	89,  // 101: chef.automate.api.infra_proxy.InfraProxy.UpdateDataBagItem:output_type -> chef.automate.api.infra_proxy.response.UpdateDataBagItem
	90,  // 102: chef.automate.api.infra_proxy.InfraProxy.GetEnvironments:output_type -> chef.automate.api.infra_proxy.response.Environments
	91,  // 103: chef.automate.api.infra_proxy.InfraProxy.GetEnvironment:output_type -> chef.automate.api.infra_proxy.response.Environment
	91,  // 104: chef.automate.api.infra_proxy.InfraProxy.CreateEnvironment:output_type -> chef.automate.api.infra_proxy.response.Environment
	91,  // 105: chef.automate.api.infra_proxy.InfraProxy.DeleteEnvironment:output_type -> chef.automate.api.infra_proxy.response.Environment
	91,  // 106: chef.automate.api.infra_proxy.InfraProxy.UpdateEnvironment:output_type -> chef.automate.api.infra_proxy.response.Environment
	92,  // 107: chef.automate.api.infra_proxy.InfraProxy.GetEnvironmentRecipes:output_type -> chef.automate.api.infra_proxy.response.EnvironmentRecipesList
	93,  // 108: chef.automate.api.infra_proxy.InfraProxy.GetNodes:output_type -> chef.automate.api.infra_proxy.response.Nodes
	94,  // 109: chef.automate.api.infra_proxy.InfraProxy.GetNode:output_type -> chef.automate.api.infra_proxy.response.Node
	95,  // 110: chef.automate.api.infra_proxy.InfraProxy.DeleteNode:output_type -> chef.automate.api.infra_proxy.response.DeleteNode
	94,  // 111: chef.automate.api.infra_proxy.InfraProxy.UpdateNode:output_type -> chef.automate.api.infra_proxy.response.Node
	96,  // 112: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeAttributes:output_type -> chef.automate.api.infra_proxy.response.UpdateNodeAttributes
	97,  // 113: chef.automate.api.infra_proxy.InfraProxy.GetNodeExpandedRunList:output_type -> chef.automate.api.infra_proxy.response.NodeExpandedRunList
	98,  // 114: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeTags:output_type -> chef.automate.api.infra_proxy.response.UpdateNodeTags
	99,  // 115: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeEnvironment:output_type -> chef.automate.api.infra_proxy.response.UpdateNodeEnvironment
	100, // 116: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfiles:output_type -> chef.automate.api.infra_proxy.response.Policyfiles
	101, // 117: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfile:output_type -> chef.automate.api.infra_proxy.response.Policyfile
	102, // 118: chef.automate.api.infra_proxy.InfraProxy.DeletePolicyfile:output_type -> chef.automate.api.infra_proxy.response.DeletePolicyfile
	103, // 119: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfileRevisions:output_type -> chef.automate.api.infra_proxy.response.PolicyfileRevisions
	104, // 120: chef.automate.api.infra_proxy.InfraProxy.GetPolicygroup:output_type -> chef.automate.api.infra_proxy.response.Policygroup
	105, // 121: chef.automate.api.infra_proxy.InfraProxy.GetOrgUsersList:output_type -> chef.automate.api.infra_proxy.response.OrgUsers
	106, // 122: chef.automate.api.infra_proxy.InfraProxy.GetServerUsersList:output_type -> chef.automate.api.infra_proxy.response.ServerUsers
	107, // 123: chef.automate.api.infra_proxy.InfraProxy.GetAutomateInfraServerUsersList:output_type -> chef.automate.api.infra_proxy.response.AutomateInfraServerUsers
	108, // 124: chef.automate.api.infra_proxy.InfraProxy.GetAutomateInfraOrgUsersList:output_type -> chef.automate.api.infra_proxy.response.AutomateInfraOrgUsers
	109, // 125: chef.automate.api.infra_proxy.InfraProxy.ResetInfraServerUserKey:output_type -> chef.automate.api.infra_proxy.response.ResetInfraServerUserKeyRes
	63,  // [63:126] is the sub-list for method output_type
	0,   // [0:63] is the sub-list for method input_type
	0,   // [0:0] is the sub-list for extension type_name
	0,   // [0:0] is the sub-list for extension extendee
	0,   // [0:0] is the sub-list for field type_name
}

func init() { file_external_infra_proxy_infra_proxy_proto_init() }
func file_external_infra_proxy_infra_proxy_proto_init() {
	if File_external_infra_proxy_infra_proxy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_infra_proxy_infra_proxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_infra_proxy_infra_proxy_proto_goTypes,
		DependencyIndexes: file_external_infra_proxy_infra_proxy_proto_depIdxs,
	}.Build()
	File_external_infra_proxy_infra_proxy_proto = out.File
	file_external_infra_proxy_infra_proxy_proto_rawDesc = nil
	file_external_infra_proxy_infra_proxy_proto_goTypes = nil
	file_external_infra_proxy_infra_proxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InfraProxyClient is the client API for InfraProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfraProxyClient interface {
	//
	//Get Infra Server
	//
	//Get Infra Servers returns all the servers added to Automate
	//
	//Authorization Action:
	//```
	//infra:infraServers:list
	//```
	GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error)
	GetServerStatus(ctx context.Context, in *request.GetServerStatus, opts ...grpc.CallOption) (*response.GetServerStatus, error)
	//
	//Validate Infra Server WebUI Key
	//
	//Returns if the WebUI key stored for a Chef Server is valid or not.
	//In case of invalid webUI key, it returns the error details.
	//
	//Authorization Action:
	//```
	//infra:infraServers:get
	//```
	ValidateWebuiKey(ctx context.Context, in *request.ValidateWebuiKey, opts ...grpc.CallOption) (*response.ValidateWebuiKey, error)
	//
	//Update Infra Server WebUI Key
	//
	//Updates the WebUI key stored for a Chef Server.
	//
	//Authorization Action:
	//```
	//infra:infraServers:update
	//```
	UpdateWebuiKey(ctx context.Context, in *request.UpdateWebuiKey, opts ...grpc.CallOption) (*response.UpdateWebuiKey, error)
	//
	//Get Infra Server Details
	//
	//Returns the details of the Infra Server added in Automate.
	//The details include the last sync status, date besides the Server details.
	//
	//Authorization Action:
	//```
	//infra:infraServers:get
	//```
	GetServer(ctx context.Context, in *request.GetServer, opts ...grpc.CallOption) (*response.GetServer, error)
	//
	//Add Chef Infra Server
	//
	//Adds a Chef Infra Server to Automate and stores the WebUI key, server details.
	//
	//Authorization Action:
	//```
	//infra:infraServers:create
	//```
	CreateServer(ctx context.Context, in *request.CreateServer, opts ...grpc.CallOption) (*response.CreateServer, error)
	//
	//Update Chef Infra Server
	//
	//Updates Chef Infra Server details in Automate.
	//This API does not update the Chef Infra Server.
	//In order to update the WebUI key, refer the Update WebUI Key api.
	//
	//Authorization Action:
	//```
	//infra:infraServers:update
	//```
	UpdateServer(ctx context.Context, in *request.UpdateServer, opts ...grpc.CallOption) (*response.UpdateServer, error)
	//
	//Delete Chef Infra Server
	//
	//Deletes a Chef Infra Server details in Automate.
	//This API does not delete the Chef Infra Server.
	//
	//Authorization Action:
	//```
	//infra:infraServers:delete
	//```
	DeleteServer(ctx context.Context, in *request.DeleteServer, opts ...grpc.CallOption) (*response.DeleteServer, error)
	//
	//Get organisations
	//
	//Gets all the organisations of a Chef Infra Server added in Automate.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgs:list
	//```
	GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error)
	//
	//Get organisation details
	//
	//Gets the details of an organisation of a Chef Infra Server added in Automate.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgs:get
	//```
	GetOrg(ctx context.Context, in *request.GetOrg, opts ...grpc.CallOption) (*response.GetOrg, error)
	CreateOrg(ctx context.Context, in *request.CreateOrg, opts ...grpc.CallOption) (*response.CreateOrg, error)
	UpdateOrg(ctx context.Context, in *request.UpdateOrg, opts ...grpc.CallOption) (*response.UpdateOrg, error)
	DeleteOrg(ctx context.Context, in *request.DeleteOrg, opts ...grpc.CallOption) (*response.DeleteOrg, error)
	ResetOrgAdminKey(ctx context.Context, in *request.ResetOrgAdminKey, opts ...grpc.CallOption) (*response.ResetOrgAdminKey, error)
	GetInfraServerOrgs(ctx context.Context, in *request.GetInfraServerOrgs, opts ...grpc.CallOption) (*response.GetInfraServerOrgs, error)
	//
	//Get Cookbooks
	//
	//Gets all the cookbooks of an organisation of a Chef Infra Server added in Automate.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsCookbooks:list
	//```
	GetCookbooks(ctx context.Context, in *request.Cookbooks, opts ...grpc.CallOption) (*response.Cookbooks, error)
	//
	//Get Cookbook Versions
	//
	//Gets all the versions of a cookbook in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsCookbooks:get
	//```
	GetCookbookVersions(ctx context.Context, in *request.CookbookVersions, opts ...grpc.CallOption) (*response.CookbookVersions, error)
	//
	//Get Cookbook
	//
	//Gets the details of a cookbook in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsCookbooks:get
	//```
	GetCookbook(ctx context.Context, in *request.Cookbook, opts ...grpc.CallOption) (*response.Cookbook, error)
	//
	//Get Cookbook File Content
	//
	//Gets the contents of a cookbook in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsCookbooks:get
	//```
	GetCookbookFileContent(ctx context.Context, in *request.CookbookFileContent, opts ...grpc.CallOption) (*response.CookbookFileContent, error)
	//
	//Get Roles
	//
	//Gets all the Roles in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:list
	//```
	GetRoles(ctx context.Context, in *request.Roles, opts ...grpc.CallOption) (*response.Roles, error)
	//
	//Get Role
	//
	//Gets the details of a Role in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:get
	//```
	GetRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error)
	//
	//Get Role Expanded Run List
	//
	//Gets the expanded run list of a Role in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:get
	//```
	GetRoleExpandedRunList(ctx context.Context, in *request.ExpandedRunList, opts ...grpc.CallOption) (*response.ExpandedRunList, error)
	//
	//Get Role Environments
	//
	//Gets the environments of a Role in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:get
	//```
	GetRoleEnvironments(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.RoleEnvironments, error)
	//
	//Create Role
	//
	//Creates a Role in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:create
	//```
	CreateRole(ctx context.Context, in *request.CreateRole, opts ...grpc.CallOption) (*response.Role, error)
	//
	//Delete Role
	//
	//Deletes a Role in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:delete
	//```
	DeleteRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error)
	//
	//Update Role
	//
	//Updates a Role in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:update
	//```
	UpdateRole(ctx context.Context, in *request.UpdateRole, opts ...grpc.CallOption) (*response.Role, error)
	//
	//Get Clients
	//
	//Gets all Clients in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsClient:get
	//```
	GetClients(ctx context.Context, in *request.Clients, opts ...grpc.CallOption) (*response.Clients, error)
	//
	//Get Client
	//
	//Gets the details of a Client in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsClient:get
	//```
	GetClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error)
	//
	//Create Client
	//
	//Creates a Client in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsClient:create
	//```
	CreateClient(ctx context.Context, in *request.CreateClient, opts ...grpc.CallOption) (*response.CreateClient, error)
	//
	//Delete Client
	//
	//Deletes a Client in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsClient:delete
	//```
	DeleteClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error)
	//
	//Reset Client Key
	//
	//Resets a Client key  in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsClient:update
	//```
	ResetClientKey(ctx context.Context, in *request.ClientKey, opts ...grpc.CallOption) (*response.ResetClient, error)
	//
	//Get Data Bags
	//
	//Gets all Data Bags in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBags:get
	//```
	GetDataBags(ctx context.Context, in *request.DataBags, opts ...grpc.CallOption) (*response.DataBags, error)
	//
	//Get Data Bag Items
	//
	//Gets all the Items in a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBagsItem:get
	//```
	GetDataBagItems(ctx context.Context, in *request.DataBagItems, opts ...grpc.CallOption) (*response.DataBagItems, error)
	//
	//Get Data Bag Item
	//
	//Gets details of an Items in a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBagsItem:get
	//```
	GetDataBagItem(ctx context.Context, in *request.DataBagItem, opts ...grpc.CallOption) (*response.DataBagItem, error)
	//
	//Create Data Bag
	//
	//Creates a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBags:create
	//```
	CreateDataBag(ctx context.Context, in *request.CreateDataBag, opts ...grpc.CallOption) (*response.CreateDataBag, error)
	//
	//Create Data Bag Item
	//
	//Creates an Item in a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBagsItem:create
	//```
	CreateDataBagItem(ctx context.Context, in *request.CreateDataBagItem, opts ...grpc.CallOption) (*response.CreateDataBagItem, error)
	//
	//Delete Data Bag
	//
	//Deletes a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBags:delete
	//```
	DeleteDataBag(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error)
	//
	//Delete Data Bag Item
	//
	//Deletes an Item in a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBagsItem:delete
	//```
	DeleteDataBagItem(ctx context.Context, in *request.DataBagItem, opts ...grpc.CallOption) (*response.DataBagItem, error)
	//
	//Update Data Bag Item
	//
	//Updates an Item in a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBagsItem:update
	//```
	UpdateDataBagItem(ctx context.Context, in *request.UpdateDataBagItem, opts ...grpc.CallOption) (*response.UpdateDataBagItem, error)
	//
	//Get Environments
	//
	//Gets all Environments in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:list
	//```
	GetEnvironments(ctx context.Context, in *request.Environments, opts ...grpc.CallOption) (*response.Environments, error)
	//
	//Get Environment
	//
	//Gets the details of an Environment in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:get
	//```
	GetEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error)
	//
	//Create Environment
	//
	//Creates an Environment in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:create
	//```
	CreateEnvironment(ctx context.Context, in *request.CreateEnvironment, opts ...grpc.CallOption) (*response.Environment, error)
	//
	//Delete Environment
	//
	//Deletes an Environment in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:delete
	//```
	DeleteEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error)
	//
	//Update Environment
	//
	//Updates an Environment in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:update
	//```
	UpdateEnvironment(ctx context.Context, in *request.UpdateEnvironment, opts ...grpc.CallOption) (*response.Environment, error)
	//
	//Get Environment Recipes
	//
	//Gets all the Recipes for an Environment in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:get
	//```
	GetEnvironmentRecipes(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.EnvironmentRecipesList, error)
	//
	//Get Nodes
	//
	//Gets all the Nodes in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:get
	//```
	GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*response.Nodes, error)
	//
	//Get Node
	//
	//Gets the details of a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:get
	//```
	GetNode(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.Node, error)
	//
	//Delete Node
	//
	//Deletes a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:delete
	//```
	DeleteNode(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.DeleteNode, error)
	//
	//Update Node
	//
	//Updates a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:update
	//```
	UpdateNode(ctx context.Context, in *request.NodeDetails, opts ...grpc.CallOption) (*response.Node, error)
	//
	//Update Node Attributes
	//
	//Updates the Attributes of a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:update
	//```
	UpdateNodeAttributes(ctx context.Context, in *request.UpdateNodeAttributes, opts ...grpc.CallOption) (*response.UpdateNodeAttributes, error)
	//
	//Get Node Expanded Run List
	//
	//Gets the Expanded Run List of a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:get
	//```
	GetNodeExpandedRunList(ctx context.Context, in *request.NodeExpandedRunList, opts ...grpc.CallOption) (*response.NodeExpandedRunList, error)
	//
	//Update Node Tags
	//
	//Updates the tags of a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:update
	//```
	UpdateNodeTags(ctx context.Context, in *request.UpdateNodeTags, opts ...grpc.CallOption) (*response.UpdateNodeTags, error)
	//
	//Update Node Environment
	//
	//Updates the environment of a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:update
	//```
	UpdateNodeEnvironment(ctx context.Context, in *request.UpdateNodeEnvironment, opts ...grpc.CallOption) (*response.UpdateNodeEnvironment, error)
	//
	//Get Policy Files
	//
	//Gets all the Policy Files in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsPolicyFiles:get
	//```
	GetPolicyfiles(ctx context.Context, in *request.Policyfiles, opts ...grpc.CallOption) (*response.Policyfiles, error)
	//
	//Get Policy File
	//
	//Gets the details of a Policy File in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsPolicyFiles:get
	//```
	GetPolicyfile(ctx context.Context, in *request.Policyfile, opts ...grpc.CallOption) (*response.Policyfile, error)
	DeletePolicyfile(ctx context.Context, in *request.DeletePolicyfile, opts ...grpc.CallOption) (*response.DeletePolicyfile, error)
	//
	//Get Policy File Revisions
	//
	//Gets the revisions of a Policy File in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsPolicyFiles:get
	//```
	GetPolicyfileRevisions(ctx context.Context, in *request.PolicyfileRevisions, opts ...grpc.CallOption) (*response.PolicyfileRevisions, error)
	//
	//Get Policy Group
	//
	//Gets the Policy Group of a Policy File in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsPolicyGroups:get
	//```
	GetPolicygroup(ctx context.Context, in *request.Policygroup, opts ...grpc.CallOption) (*response.Policygroup, error)
	//
	//Get Org Users List
	//
	//Gets all the users of an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServers:get
	//```
	GetOrgUsersList(ctx context.Context, in *request.OrgUsers, opts ...grpc.CallOption) (*response.OrgUsers, error)
	//
	//Get Server Users List
	//
	//Gets all the users of a Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServers:get
	//```
	GetServerUsersList(ctx context.Context, in *request.ServerUsers, opts ...grpc.CallOption) (*response.ServerUsers, error)
	GetAutomateInfraServerUsersList(ctx context.Context, in *request.AutomateInfraServerUsers, opts ...grpc.CallOption) (*response.AutomateInfraServerUsers, error)
	GetAutomateInfraOrgUsersList(ctx context.Context, in *request.AutomateInfraOrgUsers, opts ...grpc.CallOption) (*response.AutomateInfraOrgUsers, error)
	//
	//Reset Server Users Key
	//
	//Resets the user key of an user in Chef Infra Server
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServers:list
	//```
	ResetInfraServerUserKey(ctx context.Context, in *request.ResetInfraServerUserKeyReq, opts ...grpc.CallOption) (*response.ResetInfraServerUserKeyRes, error)
}

type infraProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewInfraProxyClient(cc grpc.ClientConnInterface) InfraProxyClient {
	return &infraProxyClient{cc}
}

func (c *infraProxyClient) GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error) {
	out := new(response.GetServers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetServerStatus(ctx context.Context, in *request.GetServerStatus, opts ...grpc.CallOption) (*response.GetServerStatus, error) {
	out := new(response.GetServerStatus)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) ValidateWebuiKey(ctx context.Context, in *request.ValidateWebuiKey, opts ...grpc.CallOption) (*response.ValidateWebuiKey, error) {
	out := new(response.ValidateWebuiKey)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/ValidateWebuiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateWebuiKey(ctx context.Context, in *request.UpdateWebuiKey, opts ...grpc.CallOption) (*response.UpdateWebuiKey, error) {
	out := new(response.UpdateWebuiKey)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateWebuiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetServer(ctx context.Context, in *request.GetServer, opts ...grpc.CallOption) (*response.GetServer, error) {
	out := new(response.GetServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateServer(ctx context.Context, in *request.CreateServer, opts ...grpc.CallOption) (*response.CreateServer, error) {
	out := new(response.CreateServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateServer(ctx context.Context, in *request.UpdateServer, opts ...grpc.CallOption) (*response.UpdateServer, error) {
	out := new(response.UpdateServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteServer(ctx context.Context, in *request.DeleteServer, opts ...grpc.CallOption) (*response.DeleteServer, error) {
	out := new(response.DeleteServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error) {
	out := new(response.GetOrgs)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrg(ctx context.Context, in *request.GetOrg, opts ...grpc.CallOption) (*response.GetOrg, error) {
	out := new(response.GetOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateOrg(ctx context.Context, in *request.CreateOrg, opts ...grpc.CallOption) (*response.CreateOrg, error) {
	out := new(response.CreateOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateOrg(ctx context.Context, in *request.UpdateOrg, opts ...grpc.CallOption) (*response.UpdateOrg, error) {
	out := new(response.UpdateOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteOrg(ctx context.Context, in *request.DeleteOrg, opts ...grpc.CallOption) (*response.DeleteOrg, error) {
	out := new(response.DeleteOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) ResetOrgAdminKey(ctx context.Context, in *request.ResetOrgAdminKey, opts ...grpc.CallOption) (*response.ResetOrgAdminKey, error) {
	out := new(response.ResetOrgAdminKey)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/ResetOrgAdminKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetInfraServerOrgs(ctx context.Context, in *request.GetInfraServerOrgs, opts ...grpc.CallOption) (*response.GetInfraServerOrgs, error) {
	out := new(response.GetInfraServerOrgs)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetInfraServerOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbooks(ctx context.Context, in *request.Cookbooks, opts ...grpc.CallOption) (*response.Cookbooks, error) {
	out := new(response.Cookbooks)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbookVersions(ctx context.Context, in *request.CookbookVersions, opts ...grpc.CallOption) (*response.CookbookVersions, error) {
	out := new(response.CookbookVersions)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbook(ctx context.Context, in *request.Cookbook, opts ...grpc.CallOption) (*response.Cookbook, error) {
	out := new(response.Cookbook)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbookFileContent(ctx context.Context, in *request.CookbookFileContent, opts ...grpc.CallOption) (*response.CookbookFileContent, error) {
	out := new(response.CookbookFileContent)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRoles(ctx context.Context, in *request.Roles, opts ...grpc.CallOption) (*response.Roles, error) {
	out := new(response.Roles)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRoleExpandedRunList(ctx context.Context, in *request.ExpandedRunList, opts ...grpc.CallOption) (*response.ExpandedRunList, error) {
	out := new(response.ExpandedRunList)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetRoleExpandedRunList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRoleEnvironments(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.RoleEnvironments, error) {
	out := new(response.RoleEnvironments)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetRoleEnvironments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateRole(ctx context.Context, in *request.CreateRole, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateRole(ctx context.Context, in *request.UpdateRole, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetClients(ctx context.Context, in *request.Clients, opts ...grpc.CallOption) (*response.Clients, error) {
	out := new(response.Clients)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error) {
	out := new(response.Client)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateClient(ctx context.Context, in *request.CreateClient, opts ...grpc.CallOption) (*response.CreateClient, error) {
	out := new(response.CreateClient)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error) {
	out := new(response.Client)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) ResetClientKey(ctx context.Context, in *request.ClientKey, opts ...grpc.CallOption) (*response.ResetClient, error) {
	out := new(response.ResetClient)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/ResetClientKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetDataBags(ctx context.Context, in *request.DataBags, opts ...grpc.CallOption) (*response.DataBags, error) {
	out := new(response.DataBags)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetDataBags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetDataBagItems(ctx context.Context, in *request.DataBagItems, opts ...grpc.CallOption) (*response.DataBagItems, error) {
	out := new(response.DataBagItems)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetDataBagItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetDataBagItem(ctx context.Context, in *request.DataBagItem, opts ...grpc.CallOption) (*response.DataBagItem, error) {
	out := new(response.DataBagItem)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateDataBag(ctx context.Context, in *request.CreateDataBag, opts ...grpc.CallOption) (*response.CreateDataBag, error) {
	out := new(response.CreateDataBag)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateDataBag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateDataBagItem(ctx context.Context, in *request.CreateDataBagItem, opts ...grpc.CallOption) (*response.CreateDataBagItem, error) {
	out := new(response.CreateDataBagItem)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteDataBag(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error) {
	out := new(response.DataBag)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteDataBag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteDataBagItem(ctx context.Context, in *request.DataBagItem, opts ...grpc.CallOption) (*response.DataBagItem, error) {
	out := new(response.DataBagItem)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateDataBagItem(ctx context.Context, in *request.UpdateDataBagItem, opts ...grpc.CallOption) (*response.UpdateDataBagItem, error) {
	out := new(response.UpdateDataBagItem)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetEnvironments(ctx context.Context, in *request.Environments, opts ...grpc.CallOption) (*response.Environments, error) {
	out := new(response.Environments)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateEnvironment(ctx context.Context, in *request.CreateEnvironment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateEnvironment(ctx context.Context, in *request.UpdateEnvironment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetEnvironmentRecipes(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.EnvironmentRecipesList, error) {
	out := new(response.EnvironmentRecipesList)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironmentRecipes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*response.Nodes, error) {
	out := new(response.Nodes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetNode(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.Node, error) {
	out := new(response.Node)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteNode(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.DeleteNode, error) {
	out := new(response.DeleteNode)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateNode(ctx context.Context, in *request.NodeDetails, opts ...grpc.CallOption) (*response.Node, error) {
	out := new(response.Node)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateNodeAttributes(ctx context.Context, in *request.UpdateNodeAttributes, opts ...grpc.CallOption) (*response.UpdateNodeAttributes, error) {
	out := new(response.UpdateNodeAttributes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetNodeExpandedRunList(ctx context.Context, in *request.NodeExpandedRunList, opts ...grpc.CallOption) (*response.NodeExpandedRunList, error) {
	out := new(response.NodeExpandedRunList)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetNodeExpandedRunList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateNodeTags(ctx context.Context, in *request.UpdateNodeTags, opts ...grpc.CallOption) (*response.UpdateNodeTags, error) {
	out := new(response.UpdateNodeTags)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateNodeEnvironment(ctx context.Context, in *request.UpdateNodeEnvironment, opts ...grpc.CallOption) (*response.UpdateNodeEnvironment, error) {
	out := new(response.UpdateNodeEnvironment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicyfiles(ctx context.Context, in *request.Policyfiles, opts ...grpc.CallOption) (*response.Policyfiles, error) {
	out := new(response.Policyfiles)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicyfile(ctx context.Context, in *request.Policyfile, opts ...grpc.CallOption) (*response.Policyfile, error) {
	out := new(response.Policyfile)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeletePolicyfile(ctx context.Context, in *request.DeletePolicyfile, opts ...grpc.CallOption) (*response.DeletePolicyfile, error) {
	out := new(response.DeletePolicyfile)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeletePolicyfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicyfileRevisions(ctx context.Context, in *request.PolicyfileRevisions, opts ...grpc.CallOption) (*response.PolicyfileRevisions, error) {
	out := new(response.PolicyfileRevisions)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfileRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicygroup(ctx context.Context, in *request.Policygroup, opts ...grpc.CallOption) (*response.Policygroup, error) {
	out := new(response.Policygroup)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetPolicygroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrgUsersList(ctx context.Context, in *request.OrgUsers, opts ...grpc.CallOption) (*response.OrgUsers, error) {
	out := new(response.OrgUsers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetOrgUsersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetServerUsersList(ctx context.Context, in *request.ServerUsers, opts ...grpc.CallOption) (*response.ServerUsers, error) {
	out := new(response.ServerUsers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServerUsersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetAutomateInfraServerUsersList(ctx context.Context, in *request.AutomateInfraServerUsers, opts ...grpc.CallOption) (*response.AutomateInfraServerUsers, error) {
	out := new(response.AutomateInfraServerUsers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetAutomateInfraServerUsersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetAutomateInfraOrgUsersList(ctx context.Context, in *request.AutomateInfraOrgUsers, opts ...grpc.CallOption) (*response.AutomateInfraOrgUsers, error) {
	out := new(response.AutomateInfraOrgUsers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetAutomateInfraOrgUsersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) ResetInfraServerUserKey(ctx context.Context, in *request.ResetInfraServerUserKeyReq, opts ...grpc.CallOption) (*response.ResetInfraServerUserKeyRes, error) {
	out := new(response.ResetInfraServerUserKeyRes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/ResetInfraServerUserKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraProxyServer is the server API for InfraProxy service.
type InfraProxyServer interface {
	//
	//Get Infra Server
	//
	//Get Infra Servers returns all the servers added to Automate
	//
	//Authorization Action:
	//```
	//infra:infraServers:list
	//```
	GetServers(context.Context, *request.GetServers) (*response.GetServers, error)
	GetServerStatus(context.Context, *request.GetServerStatus) (*response.GetServerStatus, error)
	//
	//Validate Infra Server WebUI Key
	//
	//Returns if the WebUI key stored for a Chef Server is valid or not.
	//In case of invalid webUI key, it returns the error details.
	//
	//Authorization Action:
	//```
	//infra:infraServers:get
	//```
	ValidateWebuiKey(context.Context, *request.ValidateWebuiKey) (*response.ValidateWebuiKey, error)
	//
	//Update Infra Server WebUI Key
	//
	//Updates the WebUI key stored for a Chef Server.
	//
	//Authorization Action:
	//```
	//infra:infraServers:update
	//```
	UpdateWebuiKey(context.Context, *request.UpdateWebuiKey) (*response.UpdateWebuiKey, error)
	//
	//Get Infra Server Details
	//
	//Returns the details of the Infra Server added in Automate.
	//The details include the last sync status, date besides the Server details.
	//
	//Authorization Action:
	//```
	//infra:infraServers:get
	//```
	GetServer(context.Context, *request.GetServer) (*response.GetServer, error)
	//
	//Add Chef Infra Server
	//
	//Adds a Chef Infra Server to Automate and stores the WebUI key, server details.
	//
	//Authorization Action:
	//```
	//infra:infraServers:create
	//```
	CreateServer(context.Context, *request.CreateServer) (*response.CreateServer, error)
	//
	//Update Chef Infra Server
	//
	//Updates Chef Infra Server details in Automate.
	//This API does not update the Chef Infra Server.
	//In order to update the WebUI key, refer the Update WebUI Key api.
	//
	//Authorization Action:
	//```
	//infra:infraServers:update
	//```
	UpdateServer(context.Context, *request.UpdateServer) (*response.UpdateServer, error)
	//
	//Delete Chef Infra Server
	//
	//Deletes a Chef Infra Server details in Automate.
	//This API does not delete the Chef Infra Server.
	//
	//Authorization Action:
	//```
	//infra:infraServers:delete
	//```
	DeleteServer(context.Context, *request.DeleteServer) (*response.DeleteServer, error)
	//
	//Get organisations
	//
	//Gets all the organisations of a Chef Infra Server added in Automate.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgs:list
	//```
	GetOrgs(context.Context, *request.GetOrgs) (*response.GetOrgs, error)
	//
	//Get organisation details
	//
	//Gets the details of an organisation of a Chef Infra Server added in Automate.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgs:get
	//```
	GetOrg(context.Context, *request.GetOrg) (*response.GetOrg, error)
	CreateOrg(context.Context, *request.CreateOrg) (*response.CreateOrg, error)
	UpdateOrg(context.Context, *request.UpdateOrg) (*response.UpdateOrg, error)
	DeleteOrg(context.Context, *request.DeleteOrg) (*response.DeleteOrg, error)
	ResetOrgAdminKey(context.Context, *request.ResetOrgAdminKey) (*response.ResetOrgAdminKey, error)
	GetInfraServerOrgs(context.Context, *request.GetInfraServerOrgs) (*response.GetInfraServerOrgs, error)
	//
	//Get Cookbooks
	//
	//Gets all the cookbooks of an organisation of a Chef Infra Server added in Automate.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsCookbooks:list
	//```
	GetCookbooks(context.Context, *request.Cookbooks) (*response.Cookbooks, error)
	//
	//Get Cookbook Versions
	//
	//Gets all the versions of a cookbook in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsCookbooks:get
	//```
	GetCookbookVersions(context.Context, *request.CookbookVersions) (*response.CookbookVersions, error)
	//
	//Get Cookbook
	//
	//Gets the details of a cookbook in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsCookbooks:get
	//```
	GetCookbook(context.Context, *request.Cookbook) (*response.Cookbook, error)
	//
	//Get Cookbook File Content
	//
	//Gets the contents of a cookbook in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsCookbooks:get
	//```
	GetCookbookFileContent(context.Context, *request.CookbookFileContent) (*response.CookbookFileContent, error)
	//
	//Get Roles
	//
	//Gets all the Roles in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:list
	//```
	GetRoles(context.Context, *request.Roles) (*response.Roles, error)
	//
	//Get Role
	//
	//Gets the details of a Role in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:get
	//```
	GetRole(context.Context, *request.Role) (*response.Role, error)
	//
	//Get Role Expanded Run List
	//
	//Gets the expanded run list of a Role in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:get
	//```
	GetRoleExpandedRunList(context.Context, *request.ExpandedRunList) (*response.ExpandedRunList, error)
	//
	//Get Role Environments
	//
	//Gets the environments of a Role in an organisation
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:get
	//```
	GetRoleEnvironments(context.Context, *request.Role) (*response.RoleEnvironments, error)
	//
	//Create Role
	//
	//Creates a Role in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:create
	//```
	CreateRole(context.Context, *request.CreateRole) (*response.Role, error)
	//
	//Delete Role
	//
	//Deletes a Role in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:delete
	//```
	DeleteRole(context.Context, *request.Role) (*response.Role, error)
	//
	//Update Role
	//
	//Updates a Role in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsRoles:update
	//```
	UpdateRole(context.Context, *request.UpdateRole) (*response.Role, error)
	//
	//Get Clients
	//
	//Gets all Clients in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsClient:get
	//```
	GetClients(context.Context, *request.Clients) (*response.Clients, error)
	//
	//Get Client
	//
	//Gets the details of a Client in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsClient:get
	//```
	GetClient(context.Context, *request.Client) (*response.Client, error)
	//
	//Create Client
	//
	//Creates a Client in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsClient:create
	//```
	CreateClient(context.Context, *request.CreateClient) (*response.CreateClient, error)
	//
	//Delete Client
	//
	//Deletes a Client in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsClient:delete
	//```
	DeleteClient(context.Context, *request.Client) (*response.Client, error)
	//
	//Reset Client Key
	//
	//Resets a Client key  in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsClient:update
	//```
	ResetClientKey(context.Context, *request.ClientKey) (*response.ResetClient, error)
	//
	//Get Data Bags
	//
	//Gets all Data Bags in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBags:get
	//```
	GetDataBags(context.Context, *request.DataBags) (*response.DataBags, error)
	//
	//Get Data Bag Items
	//
	//Gets all the Items in a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBagsItem:get
	//```
	GetDataBagItems(context.Context, *request.DataBagItems) (*response.DataBagItems, error)
	//
	//Get Data Bag Item
	//
	//Gets details of an Items in a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBagsItem:get
	//```
	GetDataBagItem(context.Context, *request.DataBagItem) (*response.DataBagItem, error)
	//
	//Create Data Bag
	//
	//Creates a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBags:create
	//```
	CreateDataBag(context.Context, *request.CreateDataBag) (*response.CreateDataBag, error)
	//
	//Create Data Bag Item
	//
	//Creates an Item in a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBagsItem:create
	//```
	CreateDataBagItem(context.Context, *request.CreateDataBagItem) (*response.CreateDataBagItem, error)
	//
	//Delete Data Bag
	//
	//Deletes a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBags:delete
	//```
	DeleteDataBag(context.Context, *request.DataBag) (*response.DataBag, error)
	//
	//Delete Data Bag Item
	//
	//Deletes an Item in a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBagsItem:delete
	//```
	DeleteDataBagItem(context.Context, *request.DataBagItem) (*response.DataBagItem, error)
	//
	//Update Data Bag Item
	//
	//Updates an Item in a Data Bag in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsDataBagsItem:update
	//```
	UpdateDataBagItem(context.Context, *request.UpdateDataBagItem) (*response.UpdateDataBagItem, error)
	//
	//Get Environments
	//
	//Gets all Environments in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:list
	//```
	GetEnvironments(context.Context, *request.Environments) (*response.Environments, error)
	//
	//Get Environment
	//
	//Gets the details of an Environment in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:get
	//```
	GetEnvironment(context.Context, *request.Environment) (*response.Environment, error)
	//
	//Create Environment
	//
	//Creates an Environment in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:create
	//```
	CreateEnvironment(context.Context, *request.CreateEnvironment) (*response.Environment, error)
	//
	//Delete Environment
	//
	//Deletes an Environment in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:delete
	//```
	DeleteEnvironment(context.Context, *request.Environment) (*response.Environment, error)
	//
	//Update Environment
	//
	//Updates an Environment in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:update
	//```
	UpdateEnvironment(context.Context, *request.UpdateEnvironment) (*response.Environment, error)
	//
	//Get Environment Recipes
	//
	//Gets all the Recipes for an Environment in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsEnvironments:get
	//```
	GetEnvironmentRecipes(context.Context, *request.Environment) (*response.EnvironmentRecipesList, error)
	//
	//Get Nodes
	//
	//Gets all the Nodes in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:get
	//```
	GetNodes(context.Context, *request.Nodes) (*response.Nodes, error)
	//
	//Get Node
	//
	//Gets the details of a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:get
	//```
	GetNode(context.Context, *request.Node) (*response.Node, error)
	//
	//Delete Node
	//
	//Deletes a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:delete
	//```
	DeleteNode(context.Context, *request.Node) (*response.DeleteNode, error)
	//
	//Update Node
	//
	//Updates a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:update
	//```
	UpdateNode(context.Context, *request.NodeDetails) (*response.Node, error)
	//
	//Update Node Attributes
	//
	//Updates the Attributes of a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:update
	//```
	UpdateNodeAttributes(context.Context, *request.UpdateNodeAttributes) (*response.UpdateNodeAttributes, error)
	//
	//Get Node Expanded Run List
	//
	//Gets the Expanded Run List of a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:get
	//```
	GetNodeExpandedRunList(context.Context, *request.NodeExpandedRunList) (*response.NodeExpandedRunList, error)
	//
	//Update Node Tags
	//
	//Updates the tags of a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:update
	//```
	UpdateNodeTags(context.Context, *request.UpdateNodeTags) (*response.UpdateNodeTags, error)
	//
	//Update Node Environment
	//
	//Updates the environment of a Node in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsNodes:update
	//```
	UpdateNodeEnvironment(context.Context, *request.UpdateNodeEnvironment) (*response.UpdateNodeEnvironment, error)
	//
	//Get Policy Files
	//
	//Gets all the Policy Files in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsPolicyFiles:get
	//```
	GetPolicyfiles(context.Context, *request.Policyfiles) (*response.Policyfiles, error)
	//
	//Get Policy File
	//
	//Gets the details of a Policy File in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsPolicyFiles:get
	//```
	GetPolicyfile(context.Context, *request.Policyfile) (*response.Policyfile, error)
	DeletePolicyfile(context.Context, *request.DeletePolicyfile) (*response.DeletePolicyfile, error)
	//
	//Get Policy File Revisions
	//
	//Gets the revisions of a Policy File in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsPolicyFiles:get
	//```
	GetPolicyfileRevisions(context.Context, *request.PolicyfileRevisions) (*response.PolicyfileRevisions, error)
	//
	//Get Policy Group
	//
	//Gets the Policy Group of a Policy File in an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServersOrgsPolicyGroups:get
	//```
	GetPolicygroup(context.Context, *request.Policygroup) (*response.Policygroup, error)
	//
	//Get Org Users List
	//
	//Gets all the users of an organisation in Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServers:get
	//```
	GetOrgUsersList(context.Context, *request.OrgUsers) (*response.OrgUsers, error)
	//
	//Get Server Users List
	//
	//Gets all the users of a Chef Infra Server.
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServers:get
	//```
	GetServerUsersList(context.Context, *request.ServerUsers) (*response.ServerUsers, error)
	GetAutomateInfraServerUsersList(context.Context, *request.AutomateInfraServerUsers) (*response.AutomateInfraServerUsers, error)
	GetAutomateInfraOrgUsersList(context.Context, *request.AutomateInfraOrgUsers) (*response.AutomateInfraOrgUsers, error)
	//
	//Reset Server Users Key
	//
	//Resets the user key of an user in Chef Infra Server
	//This API makes call to Chef Infra Server and fetches data.
	//
	//Authorization Action:
	//```
	//infra:infraServers:list
	//```
	ResetInfraServerUserKey(context.Context, *request.ResetInfraServerUserKeyReq) (*response.ResetInfraServerUserKeyRes, error)
}

// UnimplementedInfraProxyServer can be embedded to have forward compatible implementations.
type UnimplementedInfraProxyServer struct {
}

func (*UnimplementedInfraProxyServer) GetServers(context.Context, *request.GetServers) (*response.GetServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (*UnimplementedInfraProxyServer) GetServerStatus(context.Context, *request.GetServerStatus) (*response.GetServerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerStatus not implemented")
}
func (*UnimplementedInfraProxyServer) ValidateWebuiKey(context.Context, *request.ValidateWebuiKey) (*response.ValidateWebuiKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateWebuiKey not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateWebuiKey(context.Context, *request.UpdateWebuiKey) (*response.UpdateWebuiKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebuiKey not implemented")
}
func (*UnimplementedInfraProxyServer) GetServer(context.Context, *request.GetServer) (*response.GetServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (*UnimplementedInfraProxyServer) CreateServer(context.Context, *request.CreateServer) (*response.CreateServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateServer(context.Context, *request.UpdateServer) (*response.UpdateServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteServer(context.Context, *request.DeleteServer) (*response.DeleteServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrgs(context.Context, *request.GetOrgs) (*response.GetOrgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgs not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrg(context.Context, *request.GetOrg) (*response.GetOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}
func (*UnimplementedInfraProxyServer) CreateOrg(context.Context, *request.CreateOrg) (*response.CreateOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateOrg(context.Context, *request.UpdateOrg) (*response.UpdateOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteOrg(context.Context, *request.DeleteOrg) (*response.DeleteOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrg not implemented")
}
func (*UnimplementedInfraProxyServer) ResetOrgAdminKey(context.Context, *request.ResetOrgAdminKey) (*response.ResetOrgAdminKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetOrgAdminKey not implemented")
}
func (*UnimplementedInfraProxyServer) GetInfraServerOrgs(context.Context, *request.GetInfraServerOrgs) (*response.GetInfraServerOrgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfraServerOrgs not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbooks(context.Context, *request.Cookbooks) (*response.Cookbooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbooks not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbookVersions(context.Context, *request.CookbookVersions) (*response.CookbookVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbookVersions not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbook(context.Context, *request.Cookbook) (*response.Cookbook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbook not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbookFileContent(context.Context, *request.CookbookFileContent) (*response.CookbookFileContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbookFileContent not implemented")
}
func (*UnimplementedInfraProxyServer) GetRoles(context.Context, *request.Roles) (*response.Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (*UnimplementedInfraProxyServer) GetRole(context.Context, *request.Role) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedInfraProxyServer) GetRoleExpandedRunList(context.Context, *request.ExpandedRunList) (*response.ExpandedRunList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleExpandedRunList not implemented")
}
func (*UnimplementedInfraProxyServer) GetRoleEnvironments(context.Context, *request.Role) (*response.RoleEnvironments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleEnvironments not implemented")
}
func (*UnimplementedInfraProxyServer) CreateRole(context.Context, *request.CreateRole) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteRole(context.Context, *request.Role) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateRole(context.Context, *request.UpdateRole) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedInfraProxyServer) GetClients(context.Context, *request.Clients) (*response.Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (*UnimplementedInfraProxyServer) GetClient(context.Context, *request.Client) (*response.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (*UnimplementedInfraProxyServer) CreateClient(context.Context, *request.CreateClient) (*response.CreateClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteClient(context.Context, *request.Client) (*response.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (*UnimplementedInfraProxyServer) ResetClientKey(context.Context, *request.ClientKey) (*response.ResetClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetClientKey not implemented")
}
func (*UnimplementedInfraProxyServer) GetDataBags(context.Context, *request.DataBags) (*response.DataBags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBags not implemented")
}
func (*UnimplementedInfraProxyServer) GetDataBagItems(context.Context, *request.DataBagItems) (*response.DataBagItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBagItems not implemented")
}
func (*UnimplementedInfraProxyServer) GetDataBagItem(context.Context, *request.DataBagItem) (*response.DataBagItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) CreateDataBag(context.Context, *request.CreateDataBag) (*response.CreateDataBag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataBag not implemented")
}
func (*UnimplementedInfraProxyServer) CreateDataBagItem(context.Context, *request.CreateDataBagItem) (*response.CreateDataBagItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteDataBag(context.Context, *request.DataBag) (*response.DataBag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataBag not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteDataBagItem(context.Context, *request.DataBagItem) (*response.DataBagItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateDataBagItem(context.Context, *request.UpdateDataBagItem) (*response.UpdateDataBagItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) GetEnvironments(context.Context, *request.Environments) (*response.Environments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironments not implemented")
}
func (*UnimplementedInfraProxyServer) GetEnvironment(context.Context, *request.Environment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) CreateEnvironment(context.Context, *request.CreateEnvironment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteEnvironment(context.Context, *request.Environment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateEnvironment(context.Context, *request.UpdateEnvironment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) GetEnvironmentRecipes(context.Context, *request.Environment) (*response.EnvironmentRecipesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentRecipes not implemented")
}
func (*UnimplementedInfraProxyServer) GetNodes(context.Context, *request.Nodes) (*response.Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (*UnimplementedInfraProxyServer) GetNode(context.Context, *request.Node) (*response.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteNode(context.Context, *request.Node) (*response.DeleteNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateNode(context.Context, *request.NodeDetails) (*response.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateNodeAttributes(context.Context, *request.UpdateNodeAttributes) (*response.UpdateNodeAttributes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeAttributes not implemented")
}
func (*UnimplementedInfraProxyServer) GetNodeExpandedRunList(context.Context, *request.NodeExpandedRunList) (*response.NodeExpandedRunList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeExpandedRunList not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateNodeTags(context.Context, *request.UpdateNodeTags) (*response.UpdateNodeTags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeTags not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateNodeEnvironment(context.Context, *request.UpdateNodeEnvironment) (*response.UpdateNodeEnvironment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicyfiles(context.Context, *request.Policyfiles) (*response.Policyfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyfiles not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicyfile(context.Context, *request.Policyfile) (*response.Policyfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyfile not implemented")
}
func (*UnimplementedInfraProxyServer) DeletePolicyfile(context.Context, *request.DeletePolicyfile) (*response.DeletePolicyfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicyfile not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicyfileRevisions(context.Context, *request.PolicyfileRevisions) (*response.PolicyfileRevisions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyfileRevisions not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicygroup(context.Context, *request.Policygroup) (*response.Policygroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicygroup not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrgUsersList(context.Context, *request.OrgUsers) (*response.OrgUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgUsersList not implemented")
}
func (*UnimplementedInfraProxyServer) GetServerUsersList(context.Context, *request.ServerUsers) (*response.ServerUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerUsersList not implemented")
}
func (*UnimplementedInfraProxyServer) GetAutomateInfraServerUsersList(context.Context, *request.AutomateInfraServerUsers) (*response.AutomateInfraServerUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutomateInfraServerUsersList not implemented")
}
func (*UnimplementedInfraProxyServer) GetAutomateInfraOrgUsersList(context.Context, *request.AutomateInfraOrgUsers) (*response.AutomateInfraOrgUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutomateInfraOrgUsersList not implemented")
}
func (*UnimplementedInfraProxyServer) ResetInfraServerUserKey(context.Context, *request.ResetInfraServerUserKeyReq) (*response.ResetInfraServerUserKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetInfraServerUserKey not implemented")
}

func RegisterInfraProxyServer(s *grpc.Server, srv InfraProxyServer) {
	s.RegisterService(&_InfraProxy_serviceDesc, srv)
}

func _InfraProxy_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServers(ctx, req.(*request.GetServers))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServerStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServerStatus(ctx, req.(*request.GetServerStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_ValidateWebuiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ValidateWebuiKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).ValidateWebuiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/ValidateWebuiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).ValidateWebuiKey(ctx, req.(*request.ValidateWebuiKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateWebuiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateWebuiKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateWebuiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateWebuiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateWebuiKey(ctx, req.(*request.UpdateWebuiKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServer(ctx, req.(*request.GetServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateServer(ctx, req.(*request.CreateServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateServer(ctx, req.(*request.UpdateServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteServer(ctx, req.(*request.DeleteServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetOrgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrgs(ctx, req.(*request.GetOrgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrg(ctx, req.(*request.GetOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateOrg(ctx, req.(*request.CreateOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateOrg(ctx, req.(*request.UpdateOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteOrg(ctx, req.(*request.DeleteOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_ResetOrgAdminKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResetOrgAdminKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).ResetOrgAdminKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/ResetOrgAdminKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).ResetOrgAdminKey(ctx, req.(*request.ResetOrgAdminKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetInfraServerOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetInfraServerOrgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetInfraServerOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetInfraServerOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetInfraServerOrgs(ctx, req.(*request.GetInfraServerOrgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Cookbooks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbooks(ctx, req.(*request.Cookbooks))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbookVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CookbookVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbookVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbookVersions(ctx, req.(*request.CookbookVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Cookbook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbook(ctx, req.(*request.Cookbook))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbookFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CookbookFileContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbookFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbookFileContent(ctx, req.(*request.CookbookFileContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Roles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRoles(ctx, req.(*request.Roles))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRole(ctx, req.(*request.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRoleExpandedRunList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ExpandedRunList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRoleExpandedRunList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetRoleExpandedRunList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRoleExpandedRunList(ctx, req.(*request.ExpandedRunList))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRoleEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRoleEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetRoleEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRoleEnvironments(ctx, req.(*request.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateRole(ctx, req.(*request.CreateRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteRole(ctx, req.(*request.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateRole(ctx, req.(*request.UpdateRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Clients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetClients(ctx, req.(*request.Clients))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetClient(ctx, req.(*request.Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateClient(ctx, req.(*request.CreateClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteClient(ctx, req.(*request.Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_ResetClientKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ClientKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).ResetClientKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/ResetClientKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).ResetClientKey(ctx, req.(*request.ClientKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetDataBags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetDataBags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetDataBags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetDataBags(ctx, req.(*request.DataBags))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetDataBagItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBagItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetDataBagItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetDataBagItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetDataBagItems(ctx, req.(*request.DataBagItems))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetDataBagItem(ctx, req.(*request.DataBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateDataBag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateDataBag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateDataBag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateDataBag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateDataBag(ctx, req.(*request.CreateDataBag))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateDataBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateDataBagItem(ctx, req.(*request.CreateDataBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteDataBag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteDataBag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteDataBag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteDataBag(ctx, req.(*request.DataBag))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteDataBagItem(ctx, req.(*request.DataBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateDataBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateDataBagItem(ctx, req.(*request.UpdateDataBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetEnvironments(ctx, req.(*request.Environments))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetEnvironment(ctx, req.(*request.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateEnvironment(ctx, req.(*request.CreateEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteEnvironment(ctx, req.(*request.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateEnvironment(ctx, req.(*request.UpdateEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetEnvironmentRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetEnvironmentRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironmentRecipes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetEnvironmentRecipes(ctx, req.(*request.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetNodes(ctx, req.(*request.Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetNode(ctx, req.(*request.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteNode(ctx, req.(*request.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodeDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateNode(ctx, req.(*request.NodeDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateNodeAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateNodeAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateNodeAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateNodeAttributes(ctx, req.(*request.UpdateNodeAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetNodeExpandedRunList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodeExpandedRunList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetNodeExpandedRunList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetNodeExpandedRunList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetNodeExpandedRunList(ctx, req.(*request.NodeExpandedRunList))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateNodeTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateNodeTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateNodeTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateNodeTags(ctx, req.(*request.UpdateNodeTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateNodeEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateNodeEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateNodeEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateNodeEnvironment(ctx, req.(*request.UpdateNodeEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicyfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Policyfiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicyfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicyfiles(ctx, req.(*request.Policyfiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicyfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Policyfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicyfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicyfile(ctx, req.(*request.Policyfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeletePolicyfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeletePolicyfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeletePolicyfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeletePolicyfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeletePolicyfile(ctx, req.(*request.DeletePolicyfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicyfileRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.PolicyfileRevisions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicyfileRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfileRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicyfileRevisions(ctx, req.(*request.PolicyfileRevisions))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicygroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Policygroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicygroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetPolicygroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicygroup(ctx, req.(*request.Policygroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrgUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.OrgUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrgUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetOrgUsersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrgUsersList(ctx, req.(*request.OrgUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetServerUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ServerUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServerUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServerUsersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServerUsersList(ctx, req.(*request.ServerUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetAutomateInfraServerUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.AutomateInfraServerUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetAutomateInfraServerUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetAutomateInfraServerUsersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetAutomateInfraServerUsersList(ctx, req.(*request.AutomateInfraServerUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetAutomateInfraOrgUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.AutomateInfraOrgUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetAutomateInfraOrgUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetAutomateInfraOrgUsersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetAutomateInfraOrgUsersList(ctx, req.(*request.AutomateInfraOrgUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_ResetInfraServerUserKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResetInfraServerUserKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).ResetInfraServerUserKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/ResetInfraServerUserKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).ResetInfraServerUserKey(ctx, req.(*request.ResetInfraServerUserKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfraProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.infra_proxy.InfraProxy",
	HandlerType: (*InfraProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServers",
			Handler:    _InfraProxy_GetServers_Handler,
		},
		{
			MethodName: "GetServerStatus",
			Handler:    _InfraProxy_GetServerStatus_Handler,
		},
		{
			MethodName: "ValidateWebuiKey",
			Handler:    _InfraProxy_ValidateWebuiKey_Handler,
		},
		{
			MethodName: "UpdateWebuiKey",
			Handler:    _InfraProxy_UpdateWebuiKey_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _InfraProxy_GetServer_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _InfraProxy_CreateServer_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _InfraProxy_UpdateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _InfraProxy_DeleteServer_Handler,
		},
		{
			MethodName: "GetOrgs",
			Handler:    _InfraProxy_GetOrgs_Handler,
		},
		{
			MethodName: "GetOrg",
			Handler:    _InfraProxy_GetOrg_Handler,
		},
		{
			MethodName: "CreateOrg",
			Handler:    _InfraProxy_CreateOrg_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _InfraProxy_UpdateOrg_Handler,
		},
		{
			MethodName: "DeleteOrg",
			Handler:    _InfraProxy_DeleteOrg_Handler,
		},
		{
			MethodName: "ResetOrgAdminKey",
			Handler:    _InfraProxy_ResetOrgAdminKey_Handler,
		},
		{
			MethodName: "GetInfraServerOrgs",
			Handler:    _InfraProxy_GetInfraServerOrgs_Handler,
		},
		{
			MethodName: "GetCookbooks",
			Handler:    _InfraProxy_GetCookbooks_Handler,
		},
		{
			MethodName: "GetCookbookVersions",
			Handler:    _InfraProxy_GetCookbookVersions_Handler,
		},
		{
			MethodName: "GetCookbook",
			Handler:    _InfraProxy_GetCookbook_Handler,
		},
		{
			MethodName: "GetCookbookFileContent",
			Handler:    _InfraProxy_GetCookbookFileContent_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _InfraProxy_GetRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _InfraProxy_GetRole_Handler,
		},
		{
			MethodName: "GetRoleExpandedRunList",
			Handler:    _InfraProxy_GetRoleExpandedRunList_Handler,
		},
		{
			MethodName: "GetRoleEnvironments",
			Handler:    _InfraProxy_GetRoleEnvironments_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _InfraProxy_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _InfraProxy_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _InfraProxy_UpdateRole_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _InfraProxy_GetClients_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _InfraProxy_GetClient_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _InfraProxy_CreateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _InfraProxy_DeleteClient_Handler,
		},
		{
			MethodName: "ResetClientKey",
			Handler:    _InfraProxy_ResetClientKey_Handler,
		},
		{
			MethodName: "GetDataBags",
			Handler:    _InfraProxy_GetDataBags_Handler,
		},
		{
			MethodName: "GetDataBagItems",
			Handler:    _InfraProxy_GetDataBagItems_Handler,
		},
		{
			MethodName: "GetDataBagItem",
			Handler:    _InfraProxy_GetDataBagItem_Handler,
		},
		{
			MethodName: "CreateDataBag",
			Handler:    _InfraProxy_CreateDataBag_Handler,
		},
		{
			MethodName: "CreateDataBagItem",
			Handler:    _InfraProxy_CreateDataBagItem_Handler,
		},
		{
			MethodName: "DeleteDataBag",
			Handler:    _InfraProxy_DeleteDataBag_Handler,
		},
		{
			MethodName: "DeleteDataBagItem",
			Handler:    _InfraProxy_DeleteDataBagItem_Handler,
		},
		{
			MethodName: "UpdateDataBagItem",
			Handler:    _InfraProxy_UpdateDataBagItem_Handler,
		},
		{
			MethodName: "GetEnvironments",
			Handler:    _InfraProxy_GetEnvironments_Handler,
		},
		{
			MethodName: "GetEnvironment",
			Handler:    _InfraProxy_GetEnvironment_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _InfraProxy_CreateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _InfraProxy_DeleteEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _InfraProxy_UpdateEnvironment_Handler,
		},
		{
			MethodName: "GetEnvironmentRecipes",
			Handler:    _InfraProxy_GetEnvironmentRecipes_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _InfraProxy_GetNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _InfraProxy_GetNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _InfraProxy_DeleteNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _InfraProxy_UpdateNode_Handler,
		},
		{
			MethodName: "UpdateNodeAttributes",
			Handler:    _InfraProxy_UpdateNodeAttributes_Handler,
		},
		{
			MethodName: "GetNodeExpandedRunList",
			Handler:    _InfraProxy_GetNodeExpandedRunList_Handler,
		},
		{
			MethodName: "UpdateNodeTags",
			Handler:    _InfraProxy_UpdateNodeTags_Handler,
		},
		{
			MethodName: "UpdateNodeEnvironment",
			Handler:    _InfraProxy_UpdateNodeEnvironment_Handler,
		},
		{
			MethodName: "GetPolicyfiles",
			Handler:    _InfraProxy_GetPolicyfiles_Handler,
		},
		{
			MethodName: "GetPolicyfile",
			Handler:    _InfraProxy_GetPolicyfile_Handler,
		},
		{
			MethodName: "DeletePolicyfile",
			Handler:    _InfraProxy_DeletePolicyfile_Handler,
		},
		{
			MethodName: "GetPolicyfileRevisions",
			Handler:    _InfraProxy_GetPolicyfileRevisions_Handler,
		},
		{
			MethodName: "GetPolicygroup",
			Handler:    _InfraProxy_GetPolicygroup_Handler,
		},
		{
			MethodName: "GetOrgUsersList",
			Handler:    _InfraProxy_GetOrgUsersList_Handler,
		},
		{
			MethodName: "GetServerUsersList",
			Handler:    _InfraProxy_GetServerUsersList_Handler,
		},
		{
			MethodName: "GetAutomateInfraServerUsersList",
			Handler:    _InfraProxy_GetAutomateInfraServerUsersList_Handler,
		},
		{
			MethodName: "GetAutomateInfraOrgUsersList",
			Handler:    _InfraProxy_GetAutomateInfraOrgUsersList_Handler,
		},
		{
			MethodName: "ResetInfraServerUserKey",
			Handler:    _InfraProxy_ResetInfraServerUserKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/infra_proxy/infra_proxy.proto",
}
