// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.0
// source: external/infra_proxy/infra_proxy.proto

package infra_proxy

import (
	context "context"
	_ "github.com/chef/automate/api/external/annotations/iam"
	request "github.com/chef/automate/api/external/infra_proxy/request"
	response "github.com/chef/automate/api/external/infra_proxy/response"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_external_infra_proxy_infra_proxy_proto protoreflect.FileDescriptor

const file_external_infra_proxy_infra_proxy_proto_rawDesc = "" +
	"\n" +
	"&external/infra_proxy/infra_proxy.proto\x12\x1dchef.automate.api.infra_proxy\x1a\x1cgoogle/api/annotations.proto\x1a'external/infra_proxy/request/orgs.proto\x1a*external/infra_proxy/request/servers.proto\x1a,external/infra_proxy/request/cookbooks.proto\x1a(external/infra_proxy/request/roles.proto\x1a*external/infra_proxy/request/clients.proto\x1a+external/infra_proxy/request/databags.proto\x1a/external/infra_proxy/request/environments.proto\x1a(external/infra_proxy/request/nodes.proto\x1a.external/infra_proxy/request/policyfiles.proto\x1a(external/infra_proxy/request/users.proto\x1a(external/infra_proxy/response/orgs.proto\x1a+external/infra_proxy/response/servers.proto\x1a-external/infra_proxy/response/cookbooks.proto\x1a)external/infra_proxy/response/roles.proto\x1a+external/infra_proxy/response/clients.proto\x1a,external/infra_proxy/response/databags.proto\x1a0external/infra_proxy/response/environments.proto\x1a)external/infra_proxy/response/nodes.proto\x1a/external/infra_proxy/response/policyfiles.proto\x1a)external/infra_proxy/response/users.proto\x1a*external/annotations/iam/annotations.proto2\xa9y\n" +
	"\n" +
	"InfraProxy\x12\xc3\x01\n" +
	"\n" +
	"GetServers\x121.chef.automate.api.infra_proxy.request.GetServers\x1a2.chef.automate.api.infra_proxy.response.GetServers\"N\x8a\xb5\x18-\n" +
	"\x12infra:infraServers\x12\x17infra:infraServers:list\x82\xd3\xe4\x93\x02\x17\x12\x15/api/v0/infra/servers\x12\xdf\x01\n" +
	"\x0fGetServerStatus\x126.chef.automate.api.infra_proxy.request.GetServerStatus\x1a7.chef.automate.api.infra_proxy.response.GetServerStatus\"[\x8a\xb5\x18,\n" +
	"\x12infra:infraServers\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02%\x12#/api/v0/infra/servers/server_status\x12\xc9\x01\n" +
	"\tGetServer\x120.chef.automate.api.infra_proxy.request.GetServer\x1a1.chef.automate.api.infra_proxy.response.GetServer\"W\x8a\xb5\x181\n" +
	"\x17infra:infraServers:{id}\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02\x1c\x12\x1a/api/v0/infra/servers/{id}\x12\xce\x01\n" +
	"\fCreateServer\x123.chef.automate.api.infra_proxy.request.CreateServer\x1a4.chef.automate.api.infra_proxy.response.CreateServer\"S\x8a\xb5\x18/\n" +
	"\x12infra:infraServers\x12\x19infra:infraServers:create\x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/api/v0/infra/servers\x12\xd8\x01\n" +
	"\fUpdateServer\x123.chef.automate.api.infra_proxy.request.UpdateServer\x1a4.chef.automate.api.infra_proxy.response.UpdateServer\"]\x8a\xb5\x184\n" +
	"\x17infra:infraServers:{id}\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02\x1f:\x01*\x1a\x1a/api/v0/infra/servers/{id}\x12\xd5\x01\n" +
	"\fDeleteServer\x123.chef.automate.api.infra_proxy.request.DeleteServer\x1a4.chef.automate.api.infra_proxy.response.DeleteServer\"Z\x8a\xb5\x184\n" +
	"\x17infra:infraServers:{id}\x12\x19infra:infraServers:delete\x82\xd3\xe4\x93\x02\x1c*\x1a/api/v0/infra/servers/{id}\x12\xdb\x01\n" +
	"\aGetOrgs\x12..chef.automate.api.infra_proxy.request.GetOrgs\x1a/.chef.automate.api.infra_proxy.response.GetOrgs\"o\x8a\xb5\x18=\n" +
	"#infra:infraServers:{server_id}:orgs\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02(\x12&/api/v0/infra/servers/{server_id}/orgs\x12\xe2\x01\n" +
	"\x06GetOrg\x12-.chef.automate.api.infra_proxy.request.GetOrg\x1a..chef.automate.api.infra_proxy.response.GetOrg\"y\x8a\xb5\x18B\n" +
	"(infra:infraServers:{server_id}:orgs:{id}\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02-\x12+/api/v0/infra/servers/{server_id}/orgs/{id}\x12\xe7\x01\n" +
	"\tCreateOrg\x120.chef.automate.api.infra_proxy.request.CreateOrg\x1a1.chef.automate.api.infra_proxy.response.CreateOrg\"u\x8a\xb5\x18@\n" +
	"#infra:infraServers:{server_id}:orgs\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02+:\x01*\"&/api/v0/infra/servers/{server_id}/orgs\x12\xf1\x01\n" +
	"\tUpdateOrg\x120.chef.automate.api.infra_proxy.request.UpdateOrg\x1a1.chef.automate.api.infra_proxy.response.UpdateOrg\"\x7f\x8a\xb5\x18E\n" +
	"(infra:infraServers:{server_id}:orgs:{id}\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x020:\x01*\x1a+/api/v0/infra/servers/{server_id}/orgs/{id}\x12\xee\x01\n" +
	"\tDeleteOrg\x120.chef.automate.api.infra_proxy.request.DeleteOrg\x1a1.chef.automate.api.infra_proxy.response.DeleteOrg\"|\x8a\xb5\x18E\n" +
	"(infra:infraServers:{server_id}:orgs:{id}\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02-*+/api/v0/infra/servers/{server_id}/orgs/{id}\x12\x91\x02\n" +
	"\x10ResetOrgAdminKey\x127.chef.automate.api.infra_proxy.request.ResetOrgAdminKey\x1a8.chef.automate.api.infra_proxy.response.ResetOrgAdminKey\"\x89\x01\x8a\xb5\x18E\n" +
	"(infra:infraServers:{server_id}:orgs:{id}\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02::\x01*\x1a5/api/v0/infra/servers/{server_id}/orgs/{id}/reset-key\x12\x8b\x02\n" +
	"\fGetCookbooks\x120.chef.automate.api.infra_proxy.request.Cookbooks\x1a1.chef.automate.api.infra_proxy.response.Cookbooks\"\x95\x01\x8a\xb5\x18P\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:cookbooks\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02;\x129/api/v0/infra/servers/{server_id}/orgs/{org_id}/cookbooks\x12\xa7\x02\n" +
	"\x13GetCookbookVersions\x127.chef.automate.api.infra_proxy.request.CookbookVersions\x1a8.chef.automate.api.infra_proxy.response.CookbookVersions\"\x9c\x01\x8a\xb5\x18P\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:cookbooks\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02B\x12@/api/v0/infra/servers/{server_id}/orgs/{org_id}/cookbooks/{name}\x12\x99\x02\n" +
	"\vGetCookbook\x12/.chef.automate.api.infra_proxy.request.Cookbook\x1a0.chef.automate.api.infra_proxy.response.Cookbook\"\xa6\x01\x8a\xb5\x18P\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:cookbooks\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02L\x12J/api/v0/infra/servers/{server_id}/orgs/{org_id}/cookbooks/{name}/{version}\x12\xc7\x02\n" +
	"\x16GetCookbookFileContent\x12:.chef.automate.api.infra_proxy.request.CookbookFileContent\x1a;.chef.automate.api.infra_proxy.response.CookbookFileContent\"\xb3\x01\x8a\xb5\x18P\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:cookbooks\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02Y\x12W/api/v0/infra/servers/{server_id}/orgs/{org_id}/cookbooks/{name}/{version}/file-content\x12\xf7\x01\n" +
	"\bGetRoles\x12,.chef.automate.api.infra_proxy.request.Roles\x1a-.chef.automate.api.infra_proxy.response.Roles\"\x8d\x01\x8a\xb5\x18L\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:roles\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x027\x125/api/v0/infra/servers/{server_id}/orgs/{org_id}/roles\x12\xfb\x01\n" +
	"\aGetRole\x12+.chef.automate.api.infra_proxy.request.Role\x1a,.chef.automate.api.infra_proxy.response.Role\"\x94\x01\x8a\xb5\x18L\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:roles\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02>\x12</api/v0/infra/servers/{server_id}/orgs/{org_id}/roles/{name}\x12\xb6\x02\n" +
	"\x16GetRoleExpandedRunList\x126.chef.automate.api.infra_proxy.request.ExpandedRunList\x1a7.chef.automate.api.infra_proxy.response.ExpandedRunList\"\xaa\x01\x8a\xb5\x18L\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:roles\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02T\x12R/api/v0/infra/servers/{server_id}/orgs/{org_id}/roles/{name}/runlist/{environment}\x12\xa0\x02\n" +
	"\x13GetRoleEnvironments\x12+.chef.automate.api.infra_proxy.request.Role\x1a8.chef.automate.api.infra_proxy.response.RoleEnvironments\"\xa1\x01\x8a\xb5\x18L\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:roles\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02K\x12I/api/v0/infra/servers/{server_id}/orgs/{org_id}/roles/{name}/environments\x12\x83\x02\n" +
	"\n" +
	"CreateRole\x121.chef.automate.api.infra_proxy.request.CreateRole\x1a,.chef.automate.api.infra_proxy.response.Role\"\x93\x01\x8a\xb5\x18O\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:roles\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02::\x01*\"5/api/v0/infra/servers/{server_id}/orgs/{org_id}/roles\x12\x81\x02\n" +
	"\n" +
	"DeleteRole\x12+.chef.automate.api.infra_proxy.request.Role\x1a,.chef.automate.api.infra_proxy.response.Role\"\x97\x01\x8a\xb5\x18O\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:roles\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02>*</api/v0/infra/servers/{server_id}/orgs/{org_id}/roles/{name}\x12\x8a\x02\n" +
	"\n" +
	"UpdateRole\x121.chef.automate.api.infra_proxy.request.UpdateRole\x1a,.chef.automate.api.infra_proxy.response.Role\"\x9a\x01\x8a\xb5\x18O\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:roles\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02A:\x01*\x1a</api/v0/infra/servers/{server_id}/orgs/{org_id}/roles/{name}\x12\x81\x02\n" +
	"\n" +
	"GetClients\x12..chef.automate.api.infra_proxy.request.Clients\x1a/.chef.automate.api.infra_proxy.response.Clients\"\x91\x01\x8a\xb5\x18N\n" +
	"4infra:infraServers:{server_id}:orgs:{org_id}:clients\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x029\x127/api/v0/infra/servers/{server_id}/orgs/{org_id}/clients\x12\x80\x02\n" +
	"\tGetClient\x12-.chef.automate.api.infra_proxy.request.Client\x1a..chef.automate.api.infra_proxy.response.Client\"\x93\x01\x8a\xb5\x18I\n" +
	"/infra:servers:{server_id}:orgs:{org_id}:clients\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02@\x12>/api/v0/infra/servers/{server_id}/orgs/{org_id}/clients/{name}\x12\x8e\x02\n" +
	"\fCreateClient\x123.chef.automate.api.infra_proxy.request.CreateClient\x1a4.chef.automate.api.infra_proxy.response.CreateClient\"\x92\x01\x8a\xb5\x18L\n" +
	"/infra:servers:{server_id}:orgs:{org_id}:clients\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02<:\x01*\"7/api/v0/infra/servers/{server_id}/orgs/{org_id}/clients\x12\x86\x02\n" +
	"\fDeleteClient\x12-.chef.automate.api.infra_proxy.request.Client\x1a..chef.automate.api.infra_proxy.response.Client\"\x96\x01\x8a\xb5\x18L\n" +
	"/infra:servers:{server_id}:orgs:{org_id}:clients\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02@*>/api/v0/infra/servers/{server_id}/orgs/{org_id}/clients/{name}\x12\x99\x02\n" +
	"\x0eResetClientKey\x120.chef.automate.api.infra_proxy.request.ClientKey\x1a3.chef.automate.api.infra_proxy.response.ResetClient\"\x9f\x01\x8a\xb5\x18L\n" +
	"/infra:servers:{server_id}:orgs:{org_id}:clients\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02I:\x01*\x1aD/api/v0/infra/servers/{server_id}/orgs/{org_id}/clients/{name}/reset\x12\x88\x02\n" +
	"\vGetDataBags\x12/.chef.automate.api.infra_proxy.request.DataBags\x1a0.chef.automate.api.infra_proxy.response.DataBags\"\x95\x01\x8a\xb5\x18P\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:data_bags\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02;\x129/api/v0/infra/servers/{server_id}/orgs/{org_id}/data_bags\x12\x9b\x02\n" +
	"\x0fGetDataBagItems\x123.chef.automate.api.infra_proxy.request.DataBagItems\x1a4.chef.automate.api.infra_proxy.response.DataBagItems\"\x9c\x01\x8a\xb5\x18P\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:data_bags\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02B\x12@/api/v0/infra/servers/{server_id}/orgs/{org_id}/data_bags/{name}\x12\x9f\x02\n" +
	"\x0eGetDataBagItem\x122.chef.automate.api.infra_proxy.request.DataBagItem\x1a3.chef.automate.api.infra_proxy.response.DataBagItem\"\xa3\x01\x8a\xb5\x18P\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:data_bags\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02I\x12G/api/v0/infra/servers/{server_id}/orgs/{org_id}/data_bags/{name}/{item}\x12\x9a\x02\n" +
	"\rCreateDataBag\x124.chef.automate.api.infra_proxy.request.CreateDataBag\x1a5.chef.automate.api.infra_proxy.response.CreateDataBag\"\x9b\x01\x8a\xb5\x18S\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:data_bags\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02>:\x01*\"9/api/v0/infra/servers/{server_id}/orgs/{org_id}/data_bags\x12\xad\x02\n" +
	"\x11CreateDataBagItem\x128.chef.automate.api.infra_proxy.request.CreateDataBagItem\x1a9.chef.automate.api.infra_proxy.response.CreateDataBagItem\"\xa2\x01\x8a\xb5\x18S\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:data_bags\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02E:\x01*\"@/api/v0/infra/servers/{server_id}/orgs/{org_id}/data_bags/{name}\x12\x92\x02\n" +
	"\rDeleteDataBag\x12..chef.automate.api.infra_proxy.request.DataBag\x1a/.chef.automate.api.infra_proxy.response.DataBag\"\x9f\x01\x8a\xb5\x18S\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:data_bags\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02B*@/api/v0/infra/servers/{server_id}/orgs/{org_id}/data_bags/{name}\x12\xa5\x02\n" +
	"\x11DeleteDataBagItem\x122.chef.automate.api.infra_proxy.request.DataBagItem\x1a3.chef.automate.api.infra_proxy.response.DataBagItem\"\xa6\x01\x8a\xb5\x18S\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:data_bags\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02I*G/api/v0/infra/servers/{server_id}/orgs/{org_id}/data_bags/{name}/{item}\x12\xb7\x02\n" +
	"\x11UpdateDataBagItem\x128.chef.automate.api.infra_proxy.request.UpdateDataBagItem\x1a9.chef.automate.api.infra_proxy.response.UpdateDataBagItem\"\xac\x01\x8a\xb5\x18S\n" +
	"6infra:infraServers:{server_id}:orgs:{org_id}:data_bags\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02O:\x01*\x1aJ/api/v0/infra/servers/{server_id}/orgs/{org_id}/data_bags/{name}/{item_id}\x12\x9a\x02\n" +
	"\x0fGetEnvironments\x123.chef.automate.api.infra_proxy.request.Environments\x1a4.chef.automate.api.infra_proxy.response.Environments\"\x9b\x01\x8a\xb5\x18S\n" +
	"9infra:infraServers:{server_id}:orgs:{org_id}:environments\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02>\x12</api/v0/infra/servers/{server_id}/orgs/{org_id}/environments\x12\x9e\x02\n" +
	"\x0eGetEnvironment\x122.chef.automate.api.infra_proxy.request.Environment\x1a3.chef.automate.api.infra_proxy.response.Environment\"\xa2\x01\x8a\xb5\x18S\n" +
	"9infra:infraServers:{server_id}:orgs:{org_id}:environments\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02E\x12C/api/v0/infra/servers/{server_id}/orgs/{org_id}/environments/{name}\x12\xa6\x02\n" +
	"\x11CreateEnvironment\x128.chef.automate.api.infra_proxy.request.CreateEnvironment\x1a3.chef.automate.api.infra_proxy.response.Environment\"\xa1\x01\x8a\xb5\x18V\n" +
	"9infra:infraServers:{server_id}:orgs:{org_id}:environments\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02A:\x01*\"</api/v0/infra/servers/{server_id}/orgs/{org_id}/environments\x12\xa4\x02\n" +
	"\x11DeleteEnvironment\x122.chef.automate.api.infra_proxy.request.Environment\x1a3.chef.automate.api.infra_proxy.response.Environment\"\xa5\x01\x8a\xb5\x18V\n" +
	"9infra:infraServers:{server_id}:orgs:{org_id}:environments\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02E*C/api/v0/infra/servers/{server_id}/orgs/{org_id}/environments/{name}\x12\xad\x02\n" +
	"\x11UpdateEnvironment\x128.chef.automate.api.infra_proxy.request.UpdateEnvironment\x1a3.chef.automate.api.infra_proxy.response.Environment\"\xa8\x01\x8a\xb5\x18V\n" +
	"9infra:infraServers:{server_id}:orgs:{org_id}:environments\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02H:\x01*\x1aC/api/v0/infra/servers/{server_id}/orgs/{org_id}/environments/{name}\x12\xb8\x02\n" +
	"\x15GetEnvironmentRecipes\x122.chef.automate.api.infra_proxy.request.Environment\x1a>.chef.automate.api.infra_proxy.response.EnvironmentRecipesList\"\xaa\x01\x8a\xb5\x18S\n" +
	"9infra:infraServers:{server_id}:orgs:{org_id}:environments\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02M\x12K/api/v0/infra/servers/{server_id}/orgs/{org_id}/environments/{name}/recipes\x12\xf7\x01\n" +
	"\bGetNodes\x12,.chef.automate.api.infra_proxy.request.Nodes\x1a-.chef.automate.api.infra_proxy.response.Nodes\"\x8d\x01\x8a\xb5\x18L\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:nodes\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x027\x125/api/v0/infra/servers/{server_id}/orgs/{org_id}/nodes\x12\x87\x02\n" +
	"\n" +
	"DeleteNode\x12+.chef.automate.api.infra_proxy.request.Node\x1a2.chef.automate.api.infra_proxy.response.DeleteNode\"\x97\x01\x8a\xb5\x18O\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:nodes\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02>*</api/v0/infra/servers/{server_id}/orgs/{org_id}/nodes/{name}\x12\x8b\x02\n" +
	"\n" +
	"UpdateNode\x122.chef.automate.api.infra_proxy.request.NodeDetails\x1a,.chef.automate.api.infra_proxy.response.Node\"\x9a\x01\x8a\xb5\x18O\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:nodes\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02A:\x01*\x1a</api/v0/infra/servers/{server_id}/orgs/{org_id}/nodes/{name}\x12\xb9\x02\n" +
	"\x14UpdateNodeAttributes\x12;.chef.automate.api.infra_proxy.request.UpdateNodeAttributes\x1a<.chef.automate.api.infra_proxy.response.UpdateNodeAttributes\"\xa5\x01\x8a\xb5\x18O\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:nodes\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02L:\x01*\x1aG/api/v0/infra/servers/{server_id}/orgs/{org_id}/nodes/{name}/attributes\x12\xfb\x01\n" +
	"\aGetNode\x12+.chef.automate.api.infra_proxy.request.Node\x1a,.chef.automate.api.infra_proxy.response.Node\"\x94\x01\x8a\xb5\x18L\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:nodes\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02>\x12</api/v0/infra/servers/{server_id}/orgs/{org_id}/nodes/{name}\x12\xbd\x02\n" +
	"\x16GetNodeExpandedRunList\x12:.chef.automate.api.infra_proxy.request.NodeExpandedRunList\x1a;.chef.automate.api.infra_proxy.response.NodeExpandedRunList\"\xa9\x01\x8a\xb5\x18L\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:nodes\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02S\x12Q/api/v0/infra/servers/{server_id}/orgs/{org_id}/node/{name}/runlist/{environment}\x12\xa1\x02\n" +
	"\x0eUpdateNodeTags\x125.chef.automate.api.infra_proxy.request.UpdateNodeTags\x1a6.chef.automate.api.infra_proxy.response.UpdateNodeTags\"\x9f\x01\x8a\xb5\x18O\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:nodes\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02F:\x01*\x1aA/api/v0/infra/servers/{server_id}/orgs/{org_id}/nodes/{name}/tags\x12\xbd\x02\n" +
	"\x15UpdateNodeEnvironment\x12<.chef.automate.api.infra_proxy.request.UpdateNodeEnvironment\x1a=.chef.automate.api.infra_proxy.response.UpdateNodeEnvironment\"\xa6\x01\x8a\xb5\x18O\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:nodes\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02M:\x01*\x1aH/api/v0/infra/servers/{server_id}/orgs/{org_id}/nodes/{name}/environment\x12\x95\x02\n" +
	"\x0eGetPolicyfiles\x122.chef.automate.api.infra_proxy.request.Policyfiles\x1a3.chef.automate.api.infra_proxy.response.Policyfiles\"\x99\x01\x8a\xb5\x18R\n" +
	"8infra:infraServers:{server_id}:orgs:{org_id}:policyfiles\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02=\x12;/api/v0/infra/servers/{server_id}/orgs/{org_id}/policyfiles\x12\x99\x02\n" +
	"\rGetPolicyfile\x121.chef.automate.api.infra_proxy.request.Policyfile\x1a2.chef.automate.api.infra_proxy.response.Policyfile\"\xa0\x01\x8a\xb5\x18R\n" +
	"8infra:infraServers:{server_id}:orgs:{org_id}:policyfiles\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02D\x12B/api/v0/infra/servers/{server_id}/orgs/{org_id}/policyfiles/{name}\x12\xab\x02\n" +
	"\x10DeletePolicyfile\x127.chef.automate.api.infra_proxy.request.DeletePolicyfile\x1a8.chef.automate.api.infra_proxy.response.DeletePolicyfile\"\xa3\x01\x8a\xb5\x18U\n" +
	"8infra:infraServers:{server_id}:orgs:{org_id}:policyfiles\x12\x19infra:infraServers:update\x82\xd3\xe4\x93\x02D*B/api/v0/infra/servers/{server_id}/orgs/{org_id}/policyfiles/{name}\x12\xbe\x02\n" +
	"\x16GetPolicyfileRevisions\x12:.chef.automate.api.infra_proxy.request.PolicyfileRevisions\x1a;.chef.automate.api.infra_proxy.response.PolicyfileRevisions\"\xaa\x01\x8a\xb5\x18R\n" +
	"8infra:infraServers:{server_id}:orgs:{org_id}:policyfiles\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02N\x12L/api/v0/infra/servers/{server_id}/orgs/{org_id}/policyfiles/{name}/revisions\x12\x9e\x02\n" +
	"\x0eGetPolicygroup\x122.chef.automate.api.infra_proxy.request.Policygroup\x1a3.chef.automate.api.infra_proxy.response.Policygroup\"\xa2\x01\x8a\xb5\x18S\n" +
	"9infra:infraServers:{server_id}:orgs:{org_id}:policygroups\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02E\x12C/api/v0/infra/servers/{server_id}/orgs/{org_id}/policygroups/{name}\x12\x84\x02\n" +
	"\x0fGetOrgUsersList\x12/.chef.automate.api.infra_proxy.request.OrgUsers\x1a0.chef.automate.api.infra_proxy.response.OrgUsers\"\x8d\x01\x8a\xb5\x18L\n" +
	"2infra:infraServers:{server_id}:orgs:{org_id}:users\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x027\x125/api/v0/infra/servers/{server_id}/orgs/{org_id}/users\x12\xf3\x01\n" +
	"\x12GetServerUsersList\x122.chef.automate.api.infra_proxy.request.ServerUsers\x1a3.chef.automate.api.infra_proxy.response.ServerUsers\"t\x8a\xb5\x18>\n" +
	"$infra:infraServers:{server_id}:users\x12\x16infra:infraServers:get\x82\xd3\xe4\x93\x02,:\x01*\"'/api/v0/infra/servers/{server_id}/usersB3Z1github.com/chef/automate/api/external/infra_proxyb\x06proto3"

var file_external_infra_proxy_infra_proxy_proto_goTypes = []any{
	(*request.GetServers)(nil),              // 0: chef.automate.api.infra_proxy.request.GetServers
	(*request.GetServerStatus)(nil),         // 1: chef.automate.api.infra_proxy.request.GetServerStatus
	(*request.GetServer)(nil),               // 2: chef.automate.api.infra_proxy.request.GetServer
	(*request.CreateServer)(nil),            // 3: chef.automate.api.infra_proxy.request.CreateServer
	(*request.UpdateServer)(nil),            // 4: chef.automate.api.infra_proxy.request.UpdateServer
	(*request.DeleteServer)(nil),            // 5: chef.automate.api.infra_proxy.request.DeleteServer
	(*request.GetOrgs)(nil),                 // 6: chef.automate.api.infra_proxy.request.GetOrgs
	(*request.GetOrg)(nil),                  // 7: chef.automate.api.infra_proxy.request.GetOrg
	(*request.CreateOrg)(nil),               // 8: chef.automate.api.infra_proxy.request.CreateOrg
	(*request.UpdateOrg)(nil),               // 9: chef.automate.api.infra_proxy.request.UpdateOrg
	(*request.DeleteOrg)(nil),               // 10: chef.automate.api.infra_proxy.request.DeleteOrg
	(*request.ResetOrgAdminKey)(nil),        // 11: chef.automate.api.infra_proxy.request.ResetOrgAdminKey
	(*request.Cookbooks)(nil),               // 12: chef.automate.api.infra_proxy.request.Cookbooks
	(*request.CookbookVersions)(nil),        // 13: chef.automate.api.infra_proxy.request.CookbookVersions
	(*request.Cookbook)(nil),                // 14: chef.automate.api.infra_proxy.request.Cookbook
	(*request.CookbookFileContent)(nil),     // 15: chef.automate.api.infra_proxy.request.CookbookFileContent
	(*request.Roles)(nil),                   // 16: chef.automate.api.infra_proxy.request.Roles
	(*request.Role)(nil),                    // 17: chef.automate.api.infra_proxy.request.Role
	(*request.ExpandedRunList)(nil),         // 18: chef.automate.api.infra_proxy.request.ExpandedRunList
	(*request.CreateRole)(nil),              // 19: chef.automate.api.infra_proxy.request.CreateRole
	(*request.UpdateRole)(nil),              // 20: chef.automate.api.infra_proxy.request.UpdateRole
	(*request.Clients)(nil),                 // 21: chef.automate.api.infra_proxy.request.Clients
	(*request.Client)(nil),                  // 22: chef.automate.api.infra_proxy.request.Client
	(*request.CreateClient)(nil),            // 23: chef.automate.api.infra_proxy.request.CreateClient
	(*request.ClientKey)(nil),               // 24: chef.automate.api.infra_proxy.request.ClientKey
	(*request.DataBags)(nil),                // 25: chef.automate.api.infra_proxy.request.DataBags
	(*request.DataBagItems)(nil),            // 26: chef.automate.api.infra_proxy.request.DataBagItems
	(*request.DataBagItem)(nil),             // 27: chef.automate.api.infra_proxy.request.DataBagItem
	(*request.CreateDataBag)(nil),           // 28: chef.automate.api.infra_proxy.request.CreateDataBag
	(*request.CreateDataBagItem)(nil),       // 29: chef.automate.api.infra_proxy.request.CreateDataBagItem
	(*request.DataBag)(nil),                 // 30: chef.automate.api.infra_proxy.request.DataBag
	(*request.UpdateDataBagItem)(nil),       // 31: chef.automate.api.infra_proxy.request.UpdateDataBagItem
	(*request.Environments)(nil),            // 32: chef.automate.api.infra_proxy.request.Environments
	(*request.Environment)(nil),             // 33: chef.automate.api.infra_proxy.request.Environment
	(*request.CreateEnvironment)(nil),       // 34: chef.automate.api.infra_proxy.request.CreateEnvironment
	(*request.UpdateEnvironment)(nil),       // 35: chef.automate.api.infra_proxy.request.UpdateEnvironment
	(*request.Nodes)(nil),                   // 36: chef.automate.api.infra_proxy.request.Nodes
	(*request.Node)(nil),                    // 37: chef.automate.api.infra_proxy.request.Node
	(*request.NodeDetails)(nil),             // 38: chef.automate.api.infra_proxy.request.NodeDetails
	(*request.UpdateNodeAttributes)(nil),    // 39: chef.automate.api.infra_proxy.request.UpdateNodeAttributes
	(*request.NodeExpandedRunList)(nil),     // 40: chef.automate.api.infra_proxy.request.NodeExpandedRunList
	(*request.UpdateNodeTags)(nil),          // 41: chef.automate.api.infra_proxy.request.UpdateNodeTags
	(*request.UpdateNodeEnvironment)(nil),   // 42: chef.automate.api.infra_proxy.request.UpdateNodeEnvironment
	(*request.Policyfiles)(nil),             // 43: chef.automate.api.infra_proxy.request.Policyfiles
	(*request.Policyfile)(nil),              // 44: chef.automate.api.infra_proxy.request.Policyfile
	(*request.DeletePolicyfile)(nil),        // 45: chef.automate.api.infra_proxy.request.DeletePolicyfile
	(*request.PolicyfileRevisions)(nil),     // 46: chef.automate.api.infra_proxy.request.PolicyfileRevisions
	(*request.Policygroup)(nil),             // 47: chef.automate.api.infra_proxy.request.Policygroup
	(*request.OrgUsers)(nil),                // 48: chef.automate.api.infra_proxy.request.OrgUsers
	(*request.ServerUsers)(nil),             // 49: chef.automate.api.infra_proxy.request.ServerUsers
	(*response.GetServers)(nil),             // 50: chef.automate.api.infra_proxy.response.GetServers
	(*response.GetServerStatus)(nil),        // 51: chef.automate.api.infra_proxy.response.GetServerStatus
	(*response.GetServer)(nil),              // 52: chef.automate.api.infra_proxy.response.GetServer
	(*response.CreateServer)(nil),           // 53: chef.automate.api.infra_proxy.response.CreateServer
	(*response.UpdateServer)(nil),           // 54: chef.automate.api.infra_proxy.response.UpdateServer
	(*response.DeleteServer)(nil),           // 55: chef.automate.api.infra_proxy.response.DeleteServer
	(*response.GetOrgs)(nil),                // 56: chef.automate.api.infra_proxy.response.GetOrgs
	(*response.GetOrg)(nil),                 // 57: chef.automate.api.infra_proxy.response.GetOrg
	(*response.CreateOrg)(nil),              // 58: chef.automate.api.infra_proxy.response.CreateOrg
	(*response.UpdateOrg)(nil),              // 59: chef.automate.api.infra_proxy.response.UpdateOrg
	(*response.DeleteOrg)(nil),              // 60: chef.automate.api.infra_proxy.response.DeleteOrg
	(*response.ResetOrgAdminKey)(nil),       // 61: chef.automate.api.infra_proxy.response.ResetOrgAdminKey
	(*response.Cookbooks)(nil),              // 62: chef.automate.api.infra_proxy.response.Cookbooks
	(*response.CookbookVersions)(nil),       // 63: chef.automate.api.infra_proxy.response.CookbookVersions
	(*response.Cookbook)(nil),               // 64: chef.automate.api.infra_proxy.response.Cookbook
	(*response.CookbookFileContent)(nil),    // 65: chef.automate.api.infra_proxy.response.CookbookFileContent
	(*response.Roles)(nil),                  // 66: chef.automate.api.infra_proxy.response.Roles
	(*response.Role)(nil),                   // 67: chef.automate.api.infra_proxy.response.Role
	(*response.ExpandedRunList)(nil),        // 68: chef.automate.api.infra_proxy.response.ExpandedRunList
	(*response.RoleEnvironments)(nil),       // 69: chef.automate.api.infra_proxy.response.RoleEnvironments
	(*response.Clients)(nil),                // 70: chef.automate.api.infra_proxy.response.Clients
	(*response.Client)(nil),                 // 71: chef.automate.api.infra_proxy.response.Client
	(*response.CreateClient)(nil),           // 72: chef.automate.api.infra_proxy.response.CreateClient
	(*response.ResetClient)(nil),            // 73: chef.automate.api.infra_proxy.response.ResetClient
	(*response.DataBags)(nil),               // 74: chef.automate.api.infra_proxy.response.DataBags
	(*response.DataBagItems)(nil),           // 75: chef.automate.api.infra_proxy.response.DataBagItems
	(*response.DataBagItem)(nil),            // 76: chef.automate.api.infra_proxy.response.DataBagItem
	(*response.CreateDataBag)(nil),          // 77: chef.automate.api.infra_proxy.response.CreateDataBag
	(*response.CreateDataBagItem)(nil),      // 78: chef.automate.api.infra_proxy.response.CreateDataBagItem
	(*response.DataBag)(nil),                // 79: chef.automate.api.infra_proxy.response.DataBag
	(*response.UpdateDataBagItem)(nil),      // 80: chef.automate.api.infra_proxy.response.UpdateDataBagItem
	(*response.Environments)(nil),           // 81: chef.automate.api.infra_proxy.response.Environments
	(*response.Environment)(nil),            // 82: chef.automate.api.infra_proxy.response.Environment
	(*response.EnvironmentRecipesList)(nil), // 83: chef.automate.api.infra_proxy.response.EnvironmentRecipesList
	(*response.Nodes)(nil),                  // 84: chef.automate.api.infra_proxy.response.Nodes
	(*response.DeleteNode)(nil),             // 85: chef.automate.api.infra_proxy.response.DeleteNode
	(*response.Node)(nil),                   // 86: chef.automate.api.infra_proxy.response.Node
	(*response.UpdateNodeAttributes)(nil),   // 87: chef.automate.api.infra_proxy.response.UpdateNodeAttributes
	(*response.NodeExpandedRunList)(nil),    // 88: chef.automate.api.infra_proxy.response.NodeExpandedRunList
	(*response.UpdateNodeTags)(nil),         // 89: chef.automate.api.infra_proxy.response.UpdateNodeTags
	(*response.UpdateNodeEnvironment)(nil),  // 90: chef.automate.api.infra_proxy.response.UpdateNodeEnvironment
	(*response.Policyfiles)(nil),            // 91: chef.automate.api.infra_proxy.response.Policyfiles
	(*response.Policyfile)(nil),             // 92: chef.automate.api.infra_proxy.response.Policyfile
	(*response.DeletePolicyfile)(nil),       // 93: chef.automate.api.infra_proxy.response.DeletePolicyfile
	(*response.PolicyfileRevisions)(nil),    // 94: chef.automate.api.infra_proxy.response.PolicyfileRevisions
	(*response.Policygroup)(nil),            // 95: chef.automate.api.infra_proxy.response.Policygroup
	(*response.OrgUsers)(nil),               // 96: chef.automate.api.infra_proxy.response.OrgUsers
	(*response.ServerUsers)(nil),            // 97: chef.automate.api.infra_proxy.response.ServerUsers
}
var file_external_infra_proxy_infra_proxy_proto_depIdxs = []int32{
	0,  // 0: chef.automate.api.infra_proxy.InfraProxy.GetServers:input_type -> chef.automate.api.infra_proxy.request.GetServers
	1,  // 1: chef.automate.api.infra_proxy.InfraProxy.GetServerStatus:input_type -> chef.automate.api.infra_proxy.request.GetServerStatus
	2,  // 2: chef.automate.api.infra_proxy.InfraProxy.GetServer:input_type -> chef.automate.api.infra_proxy.request.GetServer
	3,  // 3: chef.automate.api.infra_proxy.InfraProxy.CreateServer:input_type -> chef.automate.api.infra_proxy.request.CreateServer
	4,  // 4: chef.automate.api.infra_proxy.InfraProxy.UpdateServer:input_type -> chef.automate.api.infra_proxy.request.UpdateServer
	5,  // 5: chef.automate.api.infra_proxy.InfraProxy.DeleteServer:input_type -> chef.automate.api.infra_proxy.request.DeleteServer
	6,  // 6: chef.automate.api.infra_proxy.InfraProxy.GetOrgs:input_type -> chef.automate.api.infra_proxy.request.GetOrgs
	7,  // 7: chef.automate.api.infra_proxy.InfraProxy.GetOrg:input_type -> chef.automate.api.infra_proxy.request.GetOrg
	8,  // 8: chef.automate.api.infra_proxy.InfraProxy.CreateOrg:input_type -> chef.automate.api.infra_proxy.request.CreateOrg
	9,  // 9: chef.automate.api.infra_proxy.InfraProxy.UpdateOrg:input_type -> chef.automate.api.infra_proxy.request.UpdateOrg
	10, // 10: chef.automate.api.infra_proxy.InfraProxy.DeleteOrg:input_type -> chef.automate.api.infra_proxy.request.DeleteOrg
	11, // 11: chef.automate.api.infra_proxy.InfraProxy.ResetOrgAdminKey:input_type -> chef.automate.api.infra_proxy.request.ResetOrgAdminKey
	12, // 12: chef.automate.api.infra_proxy.InfraProxy.GetCookbooks:input_type -> chef.automate.api.infra_proxy.request.Cookbooks
	13, // 13: chef.automate.api.infra_proxy.InfraProxy.GetCookbookVersions:input_type -> chef.automate.api.infra_proxy.request.CookbookVersions
	14, // 14: chef.automate.api.infra_proxy.InfraProxy.GetCookbook:input_type -> chef.automate.api.infra_proxy.request.Cookbook
	15, // 15: chef.automate.api.infra_proxy.InfraProxy.GetCookbookFileContent:input_type -> chef.automate.api.infra_proxy.request.CookbookFileContent
	16, // 16: chef.automate.api.infra_proxy.InfraProxy.GetRoles:input_type -> chef.automate.api.infra_proxy.request.Roles
	17, // 17: chef.automate.api.infra_proxy.InfraProxy.GetRole:input_type -> chef.automate.api.infra_proxy.request.Role
	18, // 18: chef.automate.api.infra_proxy.InfraProxy.GetRoleExpandedRunList:input_type -> chef.automate.api.infra_proxy.request.ExpandedRunList
	17, // 19: chef.automate.api.infra_proxy.InfraProxy.GetRoleEnvironments:input_type -> chef.automate.api.infra_proxy.request.Role
	19, // 20: chef.automate.api.infra_proxy.InfraProxy.CreateRole:input_type -> chef.automate.api.infra_proxy.request.CreateRole
	17, // 21: chef.automate.api.infra_proxy.InfraProxy.DeleteRole:input_type -> chef.automate.api.infra_proxy.request.Role
	20, // 22: chef.automate.api.infra_proxy.InfraProxy.UpdateRole:input_type -> chef.automate.api.infra_proxy.request.UpdateRole
	21, // 23: chef.automate.api.infra_proxy.InfraProxy.GetClients:input_type -> chef.automate.api.infra_proxy.request.Clients
	22, // 24: chef.automate.api.infra_proxy.InfraProxy.GetClient:input_type -> chef.automate.api.infra_proxy.request.Client
	23, // 25: chef.automate.api.infra_proxy.InfraProxy.CreateClient:input_type -> chef.automate.api.infra_proxy.request.CreateClient
	22, // 26: chef.automate.api.infra_proxy.InfraProxy.DeleteClient:input_type -> chef.automate.api.infra_proxy.request.Client
	24, // 27: chef.automate.api.infra_proxy.InfraProxy.ResetClientKey:input_type -> chef.automate.api.infra_proxy.request.ClientKey
	25, // 28: chef.automate.api.infra_proxy.InfraProxy.GetDataBags:input_type -> chef.automate.api.infra_proxy.request.DataBags
	26, // 29: chef.automate.api.infra_proxy.InfraProxy.GetDataBagItems:input_type -> chef.automate.api.infra_proxy.request.DataBagItems
	27, // 30: chef.automate.api.infra_proxy.InfraProxy.GetDataBagItem:input_type -> chef.automate.api.infra_proxy.request.DataBagItem
	28, // 31: chef.automate.api.infra_proxy.InfraProxy.CreateDataBag:input_type -> chef.automate.api.infra_proxy.request.CreateDataBag
	29, // 32: chef.automate.api.infra_proxy.InfraProxy.CreateDataBagItem:input_type -> chef.automate.api.infra_proxy.request.CreateDataBagItem
	30, // 33: chef.automate.api.infra_proxy.InfraProxy.DeleteDataBag:input_type -> chef.automate.api.infra_proxy.request.DataBag
	27, // 34: chef.automate.api.infra_proxy.InfraProxy.DeleteDataBagItem:input_type -> chef.automate.api.infra_proxy.request.DataBagItem
	31, // 35: chef.automate.api.infra_proxy.InfraProxy.UpdateDataBagItem:input_type -> chef.automate.api.infra_proxy.request.UpdateDataBagItem
	32, // 36: chef.automate.api.infra_proxy.InfraProxy.GetEnvironments:input_type -> chef.automate.api.infra_proxy.request.Environments
	33, // 37: chef.automate.api.infra_proxy.InfraProxy.GetEnvironment:input_type -> chef.automate.api.infra_proxy.request.Environment
	34, // 38: chef.automate.api.infra_proxy.InfraProxy.CreateEnvironment:input_type -> chef.automate.api.infra_proxy.request.CreateEnvironment
	33, // 39: chef.automate.api.infra_proxy.InfraProxy.DeleteEnvironment:input_type -> chef.automate.api.infra_proxy.request.Environment
	35, // 40: chef.automate.api.infra_proxy.InfraProxy.UpdateEnvironment:input_type -> chef.automate.api.infra_proxy.request.UpdateEnvironment
	33, // 41: chef.automate.api.infra_proxy.InfraProxy.GetEnvironmentRecipes:input_type -> chef.automate.api.infra_proxy.request.Environment
	36, // 42: chef.automate.api.infra_proxy.InfraProxy.GetNodes:input_type -> chef.automate.api.infra_proxy.request.Nodes
	37, // 43: chef.automate.api.infra_proxy.InfraProxy.DeleteNode:input_type -> chef.automate.api.infra_proxy.request.Node
	38, // 44: chef.automate.api.infra_proxy.InfraProxy.UpdateNode:input_type -> chef.automate.api.infra_proxy.request.NodeDetails
	39, // 45: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeAttributes:input_type -> chef.automate.api.infra_proxy.request.UpdateNodeAttributes
	37, // 46: chef.automate.api.infra_proxy.InfraProxy.GetNode:input_type -> chef.automate.api.infra_proxy.request.Node
	40, // 47: chef.automate.api.infra_proxy.InfraProxy.GetNodeExpandedRunList:input_type -> chef.automate.api.infra_proxy.request.NodeExpandedRunList
	41, // 48: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeTags:input_type -> chef.automate.api.infra_proxy.request.UpdateNodeTags
	42, // 49: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeEnvironment:input_type -> chef.automate.api.infra_proxy.request.UpdateNodeEnvironment
	43, // 50: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfiles:input_type -> chef.automate.api.infra_proxy.request.Policyfiles
	44, // 51: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfile:input_type -> chef.automate.api.infra_proxy.request.Policyfile
	45, // 52: chef.automate.api.infra_proxy.InfraProxy.DeletePolicyfile:input_type -> chef.automate.api.infra_proxy.request.DeletePolicyfile
	46, // 53: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfileRevisions:input_type -> chef.automate.api.infra_proxy.request.PolicyfileRevisions
	47, // 54: chef.automate.api.infra_proxy.InfraProxy.GetPolicygroup:input_type -> chef.automate.api.infra_proxy.request.Policygroup
	48, // 55: chef.automate.api.infra_proxy.InfraProxy.GetOrgUsersList:input_type -> chef.automate.api.infra_proxy.request.OrgUsers
	49, // 56: chef.automate.api.infra_proxy.InfraProxy.GetServerUsersList:input_type -> chef.automate.api.infra_proxy.request.ServerUsers
	50, // 57: chef.automate.api.infra_proxy.InfraProxy.GetServers:output_type -> chef.automate.api.infra_proxy.response.GetServers
	51, // 58: chef.automate.api.infra_proxy.InfraProxy.GetServerStatus:output_type -> chef.automate.api.infra_proxy.response.GetServerStatus
	52, // 59: chef.automate.api.infra_proxy.InfraProxy.GetServer:output_type -> chef.automate.api.infra_proxy.response.GetServer
	53, // 60: chef.automate.api.infra_proxy.InfraProxy.CreateServer:output_type -> chef.automate.api.infra_proxy.response.CreateServer
	54, // 61: chef.automate.api.infra_proxy.InfraProxy.UpdateServer:output_type -> chef.automate.api.infra_proxy.response.UpdateServer
	55, // 62: chef.automate.api.infra_proxy.InfraProxy.DeleteServer:output_type -> chef.automate.api.infra_proxy.response.DeleteServer
	56, // 63: chef.automate.api.infra_proxy.InfraProxy.GetOrgs:output_type -> chef.automate.api.infra_proxy.response.GetOrgs
	57, // 64: chef.automate.api.infra_proxy.InfraProxy.GetOrg:output_type -> chef.automate.api.infra_proxy.response.GetOrg
	58, // 65: chef.automate.api.infra_proxy.InfraProxy.CreateOrg:output_type -> chef.automate.api.infra_proxy.response.CreateOrg
	59, // 66: chef.automate.api.infra_proxy.InfraProxy.UpdateOrg:output_type -> chef.automate.api.infra_proxy.response.UpdateOrg
	60, // 67: chef.automate.api.infra_proxy.InfraProxy.DeleteOrg:output_type -> chef.automate.api.infra_proxy.response.DeleteOrg
	61, // 68: chef.automate.api.infra_proxy.InfraProxy.ResetOrgAdminKey:output_type -> chef.automate.api.infra_proxy.response.ResetOrgAdminKey
	62, // 69: chef.automate.api.infra_proxy.InfraProxy.GetCookbooks:output_type -> chef.automate.api.infra_proxy.response.Cookbooks
	63, // 70: chef.automate.api.infra_proxy.InfraProxy.GetCookbookVersions:output_type -> chef.automate.api.infra_proxy.response.CookbookVersions
	64, // 71: chef.automate.api.infra_proxy.InfraProxy.GetCookbook:output_type -> chef.automate.api.infra_proxy.response.Cookbook
	65, // 72: chef.automate.api.infra_proxy.InfraProxy.GetCookbookFileContent:output_type -> chef.automate.api.infra_proxy.response.CookbookFileContent
	66, // 73: chef.automate.api.infra_proxy.InfraProxy.GetRoles:output_type -> chef.automate.api.infra_proxy.response.Roles
	67, // 74: chef.automate.api.infra_proxy.InfraProxy.GetRole:output_type -> chef.automate.api.infra_proxy.response.Role
	68, // 75: chef.automate.api.infra_proxy.InfraProxy.GetRoleExpandedRunList:output_type -> chef.automate.api.infra_proxy.response.ExpandedRunList
	69, // 76: chef.automate.api.infra_proxy.InfraProxy.GetRoleEnvironments:output_type -> chef.automate.api.infra_proxy.response.RoleEnvironments
	67, // 77: chef.automate.api.infra_proxy.InfraProxy.CreateRole:output_type -> chef.automate.api.infra_proxy.response.Role
	67, // 78: chef.automate.api.infra_proxy.InfraProxy.DeleteRole:output_type -> chef.automate.api.infra_proxy.response.Role
	67, // 79: chef.automate.api.infra_proxy.InfraProxy.UpdateRole:output_type -> chef.automate.api.infra_proxy.response.Role
	70, // 80: chef.automate.api.infra_proxy.InfraProxy.GetClients:output_type -> chef.automate.api.infra_proxy.response.Clients
	71, // 81: chef.automate.api.infra_proxy.InfraProxy.GetClient:output_type -> chef.automate.api.infra_proxy.response.Client
	72, // 82: chef.automate.api.infra_proxy.InfraProxy.CreateClient:output_type -> chef.automate.api.infra_proxy.response.CreateClient
	71, // 83: chef.automate.api.infra_proxy.InfraProxy.DeleteClient:output_type -> chef.automate.api.infra_proxy.response.Client
	73, // 84: chef.automate.api.infra_proxy.InfraProxy.ResetClientKey:output_type -> chef.automate.api.infra_proxy.response.ResetClient
	74, // 85: chef.automate.api.infra_proxy.InfraProxy.GetDataBags:output_type -> chef.automate.api.infra_proxy.response.DataBags
	75, // 86: chef.automate.api.infra_proxy.InfraProxy.GetDataBagItems:output_type -> chef.automate.api.infra_proxy.response.DataBagItems
	76, // 87: chef.automate.api.infra_proxy.InfraProxy.GetDataBagItem:output_type -> chef.automate.api.infra_proxy.response.DataBagItem
	77, // 88: chef.automate.api.infra_proxy.InfraProxy.CreateDataBag:output_type -> chef.automate.api.infra_proxy.response.CreateDataBag
	78, // 89: chef.automate.api.infra_proxy.InfraProxy.CreateDataBagItem:output_type -> chef.automate.api.infra_proxy.response.CreateDataBagItem
	79, // 90: chef.automate.api.infra_proxy.InfraProxy.DeleteDataBag:output_type -> chef.automate.api.infra_proxy.response.DataBag
	76, // 91: chef.automate.api.infra_proxy.InfraProxy.DeleteDataBagItem:output_type -> chef.automate.api.infra_proxy.response.DataBagItem
	80, // 92: chef.automate.api.infra_proxy.InfraProxy.UpdateDataBagItem:output_type -> chef.automate.api.infra_proxy.response.UpdateDataBagItem
	81, // 93: chef.automate.api.infra_proxy.InfraProxy.GetEnvironments:output_type -> chef.automate.api.infra_proxy.response.Environments
	82, // 94: chef.automate.api.infra_proxy.InfraProxy.GetEnvironment:output_type -> chef.automate.api.infra_proxy.response.Environment
	82, // 95: chef.automate.api.infra_proxy.InfraProxy.CreateEnvironment:output_type -> chef.automate.api.infra_proxy.response.Environment
	82, // 96: chef.automate.api.infra_proxy.InfraProxy.DeleteEnvironment:output_type -> chef.automate.api.infra_proxy.response.Environment
	82, // 97: chef.automate.api.infra_proxy.InfraProxy.UpdateEnvironment:output_type -> chef.automate.api.infra_proxy.response.Environment
	83, // 98: chef.automate.api.infra_proxy.InfraProxy.GetEnvironmentRecipes:output_type -> chef.automate.api.infra_proxy.response.EnvironmentRecipesList
	84, // 99: chef.automate.api.infra_proxy.InfraProxy.GetNodes:output_type -> chef.automate.api.infra_proxy.response.Nodes
	85, // 100: chef.automate.api.infra_proxy.InfraProxy.DeleteNode:output_type -> chef.automate.api.infra_proxy.response.DeleteNode
	86, // 101: chef.automate.api.infra_proxy.InfraProxy.UpdateNode:output_type -> chef.automate.api.infra_proxy.response.Node
	87, // 102: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeAttributes:output_type -> chef.automate.api.infra_proxy.response.UpdateNodeAttributes
	86, // 103: chef.automate.api.infra_proxy.InfraProxy.GetNode:output_type -> chef.automate.api.infra_proxy.response.Node
	88, // 104: chef.automate.api.infra_proxy.InfraProxy.GetNodeExpandedRunList:output_type -> chef.automate.api.infra_proxy.response.NodeExpandedRunList
	89, // 105: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeTags:output_type -> chef.automate.api.infra_proxy.response.UpdateNodeTags
	90, // 106: chef.automate.api.infra_proxy.InfraProxy.UpdateNodeEnvironment:output_type -> chef.automate.api.infra_proxy.response.UpdateNodeEnvironment
	91, // 107: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfiles:output_type -> chef.automate.api.infra_proxy.response.Policyfiles
	92, // 108: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfile:output_type -> chef.automate.api.infra_proxy.response.Policyfile
	93, // 109: chef.automate.api.infra_proxy.InfraProxy.DeletePolicyfile:output_type -> chef.automate.api.infra_proxy.response.DeletePolicyfile
	94, // 110: chef.automate.api.infra_proxy.InfraProxy.GetPolicyfileRevisions:output_type -> chef.automate.api.infra_proxy.response.PolicyfileRevisions
	95, // 111: chef.automate.api.infra_proxy.InfraProxy.GetPolicygroup:output_type -> chef.automate.api.infra_proxy.response.Policygroup
	96, // 112: chef.automate.api.infra_proxy.InfraProxy.GetOrgUsersList:output_type -> chef.automate.api.infra_proxy.response.OrgUsers
	97, // 113: chef.automate.api.infra_proxy.InfraProxy.GetServerUsersList:output_type -> chef.automate.api.infra_proxy.response.ServerUsers
	57, // [57:114] is the sub-list for method output_type
	0,  // [0:57] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_external_infra_proxy_infra_proxy_proto_init() }
func file_external_infra_proxy_infra_proxy_proto_init() {
	if File_external_infra_proxy_infra_proxy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_external_infra_proxy_infra_proxy_proto_rawDesc), len(file_external_infra_proxy_infra_proxy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_external_infra_proxy_infra_proxy_proto_goTypes,
		DependencyIndexes: file_external_infra_proxy_infra_proxy_proto_depIdxs,
	}.Build()
	File_external_infra_proxy_infra_proxy_proto = out.File
	file_external_infra_proxy_infra_proxy_proto_goTypes = nil
	file_external_infra_proxy_infra_proxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InfraProxyClient is the client API for InfraProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfraProxyClient interface {
	GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error)
	GetServerStatus(ctx context.Context, in *request.GetServerStatus, opts ...grpc.CallOption) (*response.GetServerStatus, error)
	GetServer(ctx context.Context, in *request.GetServer, opts ...grpc.CallOption) (*response.GetServer, error)
	CreateServer(ctx context.Context, in *request.CreateServer, opts ...grpc.CallOption) (*response.CreateServer, error)
	UpdateServer(ctx context.Context, in *request.UpdateServer, opts ...grpc.CallOption) (*response.UpdateServer, error)
	DeleteServer(ctx context.Context, in *request.DeleteServer, opts ...grpc.CallOption) (*response.DeleteServer, error)
	GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error)
	GetOrg(ctx context.Context, in *request.GetOrg, opts ...grpc.CallOption) (*response.GetOrg, error)
	CreateOrg(ctx context.Context, in *request.CreateOrg, opts ...grpc.CallOption) (*response.CreateOrg, error)
	UpdateOrg(ctx context.Context, in *request.UpdateOrg, opts ...grpc.CallOption) (*response.UpdateOrg, error)
	DeleteOrg(ctx context.Context, in *request.DeleteOrg, opts ...grpc.CallOption) (*response.DeleteOrg, error)
	ResetOrgAdminKey(ctx context.Context, in *request.ResetOrgAdminKey, opts ...grpc.CallOption) (*response.ResetOrgAdminKey, error)
	GetCookbooks(ctx context.Context, in *request.Cookbooks, opts ...grpc.CallOption) (*response.Cookbooks, error)
	GetCookbookVersions(ctx context.Context, in *request.CookbookVersions, opts ...grpc.CallOption) (*response.CookbookVersions, error)
	GetCookbook(ctx context.Context, in *request.Cookbook, opts ...grpc.CallOption) (*response.Cookbook, error)
	GetCookbookFileContent(ctx context.Context, in *request.CookbookFileContent, opts ...grpc.CallOption) (*response.CookbookFileContent, error)
	GetRoles(ctx context.Context, in *request.Roles, opts ...grpc.CallOption) (*response.Roles, error)
	GetRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error)
	GetRoleExpandedRunList(ctx context.Context, in *request.ExpandedRunList, opts ...grpc.CallOption) (*response.ExpandedRunList, error)
	GetRoleEnvironments(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.RoleEnvironments, error)
	CreateRole(ctx context.Context, in *request.CreateRole, opts ...grpc.CallOption) (*response.Role, error)
	DeleteRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error)
	UpdateRole(ctx context.Context, in *request.UpdateRole, opts ...grpc.CallOption) (*response.Role, error)
	GetClients(ctx context.Context, in *request.Clients, opts ...grpc.CallOption) (*response.Clients, error)
	GetClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error)
	CreateClient(ctx context.Context, in *request.CreateClient, opts ...grpc.CallOption) (*response.CreateClient, error)
	DeleteClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error)
	ResetClientKey(ctx context.Context, in *request.ClientKey, opts ...grpc.CallOption) (*response.ResetClient, error)
	GetDataBags(ctx context.Context, in *request.DataBags, opts ...grpc.CallOption) (*response.DataBags, error)
	GetDataBagItems(ctx context.Context, in *request.DataBagItems, opts ...grpc.CallOption) (*response.DataBagItems, error)
	GetDataBagItem(ctx context.Context, in *request.DataBagItem, opts ...grpc.CallOption) (*response.DataBagItem, error)
	CreateDataBag(ctx context.Context, in *request.CreateDataBag, opts ...grpc.CallOption) (*response.CreateDataBag, error)
	CreateDataBagItem(ctx context.Context, in *request.CreateDataBagItem, opts ...grpc.CallOption) (*response.CreateDataBagItem, error)
	DeleteDataBag(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error)
	DeleteDataBagItem(ctx context.Context, in *request.DataBagItem, opts ...grpc.CallOption) (*response.DataBagItem, error)
	UpdateDataBagItem(ctx context.Context, in *request.UpdateDataBagItem, opts ...grpc.CallOption) (*response.UpdateDataBagItem, error)
	GetEnvironments(ctx context.Context, in *request.Environments, opts ...grpc.CallOption) (*response.Environments, error)
	GetEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error)
	CreateEnvironment(ctx context.Context, in *request.CreateEnvironment, opts ...grpc.CallOption) (*response.Environment, error)
	DeleteEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error)
	UpdateEnvironment(ctx context.Context, in *request.UpdateEnvironment, opts ...grpc.CallOption) (*response.Environment, error)
	GetEnvironmentRecipes(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.EnvironmentRecipesList, error)
	GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*response.Nodes, error)
	DeleteNode(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.DeleteNode, error)
	UpdateNode(ctx context.Context, in *request.NodeDetails, opts ...grpc.CallOption) (*response.Node, error)
	UpdateNodeAttributes(ctx context.Context, in *request.UpdateNodeAttributes, opts ...grpc.CallOption) (*response.UpdateNodeAttributes, error)
	GetNode(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.Node, error)
	GetNodeExpandedRunList(ctx context.Context, in *request.NodeExpandedRunList, opts ...grpc.CallOption) (*response.NodeExpandedRunList, error)
	UpdateNodeTags(ctx context.Context, in *request.UpdateNodeTags, opts ...grpc.CallOption) (*response.UpdateNodeTags, error)
	UpdateNodeEnvironment(ctx context.Context, in *request.UpdateNodeEnvironment, opts ...grpc.CallOption) (*response.UpdateNodeEnvironment, error)
	GetPolicyfiles(ctx context.Context, in *request.Policyfiles, opts ...grpc.CallOption) (*response.Policyfiles, error)
	GetPolicyfile(ctx context.Context, in *request.Policyfile, opts ...grpc.CallOption) (*response.Policyfile, error)
	DeletePolicyfile(ctx context.Context, in *request.DeletePolicyfile, opts ...grpc.CallOption) (*response.DeletePolicyfile, error)
	GetPolicyfileRevisions(ctx context.Context, in *request.PolicyfileRevisions, opts ...grpc.CallOption) (*response.PolicyfileRevisions, error)
	GetPolicygroup(ctx context.Context, in *request.Policygroup, opts ...grpc.CallOption) (*response.Policygroup, error)
	GetOrgUsersList(ctx context.Context, in *request.OrgUsers, opts ...grpc.CallOption) (*response.OrgUsers, error)
	GetServerUsersList(ctx context.Context, in *request.ServerUsers, opts ...grpc.CallOption) (*response.ServerUsers, error)
}

type infraProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewInfraProxyClient(cc grpc.ClientConnInterface) InfraProxyClient {
	return &infraProxyClient{cc}
}

func (c *infraProxyClient) GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error) {
	out := new(response.GetServers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetServerStatus(ctx context.Context, in *request.GetServerStatus, opts ...grpc.CallOption) (*response.GetServerStatus, error) {
	out := new(response.GetServerStatus)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetServer(ctx context.Context, in *request.GetServer, opts ...grpc.CallOption) (*response.GetServer, error) {
	out := new(response.GetServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateServer(ctx context.Context, in *request.CreateServer, opts ...grpc.CallOption) (*response.CreateServer, error) {
	out := new(response.CreateServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateServer(ctx context.Context, in *request.UpdateServer, opts ...grpc.CallOption) (*response.UpdateServer, error) {
	out := new(response.UpdateServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteServer(ctx context.Context, in *request.DeleteServer, opts ...grpc.CallOption) (*response.DeleteServer, error) {
	out := new(response.DeleteServer)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error) {
	out := new(response.GetOrgs)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrg(ctx context.Context, in *request.GetOrg, opts ...grpc.CallOption) (*response.GetOrg, error) {
	out := new(response.GetOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateOrg(ctx context.Context, in *request.CreateOrg, opts ...grpc.CallOption) (*response.CreateOrg, error) {
	out := new(response.CreateOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateOrg(ctx context.Context, in *request.UpdateOrg, opts ...grpc.CallOption) (*response.UpdateOrg, error) {
	out := new(response.UpdateOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteOrg(ctx context.Context, in *request.DeleteOrg, opts ...grpc.CallOption) (*response.DeleteOrg, error) {
	out := new(response.DeleteOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) ResetOrgAdminKey(ctx context.Context, in *request.ResetOrgAdminKey, opts ...grpc.CallOption) (*response.ResetOrgAdminKey, error) {
	out := new(response.ResetOrgAdminKey)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/ResetOrgAdminKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbooks(ctx context.Context, in *request.Cookbooks, opts ...grpc.CallOption) (*response.Cookbooks, error) {
	out := new(response.Cookbooks)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbookVersions(ctx context.Context, in *request.CookbookVersions, opts ...grpc.CallOption) (*response.CookbookVersions, error) {
	out := new(response.CookbookVersions)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbook(ctx context.Context, in *request.Cookbook, opts ...grpc.CallOption) (*response.Cookbook, error) {
	out := new(response.Cookbook)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbookFileContent(ctx context.Context, in *request.CookbookFileContent, opts ...grpc.CallOption) (*response.CookbookFileContent, error) {
	out := new(response.CookbookFileContent)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRoles(ctx context.Context, in *request.Roles, opts ...grpc.CallOption) (*response.Roles, error) {
	out := new(response.Roles)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRoleExpandedRunList(ctx context.Context, in *request.ExpandedRunList, opts ...grpc.CallOption) (*response.ExpandedRunList, error) {
	out := new(response.ExpandedRunList)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetRoleExpandedRunList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRoleEnvironments(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.RoleEnvironments, error) {
	out := new(response.RoleEnvironments)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetRoleEnvironments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateRole(ctx context.Context, in *request.CreateRole, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateRole(ctx context.Context, in *request.UpdateRole, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetClients(ctx context.Context, in *request.Clients, opts ...grpc.CallOption) (*response.Clients, error) {
	out := new(response.Clients)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error) {
	out := new(response.Client)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateClient(ctx context.Context, in *request.CreateClient, opts ...grpc.CallOption) (*response.CreateClient, error) {
	out := new(response.CreateClient)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error) {
	out := new(response.Client)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) ResetClientKey(ctx context.Context, in *request.ClientKey, opts ...grpc.CallOption) (*response.ResetClient, error) {
	out := new(response.ResetClient)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/ResetClientKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetDataBags(ctx context.Context, in *request.DataBags, opts ...grpc.CallOption) (*response.DataBags, error) {
	out := new(response.DataBags)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetDataBags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetDataBagItems(ctx context.Context, in *request.DataBagItems, opts ...grpc.CallOption) (*response.DataBagItems, error) {
	out := new(response.DataBagItems)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetDataBagItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetDataBagItem(ctx context.Context, in *request.DataBagItem, opts ...grpc.CallOption) (*response.DataBagItem, error) {
	out := new(response.DataBagItem)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateDataBag(ctx context.Context, in *request.CreateDataBag, opts ...grpc.CallOption) (*response.CreateDataBag, error) {
	out := new(response.CreateDataBag)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateDataBag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateDataBagItem(ctx context.Context, in *request.CreateDataBagItem, opts ...grpc.CallOption) (*response.CreateDataBagItem, error) {
	out := new(response.CreateDataBagItem)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteDataBag(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error) {
	out := new(response.DataBag)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteDataBag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteDataBagItem(ctx context.Context, in *request.DataBagItem, opts ...grpc.CallOption) (*response.DataBagItem, error) {
	out := new(response.DataBagItem)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateDataBagItem(ctx context.Context, in *request.UpdateDataBagItem, opts ...grpc.CallOption) (*response.UpdateDataBagItem, error) {
	out := new(response.UpdateDataBagItem)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetEnvironments(ctx context.Context, in *request.Environments, opts ...grpc.CallOption) (*response.Environments, error) {
	out := new(response.Environments)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateEnvironment(ctx context.Context, in *request.CreateEnvironment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/CreateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateEnvironment(ctx context.Context, in *request.UpdateEnvironment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetEnvironmentRecipes(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.EnvironmentRecipesList, error) {
	out := new(response.EnvironmentRecipesList)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironmentRecipes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*response.Nodes, error) {
	out := new(response.Nodes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteNode(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.DeleteNode, error) {
	out := new(response.DeleteNode)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateNode(ctx context.Context, in *request.NodeDetails, opts ...grpc.CallOption) (*response.Node, error) {
	out := new(response.Node)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateNodeAttributes(ctx context.Context, in *request.UpdateNodeAttributes, opts ...grpc.CallOption) (*response.UpdateNodeAttributes, error) {
	out := new(response.UpdateNodeAttributes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetNode(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.Node, error) {
	out := new(response.Node)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetNodeExpandedRunList(ctx context.Context, in *request.NodeExpandedRunList, opts ...grpc.CallOption) (*response.NodeExpandedRunList, error) {
	out := new(response.NodeExpandedRunList)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetNodeExpandedRunList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateNodeTags(ctx context.Context, in *request.UpdateNodeTags, opts ...grpc.CallOption) (*response.UpdateNodeTags, error) {
	out := new(response.UpdateNodeTags)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateNodeEnvironment(ctx context.Context, in *request.UpdateNodeEnvironment, opts ...grpc.CallOption) (*response.UpdateNodeEnvironment, error) {
	out := new(response.UpdateNodeEnvironment)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicyfiles(ctx context.Context, in *request.Policyfiles, opts ...grpc.CallOption) (*response.Policyfiles, error) {
	out := new(response.Policyfiles)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicyfile(ctx context.Context, in *request.Policyfile, opts ...grpc.CallOption) (*response.Policyfile, error) {
	out := new(response.Policyfile)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeletePolicyfile(ctx context.Context, in *request.DeletePolicyfile, opts ...grpc.CallOption) (*response.DeletePolicyfile, error) {
	out := new(response.DeletePolicyfile)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/DeletePolicyfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicyfileRevisions(ctx context.Context, in *request.PolicyfileRevisions, opts ...grpc.CallOption) (*response.PolicyfileRevisions, error) {
	out := new(response.PolicyfileRevisions)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfileRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicygroup(ctx context.Context, in *request.Policygroup, opts ...grpc.CallOption) (*response.Policygroup, error) {
	out := new(response.Policygroup)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetPolicygroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrgUsersList(ctx context.Context, in *request.OrgUsers, opts ...grpc.CallOption) (*response.OrgUsers, error) {
	out := new(response.OrgUsers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetOrgUsersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetServerUsersList(ctx context.Context, in *request.ServerUsers, opts ...grpc.CallOption) (*response.ServerUsers, error) {
	out := new(response.ServerUsers)
	err := c.cc.Invoke(ctx, "/chef.automate.api.infra_proxy.InfraProxy/GetServerUsersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraProxyServer is the server API for InfraProxy service.
type InfraProxyServer interface {
	GetServers(context.Context, *request.GetServers) (*response.GetServers, error)
	GetServerStatus(context.Context, *request.GetServerStatus) (*response.GetServerStatus, error)
	GetServer(context.Context, *request.GetServer) (*response.GetServer, error)
	CreateServer(context.Context, *request.CreateServer) (*response.CreateServer, error)
	UpdateServer(context.Context, *request.UpdateServer) (*response.UpdateServer, error)
	DeleteServer(context.Context, *request.DeleteServer) (*response.DeleteServer, error)
	GetOrgs(context.Context, *request.GetOrgs) (*response.GetOrgs, error)
	GetOrg(context.Context, *request.GetOrg) (*response.GetOrg, error)
	CreateOrg(context.Context, *request.CreateOrg) (*response.CreateOrg, error)
	UpdateOrg(context.Context, *request.UpdateOrg) (*response.UpdateOrg, error)
	DeleteOrg(context.Context, *request.DeleteOrg) (*response.DeleteOrg, error)
	ResetOrgAdminKey(context.Context, *request.ResetOrgAdminKey) (*response.ResetOrgAdminKey, error)
	GetCookbooks(context.Context, *request.Cookbooks) (*response.Cookbooks, error)
	GetCookbookVersions(context.Context, *request.CookbookVersions) (*response.CookbookVersions, error)
	GetCookbook(context.Context, *request.Cookbook) (*response.Cookbook, error)
	GetCookbookFileContent(context.Context, *request.CookbookFileContent) (*response.CookbookFileContent, error)
	GetRoles(context.Context, *request.Roles) (*response.Roles, error)
	GetRole(context.Context, *request.Role) (*response.Role, error)
	GetRoleExpandedRunList(context.Context, *request.ExpandedRunList) (*response.ExpandedRunList, error)
	GetRoleEnvironments(context.Context, *request.Role) (*response.RoleEnvironments, error)
	CreateRole(context.Context, *request.CreateRole) (*response.Role, error)
	DeleteRole(context.Context, *request.Role) (*response.Role, error)
	UpdateRole(context.Context, *request.UpdateRole) (*response.Role, error)
	GetClients(context.Context, *request.Clients) (*response.Clients, error)
	GetClient(context.Context, *request.Client) (*response.Client, error)
	CreateClient(context.Context, *request.CreateClient) (*response.CreateClient, error)
	DeleteClient(context.Context, *request.Client) (*response.Client, error)
	ResetClientKey(context.Context, *request.ClientKey) (*response.ResetClient, error)
	GetDataBags(context.Context, *request.DataBags) (*response.DataBags, error)
	GetDataBagItems(context.Context, *request.DataBagItems) (*response.DataBagItems, error)
	GetDataBagItem(context.Context, *request.DataBagItem) (*response.DataBagItem, error)
	CreateDataBag(context.Context, *request.CreateDataBag) (*response.CreateDataBag, error)
	CreateDataBagItem(context.Context, *request.CreateDataBagItem) (*response.CreateDataBagItem, error)
	DeleteDataBag(context.Context, *request.DataBag) (*response.DataBag, error)
	DeleteDataBagItem(context.Context, *request.DataBagItem) (*response.DataBagItem, error)
	UpdateDataBagItem(context.Context, *request.UpdateDataBagItem) (*response.UpdateDataBagItem, error)
	GetEnvironments(context.Context, *request.Environments) (*response.Environments, error)
	GetEnvironment(context.Context, *request.Environment) (*response.Environment, error)
	CreateEnvironment(context.Context, *request.CreateEnvironment) (*response.Environment, error)
	DeleteEnvironment(context.Context, *request.Environment) (*response.Environment, error)
	UpdateEnvironment(context.Context, *request.UpdateEnvironment) (*response.Environment, error)
	GetEnvironmentRecipes(context.Context, *request.Environment) (*response.EnvironmentRecipesList, error)
	GetNodes(context.Context, *request.Nodes) (*response.Nodes, error)
	DeleteNode(context.Context, *request.Node) (*response.DeleteNode, error)
	UpdateNode(context.Context, *request.NodeDetails) (*response.Node, error)
	UpdateNodeAttributes(context.Context, *request.UpdateNodeAttributes) (*response.UpdateNodeAttributes, error)
	GetNode(context.Context, *request.Node) (*response.Node, error)
	GetNodeExpandedRunList(context.Context, *request.NodeExpandedRunList) (*response.NodeExpandedRunList, error)
	UpdateNodeTags(context.Context, *request.UpdateNodeTags) (*response.UpdateNodeTags, error)
	UpdateNodeEnvironment(context.Context, *request.UpdateNodeEnvironment) (*response.UpdateNodeEnvironment, error)
	GetPolicyfiles(context.Context, *request.Policyfiles) (*response.Policyfiles, error)
	GetPolicyfile(context.Context, *request.Policyfile) (*response.Policyfile, error)
	DeletePolicyfile(context.Context, *request.DeletePolicyfile) (*response.DeletePolicyfile, error)
	GetPolicyfileRevisions(context.Context, *request.PolicyfileRevisions) (*response.PolicyfileRevisions, error)
	GetPolicygroup(context.Context, *request.Policygroup) (*response.Policygroup, error)
	GetOrgUsersList(context.Context, *request.OrgUsers) (*response.OrgUsers, error)
	GetServerUsersList(context.Context, *request.ServerUsers) (*response.ServerUsers, error)
}

// UnimplementedInfraProxyServer can be embedded to have forward compatible implementations.
type UnimplementedInfraProxyServer struct {
}

func (*UnimplementedInfraProxyServer) GetServers(context.Context, *request.GetServers) (*response.GetServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (*UnimplementedInfraProxyServer) GetServerStatus(context.Context, *request.GetServerStatus) (*response.GetServerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerStatus not implemented")
}
func (*UnimplementedInfraProxyServer) GetServer(context.Context, *request.GetServer) (*response.GetServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (*UnimplementedInfraProxyServer) CreateServer(context.Context, *request.CreateServer) (*response.CreateServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateServer(context.Context, *request.UpdateServer) (*response.UpdateServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteServer(context.Context, *request.DeleteServer) (*response.DeleteServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrgs(context.Context, *request.GetOrgs) (*response.GetOrgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgs not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrg(context.Context, *request.GetOrg) (*response.GetOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}
func (*UnimplementedInfraProxyServer) CreateOrg(context.Context, *request.CreateOrg) (*response.CreateOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateOrg(context.Context, *request.UpdateOrg) (*response.UpdateOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteOrg(context.Context, *request.DeleteOrg) (*response.DeleteOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrg not implemented")
}
func (*UnimplementedInfraProxyServer) ResetOrgAdminKey(context.Context, *request.ResetOrgAdminKey) (*response.ResetOrgAdminKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetOrgAdminKey not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbooks(context.Context, *request.Cookbooks) (*response.Cookbooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbooks not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbookVersions(context.Context, *request.CookbookVersions) (*response.CookbookVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbookVersions not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbook(context.Context, *request.Cookbook) (*response.Cookbook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbook not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbookFileContent(context.Context, *request.CookbookFileContent) (*response.CookbookFileContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbookFileContent not implemented")
}
func (*UnimplementedInfraProxyServer) GetRoles(context.Context, *request.Roles) (*response.Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (*UnimplementedInfraProxyServer) GetRole(context.Context, *request.Role) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedInfraProxyServer) GetRoleExpandedRunList(context.Context, *request.ExpandedRunList) (*response.ExpandedRunList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleExpandedRunList not implemented")
}
func (*UnimplementedInfraProxyServer) GetRoleEnvironments(context.Context, *request.Role) (*response.RoleEnvironments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleEnvironments not implemented")
}
func (*UnimplementedInfraProxyServer) CreateRole(context.Context, *request.CreateRole) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteRole(context.Context, *request.Role) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateRole(context.Context, *request.UpdateRole) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedInfraProxyServer) GetClients(context.Context, *request.Clients) (*response.Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (*UnimplementedInfraProxyServer) GetClient(context.Context, *request.Client) (*response.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (*UnimplementedInfraProxyServer) CreateClient(context.Context, *request.CreateClient) (*response.CreateClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteClient(context.Context, *request.Client) (*response.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (*UnimplementedInfraProxyServer) ResetClientKey(context.Context, *request.ClientKey) (*response.ResetClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetClientKey not implemented")
}
func (*UnimplementedInfraProxyServer) GetDataBags(context.Context, *request.DataBags) (*response.DataBags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBags not implemented")
}
func (*UnimplementedInfraProxyServer) GetDataBagItems(context.Context, *request.DataBagItems) (*response.DataBagItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBagItems not implemented")
}
func (*UnimplementedInfraProxyServer) GetDataBagItem(context.Context, *request.DataBagItem) (*response.DataBagItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) CreateDataBag(context.Context, *request.CreateDataBag) (*response.CreateDataBag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataBag not implemented")
}
func (*UnimplementedInfraProxyServer) CreateDataBagItem(context.Context, *request.CreateDataBagItem) (*response.CreateDataBagItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteDataBag(context.Context, *request.DataBag) (*response.DataBag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataBag not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteDataBagItem(context.Context, *request.DataBagItem) (*response.DataBagItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateDataBagItem(context.Context, *request.UpdateDataBagItem) (*response.UpdateDataBagItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) GetEnvironments(context.Context, *request.Environments) (*response.Environments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironments not implemented")
}
func (*UnimplementedInfraProxyServer) GetEnvironment(context.Context, *request.Environment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) CreateEnvironment(context.Context, *request.CreateEnvironment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteEnvironment(context.Context, *request.Environment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateEnvironment(context.Context, *request.UpdateEnvironment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) GetEnvironmentRecipes(context.Context, *request.Environment) (*response.EnvironmentRecipesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentRecipes not implemented")
}
func (*UnimplementedInfraProxyServer) GetNodes(context.Context, *request.Nodes) (*response.Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteNode(context.Context, *request.Node) (*response.DeleteNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateNode(context.Context, *request.NodeDetails) (*response.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateNodeAttributes(context.Context, *request.UpdateNodeAttributes) (*response.UpdateNodeAttributes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeAttributes not implemented")
}
func (*UnimplementedInfraProxyServer) GetNode(context.Context, *request.Node) (*response.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedInfraProxyServer) GetNodeExpandedRunList(context.Context, *request.NodeExpandedRunList) (*response.NodeExpandedRunList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeExpandedRunList not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateNodeTags(context.Context, *request.UpdateNodeTags) (*response.UpdateNodeTags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeTags not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateNodeEnvironment(context.Context, *request.UpdateNodeEnvironment) (*response.UpdateNodeEnvironment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicyfiles(context.Context, *request.Policyfiles) (*response.Policyfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyfiles not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicyfile(context.Context, *request.Policyfile) (*response.Policyfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyfile not implemented")
}
func (*UnimplementedInfraProxyServer) DeletePolicyfile(context.Context, *request.DeletePolicyfile) (*response.DeletePolicyfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicyfile not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicyfileRevisions(context.Context, *request.PolicyfileRevisions) (*response.PolicyfileRevisions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyfileRevisions not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicygroup(context.Context, *request.Policygroup) (*response.Policygroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicygroup not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrgUsersList(context.Context, *request.OrgUsers) (*response.OrgUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgUsersList not implemented")
}
func (*UnimplementedInfraProxyServer) GetServerUsersList(context.Context, *request.ServerUsers) (*response.ServerUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerUsersList not implemented")
}

func RegisterInfraProxyServer(s *grpc.Server, srv InfraProxyServer) {
	s.RegisterService(&_InfraProxy_serviceDesc, srv)
}

func _InfraProxy_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServers(ctx, req.(*request.GetServers))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServerStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServerStatus(ctx, req.(*request.GetServerStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServer(ctx, req.(*request.GetServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateServer(ctx, req.(*request.CreateServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateServer(ctx, req.(*request.UpdateServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteServer(ctx, req.(*request.DeleteServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetOrgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrgs(ctx, req.(*request.GetOrgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrg(ctx, req.(*request.GetOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateOrg(ctx, req.(*request.CreateOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateOrg(ctx, req.(*request.UpdateOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteOrg(ctx, req.(*request.DeleteOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_ResetOrgAdminKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResetOrgAdminKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).ResetOrgAdminKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/ResetOrgAdminKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).ResetOrgAdminKey(ctx, req.(*request.ResetOrgAdminKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Cookbooks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbooks(ctx, req.(*request.Cookbooks))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbookVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CookbookVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbookVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbookVersions(ctx, req.(*request.CookbookVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Cookbook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbook(ctx, req.(*request.Cookbook))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbookFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CookbookFileContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbookFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetCookbookFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbookFileContent(ctx, req.(*request.CookbookFileContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Roles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRoles(ctx, req.(*request.Roles))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRole(ctx, req.(*request.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRoleExpandedRunList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ExpandedRunList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRoleExpandedRunList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetRoleExpandedRunList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRoleExpandedRunList(ctx, req.(*request.ExpandedRunList))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRoleEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRoleEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetRoleEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRoleEnvironments(ctx, req.(*request.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateRole(ctx, req.(*request.CreateRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteRole(ctx, req.(*request.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateRole(ctx, req.(*request.UpdateRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Clients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetClients(ctx, req.(*request.Clients))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetClient(ctx, req.(*request.Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateClient(ctx, req.(*request.CreateClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteClient(ctx, req.(*request.Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_ResetClientKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ClientKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).ResetClientKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/ResetClientKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).ResetClientKey(ctx, req.(*request.ClientKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetDataBags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetDataBags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetDataBags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetDataBags(ctx, req.(*request.DataBags))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetDataBagItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBagItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetDataBagItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetDataBagItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetDataBagItems(ctx, req.(*request.DataBagItems))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetDataBagItem(ctx, req.(*request.DataBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateDataBag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateDataBag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateDataBag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateDataBag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateDataBag(ctx, req.(*request.CreateDataBag))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateDataBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateDataBagItem(ctx, req.(*request.CreateDataBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteDataBag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteDataBag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteDataBag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteDataBag(ctx, req.(*request.DataBag))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteDataBagItem(ctx, req.(*request.DataBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateDataBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateDataBagItem(ctx, req.(*request.UpdateDataBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetEnvironments(ctx, req.(*request.Environments))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetEnvironment(ctx, req.(*request.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateEnvironment(ctx, req.(*request.CreateEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteEnvironment(ctx, req.(*request.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateEnvironment(ctx, req.(*request.UpdateEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetEnvironmentRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetEnvironmentRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetEnvironmentRecipes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetEnvironmentRecipes(ctx, req.(*request.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetNodes(ctx, req.(*request.Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteNode(ctx, req.(*request.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodeDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateNode(ctx, req.(*request.NodeDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateNodeAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateNodeAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateNodeAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateNodeAttributes(ctx, req.(*request.UpdateNodeAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetNode(ctx, req.(*request.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetNodeExpandedRunList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodeExpandedRunList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetNodeExpandedRunList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetNodeExpandedRunList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetNodeExpandedRunList(ctx, req.(*request.NodeExpandedRunList))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateNodeTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateNodeTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateNodeTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateNodeTags(ctx, req.(*request.UpdateNodeTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateNodeEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateNodeEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateNodeEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/UpdateNodeEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateNodeEnvironment(ctx, req.(*request.UpdateNodeEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicyfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Policyfiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicyfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicyfiles(ctx, req.(*request.Policyfiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicyfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Policyfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicyfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicyfile(ctx, req.(*request.Policyfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeletePolicyfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeletePolicyfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeletePolicyfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/DeletePolicyfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeletePolicyfile(ctx, req.(*request.DeletePolicyfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicyfileRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.PolicyfileRevisions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicyfileRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetPolicyfileRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicyfileRevisions(ctx, req.(*request.PolicyfileRevisions))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicygroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Policygroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicygroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetPolicygroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicygroup(ctx, req.(*request.Policygroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrgUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.OrgUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrgUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetOrgUsersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrgUsersList(ctx, req.(*request.OrgUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetServerUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ServerUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServerUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.infra_proxy.InfraProxy/GetServerUsersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServerUsersList(ctx, req.(*request.ServerUsers))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfraProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.infra_proxy.InfraProxy",
	HandlerType: (*InfraProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServers",
			Handler:    _InfraProxy_GetServers_Handler,
		},
		{
			MethodName: "GetServerStatus",
			Handler:    _InfraProxy_GetServerStatus_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _InfraProxy_GetServer_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _InfraProxy_CreateServer_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _InfraProxy_UpdateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _InfraProxy_DeleteServer_Handler,
		},
		{
			MethodName: "GetOrgs",
			Handler:    _InfraProxy_GetOrgs_Handler,
		},
		{
			MethodName: "GetOrg",
			Handler:    _InfraProxy_GetOrg_Handler,
		},
		{
			MethodName: "CreateOrg",
			Handler:    _InfraProxy_CreateOrg_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _InfraProxy_UpdateOrg_Handler,
		},
		{
			MethodName: "DeleteOrg",
			Handler:    _InfraProxy_DeleteOrg_Handler,
		},
		{
			MethodName: "ResetOrgAdminKey",
			Handler:    _InfraProxy_ResetOrgAdminKey_Handler,
		},
		{
			MethodName: "GetCookbooks",
			Handler:    _InfraProxy_GetCookbooks_Handler,
		},
		{
			MethodName: "GetCookbookVersions",
			Handler:    _InfraProxy_GetCookbookVersions_Handler,
		},
		{
			MethodName: "GetCookbook",
			Handler:    _InfraProxy_GetCookbook_Handler,
		},
		{
			MethodName: "GetCookbookFileContent",
			Handler:    _InfraProxy_GetCookbookFileContent_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _InfraProxy_GetRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _InfraProxy_GetRole_Handler,
		},
		{
			MethodName: "GetRoleExpandedRunList",
			Handler:    _InfraProxy_GetRoleExpandedRunList_Handler,
		},
		{
			MethodName: "GetRoleEnvironments",
			Handler:    _InfraProxy_GetRoleEnvironments_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _InfraProxy_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _InfraProxy_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _InfraProxy_UpdateRole_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _InfraProxy_GetClients_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _InfraProxy_GetClient_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _InfraProxy_CreateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _InfraProxy_DeleteClient_Handler,
		},
		{
			MethodName: "ResetClientKey",
			Handler:    _InfraProxy_ResetClientKey_Handler,
		},
		{
			MethodName: "GetDataBags",
			Handler:    _InfraProxy_GetDataBags_Handler,
		},
		{
			MethodName: "GetDataBagItems",
			Handler:    _InfraProxy_GetDataBagItems_Handler,
		},
		{
			MethodName: "GetDataBagItem",
			Handler:    _InfraProxy_GetDataBagItem_Handler,
		},
		{
			MethodName: "CreateDataBag",
			Handler:    _InfraProxy_CreateDataBag_Handler,
		},
		{
			MethodName: "CreateDataBagItem",
			Handler:    _InfraProxy_CreateDataBagItem_Handler,
		},
		{
			MethodName: "DeleteDataBag",
			Handler:    _InfraProxy_DeleteDataBag_Handler,
		},
		{
			MethodName: "DeleteDataBagItem",
			Handler:    _InfraProxy_DeleteDataBagItem_Handler,
		},
		{
			MethodName: "UpdateDataBagItem",
			Handler:    _InfraProxy_UpdateDataBagItem_Handler,
		},
		{
			MethodName: "GetEnvironments",
			Handler:    _InfraProxy_GetEnvironments_Handler,
		},
		{
			MethodName: "GetEnvironment",
			Handler:    _InfraProxy_GetEnvironment_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _InfraProxy_CreateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _InfraProxy_DeleteEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _InfraProxy_UpdateEnvironment_Handler,
		},
		{
			MethodName: "GetEnvironmentRecipes",
			Handler:    _InfraProxy_GetEnvironmentRecipes_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _InfraProxy_GetNodes_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _InfraProxy_DeleteNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _InfraProxy_UpdateNode_Handler,
		},
		{
			MethodName: "UpdateNodeAttributes",
			Handler:    _InfraProxy_UpdateNodeAttributes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _InfraProxy_GetNode_Handler,
		},
		{
			MethodName: "GetNodeExpandedRunList",
			Handler:    _InfraProxy_GetNodeExpandedRunList_Handler,
		},
		{
			MethodName: "UpdateNodeTags",
			Handler:    _InfraProxy_UpdateNodeTags_Handler,
		},
		{
			MethodName: "UpdateNodeEnvironment",
			Handler:    _InfraProxy_UpdateNodeEnvironment_Handler,
		},
		{
			MethodName: "GetPolicyfiles",
			Handler:    _InfraProxy_GetPolicyfiles_Handler,
		},
		{
			MethodName: "GetPolicyfile",
			Handler:    _InfraProxy_GetPolicyfile_Handler,
		},
		{
			MethodName: "DeletePolicyfile",
			Handler:    _InfraProxy_DeletePolicyfile_Handler,
		},
		{
			MethodName: "GetPolicyfileRevisions",
			Handler:    _InfraProxy_GetPolicyfileRevisions_Handler,
		},
		{
			MethodName: "GetPolicygroup",
			Handler:    _InfraProxy_GetPolicygroup_Handler,
		},
		{
			MethodName: "GetOrgUsersList",
			Handler:    _InfraProxy_GetOrgUsersList_Handler,
		},
		{
			MethodName: "GetServerUsersList",
			Handler:    _InfraProxy_GetServerUsersList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/infra_proxy/infra_proxy.proto",
}
