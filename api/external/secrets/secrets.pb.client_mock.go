// Code generated by MockGen. DO NOT EDIT.
// Source: secrets/secrets.pb.go

// Package secrets is a generated GoMock package.
package secrets

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSecretsServiceClient is a mock of SecretsServiceClient interface
type MockSecretsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsServiceClientMockRecorder
}

// MockSecretsServiceClientMockRecorder is the mock recorder for MockSecretsServiceClient
type MockSecretsServiceClientMockRecorder struct {
	mock *MockSecretsServiceClient
}

// NewMockSecretsServiceClient creates a new mock instance
func NewMockSecretsServiceClient(ctrl *gomock.Controller) *MockSecretsServiceClient {
	mock := &MockSecretsServiceClient{ctrl: ctrl}
	mock.recorder = &MockSecretsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretsServiceClient) EXPECT() *MockSecretsServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSecretsServiceClient) Create(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*Id, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSecretsServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretsServiceClient)(nil).Create), varargs...)
}

// Read mocks base method
func (m *MockSecretsServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockSecretsServiceClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSecretsServiceClient)(nil).Read), varargs...)
}

// Update mocks base method
func (m *MockSecretsServiceClient) Update(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockSecretsServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretsServiceClient)(nil).Update), varargs...)
}

// Delete mocks base method
func (m *MockSecretsServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSecretsServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretsServiceClient)(nil).Delete), varargs...)
}

// List mocks base method
func (m *MockSecretsServiceClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Secrets, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*Secrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSecretsServiceClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretsServiceClient)(nil).List), varargs...)
}

// MockSecretsServiceServer is a mock of SecretsServiceServer interface
type MockSecretsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsServiceServerMockRecorder
}

// MockSecretsServiceServerMockRecorder is the mock recorder for MockSecretsServiceServer
type MockSecretsServiceServerMockRecorder struct {
	mock *MockSecretsServiceServer
}

// NewMockSecretsServiceServer creates a new mock instance
func NewMockSecretsServiceServer(ctrl *gomock.Controller) *MockSecretsServiceServer {
	mock := &MockSecretsServiceServer{ctrl: ctrl}
	mock.recorder = &MockSecretsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSecretsServiceServer) EXPECT() *MockSecretsServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSecretsServiceServer) Create(arg0 context.Context, arg1 *Secret) (*Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSecretsServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretsServiceServer)(nil).Create), arg0, arg1)
}

// Read mocks base method
func (m *MockSecretsServiceServer) Read(arg0 context.Context, arg1 *Id) (*Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockSecretsServiceServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSecretsServiceServer)(nil).Read), arg0, arg1)
}

// Update mocks base method
func (m *MockSecretsServiceServer) Update(arg0 context.Context, arg1 *Secret) (*UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockSecretsServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretsServiceServer)(nil).Update), arg0, arg1)
}

// Delete mocks base method
func (m *MockSecretsServiceServer) Delete(arg0 context.Context, arg1 *Id) (*DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSecretsServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretsServiceServer)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (m *MockSecretsServiceServer) List(arg0 context.Context, arg1 *Query) (*Secrets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*Secrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockSecretsServiceServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretsServiceServer)(nil).List), arg0, arg1)
}
