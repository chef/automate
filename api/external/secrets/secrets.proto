syntax = "proto3";

package chef.automate.api.secrets;
option go_package = "github.com/chef/automate/api/external/secrets";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

import "external/annotations/iam/annotations.proto";

import "external/common/query/parameters.proto";

service SecretsService {
	/*
	Create a secret

	Creates a secret. Requires values for name, type, and data.

	Supported types: ssh, winrm, sudo, aws, azure, gcp, service_now
	Supported keys by type: 
		ssh: username, password, key
		winrm: username, password
		sudo: username, password
		service_now: username, password
		aws: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
		azure: AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID
		azure: AZURE_SUBSCRIPTION_ID is optional 
		gcp: GOOGLE_CREDENTIALS_JSON

	Example:
	```
	{
		"name": "my ssh secret",
		"type": "ssh",
		"data": [
			{ "key": "username", "value": "vagrant" },
			{ "key": "password", "value": "vagrant"} 
		]
	}
	```

	Authorization Action:
	```
	secrets:secrets:create
	```
	*/
	rpc Create(Secret) returns (Id) {
		option (google.api.http) = {
			post: "/api/v0/secrets"
			body: "*"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "secrets:secrets"
			action: "secrets:secrets:create"
		};
	};

	/*
	Read a secret

	Reads a secret given the ID of the secret.
	Note that the secret information (password and key values) will not be returned by the API, as a safety measure.

	Authorization Action:
	```
	secrets:secrets:get
	```
	*/
	rpc Read(Id) returns (Secret) {
		option (google.api.http) = {
			get: "/api/v0/secrets/id/{id}"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "secrets:secrets:{id}"
			action: "secrets:secrets:get"
		};
	};

	/*
	Update a secret

	Updates a secret. 
	This is a PATCH operation, meaning the details sent in will override/replace those stored in the DB.
	Secret information that is not in the body of the request will persist.

	Example:
	```
	given a credential with a username and password, a user could update the password by passing in the following body, 
	and the name of the secret as well as the username for the secret be unchanged:

	{
		"id": "525c013a-2ab3-4e6f-9005-51bc620e9157",
		"data": [
			{ "key": "password", "value": "new-value"} 
		]
	}
	```

	Authorization Action:
	```
	secrets:secrets:update
	```
	*/
	rpc Update(Secret) returns (UpdateResponse) {
		option (google.api.http) = {
			patch: "/api/v0/secrets/id/{id}"
			body: "*"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "secrets:secrets:{id}"
			action: "secrets:secrets:update"
		};
	};

	/*
	Delete a secret

	Deletes a secret given the ID of the secret.
	Note that any nodes that were using the secret will no longer be associated with the deleted secret.

	Authorization Action:
	```
	secrets:secrets:delete
	```
	*/
	rpc Delete(Id) returns (DeleteResponse) {
		option (google.api.http) = {
			delete: "/api/v0/secrets/id/{id}"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "secrets:secrets:{id}"
			action: "secrets:secrets:delete"
		};
	};

	/*
	List and filter secrets

	Makes a list of secrets.
	Supports filtering, pagination, and sorting.
	Adding a filter narrows the list of secrets to only those that match the filter or filters.
	Supported filters: type, name
	Supported sort types: name, type, last modified

	Example:
	```
	{
		"sort": "type",
		"order": "ASC",
		"filters": [
			{ "key": "type", "values": ["ssh","winrm","sudo"] }
		],
		"page":1,
		"per_page":100
	}
	```

	Authorization Action:
	```
	secrets:secrets:list
	```
	*/
	rpc List(Query) returns (Secrets) {
		option (google.api.http) = {
			post: "/api/v0/secrets/search"
			body: "*"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "secrets:secrets"
			action: "secrets:secrets:list"
		};
	};
}

message UpdateResponse {}
message DeleteResponse {}


message Id {
	// Unique node ID (UUID).
	string id = 1;
}

message Query {
	// Use filters to limit the set of secrets.
	repeated chef.automate.api.common.query.Filter filters = 20;
	// Return the results in ascending or descending order.
	enum OrderType {
		ASC = 0;
		DESC = 1;
	}
	OrderType order = 21;
	// Sort the results on a specific field.
	string sort = 22;
	// Starting page for the results.
	int32 page = 23;
	// The number of results on each page.
	int32 per_page = 24;
}

message Secret {
	// Unique node ID (UUID).
	string id = 1;
	// User-specified name for the secret.
	string name = 2;
	// Type of credential: ssh, winrm, sudo, aws, azure, gcp, service_now
	string type = 3;
	// Timestamp denoting when the secret was last modified.
	google.protobuf.Timestamp last_modified = 20;
	// Tags to associate with the secret.
	repeated chef.automate.api.common.query.Kv tags = 21;
	// Secret data, where the kv structs for the credential data live.
	repeated chef.automate.api.common.query.Kv data = 22;
}

message Secrets {
	// List of secrets.
	repeated Secret secrets = 1;
	// Total count of secrets
	int32 total = 20;
}
