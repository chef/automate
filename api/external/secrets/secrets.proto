syntax = "proto3";

package chef.automate.api.secrets;
option go_package = "github.com/chef/automate/api/external/secrets";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

import "api/external/common/query/parameters.proto";

service SecretsService {
	rpc Create(Secret) returns (Id) {
		option (google.api.http) = {
			post: "/secrets"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "secrets"
			action: "create"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "secrets:secrets"
			action: "secrets:secrets:create"
		};
	};
	rpc Read(Id) returns (Secret) {
		option (google.api.http) = {
			get: "/secrets/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "secrets:{id}"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "secrets:secrets:{id}"
			action: "secrets:secrets:get"
		};
	};
	rpc Update(Secret) returns (UpdateResponse) {
		option (google.api.http) = {
			patch: "/secrets/id/{id}"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "secrets:{id}"
			action: "update"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "secrets:secrets:{id}"
			action: "secrets:secrets:update"
		};
	};
	rpc Delete(Id) returns (DeleteResponse) {
		option (google.api.http) = {
			delete: "/secrets/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "secrets:{id}"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "secrets:secrets:{id}"
			action: "secrets:secrets:delete"
		};
	};
	rpc List(Query) returns (Secrets) {
		option (google.api.http) = {
			post: "/secrets/search"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "secrets"
			action: "search"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "secrets:secrets"
			action: "secrets:secrets:list"
		};
	};
}

message UpdateResponse {}
message DeleteResponse {}

message Id {
	string id = 1;
}

message Query {
	repeated chef.automate.api.common.query.Filter filters = 20;
	enum OrderType {
		ASC = 0;
		DESC = 1;
	}
	OrderType order = 21;
	string sort = 22;
	int32 page = 23;
	int32 per_page = 24;
}

message Secret {
	string id = 1;
	string name = 2;
	string type = 3;
	google.protobuf.Timestamp last_modified = 20;
	repeated chef.automate.api.common.query.Kv tags = 21;
	repeated chef.automate.api.common.query.Kv data = 22;
}

message Secrets {
	repeated Secret secrets = 1;
	int32 total = 20;
}
