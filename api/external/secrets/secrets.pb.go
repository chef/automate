// Code generated by protoc-gen-go. DO NOT EDIT.
// source: external/secrets/secrets.proto

package secrets

import (
	context "context"
	fmt "fmt"
	query "github.com/chef/automate/api/external/common/query"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Return the results in ascending or descending order.
type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

var Query_OrderType_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var Query_OrderType_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x Query_OrderType) String() string {
	return proto.EnumName(Query_OrderType_name, int32(x))
}

func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a1e9800fc90e8b9, []int{3, 0}
}

type UpdateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a1e9800fc90e8b9, []int{0}
}

func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateResponse.Unmarshal(m, b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
}
func (m *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(m, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateResponse.Size(m)
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

type DeleteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a1e9800fc90e8b9, []int{1}
}

func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteResponse.Unmarshal(m, b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteResponse.Size(m)
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

type Id struct {
	// Unique node ID (UUID).
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a1e9800fc90e8b9, []int{2}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Query struct {
	// Use filters to limit the set of secrets.
	Filters []*query.Filter `protobuf:"bytes,20,rep,name=filters,proto3" json:"filters,omitempty"`
	Order   Query_OrderType `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.api.secrets.Query_OrderType" json:"order,omitempty"`
	// Sort the results on a specific field.
	Sort string `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty"`
	// The number of result pages to return.
	Page int32 `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`
	// The number of results on each page.
	PerPage              int32    `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a1e9800fc90e8b9, []int{3}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetFilters() []*query.Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Query) GetOrder() Query_OrderType {
	if m != nil {
		return m.Order
	}
	return Query_ASC
}

func (m *Query) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *Query) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Query) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type Secret struct {
	// Unique node ID (UUID).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User-specified name for the secret.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of credential: ssh, winrm, sudo, aws, azure, gcp, service_now
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Timestamp denoting when the secret was last modified.
	LastModified *timestamp.Timestamp `protobuf:"bytes,20,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// Tags to associate with the secret.
	Tags []*query.Kv `protobuf:"bytes,21,rep,name=tags,proto3" json:"tags,omitempty"`
	// Secret data, where the kv structs for the credential data live.
	Data                 []*query.Kv `protobuf:"bytes,22,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Secret) Reset()         { *m = Secret{} }
func (m *Secret) String() string { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()    {}
func (*Secret) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a1e9800fc90e8b9, []int{4}
}

func (m *Secret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secret.Unmarshal(m, b)
}
func (m *Secret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secret.Marshal(b, m, deterministic)
}
func (m *Secret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret.Merge(m, src)
}
func (m *Secret) XXX_Size() int {
	return xxx_messageInfo_Secret.Size(m)
}
func (m *Secret) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret.DiscardUnknown(m)
}

var xxx_messageInfo_Secret proto.InternalMessageInfo

func (m *Secret) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Secret) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Secret) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Secret) GetLastModified() *timestamp.Timestamp {
	if m != nil {
		return m.LastModified
	}
	return nil
}

func (m *Secret) GetTags() []*query.Kv {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Secret) GetData() []*query.Kv {
	if m != nil {
		return m.Data
	}
	return nil
}

type Secrets struct {
	// List of secrets.
	Secrets []*Secret `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty"`
	// Total count of secrets
	Total                int32    `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Secrets) Reset()         { *m = Secrets{} }
func (m *Secrets) String() string { return proto.CompactTextString(m) }
func (*Secrets) ProtoMessage()    {}
func (*Secrets) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a1e9800fc90e8b9, []int{5}
}

func (m *Secrets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secrets.Unmarshal(m, b)
}
func (m *Secrets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secrets.Marshal(b, m, deterministic)
}
func (m *Secrets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secrets.Merge(m, src)
}
func (m *Secrets) XXX_Size() int {
	return xxx_messageInfo_Secrets.Size(m)
}
func (m *Secrets) XXX_DiscardUnknown() {
	xxx_messageInfo_Secrets.DiscardUnknown(m)
}

var xxx_messageInfo_Secrets proto.InternalMessageInfo

func (m *Secrets) GetSecrets() []*Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *Secrets) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterEnum("chef.automate.api.secrets.Query_OrderType", Query_OrderType_name, Query_OrderType_value)
	proto.RegisterType((*UpdateResponse)(nil), "chef.automate.api.secrets.UpdateResponse")
	proto.RegisterType((*DeleteResponse)(nil), "chef.automate.api.secrets.DeleteResponse")
	proto.RegisterType((*Id)(nil), "chef.automate.api.secrets.Id")
	proto.RegisterType((*Query)(nil), "chef.automate.api.secrets.Query")
	proto.RegisterType((*Secret)(nil), "chef.automate.api.secrets.Secret")
	proto.RegisterType((*Secrets)(nil), "chef.automate.api.secrets.Secrets")
}

func init() {
	proto.RegisterFile("external/secrets/secrets.proto", fileDescriptor_9a1e9800fc90e8b9)
}

var fileDescriptor_9a1e9800fc90e8b9 = []byte{
	// 727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x65, 0xd2, 0x3c, 0xda, 0x29, 0xa4, 0xd5, 0x90, 0xa6, 0xd3, 0x50, 0x4a, 0xf0, 0xa2, 0xa4,
	0x41, 0xb1, 0x51, 0x10, 0x2c, 0xc2, 0x82, 0x42, 0x0b, 0xa8, 0xa2, 0x3c, 0xea, 0x94, 0x0d, 0x42,
	0xaa, 0xa6, 0xf6, 0x8d, 0x3b, 0x92, 0x5f, 0xd8, 0x93, 0x8a, 0x08, 0xb1, 0x61, 0x99, 0x6d, 0x37,
	0x88, 0x3d, 0x3b, 0xb6, 0xf9, 0x12, 0x7e, 0x81, 0x35, 0x12, 0x7f, 0x80, 0x3c, 0xb6, 0x2b, 0xe4,
	0x90, 0xa4, 0xac, 0x32, 0x39, 0x3a, 0xe7, 0xde, 0x33, 0x67, 0x66, 0xae, 0xf1, 0x06, 0x7c, 0x10,
	0x10, 0xb8, 0xcc, 0xd6, 0x42, 0x30, 0x02, 0x10, 0x61, 0xfa, 0xab, 0xfa, 0x81, 0x27, 0x3c, 0xb2,
	0x66, 0x9c, 0x40, 0x4f, 0x65, 0x7d, 0xe1, 0x39, 0x4c, 0x80, 0xca, 0x7c, 0xae, 0x26, 0x84, 0xda,
	0x0d, 0xcb, 0xf3, 0x2c, 0x1b, 0x34, 0x49, 0x3c, 0xee, 0xf7, 0x34, 0xc1, 0x1d, 0x08, 0x05, 0x73,
	0xfc, 0x58, 0x5b, 0x5b, 0x4f, 0x08, 0xcc, 0xe7, 0x1a, 0x73, 0x5d, 0x4f, 0x30, 0xc1, 0x3d, 0x37,
	0xa9, 0x5c, 0xbb, 0x97, 0x16, 0x6d, 0x59, 0x81, 0x6f, 0xc4, 0x55, 0x8c, 0x96, 0x05, 0x6e, 0xcb,
	0xf7, 0x6c, 0x6e, 0x0c, 0x34, 0xce, 0x9c, 0x7f, 0xc8, 0x36, 0xcf, 0x0d, 0x1b, 0x9e, 0xe3, 0x78,
	0xae, 0xf6, 0xbe, 0x0f, 0xc1, 0x40, 0xf3, 0x59, 0xc0, 0x1c, 0x10, 0x10, 0x24, 0x3c, 0x65, 0x19,
	0x97, 0xdf, 0xf8, 0x26, 0x13, 0xa0, 0x43, 0xe8, 0x7b, 0x6e, 0x08, 0x11, 0xb2, 0x0b, 0x36, 0xfc,
	0x85, 0x54, 0x70, 0x6e, 0xcf, 0x24, 0x65, 0x9c, 0xe3, 0x26, 0x45, 0x75, 0xd4, 0x58, 0xd0, 0x73,
	0xdc, 0x54, 0x7e, 0x21, 0x5c, 0x38, 0x88, 0x8a, 0x92, 0x6d, 0x5c, 0xea, 0x71, 0x3b, 0x2a, 0x4a,
	0x2b, 0xf5, 0xb9, 0xc6, 0x62, 0x7b, 0x53, 0x1d, 0x8f, 0x23, 0xb6, 0xa1, 0x4a, 0x1b, 0xea, 0x53,
	0x49, 0xd7, 0x53, 0x19, 0xd9, 0xc6, 0x05, 0x2f, 0x30, 0x21, 0xa0, 0x2b, 0x75, 0xd4, 0x28, 0xb7,
	0x9b, 0xea, 0xc4, 0x38, 0x55, 0xd9, 0x52, 0x7d, 0x15, 0xb1, 0x0f, 0x07, 0x3e, 0xe8, 0xb1, 0x90,
	0x10, 0x9c, 0x0f, 0xbd, 0x40, 0xd0, 0xaa, 0xf4, 0x27, 0xd7, 0x11, 0xe6, 0x33, 0x0b, 0xe8, 0x6a,
	0x1d, 0x35, 0x0a, 0xba, 0x5c, 0x93, 0x35, 0x3c, 0xef, 0x43, 0x70, 0x24, 0x71, 0x2a, 0xf1, 0x92,
	0x0f, 0xc1, 0x6b, 0x66, 0x81, 0xb2, 0x81, 0x17, 0xce, 0xcb, 0x92, 0x12, 0x9e, 0x7b, 0xd4, 0xdd,
	0x59, 0xbe, 0x44, 0xe6, 0x71, 0x7e, 0xf7, 0x49, 0x77, 0x67, 0x19, 0x29, 0xbf, 0x11, 0x2e, 0x76,
	0xa5, 0x8b, 0x6c, 0x16, 0x51, 0x27, 0x97, 0x39, 0x40, 0x73, 0x71, 0xf7, 0x68, 0x1d, 0x61, 0x62,
	0xe0, 0x03, 0x9d, 0x8b, 0xb1, 0x68, 0x4d, 0x1e, 0xe2, 0x2b, 0x36, 0x0b, 0xc5, 0x91, 0xe3, 0x99,
	0xbc, 0xc7, 0xc1, 0xa4, 0x95, 0x3a, 0x6a, 0x2c, 0xb6, 0x6b, 0x6a, 0x7c, 0x05, 0xd4, 0xf4, 0x8e,
	0xa8, 0x87, 0xe9, 0x1d, 0xd1, 0x2f, 0x47, 0x82, 0x17, 0x09, 0x9f, 0xdc, 0xc7, 0x79, 0xc1, 0xac,
	0x90, 0xae, 0xc8, 0x9c, 0x95, 0x59, 0x39, 0x3f, 0x3f, 0xd5, 0x25, 0x3f, 0xd2, 0x99, 0x4c, 0x30,
	0x5a, 0xbd, 0xb8, 0x2e, 0xe2, 0x2b, 0xef, 0x70, 0x29, 0xde, 0x72, 0x48, 0x1e, 0xe0, 0x52, 0x72,
	0x06, 0x14, 0xc9, 0x2a, 0x37, 0xa7, 0x9c, 0x52, 0x2c, 0xd2, 0x53, 0x05, 0xa9, 0xe0, 0x82, 0xf0,
	0x04, 0xb3, 0xe5, 0x86, 0x0b, 0x7a, 0xfc, 0xa7, 0x3d, 0x2a, 0xe2, 0x72, 0x52, 0xbe, 0x0b, 0xc1,
	0x29, 0x37, 0x80, 0x9c, 0x21, 0x5c, 0xdc, 0x09, 0x80, 0x09, 0x20, 0xb3, 0xeb, 0xd7, 0xae, 0x4f,
	0xa1, 0xec, 0x99, 0xca, 0xb3, 0xe1, 0x88, 0x6e, 0xe1, 0xa5, 0x04, 0xe9, 0xa4, 0x66, 0xaa, 0x19,
	0xa0, 0x63, 0xc8, 0x86, 0x9f, 0x7f, 0xfc, 0x3c, 0xcb, 0x55, 0x94, 0x25, 0xf9, 0x10, 0x4f, 0xef,
	0xa4, 0x2f, 0xbc, 0x83, 0x9a, 0xe4, 0x0b, 0xc2, 0x79, 0x1d, 0x98, 0x49, 0xa6, 0x37, 0xac, 0xcd,
	0xb6, 0xac, 0xbc, 0x1c, 0x8e, 0xe8, 0x6d, 0x5c, 0xc9, 0x5a, 0xf8, 0xc8, 0xcd, 0x4f, 0xe4, 0x6a,
	0x16, 0xb5, 0x40, 0x48, 0x57, 0x6b, 0x64, 0x35, 0xe3, 0x4a, 0xe3, 0xa6, 0x26, 0x35, 0xdf, 0x11,
	0x2e, 0xc6, 0x2f, 0xf8, 0x22, 0x81, 0x6d, 0x4d, 0xa1, 0x64, 0xe6, 0xc0, 0xe1, 0x70, 0x44, 0xd5,
	0x09, 0x46, 0xc7, 0x12, 0xec, 0x4b, 0xad, 0xf4, 0xba, 0xde, 0x9e, 0xe4, 0x35, 0x4a, 0xf2, 0x1b,
	0xc2, 0xc5, 0x78, 0xbc, 0xcc, 0xca, 0x72, 0x9a, 0xd5, 0xcc, 0x80, 0x3a, 0xf8, 0x1f, 0xab, 0xa6,
	0xd4, 0xc6, 0xb1, 0x36, 0x27, 0xc6, 0xfa, 0x15, 0xe1, 0xfc, 0x3e, 0x0f, 0x05, 0xa9, 0xcf, 0x9a,
	0x45, 0x35, 0x65, 0x66, 0xec, 0xa1, 0xb2, 0x3f, 0x1c, 0xd1, 0x5b, 0xe3, 0x37, 0x71, 0xcc, 0xb2,
	0xcd, 0xc3, 0xf8, 0xc4, 0xaf, 0x29, 0xd5, 0xac, 0xb5, 0x10, 0x58, 0x60, 0x9c, 0x74, 0x50, 0xf3,
	0xb1, 0xf6, 0xb6, 0x65, 0x71, 0x71, 0xd2, 0x3f, 0x8e, 0x5e, 0xad, 0x16, 0x75, 0xd7, 0xd2, 0xee,
	0x52, 0x94, 0xfd, 0x58, 0x1d, 0x17, 0xe5, 0x60, 0xb9, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x6d,
	0x25, 0x25, 0xf9, 0xc7, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SecretsServiceClient is the client API for SecretsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SecretsServiceClient interface {
	//
	//Create a secret
	//
	//Creates a secret. Requires values for name, type, and data.
	//
	//Supported types: ssh, winrm, sudo, aws, azure, gcp, service_now
	//Supported keys by type:
	//ssh: username, password, key
	//winrm: username, password
	//sudo: username, password
	//service_now: username, password
	//aws: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
	//azure: AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID
	//gcp: GOOGLE_CREDENTIALS_JSON
	//
	//Example:
	//```
	//{
	//"name": "my ssh secret",
	//"type": "ssh",
	//"data": [
	//{ "key": "username", "value": "vagrant" },
	//{ "key": "password", "value": "vagrant"}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//secrets:secrets:create
	//```
	Create(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*Id, error)
	//
	//Read a secret
	//
	//Reads a secret given the ID of the secret.
	//Note that the secret information (password and key values) will not be returned by the API, as a safety measure.
	//
	//Authorization Action:
	//```
	//secrets:secrets:get
	//```
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Secret, error)
	//
	//Update a secret
	//
	//Updates a secret.
	//This is a PATCH operation, meaning the details sent in will override/replace those stored in the DB.
	//Secret information that is not in the body of the request will persist.
	//
	//Example:
	//```
	//given a credential with a username and password, a user could update the password by passing in the following body,
	//and the name of the secret as well as the username for the secret be unchanged:
	//
	//{
	//"id": "525c013a-2ab3-4e6f-9005-51bc620e9157",
	//"data": [
	//{ "key": "password", "value": "new-value"}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//secrets:secrets:update
	//```
	Update(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*UpdateResponse, error)
	//
	//Delete a secret
	//
	//Deletes a secret given the ID of the secret.
	//Note that any nodes that were using the secret will no longer be associated with the deleted secret.
	//
	//Authorization Action:
	//```
	//secrets:secrets:delete
	//```
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*DeleteResponse, error)
	//
	//List and filter secrets
	//
	//Makes a list of secrets.
	//Supports filtering, pagination, and sorting.
	//Adding a filter narrows the list of secrets to only those that match the filter or filters.
	//Supported filters: type
	//Supported sort types: name, type, last modified
	//
	//Example:
	//```
	//{
	//"sort": "type",
	//"order": "ASC",
	//"filters": [
	//{ "key": "type", "values": ["ssh","winrm","sudo"] }
	//],
	//"page":1,
	//"per_page":100
	//}
	//```
	//
	//Authorization Action:
	//```
	//secrets:secrets:list
	//```
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Secrets, error)
}

type secretsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretsServiceClient(cc grpc.ClientConnInterface) SecretsServiceClient {
	return &secretsServiceClient{cc}
}

func (c *secretsServiceClient) Create(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/chef.automate.api.secrets.SecretsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, "/chef.automate.api.secrets.SecretsService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsServiceClient) Update(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.secrets.SecretsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.secrets.SecretsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsServiceClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Secrets, error) {
	out := new(Secrets)
	err := c.cc.Invoke(ctx, "/chef.automate.api.secrets.SecretsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretsServiceServer is the server API for SecretsService service.
type SecretsServiceServer interface {
	//
	//Create a secret
	//
	//Creates a secret. Requires values for name, type, and data.
	//
	//Supported types: ssh, winrm, sudo, aws, azure, gcp, service_now
	//Supported keys by type:
	//ssh: username, password, key
	//winrm: username, password
	//sudo: username, password
	//service_now: username, password
	//aws: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
	//azure: AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID
	//gcp: GOOGLE_CREDENTIALS_JSON
	//
	//Example:
	//```
	//{
	//"name": "my ssh secret",
	//"type": "ssh",
	//"data": [
	//{ "key": "username", "value": "vagrant" },
	//{ "key": "password", "value": "vagrant"}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//secrets:secrets:create
	//```
	Create(context.Context, *Secret) (*Id, error)
	//
	//Read a secret
	//
	//Reads a secret given the ID of the secret.
	//Note that the secret information (password and key values) will not be returned by the API, as a safety measure.
	//
	//Authorization Action:
	//```
	//secrets:secrets:get
	//```
	Read(context.Context, *Id) (*Secret, error)
	//
	//Update a secret
	//
	//Updates a secret.
	//This is a PATCH operation, meaning the details sent in will override/replace those stored in the DB.
	//Secret information that is not in the body of the request will persist.
	//
	//Example:
	//```
	//given a credential with a username and password, a user could update the password by passing in the following body,
	//and the name of the secret as well as the username for the secret be unchanged:
	//
	//{
	//"id": "525c013a-2ab3-4e6f-9005-51bc620e9157",
	//"data": [
	//{ "key": "password", "value": "new-value"}
	//]
	//}
	//```
	//
	//Authorization Action:
	//```
	//secrets:secrets:update
	//```
	Update(context.Context, *Secret) (*UpdateResponse, error)
	//
	//Delete a secret
	//
	//Deletes a secret given the ID of the secret.
	//Note that any nodes that were using the secret will no longer be associated with the deleted secret.
	//
	//Authorization Action:
	//```
	//secrets:secrets:delete
	//```
	Delete(context.Context, *Id) (*DeleteResponse, error)
	//
	//List and filter secrets
	//
	//Makes a list of secrets.
	//Supports filtering, pagination, and sorting.
	//Adding a filter narrows the list of secrets to only those that match the filter or filters.
	//Supported filters: type
	//Supported sort types: name, type, last modified
	//
	//Example:
	//```
	//{
	//"sort": "type",
	//"order": "ASC",
	//"filters": [
	//{ "key": "type", "values": ["ssh","winrm","sudo"] }
	//],
	//"page":1,
	//"per_page":100
	//}
	//```
	//
	//Authorization Action:
	//```
	//secrets:secrets:list
	//```
	List(context.Context, *Query) (*Secrets, error)
}

// UnimplementedSecretsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSecretsServiceServer struct {
}

func (*UnimplementedSecretsServiceServer) Create(ctx context.Context, req *Secret) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSecretsServiceServer) Read(ctx context.Context, req *Id) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedSecretsServiceServer) Update(ctx context.Context, req *Secret) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSecretsServiceServer) Delete(ctx context.Context, req *Id) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSecretsServiceServer) List(ctx context.Context, req *Query) (*Secrets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterSecretsServiceServer(s *grpc.Server, srv SecretsServiceServer) {
	s.RegisterService(&_SecretsService_serviceDesc, srv)
}

func _SecretsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.secrets.SecretsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).Create(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.secrets.SecretsService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.secrets.SecretsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).Update(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.secrets.SecretsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.secrets.SecretsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).List(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecretsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.secrets.SecretsService",
	HandlerType: (*SecretsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SecretsService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _SecretsService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SecretsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SecretsService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SecretsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/secrets/secrets.proto",
}
