// -*- mode: protobuf; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*-

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: config/esgateway/config_request.proto

package esgateway

import (
	shared "github.com/chef/automate/api/config/shared"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-a2-config/api/a2conf"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1 *ConfigRequest_V1 `protobuf:"bytes,1,opt,name=v1,proto3" json:"v1,omitempty" toml:"v1,omitempty" mapstructure:"v1,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigRequest) GetV1() *ConfigRequest_V1 {
	if x != nil {
		return x.V1
	}
	return nil
}

type ConfigRequest_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys *ConfigRequest_V1_System  `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty" toml:"sys,omitempty" mapstructure:"sys,omitempty"`
	Svc *ConfigRequest_V1_Service `protobuf:"bytes,2,opt,name=svc,proto3" json:"svc,omitempty" toml:"svc,omitempty" mapstructure:"svc,omitempty"`
}

func (x *ConfigRequest_V1) Reset() {
	*x = ConfigRequest_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1) ProtoMessage() {}

func (x *ConfigRequest_V1) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConfigRequest_V1) GetSys() *ConfigRequest_V1_System {
	if x != nil {
		return x.Sys
	}
	return nil
}

func (x *ConfigRequest_V1) GetSvc() *ConfigRequest_V1_Service {
	if x != nil {
		return x.Svc
	}
	return nil
}

type ConfigRequest_V1_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mlsa     *shared.Mlsa                      `protobuf:"bytes,1,opt,name=mlsa,proto3" json:"mlsa,omitempty" toml:"mlsa,omitempty" mapstructure:"mlsa,omitempty"`
	Tls      *shared.TLSCredentials            `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty" toml:"tls,omitempty" mapstructure:"tls,omitempty"`
	Service  *ConfigRequest_V1_System_Service  `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty" toml:"service,omitempty" mapstructure:"service,omitempty"`
	Log      *ConfigRequest_V1_System_Log      `protobuf:"bytes,4,opt,name=log,proto3" json:"log,omitempty" toml:"log,omitempty" mapstructure:"log,omitempty"`
	Ngx      *ConfigRequest_V1_System_Nginx    `protobuf:"bytes,5,opt,name=ngx,proto3" json:"ngx,omitempty" toml:"ngx,omitempty" mapstructure:"ngx,omitempty"`
	External *ConfigRequest_V1_System_External `protobuf:"bytes,6,opt,name=external,proto3" json:"external,omitempty" toml:"external,omitempty" mapstructure:"external,omitempty"` // Derived from global config
}

func (x *ConfigRequest_V1_System) Reset() {
	*x = ConfigRequest_V1_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System) ProtoMessage() {}

func (x *ConfigRequest_V1_System) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ConfigRequest_V1_System) GetMlsa() *shared.Mlsa {
	if x != nil {
		return x.Mlsa
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetTls() *shared.TLSCredentials {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetService() *ConfigRequest_V1_System_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetLog() *ConfigRequest_V1_System_Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetNgx() *ConfigRequest_V1_System_Nginx {
	if x != nil {
		return x.Ngx
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetExternal() *ConfigRequest_V1_System_External {
	if x != nil {
		return x.External
	}
	return nil
}

type ConfigRequest_V1_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest_V1_Service) Reset() {
	*x = ConfigRequest_V1_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Service) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 1}
}

type ConfigRequest_V1_System_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"`
	Port *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
}

func (x *ConfigRequest_V1_System_Service) Reset() {
	*x = ConfigRequest_V1_System_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Service) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *ConfigRequest_V1_System_Service) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ConfigRequest_V1_System_Service) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

type ConfigRequest_V1_System_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty" toml:"level,omitempty" mapstructure:"level,omitempty"`
}

func (x *ConfigRequest_V1_System_Log) Reset() {
	*x = ConfigRequest_V1_System_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Log) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Log) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Log.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Log) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *ConfigRequest_V1_System_Log) GetLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.Level
	}
	return nil
}

type ConfigRequest_V1_System_Nginx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Main   *ConfigRequest_V1_System_Nginx_Main   `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty" toml:"main,omitempty" mapstructure:"main,omitempty"`
	Events *ConfigRequest_V1_System_Nginx_Events `protobuf:"bytes,2,opt,name=events,proto3" json:"events,omitempty" toml:"events,omitempty" mapstructure:"events,omitempty"`
	Http   *ConfigRequest_V1_System_Nginx_Http   `protobuf:"bytes,3,opt,name=http,proto3" json:"http,omitempty" toml:"http,omitempty" mapstructure:"http,omitempty"`
}

func (x *ConfigRequest_V1_System_Nginx) Reset() {
	*x = ConfigRequest_V1_System_Nginx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Nginx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Nginx) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Nginx) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Nginx.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Nginx) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *ConfigRequest_V1_System_Nginx) GetMain() *ConfigRequest_V1_System_Nginx_Main {
	if x != nil {
		return x.Main
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx) GetEvents() *ConfigRequest_V1_System_Nginx_Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx) GetHttp() *ConfigRequest_V1_System_Nginx_Http {
	if x != nil {
		return x.Http
	}
	return nil
}

type ConfigRequest_V1_System_External struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable      *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty" toml:"enable,omitempty" mapstructure:"enable,omitempty"`
	SslUpstream *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=ssl_upstream,json=sslUpstream,proto3" json:"ssl_upstream,omitempty" toml:"ssl_upstream,omitempty" mapstructure:"ssl_upstream,omitempty"`
	// TODO(ssd) 2020-12-01: Mark as deprecated?
	Endpoints            []*wrapperspb.StringValue           `protobuf:"bytes,3,rep,name=endpoints,proto3" json:"endpoints,omitempty" toml:"endpoints,omitempty" mapstructure:"endpoints,omitempty"`
	BasicAuthCredentials *wrapperspb.StringValue             `protobuf:"bytes,4,opt,name=basic_auth_credentials,json=basicAuthCredentials,proto3" json:"basic_auth_credentials,omitempty" toml:"basic_auth_credentials,omitempty" mapstructure:"basic_auth_credentials,omitempty"`
	RootCert             *wrapperspb.StringValue             `protobuf:"bytes,5,opt,name=root_cert,json=rootCert,proto3" json:"root_cert,omitempty" toml:"root_cert,omitempty" mapstructure:"root_cert,omitempty"`
	ServerName           *wrapperspb.StringValue             `protobuf:"bytes,6,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty" toml:"server_name,omitempty" mapstructure:"server_name,omitempty"`
	RootCertFile         *wrapperspb.StringValue             `protobuf:"bytes,7,opt,name=root_cert_file,json=rootCertFile,proto3" json:"root_cert_file,omitempty" toml:"root_cert_file,omitempty" mapstructure:"root_cert_file,omitempty"`
	ParsedEndpoints      []*ConfigRequest_V1_System_Endpoint `protobuf:"bytes,8,rep,name=parsed_endpoints,json=parsedEndpoints,proto3" json:"parsed_endpoints,omitempty" toml:"parsed_endpoints,omitempty" mapstructure:"parsed_endpoints,omitempty"`
}

func (x *ConfigRequest_V1_System_External) Reset() {
	*x = ConfigRequest_V1_System_External{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_External) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_External) ProtoMessage() {}

func (x *ConfigRequest_V1_System_External) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_External.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_External) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *ConfigRequest_V1_System_External) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *ConfigRequest_V1_System_External) GetSslUpstream() *wrapperspb.BoolValue {
	if x != nil {
		return x.SslUpstream
	}
	return nil
}

func (x *ConfigRequest_V1_System_External) GetEndpoints() []*wrapperspb.StringValue {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *ConfigRequest_V1_System_External) GetBasicAuthCredentials() *wrapperspb.StringValue {
	if x != nil {
		return x.BasicAuthCredentials
	}
	return nil
}

func (x *ConfigRequest_V1_System_External) GetRootCert() *wrapperspb.StringValue {
	if x != nil {
		return x.RootCert
	}
	return nil
}

func (x *ConfigRequest_V1_System_External) GetServerName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServerName
	}
	return nil
}

func (x *ConfigRequest_V1_System_External) GetRootCertFile() *wrapperspb.StringValue {
	if x != nil {
		return x.RootCertFile
	}
	return nil
}

func (x *ConfigRequest_V1_System_External) GetParsedEndpoints() []*ConfigRequest_V1_System_Endpoint {
	if x != nil {
		return x.ParsedEndpoints
	}
	return nil
}

type ConfigRequest_V1_System_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDomain *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=is_domain,json=isDomain,proto3" json:"is_domain,omitempty" toml:"is_domain,omitempty" mapstructure:"is_domain,omitempty"`
	Address  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" toml:"address,omitempty" mapstructure:"address,omitempty"`
	Port     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
}

func (x *ConfigRequest_V1_System_Endpoint) Reset() {
	*x = ConfigRequest_V1_System_Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Endpoint) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Endpoint.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Endpoint) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (x *ConfigRequest_V1_System_Endpoint) GetIsDomain() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsDomain
	}
	return nil
}

func (x *ConfigRequest_V1_System_Endpoint) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ConfigRequest_V1_System_Endpoint) GetPort() *wrapperspb.StringValue {
	if x != nil {
		return x.Port
	}
	return nil
}

type ConfigRequest_V1_System_Nginx_Main struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerProcesses *wrapperspb.Int32Value                        `protobuf:"bytes,1,opt,name=worker_processes,json=workerProcesses,proto3" json:"worker_processes,omitempty" toml:"worker_processes,omitempty" mapstructure:"worker_processes,omitempty"`
	MaxFails        *wrapperspb.Int32Value                        `protobuf:"bytes,2,opt,name=max_fails,json=maxFails,proto3" json:"max_fails,omitempty" toml:"max_fails,omitempty" mapstructure:"max_fails,omitempty"`
	Resolvers       *ConfigRequest_V1_System_Nginx_Main_Resolvers `protobuf:"bytes,4,opt,name=resolvers,proto3" json:"resolvers,omitempty" toml:"resolvers,omitempty" mapstructure:"resolvers,omitempty"`
}

func (x *ConfigRequest_V1_System_Nginx_Main) Reset() {
	*x = ConfigRequest_V1_System_Nginx_Main{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Nginx_Main) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Nginx_Main) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Nginx_Main) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Nginx_Main.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Nginx_Main) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

func (x *ConfigRequest_V1_System_Nginx_Main) GetWorkerProcesses() *wrapperspb.Int32Value {
	if x != nil {
		return x.WorkerProcesses
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Main) GetMaxFails() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxFails
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Main) GetResolvers() *ConfigRequest_V1_System_Nginx_Main_Resolvers {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

type ConfigRequest_V1_System_Nginx_Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerConnections *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=worker_connections,json=workerConnections,proto3" json:"worker_connections,omitempty" toml:"worker_connections,omitempty" mapstructure:"worker_connections,omitempty"`
}

func (x *ConfigRequest_V1_System_Nginx_Events) Reset() {
	*x = ConfigRequest_V1_System_Nginx_Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Nginx_Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Nginx_Events) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Nginx_Events) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Nginx_Events.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Nginx_Events) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 2, 1}
}

func (x *ConfigRequest_V1_System_Nginx_Events) GetWorkerConnections() *wrapperspb.Int32Value {
	if x != nil {
		return x.WorkerConnections
	}
	return nil
}

type ConfigRequest_V1_System_Nginx_Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMaxBodySize   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=client_max_body_size,json=clientMaxBodySize,proto3" json:"client_max_body_size,omitempty" toml:"client_max_body_size,omitempty" mapstructure:"client_max_body_size,omitempty"`
	ProxyConnectTimeout *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=proxy_connect_timeout,json=proxyConnectTimeout,proto3" json:"proxy_connect_timeout,omitempty" toml:"proxy_connect_timeout,omitempty" mapstructure:"proxy_connect_timeout,omitempty"`
	KeepaliveTimeout    *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=keepalive_timeout,json=keepaliveTimeout,proto3" json:"keepalive_timeout,omitempty" toml:"keepalive_timeout,omitempty" mapstructure:"keepalive_timeout,omitempty"`
	Gzip                *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=gzip,proto3" json:"gzip,omitempty" toml:"gzip,omitempty" mapstructure:"gzip,omitempty"`
	GzipHttpVersion     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=gzip_http_version,json=gzipHttpVersion,proto3" json:"gzip_http_version,omitempty" toml:"gzip_http_version,omitempty" mapstructure:"gzip_http_version,omitempty"`
	// StringValue for consitency with other nginx configs
	GzipCompLevel             *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=gzip_comp_level,json=gzipCompLevel,proto3" json:"gzip_comp_level,omitempty" toml:"gzip_comp_level,omitempty" mapstructure:"gzip_comp_level,omitempty"`
	GzipProxied               *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=gzip_proxied,json=gzipProxied,proto3" json:"gzip_proxied,omitempty" toml:"gzip_proxied,omitempty" mapstructure:"gzip_proxied,omitempty"`
	GzipTypes                 *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=gzip_types,json=gzipTypes,proto3" json:"gzip_types,omitempty" toml:"gzip_types,omitempty" mapstructure:"gzip_types,omitempty"`
	Sendfile                  *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=sendfile,proto3" json:"sendfile,omitempty" toml:"sendfile,omitempty" mapstructure:"sendfile,omitempty"`
	TcpNodelay                *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=tcp_nodelay,json=tcpNodelay,proto3" json:"tcp_nodelay,omitempty" toml:"tcp_nodelay,omitempty" mapstructure:"tcp_nodelay,omitempty"`
	TcpNopush                 *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=tcp_nopush,json=tcpNopush,proto3" json:"tcp_nopush,omitempty" toml:"tcp_nopush,omitempty" mapstructure:"tcp_nopush,omitempty"`
	SslCiphers                *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=ssl_ciphers,json=sslCiphers,proto3" json:"ssl_ciphers,omitempty" toml:"ssl_ciphers,omitempty" mapstructure:"ssl_ciphers,omitempty"`
	SslProtocols              *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=ssl_protocols,json=sslProtocols,proto3" json:"ssl_protocols,omitempty" toml:"ssl_protocols,omitempty" mapstructure:"ssl_protocols,omitempty"`
	SslVerifyDepth            *wrapperspb.Int32Value  `protobuf:"bytes,15,opt,name=ssl_verify_depth,json=sslVerifyDepth,proto3" json:"ssl_verify_depth,omitempty" toml:"ssl_verify_depth,omitempty" mapstructure:"ssl_verify_depth,omitempty"`
	ServerNamesHashBucketSize *wrapperspb.Int32Value  `protobuf:"bytes,16,opt,name=server_names_hash_bucket_size,json=serverNamesHashBucketSize,proto3" json:"server_names_hash_bucket_size,omitempty" toml:"server_names_hash_bucket_size,omitempty" mapstructure:"server_names_hash_bucket_size,omitempty"`
	ClientBodyBufferSize      *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=client_body_buffer_size,json=clientBodyBufferSize,proto3" json:"client_body_buffer_size,omitempty" toml:"client_body_buffer_size,omitempty" mapstructure:"client_body_buffer_size,omitempty"`
	ProxyReadTimeout          *wrapperspb.Int32Value  `protobuf:"bytes,18,opt,name=proxy_read_timeout,json=proxyReadTimeout,proto3" json:"proxy_read_timeout,omitempty" toml:"proxy_read_timeout,omitempty" mapstructure:"proxy_read_timeout,omitempty"`
	ProxySendTimeout          *wrapperspb.Int32Value  `protobuf:"bytes,19,opt,name=proxy_send_timeout,json=proxySendTimeout,proto3" json:"proxy_send_timeout,omitempty" toml:"proxy_send_timeout,omitempty" mapstructure:"proxy_send_timeout,omitempty"`
	ProxySetHeaderHost        *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=proxy_set_header_host,json=proxySetHeaderHost,proto3" json:"proxy_set_header_host,omitempty" toml:"proxy_set_header_host,omitempty" mapstructure:"proxy_set_header_host,omitempty"`
}

func (x *ConfigRequest_V1_System_Nginx_Http) Reset() {
	*x = ConfigRequest_V1_System_Nginx_Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Nginx_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Nginx_Http) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Nginx_Http) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Nginx_Http.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Nginx_Http) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 2, 2}
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetClientMaxBodySize() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientMaxBodySize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetProxyConnectTimeout() *wrapperspb.Int32Value {
	if x != nil {
		return x.ProxyConnectTimeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetKeepaliveTimeout() *wrapperspb.Int32Value {
	if x != nil {
		return x.KeepaliveTimeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzip() *wrapperspb.StringValue {
	if x != nil {
		return x.Gzip
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipHttpVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.GzipHttpVersion
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipCompLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.GzipCompLevel
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipProxied() *wrapperspb.StringValue {
	if x != nil {
		return x.GzipProxied
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipTypes() *wrapperspb.StringValue {
	if x != nil {
		return x.GzipTypes
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetSendfile() *wrapperspb.StringValue {
	if x != nil {
		return x.Sendfile
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetTcpNodelay() *wrapperspb.StringValue {
	if x != nil {
		return x.TcpNodelay
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetTcpNopush() *wrapperspb.StringValue {
	if x != nil {
		return x.TcpNopush
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetSslCiphers() *wrapperspb.StringValue {
	if x != nil {
		return x.SslCiphers
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetSslProtocols() *wrapperspb.StringValue {
	if x != nil {
		return x.SslProtocols
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetSslVerifyDepth() *wrapperspb.Int32Value {
	if x != nil {
		return x.SslVerifyDepth
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetServerNamesHashBucketSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.ServerNamesHashBucketSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetClientBodyBufferSize() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientBodyBufferSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetProxyReadTimeout() *wrapperspb.Int32Value {
	if x != nil {
		return x.ProxyReadTimeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetProxySendTimeout() *wrapperspb.Int32Value {
	if x != nil {
		return x.ProxySendTimeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetProxySetHeaderHost() *wrapperspb.StringValue {
	if x != nil {
		return x.ProxySetHeaderHost
	}
	return nil
}

type ConfigRequest_V1_System_Nginx_Main_Resolvers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableSystemNameservers *wrapperspb.BoolValue     `protobuf:"bytes,1,opt,name=enable_system_nameservers,json=enableSystemNameservers,proto3" json:"enable_system_nameservers,omitempty" toml:"enable_system_nameservers,omitempty" mapstructure:"enable_system_nameservers,omitempty"`
	Nameservers             []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=nameservers,proto3" json:"nameservers,omitempty" toml:"nameservers,omitempty" mapstructure:"nameservers,omitempty"`
	NameserversString       *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=nameservers_string,json=nameserversString,proto3" json:"nameservers_string,omitempty" toml:"nameservers_string,omitempty" mapstructure:"nameservers_string,omitempty"`
}

func (x *ConfigRequest_V1_System_Nginx_Main_Resolvers) Reset() {
	*x = ConfigRequest_V1_System_Nginx_Main_Resolvers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_esgateway_config_request_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Nginx_Main_Resolvers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Nginx_Main_Resolvers) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Nginx_Main_Resolvers) ProtoReflect() protoreflect.Message {
	mi := &file_config_esgateway_config_request_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Nginx_Main_Resolvers.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Nginx_Main_Resolvers) Descriptor() ([]byte, []int) {
	return file_config_esgateway_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0, 0}
}

func (x *ConfigRequest_V1_System_Nginx_Main_Resolvers) GetEnableSystemNameservers() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableSystemNameservers
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Main_Resolvers) GetNameservers() []*wrapperspb.StringValue {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Main_Resolvers) GetNameserversString() *wrapperspb.StringValue {
	if x != nil {
		return x.NameserversString
	}
	return nil
}

var File_config_esgateway_config_request_proto protoreflect.FileDescriptor

var file_config_esgateway_config_request_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x73, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x73, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2f, 0x74, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x61, 0x32, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x32, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x1e, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x02, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x65, 0x73, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x52, 0x02, 0x76, 0x31, 0x1a,
	0xd1, 0x1d, 0x0a, 0x02, 0x56, 0x31, 0x12, 0x48, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x73, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x73, 0x79, 0x73,
	0x12, 0x49, 0x0a, 0x03, 0x73, 0x76, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x65, 0x73, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x73, 0x76, 0x63, 0x1a, 0xaa, 0x1c, 0x0a, 0x06,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x6c, 0x73, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x6c, 0x73, 0x61, 0x52, 0x04, 0x6d, 0x6c, 0x73, 0x61, 0x12, 0x3c, 0x0a, 0x03,
	0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x65, 0x73, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x73, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c,
	0x6f, 0x67, 0x12, 0x4e, 0x0a, 0x03, 0x6e, 0x67, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x73, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x52, 0x03, 0x6e,
	0x67, 0x78, 0x12, 0x5b, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x73, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a,
	0x84, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0xc2, 0xf3, 0x18, 0x12, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0xa0, 0x4f, 0x1a, 0x04, 0x68, 0x74, 0x74, 0x70,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x39, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x1a, 0xaa, 0x11, 0x0a, 0x05, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x12, 0x55, 0x0a, 0x04, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x65, 0x73, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x04, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x5b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x73, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x55, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x65, 0x73, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x1a, 0xec, 0x03, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x12,
	0x46, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x69, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x73, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x67, 0x69,
	0x6e, 0x78, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x1a, 0xf0, 0x01, 0x0a,
	0x09, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0x54, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x4a, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xd0, 0x0a, 0x0a, 0x04,
	0x48, 0x74, 0x74, 0x70, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x67, 0x7a, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x67, 0x7a, 0x69, 0x70,
	0x12, 0x48, 0x0a, 0x11, 0x67, 0x7a, 0x69, 0x70, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x67, 0x7a, 0x69, 0x70, 0x48,
	0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x67, 0x7a,
	0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x67, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3f, 0x0a, 0x0c, 0x67, 0x7a, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67, 0x7a, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x7a, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x7a, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x63, 0x70, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x63, 0x70,
	0x4e, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x63, 0x70, 0x5f, 0x6e,
	0x6f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x63, 0x70, 0x4e, 0x6f,
	0x70, 0x75, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x73, 0x6c, 0x43, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x73, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x73, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x73, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73,
	0x73, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x5d, 0x0a,
	0x1d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x53, 0x0a, 0x17,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x1a, 0xb7,
	0x04, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x73, 0x73, 0x6c, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x73, 0x73, 0x6c, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3a,
	0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x39,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x73, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x36,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x09, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x3a, 0x19, 0xc2, 0xf3, 0x18, 0x15, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2d, 0x65, 0x73, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x2f,
	0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65,
	0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x73, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_esgateway_config_request_proto_rawDescOnce sync.Once
	file_config_esgateway_config_request_proto_rawDescData = file_config_esgateway_config_request_proto_rawDesc
)

func file_config_esgateway_config_request_proto_rawDescGZIP() []byte {
	file_config_esgateway_config_request_proto_rawDescOnce.Do(func() {
		file_config_esgateway_config_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_esgateway_config_request_proto_rawDescData)
	})
	return file_config_esgateway_config_request_proto_rawDescData
}

var file_config_esgateway_config_request_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_config_esgateway_config_request_proto_goTypes = []interface{}{
	(*ConfigRequest)(nil),                                // 0: chef.automate.infra.esgateway.ConfigRequest
	(*ConfigRequest_V1)(nil),                             // 1: chef.automate.infra.esgateway.ConfigRequest.V1
	(*ConfigRequest_V1_System)(nil),                      // 2: chef.automate.infra.esgateway.ConfigRequest.V1.System
	(*ConfigRequest_V1_Service)(nil),                     // 3: chef.automate.infra.esgateway.ConfigRequest.V1.Service
	(*ConfigRequest_V1_System_Service)(nil),              // 4: chef.automate.infra.esgateway.ConfigRequest.V1.System.Service
	(*ConfigRequest_V1_System_Log)(nil),                  // 5: chef.automate.infra.esgateway.ConfigRequest.V1.System.Log
	(*ConfigRequest_V1_System_Nginx)(nil),                // 6: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx
	(*ConfigRequest_V1_System_External)(nil),             // 7: chef.automate.infra.esgateway.ConfigRequest.V1.System.External
	(*ConfigRequest_V1_System_Endpoint)(nil),             // 8: chef.automate.infra.esgateway.ConfigRequest.V1.System.Endpoint
	(*ConfigRequest_V1_System_Nginx_Main)(nil),           // 9: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Main
	(*ConfigRequest_V1_System_Nginx_Events)(nil),         // 10: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Events
	(*ConfigRequest_V1_System_Nginx_Http)(nil),           // 11: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http
	(*ConfigRequest_V1_System_Nginx_Main_Resolvers)(nil), // 12: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Main.Resolvers
	(*shared.Mlsa)(nil),                                  // 13: chef.automate.infra.config.Mlsa
	(*shared.TLSCredentials)(nil),                        // 14: chef.automate.infra.config.TLSCredentials
	(*wrapperspb.StringValue)(nil),                       // 15: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),                        // 16: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),                         // 17: google.protobuf.BoolValue
}
var file_config_esgateway_config_request_proto_depIdxs = []int32{
	1,  // 0: chef.automate.infra.esgateway.ConfigRequest.v1:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1
	2,  // 1: chef.automate.infra.esgateway.ConfigRequest.V1.sys:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.System
	3,  // 2: chef.automate.infra.esgateway.ConfigRequest.V1.svc:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.Service
	13, // 3: chef.automate.infra.esgateway.ConfigRequest.V1.System.mlsa:type_name -> chef.automate.infra.config.Mlsa
	14, // 4: chef.automate.infra.esgateway.ConfigRequest.V1.System.tls:type_name -> chef.automate.infra.config.TLSCredentials
	4,  // 5: chef.automate.infra.esgateway.ConfigRequest.V1.System.service:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.System.Service
	5,  // 6: chef.automate.infra.esgateway.ConfigRequest.V1.System.log:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.System.Log
	6,  // 7: chef.automate.infra.esgateway.ConfigRequest.V1.System.ngx:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx
	7,  // 8: chef.automate.infra.esgateway.ConfigRequest.V1.System.external:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.System.External
	15, // 9: chef.automate.infra.esgateway.ConfigRequest.V1.System.Service.host:type_name -> google.protobuf.StringValue
	16, // 10: chef.automate.infra.esgateway.ConfigRequest.V1.System.Service.port:type_name -> google.protobuf.Int32Value
	15, // 11: chef.automate.infra.esgateway.ConfigRequest.V1.System.Log.level:type_name -> google.protobuf.StringValue
	9,  // 12: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.main:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Main
	10, // 13: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.events:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Events
	11, // 14: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.http:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http
	17, // 15: chef.automate.infra.esgateway.ConfigRequest.V1.System.External.enable:type_name -> google.protobuf.BoolValue
	17, // 16: chef.automate.infra.esgateway.ConfigRequest.V1.System.External.ssl_upstream:type_name -> google.protobuf.BoolValue
	15, // 17: chef.automate.infra.esgateway.ConfigRequest.V1.System.External.endpoints:type_name -> google.protobuf.StringValue
	15, // 18: chef.automate.infra.esgateway.ConfigRequest.V1.System.External.basic_auth_credentials:type_name -> google.protobuf.StringValue
	15, // 19: chef.automate.infra.esgateway.ConfigRequest.V1.System.External.root_cert:type_name -> google.protobuf.StringValue
	15, // 20: chef.automate.infra.esgateway.ConfigRequest.V1.System.External.server_name:type_name -> google.protobuf.StringValue
	15, // 21: chef.automate.infra.esgateway.ConfigRequest.V1.System.External.root_cert_file:type_name -> google.protobuf.StringValue
	8,  // 22: chef.automate.infra.esgateway.ConfigRequest.V1.System.External.parsed_endpoints:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.System.Endpoint
	17, // 23: chef.automate.infra.esgateway.ConfigRequest.V1.System.Endpoint.is_domain:type_name -> google.protobuf.BoolValue
	15, // 24: chef.automate.infra.esgateway.ConfigRequest.V1.System.Endpoint.address:type_name -> google.protobuf.StringValue
	15, // 25: chef.automate.infra.esgateway.ConfigRequest.V1.System.Endpoint.port:type_name -> google.protobuf.StringValue
	16, // 26: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Main.worker_processes:type_name -> google.protobuf.Int32Value
	16, // 27: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Main.max_fails:type_name -> google.protobuf.Int32Value
	12, // 28: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Main.resolvers:type_name -> chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Main.Resolvers
	16, // 29: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Events.worker_connections:type_name -> google.protobuf.Int32Value
	15, // 30: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.client_max_body_size:type_name -> google.protobuf.StringValue
	16, // 31: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.proxy_connect_timeout:type_name -> google.protobuf.Int32Value
	16, // 32: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.keepalive_timeout:type_name -> google.protobuf.Int32Value
	15, // 33: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.gzip:type_name -> google.protobuf.StringValue
	15, // 34: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.gzip_http_version:type_name -> google.protobuf.StringValue
	15, // 35: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.gzip_comp_level:type_name -> google.protobuf.StringValue
	15, // 36: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.gzip_proxied:type_name -> google.protobuf.StringValue
	15, // 37: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.gzip_types:type_name -> google.protobuf.StringValue
	15, // 38: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.sendfile:type_name -> google.protobuf.StringValue
	15, // 39: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.tcp_nodelay:type_name -> google.protobuf.StringValue
	15, // 40: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.tcp_nopush:type_name -> google.protobuf.StringValue
	15, // 41: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.ssl_ciphers:type_name -> google.protobuf.StringValue
	15, // 42: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.ssl_protocols:type_name -> google.protobuf.StringValue
	16, // 43: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.ssl_verify_depth:type_name -> google.protobuf.Int32Value
	16, // 44: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.server_names_hash_bucket_size:type_name -> google.protobuf.Int32Value
	15, // 45: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.client_body_buffer_size:type_name -> google.protobuf.StringValue
	16, // 46: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.proxy_read_timeout:type_name -> google.protobuf.Int32Value
	16, // 47: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.proxy_send_timeout:type_name -> google.protobuf.Int32Value
	15, // 48: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Http.proxy_set_header_host:type_name -> google.protobuf.StringValue
	17, // 49: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Main.Resolvers.enable_system_nameservers:type_name -> google.protobuf.BoolValue
	15, // 50: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Main.Resolvers.nameservers:type_name -> google.protobuf.StringValue
	15, // 51: chef.automate.infra.esgateway.ConfigRequest.V1.System.Nginx.Main.Resolvers.nameservers_string:type_name -> google.protobuf.StringValue
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_config_esgateway_config_request_proto_init() }
func file_config_esgateway_config_request_proto_init() {
	if File_config_esgateway_config_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_esgateway_config_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Nginx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_External); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Nginx_Main); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Nginx_Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Nginx_Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_esgateway_config_request_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Nginx_Main_Resolvers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_esgateway_config_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_esgateway_config_request_proto_goTypes,
		DependencyIndexes: file_config_esgateway_config_request_proto_depIdxs,
		MessageInfos:      file_config_esgateway_config_request_proto_msgTypes,
	}.Build()
	File_config_esgateway_config_request_proto = out.File
	file_config_esgateway_config_request_proto_rawDesc = nil
	file_config_esgateway_config_request_proto_goTypes = nil
	file_config_esgateway_config_request_proto_depIdxs = nil
}
