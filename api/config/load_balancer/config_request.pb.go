// -*- mode: protobuf; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*-

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: config/load_balancer/config_request.proto

package load_balancer

import (
	shared "github.com/chef/automate/api/config/shared"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-a2-config/api/a2conf"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1 *ConfigRequest_V1 `protobuf:"bytes,3,opt,name=v1,proto3" json:"v1,omitempty" toml:"v1,omitempty" mapstructure:"v1,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigRequest) GetV1() *ConfigRequest_V1 {
	if x != nil {
		return x.V1
	}
	return nil
}

type ConfigRequest_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys *ConfigRequest_V1_System  `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty" toml:"sys,omitempty" mapstructure:"sys,omitempty"`
	Svc *ConfigRequest_V1_Service `protobuf:"bytes,2,opt,name=svc,proto3" json:"svc,omitempty" toml:"svc,omitempty" mapstructure:"svc,omitempty"`
}

func (x *ConfigRequest_V1) Reset() {
	*x = ConfigRequest_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1) ProtoMessage() {}

func (x *ConfigRequest_V1) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConfigRequest_V1) GetSys() *ConfigRequest_V1_System {
	if x != nil {
		return x.Sys
	}
	return nil
}

func (x *ConfigRequest_V1) GetSvc() *ConfigRequest_V1_Service {
	if x != nil {
		return x.Svc
	}
	return nil
}

// The load balancer is an infrastructure service so we're going to configure
// it via hab. Therefore, it's configuration will live in the System struct.
type ConfigRequest_V1_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mlsa         *shared.Mlsa                          `protobuf:"bytes,1,opt,name=mlsa,proto3" json:"mlsa,omitempty" toml:"mlsa,omitempty" mapstructure:"mlsa,omitempty"`
	Tls          *shared.TLSCredentials                `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty" toml:"tls,omitempty" mapstructure:"tls,omitempty"`
	Service      *ConfigRequest_V1_System_Service      `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty" toml:"service,omitempty" mapstructure:"service,omitempty"`
	Log          *ConfigRequest_V1_System_Logger       `protobuf:"bytes,4,opt,name=log,proto3" json:"log,omitempty" toml:"log,omitempty" mapstructure:"log,omitempty"`
	Ngx          *ConfigRequest_V1_System_Nginx        `protobuf:"bytes,5,opt,name=ngx,proto3" json:"ngx,omitempty" toml:"ngx,omitempty" mapstructure:"ngx,omitempty"`
	Proxy        *shared.Proxy                         `protobuf:"bytes,6,opt,name=proxy,proto3" json:"proxy,omitempty" toml:"proxy,omitempty" mapstructure:"proxy,omitempty"`
	FrontendTls  []*shared.FrontendTLSCredential       `protobuf:"bytes,7,rep,name=frontend_tls,json=frontendTls,proto3" json:"frontend_tls,omitempty" toml:"frontend_tls,omitempty" mapstructure:"frontend_tls,omitempty"`
	StaticConfig *ConfigRequest_V1_System_StaticConfig `protobuf:"bytes,8,opt,name=static_config,json=staticConfig,proto3" json:"static_config,omitempty" toml:"static_config,omitempty" mapstructure:"static_config,omitempty"`
}

func (x *ConfigRequest_V1_System) Reset() {
	*x = ConfigRequest_V1_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System) ProtoMessage() {}

func (x *ConfigRequest_V1_System) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ConfigRequest_V1_System) GetMlsa() *shared.Mlsa {
	if x != nil {
		return x.Mlsa
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetTls() *shared.TLSCredentials {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetService() *ConfigRequest_V1_System_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetLog() *ConfigRequest_V1_System_Logger {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetNgx() *ConfigRequest_V1_System_Nginx {
	if x != nil {
		return x.Ngx
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetProxy() *shared.Proxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetFrontendTls() []*shared.FrontendTLSCredential {
	if x != nil {
		return x.FrontendTls
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetStaticConfig() *ConfigRequest_V1_System_StaticConfig {
	if x != nil {
		return x.StaticConfig
	}
	return nil
}

type ConfigRequest_V1_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest_V1_Service) Reset() {
	*x = ConfigRequest_V1_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Service) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0, 1}
}

type ConfigRequest_V1_System_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host            *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"`
	HttpsPort       *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=https_port,json=httpsPort,proto3" json:"https_port,omitempty" toml:"https_port,omitempty" mapstructure:"https_port,omitempty"`
	HttpPort        *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=http_port,json=httpPort,proto3" json:"http_port,omitempty" toml:"http_port,omitempty" mapstructure:"http_port,omitempty"`
	ExternalFqdn    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=external_fqdn,json=externalFqdn,proto3" json:"external_fqdn,omitempty" toml:"external_fqdn,omitempty" mapstructure:"external_fqdn,omitempty"`
	MaintenanceMode *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=maintenance_mode,json=maintenanceMode,proto3" json:"maintenance_mode,omitempty" toml:"maintenance_mode,omitempty" mapstructure:"maintenance_mode,omitempty"`
}

func (x *ConfigRequest_V1_System_Service) Reset() {
	*x = ConfigRequest_V1_System_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Service) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *ConfigRequest_V1_System_Service) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ConfigRequest_V1_System_Service) GetHttpsPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.HttpsPort
	}
	return nil
}

func (x *ConfigRequest_V1_System_Service) GetHttpPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.HttpPort
	}
	return nil
}

func (x *ConfigRequest_V1_System_Service) GetExternalFqdn() *wrapperspb.StringValue {
	if x != nil {
		return x.ExternalFqdn
	}
	return nil
}

func (x *ConfigRequest_V1_System_Service) GetMaintenanceMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.MaintenanceMode
	}
	return nil
}

type ConfigRequest_V1_System_StaticConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []string `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty" toml:"products,omitempty" mapstructure:"products,omitempty"`
}

func (x *ConfigRequest_V1_System_StaticConfig) Reset() {
	*x = ConfigRequest_V1_System_StaticConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_StaticConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_StaticConfig) ProtoMessage() {}

func (x *ConfigRequest_V1_System_StaticConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_StaticConfig.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_StaticConfig) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *ConfigRequest_V1_System_StaticConfig) GetProducts() []string {
	if x != nil {
		return x.Products
	}
	return nil
}

type ConfigRequest_V1_System_Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty" toml:"level,omitempty" mapstructure:"level,omitempty"`
}

func (x *ConfigRequest_V1_System_Logger) Reset() {
	*x = ConfigRequest_V1_System_Logger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Logger) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Logger) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Logger.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Logger) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *ConfigRequest_V1_System_Logger) GetLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.Level
	}
	return nil
}

type ConfigRequest_V1_System_Nginx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// We've omitted the 'server', 'location', 'upstream' and other
	// smaller sub-contexts because they are always contained within
	// another context and are either not generalizable or can have
	// a default within a parent context.
	Main   *ConfigRequest_V1_System_Nginx_Main   `protobuf:"bytes,1,opt,name=main,proto3" json:"main,omitempty" toml:"main,omitempty" mapstructure:"main,omitempty"`
	Events *ConfigRequest_V1_System_Nginx_Events `protobuf:"bytes,2,opt,name=events,proto3" json:"events,omitempty" toml:"events,omitempty" mapstructure:"events,omitempty"`
	Http   *ConfigRequest_V1_System_Nginx_Http   `protobuf:"bytes,3,opt,name=http,proto3" json:"http,omitempty" toml:"http,omitempty" mapstructure:"http,omitempty"`
	Mail   *ConfigRequest_V1_System_Nginx_Mail   `protobuf:"bytes,4,opt,name=mail,proto3" json:"mail,omitempty" toml:"mail,omitempty" mapstructure:"mail,omitempty"`
}

func (x *ConfigRequest_V1_System_Nginx) Reset() {
	*x = ConfigRequest_V1_System_Nginx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Nginx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Nginx) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Nginx) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Nginx.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Nginx) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *ConfigRequest_V1_System_Nginx) GetMain() *ConfigRequest_V1_System_Nginx_Main {
	if x != nil {
		return x.Main
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx) GetEvents() *ConfigRequest_V1_System_Nginx_Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx) GetHttp() *ConfigRequest_V1_System_Nginx_Http {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx) GetMail() *ConfigRequest_V1_System_Nginx_Mail {
	if x != nil {
		return x.Mail
	}
	return nil
}

type ConfigRequest_V1_System_Nginx_Main struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerProcesses *wrapperspb.Int32Value  `protobuf:"bytes,1,opt,name=worker_processes,json=workerProcesses,proto3" json:"worker_processes,omitempty" toml:"worker_processes,omitempty" mapstructure:"worker_processes,omitempty"`
	ErrorLog        *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error_log,json=errorLog,proto3" json:"error_log,omitempty" toml:"error_log,omitempty" mapstructure:"error_log,omitempty"`
}

func (x *ConfigRequest_V1_System_Nginx_Main) Reset() {
	*x = ConfigRequest_V1_System_Nginx_Main{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Nginx_Main) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Nginx_Main) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Nginx_Main) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Nginx_Main.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Nginx_Main) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 3, 0}
}

func (x *ConfigRequest_V1_System_Nginx_Main) GetWorkerProcesses() *wrapperspb.Int32Value {
	if x != nil {
		return x.WorkerProcesses
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Main) GetErrorLog() *wrapperspb.StringValue {
	if x != nil {
		return x.ErrorLog
	}
	return nil
}

type ConfigRequest_V1_System_Nginx_Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerConnections *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=worker_connections,json=workerConnections,proto3" json:"worker_connections,omitempty" toml:"worker_connections,omitempty" mapstructure:"worker_connections,omitempty"`
	// use $worker_processor_method;
	WorkerProcessorMethod *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=worker_processor_method,json=workerProcessorMethod,proto3" json:"worker_processor_method,omitempty" toml:"worker_processor_method,omitempty" mapstructure:"worker_processor_method,omitempty"`
	MultiAccept           *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=multi_accept,json=multiAccept,proto3" json:"multi_accept,omitempty" toml:"multi_accept,omitempty" mapstructure:"multi_accept,omitempty"`
}

func (x *ConfigRequest_V1_System_Nginx_Events) Reset() {
	*x = ConfigRequest_V1_System_Nginx_Events{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Nginx_Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Nginx_Events) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Nginx_Events) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Nginx_Events.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Nginx_Events) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 3, 1}
}

func (x *ConfigRequest_V1_System_Nginx_Events) GetWorkerConnections() *wrapperspb.Int32Value {
	if x != nil {
		return x.WorkerConnections
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Events) GetWorkerProcessorMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkerProcessorMethod
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Events) GetMultiAccept() *wrapperspb.StringValue {
	if x != nil {
		return x.MultiAccept
	}
	return nil
}

type ConfigRequest_V1_System_Nginx_Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessLog                      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=access_log,json=accessLog,proto3" json:"access_log,omitempty" toml:"access_log,omitempty" mapstructure:"access_log,omitempty"`
	AccessLogBufferSize            *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=access_log_buffer_size,json=accessLogBufferSize,proto3" json:"access_log_buffer_size,omitempty" toml:"access_log_buffer_size,omitempty" mapstructure:"access_log_buffer_size,omitempty"`
	AccessLogFlushTime             *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=access_log_flush_time,json=accessLogFlushTime,proto3" json:"access_log_flush_time,omitempty" toml:"access_log_flush_time,omitempty" mapstructure:"access_log_flush_time,omitempty"`
	ClientMaxBodySize              *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=client_max_body_size,json=clientMaxBodySize,proto3" json:"client_max_body_size,omitempty" toml:"client_max_body_size,omitempty" mapstructure:"client_max_body_size,omitempty"`
	ClientBodyBufferSize           *wrapperspb.StringValue `protobuf:"bytes,23,opt,name=client_body_buffer_size,json=clientBodyBufferSize,proto3" json:"client_body_buffer_size,omitempty" toml:"client_body_buffer_size,omitempty" mapstructure:"client_body_buffer_size,omitempty"`
	DefaultType                    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=default_type,json=defaultType,proto3" json:"default_type,omitempty" toml:"default_type,omitempty" mapstructure:"default_type,omitempty"`
	KeepaliveTimeout               *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=keepalive_timeout,json=keepaliveTimeout,proto3" json:"keepalive_timeout,omitempty" toml:"keepalive_timeout,omitempty" mapstructure:"keepalive_timeout,omitempty"`
	KeepaliveRequests              *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=keepalive_requests,json=keepaliveRequests,proto3" json:"keepalive_requests,omitempty" toml:"keepalive_requests,omitempty" mapstructure:"keepalive_requests,omitempty"`
	Gzip                           *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=gzip,proto3" json:"gzip,omitempty" toml:"gzip,omitempty" mapstructure:"gzip,omitempty"`
	GzipCompLevel                  *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=gzip_comp_level,json=gzipCompLevel,proto3" json:"gzip_comp_level,omitempty" toml:"gzip_comp_level,omitempty" mapstructure:"gzip_comp_level,omitempty"`
	GzipDisable                    *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=gzip_disable,json=gzipDisable,proto3" json:"gzip_disable,omitempty" toml:"gzip_disable,omitempty" mapstructure:"gzip_disable,omitempty"`
	GzipHttpVersion                *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=gzip_http_version,json=gzipHttpVersion,proto3" json:"gzip_http_version,omitempty" toml:"gzip_http_version,omitempty" mapstructure:"gzip_http_version,omitempty"`
	GzipMinLength                  *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=gzip_min_length,json=gzipMinLength,proto3" json:"gzip_min_length,omitempty" toml:"gzip_min_length,omitempty" mapstructure:"gzip_min_length,omitempty"`
	GzipProxied                    *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=gzip_proxied,json=gzipProxied,proto3" json:"gzip_proxied,omitempty" toml:"gzip_proxied,omitempty" mapstructure:"gzip_proxied,omitempty"`
	GzipTypes                      *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=gzip_types,json=gzipTypes,proto3" json:"gzip_types,omitempty" toml:"gzip_types,omitempty" mapstructure:"gzip_types,omitempty"`
	GzipVary                       *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=gzip_vary,json=gzipVary,proto3" json:"gzip_vary,omitempty" toml:"gzip_vary,omitempty" mapstructure:"gzip_vary,omitempty"`
	LargeClientHeaderBuffersSize   *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=large_client_header_buffers_size,json=largeClientHeaderBuffersSize,proto3" json:"large_client_header_buffers_size,omitempty" toml:"large_client_header_buffers_size,omitempty" mapstructure:"large_client_header_buffers_size,omitempty"`
	LargeClientHeaderBuffersNumber *wrapperspb.Int32Value  `protobuf:"bytes,22,opt,name=large_client_header_buffers_number,json=largeClientHeaderBuffersNumber,proto3" json:"large_client_header_buffers_number,omitempty" toml:"large_client_header_buffers_number,omitempty" mapstructure:"large_client_header_buffers_number,omitempty"`
	Sendfile                       *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=sendfile,proto3" json:"sendfile,omitempty" toml:"sendfile,omitempty" mapstructure:"sendfile,omitempty"`
	SslCiphers                     *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=ssl_ciphers,json=sslCiphers,proto3" json:"ssl_ciphers,omitempty" toml:"ssl_ciphers,omitempty" mapstructure:"ssl_ciphers,omitempty"`
	SslProtocols                   *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=ssl_protocols,json=sslProtocols,proto3" json:"ssl_protocols,omitempty" toml:"ssl_protocols,omitempty" mapstructure:"ssl_protocols,omitempty"`
	TcpNodelay                     *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=tcp_nodelay,json=tcpNodelay,proto3" json:"tcp_nodelay,omitempty" toml:"tcp_nodelay,omitempty" mapstructure:"tcp_nodelay,omitempty"`
	TcpNopush                      *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=tcp_nopush,json=tcpNopush,proto3" json:"tcp_nopush,omitempty" toml:"tcp_nopush,omitempty" mapstructure:"tcp_nopush,omitempty"`
	ProxyBuffering                 *wrapperspb.StringValue `protobuf:"bytes,25,opt,name=proxy_buffering,json=proxyBuffering,proto3" json:"proxy_buffering,omitempty" toml:"proxy_buffering,omitempty" mapstructure:"proxy_buffering,omitempty"`
	ProxyBufferSize                *wrapperspb.StringValue `protobuf:"bytes,26,opt,name=proxy_buffer_size,json=proxyBufferSize,proto3" json:"proxy_buffer_size,omitempty" toml:"proxy_buffer_size,omitempty" mapstructure:"proxy_buffer_size,omitempty"`
	ProxyBuffers                   *wrapperspb.StringValue `protobuf:"bytes,27,opt,name=proxy_buffers,json=proxyBuffers,proto3" json:"proxy_buffers,omitempty" toml:"proxy_buffers,omitempty" mapstructure:"proxy_buffers,omitempty"`
	ProxyBusyBuffersSize           *wrapperspb.StringValue `protobuf:"bytes,28,opt,name=proxy_busy_buffers_size,json=proxyBusyBuffersSize,proto3" json:"proxy_busy_buffers_size,omitempty" toml:"proxy_busy_buffers_size,omitempty" mapstructure:"proxy_busy_buffers_size,omitempty"`
	EnableCspHeader                *wrapperspb.BoolValue   `protobuf:"bytes,29,opt,name=enable_csp_header,json=enableCspHeader,proto3" json:"enable_csp_header,omitempty" toml:"enable_csp_header,omitempty" mapstructure:"enable_csp_header,omitempty"`
	// Auto-calculated
	Ipv6Supported *wrapperspb.BoolValue `protobuf:"bytes,24,opt,name=ipv6_supported,json=ipv6Supported,proto3" json:"ipv6_supported,omitempty" toml:"ipv6_supported,omitempty" mapstructure:"ipv6_supported,omitempty"`
}

func (x *ConfigRequest_V1_System_Nginx_Http) Reset() {
	*x = ConfigRequest_V1_System_Nginx_Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Nginx_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Nginx_Http) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Nginx_Http) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Nginx_Http.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Nginx_Http) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 3, 2}
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetAccessLog() *wrapperspb.StringValue {
	if x != nil {
		return x.AccessLog
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetAccessLogBufferSize() *wrapperspb.StringValue {
	if x != nil {
		return x.AccessLogBufferSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetAccessLogFlushTime() *wrapperspb.StringValue {
	if x != nil {
		return x.AccessLogFlushTime
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetClientMaxBodySize() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientMaxBodySize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetClientBodyBufferSize() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientBodyBufferSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetDefaultType() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultType
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetKeepaliveTimeout() *wrapperspb.Int32Value {
	if x != nil {
		return x.KeepaliveTimeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetKeepaliveRequests() *wrapperspb.Int32Value {
	if x != nil {
		return x.KeepaliveRequests
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzip() *wrapperspb.StringValue {
	if x != nil {
		return x.Gzip
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipCompLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.GzipCompLevel
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipDisable() *wrapperspb.StringValue {
	if x != nil {
		return x.GzipDisable
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipHttpVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.GzipHttpVersion
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipMinLength() *wrapperspb.Int32Value {
	if x != nil {
		return x.GzipMinLength
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipProxied() *wrapperspb.StringValue {
	if x != nil {
		return x.GzipProxied
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipTypes() *wrapperspb.StringValue {
	if x != nil {
		return x.GzipTypes
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetGzipVary() *wrapperspb.StringValue {
	if x != nil {
		return x.GzipVary
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetLargeClientHeaderBuffersSize() *wrapperspb.StringValue {
	if x != nil {
		return x.LargeClientHeaderBuffersSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetLargeClientHeaderBuffersNumber() *wrapperspb.Int32Value {
	if x != nil {
		return x.LargeClientHeaderBuffersNumber
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetSendfile() *wrapperspb.StringValue {
	if x != nil {
		return x.Sendfile
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetSslCiphers() *wrapperspb.StringValue {
	if x != nil {
		return x.SslCiphers
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetSslProtocols() *wrapperspb.StringValue {
	if x != nil {
		return x.SslProtocols
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetTcpNodelay() *wrapperspb.StringValue {
	if x != nil {
		return x.TcpNodelay
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetTcpNopush() *wrapperspb.StringValue {
	if x != nil {
		return x.TcpNopush
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetProxyBuffering() *wrapperspb.StringValue {
	if x != nil {
		return x.ProxyBuffering
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetProxyBufferSize() *wrapperspb.StringValue {
	if x != nil {
		return x.ProxyBufferSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetProxyBuffers() *wrapperspb.StringValue {
	if x != nil {
		return x.ProxyBuffers
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetProxyBusyBuffersSize() *wrapperspb.StringValue {
	if x != nil {
		return x.ProxyBusyBuffersSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetEnableCspHeader() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableCspHeader
	}
	return nil
}

func (x *ConfigRequest_V1_System_Nginx_Http) GetIpv6Supported() *wrapperspb.BoolValue {
	if x != nil {
		return x.Ipv6Supported
	}
	return nil
}

type ConfigRequest_V1_System_Nginx_Mail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest_V1_System_Nginx_Mail) Reset() {
	*x = ConfigRequest_V1_System_Nginx_Mail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_load_balancer_config_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Nginx_Mail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Nginx_Mail) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Nginx_Mail) ProtoReflect() protoreflect.Message {
	mi := &file_config_load_balancer_config_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Nginx_Mail.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Nginx_Mail) Descriptor() ([]byte, []int) {
	return file_config_load_balancer_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 3, 3}
}

var File_config_load_balancer_config_request_proto protoreflect.FileDescriptor

var file_config_load_balancer_config_request_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x1a, 0x1a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x74, 0x6c, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2d, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x61, 0x32,
	0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x32, 0x63, 0x6f,
	0x6e, 0x66, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x21, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x52, 0x02, 0x76, 0x31, 0x1a, 0xa1, 0x20, 0x0a, 0x02,
	0x56, 0x31, 0x12, 0x4c, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x73, 0x79, 0x73,
	0x12, 0x4d, 0x0a, 0x03, 0x73, 0x76, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x73, 0x76, 0x63, 0x1a,
	0xf2, 0x1e, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x6c,
	0x73, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6c, 0x73, 0x61, 0x52, 0x04, 0x6d, 0x6c, 0x73, 0x61,
	0x12, 0x3c, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x5c,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x03,
	0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x03, 0x6c, 0x6f,
	0x67, 0x12, 0x52, 0x0a, 0x03, 0x6e, 0x67, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78,
	0x52, 0x03, 0x6e, 0x67, 0x78, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x54,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x4c, 0x53, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x54, 0x6c, 0x73, 0x12, 0x6c, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0xe6, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x51, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x15, 0xc2, 0xf3, 0x18, 0x11, 0x0a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0x10, 0xbb,
	0x03, 0x1a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x12, 0xc2, 0xf3, 0x18, 0x0e, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x10,
	0x50, 0x1a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x71,
	0x64, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x46, 0x71, 0x64, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x2a, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x9c, 0x16, 0x0a, 0x05, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x12,
	0x59, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x2e,
	0x4d, 0x61, 0x69, 0x6e, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x5f, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x59, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6d, 0x61, 0x69,
	0x6c, 0x1a, 0x89, 0x01, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x1a, 0xeb, 0x01,
	0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x9e, 0x10, 0x0a, 0x04,
	0x48, 0x74, 0x74, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x12, 0x51, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x04, 0x67, 0x7a, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x67, 0x7a,
	0x69, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x67, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x67, 0x7a, 0x69, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x67, 0x7a, 0x69, 0x70,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67, 0x7a,
	0x69, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x67, 0x7a, 0x69,
	0x70, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x67, 0x7a, 0x69, 0x70, 0x48, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x67, 0x7a, 0x69, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x67, 0x7a, 0x69, 0x70, 0x4d,
	0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x67, 0x7a, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67, 0x7a,
	0x69, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x7a, 0x69,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x7a, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x7a, 0x69, 0x70, 0x5f, 0x76,
	0x61, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x67, 0x7a, 0x69, 0x70, 0x56, 0x61, 0x72,
	0x79, 0x12, 0x64, 0x0a, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x67, 0x0a, 0x22, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x73,
	0x6c, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73,
	0x73, 0x6c, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x73, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x73, 0x73, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0b,
	0x74, 0x63, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x74, 0x63, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x74,
	0x63, 0x70, 0x5f, 0x6e, 0x6f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74,
	0x63, 0x70, 0x4e, 0x6f, 0x70, 0x75, 0x73, 0x68, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x48, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x42, 0x75, 0x73, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x73, 0x70, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69,
	0x70, 0x76, 0x36, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x06, 0x0a, 0x04,
	0x4d, 0x61, 0x69, 0x6c, 0x1a, 0x09, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a,
	0x1c, 0xc2, 0xf3, 0x18, 0x18, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2d,
	0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x03, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_load_balancer_config_request_proto_rawDescOnce sync.Once
	file_config_load_balancer_config_request_proto_rawDescData = file_config_load_balancer_config_request_proto_rawDesc
)

func file_config_load_balancer_config_request_proto_rawDescGZIP() []byte {
	file_config_load_balancer_config_request_proto_rawDescOnce.Do(func() {
		file_config_load_balancer_config_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_load_balancer_config_request_proto_rawDescData)
	})
	return file_config_load_balancer_config_request_proto_rawDescData
}

var file_config_load_balancer_config_request_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_config_load_balancer_config_request_proto_goTypes = []interface{}{
	(*ConfigRequest)(nil),                        // 0: chef.automate.infra.load_balancer.ConfigRequest
	(*ConfigRequest_V1)(nil),                     // 1: chef.automate.infra.load_balancer.ConfigRequest.V1
	(*ConfigRequest_V1_System)(nil),              // 2: chef.automate.infra.load_balancer.ConfigRequest.V1.System
	(*ConfigRequest_V1_Service)(nil),             // 3: chef.automate.infra.load_balancer.ConfigRequest.V1.Service
	(*ConfigRequest_V1_System_Service)(nil),      // 4: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Service
	(*ConfigRequest_V1_System_StaticConfig)(nil), // 5: chef.automate.infra.load_balancer.ConfigRequest.V1.System.StaticConfig
	(*ConfigRequest_V1_System_Logger)(nil),       // 6: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Logger
	(*ConfigRequest_V1_System_Nginx)(nil),        // 7: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx
	(*ConfigRequest_V1_System_Nginx_Main)(nil),   // 8: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Main
	(*ConfigRequest_V1_System_Nginx_Events)(nil), // 9: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Events
	(*ConfigRequest_V1_System_Nginx_Http)(nil),   // 10: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http
	(*ConfigRequest_V1_System_Nginx_Mail)(nil),   // 11: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Mail
	(*shared.Mlsa)(nil),                          // 12: chef.automate.infra.config.Mlsa
	(*shared.TLSCredentials)(nil),                // 13: chef.automate.infra.config.TLSCredentials
	(*shared.Proxy)(nil),                         // 14: chef.automate.infra.config.Proxy
	(*shared.FrontendTLSCredential)(nil),         // 15: chef.automate.infra.config.FrontendTLSCredential
	(*wrapperspb.StringValue)(nil),               // 16: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),                // 17: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),                 // 18: google.protobuf.BoolValue
}
var file_config_load_balancer_config_request_proto_depIdxs = []int32{
	1,  // 0: chef.automate.infra.load_balancer.ConfigRequest.v1:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1
	2,  // 1: chef.automate.infra.load_balancer.ConfigRequest.V1.sys:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1.System
	3,  // 2: chef.automate.infra.load_balancer.ConfigRequest.V1.svc:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1.Service
	12, // 3: chef.automate.infra.load_balancer.ConfigRequest.V1.System.mlsa:type_name -> chef.automate.infra.config.Mlsa
	13, // 4: chef.automate.infra.load_balancer.ConfigRequest.V1.System.tls:type_name -> chef.automate.infra.config.TLSCredentials
	4,  // 5: chef.automate.infra.load_balancer.ConfigRequest.V1.System.service:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1.System.Service
	6,  // 6: chef.automate.infra.load_balancer.ConfigRequest.V1.System.log:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1.System.Logger
	7,  // 7: chef.automate.infra.load_balancer.ConfigRequest.V1.System.ngx:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx
	14, // 8: chef.automate.infra.load_balancer.ConfigRequest.V1.System.proxy:type_name -> chef.automate.infra.config.Proxy
	15, // 9: chef.automate.infra.load_balancer.ConfigRequest.V1.System.frontend_tls:type_name -> chef.automate.infra.config.FrontendTLSCredential
	5,  // 10: chef.automate.infra.load_balancer.ConfigRequest.V1.System.static_config:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1.System.StaticConfig
	16, // 11: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Service.host:type_name -> google.protobuf.StringValue
	17, // 12: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Service.https_port:type_name -> google.protobuf.Int32Value
	17, // 13: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Service.http_port:type_name -> google.protobuf.Int32Value
	16, // 14: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Service.external_fqdn:type_name -> google.protobuf.StringValue
	18, // 15: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Service.maintenance_mode:type_name -> google.protobuf.BoolValue
	16, // 16: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Logger.level:type_name -> google.protobuf.StringValue
	8,  // 17: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.main:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Main
	9,  // 18: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.events:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Events
	10, // 19: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.http:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http
	11, // 20: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.mail:type_name -> chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Mail
	17, // 21: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Main.worker_processes:type_name -> google.protobuf.Int32Value
	16, // 22: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Main.error_log:type_name -> google.protobuf.StringValue
	17, // 23: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Events.worker_connections:type_name -> google.protobuf.Int32Value
	16, // 24: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Events.worker_processor_method:type_name -> google.protobuf.StringValue
	16, // 25: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Events.multi_accept:type_name -> google.protobuf.StringValue
	16, // 26: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.access_log:type_name -> google.protobuf.StringValue
	16, // 27: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.access_log_buffer_size:type_name -> google.protobuf.StringValue
	16, // 28: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.access_log_flush_time:type_name -> google.protobuf.StringValue
	16, // 29: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.client_max_body_size:type_name -> google.protobuf.StringValue
	16, // 30: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.client_body_buffer_size:type_name -> google.protobuf.StringValue
	16, // 31: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.default_type:type_name -> google.protobuf.StringValue
	17, // 32: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.keepalive_timeout:type_name -> google.protobuf.Int32Value
	17, // 33: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.keepalive_requests:type_name -> google.protobuf.Int32Value
	16, // 34: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.gzip:type_name -> google.protobuf.StringValue
	16, // 35: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.gzip_comp_level:type_name -> google.protobuf.StringValue
	16, // 36: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.gzip_disable:type_name -> google.protobuf.StringValue
	16, // 37: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.gzip_http_version:type_name -> google.protobuf.StringValue
	17, // 38: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.gzip_min_length:type_name -> google.protobuf.Int32Value
	16, // 39: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.gzip_proxied:type_name -> google.protobuf.StringValue
	16, // 40: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.gzip_types:type_name -> google.protobuf.StringValue
	16, // 41: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.gzip_vary:type_name -> google.protobuf.StringValue
	16, // 42: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.large_client_header_buffers_size:type_name -> google.protobuf.StringValue
	17, // 43: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.large_client_header_buffers_number:type_name -> google.protobuf.Int32Value
	16, // 44: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.sendfile:type_name -> google.protobuf.StringValue
	16, // 45: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.ssl_ciphers:type_name -> google.protobuf.StringValue
	16, // 46: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.ssl_protocols:type_name -> google.protobuf.StringValue
	16, // 47: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.tcp_nodelay:type_name -> google.protobuf.StringValue
	16, // 48: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.tcp_nopush:type_name -> google.protobuf.StringValue
	16, // 49: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.proxy_buffering:type_name -> google.protobuf.StringValue
	16, // 50: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.proxy_buffer_size:type_name -> google.protobuf.StringValue
	16, // 51: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.proxy_buffers:type_name -> google.protobuf.StringValue
	16, // 52: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.proxy_busy_buffers_size:type_name -> google.protobuf.StringValue
	18, // 53: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.enable_csp_header:type_name -> google.protobuf.BoolValue
	18, // 54: chef.automate.infra.load_balancer.ConfigRequest.V1.System.Nginx.Http.ipv6_supported:type_name -> google.protobuf.BoolValue
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_config_load_balancer_config_request_proto_init() }
func file_config_load_balancer_config_request_proto_init() {
	if File_config_load_balancer_config_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_load_balancer_config_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_StaticConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Logger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Nginx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Nginx_Main); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Nginx_Events); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Nginx_Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_load_balancer_config_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Nginx_Mail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_load_balancer_config_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_load_balancer_config_request_proto_goTypes,
		DependencyIndexes: file_config_load_balancer_config_request_proto_depIdxs,
		MessageInfos:      file_config_load_balancer_config_request_proto_msgTypes,
	}.Build()
	File_config_load_balancer_config_request_proto = out.File
	file_config_load_balancer_config_request_proto_rawDesc = nil
	file_config_load_balancer_config_request_proto_goTypes = nil
	file_config_load_balancer_config_request_proto_depIdxs = nil
}
