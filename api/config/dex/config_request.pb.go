// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: config/dex/config_request.proto

package dex

import (
	shared "github.com/chef/automate/api/config/shared"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-a2-config/api/a2conf"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1 *ConfigRequest_V1 `protobuf:"bytes,3,opt,name=v1,proto3" json:"v1,omitempty" toml:"v1,omitempty" mapstructure:"v1,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigRequest) GetV1() *ConfigRequest_V1 {
	if x != nil {
		return x.V1
	}
	return nil
}

type ConfigRequest_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys *ConfigRequest_V1_System  `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty" toml:"sys,omitempty" mapstructure:"sys,omitempty"`
	Svc *ConfigRequest_V1_Service `protobuf:"bytes,2,opt,name=svc,proto3" json:"svc,omitempty" toml:"svc,omitempty" mapstructure:"svc,omitempty"`
}

func (x *ConfigRequest_V1) Reset() {
	*x = ConfigRequest_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1) ProtoMessage() {}

func (x *ConfigRequest_V1) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConfigRequest_V1) GetSys() *ConfigRequest_V1_System {
	if x != nil {
		return x.Sys
	}
	return nil
}

func (x *ConfigRequest_V1) GetSvc() *ConfigRequest_V1_Service {
	if x != nil {
		return x.Svc
	}
	return nil
}

type ConfigRequest_V1_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mlsa       *shared.Mlsa                     `protobuf:"bytes,1,opt,name=mlsa,proto3" json:"mlsa,omitempty" toml:"mlsa,omitempty" mapstructure:"mlsa,omitempty"`
	Log        *ConfigRequest_V1_Log            `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty" toml:"log,omitempty" mapstructure:"log,omitempty"`
	Service    *ConfigRequest_V1_System_Service `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty" toml:"service,omitempty" mapstructure:"service,omitempty"`
	Grpc       *ConfigRequest_V1_Grpc           `protobuf:"bytes,4,opt,name=grpc,proto3" json:"grpc,omitempty" toml:"grpc,omitempty" mapstructure:"grpc,omitempty"`
	Storage    *ConfigRequest_V1_Storage        `protobuf:"bytes,5,opt,name=storage,proto3" json:"storage,omitempty" toml:"storage,omitempty" mapstructure:"storage,omitempty"`
	Expiry     *ConfigRequest_V1_Expiry         `protobuf:"bytes,6,opt,name=expiry,proto3" json:"expiry,omitempty" toml:"expiry,omitempty" mapstructure:"expiry,omitempty"`
	Bootstrap  *ConfigRequest_V1_Bootstrap      `protobuf:"bytes,7,opt,name=bootstrap,proto3" json:"bootstrap,omitempty" toml:"bootstrap,omitempty" mapstructure:"bootstrap,omitempty"`
	Connectors *ConfigRequest_V1_Connectors     `protobuf:"bytes,8,opt,name=connectors,proto3" json:"connectors,omitempty" toml:"connectors,omitempty" mapstructure:"connectors,omitempty"`
	Tls        *shared.TLSCredentials           `protobuf:"bytes,9,opt,name=tls,proto3" json:"tls,omitempty" toml:"tls,omitempty" mapstructure:"tls,omitempty"`
	Disclosure *ConfigRequest_V1_Disclosure     `protobuf:"bytes,10,opt,name=disclosure,proto3" json:"disclosure,omitempty" toml:"disclosure,omitempty" mapstructure:"disclosure,omitempty"`
	Banner     *ConfigRequest_V1_Banner         `protobuf:"bytes,11,opt,name=banner,proto3" json:"banner,omitempty" toml:"banner,omitempty" mapstructure:"banner,omitempty"`
}

func (x *ConfigRequest_V1_System) Reset() {
	*x = ConfigRequest_V1_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System) ProtoMessage() {}

func (x *ConfigRequest_V1_System) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ConfigRequest_V1_System) GetMlsa() *shared.Mlsa {
	if x != nil {
		return x.Mlsa
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetLog() *ConfigRequest_V1_Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetService() *ConfigRequest_V1_System_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetGrpc() *ConfigRequest_V1_Grpc {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetStorage() *ConfigRequest_V1_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetExpiry() *ConfigRequest_V1_Expiry {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetBootstrap() *ConfigRequest_V1_Bootstrap {
	if x != nil {
		return x.Bootstrap
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetConnectors() *ConfigRequest_V1_Connectors {
	if x != nil {
		return x.Connectors
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetTls() *shared.TLSCredentials {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetDisclosure() *ConfigRequest_V1_Disclosure {
	if x != nil {
		return x.Disclosure
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetBanner() *ConfigRequest_V1_Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

type ConfigRequest_V1_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest_V1_Service) Reset() {
	*x = ConfigRequest_V1_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Service) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 1}
}

type ConfigRequest_V1_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty" toml:"level,omitempty" mapstructure:"level,omitempty"`
}

func (x *ConfigRequest_V1_Log) Reset() {
	*x = ConfigRequest_V1_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Log) ProtoMessage() {}

func (x *ConfigRequest_V1_Log) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Log.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Log) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *ConfigRequest_V1_Log) GetLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.Level
	}
	return nil
}

type ConfigRequest_V1_Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty" toml:"database,omitempty" mapstructure:"database,omitempty"`
	User     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty" toml:"user,omitempty" mapstructure:"user,omitempty"`
}

func (x *ConfigRequest_V1_Storage) Reset() {
	*x = ConfigRequest_V1_Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Storage) ProtoMessage() {}

func (x *ConfigRequest_V1_Storage) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Storage.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Storage) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *ConfigRequest_V1_Storage) GetDatabase() *wrapperspb.StringValue {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *ConfigRequest_V1_Storage) GetUser() *wrapperspb.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

type ConfigRequest_V1_Grpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Host *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"` // The listen host is no longer setable(localhost only)
	Port *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
}

func (x *ConfigRequest_V1_Grpc) Reset() {
	*x = ConfigRequest_V1_Grpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Grpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Grpc) ProtoMessage() {}

func (x *ConfigRequest_V1_Grpc) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Grpc.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Grpc) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 4}
}

// Deprecated: Do not use.
func (x *ConfigRequest_V1_Grpc) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ConfigRequest_V1_Grpc) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

type ConfigRequest_V1_Expiry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigningKeys *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=signing_keys,json=signingKeys,proto3" json:"signing_keys,omitempty" toml:"signing_keys,omitempty" mapstructure:"signing_keys,omitempty"`
	IdTokens    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=id_tokens,json=idTokens,proto3" json:"id_tokens,omitempty" toml:"id_tokens,omitempty" mapstructure:"id_tokens,omitempty"`
}

func (x *ConfigRequest_V1_Expiry) Reset() {
	*x = ConfigRequest_V1_Expiry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Expiry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Expiry) ProtoMessage() {}

func (x *ConfigRequest_V1_Expiry) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Expiry.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Expiry) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *ConfigRequest_V1_Expiry) GetSigningKeys() *wrapperspb.StringValue {
	if x != nil {
		return x.SigningKeys
	}
	return nil
}

func (x *ConfigRequest_V1_Expiry) GetIdTokens() *wrapperspb.StringValue {
	if x != nil {
		return x.IdTokens
	}
	return nil
}

type ConfigRequest_V1_Bootstrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsecureAdmin *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=insecure_admin,json=insecureAdmin,proto3" json:"insecure_admin,omitempty" toml:"insecure_admin,omitempty" mapstructure:"insecure_admin,omitempty"`
}

func (x *ConfigRequest_V1_Bootstrap) Reset() {
	*x = ConfigRequest_V1_Bootstrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Bootstrap) ProtoMessage() {}

func (x *ConfigRequest_V1_Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Bootstrap.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Bootstrap) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *ConfigRequest_V1_Bootstrap) GetInsecureAdmin() *wrapperspb.BoolValue {
	if x != nil {
		return x.InsecureAdmin
	}
	return nil
}

type ConfigRequest_V1_Connectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Google            *ConfigRequest_V1_Google    `protobuf:"bytes,1,opt,name=google,proto3" json:"google,omitempty" toml:"google,omitempty" mapstructure:"google,omitempty"`
	Ldap              *ConfigRequest_V1_Ldap      `protobuf:"bytes,2,opt,name=ldap,proto3" json:"ldap,omitempty" toml:"ldap,omitempty" mapstructure:"ldap,omitempty"`
	Saml              *ConfigRequest_V1_Saml      `protobuf:"bytes,3,opt,name=saml,proto3" json:"saml,omitempty" toml:"saml,omitempty" mapstructure:"saml,omitempty"`
	MsadLdap          *ConfigRequest_V1_Msad_Ldap `protobuf:"bytes,4,opt,name=msad_ldap,json=msadLdap,proto3" json:"msad_ldap,omitempty" toml:"msad_ldap,omitempty" mapstructure:"msad_ldap,omitempty"`
	DisableLocalUsers *wrapperspb.BoolValue       `protobuf:"bytes,5,opt,name=disable_local_users,json=disableLocalUsers,proto3" json:"disable_local_users,omitempty" toml:"disable_local_users,omitempty" mapstructure:"disable_local_users,omitempty"`
}

func (x *ConfigRequest_V1_Connectors) Reset() {
	*x = ConfigRequest_V1_Connectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Connectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Connectors) ProtoMessage() {}

func (x *ConfigRequest_V1_Connectors) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Connectors.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Connectors) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 7}
}

func (x *ConfigRequest_V1_Connectors) GetGoogle() *ConfigRequest_V1_Google {
	if x != nil {
		return x.Google
	}
	return nil
}

func (x *ConfigRequest_V1_Connectors) GetLdap() *ConfigRequest_V1_Ldap {
	if x != nil {
		return x.Ldap
	}
	return nil
}

func (x *ConfigRequest_V1_Connectors) GetSaml() *ConfigRequest_V1_Saml {
	if x != nil {
		return x.Saml
	}
	return nil
}

func (x *ConfigRequest_V1_Connectors) GetMsadLdap() *ConfigRequest_V1_Msad_Ldap {
	if x != nil {
		return x.MsadLdap
	}
	return nil
}

func (x *ConfigRequest_V1_Connectors) GetDisableLocalUsers() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableLocalUsers
	}
	return nil
}

type ConfigRequest_V1_Google struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty" toml:"client_id,omitempty" mapstructure:"client_id,omitempty"`
	ClientSecret *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty" toml:"client_secret,omitempty" mapstructure:"client_secret,omitempty"`
}

func (x *ConfigRequest_V1_Google) Reset() {
	*x = ConfigRequest_V1_Google{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Google) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Google) ProtoMessage() {}

func (x *ConfigRequest_V1_Google) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Google.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Google) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 8}
}

func (x *ConfigRequest_V1_Google) GetClientId() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *ConfigRequest_V1_Google) GetClientSecret() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

type ConfigRequest_V1_Ldap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaContents              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=ca_contents,json=caContents,proto3" json:"ca_contents,omitempty" toml:"ca_contents,omitempty" mapstructure:"ca_contents,omitempty"`
	Host                    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"`
	BindDn                  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=bind_dn,json=bindDn,proto3" json:"bind_dn,omitempty" toml:"bind_dn,omitempty" mapstructure:"bind_dn,omitempty"`
	BindPassword            *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=bind_password,json=bindPassword,proto3" json:"bind_password,omitempty" toml:"bind_password,omitempty" mapstructure:"bind_password,omitempty"`
	BaseUserSearchDn        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=base_user_search_dn,json=baseUserSearchDn,proto3" json:"base_user_search_dn,omitempty" toml:"base_user_search_dn,omitempty" mapstructure:"base_user_search_dn,omitempty"`
	UserQueryFilter         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=user_query_filter,json=userQueryFilter,proto3" json:"user_query_filter,omitempty" toml:"user_query_filter,omitempty" mapstructure:"user_query_filter,omitempty"`
	UsernameAttr            *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=username_attr,json=usernameAttr,proto3" json:"username_attr,omitempty" toml:"username_attr,omitempty" mapstructure:"username_attr,omitempty"`
	UserIdAttr              *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=user_id_attr,json=userIdAttr,proto3" json:"user_id_attr,omitempty" toml:"user_id_attr,omitempty" mapstructure:"user_id_attr,omitempty"`
	EmailAttr               *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=email_attr,json=emailAttr,proto3" json:"email_attr,omitempty" toml:"email_attr,omitempty" mapstructure:"email_attr,omitempty"`
	UserDisplayNameAttr     *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=user_display_name_attr,json=userDisplayNameAttr,proto3" json:"user_display_name_attr,omitempty" toml:"user_display_name_attr,omitempty" mapstructure:"user_display_name_attr,omitempty"`
	BaseGroupSearchDn       *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=base_group_search_dn,json=baseGroupSearchDn,proto3" json:"base_group_search_dn,omitempty" toml:"base_group_search_dn,omitempty" mapstructure:"base_group_search_dn,omitempty"`
	GroupQueryFilter        *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=group_query_filter,json=groupQueryFilter,proto3" json:"group_query_filter,omitempty" toml:"group_query_filter,omitempty" mapstructure:"group_query_filter,omitempty"`
	FilterGroupsByUserAttr  *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=filter_groups_by_user_attr,json=filterGroupsByUserAttr,proto3" json:"filter_groups_by_user_attr,omitempty" toml:"filter_groups_by_user_attr,omitempty" mapstructure:"filter_groups_by_user_attr,omitempty"`
	FilterGroupsByUserValue *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=filter_groups_by_user_value,json=filterGroupsByUserValue,proto3" json:"filter_groups_by_user_value,omitempty" toml:"filter_groups_by_user_value,omitempty" mapstructure:"filter_groups_by_user_value,omitempty"`
	GroupDisplayNameAttr    *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=group_display_name_attr,json=groupDisplayNameAttr,proto3" json:"group_display_name_attr,omitempty" toml:"group_display_name_attr,omitempty" mapstructure:"group_display_name_attr,omitempty"`
	InsecureNoSsl           *wrapperspb.BoolValue   `protobuf:"bytes,16,opt,name=insecure_no_ssl,json=insecureNoSsl,proto3" json:"insecure_no_ssl,omitempty" toml:"insecure_no_ssl,omitempty" mapstructure:"insecure_no_ssl,omitempty"`
}

func (x *ConfigRequest_V1_Ldap) Reset() {
	*x = ConfigRequest_V1_Ldap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Ldap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Ldap) ProtoMessage() {}

func (x *ConfigRequest_V1_Ldap) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Ldap.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Ldap) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 9}
}

func (x *ConfigRequest_V1_Ldap) GetCaContents() *wrapperspb.StringValue {
	if x != nil {
		return x.CaContents
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetBindDn() *wrapperspb.StringValue {
	if x != nil {
		return x.BindDn
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetBindPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.BindPassword
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetBaseUserSearchDn() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseUserSearchDn
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetUserQueryFilter() *wrapperspb.StringValue {
	if x != nil {
		return x.UserQueryFilter
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetUsernameAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.UsernameAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetUserIdAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.UserIdAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetEmailAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.EmailAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetUserDisplayNameAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.UserDisplayNameAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetBaseGroupSearchDn() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseGroupSearchDn
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetGroupQueryFilter() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupQueryFilter
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetFilterGroupsByUserAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.FilterGroupsByUserAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetFilterGroupsByUserValue() *wrapperspb.StringValue {
	if x != nil {
		return x.FilterGroupsByUserValue
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetGroupDisplayNameAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupDisplayNameAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Ldap) GetInsecureNoSsl() *wrapperspb.BoolValue {
	if x != nil {
		return x.InsecureNoSsl
	}
	return nil
}

type ConfigRequest_V1_Msad_Ldap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaContents              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=ca_contents,json=caContents,proto3" json:"ca_contents,omitempty" toml:"ca_contents,omitempty" mapstructure:"ca_contents,omitempty"`
	Host                    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"`
	BindDn                  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=bind_dn,json=bindDn,proto3" json:"bind_dn,omitempty" toml:"bind_dn,omitempty" mapstructure:"bind_dn,omitempty"`
	BindPassword            *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=bind_password,json=bindPassword,proto3" json:"bind_password,omitempty" toml:"bind_password,omitempty" mapstructure:"bind_password,omitempty"`
	BaseUserSearchDn        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=base_user_search_dn,json=baseUserSearchDn,proto3" json:"base_user_search_dn,omitempty" toml:"base_user_search_dn,omitempty" mapstructure:"base_user_search_dn,omitempty"`
	BaseGroupSearchDn       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=base_group_search_dn,json=baseGroupSearchDn,proto3" json:"base_group_search_dn,omitempty" toml:"base_group_search_dn,omitempty" mapstructure:"base_group_search_dn,omitempty"`
	UserQueryFilter         *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=user_query_filter,json=userQueryFilter,proto3" json:"user_query_filter,omitempty" toml:"user_query_filter,omitempty" mapstructure:"user_query_filter,omitempty"`
	GroupQueryFilter        *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=group_query_filter,json=groupQueryFilter,proto3" json:"group_query_filter,omitempty" toml:"group_query_filter,omitempty" mapstructure:"group_query_filter,omitempty"`
	UsernameAttr            *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=username_attr,json=usernameAttr,proto3" json:"username_attr,omitempty" toml:"username_attr,omitempty" mapstructure:"username_attr,omitempty"`
	UserIdAttr              *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=user_id_attr,json=userIdAttr,proto3" json:"user_id_attr,omitempty" toml:"user_id_attr,omitempty" mapstructure:"user_id_attr,omitempty"`
	EmailAttr               *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=email_attr,json=emailAttr,proto3" json:"email_attr,omitempty" toml:"email_attr,omitempty" mapstructure:"email_attr,omitempty"`
	UserDisplayNameAttr     *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=user_display_name_attr,json=userDisplayNameAttr,proto3" json:"user_display_name_attr,omitempty" toml:"user_display_name_attr,omitempty" mapstructure:"user_display_name_attr,omitempty"`
	FilterGroupsByUserAttr  *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=filter_groups_by_user_attr,json=filterGroupsByUserAttr,proto3" json:"filter_groups_by_user_attr,omitempty" toml:"filter_groups_by_user_attr,omitempty" mapstructure:"filter_groups_by_user_attr,omitempty"`
	FilterGroupsByUserValue *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=filter_groups_by_user_value,json=filterGroupsByUserValue,proto3" json:"filter_groups_by_user_value,omitempty" toml:"filter_groups_by_user_value,omitempty" mapstructure:"filter_groups_by_user_value,omitempty"`
	GroupDisplayNameAttr    *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=group_display_name_attr,json=groupDisplayNameAttr,proto3" json:"group_display_name_attr,omitempty" toml:"group_display_name_attr,omitempty" mapstructure:"group_display_name_attr,omitempty"`
	InsecureNoSsl           *wrapperspb.BoolValue   `protobuf:"bytes,16,opt,name=insecure_no_ssl,json=insecureNoSsl,proto3" json:"insecure_no_ssl,omitempty" toml:"insecure_no_ssl,omitempty" mapstructure:"insecure_no_ssl,omitempty"`
}

func (x *ConfigRequest_V1_Msad_Ldap) Reset() {
	*x = ConfigRequest_V1_Msad_Ldap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Msad_Ldap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Msad_Ldap) ProtoMessage() {}

func (x *ConfigRequest_V1_Msad_Ldap) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Msad_Ldap.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Msad_Ldap) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 10}
}

func (x *ConfigRequest_V1_Msad_Ldap) GetCaContents() *wrapperspb.StringValue {
	if x != nil {
		return x.CaContents
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetBindDn() *wrapperspb.StringValue {
	if x != nil {
		return x.BindDn
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetBindPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.BindPassword
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetBaseUserSearchDn() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseUserSearchDn
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetBaseGroupSearchDn() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseGroupSearchDn
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetUserQueryFilter() *wrapperspb.StringValue {
	if x != nil {
		return x.UserQueryFilter
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetGroupQueryFilter() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupQueryFilter
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetUsernameAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.UsernameAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetUserIdAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.UserIdAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetEmailAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.EmailAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetUserDisplayNameAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.UserDisplayNameAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetFilterGroupsByUserAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.FilterGroupsByUserAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetFilterGroupsByUserValue() *wrapperspb.StringValue {
	if x != nil {
		return x.FilterGroupsByUserValue
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetGroupDisplayNameAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupDisplayNameAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Msad_Ldap) GetInsecureNoSsl() *wrapperspb.BoolValue {
	if x != nil {
		return x.InsecureNoSsl
	}
	return nil
}

type ConfigRequest_V1_Saml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaContents         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=ca_contents,json=caContents,proto3" json:"ca_contents,omitempty" toml:"ca_contents,omitempty" mapstructure:"ca_contents,omitempty"`
	SsoUrl             *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=sso_url,json=ssoUrl,proto3" json:"sso_url,omitempty" toml:"sso_url,omitempty" mapstructure:"sso_url,omitempty"`
	EmailAttr          *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=email_attr,json=emailAttr,proto3" json:"email_attr,omitempty" toml:"email_attr,omitempty" mapstructure:"email_attr,omitempty"`
	UsernameAttr       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=username_attr,json=usernameAttr,proto3" json:"username_attr,omitempty" toml:"username_attr,omitempty" mapstructure:"username_attr,omitempty"`
	GroupsAttr         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=groups_attr,json=groupsAttr,proto3" json:"groups_attr,omitempty" toml:"groups_attr,omitempty" mapstructure:"groups_attr,omitempty"`
	EntityIssuer       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=entity_issuer,json=entityIssuer,proto3" json:"entity_issuer,omitempty" toml:"entity_issuer,omitempty" mapstructure:"entity_issuer,omitempty"`
	NameIdPolicyFormat *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=name_id_policy_format,json=nameIdPolicyFormat,proto3" json:"name_id_policy_format,omitempty" toml:"name_id_policy_format,omitempty" mapstructure:"name_id_policy_format,omitempty"`
	AllowedGroups      []string                `protobuf:"bytes,8,rep,name=allowed_groups,json=allowedGroups,proto3" json:"allowed_groups,omitempty" toml:"allowed_groups,omitempty" mapstructure:"allowed_groups,omitempty"`
}

func (x *ConfigRequest_V1_Saml) Reset() {
	*x = ConfigRequest_V1_Saml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Saml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Saml) ProtoMessage() {}

func (x *ConfigRequest_V1_Saml) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Saml.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Saml) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 11}
}

func (x *ConfigRequest_V1_Saml) GetCaContents() *wrapperspb.StringValue {
	if x != nil {
		return x.CaContents
	}
	return nil
}

func (x *ConfigRequest_V1_Saml) GetSsoUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.SsoUrl
	}
	return nil
}

func (x *ConfigRequest_V1_Saml) GetEmailAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.EmailAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Saml) GetUsernameAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.UsernameAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Saml) GetGroupsAttr() *wrapperspb.StringValue {
	if x != nil {
		return x.GroupsAttr
	}
	return nil
}

func (x *ConfigRequest_V1_Saml) GetEntityIssuer() *wrapperspb.StringValue {
	if x != nil {
		return x.EntityIssuer
	}
	return nil
}

func (x *ConfigRequest_V1_Saml) GetNameIdPolicyFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.NameIdPolicyFormat
	}
	return nil
}

func (x *ConfigRequest_V1_Saml) GetAllowedGroups() []string {
	if x != nil {
		return x.AllowedGroups
	}
	return nil
}

type ConfigRequest_V1_Disclosure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show              *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=show,proto3" json:"show,omitempty" toml:"show,omitempty" mapstructure:"show,omitempty"`
	DisclosureMessage *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=disclosure_message,json=disclosureMessage,proto3" json:"disclosure_message,omitempty" toml:"disclosure_message,omitempty" mapstructure:"disclosure_message,omitempty"`
}

func (x *ConfigRequest_V1_Disclosure) Reset() {
	*x = ConfigRequest_V1_Disclosure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Disclosure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Disclosure) ProtoMessage() {}

func (x *ConfigRequest_V1_Disclosure) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Disclosure.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Disclosure) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 12}
}

func (x *ConfigRequest_V1_Disclosure) GetShow() *wrapperspb.BoolValue {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *ConfigRequest_V1_Disclosure) GetDisclosureMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.DisclosureMessage
	}
	return nil
}

type ConfigRequest_V1_Banner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show            *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=show,proto3" json:"show,omitempty" toml:"show,omitempty" mapstructure:"show,omitempty"`
	Message         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" toml:"message,omitempty" mapstructure:"message,omitempty"`
	BackgroundColor *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty" toml:"background_color,omitempty" mapstructure:"background_color,omitempty"`
	TextColor       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty" toml:"text_color,omitempty" mapstructure:"text_color,omitempty"`
}

func (x *ConfigRequest_V1_Banner) Reset() {
	*x = ConfigRequest_V1_Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Banner) ProtoMessage() {}

func (x *ConfigRequest_V1_Banner) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Banner.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Banner) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 13}
}

func (x *ConfigRequest_V1_Banner) GetShow() *wrapperspb.BoolValue {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *ConfigRequest_V1_Banner) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ConfigRequest_V1_Banner) GetBackgroundColor() *wrapperspb.StringValue {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

func (x *ConfigRequest_V1_Banner) GetTextColor() *wrapperspb.StringValue {
	if x != nil {
		return x.TextColor
	}
	return nil
}

type ConfigRequest_V1_System_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Host         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"` // The listen host is no longer setable(localhost only)
	Port         *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
	ExternalFqdn *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=external_fqdn,json=externalFqdn,proto3" json:"external_fqdn,omitempty" toml:"external_fqdn,omitempty" mapstructure:"external_fqdn,omitempty"`
}

func (x *ConfigRequest_V1_System_Service) Reset() {
	*x = ConfigRequest_V1_System_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_dex_config_request_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_dex_config_request_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Service) Descriptor() ([]byte, []int) {
	return file_config_dex_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

// Deprecated: Do not use.
func (x *ConfigRequest_V1_System_Service) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ConfigRequest_V1_System_Service) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *ConfigRequest_V1_System_Service) GetExternalFqdn() *wrapperspb.StringValue {
	if x != nil {
		return x.ExternalFqdn
	}
	return nil
}

var File_config_dex_config_request_proto protoreflect.FileDescriptor

var file_config_dex_config_request_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x18, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78, 0x1a, 0x1a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x74, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x61, 0x32, 0x2d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x32, 0x63, 0x6f, 0x6e, 0x66, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xef, 0x2b, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x52, 0x02, 0x76, 0x31, 0x1a,
	0x87, 0x2b, 0x0a, 0x02, 0x56, 0x31, 0x12, 0x43, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x44, 0x0a, 0x03, 0x73,
	0x76, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x73, 0x76,
	0x63, 0x1a, 0x8d, 0x08, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x04,
	0x6d, 0x6c, 0x73, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6c, 0x73, 0x61, 0x52, 0x04, 0x6d, 0x6c,
	0x73, 0x61, 0x12, 0x40, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x03, 0x6c, 0x6f, 0x67, 0x12, 0x53, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x67, 0x72, 0x70,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x4c,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x53,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73,
	0x12, 0x55, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73,
	0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x1a, 0xcc, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x17, 0xc2, 0xf3, 0x18, 0x13, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x84,
	0x4f, 0x1a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x41,
	0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x71, 0x64,
	0x6e, 0x1a, 0x09, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x39, 0x0a, 0x03,
	0x4c, 0x6f, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x7b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x05, 0x1a, 0x82, 0x01, 0x0a, 0x04, 0x47, 0x72, 0x70, 0x63, 0x12, 0x34, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x13,
	0xc2, 0xf3, 0x18, 0x0f, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x10, 0x85, 0x4f, 0x1a, 0x04, 0x67,
	0x72, 0x70, 0x63, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x84, 0x01, 0x0a, 0x06, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x1a, 0x4e, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x41, 0x0a,
	0x0e, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x1a, 0x80, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x49, 0x0a, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x52, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x6c, 0x64,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x31, 0x2e, 0x4c, 0x64, 0x61, 0x70, 0x52, 0x04, 0x6c, 0x64, 0x61, 0x70, 0x12,
	0x43, 0x0a, 0x04, 0x73, 0x61, 0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x6c, 0x52, 0x04,
	0x73, 0x61, 0x6d, 0x6c, 0x12, 0x51, 0x0a, 0x09, 0x6d, 0x73, 0x61, 0x64, 0x5f, 0x6c, 0x64, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x73, 0x61, 0x64, 0x5f, 0x4c, 0x64, 0x61, 0x70, 0x52, 0x08, 0x6d,
	0x73, 0x61, 0x64, 0x4c, 0x64, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x1a, 0x86, 0x01, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x9a, 0x09, 0x0a,
	0x04, 0x4c, 0x64, 0x61, 0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x44, 0x6e, 0x12, 0x56, 0x0a,
	0x0d, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x13, 0xca, 0xf3, 0x18, 0x0f, 0x0a, 0x0d, 0x6c, 0x64, 0x61, 0x70, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x44, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x3e, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x3b, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x12, 0x51, 0x0a, 0x16,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x4d, 0x0a, 0x14, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x62, 0x61, 0x73,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6e, 0x12, 0x4a,
	0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x1a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x5a, 0x0a, 0x1b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x53, 0x0a, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x53, 0x73, 0x6c, 0x1a, 0x9f, 0x09, 0x0a, 0x09, 0x4d, 0x73,
	0x61, 0x64, 0x5f, 0x4c, 0x64, 0x61, 0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x64, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x44, 0x6e, 0x12,
	0x56, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x13, 0xca, 0xf3, 0x18, 0x0f, 0x0a, 0x0d, 0x6d, 0x73, 0x61, 0x64,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a,
	0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x3e, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x74, 0x74, 0x72, 0x12, 0x3b, 0x0a, 0x0a,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x12, 0x51, 0x0a, 0x16, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x58, 0x0a, 0x1a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x62, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x5a, 0x0a, 0x1b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x73, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x53, 0x73, 0x6c, 0x1a, 0xf6, 0x03, 0x0a, 0x04,
	0x53, 0x61, 0x6d, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x73, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x73, 0x73, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x74, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x15,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x1a, 0x89, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73,
	0x68, 0x6f, 0x77, 0x12, 0x4b, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0xf6, 0x01, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x73,
	0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0a,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x12, 0xc2, 0xf3, 0x18, 0x0e, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2d, 0x64, 0x65, 0x78, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x03, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x78, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_dex_config_request_proto_rawDescOnce sync.Once
	file_config_dex_config_request_proto_rawDescData = file_config_dex_config_request_proto_rawDesc
)

func file_config_dex_config_request_proto_rawDescGZIP() []byte {
	file_config_dex_config_request_proto_rawDescOnce.Do(func() {
		file_config_dex_config_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_dex_config_request_proto_rawDescData)
	})
	return file_config_dex_config_request_proto_rawDescData
}

var file_config_dex_config_request_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_config_dex_config_request_proto_goTypes = []interface{}{
	(*ConfigRequest)(nil),                   // 0: chef.automate.domain.dex.ConfigRequest
	(*ConfigRequest_V1)(nil),                // 1: chef.automate.domain.dex.ConfigRequest.V1
	(*ConfigRequest_V1_System)(nil),         // 2: chef.automate.domain.dex.ConfigRequest.V1.System
	(*ConfigRequest_V1_Service)(nil),        // 3: chef.automate.domain.dex.ConfigRequest.V1.Service
	(*ConfigRequest_V1_Log)(nil),            // 4: chef.automate.domain.dex.ConfigRequest.V1.Log
	(*ConfigRequest_V1_Storage)(nil),        // 5: chef.automate.domain.dex.ConfigRequest.V1.Storage
	(*ConfigRequest_V1_Grpc)(nil),           // 6: chef.automate.domain.dex.ConfigRequest.V1.Grpc
	(*ConfigRequest_V1_Expiry)(nil),         // 7: chef.automate.domain.dex.ConfigRequest.V1.Expiry
	(*ConfigRequest_V1_Bootstrap)(nil),      // 8: chef.automate.domain.dex.ConfigRequest.V1.Bootstrap
	(*ConfigRequest_V1_Connectors)(nil),     // 9: chef.automate.domain.dex.ConfigRequest.V1.Connectors
	(*ConfigRequest_V1_Google)(nil),         // 10: chef.automate.domain.dex.ConfigRequest.V1.Google
	(*ConfigRequest_V1_Ldap)(nil),           // 11: chef.automate.domain.dex.ConfigRequest.V1.Ldap
	(*ConfigRequest_V1_Msad_Ldap)(nil),      // 12: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap
	(*ConfigRequest_V1_Saml)(nil),           // 13: chef.automate.domain.dex.ConfigRequest.V1.Saml
	(*ConfigRequest_V1_Disclosure)(nil),     // 14: chef.automate.domain.dex.ConfigRequest.V1.Disclosure
	(*ConfigRequest_V1_Banner)(nil),         // 15: chef.automate.domain.dex.ConfigRequest.V1.Banner
	(*ConfigRequest_V1_System_Service)(nil), // 16: chef.automate.domain.dex.ConfigRequest.V1.System.Service
	(*shared.Mlsa)(nil),                     // 17: chef.automate.infra.config.Mlsa
	(*shared.TLSCredentials)(nil),           // 18: chef.automate.infra.config.TLSCredentials
	(*wrapperspb.StringValue)(nil),          // 19: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),           // 20: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),            // 21: google.protobuf.BoolValue
}
var file_config_dex_config_request_proto_depIdxs = []int32{
	1,  // 0: chef.automate.domain.dex.ConfigRequest.v1:type_name -> chef.automate.domain.dex.ConfigRequest.V1
	2,  // 1: chef.automate.domain.dex.ConfigRequest.V1.sys:type_name -> chef.automate.domain.dex.ConfigRequest.V1.System
	3,  // 2: chef.automate.domain.dex.ConfigRequest.V1.svc:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Service
	17, // 3: chef.automate.domain.dex.ConfigRequest.V1.System.mlsa:type_name -> chef.automate.infra.config.Mlsa
	4,  // 4: chef.automate.domain.dex.ConfigRequest.V1.System.log:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Log
	16, // 5: chef.automate.domain.dex.ConfigRequest.V1.System.service:type_name -> chef.automate.domain.dex.ConfigRequest.V1.System.Service
	6,  // 6: chef.automate.domain.dex.ConfigRequest.V1.System.grpc:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Grpc
	5,  // 7: chef.automate.domain.dex.ConfigRequest.V1.System.storage:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Storage
	7,  // 8: chef.automate.domain.dex.ConfigRequest.V1.System.expiry:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Expiry
	8,  // 9: chef.automate.domain.dex.ConfigRequest.V1.System.bootstrap:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Bootstrap
	9,  // 10: chef.automate.domain.dex.ConfigRequest.V1.System.connectors:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Connectors
	18, // 11: chef.automate.domain.dex.ConfigRequest.V1.System.tls:type_name -> chef.automate.infra.config.TLSCredentials
	14, // 12: chef.automate.domain.dex.ConfigRequest.V1.System.disclosure:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Disclosure
	15, // 13: chef.automate.domain.dex.ConfigRequest.V1.System.banner:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Banner
	19, // 14: chef.automate.domain.dex.ConfigRequest.V1.Log.level:type_name -> google.protobuf.StringValue
	19, // 15: chef.automate.domain.dex.ConfigRequest.V1.Storage.database:type_name -> google.protobuf.StringValue
	19, // 16: chef.automate.domain.dex.ConfigRequest.V1.Storage.user:type_name -> google.protobuf.StringValue
	19, // 17: chef.automate.domain.dex.ConfigRequest.V1.Grpc.host:type_name -> google.protobuf.StringValue
	20, // 18: chef.automate.domain.dex.ConfigRequest.V1.Grpc.port:type_name -> google.protobuf.Int32Value
	19, // 19: chef.automate.domain.dex.ConfigRequest.V1.Expiry.signing_keys:type_name -> google.protobuf.StringValue
	19, // 20: chef.automate.domain.dex.ConfigRequest.V1.Expiry.id_tokens:type_name -> google.protobuf.StringValue
	21, // 21: chef.automate.domain.dex.ConfigRequest.V1.Bootstrap.insecure_admin:type_name -> google.protobuf.BoolValue
	10, // 22: chef.automate.domain.dex.ConfigRequest.V1.Connectors.google:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Google
	11, // 23: chef.automate.domain.dex.ConfigRequest.V1.Connectors.ldap:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Ldap
	13, // 24: chef.automate.domain.dex.ConfigRequest.V1.Connectors.saml:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Saml
	12, // 25: chef.automate.domain.dex.ConfigRequest.V1.Connectors.msad_ldap:type_name -> chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap
	21, // 26: chef.automate.domain.dex.ConfigRequest.V1.Connectors.disable_local_users:type_name -> google.protobuf.BoolValue
	19, // 27: chef.automate.domain.dex.ConfigRequest.V1.Google.client_id:type_name -> google.protobuf.StringValue
	19, // 28: chef.automate.domain.dex.ConfigRequest.V1.Google.client_secret:type_name -> google.protobuf.StringValue
	19, // 29: chef.automate.domain.dex.ConfigRequest.V1.Ldap.ca_contents:type_name -> google.protobuf.StringValue
	19, // 30: chef.automate.domain.dex.ConfigRequest.V1.Ldap.host:type_name -> google.protobuf.StringValue
	19, // 31: chef.automate.domain.dex.ConfigRequest.V1.Ldap.bind_dn:type_name -> google.protobuf.StringValue
	19, // 32: chef.automate.domain.dex.ConfigRequest.V1.Ldap.bind_password:type_name -> google.protobuf.StringValue
	19, // 33: chef.automate.domain.dex.ConfigRequest.V1.Ldap.base_user_search_dn:type_name -> google.protobuf.StringValue
	19, // 34: chef.automate.domain.dex.ConfigRequest.V1.Ldap.user_query_filter:type_name -> google.protobuf.StringValue
	19, // 35: chef.automate.domain.dex.ConfigRequest.V1.Ldap.username_attr:type_name -> google.protobuf.StringValue
	19, // 36: chef.automate.domain.dex.ConfigRequest.V1.Ldap.user_id_attr:type_name -> google.protobuf.StringValue
	19, // 37: chef.automate.domain.dex.ConfigRequest.V1.Ldap.email_attr:type_name -> google.protobuf.StringValue
	19, // 38: chef.automate.domain.dex.ConfigRequest.V1.Ldap.user_display_name_attr:type_name -> google.protobuf.StringValue
	19, // 39: chef.automate.domain.dex.ConfigRequest.V1.Ldap.base_group_search_dn:type_name -> google.protobuf.StringValue
	19, // 40: chef.automate.domain.dex.ConfigRequest.V1.Ldap.group_query_filter:type_name -> google.protobuf.StringValue
	19, // 41: chef.automate.domain.dex.ConfigRequest.V1.Ldap.filter_groups_by_user_attr:type_name -> google.protobuf.StringValue
	19, // 42: chef.automate.domain.dex.ConfigRequest.V1.Ldap.filter_groups_by_user_value:type_name -> google.protobuf.StringValue
	19, // 43: chef.automate.domain.dex.ConfigRequest.V1.Ldap.group_display_name_attr:type_name -> google.protobuf.StringValue
	21, // 44: chef.automate.domain.dex.ConfigRequest.V1.Ldap.insecure_no_ssl:type_name -> google.protobuf.BoolValue
	19, // 45: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.ca_contents:type_name -> google.protobuf.StringValue
	19, // 46: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.host:type_name -> google.protobuf.StringValue
	19, // 47: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.bind_dn:type_name -> google.protobuf.StringValue
	19, // 48: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.bind_password:type_name -> google.protobuf.StringValue
	19, // 49: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.base_user_search_dn:type_name -> google.protobuf.StringValue
	19, // 50: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.base_group_search_dn:type_name -> google.protobuf.StringValue
	19, // 51: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.user_query_filter:type_name -> google.protobuf.StringValue
	19, // 52: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.group_query_filter:type_name -> google.protobuf.StringValue
	19, // 53: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.username_attr:type_name -> google.protobuf.StringValue
	19, // 54: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.user_id_attr:type_name -> google.protobuf.StringValue
	19, // 55: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.email_attr:type_name -> google.protobuf.StringValue
	19, // 56: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.user_display_name_attr:type_name -> google.protobuf.StringValue
	19, // 57: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.filter_groups_by_user_attr:type_name -> google.protobuf.StringValue
	19, // 58: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.filter_groups_by_user_value:type_name -> google.protobuf.StringValue
	19, // 59: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.group_display_name_attr:type_name -> google.protobuf.StringValue
	21, // 60: chef.automate.domain.dex.ConfigRequest.V1.Msad_Ldap.insecure_no_ssl:type_name -> google.protobuf.BoolValue
	19, // 61: chef.automate.domain.dex.ConfigRequest.V1.Saml.ca_contents:type_name -> google.protobuf.StringValue
	19, // 62: chef.automate.domain.dex.ConfigRequest.V1.Saml.sso_url:type_name -> google.protobuf.StringValue
	19, // 63: chef.automate.domain.dex.ConfigRequest.V1.Saml.email_attr:type_name -> google.protobuf.StringValue
	19, // 64: chef.automate.domain.dex.ConfigRequest.V1.Saml.username_attr:type_name -> google.protobuf.StringValue
	19, // 65: chef.automate.domain.dex.ConfigRequest.V1.Saml.groups_attr:type_name -> google.protobuf.StringValue
	19, // 66: chef.automate.domain.dex.ConfigRequest.V1.Saml.entity_issuer:type_name -> google.protobuf.StringValue
	19, // 67: chef.automate.domain.dex.ConfigRequest.V1.Saml.name_id_policy_format:type_name -> google.protobuf.StringValue
	21, // 68: chef.automate.domain.dex.ConfigRequest.V1.Disclosure.show:type_name -> google.protobuf.BoolValue
	19, // 69: chef.automate.domain.dex.ConfigRequest.V1.Disclosure.disclosure_message:type_name -> google.protobuf.StringValue
	21, // 70: chef.automate.domain.dex.ConfigRequest.V1.Banner.show:type_name -> google.protobuf.BoolValue
	19, // 71: chef.automate.domain.dex.ConfigRequest.V1.Banner.message:type_name -> google.protobuf.StringValue
	19, // 72: chef.automate.domain.dex.ConfigRequest.V1.Banner.background_color:type_name -> google.protobuf.StringValue
	19, // 73: chef.automate.domain.dex.ConfigRequest.V1.Banner.text_color:type_name -> google.protobuf.StringValue
	19, // 74: chef.automate.domain.dex.ConfigRequest.V1.System.Service.host:type_name -> google.protobuf.StringValue
	20, // 75: chef.automate.domain.dex.ConfigRequest.V1.System.Service.port:type_name -> google.protobuf.Int32Value
	19, // 76: chef.automate.domain.dex.ConfigRequest.V1.System.Service.external_fqdn:type_name -> google.protobuf.StringValue
	77, // [77:77] is the sub-list for method output_type
	77, // [77:77] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_config_dex_config_request_proto_init() }
func file_config_dex_config_request_proto_init() {
	if File_config_dex_config_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_dex_config_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Grpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Expiry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Bootstrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Connectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Google); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Ldap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Msad_Ldap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Saml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Disclosure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_dex_config_request_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_dex_config_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_dex_config_request_proto_goTypes,
		DependencyIndexes: file_config_dex_config_request_proto_depIdxs,
		MessageInfos:      file_config_dex_config_request_proto_msgTypes,
	}.Build()
	File_config_dex_config_request_proto = out.File
	file_config_dex_config_request_proto_rawDesc = nil
	file_config_dex_config_request_proto_goTypes = nil
	file_config_dex_config_request_proto_depIdxs = nil
}
