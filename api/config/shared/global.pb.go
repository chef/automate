// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: config/shared/global.proto

package shared

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GlobalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1 *V1 `protobuf:"bytes,1,opt,name=v1,proto3" json:"v1,omitempty" toml:"v1,omitempty" mapstructure:"v1,omitempty"`
}

func (x *GlobalConfig) Reset() {
	*x = GlobalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalConfig) ProtoMessage() {}

func (x *GlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalConfig.ProtoReflect.Descriptor instead.
func (*GlobalConfig) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{0}
}

func (x *GlobalConfig) GetV1() *V1 {
	if x != nil {
		return x.V1
	}
	return nil
}

type V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqdn            *wrapperspb.StringValue  `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty" toml:"fqdn,omitempty" mapstructure:"fqdn,omitempty"`
	Mlsa            *Mlsa                    `protobuf:"bytes,2,opt,name=mlsa,proto3" json:"mlsa,omitempty" toml:"mlsa,omitempty" mapstructure:"mlsa,omitempty"`
	Proxy           *Proxy                   `protobuf:"bytes,3,opt,name=proxy,proto3" json:"proxy,omitempty" toml:"proxy,omitempty" mapstructure:"proxy,omitempty"`
	Backups         *Backups                 `protobuf:"bytes,4,opt,name=backups,proto3" json:"backups,omitempty" toml:"backups,omitempty" mapstructure:"backups,omitempty"`
	Log             *Log                     `protobuf:"bytes,5,opt,name=log,proto3" json:"log,omitempty" toml:"log,omitempty" mapstructure:"log,omitempty"`
	External        *External                `protobuf:"bytes,6,opt,name=external,proto3" json:"external,omitempty" toml:"external,omitempty" mapstructure:"external,omitempty"`
	FrontendTls     []*FrontendTLSCredential `protobuf:"bytes,7,rep,name=frontend_tls,json=frontendTls,proto3" json:"frontend_tls,omitempty" toml:"frontend_tls,omitempty" mapstructure:"frontend_tls,omitempty"`
	Disclosure      *Disclosure              `protobuf:"bytes,8,opt,name=disclosure,proto3" json:"disclosure,omitempty" toml:"disclosure,omitempty" mapstructure:"disclosure,omitempty"`
	Banner          *Banner                  `protobuf:"bytes,9,opt,name=banner,proto3" json:"banner,omitempty" toml:"banner,omitempty" mapstructure:"banner,omitempty"`
	SessionSettings *SessionSettings         `protobuf:"bytes,10,opt,name=session_settings,json=sessionSettings,proto3" json:"session_settings,omitempty" toml:"session_settings,omitempty" mapstructure:"session_settings,omitempty"`
}

func (x *V1) Reset() {
	*x = V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V1) ProtoMessage() {}

func (x *V1) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V1.ProtoReflect.Descriptor instead.
func (*V1) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{1}
}

func (x *V1) GetFqdn() *wrapperspb.StringValue {
	if x != nil {
		return x.Fqdn
	}
	return nil
}

func (x *V1) GetMlsa() *Mlsa {
	if x != nil {
		return x.Mlsa
	}
	return nil
}

func (x *V1) GetProxy() *Proxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *V1) GetBackups() *Backups {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *V1) GetLog() *Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *V1) GetExternal() *External {
	if x != nil {
		return x.External
	}
	return nil
}

func (x *V1) GetFrontendTls() []*FrontendTLSCredential {
	if x != nil {
		return x.FrontendTls
	}
	return nil
}

func (x *V1) GetDisclosure() *Disclosure {
	if x != nil {
		return x.Disclosure
	}
	return nil
}

func (x *V1) GetBanner() *Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *V1) GetSessionSettings() *SessionSettings {
	if x != nil {
		return x.SessionSettings
	}
	return nil
}

type External struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elasticsearch *External_Elasticsearch `protobuf:"bytes,1,opt,name=elasticsearch,proto3" json:"elasticsearch,omitempty" toml:"elasticsearch,omitempty" mapstructure:"elasticsearch,omitempty"`
	Postgresql    *External_Postgresql    `protobuf:"bytes,2,opt,name=postgresql,proto3" json:"postgresql,omitempty" toml:"postgresql,omitempty" mapstructure:"postgresql,omitempty"`
	Automate      *External_Automate      `protobuf:"bytes,3,opt,name=automate,proto3" json:"automate,omitempty" toml:"automate,omitempty" mapstructure:"automate,omitempty"`
}

func (x *External) Reset() {
	*x = External{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External) ProtoMessage() {}

func (x *External) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External.ProtoReflect.Descriptor instead.
func (*External) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2}
}

func (x *External) GetElasticsearch() *External_Elasticsearch {
	if x != nil {
		return x.Elasticsearch
	}
	return nil
}

func (x *External) GetPostgresql() *External_Postgresql {
	if x != nil {
		return x.Postgresql
	}
	return nil
}

func (x *External) GetAutomate() *External_Automate {
	if x != nil {
		return x.Automate
	}
	return nil
}

type Mlsa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accept *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=accept,proto3" json:"accept,omitempty" toml:"accept,omitempty" mapstructure:"accept,omitempty"`
}

func (x *Mlsa) Reset() {
	*x = Mlsa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mlsa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mlsa) ProtoMessage() {}

func (x *Mlsa) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mlsa.ProtoReflect.Descriptor instead.
func (*Mlsa) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{3}
}

func (x *Mlsa) GetAccept() *wrapperspb.BoolValue {
	if x != nil {
		return x.Accept
	}
	return nil
}

type Proxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"`
	Port     *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
	User     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty" toml:"user,omitempty" mapstructure:"user,omitempty"`
	Password *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty" toml:"password,omitempty" mapstructure:"password,omitempty"`
	NoProxy  []string                `protobuf:"bytes,5,rep,name=no_proxy,json=noProxy,proto3" json:"no_proxy,omitempty" toml:"no_proxy,omitempty" mapstructure:"no_proxy,omitempty"`
}

func (x *Proxy) Reset() {
	*x = Proxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy) ProtoMessage() {}

func (x *Proxy) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy.ProtoReflect.Descriptor instead.
func (*Proxy) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{4}
}

func (x *Proxy) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *Proxy) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Proxy) GetUser() *wrapperspb.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Proxy) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *Proxy) GetNoProxy() []string {
	if x != nil {
		return x.NoProxy
	}
	return nil
}

type Backups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// location should be one of ["filesystem", "s3", "gcs"]
	Location   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty" toml:"location,omitempty" mapstructure:"location,omitempty"`
	Filesystem *Backups_Filesystem     `protobuf:"bytes,2,opt,name=filesystem,proto3" json:"filesystem,omitempty" toml:"filesystem,omitempty" mapstructure:"filesystem,omitempty"`
	S3         *Backups_S3             `protobuf:"bytes,4,opt,name=s3,proto3" json:"s3,omitempty" toml:"s3,omitempty" mapstructure:"s3,omitempty"`
	Gcs        *Backups_GCS            `protobuf:"bytes,5,opt,name=gcs,proto3" json:"gcs,omitempty" toml:"gcs,omitempty" mapstructure:"gcs,omitempty"`
}

func (x *Backups) Reset() {
	*x = Backups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups) ProtoMessage() {}

func (x *Backups) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups.ProtoReflect.Descriptor instead.
func (*Backups) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5}
}

func (x *Backups) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Backups) GetFilesystem() *Backups_Filesystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

func (x *Backups) GetS3() *Backups_S3 {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *Backups) GetGcs() *Backups_GCS {
	if x != nil {
		return x.Gcs
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty" toml:"level,omitempty" mapstructure:"level,omitempty"`
	Format *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty" toml:"format,omitempty" mapstructure:"format,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{6}
}

func (x *Log) GetLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *Log) GetFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.Format
	}
	return nil
}

type Disclosure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show            *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=show,proto3" json:"show,omitempty" toml:"show,omitempty" mapstructure:"show,omitempty"`
	MessageFilePath *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message_file_path,json=messageFilePath,proto3" json:"message_file_path,omitempty" toml:"message_file_path,omitempty" mapstructure:"message_file_path,omitempty"`
}

func (x *Disclosure) Reset() {
	*x = Disclosure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disclosure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disclosure) ProtoMessage() {}

func (x *Disclosure) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disclosure.ProtoReflect.Descriptor instead.
func (*Disclosure) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{7}
}

func (x *Disclosure) GetShow() *wrapperspb.BoolValue {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *Disclosure) GetMessageFilePath() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageFilePath
	}
	return nil
}

type Banner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show            *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=show,proto3" json:"show,omitempty" toml:"show,omitempty" mapstructure:"show,omitempty"`
	Message         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" toml:"message,omitempty" mapstructure:"message,omitempty"`
	BackgroundColor *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty" toml:"background_color,omitempty" mapstructure:"background_color,omitempty"`
	TextColor       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty" toml:"text_color,omitempty" mapstructure:"text_color,omitempty"`
}

func (x *Banner) Reset() {
	*x = Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Banner) ProtoMessage() {}

func (x *Banner) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Banner.ProtoReflect.Descriptor instead.
func (*Banner) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{8}
}

func (x *Banner) GetShow() *wrapperspb.BoolValue {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *Banner) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Banner) GetBackgroundColor() *wrapperspb.StringValue {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

func (x *Banner) GetTextColor() *wrapperspb.StringValue {
	if x != nil {
		return x.TextColor
	}
	return nil
}

type SessionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableIdleTimeout  *wrapperspb.BoolValue  `protobuf:"bytes,1,opt,name=enable_idle_timeout,json=enableIdleTimeout,proto3" json:"enable_idle_timeout,omitempty" toml:"enable_idle_timeout,omitempty" mapstructure:"enable_idle_timeout,omitempty"`
	IdleTimeoutMinutes *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=idle_timeout_minutes,json=idleTimeoutMinutes,proto3" json:"idle_timeout_minutes,omitempty" toml:"idle_timeout_minutes,omitempty" mapstructure:"idle_timeout_minutes,omitempty"`
}

func (x *SessionSettings) Reset() {
	*x = SessionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSettings) ProtoMessage() {}

func (x *SessionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSettings.ProtoReflect.Descriptor instead.
func (*SessionSettings) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{9}
}

func (x *SessionSettings) GetEnableIdleTimeout() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableIdleTimeout
	}
	return nil
}

func (x *SessionSettings) GetIdleTimeoutMinutes() *wrapperspb.Int32Value {
	if x != nil {
		return x.IdleTimeoutMinutes
	}
	return nil
}

type External_Elasticsearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *wrapperspb.BoolValue                  `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty" toml:"enable,omitempty" mapstructure:"enable,omitempty"`
	Nodes  []*wrapperspb.StringValue              `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty" toml:"nodes,omitempty" mapstructure:"nodes,omitempty"`
	Backup *External_Elasticsearch_Backup         `protobuf:"bytes,3,opt,name=backup,proto3" json:"backup,omitempty" toml:"backup,omitempty" mapstructure:"backup,omitempty"`
	Auth   *External_Elasticsearch_Authentication `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty" toml:"auth,omitempty" mapstructure:"auth,omitempty"`
	Ssl    *External_Elasticsearch_SSL            `protobuf:"bytes,5,opt,name=ssl,proto3" json:"ssl,omitempty" toml:"ssl,omitempty" mapstructure:"ssl,omitempty"`
}

func (x *External_Elasticsearch) Reset() {
	*x = External_Elasticsearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Elasticsearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Elasticsearch) ProtoMessage() {}

func (x *External_Elasticsearch) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Elasticsearch.ProtoReflect.Descriptor instead.
func (*External_Elasticsearch) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 0}
}

func (x *External_Elasticsearch) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *External_Elasticsearch) GetNodes() []*wrapperspb.StringValue {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *External_Elasticsearch) GetBackup() *External_Elasticsearch_Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *External_Elasticsearch) GetAuth() *External_Elasticsearch_Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *External_Elasticsearch) GetSsl() *External_Elasticsearch_SSL {
	if x != nil {
		return x.Ssl
	}
	return nil
}

type External_Postgresql struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *wrapperspb.BoolValue               `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty" toml:"enable,omitempty" mapstructure:"enable,omitempty"`
	Nodes  []*wrapperspb.StringValue           `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty" toml:"nodes,omitempty" mapstructure:"nodes,omitempty"`
	Backup *External_Postgresql_Backup         `protobuf:"bytes,3,opt,name=backup,proto3" json:"backup,omitempty" toml:"backup,omitempty" mapstructure:"backup,omitempty"`
	Auth   *External_Postgresql_Authentication `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty" toml:"auth,omitempty" mapstructure:"auth,omitempty"`
	Ssl    *External_Postgresql_SSL            `protobuf:"bytes,5,opt,name=ssl,proto3" json:"ssl,omitempty" toml:"ssl,omitempty" mapstructure:"ssl,omitempty"`
}

func (x *External_Postgresql) Reset() {
	*x = External_Postgresql{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Postgresql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Postgresql) ProtoMessage() {}

func (x *External_Postgresql) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Postgresql.ProtoReflect.Descriptor instead.
func (*External_Postgresql) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 1}
}

func (x *External_Postgresql) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *External_Postgresql) GetNodes() []*wrapperspb.StringValue {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *External_Postgresql) GetBackup() *External_Postgresql_Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *External_Postgresql) GetAuth() *External_Postgresql_Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *External_Postgresql) GetSsl() *External_Postgresql_SSL {
	if x != nil {
		return x.Ssl
	}
	return nil
}

type External_Automate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *wrapperspb.BoolValue             `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty" toml:"enable,omitempty" mapstructure:"enable,omitempty"`
	Node   *wrapperspb.StringValue           `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty" toml:"node,omitempty" mapstructure:"node,omitempty"`
	Auth   *External_Automate_Authentication `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty" toml:"auth,omitempty" mapstructure:"auth,omitempty"`
	Ssl    *External_Automate_SSL            `protobuf:"bytes,4,opt,name=ssl,proto3" json:"ssl,omitempty" toml:"ssl,omitempty" mapstructure:"ssl,omitempty"`
}

func (x *External_Automate) Reset() {
	*x = External_Automate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Automate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Automate) ProtoMessage() {}

func (x *External_Automate) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Automate.ProtoReflect.Descriptor instead.
func (*External_Automate) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 2}
}

func (x *External_Automate) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *External_Automate) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *External_Automate) GetAuth() *External_Automate_Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *External_Automate) GetSsl() *External_Automate_SSL {
	if x != nil {
		return x.Ssl
	}
	return nil
}

type External_Elasticsearch_Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable   *wrapperspb.BoolValue                      `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty" toml:"enable,omitempty" mapstructure:"enable,omitempty"`
	Location *wrapperspb.StringValue                    `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty" toml:"location,omitempty" mapstructure:"location,omitempty"`
	Fs       *External_Elasticsearch_Backup_FsSettings  `protobuf:"bytes,3,opt,name=fs,proto3" json:"fs,omitempty" toml:"fs,omitempty" mapstructure:"fs,omitempty"`
	S3       *External_Elasticsearch_Backup_S3Settings  `protobuf:"bytes,4,opt,name=s3,proto3" json:"s3,omitempty" toml:"s3,omitempty" mapstructure:"s3,omitempty"`
	Gcs      *External_Elasticsearch_Backup_GCSSettings `protobuf:"bytes,5,opt,name=gcs,proto3" json:"gcs,omitempty" toml:"gcs,omitempty" mapstructure:"gcs,omitempty"`
}

func (x *External_Elasticsearch_Backup) Reset() {
	*x = External_Elasticsearch_Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Elasticsearch_Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Elasticsearch_Backup) ProtoMessage() {}

func (x *External_Elasticsearch_Backup) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Elasticsearch_Backup.ProtoReflect.Descriptor instead.
func (*External_Elasticsearch_Backup) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *External_Elasticsearch_Backup) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *External_Elasticsearch_Backup) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *External_Elasticsearch_Backup) GetFs() *External_Elasticsearch_Backup_FsSettings {
	if x != nil {
		return x.Fs
	}
	return nil
}

func (x *External_Elasticsearch_Backup) GetS3() *External_Elasticsearch_Backup_S3Settings {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *External_Elasticsearch_Backup) GetGcs() *External_Elasticsearch_Backup_GCSSettings {
	if x != nil {
		return x.Gcs
	}
	return nil
}

type External_Elasticsearch_Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme    *wrapperspb.StringValue                                     `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty" toml:"scheme,omitempty" mapstructure:"scheme,omitempty"`
	BasicAuth *External_Elasticsearch_Authentication_BasicAuth            `protobuf:"bytes,2,opt,name=basic_auth,json=basicAuth,proto3" json:"basic_auth,omitempty" toml:"basic_auth,omitempty" mapstructure:"basic_auth,omitempty"`
	AwsEs     *External_Elasticsearch_Authentication_AwsElasticsearchAuth `protobuf:"bytes,3,opt,name=aws_es,json=awsEs,proto3" json:"aws_es,omitempty" toml:"aws_es,omitempty" mapstructure:"aws_es,omitempty"`
}

func (x *External_Elasticsearch_Authentication) Reset() {
	*x = External_Elasticsearch_Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Elasticsearch_Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Elasticsearch_Authentication) ProtoMessage() {}

func (x *External_Elasticsearch_Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Elasticsearch_Authentication.ProtoReflect.Descriptor instead.
func (*External_Elasticsearch_Authentication) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *External_Elasticsearch_Authentication) GetScheme() *wrapperspb.StringValue {
	if x != nil {
		return x.Scheme
	}
	return nil
}

func (x *External_Elasticsearch_Authentication) GetBasicAuth() *External_Elasticsearch_Authentication_BasicAuth {
	if x != nil {
		return x.BasicAuth
	}
	return nil
}

func (x *External_Elasticsearch_Authentication) GetAwsEs() *External_Elasticsearch_Authentication_AwsElasticsearchAuth {
	if x != nil {
		return x.AwsEs
	}
	return nil
}

type External_Elasticsearch_SSL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootCert     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=root_cert,json=rootCert,proto3" json:"root_cert,omitempty" toml:"root_cert,omitempty" mapstructure:"root_cert,omitempty"`
	ServerName   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty" toml:"server_name,omitempty" mapstructure:"server_name,omitempty"`
	RootCertFile *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=root_cert_file,json=rootCertFile,proto3" json:"root_cert_file,omitempty" toml:"root_cert_file,omitempty" mapstructure:"root_cert_file,omitempty"`
}

func (x *External_Elasticsearch_SSL) Reset() {
	*x = External_Elasticsearch_SSL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Elasticsearch_SSL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Elasticsearch_SSL) ProtoMessage() {}

func (x *External_Elasticsearch_SSL) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Elasticsearch_SSL.ProtoReflect.Descriptor instead.
func (*External_Elasticsearch_SSL) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 0, 2}
}

func (x *External_Elasticsearch_SSL) GetRootCert() *wrapperspb.StringValue {
	if x != nil {
		return x.RootCert
	}
	return nil
}

func (x *External_Elasticsearch_SSL) GetServerName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServerName
	}
	return nil
}

func (x *External_Elasticsearch_SSL) GetRootCertFile() *wrapperspb.StringValue {
	if x != nil {
		return x.RootCertFile
	}
	return nil
}

type External_Elasticsearch_Backup_FsSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     *wrapperspb.StringValue                                    `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty" toml:"path,omitempty" mapstructure:"path,omitempty"`
	Settings *External_Elasticsearch_Backup_FsSettings_OptionalSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty" toml:"settings,omitempty" mapstructure:"settings,omitempty"`
}

func (x *External_Elasticsearch_Backup_FsSettings) Reset() {
	*x = External_Elasticsearch_Backup_FsSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Elasticsearch_Backup_FsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Elasticsearch_Backup_FsSettings) ProtoMessage() {}

func (x *External_Elasticsearch_Backup_FsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Elasticsearch_Backup_FsSettings.ProtoReflect.Descriptor instead.
func (*External_Elasticsearch_Backup_FsSettings) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

func (x *External_Elasticsearch_Backup_FsSettings) GetPath() *wrapperspb.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *External_Elasticsearch_Backup_FsSettings) GetSettings() *External_Elasticsearch_Backup_FsSettings_OptionalSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type External_Elasticsearch_Backup_S3Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket   *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty" toml:"bucket,omitempty" mapstructure:"bucket,omitempty"`
	Client   *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty" toml:"client,omitempty" mapstructure:"client,omitempty"`
	BasePath *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty" toml:"base_path,omitempty" mapstructure:"base_path,omitempty"`
	Settings *Backups_S3_Elasticsearch `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty" toml:"settings,omitempty" mapstructure:"settings,omitempty"` // optional settings
}

func (x *External_Elasticsearch_Backup_S3Settings) Reset() {
	*x = External_Elasticsearch_Backup_S3Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Elasticsearch_Backup_S3Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Elasticsearch_Backup_S3Settings) ProtoMessage() {}

func (x *External_Elasticsearch_Backup_S3Settings) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Elasticsearch_Backup_S3Settings.ProtoReflect.Descriptor instead.
func (*External_Elasticsearch_Backup_S3Settings) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 0, 0, 1}
}

func (x *External_Elasticsearch_Backup_S3Settings) GetBucket() *wrapperspb.StringValue {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *External_Elasticsearch_Backup_S3Settings) GetClient() *wrapperspb.StringValue {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *External_Elasticsearch_Backup_S3Settings) GetBasePath() *wrapperspb.StringValue {
	if x != nil {
		return x.BasePath
	}
	return nil
}

func (x *External_Elasticsearch_Backup_S3Settings) GetSettings() *Backups_S3_Elasticsearch {
	if x != nil {
		return x.Settings
	}
	return nil
}

type External_Elasticsearch_Backup_GCSSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket   *wrapperspb.StringValue    `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty" toml:"bucket,omitempty" mapstructure:"bucket,omitempty"`
	Client   *wrapperspb.StringValue    `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty" toml:"client,omitempty" mapstructure:"client,omitempty"`
	BasePath *wrapperspb.StringValue    `protobuf:"bytes,3,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty" toml:"base_path,omitempty" mapstructure:"base_path,omitempty"`
	Settings *Backups_GCS_Elasticsearch `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty" toml:"settings,omitempty" mapstructure:"settings,omitempty"` // optional settings
}

func (x *External_Elasticsearch_Backup_GCSSettings) Reset() {
	*x = External_Elasticsearch_Backup_GCSSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Elasticsearch_Backup_GCSSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Elasticsearch_Backup_GCSSettings) ProtoMessage() {}

func (x *External_Elasticsearch_Backup_GCSSettings) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Elasticsearch_Backup_GCSSettings.ProtoReflect.Descriptor instead.
func (*External_Elasticsearch_Backup_GCSSettings) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 0, 0, 2}
}

func (x *External_Elasticsearch_Backup_GCSSettings) GetBucket() *wrapperspb.StringValue {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *External_Elasticsearch_Backup_GCSSettings) GetClient() *wrapperspb.StringValue {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *External_Elasticsearch_Backup_GCSSettings) GetBasePath() *wrapperspb.StringValue {
	if x != nil {
		return x.BasePath
	}
	return nil
}

func (x *External_Elasticsearch_Backup_GCSSettings) GetSettings() *Backups_GCS_Elasticsearch {
	if x != nil {
		return x.Settings
	}
	return nil
}

type External_Elasticsearch_Backup_FsSettings_OptionalSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSnapshotBytesPerSec *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=max_snapshot_bytes_per_sec,json=maxSnapshotBytesPerSec,proto3" json:"max_snapshot_bytes_per_sec,omitempty" toml:"max_snapshot_bytes_per_sec,omitempty" mapstructure:"max_snapshot_bytes_per_sec,omitempty"`
	MaxRestoreBytesPerSec  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=max_restore_bytes_per_sec,json=maxRestoreBytesPerSec,proto3" json:"max_restore_bytes_per_sec,omitempty" toml:"max_restore_bytes_per_sec,omitempty" mapstructure:"max_restore_bytes_per_sec,omitempty"`
}

func (x *External_Elasticsearch_Backup_FsSettings_OptionalSettings) Reset() {
	*x = External_Elasticsearch_Backup_FsSettings_OptionalSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Elasticsearch_Backup_FsSettings_OptionalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Elasticsearch_Backup_FsSettings_OptionalSettings) ProtoMessage() {}

func (x *External_Elasticsearch_Backup_FsSettings_OptionalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Elasticsearch_Backup_FsSettings_OptionalSettings.ProtoReflect.Descriptor instead.
func (*External_Elasticsearch_Backup_FsSettings_OptionalSettings) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 0, 0, 0, 0}
}

func (x *External_Elasticsearch_Backup_FsSettings_OptionalSettings) GetMaxSnapshotBytesPerSec() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxSnapshotBytesPerSec
	}
	return nil
}

func (x *External_Elasticsearch_Backup_FsSettings_OptionalSettings) GetMaxRestoreBytesPerSec() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxRestoreBytesPerSec
	}
	return nil
}

type External_Elasticsearch_Authentication_BasicAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" toml:"username,omitempty" mapstructure:"username,omitempty"`
	Password *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" toml:"password,omitempty" mapstructure:"password,omitempty"`
}

func (x *External_Elasticsearch_Authentication_BasicAuth) Reset() {
	*x = External_Elasticsearch_Authentication_BasicAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Elasticsearch_Authentication_BasicAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Elasticsearch_Authentication_BasicAuth) ProtoMessage() {}

func (x *External_Elasticsearch_Authentication_BasicAuth) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Elasticsearch_Authentication_BasicAuth.ProtoReflect.Descriptor instead.
func (*External_Elasticsearch_Authentication_BasicAuth) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 0, 1, 0}
}

func (x *External_Elasticsearch_Authentication_BasicAuth) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *External_Elasticsearch_Authentication_BasicAuth) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

type External_Elasticsearch_Authentication_AwsElasticsearchAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Authentication for Aws ES must provide a user and password for basic
	// auth. access_key and secret_key can be optionally specified. They are
	// needed for making snapshot repos, but if not provided, we can use the
	// instance creds.
	Username  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" toml:"username,omitempty" mapstructure:"username,omitempty"`
	Password  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" toml:"password,omitempty" mapstructure:"password,omitempty"`
	AccessKey *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty" toml:"access_key,omitempty" mapstructure:"access_key,omitempty"`
	SecretKey *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty" toml:"secret_key,omitempty" mapstructure:"secret_key,omitempty"`
}

func (x *External_Elasticsearch_Authentication_AwsElasticsearchAuth) Reset() {
	*x = External_Elasticsearch_Authentication_AwsElasticsearchAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Elasticsearch_Authentication_AwsElasticsearchAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Elasticsearch_Authentication_AwsElasticsearchAuth) ProtoMessage() {}

func (x *External_Elasticsearch_Authentication_AwsElasticsearchAuth) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Elasticsearch_Authentication_AwsElasticsearchAuth.ProtoReflect.Descriptor instead.
func (*External_Elasticsearch_Authentication_AwsElasticsearchAuth) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 0, 1, 1}
}

func (x *External_Elasticsearch_Authentication_AwsElasticsearchAuth) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *External_Elasticsearch_Authentication_AwsElasticsearchAuth) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *External_Elasticsearch_Authentication_AwsElasticsearchAuth) GetAccessKey() *wrapperspb.StringValue {
	if x != nil {
		return x.AccessKey
	}
	return nil
}

func (x *External_Elasticsearch_Authentication_AwsElasticsearchAuth) GetSecretKey() *wrapperspb.StringValue {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

type External_Postgresql_Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty" toml:"enable,omitempty" mapstructure:"enable,omitempty"`
}

func (x *External_Postgresql_Backup) Reset() {
	*x = External_Postgresql_Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Postgresql_Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Postgresql_Backup) ProtoMessage() {}

func (x *External_Postgresql_Backup) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Postgresql_Backup.ProtoReflect.Descriptor instead.
func (*External_Postgresql_Backup) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *External_Postgresql_Backup) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

type External_Postgresql_Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme   *wrapperspb.StringValue                                    `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty" toml:"scheme,omitempty" mapstructure:"scheme,omitempty"`
	Password *External_Postgresql_Authentication_PasswordAuthentication `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" toml:"password,omitempty" mapstructure:"password,omitempty"`
}

func (x *External_Postgresql_Authentication) Reset() {
	*x = External_Postgresql_Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Postgresql_Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Postgresql_Authentication) ProtoMessage() {}

func (x *External_Postgresql_Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Postgresql_Authentication.ProtoReflect.Descriptor instead.
func (*External_Postgresql_Authentication) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *External_Postgresql_Authentication) GetScheme() *wrapperspb.StringValue {
	if x != nil {
		return x.Scheme
	}
	return nil
}

func (x *External_Postgresql_Authentication) GetPassword() *External_Postgresql_Authentication_PasswordAuthentication {
	if x != nil {
		return x.Password
	}
	return nil
}

type External_Postgresql_SSL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Mode     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty" toml:"mode,omitempty" mapstructure:"mode,omitempty"`
	Cert     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty" toml:"cert,omitempty" mapstructure:"cert,omitempty"`
	Key      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty" toml:"key,omitempty" mapstructure:"key,omitempty"`
	RootCert *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=root_cert,json=rootCert,proto3" json:"root_cert,omitempty" toml:"root_cert,omitempty" mapstructure:"root_cert,omitempty"`
	Enable   *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=enable,proto3" json:"enable,omitempty" toml:"enable,omitempty" mapstructure:"enable,omitempty"` // disabled by default
}

func (x *External_Postgresql_SSL) Reset() {
	*x = External_Postgresql_SSL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Postgresql_SSL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Postgresql_SSL) ProtoMessage() {}

func (x *External_Postgresql_SSL) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Postgresql_SSL.ProtoReflect.Descriptor instead.
func (*External_Postgresql_SSL) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 1, 2}
}

// Deprecated: Do not use.
func (x *External_Postgresql_SSL) GetMode() *wrapperspb.StringValue {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *External_Postgresql_SSL) GetCert() *wrapperspb.StringValue {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *External_Postgresql_SSL) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *External_Postgresql_SSL) GetRootCert() *wrapperspb.StringValue {
	if x != nil {
		return x.RootCert
	}
	return nil
}

func (x *External_Postgresql_SSL) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

type External_Postgresql_Authentication_PasswordAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Superuser *External_Postgresql_Authentication_PasswordAuthentication_User `protobuf:"bytes,1,opt,name=superuser,proto3" json:"superuser,omitempty" toml:"superuser,omitempty" mapstructure:"superuser,omitempty"`
	Dbuser    *External_Postgresql_Authentication_PasswordAuthentication_User `protobuf:"bytes,2,opt,name=dbuser,proto3" json:"dbuser,omitempty" toml:"dbuser,omitempty" mapstructure:"dbuser,omitempty"`
}

func (x *External_Postgresql_Authentication_PasswordAuthentication) Reset() {
	*x = External_Postgresql_Authentication_PasswordAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Postgresql_Authentication_PasswordAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Postgresql_Authentication_PasswordAuthentication) ProtoMessage() {}

func (x *External_Postgresql_Authentication_PasswordAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Postgresql_Authentication_PasswordAuthentication.ProtoReflect.Descriptor instead.
func (*External_Postgresql_Authentication_PasswordAuthentication) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 1, 1, 0}
}

func (x *External_Postgresql_Authentication_PasswordAuthentication) GetSuperuser() *External_Postgresql_Authentication_PasswordAuthentication_User {
	if x != nil {
		return x.Superuser
	}
	return nil
}

func (x *External_Postgresql_Authentication_PasswordAuthentication) GetDbuser() *External_Postgresql_Authentication_PasswordAuthentication_User {
	if x != nil {
		return x.Dbuser
	}
	return nil
}

type External_Postgresql_Authentication_PasswordAuthentication_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" toml:"username,omitempty" mapstructure:"username,omitempty"`
	Password *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" toml:"password,omitempty" mapstructure:"password,omitempty"`
}

func (x *External_Postgresql_Authentication_PasswordAuthentication_User) Reset() {
	*x = External_Postgresql_Authentication_PasswordAuthentication_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Postgresql_Authentication_PasswordAuthentication_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Postgresql_Authentication_PasswordAuthentication_User) ProtoMessage() {}

func (x *External_Postgresql_Authentication_PasswordAuthentication_User) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Postgresql_Authentication_PasswordAuthentication_User.ProtoReflect.Descriptor instead.
func (*External_Postgresql_Authentication_PasswordAuthentication_User) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 1, 1, 0, 0}
}

func (x *External_Postgresql_Authentication_PasswordAuthentication_User) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *External_Postgresql_Authentication_PasswordAuthentication_User) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

type External_Automate_Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty" toml:"scheme,omitempty" mapstructure:"scheme,omitempty"`
	Token  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty" toml:"token,omitempty" mapstructure:"token,omitempty"`
}

func (x *External_Automate_Authentication) Reset() {
	*x = External_Automate_Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Automate_Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Automate_Authentication) ProtoMessage() {}

func (x *External_Automate_Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Automate_Authentication.ProtoReflect.Descriptor instead.
func (*External_Automate_Authentication) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 2, 0}
}

func (x *External_Automate_Authentication) GetScheme() *wrapperspb.StringValue {
	if x != nil {
		return x.Scheme
	}
	return nil
}

func (x *External_Automate_Authentication) GetToken() *wrapperspb.StringValue {
	if x != nil {
		return x.Token
	}
	return nil
}

type External_Automate_SSL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootCert   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=root_cert,json=rootCert,proto3" json:"root_cert,omitempty" toml:"root_cert,omitempty" mapstructure:"root_cert,omitempty"`
	ServerName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty" toml:"server_name,omitempty" mapstructure:"server_name,omitempty"`
}

func (x *External_Automate_SSL) Reset() {
	*x = External_Automate_SSL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External_Automate_SSL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External_Automate_SSL) ProtoMessage() {}

func (x *External_Automate_SSL) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External_Automate_SSL.ProtoReflect.Descriptor instead.
func (*External_Automate_SSL) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{2, 2, 1}
}

func (x *External_Automate_SSL) GetRootCert() *wrapperspb.StringValue {
	if x != nil {
		return x.RootCert
	}
	return nil
}

func (x *External_Automate_SSL) GetServerName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServerName
	}
	return nil
}

type Backups_Filesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path                     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty" toml:"path,omitempty" mapstructure:"path,omitempty"`
	EsMaxSnapshotBytesPerSec *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=es_max_snapshot_bytes_per_sec,json=esMaxSnapshotBytesPerSec,proto3" json:"es_max_snapshot_bytes_per_sec,omitempty" toml:"es_max_snapshot_bytes_per_sec,omitempty" mapstructure:"es_max_snapshot_bytes_per_sec,omitempty"`
	EsMaxRestoreBytesPerSec  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=es_max_restore_bytes_per_sec,json=esMaxRestoreBytesPerSec,proto3" json:"es_max_restore_bytes_per_sec,omitempty" toml:"es_max_restore_bytes_per_sec,omitempty" mapstructure:"es_max_restore_bytes_per_sec,omitempty"`
}

func (x *Backups_Filesystem) Reset() {
	*x = Backups_Filesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups_Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups_Filesystem) ProtoMessage() {}

func (x *Backups_Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups_Filesystem.ProtoReflect.Descriptor instead.
func (*Backups_Filesystem) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Backups_Filesystem) GetPath() *wrapperspb.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Backups_Filesystem) GetEsMaxSnapshotBytesPerSec() *wrapperspb.StringValue {
	if x != nil {
		return x.EsMaxSnapshotBytesPerSec
	}
	return nil
}

func (x *Backups_Filesystem) GetEsMaxRestoreBytesPerSec() *wrapperspb.StringValue {
	if x != nil {
		return x.EsMaxRestoreBytesPerSec
	}
	return nil
}

type Backups_S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials *Backups_S3_AWSCredentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty" toml:"credentials,omitempty" mapstructure:"credentials,omitempty"`
	Es          *Backups_S3_Elasticsearch  `protobuf:"bytes,2,opt,name=es,proto3" json:"es,omitempty" toml:"es,omitempty" mapstructure:"es,omitempty"`
	Bucket      *Backups_S3_Bucket         `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty" toml:"bucket,omitempty" mapstructure:"bucket,omitempty"`
	Ssl         *Backups_S3_SSL            `protobuf:"bytes,4,opt,name=ssl,proto3" json:"ssl,omitempty" toml:"ssl,omitempty" mapstructure:"ssl,omitempty"`
}

func (x *Backups_S3) Reset() {
	*x = Backups_S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups_S3) ProtoMessage() {}

func (x *Backups_S3) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups_S3.ProtoReflect.Descriptor instead.
func (*Backups_S3) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Backups_S3) GetCredentials() *Backups_S3_AWSCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Backups_S3) GetEs() *Backups_S3_Elasticsearch {
	if x != nil {
		return x.Es
	}
	return nil
}

func (x *Backups_S3) GetBucket() *Backups_S3_Bucket {
	if x != nil {
		return x.Bucket
	}
	return nil
}

func (x *Backups_S3) GetSsl() *Backups_S3_SSL {
	if x != nil {
		return x.Ssl
	}
	return nil
}

type Backups_GCS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials *Backups_GCS_GCPCredentials `protobuf:"bytes,1,opt,name=credentials,proto3" json:"credentials,omitempty" toml:"credentials,omitempty" mapstructure:"credentials,omitempty"`
	Es          *Backups_GCS_Elasticsearch  `protobuf:"bytes,2,opt,name=es,proto3" json:"es,omitempty" toml:"es,omitempty" mapstructure:"es,omitempty"`
	Bucket      *Backups_GCS_Bucket         `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty" toml:"bucket,omitempty" mapstructure:"bucket,omitempty"`
}

func (x *Backups_GCS) Reset() {
	*x = Backups_GCS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups_GCS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups_GCS) ProtoMessage() {}

func (x *Backups_GCS) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups_GCS.ProtoReflect.Descriptor instead.
func (*Backups_GCS) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Backups_GCS) GetCredentials() *Backups_GCS_GCPCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Backups_GCS) GetEs() *Backups_GCS_Elasticsearch {
	if x != nil {
		return x.Es
	}
	return nil
}

func (x *Backups_GCS) GetBucket() *Backups_GCS_Bucket {
	if x != nil {
		return x.Bucket
	}
	return nil
}

type Backups_S3_AWSCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty" toml:"access_key,omitempty" mapstructure:"access_key,omitempty"`
	SecretKey    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty" toml:"secret_key,omitempty" mapstructure:"secret_key,omitempty"`
	SessionToken *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty" toml:"session_token,omitempty" mapstructure:"session_token,omitempty"`
}

func (x *Backups_S3_AWSCredentials) Reset() {
	*x = Backups_S3_AWSCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups_S3_AWSCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups_S3_AWSCredentials) ProtoMessage() {}

func (x *Backups_S3_AWSCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups_S3_AWSCredentials.ProtoReflect.Descriptor instead.
func (*Backups_S3_AWSCredentials) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5, 1, 0}
}

func (x *Backups_S3_AWSCredentials) GetAccessKey() *wrapperspb.StringValue {
	if x != nil {
		return x.AccessKey
	}
	return nil
}

func (x *Backups_S3_AWSCredentials) GetSecretKey() *wrapperspb.StringValue {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *Backups_S3_AWSCredentials) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

type Backups_S3_Elasticsearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backup repo settings
	Compress             *wrapperspb.BoolValue   `protobuf:"bytes,2,opt,name=compress,proto3" json:"compress,omitempty" toml:"compress,omitempty" mapstructure:"compress,omitempty"`
	ServerSideEncryption *wrapperspb.BoolValue   `protobuf:"bytes,3,opt,name=server_side_encryption,json=serverSideEncryption,proto3" json:"server_side_encryption,omitempty" toml:"server_side_encryption,omitempty" mapstructure:"server_side_encryption,omitempty"`
	BufferSize           *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty" toml:"buffer_size,omitempty" mapstructure:"buffer_size,omitempty"`
	CannedAcl            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=canned_acl,json=cannedAcl,proto3" json:"canned_acl,omitempty" toml:"canned_acl,omitempty" mapstructure:"canned_acl,omitempty"`
	StorageClass         *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty" toml:"storage_class,omitempty" mapstructure:"storage_class,omitempty"`
	// Snapshot settings
	MaxSnapshotBytesPerSec *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=max_snapshot_bytes_per_sec,json=maxSnapshotBytesPerSec,proto3" json:"max_snapshot_bytes_per_sec,omitempty" toml:"max_snapshot_bytes_per_sec,omitempty" mapstructure:"max_snapshot_bytes_per_sec,omitempty"`
	MaxRestoreBytesPerSec  *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=max_restore_bytes_per_sec,json=maxRestoreBytesPerSec,proto3" json:"max_restore_bytes_per_sec,omitempty" toml:"max_restore_bytes_per_sec,omitempty" mapstructure:"max_restore_bytes_per_sec,omitempty"`
	ChunkSize              *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty" toml:"chunk_size,omitempty" mapstructure:"chunk_size,omitempty"`
	// S3 client settings
	ReadTimeout        *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty" toml:"read_timeout,omitempty" mapstructure:"read_timeout,omitempty"`
	MaxRetries         *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty" toml:"max_retries,omitempty" mapstructure:"max_retries,omitempty"`
	UseThrottleRetries *wrapperspb.BoolValue   `protobuf:"bytes,12,opt,name=use_throttle_retries,json=useThrottleRetries,proto3" json:"use_throttle_retries,omitempty" toml:"use_throttle_retries,omitempty" mapstructure:"use_throttle_retries,omitempty"`
	Protocol           *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=protocol,proto3" json:"protocol,omitempty" toml:"protocol,omitempty" mapstructure:"protocol,omitempty"`
	// Aws Elasticsearch
	Region  *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=region,proto3" json:"region,omitempty" toml:"region,omitempty" mapstructure:"region,omitempty"`
	RoleArn *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty" toml:"role_arn,omitempty" mapstructure:"role_arn,omitempty"`
}

func (x *Backups_S3_Elasticsearch) Reset() {
	*x = Backups_S3_Elasticsearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups_S3_Elasticsearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups_S3_Elasticsearch) ProtoMessage() {}

func (x *Backups_S3_Elasticsearch) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups_S3_Elasticsearch.ProtoReflect.Descriptor instead.
func (*Backups_S3_Elasticsearch) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5, 1, 1}
}

func (x *Backups_S3_Elasticsearch) GetCompress() *wrapperspb.BoolValue {
	if x != nil {
		return x.Compress
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetServerSideEncryption() *wrapperspb.BoolValue {
	if x != nil {
		return x.ServerSideEncryption
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetBufferSize() *wrapperspb.StringValue {
	if x != nil {
		return x.BufferSize
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetCannedAcl() *wrapperspb.StringValue {
	if x != nil {
		return x.CannedAcl
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetStorageClass() *wrapperspb.StringValue {
	if x != nil {
		return x.StorageClass
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetMaxSnapshotBytesPerSec() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxSnapshotBytesPerSec
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetMaxRestoreBytesPerSec() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxRestoreBytesPerSec
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetChunkSize() *wrapperspb.StringValue {
	if x != nil {
		return x.ChunkSize
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetReadTimeout() *wrapperspb.StringValue {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetMaxRetries() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxRetries
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetUseThrottleRetries() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseThrottleRetries
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetProtocol() *wrapperspb.StringValue {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Backups_S3_Elasticsearch) GetRoleArn() *wrapperspb.StringValue {
	if x != nil {
		return x.RoleArn
	}
	return nil
}

type Backups_S3_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty" toml:"endpoint,omitempty" mapstructure:"endpoint,omitempty"`
	BasePath *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty" toml:"base_path,omitempty" mapstructure:"base_path,omitempty"`
	Name     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
}

func (x *Backups_S3_Bucket) Reset() {
	*x = Backups_S3_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups_S3_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups_S3_Bucket) ProtoMessage() {}

func (x *Backups_S3_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups_S3_Bucket.ProtoReflect.Descriptor instead.
func (*Backups_S3_Bucket) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5, 1, 2}
}

func (x *Backups_S3_Bucket) GetEndpoint() *wrapperspb.StringValue {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *Backups_S3_Bucket) GetBasePath() *wrapperspb.StringValue {
	if x != nil {
		return x.BasePath
	}
	return nil
}

func (x *Backups_S3_Bucket) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

type Backups_S3_SSL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootCert *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=root_cert,json=rootCert,proto3" json:"root_cert,omitempty" toml:"root_cert,omitempty" mapstructure:"root_cert,omitempty"`
}

func (x *Backups_S3_SSL) Reset() {
	*x = Backups_S3_SSL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups_S3_SSL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups_S3_SSL) ProtoMessage() {}

func (x *Backups_S3_SSL) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups_S3_SSL.ProtoReflect.Descriptor instead.
func (*Backups_S3_SSL) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5, 1, 3}
}

func (x *Backups_S3_SSL) GetRootCert() *wrapperspb.StringValue {
	if x != nil {
		return x.RootCert
	}
	return nil
}

type Backups_GCS_GCPCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty" toml:"json,omitempty" mapstructure:"json,omitempty"`
}

func (x *Backups_GCS_GCPCredentials) Reset() {
	*x = Backups_GCS_GCPCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups_GCS_GCPCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups_GCS_GCPCredentials) ProtoMessage() {}

func (x *Backups_GCS_GCPCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups_GCS_GCPCredentials.ProtoReflect.Descriptor instead.
func (*Backups_GCS_GCPCredentials) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5, 2, 0}
}

func (x *Backups_GCS_GCPCredentials) GetJson() *wrapperspb.StringValue {
	if x != nil {
		return x.Json
	}
	return nil
}

type Backups_GCS_Elasticsearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backup repo settings
	Compress        *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=compress,proto3" json:"compress,omitempty" toml:"compress,omitempty" mapstructure:"compress,omitempty"`
	ApplicationName *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty" toml:"application_name,omitempty" mapstructure:"application_name,omitempty"`
	// Snapshot settings
	MaxSnapshotBytesPerSec *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=max_snapshot_bytes_per_sec,json=maxSnapshotBytesPerSec,proto3" json:"max_snapshot_bytes_per_sec,omitempty" toml:"max_snapshot_bytes_per_sec,omitempty" mapstructure:"max_snapshot_bytes_per_sec,omitempty"`
	MaxRestoreBytesPerSec  *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=max_restore_bytes_per_sec,json=maxRestoreBytesPerSec,proto3" json:"max_restore_bytes_per_sec,omitempty" toml:"max_restore_bytes_per_sec,omitempty" mapstructure:"max_restore_bytes_per_sec,omitempty"`
	ChunkSize              *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty" toml:"chunk_size,omitempty" mapstructure:"chunk_size,omitempty"`
	// GCS client settings
	ReadTimeout    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty" toml:"read_timeout,omitempty" mapstructure:"read_timeout,omitempty"`
	ConnectTimeout *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty" toml:"connect_timeout,omitempty" mapstructure:"connect_timeout,omitempty"`
}

func (x *Backups_GCS_Elasticsearch) Reset() {
	*x = Backups_GCS_Elasticsearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups_GCS_Elasticsearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups_GCS_Elasticsearch) ProtoMessage() {}

func (x *Backups_GCS_Elasticsearch) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups_GCS_Elasticsearch.ProtoReflect.Descriptor instead.
func (*Backups_GCS_Elasticsearch) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5, 2, 1}
}

func (x *Backups_GCS_Elasticsearch) GetCompress() *wrapperspb.BoolValue {
	if x != nil {
		return x.Compress
	}
	return nil
}

func (x *Backups_GCS_Elasticsearch) GetApplicationName() *wrapperspb.BoolValue {
	if x != nil {
		return x.ApplicationName
	}
	return nil
}

func (x *Backups_GCS_Elasticsearch) GetMaxSnapshotBytesPerSec() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxSnapshotBytesPerSec
	}
	return nil
}

func (x *Backups_GCS_Elasticsearch) GetMaxRestoreBytesPerSec() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxRestoreBytesPerSec
	}
	return nil
}

func (x *Backups_GCS_Elasticsearch) GetChunkSize() *wrapperspb.StringValue {
	if x != nil {
		return x.ChunkSize
	}
	return nil
}

func (x *Backups_GCS_Elasticsearch) GetReadTimeout() *wrapperspb.StringValue {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Backups_GCS_Elasticsearch) GetConnectTimeout() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

type Backups_GCS_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasePath *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty" toml:"base_path,omitempty" mapstructure:"base_path,omitempty"`
	Name     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
}

func (x *Backups_GCS_Bucket) Reset() {
	*x = Backups_GCS_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_shared_global_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backups_GCS_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backups_GCS_Bucket) ProtoMessage() {}

func (x *Backups_GCS_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_global_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backups_GCS_Bucket.ProtoReflect.Descriptor instead.
func (*Backups_GCS_Bucket) Descriptor() ([]byte, []int) {
	return file_config_shared_global_proto_rawDescGZIP(), []int{5, 2, 2}
}

func (x *Backups_GCS_Bucket) GetBasePath() *wrapperspb.StringValue {
	if x != nil {
		return x.BasePath
	}
	return nil
}

func (x *Backups_GCS_Bucket) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

var File_config_shared_global_proto protoreflect.FileDescriptor

var file_config_shared_global_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x74, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x3e, 0x0a, 0x0c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2e, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0x52, 0x02, 0x76,
	0x31, 0x22, 0x8b, 0x05, 0x0a, 0x02, 0x56, 0x31, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x6c,
	0x73, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6c, 0x73, 0x61, 0x52, 0x04, 0x6d, 0x6c, 0x73, 0x61,
	0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52,
	0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x54, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x4c, 0x53, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x54, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0xe2, 0x23, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x0d,
	0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x0d, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x12, 0x49, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x1a, 0xe8, 0x13, 0x0a, 0x0d, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x06,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12,
	0x55, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x03, 0x73, 0x73, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x53, 0x53, 0x4c, 0x52, 0x03, 0x73, 0x73, 0x6c,
	0x1a, 0x88, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x02, 0x66, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x2e, 0x46, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x02, 0x66, 0x73, 0x12,
	0x54, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x53, 0x33, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x02, 0x73, 0x33, 0x12, 0x57, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x47, 0x43,
	0x53, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x03, 0x67, 0x63, 0x73, 0x1a, 0xf8,
	0x02, 0x0a, 0x0a, 0x46, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x71, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x55, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x46, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x1a, 0x85, 0x02, 0x0a, 0x0a, 0x53, 0x33,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x50, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x33, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0x87, 0x02, 0x0a, 0x0b, 0x47, 0x43, 0x53, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e,
	0x47, 0x43, 0x53, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xa9, 0x05, 0x0a, 0x0e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x41, 0x75, 0x74, 0x68, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x6d, 0x0a, 0x06, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x74, 0x68, 0x52, 0x05, 0x61, 0x77, 0x73, 0x45, 0x73, 0x1a,
	0x7f, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x1a, 0x84, 0x02, 0x0a, 0x14, 0x41, 0x77, 0x73, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0xc3, 0x01, 0x0a, 0x03, 0x53, 0x53, 0x4c, 0x12,
	0x39, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0xed, 0x09,
	0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x12, 0x32, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x52, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x03, 0x73, 0x73, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x53, 0x53, 0x4c, 0x52, 0x03, 0x73, 0x73, 0x6c, 0x1a,
	0x3c, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xbe, 0x04,
	0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x82, 0x03, 0x0a, 0x16, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x72,
	0x0a, 0x06, 0x64, 0x62, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x64, 0x62, 0x75, 0x73,
	0x65, 0x72, 0x1a, 0x7a, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x8c,
	0x02, 0x0a, 0x03, 0x53, 0x53, 0x4c, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x2e,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x84, 0x04,
	0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x50, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x43, 0x0a, 0x03, 0x73, 0x73, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x53, 0x4c, 0x52, 0x03, 0x73, 0x73, 0x6c, 0x1a, 0x7a, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x1a, 0x7f, 0x0a, 0x03, 0x53, 0x53, 0x4c, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x04, 0x4d, 0x6c, 0x73, 0x61, 0x12, 0x32, 0x0a, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x22, 0xf1, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x22, 0xea, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73,
	0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x02, 0x73, 0x33,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x33, 0x52, 0x02,
	0x73, 0x33, 0x12, 0x39, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x43, 0x53, 0x52, 0x03, 0x67, 0x63, 0x73, 0x1a, 0xfa, 0x01,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x5d,
	0x0a, 0x1d, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x18, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x5b, 0x0a,
	0x1c, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x17, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x1a, 0xac, 0x0d, 0x0a, 0x02, 0x53,
	0x33, 0x12, 0x57, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x33, 0x2e, 0x41,
	0x57, 0x53, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x02, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x33, 0x2e, 0x45,
	0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x02, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x33, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x73, 0x73, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x33, 0x2e, 0x53, 0x53, 0x4c,
	0x52, 0x03, 0x73, 0x73, 0x6c, 0x1a, 0xcd, 0x01, 0x0a, 0x0e, 0x41, 0x57, 0x53, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xbd, 0x07, 0x0a, 0x0d, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x50, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x6c, 0x12, 0x41, 0x0a,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x58, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x75, 0x73, 0x65, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x41, 0x72, 0x6e, 0x1a, 0xaf, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x40, 0x0a, 0x03, 0x53, 0x53, 0x4c, 0x12, 0x39,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x1a, 0xaf, 0x07, 0x0a, 0x03, 0x47, 0x43,
	0x53, 0x12, 0x58, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x43, 0x53, 0x2e,
	0x47, 0x43, 0x50, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x02, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x43, 0x53,
	0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x02,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x43, 0x53, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x42, 0x0a, 0x0e, 0x47, 0x43,
	0x50, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x04,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x83,
	0x04, 0x0a, 0x0d, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x58, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f,
	0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x43, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x1a, 0x75, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x39,
	0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x22, 0x6f, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x68, 0x6f,
	0x77, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xf6, 0x01, 0x0a, 0x06,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47,
	0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_shared_global_proto_rawDescOnce sync.Once
	file_config_shared_global_proto_rawDescData = file_config_shared_global_proto_rawDesc
)

func file_config_shared_global_proto_rawDescGZIP() []byte {
	file_config_shared_global_proto_rawDescOnce.Do(func() {
		file_config_shared_global_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_shared_global_proto_rawDescData)
	})
	return file_config_shared_global_proto_rawDescData
}

var file_config_shared_global_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_config_shared_global_proto_goTypes = []interface{}{
	(*GlobalConfig)(nil),                  // 0: chef.automate.infra.config.GlobalConfig
	(*V1)(nil),                            // 1: chef.automate.infra.config.V1
	(*External)(nil),                      // 2: chef.automate.infra.config.External
	(*Mlsa)(nil),                          // 3: chef.automate.infra.config.Mlsa
	(*Proxy)(nil),                         // 4: chef.automate.infra.config.Proxy
	(*Backups)(nil),                       // 5: chef.automate.infra.config.Backups
	(*Log)(nil),                           // 6: chef.automate.infra.config.Log
	(*Disclosure)(nil),                    // 7: chef.automate.infra.config.Disclosure
	(*Banner)(nil),                        // 8: chef.automate.infra.config.Banner
	(*SessionSettings)(nil),               // 9: chef.automate.infra.config.SessionSettings
	(*External_Elasticsearch)(nil),        // 10: chef.automate.infra.config.External.Elasticsearch
	(*External_Postgresql)(nil),           // 11: chef.automate.infra.config.External.Postgresql
	(*External_Automate)(nil),             // 12: chef.automate.infra.config.External.Automate
	(*External_Elasticsearch_Backup)(nil), // 13: chef.automate.infra.config.External.Elasticsearch.Backup
	(*External_Elasticsearch_Authentication)(nil),                          // 14: chef.automate.infra.config.External.Elasticsearch.Authentication
	(*External_Elasticsearch_SSL)(nil),                                     // 15: chef.automate.infra.config.External.Elasticsearch.SSL
	(*External_Elasticsearch_Backup_FsSettings)(nil),                       // 16: chef.automate.infra.config.External.Elasticsearch.Backup.FsSettings
	(*External_Elasticsearch_Backup_S3Settings)(nil),                       // 17: chef.automate.infra.config.External.Elasticsearch.Backup.S3Settings
	(*External_Elasticsearch_Backup_GCSSettings)(nil),                      // 18: chef.automate.infra.config.External.Elasticsearch.Backup.GCSSettings
	(*External_Elasticsearch_Backup_FsSettings_OptionalSettings)(nil),      // 19: chef.automate.infra.config.External.Elasticsearch.Backup.FsSettings.OptionalSettings
	(*External_Elasticsearch_Authentication_BasicAuth)(nil),                // 20: chef.automate.infra.config.External.Elasticsearch.Authentication.BasicAuth
	(*External_Elasticsearch_Authentication_AwsElasticsearchAuth)(nil),     // 21: chef.automate.infra.config.External.Elasticsearch.Authentication.AwsElasticsearchAuth
	(*External_Postgresql_Backup)(nil),                                     // 22: chef.automate.infra.config.External.Postgresql.Backup
	(*External_Postgresql_Authentication)(nil),                             // 23: chef.automate.infra.config.External.Postgresql.Authentication
	(*External_Postgresql_SSL)(nil),                                        // 24: chef.automate.infra.config.External.Postgresql.SSL
	(*External_Postgresql_Authentication_PasswordAuthentication)(nil),      // 25: chef.automate.infra.config.External.Postgresql.Authentication.PasswordAuthentication
	(*External_Postgresql_Authentication_PasswordAuthentication_User)(nil), // 26: chef.automate.infra.config.External.Postgresql.Authentication.PasswordAuthentication.User
	(*External_Automate_Authentication)(nil),                               // 27: chef.automate.infra.config.External.Automate.Authentication
	(*External_Automate_SSL)(nil),                                          // 28: chef.automate.infra.config.External.Automate.SSL
	(*Backups_Filesystem)(nil),                                             // 29: chef.automate.infra.config.Backups.Filesystem
	(*Backups_S3)(nil),                                                     // 30: chef.automate.infra.config.Backups.S3
	(*Backups_GCS)(nil),                                                    // 31: chef.automate.infra.config.Backups.GCS
	(*Backups_S3_AWSCredentials)(nil),                                      // 32: chef.automate.infra.config.Backups.S3.AWSCredentials
	(*Backups_S3_Elasticsearch)(nil),                                       // 33: chef.automate.infra.config.Backups.S3.Elasticsearch
	(*Backups_S3_Bucket)(nil),                                              // 34: chef.automate.infra.config.Backups.S3.Bucket
	(*Backups_S3_SSL)(nil),                                                 // 35: chef.automate.infra.config.Backups.S3.SSL
	(*Backups_GCS_GCPCredentials)(nil),                                     // 36: chef.automate.infra.config.Backups.GCS.GCPCredentials
	(*Backups_GCS_Elasticsearch)(nil),                                      // 37: chef.automate.infra.config.Backups.GCS.Elasticsearch
	(*Backups_GCS_Bucket)(nil),                                             // 38: chef.automate.infra.config.Backups.GCS.Bucket
	(*wrapperspb.StringValue)(nil),                                         // 39: google.protobuf.StringValue
	(*FrontendTLSCredential)(nil),                                          // 40: chef.automate.infra.config.FrontendTLSCredential
	(*wrapperspb.BoolValue)(nil),                                           // 41: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),                                          // 42: google.protobuf.Int32Value
}
var file_config_shared_global_proto_depIdxs = []int32{
	1,   // 0: chef.automate.infra.config.GlobalConfig.v1:type_name -> chef.automate.infra.config.V1
	39,  // 1: chef.automate.infra.config.V1.fqdn:type_name -> google.protobuf.StringValue
	3,   // 2: chef.automate.infra.config.V1.mlsa:type_name -> chef.automate.infra.config.Mlsa
	4,   // 3: chef.automate.infra.config.V1.proxy:type_name -> chef.automate.infra.config.Proxy
	5,   // 4: chef.automate.infra.config.V1.backups:type_name -> chef.automate.infra.config.Backups
	6,   // 5: chef.automate.infra.config.V1.log:type_name -> chef.automate.infra.config.Log
	2,   // 6: chef.automate.infra.config.V1.external:type_name -> chef.automate.infra.config.External
	40,  // 7: chef.automate.infra.config.V1.frontend_tls:type_name -> chef.automate.infra.config.FrontendTLSCredential
	7,   // 8: chef.automate.infra.config.V1.disclosure:type_name -> chef.automate.infra.config.Disclosure
	8,   // 9: chef.automate.infra.config.V1.banner:type_name -> chef.automate.infra.config.Banner
	9,   // 10: chef.automate.infra.config.V1.session_settings:type_name -> chef.automate.infra.config.SessionSettings
	10,  // 11: chef.automate.infra.config.External.elasticsearch:type_name -> chef.automate.infra.config.External.Elasticsearch
	11,  // 12: chef.automate.infra.config.External.postgresql:type_name -> chef.automate.infra.config.External.Postgresql
	12,  // 13: chef.automate.infra.config.External.automate:type_name -> chef.automate.infra.config.External.Automate
	41,  // 14: chef.automate.infra.config.Mlsa.accept:type_name -> google.protobuf.BoolValue
	39,  // 15: chef.automate.infra.config.Proxy.host:type_name -> google.protobuf.StringValue
	42,  // 16: chef.automate.infra.config.Proxy.port:type_name -> google.protobuf.Int32Value
	39,  // 17: chef.automate.infra.config.Proxy.user:type_name -> google.protobuf.StringValue
	39,  // 18: chef.automate.infra.config.Proxy.password:type_name -> google.protobuf.StringValue
	39,  // 19: chef.automate.infra.config.Backups.location:type_name -> google.protobuf.StringValue
	29,  // 20: chef.automate.infra.config.Backups.filesystem:type_name -> chef.automate.infra.config.Backups.Filesystem
	30,  // 21: chef.automate.infra.config.Backups.s3:type_name -> chef.automate.infra.config.Backups.S3
	31,  // 22: chef.automate.infra.config.Backups.gcs:type_name -> chef.automate.infra.config.Backups.GCS
	39,  // 23: chef.automate.infra.config.Log.level:type_name -> google.protobuf.StringValue
	39,  // 24: chef.automate.infra.config.Log.format:type_name -> google.protobuf.StringValue
	41,  // 25: chef.automate.infra.config.Disclosure.show:type_name -> google.protobuf.BoolValue
	39,  // 26: chef.automate.infra.config.Disclosure.message_file_path:type_name -> google.protobuf.StringValue
	41,  // 27: chef.automate.infra.config.Banner.show:type_name -> google.protobuf.BoolValue
	39,  // 28: chef.automate.infra.config.Banner.message:type_name -> google.protobuf.StringValue
	39,  // 29: chef.automate.infra.config.Banner.background_color:type_name -> google.protobuf.StringValue
	39,  // 30: chef.automate.infra.config.Banner.text_color:type_name -> google.protobuf.StringValue
	41,  // 31: chef.automate.infra.config.SessionSettings.enable_idle_timeout:type_name -> google.protobuf.BoolValue
	42,  // 32: chef.automate.infra.config.SessionSettings.idle_timeout_minutes:type_name -> google.protobuf.Int32Value
	41,  // 33: chef.automate.infra.config.External.Elasticsearch.enable:type_name -> google.protobuf.BoolValue
	39,  // 34: chef.automate.infra.config.External.Elasticsearch.nodes:type_name -> google.protobuf.StringValue
	13,  // 35: chef.automate.infra.config.External.Elasticsearch.backup:type_name -> chef.automate.infra.config.External.Elasticsearch.Backup
	14,  // 36: chef.automate.infra.config.External.Elasticsearch.auth:type_name -> chef.automate.infra.config.External.Elasticsearch.Authentication
	15,  // 37: chef.automate.infra.config.External.Elasticsearch.ssl:type_name -> chef.automate.infra.config.External.Elasticsearch.SSL
	41,  // 38: chef.automate.infra.config.External.Postgresql.enable:type_name -> google.protobuf.BoolValue
	39,  // 39: chef.automate.infra.config.External.Postgresql.nodes:type_name -> google.protobuf.StringValue
	22,  // 40: chef.automate.infra.config.External.Postgresql.backup:type_name -> chef.automate.infra.config.External.Postgresql.Backup
	23,  // 41: chef.automate.infra.config.External.Postgresql.auth:type_name -> chef.automate.infra.config.External.Postgresql.Authentication
	24,  // 42: chef.automate.infra.config.External.Postgresql.ssl:type_name -> chef.automate.infra.config.External.Postgresql.SSL
	41,  // 43: chef.automate.infra.config.External.Automate.enable:type_name -> google.protobuf.BoolValue
	39,  // 44: chef.automate.infra.config.External.Automate.node:type_name -> google.protobuf.StringValue
	27,  // 45: chef.automate.infra.config.External.Automate.auth:type_name -> chef.automate.infra.config.External.Automate.Authentication
	28,  // 46: chef.automate.infra.config.External.Automate.ssl:type_name -> chef.automate.infra.config.External.Automate.SSL
	41,  // 47: chef.automate.infra.config.External.Elasticsearch.Backup.enable:type_name -> google.protobuf.BoolValue
	39,  // 48: chef.automate.infra.config.External.Elasticsearch.Backup.location:type_name -> google.protobuf.StringValue
	16,  // 49: chef.automate.infra.config.External.Elasticsearch.Backup.fs:type_name -> chef.automate.infra.config.External.Elasticsearch.Backup.FsSettings
	17,  // 50: chef.automate.infra.config.External.Elasticsearch.Backup.s3:type_name -> chef.automate.infra.config.External.Elasticsearch.Backup.S3Settings
	18,  // 51: chef.automate.infra.config.External.Elasticsearch.Backup.gcs:type_name -> chef.automate.infra.config.External.Elasticsearch.Backup.GCSSettings
	39,  // 52: chef.automate.infra.config.External.Elasticsearch.Authentication.scheme:type_name -> google.protobuf.StringValue
	20,  // 53: chef.automate.infra.config.External.Elasticsearch.Authentication.basic_auth:type_name -> chef.automate.infra.config.External.Elasticsearch.Authentication.BasicAuth
	21,  // 54: chef.automate.infra.config.External.Elasticsearch.Authentication.aws_es:type_name -> chef.automate.infra.config.External.Elasticsearch.Authentication.AwsElasticsearchAuth
	39,  // 55: chef.automate.infra.config.External.Elasticsearch.SSL.root_cert:type_name -> google.protobuf.StringValue
	39,  // 56: chef.automate.infra.config.External.Elasticsearch.SSL.server_name:type_name -> google.protobuf.StringValue
	39,  // 57: chef.automate.infra.config.External.Elasticsearch.SSL.root_cert_file:type_name -> google.protobuf.StringValue
	39,  // 58: chef.automate.infra.config.External.Elasticsearch.Backup.FsSettings.path:type_name -> google.protobuf.StringValue
	19,  // 59: chef.automate.infra.config.External.Elasticsearch.Backup.FsSettings.settings:type_name -> chef.automate.infra.config.External.Elasticsearch.Backup.FsSettings.OptionalSettings
	39,  // 60: chef.automate.infra.config.External.Elasticsearch.Backup.S3Settings.bucket:type_name -> google.protobuf.StringValue
	39,  // 61: chef.automate.infra.config.External.Elasticsearch.Backup.S3Settings.client:type_name -> google.protobuf.StringValue
	39,  // 62: chef.automate.infra.config.External.Elasticsearch.Backup.S3Settings.base_path:type_name -> google.protobuf.StringValue
	33,  // 63: chef.automate.infra.config.External.Elasticsearch.Backup.S3Settings.settings:type_name -> chef.automate.infra.config.Backups.S3.Elasticsearch
	39,  // 64: chef.automate.infra.config.External.Elasticsearch.Backup.GCSSettings.bucket:type_name -> google.protobuf.StringValue
	39,  // 65: chef.automate.infra.config.External.Elasticsearch.Backup.GCSSettings.client:type_name -> google.protobuf.StringValue
	39,  // 66: chef.automate.infra.config.External.Elasticsearch.Backup.GCSSettings.base_path:type_name -> google.protobuf.StringValue
	37,  // 67: chef.automate.infra.config.External.Elasticsearch.Backup.GCSSettings.settings:type_name -> chef.automate.infra.config.Backups.GCS.Elasticsearch
	39,  // 68: chef.automate.infra.config.External.Elasticsearch.Backup.FsSettings.OptionalSettings.max_snapshot_bytes_per_sec:type_name -> google.protobuf.StringValue
	39,  // 69: chef.automate.infra.config.External.Elasticsearch.Backup.FsSettings.OptionalSettings.max_restore_bytes_per_sec:type_name -> google.protobuf.StringValue
	39,  // 70: chef.automate.infra.config.External.Elasticsearch.Authentication.BasicAuth.username:type_name -> google.protobuf.StringValue
	39,  // 71: chef.automate.infra.config.External.Elasticsearch.Authentication.BasicAuth.password:type_name -> google.protobuf.StringValue
	39,  // 72: chef.automate.infra.config.External.Elasticsearch.Authentication.AwsElasticsearchAuth.username:type_name -> google.protobuf.StringValue
	39,  // 73: chef.automate.infra.config.External.Elasticsearch.Authentication.AwsElasticsearchAuth.password:type_name -> google.protobuf.StringValue
	39,  // 74: chef.automate.infra.config.External.Elasticsearch.Authentication.AwsElasticsearchAuth.access_key:type_name -> google.protobuf.StringValue
	39,  // 75: chef.automate.infra.config.External.Elasticsearch.Authentication.AwsElasticsearchAuth.secret_key:type_name -> google.protobuf.StringValue
	41,  // 76: chef.automate.infra.config.External.Postgresql.Backup.enable:type_name -> google.protobuf.BoolValue
	39,  // 77: chef.automate.infra.config.External.Postgresql.Authentication.scheme:type_name -> google.protobuf.StringValue
	25,  // 78: chef.automate.infra.config.External.Postgresql.Authentication.password:type_name -> chef.automate.infra.config.External.Postgresql.Authentication.PasswordAuthentication
	39,  // 79: chef.automate.infra.config.External.Postgresql.SSL.mode:type_name -> google.protobuf.StringValue
	39,  // 80: chef.automate.infra.config.External.Postgresql.SSL.cert:type_name -> google.protobuf.StringValue
	39,  // 81: chef.automate.infra.config.External.Postgresql.SSL.key:type_name -> google.protobuf.StringValue
	39,  // 82: chef.automate.infra.config.External.Postgresql.SSL.root_cert:type_name -> google.protobuf.StringValue
	41,  // 83: chef.automate.infra.config.External.Postgresql.SSL.enable:type_name -> google.protobuf.BoolValue
	26,  // 84: chef.automate.infra.config.External.Postgresql.Authentication.PasswordAuthentication.superuser:type_name -> chef.automate.infra.config.External.Postgresql.Authentication.PasswordAuthentication.User
	26,  // 85: chef.automate.infra.config.External.Postgresql.Authentication.PasswordAuthentication.dbuser:type_name -> chef.automate.infra.config.External.Postgresql.Authentication.PasswordAuthentication.User
	39,  // 86: chef.automate.infra.config.External.Postgresql.Authentication.PasswordAuthentication.User.username:type_name -> google.protobuf.StringValue
	39,  // 87: chef.automate.infra.config.External.Postgresql.Authentication.PasswordAuthentication.User.password:type_name -> google.protobuf.StringValue
	39,  // 88: chef.automate.infra.config.External.Automate.Authentication.scheme:type_name -> google.protobuf.StringValue
	39,  // 89: chef.automate.infra.config.External.Automate.Authentication.token:type_name -> google.protobuf.StringValue
	39,  // 90: chef.automate.infra.config.External.Automate.SSL.root_cert:type_name -> google.protobuf.StringValue
	39,  // 91: chef.automate.infra.config.External.Automate.SSL.server_name:type_name -> google.protobuf.StringValue
	39,  // 92: chef.automate.infra.config.Backups.Filesystem.path:type_name -> google.protobuf.StringValue
	39,  // 93: chef.automate.infra.config.Backups.Filesystem.es_max_snapshot_bytes_per_sec:type_name -> google.protobuf.StringValue
	39,  // 94: chef.automate.infra.config.Backups.Filesystem.es_max_restore_bytes_per_sec:type_name -> google.protobuf.StringValue
	32,  // 95: chef.automate.infra.config.Backups.S3.credentials:type_name -> chef.automate.infra.config.Backups.S3.AWSCredentials
	33,  // 96: chef.automate.infra.config.Backups.S3.es:type_name -> chef.automate.infra.config.Backups.S3.Elasticsearch
	34,  // 97: chef.automate.infra.config.Backups.S3.bucket:type_name -> chef.automate.infra.config.Backups.S3.Bucket
	35,  // 98: chef.automate.infra.config.Backups.S3.ssl:type_name -> chef.automate.infra.config.Backups.S3.SSL
	36,  // 99: chef.automate.infra.config.Backups.GCS.credentials:type_name -> chef.automate.infra.config.Backups.GCS.GCPCredentials
	37,  // 100: chef.automate.infra.config.Backups.GCS.es:type_name -> chef.automate.infra.config.Backups.GCS.Elasticsearch
	38,  // 101: chef.automate.infra.config.Backups.GCS.bucket:type_name -> chef.automate.infra.config.Backups.GCS.Bucket
	39,  // 102: chef.automate.infra.config.Backups.S3.AWSCredentials.access_key:type_name -> google.protobuf.StringValue
	39,  // 103: chef.automate.infra.config.Backups.S3.AWSCredentials.secret_key:type_name -> google.protobuf.StringValue
	39,  // 104: chef.automate.infra.config.Backups.S3.AWSCredentials.session_token:type_name -> google.protobuf.StringValue
	41,  // 105: chef.automate.infra.config.Backups.S3.Elasticsearch.compress:type_name -> google.protobuf.BoolValue
	41,  // 106: chef.automate.infra.config.Backups.S3.Elasticsearch.server_side_encryption:type_name -> google.protobuf.BoolValue
	39,  // 107: chef.automate.infra.config.Backups.S3.Elasticsearch.buffer_size:type_name -> google.protobuf.StringValue
	39,  // 108: chef.automate.infra.config.Backups.S3.Elasticsearch.canned_acl:type_name -> google.protobuf.StringValue
	39,  // 109: chef.automate.infra.config.Backups.S3.Elasticsearch.storage_class:type_name -> google.protobuf.StringValue
	39,  // 110: chef.automate.infra.config.Backups.S3.Elasticsearch.max_snapshot_bytes_per_sec:type_name -> google.protobuf.StringValue
	39,  // 111: chef.automate.infra.config.Backups.S3.Elasticsearch.max_restore_bytes_per_sec:type_name -> google.protobuf.StringValue
	39,  // 112: chef.automate.infra.config.Backups.S3.Elasticsearch.chunk_size:type_name -> google.protobuf.StringValue
	39,  // 113: chef.automate.infra.config.Backups.S3.Elasticsearch.read_timeout:type_name -> google.protobuf.StringValue
	42,  // 114: chef.automate.infra.config.Backups.S3.Elasticsearch.max_retries:type_name -> google.protobuf.Int32Value
	41,  // 115: chef.automate.infra.config.Backups.S3.Elasticsearch.use_throttle_retries:type_name -> google.protobuf.BoolValue
	39,  // 116: chef.automate.infra.config.Backups.S3.Elasticsearch.protocol:type_name -> google.protobuf.StringValue
	39,  // 117: chef.automate.infra.config.Backups.S3.Elasticsearch.region:type_name -> google.protobuf.StringValue
	39,  // 118: chef.automate.infra.config.Backups.S3.Elasticsearch.role_arn:type_name -> google.protobuf.StringValue
	39,  // 119: chef.automate.infra.config.Backups.S3.Bucket.endpoint:type_name -> google.protobuf.StringValue
	39,  // 120: chef.automate.infra.config.Backups.S3.Bucket.base_path:type_name -> google.protobuf.StringValue
	39,  // 121: chef.automate.infra.config.Backups.S3.Bucket.name:type_name -> google.protobuf.StringValue
	39,  // 122: chef.automate.infra.config.Backups.S3.SSL.root_cert:type_name -> google.protobuf.StringValue
	39,  // 123: chef.automate.infra.config.Backups.GCS.GCPCredentials.json:type_name -> google.protobuf.StringValue
	41,  // 124: chef.automate.infra.config.Backups.GCS.Elasticsearch.compress:type_name -> google.protobuf.BoolValue
	41,  // 125: chef.automate.infra.config.Backups.GCS.Elasticsearch.application_name:type_name -> google.protobuf.BoolValue
	39,  // 126: chef.automate.infra.config.Backups.GCS.Elasticsearch.max_snapshot_bytes_per_sec:type_name -> google.protobuf.StringValue
	39,  // 127: chef.automate.infra.config.Backups.GCS.Elasticsearch.max_restore_bytes_per_sec:type_name -> google.protobuf.StringValue
	39,  // 128: chef.automate.infra.config.Backups.GCS.Elasticsearch.chunk_size:type_name -> google.protobuf.StringValue
	39,  // 129: chef.automate.infra.config.Backups.GCS.Elasticsearch.read_timeout:type_name -> google.protobuf.StringValue
	41,  // 130: chef.automate.infra.config.Backups.GCS.Elasticsearch.connect_timeout:type_name -> google.protobuf.BoolValue
	39,  // 131: chef.automate.infra.config.Backups.GCS.Bucket.base_path:type_name -> google.protobuf.StringValue
	39,  // 132: chef.automate.infra.config.Backups.GCS.Bucket.name:type_name -> google.protobuf.StringValue
	133, // [133:133] is the sub-list for method output_type
	133, // [133:133] is the sub-list for method input_type
	133, // [133:133] is the sub-list for extension type_name
	133, // [133:133] is the sub-list for extension extendee
	0,   // [0:133] is the sub-list for field type_name
}

func init() { file_config_shared_global_proto_init() }
func file_config_shared_global_proto_init() {
	if File_config_shared_global_proto != nil {
		return
	}
	file_config_shared_tls_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_config_shared_global_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mlsa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disclosure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Elasticsearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Postgresql); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Automate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Elasticsearch_Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Elasticsearch_Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Elasticsearch_SSL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Elasticsearch_Backup_FsSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Elasticsearch_Backup_S3Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Elasticsearch_Backup_GCSSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Elasticsearch_Backup_FsSettings_OptionalSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Elasticsearch_Authentication_BasicAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Elasticsearch_Authentication_AwsElasticsearchAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Postgresql_Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Postgresql_Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Postgresql_SSL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Postgresql_Authentication_PasswordAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Postgresql_Authentication_PasswordAuthentication_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Automate_Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External_Automate_SSL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups_Filesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups_S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups_GCS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups_S3_AWSCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups_S3_Elasticsearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups_S3_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups_S3_SSL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups_GCS_GCPCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups_GCS_Elasticsearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_shared_global_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backups_GCS_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_shared_global_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_shared_global_proto_goTypes,
		DependencyIndexes: file_config_shared_global_proto_depIdxs,
		MessageInfos:      file_config_shared_global_proto_msgTypes,
	}.Build()
	File_config_shared_global_proto = out.File
	file_config_shared_global_proto_rawDesc = nil
	file_config_shared_global_proto_goTypes = nil
	file_config_shared_global_proto_depIdxs = nil
}
