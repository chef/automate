// Code generated by protoc-gen-a2config. DO NOT EDIT.
// source: config/shared/global.proto

package shared

import (
	a2conf "github.com/chef/automate/components/automate-grpc/protoc-gen-a2-config/api/a2conf"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ServiceName returns the name of the service this config belongs to
func (m *GlobalConfig) ServiceName() string {
	return "global"
}

// BindPort sets the port tagged with the given name
func (m *GlobalConfig) BindPort(name string, value uint16) error {
	switch name {
	default:
		return a2conf.ErrPortNotFound
	}
	return nil
}

// ListPorts lists all the ports exposed by the config
func (m *GlobalConfig) ListPorts() []a2conf.PortInfo {
	return []a2conf.PortInfo{}
}

// GetPort gets the port tagged with the given name. If the value is not set, it returns 0.
func (m *GlobalConfig) GetPort(name string) (uint16, error) {
	switch name {
	default:
		return 0, a2conf.ErrPortNotFound
	}
}

// ListSecrets lists all the secrets exposed by the config
func (m *GlobalConfig) ListSecrets() []a2conf.SecretInfo {
	return []a2conf.SecretInfo{a2conf.SecretInfo{
		EnvironmentVariable: "AUTOMATE_SECRET_ES_PASSWORD",
		Name:                "es_password",
	}, a2conf.SecretInfo{
		EnvironmentVariable: "AUTOMATE_SECRET_PG_SUPERUSER_PASSWORD",
		Name:                "pg_superuser_password",
	}, a2conf.SecretInfo{
		EnvironmentVariable: "AUTOMATE_SECRET_PG_DBUSER_PASSWORD",
		Name:                "pg_dbuser_password",
	}, a2conf.SecretInfo{
		EnvironmentVariable: "AUTOMATE_SECRET_OS_PASSWORD",
		Name:                "os_password",
	}, a2conf.SecretInfo{
		EnvironmentVariable: "AUTOMATE_SECRET_LCR_MINIO_PASSWORD",
		Name:                "lcr_minio_password",
	}}
}

// GetSecret gets a secret by name. Returns nil if it is not set
func (m *GlobalConfig) GetSecret(name string) *wrappers.StringValue {
	if m == nil {
		return nil
	}
	switch name {
	case "es_password":
		v0 := m.V1
		if v0 == nil {
			return nil
		}
		v1 := v0.External
		if v1 == nil {
			return nil
		}
		v2 := v1.Elasticsearch
		if v2 == nil {
			return nil
		}
		v3 := v2.Auth
		if v3 == nil {
			return nil
		}
		v4 := v3.BasicAuth
		if v4 == nil {
			return nil
		}
		v5 := v4.Password
		return v5
	case "pg_superuser_password":
		v0 := m.V1
		if v0 == nil {
			return nil
		}
		v1 := v0.External
		if v1 == nil {
			return nil
		}
		v2 := v1.Postgresql
		if v2 == nil {
			return nil
		}
		v3 := v2.Auth
		if v3 == nil {
			return nil
		}
		v4 := v3.Password
		if v4 == nil {
			return nil
		}
		v5 := v4.Superuser
		if v5 == nil {
			return nil
		}
		v6 := v5.Password
		return v6
	case "pg_dbuser_password":
		v0 := m.V1
		if v0 == nil {
			return nil
		}
		v1 := v0.External
		if v1 == nil {
			return nil
		}
		v2 := v1.Postgresql
		if v2 == nil {
			return nil
		}
		v3 := v2.Auth
		if v3 == nil {
			return nil
		}
		v4 := v3.Password
		if v4 == nil {
			return nil
		}
		v5 := v4.Dbuser
		if v5 == nil {
			return nil
		}
		v6 := v5.Password
		return v6
	case "os_password":
		v0 := m.V1
		if v0 == nil {
			return nil
		}
		v1 := v0.External
		if v1 == nil {
			return nil
		}
		v2 := v1.Opensearch
		if v2 == nil {
			return nil
		}
		v3 := v2.Auth
		if v3 == nil {
			return nil
		}
		v4 := v3.BasicAuth
		if v4 == nil {
			return nil
		}
		v5 := v4.Password
		return v5
	case "lcr_minio_password":
		v0 := m.V1
		if v0 == nil {
			return nil
		}
		v1 := v0.External
		if v1 == nil {
			return nil
		}
		v2 := v1.Minio
		if v2 == nil {
			return nil
		}
		v3 := v2.RootPassword
		return v3
	default:
		return nil
	}
}

// SetSecret sets a secret by name. Returns ErrSecretNotFound if the secret does not exist
func (m *GlobalConfig) SetSecret(name string, value *wrappers.StringValue) error {
	switch name {
	case "es_password":
		v0 := &m.V1
		if *v0 == nil {
			*v0 = &V1{}
		}
		v1 := &(*v0).External
		if *v1 == nil {
			*v1 = &External{}
		}
		v2 := &(*v1).Elasticsearch
		if *v2 == nil {
			*v2 = &External_Elasticsearch{}
		}
		v3 := &(*v2).Auth
		if *v3 == nil {
			*v3 = &External_Elasticsearch_Authentication{}
		}
		v4 := &(*v3).BasicAuth
		if *v4 == nil {
			*v4 = &External_Elasticsearch_Authentication_BasicAuth{}
		}
		v5 := &(*v4).Password
		if *v5 == nil {
			*v5 = &wrapperspb.StringValue{}
		}
		*v5 = value
	case "pg_superuser_password":
		v0 := &m.V1
		if *v0 == nil {
			*v0 = &V1{}
		}
		v1 := &(*v0).External
		if *v1 == nil {
			*v1 = &External{}
		}
		v2 := &(*v1).Postgresql
		if *v2 == nil {
			*v2 = &External_Postgresql{}
		}
		v3 := &(*v2).Auth
		if *v3 == nil {
			*v3 = &External_Postgresql_Authentication{}
		}
		v4 := &(*v3).Password
		if *v4 == nil {
			*v4 = &External_Postgresql_Authentication_PasswordAuthentication{}
		}
		v5 := &(*v4).Superuser
		if *v5 == nil {
			*v5 = &External_Postgresql_Authentication_PasswordAuthentication_SuperUser{}
		}
		v6 := &(*v5).Password
		if *v6 == nil {
			*v6 = &wrapperspb.StringValue{}
		}
		*v6 = value
	case "pg_dbuser_password":
		v0 := &m.V1
		if *v0 == nil {
			*v0 = &V1{}
		}
		v1 := &(*v0).External
		if *v1 == nil {
			*v1 = &External{}
		}
		v2 := &(*v1).Postgresql
		if *v2 == nil {
			*v2 = &External_Postgresql{}
		}
		v3 := &(*v2).Auth
		if *v3 == nil {
			*v3 = &External_Postgresql_Authentication{}
		}
		v4 := &(*v3).Password
		if *v4 == nil {
			*v4 = &External_Postgresql_Authentication_PasswordAuthentication{}
		}
		v5 := &(*v4).Dbuser
		if *v5 == nil {
			*v5 = &External_Postgresql_Authentication_PasswordAuthentication_DBUser{}
		}
		v6 := &(*v5).Password
		if *v6 == nil {
			*v6 = &wrapperspb.StringValue{}
		}
		*v6 = value
	case "os_password":
		v0 := &m.V1
		if *v0 == nil {
			*v0 = &V1{}
		}
		v1 := &(*v0).External
		if *v1 == nil {
			*v1 = &External{}
		}
		v2 := &(*v1).Opensearch
		if *v2 == nil {
			*v2 = &External_Opensearch{}
		}
		v3 := &(*v2).Auth
		if *v3 == nil {
			*v3 = &External_Opensearch_Authentication{}
		}
		v4 := &(*v3).BasicAuth
		if *v4 == nil {
			*v4 = &External_Opensearch_Authentication_BasicAuth{}
		}
		v5 := &(*v4).Password
		if *v5 == nil {
			*v5 = &wrapperspb.StringValue{}
		}
		*v5 = value
	case "lcr_minio_password":
		v0 := &m.V1
		if *v0 == nil {
			*v0 = &V1{}
		}
		v1 := &(*v0).External
		if *v1 == nil {
			*v1 = &External{}
		}
		v2 := &(*v1).Minio
		if *v2 == nil {
			*v2 = &External_Minio{}
		}
		v3 := &(*v2).RootPassword
		if *v3 == nil {
			*v3 = &wrapperspb.StringValue{}
		}
		*v3 = value
	default:
		return a2conf.ErrSecretNotFound
	}
	return nil
}
