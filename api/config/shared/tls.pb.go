// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.0
// source: config/shared/tls.proto

package shared

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLSCredentials struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RootCertContents string                 `protobuf:"bytes,1,opt,name=root_cert_contents,json=rootCertContents,proto3" json:"root_cert_contents,omitempty" toml:"root_cert_contents,omitempty" mapstructure:"root_cert_contents,omitempty"`
	KeyContents      string                 `protobuf:"bytes,2,opt,name=key_contents,json=keyContents,proto3" json:"key_contents,omitempty" toml:"key_contents,omitempty" mapstructure:"key_contents,omitempty"`
	CertContents     string                 `protobuf:"bytes,3,opt,name=cert_contents,json=certContents,proto3" json:"cert_contents,omitempty" toml:"cert_contents,omitempty" mapstructure:"cert_contents,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TLSCredentials) Reset() {
	*x = TLSCredentials{}
	mi := &file_config_shared_tls_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCredentials) ProtoMessage() {}

func (x *TLSCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_tls_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCredentials.ProtoReflect.Descriptor instead.
func (*TLSCredentials) Descriptor() ([]byte, []int) {
	return file_config_shared_tls_proto_rawDescGZIP(), []int{0}
}

func (x *TLSCredentials) GetRootCertContents() string {
	if x != nil {
		return x.RootCertContents
	}
	return ""
}

func (x *TLSCredentials) GetKeyContents() string {
	if x != nil {
		return x.KeyContents
	}
	return ""
}

func (x *TLSCredentials) GetCertContents() string {
	if x != nil {
		return x.CertContents
	}
	return ""
}

type FrontendTLSCredential struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerName    string                 `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty" toml:"server_name,omitempty" mapstructure:"server_name,omitempty"`
	Cert          string                 `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty" toml:"cert,omitempty" mapstructure:"cert,omitempty"` // contents
	CertPath      string                 `protobuf:"bytes,3,opt,name=cert_path,json=certPath,proto3" json:"cert_path,omitempty" toml:"cert_path,omitempty" mapstructure:"cert_path,omitempty"`
	Key           string                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty" toml:"key,omitempty" mapstructure:"key,omitempty"` //contents
	KeyPath       string                 `protobuf:"bytes,5,opt,name=key_path,json=keyPath,proto3" json:"key_path,omitempty" toml:"key_path,omitempty" mapstructure:"key_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrontendTLSCredential) Reset() {
	*x = FrontendTLSCredential{}
	mi := &file_config_shared_tls_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrontendTLSCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrontendTLSCredential) ProtoMessage() {}

func (x *FrontendTLSCredential) ProtoReflect() protoreflect.Message {
	mi := &file_config_shared_tls_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrontendTLSCredential.ProtoReflect.Descriptor instead.
func (*FrontendTLSCredential) Descriptor() ([]byte, []int) {
	return file_config_shared_tls_proto_rawDescGZIP(), []int{1}
}

func (x *FrontendTLSCredential) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *FrontendTLSCredential) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *FrontendTLSCredential) GetCertPath() string {
	if x != nil {
		return x.CertPath
	}
	return ""
}

func (x *FrontendTLSCredential) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FrontendTLSCredential) GetKeyPath() string {
	if x != nil {
		return x.KeyPath
	}
	return ""
}

var File_config_shared_tls_proto protoreflect.FileDescriptor

const file_config_shared_tls_proto_rawDesc = "" +
	"\n" +
	"\x17config/shared/tls.proto\x12\x1achef.automate.infra.config\"\x86\x01\n" +
	"\x0eTLSCredentials\x12,\n" +
	"\x12root_cert_contents\x18\x01 \x01(\tR\x10rootCertContents\x12!\n" +
	"\fkey_contents\x18\x02 \x01(\tR\vkeyContents\x12#\n" +
	"\rcert_contents\x18\x03 \x01(\tR\fcertContents\"\x96\x01\n" +
	"\x15FrontendTLSCredential\x12\x1f\n" +
	"\vserver_name\x18\x01 \x01(\tR\n" +
	"serverName\x12\x12\n" +
	"\x04cert\x18\x02 \x01(\tR\x04cert\x12\x1b\n" +
	"\tcert_path\x18\x03 \x01(\tR\bcertPath\x12\x10\n" +
	"\x03key\x18\x04 \x01(\tR\x03key\x12\x19\n" +
	"\bkey_path\x18\x05 \x01(\tR\akeyPathB,Z*github.com/chef/automate/api/config/sharedb\x06proto3"

var (
	file_config_shared_tls_proto_rawDescOnce sync.Once
	file_config_shared_tls_proto_rawDescData []byte
)

func file_config_shared_tls_proto_rawDescGZIP() []byte {
	file_config_shared_tls_proto_rawDescOnce.Do(func() {
		file_config_shared_tls_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_shared_tls_proto_rawDesc), len(file_config_shared_tls_proto_rawDesc)))
	})
	return file_config_shared_tls_proto_rawDescData
}

var file_config_shared_tls_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_config_shared_tls_proto_goTypes = []any{
	(*TLSCredentials)(nil),        // 0: chef.automate.infra.config.TLSCredentials
	(*FrontendTLSCredential)(nil), // 1: chef.automate.infra.config.FrontendTLSCredential
}
var file_config_shared_tls_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_config_shared_tls_proto_init() }
func file_config_shared_tls_proto_init() {
	if File_config_shared_tls_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_shared_tls_proto_rawDesc), len(file_config_shared_tls_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_shared_tls_proto_goTypes,
		DependencyIndexes: file_config_shared_tls_proto_depIdxs,
		MessageInfos:      file_config_shared_tls_proto_msgTypes,
	}.Build()
	File_config_shared_tls_proto = out.File
	file_config_shared_tls_proto_goTypes = nil
	file_config_shared_tls_proto_depIdxs = nil
}
