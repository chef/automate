// -*- mode: protobuf; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*-

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: config/elasticsearch/config_request.proto

package es

import (
	shared "github.com/chef/automate/api/config/shared"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-a2-config/api/a2conf"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1 *ConfigRequest_V1 `protobuf:"bytes,3,opt,name=v1,proto3" json:"v1,omitempty" toml:"v1,omitempty" mapstructure:"v1,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigRequest) GetV1() *ConfigRequest_V1 {
	if x != nil {
		return x.V1
	}
	return nil
}

type ConfigRequest_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys *ConfigRequest_V1_System  `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty" toml:"sys,omitempty" mapstructure:"sys,omitempty"`
	Svc *ConfigRequest_V1_Service `protobuf:"bytes,2,opt,name=svc,proto3" json:"svc,omitempty" toml:"svc,omitempty" mapstructure:"svc,omitempty"`
}

func (x *ConfigRequest_V1) Reset() {
	*x = ConfigRequest_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1) ProtoMessage() {}

func (x *ConfigRequest_V1) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConfigRequest_V1) GetSys() *ConfigRequest_V1_System {
	if x != nil {
		return x.Sys
	}
	return nil
}

func (x *ConfigRequest_V1) GetSvc() *ConfigRequest_V1_Service {
	if x != nil {
		return x.Svc
	}
	return nil
}

type ConfigRequest_V1_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxy      *ConfigRequest_V1_ProxyConfig `protobuf:"bytes,2,opt,name=proxy,proto3" json:"proxy,omitempty" toml:"proxy,omitempty" mapstructure:"proxy,omitempty"`
	Cluster    *ConfigRequest_V1_Cluster     `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty" toml:"cluster,omitempty" mapstructure:"cluster,omitempty"`
	Node       *ConfigRequest_V1_Node        `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty" toml:"node,omitempty" mapstructure:"node,omitempty"`
	Path       *ConfigRequest_V1_Path        `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty" toml:"path,omitempty" mapstructure:"path,omitempty"`
	Indices    *ConfigRequest_V1_Indices     `protobuf:"bytes,6,opt,name=indices,proto3" json:"indices,omitempty" toml:"indices,omitempty" mapstructure:"indices,omitempty"`
	Bootstrap  *ConfigRequest_V1_Bootstrap   `protobuf:"bytes,7,opt,name=bootstrap,proto3" json:"bootstrap,omitempty" toml:"bootstrap,omitempty" mapstructure:"bootstrap,omitempty"`
	Network    *ConfigRequest_V1_Network     `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty" toml:"network,omitempty" mapstructure:"network,omitempty"`
	Transport  *ConfigRequest_V1_Transport   `protobuf:"bytes,9,opt,name=transport,proto3" json:"transport,omitempty" toml:"transport,omitempty" mapstructure:"transport,omitempty"`
	Discovery  *ConfigRequest_V1_Discovery   `protobuf:"bytes,10,opt,name=discovery,proto3" json:"discovery,omitempty" toml:"discovery,omitempty" mapstructure:"discovery,omitempty"`
	Gateway    *ConfigRequest_V1_Gateway     `protobuf:"bytes,11,opt,name=gateway,proto3" json:"gateway,omitempty" toml:"gateway,omitempty" mapstructure:"gateway,omitempty"`
	Action     *ConfigRequest_V1_Action      `protobuf:"bytes,12,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty" mapstructure:"action,omitempty"`
	Logger     *ConfigRequest_V1_Logger      `protobuf:"bytes,13,opt,name=logger,proto3" json:"logger,omitempty" toml:"logger,omitempty" mapstructure:"logger,omitempty"`
	Plugins    *ConfigRequest_V1_Plugins     `protobuf:"bytes,14,opt,name=plugins,proto3" json:"plugins,omitempty" toml:"plugins,omitempty" mapstructure:"plugins,omitempty"`
	Runtime    *ConfigRequest_V1_Runtime     `protobuf:"bytes,15,opt,name=runtime,proto3" json:"runtime,omitempty" toml:"runtime,omitempty" mapstructure:"runtime,omitempty"`
	S3         *ConfigRequest_V1_S3          `protobuf:"bytes,16,opt,name=s3,proto3" json:"s3,omitempty" toml:"s3,omitempty" mapstructure:"s3,omitempty"`
	Tls        *shared.TLSCredentials        `protobuf:"bytes,17,opt,name=tls,proto3" json:"tls,omitempty" toml:"tls,omitempty" mapstructure:"tls,omitempty"`
	Deprecated *ConfigRequest_V1_Deprecated  `protobuf:"bytes,18,opt,name=deprecated,proto3" json:"deprecated,omitempty" toml:"deprecated,omitempty" mapstructure:"deprecated,omitempty"`
	Index      *ConfigRequest_V1_Index       `protobuf:"bytes,20,opt,name=index,proto3" json:"index,omitempty" toml:"index,omitempty" mapstructure:"index,omitempty"`
	Disable    *wrapperspb.BoolValue         `protobuf:"bytes,19,opt,name=disable,proto3" json:"disable,omitempty" toml:"disable,omitempty" mapstructure:"disable,omitempty"` // If set to true, automate-elasticsearch will noop. Derived from the global config
}

func (x *ConfigRequest_V1_System) Reset() {
	*x = ConfigRequest_V1_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System) ProtoMessage() {}

func (x *ConfigRequest_V1_System) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ConfigRequest_V1_System) GetProxy() *ConfigRequest_V1_ProxyConfig {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetCluster() *ConfigRequest_V1_Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetNode() *ConfigRequest_V1_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetPath() *ConfigRequest_V1_Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetIndices() *ConfigRequest_V1_Indices {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetBootstrap() *ConfigRequest_V1_Bootstrap {
	if x != nil {
		return x.Bootstrap
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetNetwork() *ConfigRequest_V1_Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetTransport() *ConfigRequest_V1_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetDiscovery() *ConfigRequest_V1_Discovery {
	if x != nil {
		return x.Discovery
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetGateway() *ConfigRequest_V1_Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetAction() *ConfigRequest_V1_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetLogger() *ConfigRequest_V1_Logger {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetPlugins() *ConfigRequest_V1_Plugins {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetRuntime() *ConfigRequest_V1_Runtime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetS3() *ConfigRequest_V1_S3 {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetTls() *shared.TLSCredentials {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetDeprecated() *ConfigRequest_V1_Deprecated {
	if x != nil {
		return x.Deprecated
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetIndex() *ConfigRequest_V1_Index {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetDisable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Disable
	}
	return nil
}

type ConfigRequest_V1_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest_V1_Service) Reset() {
	*x = ConfigRequest_V1_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Service) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 1}
}

type ConfigRequest_V1_ProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"`
	Port     *wrapperspb.Int32Value    `protobuf:"bytes,7,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
	User     *wrapperspb.StringValue   `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty" toml:"user,omitempty" mapstructure:"user,omitempty"`
	Password *wrapperspb.StringValue   `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty" toml:"password,omitempty" mapstructure:"password,omitempty"`
	NoProxy  []*wrapperspb.StringValue `protobuf:"bytes,10,rep,name=no_proxy,json=noProxy,proto3" json:"no_proxy,omitempty" toml:"no_proxy,omitempty" mapstructure:"no_proxy,omitempty"`
}

func (x *ConfigRequest_V1_ProxyConfig) Reset() {
	*x = ConfigRequest_V1_ProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_ProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_ProxyConfig) ProtoMessage() {}

func (x *ConfigRequest_V1_ProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_ProxyConfig.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_ProxyConfig) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *ConfigRequest_V1_ProxyConfig) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ConfigRequest_V1_ProxyConfig) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *ConfigRequest_V1_ProxyConfig) GetUser() *wrapperspb.StringValue {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ConfigRequest_V1_ProxyConfig) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *ConfigRequest_V1_ProxyConfig) GetNoProxy() []*wrapperspb.StringValue {
	if x != nil {
		return x.NoProxy
	}
	return nil
}

type ConfigRequest_V1_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	MaxShardsPerNode *wrapperspb.Int32Value    `protobuf:"bytes,4,opt,name=max_shards_per_node,json=maxShardsPerNode,proto3" json:"max_shards_per_node,omitempty" toml:"max_shards_per_node,omitempty" mapstructure:"max_shards_per_node,omitempty"`
	Routing          *ConfigRequest_V1_Routing `protobuf:"bytes,2,opt,name=routing,proto3" json:"routing,omitempty" toml:"routing,omitempty" mapstructure:"routing,omitempty"`
}

func (x *ConfigRequest_V1_Cluster) Reset() {
	*x = ConfigRequest_V1_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Cluster) ProtoMessage() {}

func (x *ConfigRequest_V1_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Cluster.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Cluster) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *ConfigRequest_V1_Cluster) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConfigRequest_V1_Cluster) GetMaxShardsPerNode() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxShardsPerNode
	}
	return nil
}

func (x *ConfigRequest_V1_Cluster) GetRouting() *ConfigRequest_V1_Routing {
	if x != nil {
		return x.Routing
	}
	return nil
}

type ConfigRequest_V1_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	RackId               *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=rack_id,json=rackId,proto3" json:"rack_id,omitempty" toml:"rack_id,omitempty" mapstructure:"rack_id,omitempty"`
	Zone                 *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone,omitempty" toml:"zone,omitempty" mapstructure:"zone,omitempty"`
	MaxLocalStorageNodes *wrapperspb.Int32Value  `protobuf:"bytes,10,opt,name=max_local_storage_nodes,json=maxLocalStorageNodes,proto3" json:"max_local_storage_nodes,omitempty" toml:"max_local_storage_nodes,omitempty" mapstructure:"max_local_storage_nodes,omitempty"`
	Master               *wrapperspb.BoolValue   `protobuf:"bytes,11,opt,name=master,proto3" json:"master,omitempty" toml:"master,omitempty" mapstructure:"master,omitempty"`
	Data                 *wrapperspb.BoolValue   `protobuf:"bytes,12,opt,name=data,proto3" json:"data,omitempty" toml:"data,omitempty" mapstructure:"data,omitempty"`
}

func (x *ConfigRequest_V1_Node) Reset() {
	*x = ConfigRequest_V1_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Node) ProtoMessage() {}

func (x *ConfigRequest_V1_Node) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Node.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Node) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *ConfigRequest_V1_Node) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConfigRequest_V1_Node) GetRackId() *wrapperspb.StringValue {
	if x != nil {
		return x.RackId
	}
	return nil
}

func (x *ConfigRequest_V1_Node) GetZone() *wrapperspb.StringValue {
	if x != nil {
		return x.Zone
	}
	return nil
}

func (x *ConfigRequest_V1_Node) GetMaxLocalStorageNodes() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxLocalStorageNodes
	}
	return nil
}

func (x *ConfigRequest_V1_Node) GetMaster() *wrapperspb.BoolValue {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *ConfigRequest_V1_Node) GetData() *wrapperspb.BoolValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConfigRequest_V1_Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty" toml:"data,omitempty" mapstructure:"data,omitempty"`
	Logs *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=logs,proto3" json:"logs,omitempty" toml:"logs,omitempty" mapstructure:"logs,omitempty"`
	Repo *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=repo,proto3" json:"repo,omitempty" toml:"repo,omitempty" mapstructure:"repo,omitempty"`
}

func (x *ConfigRequest_V1_Path) Reset() {
	*x = ConfigRequest_V1_Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Path) ProtoMessage() {}

func (x *ConfigRequest_V1_Path) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Path.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Path) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *ConfigRequest_V1_Path) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConfigRequest_V1_Path) GetLogs() *wrapperspb.StringValue {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ConfigRequest_V1_Path) GetRepo() *wrapperspb.StringValue {
	if x != nil {
		return x.Repo
	}
	return nil
}

type ConfigRequest_V1_Indices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recovery  *ConfigRequest_V1_Recovery  `protobuf:"bytes,1,opt,name=recovery,proto3" json:"recovery,omitempty" toml:"recovery,omitempty" mapstructure:"recovery,omitempty"`
	Fielddata *ConfigRequest_V1_Fielddata `protobuf:"bytes,2,opt,name=fielddata,proto3" json:"fielddata,omitempty" toml:"fielddata,omitempty" mapstructure:"fielddata,omitempty"`
	Breaker   *ConfigRequest_V1_Breaker   `protobuf:"bytes,3,opt,name=breaker,proto3" json:"breaker,omitempty" toml:"breaker,omitempty" mapstructure:"breaker,omitempty"`
}

func (x *ConfigRequest_V1_Indices) Reset() {
	*x = ConfigRequest_V1_Indices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Indices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Indices) ProtoMessage() {}

func (x *ConfigRequest_V1_Indices) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Indices.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Indices) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *ConfigRequest_V1_Indices) GetRecovery() *ConfigRequest_V1_Recovery {
	if x != nil {
		return x.Recovery
	}
	return nil
}

func (x *ConfigRequest_V1_Indices) GetFielddata() *ConfigRequest_V1_Fielddata {
	if x != nil {
		return x.Fielddata
	}
	return nil
}

func (x *ConfigRequest_V1_Indices) GetBreaker() *ConfigRequest_V1_Breaker {
	if x != nil {
		return x.Breaker
	}
	return nil
}

type ConfigRequest_V1_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfReplicas *wrapperspb.Int32Value  `protobuf:"bytes,1,opt,name=number_of_replicas,json=numberOfReplicas,proto3" json:"number_of_replicas,omitempty" toml:"number_of_replicas,omitempty" mapstructure:"number_of_replicas,omitempty"`
	RefreshInterval  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty" toml:"refresh_interval,omitempty" mapstructure:"refresh_interval,omitempty"`
}

func (x *ConfigRequest_V1_Index) Reset() {
	*x = ConfigRequest_V1_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Index) ProtoMessage() {}

func (x *ConfigRequest_V1_Index) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Index.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Index) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 7}
}

func (x *ConfigRequest_V1_Index) GetNumberOfReplicas() *wrapperspb.Int32Value {
	if x != nil {
		return x.NumberOfReplicas
	}
	return nil
}

func (x *ConfigRequest_V1_Index) GetRefreshInterval() *wrapperspb.StringValue {
	if x != nil {
		return x.RefreshInterval
	}
	return nil
}

type ConfigRequest_V1_Bootstrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryLock *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=memory_lock,json=memoryLock,proto3" json:"memory_lock,omitempty" toml:"memory_lock,omitempty" mapstructure:"memory_lock,omitempty"`
}

func (x *ConfigRequest_V1_Bootstrap) Reset() {
	*x = ConfigRequest_V1_Bootstrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Bootstrap) ProtoMessage() {}

func (x *ConfigRequest_V1_Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Bootstrap.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Bootstrap) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 8}
}

func (x *ConfigRequest_V1_Bootstrap) GetMemoryLock() *wrapperspb.BoolValue {
	if x != nil {
		return x.MemoryLock
	}
	return nil
}

type ConfigRequest_V1_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"`
	Port *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
}

func (x *ConfigRequest_V1_Network) Reset() {
	*x = ConfigRequest_V1_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Network) ProtoMessage() {}

func (x *ConfigRequest_V1_Network) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Network.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Network) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 9}
}

func (x *ConfigRequest_V1_Network) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ConfigRequest_V1_Network) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

type ConfigRequest_V1_Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the transport port is actually a range of ports
	// e.g. 9300-9400
	Port *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
}

func (x *ConfigRequest_V1_Transport) Reset() {
	*x = ConfigRequest_V1_Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Transport) ProtoMessage() {}

func (x *ConfigRequest_V1_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Transport.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Transport) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 10}
}

func (x *ConfigRequest_V1_Transport) GetPort() *wrapperspb.StringValue {
	if x != nil {
		return x.Port
	}
	return nil
}

type ConfigRequest_V1_Discovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingUnicastHosts   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=ping_unicast_hosts,json=pingUnicastHosts,proto3" json:"ping_unicast_hosts,omitempty" toml:"ping_unicast_hosts,omitempty" mapstructure:"ping_unicast_hosts,omitempty"`
	MinimumMasterNodes *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=minimum_master_nodes,json=minimumMasterNodes,proto3" json:"minimum_master_nodes,omitempty" toml:"minimum_master_nodes,omitempty" mapstructure:"minimum_master_nodes,omitempty"`
	ZenFdPingTimeout   *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=zen_fd_ping_timeout,json=zenFdPingTimeout,proto3" json:"zen_fd_ping_timeout,omitempty" toml:"zen_fd_ping_timeout,omitempty" mapstructure:"zen_fd_ping_timeout,omitempty"`
}

func (x *ConfigRequest_V1_Discovery) Reset() {
	*x = ConfigRequest_V1_Discovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Discovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Discovery) ProtoMessage() {}

func (x *ConfigRequest_V1_Discovery) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Discovery.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Discovery) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 11}
}

func (x *ConfigRequest_V1_Discovery) GetPingUnicastHosts() *wrapperspb.StringValue {
	if x != nil {
		return x.PingUnicastHosts
	}
	return nil
}

func (x *ConfigRequest_V1_Discovery) GetMinimumMasterNodes() *wrapperspb.Int32Value {
	if x != nil {
		return x.MinimumMasterNodes
	}
	return nil
}

func (x *ConfigRequest_V1_Discovery) GetZenFdPingTimeout() *wrapperspb.StringValue {
	if x != nil {
		return x.ZenFdPingTimeout
	}
	return nil
}

type ConfigRequest_V1_Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecoverAfterNodes   *wrapperspb.Int32Value  `protobuf:"bytes,1,opt,name=recover_after_nodes,json=recoverAfterNodes,proto3" json:"recover_after_nodes,omitempty" toml:"recover_after_nodes,omitempty" mapstructure:"recover_after_nodes,omitempty"`
	ExpectedNodes       *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=expected_nodes,json=expectedNodes,proto3" json:"expected_nodes,omitempty" toml:"expected_nodes,omitempty" mapstructure:"expected_nodes,omitempty"`
	ExpectedMasterNodes *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=expected_master_nodes,json=expectedMasterNodes,proto3" json:"expected_master_nodes,omitempty" toml:"expected_master_nodes,omitempty" mapstructure:"expected_master_nodes,omitempty"`
	ExpectedDataNodes   *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=expected_data_nodes,json=expectedDataNodes,proto3" json:"expected_data_nodes,omitempty" toml:"expected_data_nodes,omitempty" mapstructure:"expected_data_nodes,omitempty"`
	RecoverAfterTime    *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=recover_after_time,json=recoverAfterTime,proto3" json:"recover_after_time,omitempty" toml:"recover_after_time,omitempty" mapstructure:"recover_after_time,omitempty"`
}

func (x *ConfigRequest_V1_Gateway) Reset() {
	*x = ConfigRequest_V1_Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Gateway) ProtoMessage() {}

func (x *ConfigRequest_V1_Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Gateway.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Gateway) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 12}
}

func (x *ConfigRequest_V1_Gateway) GetRecoverAfterNodes() *wrapperspb.Int32Value {
	if x != nil {
		return x.RecoverAfterNodes
	}
	return nil
}

func (x *ConfigRequest_V1_Gateway) GetExpectedNodes() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExpectedNodes
	}
	return nil
}

func (x *ConfigRequest_V1_Gateway) GetExpectedMasterNodes() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExpectedMasterNodes
	}
	return nil
}

func (x *ConfigRequest_V1_Gateway) GetExpectedDataNodes() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExpectedDataNodes
	}
	return nil
}

func (x *ConfigRequest_V1_Gateway) GetRecoverAfterTime() *wrapperspb.StringValue {
	if x != nil {
		return x.RecoverAfterTime
	}
	return nil
}

type ConfigRequest_V1_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestructiveRequiresName *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=destructive_requires_name,json=destructiveRequiresName,proto3" json:"destructive_requires_name,omitempty" toml:"destructive_requires_name,omitempty" mapstructure:"destructive_requires_name,omitempty"`
}

func (x *ConfigRequest_V1_Action) Reset() {
	*x = ConfigRequest_V1_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Action) ProtoMessage() {}

func (x *ConfigRequest_V1_Action) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Action.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Action) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 13}
}

func (x *ConfigRequest_V1_Action) GetDestructiveRequiresName() *wrapperspb.BoolValue {
	if x != nil {
		return x.DestructiveRequiresName
	}
	return nil
}

type ConfigRequest_V1_Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty" toml:"level,omitempty" mapstructure:"level,omitempty"`
}

func (x *ConfigRequest_V1_Logger) Reset() {
	*x = ConfigRequest_V1_Logger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Logger) ProtoMessage() {}

func (x *ConfigRequest_V1_Logger) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Logger.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Logger) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 14}
}

func (x *ConfigRequest_V1_Logger) GetLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.Level
	}
	return nil
}

type ConfigRequest_V1_Plugins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudAwsSigner *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=cloud_aws_signer,json=cloudAwsSigner,proto3" json:"cloud_aws_signer,omitempty" toml:"cloud_aws_signer,omitempty" mapstructure:"cloud_aws_signer,omitempty"`
}

func (x *ConfigRequest_V1_Plugins) Reset() {
	*x = ConfigRequest_V1_Plugins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Plugins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Plugins) ProtoMessage() {}

func (x *ConfigRequest_V1_Plugins) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Plugins.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Plugins) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 15}
}

func (x *ConfigRequest_V1_Plugins) GetCloudAwsSigner() *wrapperspb.StringValue {
	if x != nil {
		return x.CloudAwsSigner
	}
	return nil
}

type ConfigRequest_V1_Runtime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxOpenFiles       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=max_open_files,json=maxOpenFiles,proto3" json:"max_open_files,omitempty" toml:"max_open_files,omitempty" mapstructure:"max_open_files,omitempty"`
	MaxLockedMemory    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=max_locked_memory,json=maxLockedMemory,proto3" json:"max_locked_memory,omitempty" toml:"max_locked_memory,omitempty" mapstructure:"max_locked_memory,omitempty"`
	EsStartupSleepTime *wrapperspb.Int32Value  `protobuf:"bytes,8,opt,name=es_startup_sleep_time,json=esStartupSleepTime,proto3" json:"es_startup_sleep_time,omitempty" toml:"es_startup_sleep_time,omitempty" mapstructure:"es_startup_sleep_time,omitempty"`
	EsJavaOpts         *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=es_java_opts,json=esJavaOpts,proto3" json:"es_java_opts,omitempty" toml:"es_java_opts,omitempty" mapstructure:"es_java_opts,omitempty"`
	Heapsize           *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=heapsize,proto3" json:"heapsize,omitempty" toml:"heapsize,omitempty" mapstructure:"heapsize,omitempty"`
}

func (x *ConfigRequest_V1_Runtime) Reset() {
	*x = ConfigRequest_V1_Runtime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Runtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Runtime) ProtoMessage() {}

func (x *ConfigRequest_V1_Runtime) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Runtime.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Runtime) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 16}
}

func (x *ConfigRequest_V1_Runtime) GetMaxOpenFiles() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxOpenFiles
	}
	return nil
}

func (x *ConfigRequest_V1_Runtime) GetMaxLockedMemory() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxLockedMemory
	}
	return nil
}

func (x *ConfigRequest_V1_Runtime) GetEsStartupSleepTime() *wrapperspb.Int32Value {
	if x != nil {
		return x.EsStartupSleepTime
	}
	return nil
}

func (x *ConfigRequest_V1_Runtime) GetEsJavaOpts() *wrapperspb.StringValue {
	if x != nil {
		return x.EsJavaOpts
	}
	return nil
}

func (x *ConfigRequest_V1_Runtime) GetHeapsize() *wrapperspb.StringValue {
	if x != nil {
		return x.Heapsize
	}
	return nil
}

type ConfigRequest_V1_Routing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allocation *ConfigRequest_V1_Allocation `protobuf:"bytes,1,opt,name=allocation,proto3" json:"allocation,omitempty" toml:"allocation,omitempty" mapstructure:"allocation,omitempty"`
}

func (x *ConfigRequest_V1_Routing) Reset() {
	*x = ConfigRequest_V1_Routing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Routing) ProtoMessage() {}

func (x *ConfigRequest_V1_Routing) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Routing.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Routing) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 17}
}

func (x *ConfigRequest_V1_Routing) GetAllocation() *ConfigRequest_V1_Allocation {
	if x != nil {
		return x.Allocation
	}
	return nil
}

type ConfigRequest_V1_Allocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeConcurrentRecoveries       *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=node_concurrent_recoveries,json=nodeConcurrentRecoveries,proto3" json:"node_concurrent_recoveries,omitempty" toml:"node_concurrent_recoveries,omitempty" mapstructure:"node_concurrent_recoveries,omitempty"`
	NodeInitialPrimariesRecoveries *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=node_initial_primaries_recoveries,json=nodeInitialPrimariesRecoveries,proto3" json:"node_initial_primaries_recoveries,omitempty" toml:"node_initial_primaries_recoveries,omitempty" mapstructure:"node_initial_primaries_recoveries,omitempty"`
	SameShardHost                  *wrapperspb.BoolValue   `protobuf:"bytes,7,opt,name=same_shard_host,json=sameShardHost,proto3" json:"same_shard_host,omitempty" toml:"same_shard_host,omitempty" mapstructure:"same_shard_host,omitempty"`
	AwarenessAttributes            *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=awareness_attributes,json=awarenessAttributes,proto3" json:"awareness_attributes,omitempty" toml:"awareness_attributes,omitempty" mapstructure:"awareness_attributes,omitempty"`
}

func (x *ConfigRequest_V1_Allocation) Reset() {
	*x = ConfigRequest_V1_Allocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Allocation) ProtoMessage() {}

func (x *ConfigRequest_V1_Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Allocation.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Allocation) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 18}
}

func (x *ConfigRequest_V1_Allocation) GetNodeConcurrentRecoveries() *wrapperspb.Int32Value {
	if x != nil {
		return x.NodeConcurrentRecoveries
	}
	return nil
}

func (x *ConfigRequest_V1_Allocation) GetNodeInitialPrimariesRecoveries() *wrapperspb.Int32Value {
	if x != nil {
		return x.NodeInitialPrimariesRecoveries
	}
	return nil
}

func (x *ConfigRequest_V1_Allocation) GetSameShardHost() *wrapperspb.BoolValue {
	if x != nil {
		return x.SameShardHost
	}
	return nil
}

func (x *ConfigRequest_V1_Allocation) GetAwarenessAttributes() *wrapperspb.StringValue {
	if x != nil {
		return x.AwarenessAttributes
	}
	return nil
}

type ConfigRequest_V1_Recovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxBytesPerSec *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=max_bytes_per_sec,json=maxBytesPerSec,proto3" json:"max_bytes_per_sec,omitempty" toml:"max_bytes_per_sec,omitempty" mapstructure:"max_bytes_per_sec,omitempty"`
}

func (x *ConfigRequest_V1_Recovery) Reset() {
	*x = ConfigRequest_V1_Recovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Recovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Recovery) ProtoMessage() {}

func (x *ConfigRequest_V1_Recovery) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Recovery.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Recovery) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 19}
}

func (x *ConfigRequest_V1_Recovery) GetMaxBytesPerSec() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxBytesPerSec
	}
	return nil
}

type ConfigRequest_V1_Fielddata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheSize *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty" toml:"cache_size,omitempty" mapstructure:"cache_size,omitempty"`
}

func (x *ConfigRequest_V1_Fielddata) Reset() {
	*x = ConfigRequest_V1_Fielddata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Fielddata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Fielddata) ProtoMessage() {}

func (x *ConfigRequest_V1_Fielddata) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Fielddata.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Fielddata) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 20}
}

func (x *ConfigRequest_V1_Fielddata) GetCacheSize() *wrapperspb.StringValue {
	if x != nil {
		return x.CacheSize
	}
	return nil
}

type ConfigRequest_V1_Breaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalLimit        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=total_limit,json=totalLimit,proto3" json:"total_limit,omitempty" toml:"total_limit,omitempty" mapstructure:"total_limit,omitempty"`
	FielddataLimit    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=fielddata_limit,json=fielddataLimit,proto3" json:"fielddata_limit,omitempty" toml:"fielddata_limit,omitempty" mapstructure:"fielddata_limit,omitempty"`
	FielddataOverhead *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=fielddata_overhead,json=fielddataOverhead,proto3" json:"fielddata_overhead,omitempty" toml:"fielddata_overhead,omitempty" mapstructure:"fielddata_overhead,omitempty"`
	RequestLimit      *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=request_limit,json=requestLimit,proto3" json:"request_limit,omitempty" toml:"request_limit,omitempty" mapstructure:"request_limit,omitempty"`
	RequestOverhead   *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=request_overhead,json=requestOverhead,proto3" json:"request_overhead,omitempty" toml:"request_overhead,omitempty" mapstructure:"request_overhead,omitempty"`
}

func (x *ConfigRequest_V1_Breaker) Reset() {
	*x = ConfigRequest_V1_Breaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Breaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Breaker) ProtoMessage() {}

func (x *ConfigRequest_V1_Breaker) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Breaker.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Breaker) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 21}
}

func (x *ConfigRequest_V1_Breaker) GetTotalLimit() *wrapperspb.StringValue {
	if x != nil {
		return x.TotalLimit
	}
	return nil
}

func (x *ConfigRequest_V1_Breaker) GetFielddataLimit() *wrapperspb.StringValue {
	if x != nil {
		return x.FielddataLimit
	}
	return nil
}

func (x *ConfigRequest_V1_Breaker) GetFielddataOverhead() *wrapperspb.StringValue {
	if x != nil {
		return x.FielddataOverhead
	}
	return nil
}

func (x *ConfigRequest_V1_Breaker) GetRequestLimit() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestLimit
	}
	return nil
}

func (x *ConfigRequest_V1_Breaker) GetRequestOverhead() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestOverhead
	}
	return nil
}

type ConfigRequest_V1_S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client *ConfigRequest_V1_S3_Client `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty" toml:"client,omitempty" mapstructure:"client,omitempty"`
}

func (x *ConfigRequest_V1_S3) Reset() {
	*x = ConfigRequest_V1_S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_S3) ProtoMessage() {}

func (x *ConfigRequest_V1_S3) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_S3.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_S3) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 22}
}

func (x *ConfigRequest_V1_S3) GetClient() *ConfigRequest_V1_S3_Client {
	if x != nil {
		return x.Client
	}
	return nil
}

type ConfigRequest_V1_Deprecated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEs *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=external_es,json=externalEs,proto3" json:"external_es,omitempty" toml:"external_es,omitempty" mapstructure:"external_es,omitempty"`
}

func (x *ConfigRequest_V1_Deprecated) Reset() {
	*x = ConfigRequest_V1_Deprecated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Deprecated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Deprecated) ProtoMessage() {}

func (x *ConfigRequest_V1_Deprecated) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Deprecated.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Deprecated) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 23}
}

func (x *ConfigRequest_V1_Deprecated) GetExternalEs() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExternalEs
	}
	return nil
}

type ConfigRequest_V1_S3_Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	ReadTimeout        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty" toml:"read_timeout,omitempty" mapstructure:"read_timeout,omitempty"`
	MaxRetries         *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty" toml:"max_retries,omitempty" mapstructure:"max_retries,omitempty"`
	UseThrottleRetries *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=use_throttle_retries,json=useThrottleRetries,proto3" json:"use_throttle_retries,omitempty" toml:"use_throttle_retries,omitempty" mapstructure:"use_throttle_retries,omitempty"`
}

func (x *ConfigRequest_V1_S3_Client) Reset() {
	*x = ConfigRequest_V1_S3_Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_elasticsearch_config_request_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_S3_Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_S3_Client) ProtoMessage() {}

func (x *ConfigRequest_V1_S3_Client) ProtoReflect() protoreflect.Message {
	mi := &file_config_elasticsearch_config_request_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_S3_Client.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_S3_Client) Descriptor() ([]byte, []int) {
	return file_config_elasticsearch_config_request_proto_rawDescGZIP(), []int{0, 0, 22, 0}
}

func (x *ConfigRequest_V1_S3_Client) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConfigRequest_V1_S3_Client) GetReadTimeout() *wrapperspb.StringValue {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *ConfigRequest_V1_S3_Client) GetMaxRetries() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxRetries
	}
	return nil
}

func (x *ConfigRequest_V1_S3_Client) GetUseThrottleRetries() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseThrottleRetries
	}
	return nil
}

var File_config_elasticsearch_config_request_proto protoreflect.FileDescriptor

var file_config_elasticsearch_config_request_proto_rawDesc = []byte{
	0x0a, 0x29, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x17,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x74, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x61, 0x32, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x32, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x02, 0x76, 0x31,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x52, 0x02, 0x76, 0x31, 0x1a,
	0xfd, 0x30, 0x0a, 0x02, 0x56, 0x31, 0x12, 0x4c, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x03, 0x73, 0x79, 0x73, 0x12, 0x4d, 0x0a, 0x03, 0x73, 0x76, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03,
	0x73, 0x76, 0x63, 0x1a, 0xb7, 0x0c, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x55,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x55, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65,
	0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x55, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x5b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x5b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x5b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x52, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65,
	0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x07,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x02, 0x73, 0x33,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x33, 0x52, 0x02,
	0x73, 0x33, 0x12, 0x3c, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x53,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73,
	0x12, 0x5e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x4f, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0x09, 0x0a,
	0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x9b, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x06, 0x1a, 0xe4, 0x01, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x55, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0xdf, 0x02,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x52, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x07, 0x1a,
	0xa2, 0x01, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x03, 0x1a, 0x97, 0x02, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x58, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x5b, 0x0a, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x07, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65,
	0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x1a, 0x9b,
	0x01, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x4e, 0x0a, 0x09,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0x84, 0x01, 0x0a,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0xc2, 0xf3, 0x18, 0x12, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x10, 0x9d, 0x4f, 0x1a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x5b, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x48, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x16, 0xc2, 0xf3,
	0x18, 0x12, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x9e, 0x4f,
	0x1a, 0x02, 0x65, 0x73, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x1a, 0xf9, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4a,
	0x0a, 0x12, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x7a, 0x65, 0x6e,
	0x5f, 0x66, 0x64, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x7a, 0x65, 0x6e, 0x46, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x04, 0x1a, 0x84, 0x03, 0x0a,
	0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x4b, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x66, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a,
	0x19, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0x42, 0x0a, 0x06, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a,
	0x57, 0x0a, 0x07, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x77, 0x73, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0xe7, 0x02, 0x0a, 0x07, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x65, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x73, 0x5f, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x6f, 0x70,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x73, 0x4a, 0x61, 0x76, 0x61, 0x4f, 0x70,
	0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x06, 0x1a, 0x69, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a,
	0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xea, 0x02,
	0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x1a,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x21, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1e, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x61, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x05, 0x1a, 0x59, 0x0a, 0x08, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0x4e, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0xee, 0x02, 0x0a, 0x07, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x45, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x64, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x76, 0x65, 0x72,
	0x68, 0x65, 0x61, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x06, 0x1a, 0xeb, 0x02, 0x0a, 0x02, 0x53, 0x33, 0x12, 0x55, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x33, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x1a, 0x8d, 0x02, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x75, 0x73, 0x65, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x06, 0x1a, 0x49, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x73, 0x3a,
	0x1c, 0xc2, 0xf3, 0x18, 0x18, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2d,
	0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x03, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3b, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_config_elasticsearch_config_request_proto_rawDescOnce sync.Once
	file_config_elasticsearch_config_request_proto_rawDescData = file_config_elasticsearch_config_request_proto_rawDesc
)

func file_config_elasticsearch_config_request_proto_rawDescGZIP() []byte {
	file_config_elasticsearch_config_request_proto_rawDescOnce.Do(func() {
		file_config_elasticsearch_config_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_elasticsearch_config_request_proto_rawDescData)
	})
	return file_config_elasticsearch_config_request_proto_rawDescData
}

var file_config_elasticsearch_config_request_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_config_elasticsearch_config_request_proto_goTypes = []interface{}{
	(*ConfigRequest)(nil),                // 0: chef.automate.infra.elasticsearch.ConfigRequest
	(*ConfigRequest_V1)(nil),             // 1: chef.automate.infra.elasticsearch.ConfigRequest.V1
	(*ConfigRequest_V1_System)(nil),      // 2: chef.automate.infra.elasticsearch.ConfigRequest.V1.System
	(*ConfigRequest_V1_Service)(nil),     // 3: chef.automate.infra.elasticsearch.ConfigRequest.V1.Service
	(*ConfigRequest_V1_ProxyConfig)(nil), // 4: chef.automate.infra.elasticsearch.ConfigRequest.V1.ProxyConfig
	(*ConfigRequest_V1_Cluster)(nil),     // 5: chef.automate.infra.elasticsearch.ConfigRequest.V1.Cluster
	(*ConfigRequest_V1_Node)(nil),        // 6: chef.automate.infra.elasticsearch.ConfigRequest.V1.Node
	(*ConfigRequest_V1_Path)(nil),        // 7: chef.automate.infra.elasticsearch.ConfigRequest.V1.Path
	(*ConfigRequest_V1_Indices)(nil),     // 8: chef.automate.infra.elasticsearch.ConfigRequest.V1.Indices
	(*ConfigRequest_V1_Index)(nil),       // 9: chef.automate.infra.elasticsearch.ConfigRequest.V1.Index
	(*ConfigRequest_V1_Bootstrap)(nil),   // 10: chef.automate.infra.elasticsearch.ConfigRequest.V1.Bootstrap
	(*ConfigRequest_V1_Network)(nil),     // 11: chef.automate.infra.elasticsearch.ConfigRequest.V1.Network
	(*ConfigRequest_V1_Transport)(nil),   // 12: chef.automate.infra.elasticsearch.ConfigRequest.V1.Transport
	(*ConfigRequest_V1_Discovery)(nil),   // 13: chef.automate.infra.elasticsearch.ConfigRequest.V1.Discovery
	(*ConfigRequest_V1_Gateway)(nil),     // 14: chef.automate.infra.elasticsearch.ConfigRequest.V1.Gateway
	(*ConfigRequest_V1_Action)(nil),      // 15: chef.automate.infra.elasticsearch.ConfigRequest.V1.Action
	(*ConfigRequest_V1_Logger)(nil),      // 16: chef.automate.infra.elasticsearch.ConfigRequest.V1.Logger
	(*ConfigRequest_V1_Plugins)(nil),     // 17: chef.automate.infra.elasticsearch.ConfigRequest.V1.Plugins
	(*ConfigRequest_V1_Runtime)(nil),     // 18: chef.automate.infra.elasticsearch.ConfigRequest.V1.Runtime
	(*ConfigRequest_V1_Routing)(nil),     // 19: chef.automate.infra.elasticsearch.ConfigRequest.V1.Routing
	(*ConfigRequest_V1_Allocation)(nil),  // 20: chef.automate.infra.elasticsearch.ConfigRequest.V1.Allocation
	(*ConfigRequest_V1_Recovery)(nil),    // 21: chef.automate.infra.elasticsearch.ConfigRequest.V1.Recovery
	(*ConfigRequest_V1_Fielddata)(nil),   // 22: chef.automate.infra.elasticsearch.ConfigRequest.V1.Fielddata
	(*ConfigRequest_V1_Breaker)(nil),     // 23: chef.automate.infra.elasticsearch.ConfigRequest.V1.Breaker
	(*ConfigRequest_V1_S3)(nil),          // 24: chef.automate.infra.elasticsearch.ConfigRequest.V1.S3
	(*ConfigRequest_V1_Deprecated)(nil),  // 25: chef.automate.infra.elasticsearch.ConfigRequest.V1.Deprecated
	(*ConfigRequest_V1_S3_Client)(nil),   // 26: chef.automate.infra.elasticsearch.ConfigRequest.V1.S3.Client
	(*shared.TLSCredentials)(nil),        // 27: chef.automate.infra.config.TLSCredentials
	(*wrapperspb.BoolValue)(nil),         // 28: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),       // 29: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),        // 30: google.protobuf.Int32Value
}
var file_config_elasticsearch_config_request_proto_depIdxs = []int32{
	1,  // 0: chef.automate.infra.elasticsearch.ConfigRequest.v1:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1
	2,  // 1: chef.automate.infra.elasticsearch.ConfigRequest.V1.sys:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.System
	3,  // 2: chef.automate.infra.elasticsearch.ConfigRequest.V1.svc:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Service
	4,  // 3: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.proxy:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.ProxyConfig
	5,  // 4: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.cluster:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Cluster
	6,  // 5: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.node:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Node
	7,  // 6: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.path:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Path
	8,  // 7: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.indices:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Indices
	10, // 8: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.bootstrap:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Bootstrap
	11, // 9: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.network:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Network
	12, // 10: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.transport:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Transport
	13, // 11: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.discovery:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Discovery
	14, // 12: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.gateway:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Gateway
	15, // 13: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.action:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Action
	16, // 14: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.logger:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Logger
	17, // 15: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.plugins:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Plugins
	18, // 16: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.runtime:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Runtime
	24, // 17: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.s3:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.S3
	27, // 18: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.tls:type_name -> chef.automate.infra.config.TLSCredentials
	25, // 19: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.deprecated:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Deprecated
	9,  // 20: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.index:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Index
	28, // 21: chef.automate.infra.elasticsearch.ConfigRequest.V1.System.disable:type_name -> google.protobuf.BoolValue
	29, // 22: chef.automate.infra.elasticsearch.ConfigRequest.V1.ProxyConfig.host:type_name -> google.protobuf.StringValue
	30, // 23: chef.automate.infra.elasticsearch.ConfigRequest.V1.ProxyConfig.port:type_name -> google.protobuf.Int32Value
	29, // 24: chef.automate.infra.elasticsearch.ConfigRequest.V1.ProxyConfig.user:type_name -> google.protobuf.StringValue
	29, // 25: chef.automate.infra.elasticsearch.ConfigRequest.V1.ProxyConfig.password:type_name -> google.protobuf.StringValue
	29, // 26: chef.automate.infra.elasticsearch.ConfigRequest.V1.ProxyConfig.no_proxy:type_name -> google.protobuf.StringValue
	29, // 27: chef.automate.infra.elasticsearch.ConfigRequest.V1.Cluster.name:type_name -> google.protobuf.StringValue
	30, // 28: chef.automate.infra.elasticsearch.ConfigRequest.V1.Cluster.max_shards_per_node:type_name -> google.protobuf.Int32Value
	19, // 29: chef.automate.infra.elasticsearch.ConfigRequest.V1.Cluster.routing:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Routing
	29, // 30: chef.automate.infra.elasticsearch.ConfigRequest.V1.Node.name:type_name -> google.protobuf.StringValue
	29, // 31: chef.automate.infra.elasticsearch.ConfigRequest.V1.Node.rack_id:type_name -> google.protobuf.StringValue
	29, // 32: chef.automate.infra.elasticsearch.ConfigRequest.V1.Node.zone:type_name -> google.protobuf.StringValue
	30, // 33: chef.automate.infra.elasticsearch.ConfigRequest.V1.Node.max_local_storage_nodes:type_name -> google.protobuf.Int32Value
	28, // 34: chef.automate.infra.elasticsearch.ConfigRequest.V1.Node.master:type_name -> google.protobuf.BoolValue
	28, // 35: chef.automate.infra.elasticsearch.ConfigRequest.V1.Node.data:type_name -> google.protobuf.BoolValue
	29, // 36: chef.automate.infra.elasticsearch.ConfigRequest.V1.Path.data:type_name -> google.protobuf.StringValue
	29, // 37: chef.automate.infra.elasticsearch.ConfigRequest.V1.Path.logs:type_name -> google.protobuf.StringValue
	29, // 38: chef.automate.infra.elasticsearch.ConfigRequest.V1.Path.repo:type_name -> google.protobuf.StringValue
	21, // 39: chef.automate.infra.elasticsearch.ConfigRequest.V1.Indices.recovery:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Recovery
	22, // 40: chef.automate.infra.elasticsearch.ConfigRequest.V1.Indices.fielddata:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Fielddata
	23, // 41: chef.automate.infra.elasticsearch.ConfigRequest.V1.Indices.breaker:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Breaker
	30, // 42: chef.automate.infra.elasticsearch.ConfigRequest.V1.Index.number_of_replicas:type_name -> google.protobuf.Int32Value
	29, // 43: chef.automate.infra.elasticsearch.ConfigRequest.V1.Index.refresh_interval:type_name -> google.protobuf.StringValue
	28, // 44: chef.automate.infra.elasticsearch.ConfigRequest.V1.Bootstrap.memory_lock:type_name -> google.protobuf.BoolValue
	29, // 45: chef.automate.infra.elasticsearch.ConfigRequest.V1.Network.host:type_name -> google.protobuf.StringValue
	30, // 46: chef.automate.infra.elasticsearch.ConfigRequest.V1.Network.port:type_name -> google.protobuf.Int32Value
	29, // 47: chef.automate.infra.elasticsearch.ConfigRequest.V1.Transport.port:type_name -> google.protobuf.StringValue
	29, // 48: chef.automate.infra.elasticsearch.ConfigRequest.V1.Discovery.ping_unicast_hosts:type_name -> google.protobuf.StringValue
	30, // 49: chef.automate.infra.elasticsearch.ConfigRequest.V1.Discovery.minimum_master_nodes:type_name -> google.protobuf.Int32Value
	29, // 50: chef.automate.infra.elasticsearch.ConfigRequest.V1.Discovery.zen_fd_ping_timeout:type_name -> google.protobuf.StringValue
	30, // 51: chef.automate.infra.elasticsearch.ConfigRequest.V1.Gateway.recover_after_nodes:type_name -> google.protobuf.Int32Value
	30, // 52: chef.automate.infra.elasticsearch.ConfigRequest.V1.Gateway.expected_nodes:type_name -> google.protobuf.Int32Value
	30, // 53: chef.automate.infra.elasticsearch.ConfigRequest.V1.Gateway.expected_master_nodes:type_name -> google.protobuf.Int32Value
	30, // 54: chef.automate.infra.elasticsearch.ConfigRequest.V1.Gateway.expected_data_nodes:type_name -> google.protobuf.Int32Value
	29, // 55: chef.automate.infra.elasticsearch.ConfigRequest.V1.Gateway.recover_after_time:type_name -> google.protobuf.StringValue
	28, // 56: chef.automate.infra.elasticsearch.ConfigRequest.V1.Action.destructive_requires_name:type_name -> google.protobuf.BoolValue
	29, // 57: chef.automate.infra.elasticsearch.ConfigRequest.V1.Logger.level:type_name -> google.protobuf.StringValue
	29, // 58: chef.automate.infra.elasticsearch.ConfigRequest.V1.Plugins.cloud_aws_signer:type_name -> google.protobuf.StringValue
	29, // 59: chef.automate.infra.elasticsearch.ConfigRequest.V1.Runtime.max_open_files:type_name -> google.protobuf.StringValue
	29, // 60: chef.automate.infra.elasticsearch.ConfigRequest.V1.Runtime.max_locked_memory:type_name -> google.protobuf.StringValue
	30, // 61: chef.automate.infra.elasticsearch.ConfigRequest.V1.Runtime.es_startup_sleep_time:type_name -> google.protobuf.Int32Value
	29, // 62: chef.automate.infra.elasticsearch.ConfigRequest.V1.Runtime.es_java_opts:type_name -> google.protobuf.StringValue
	29, // 63: chef.automate.infra.elasticsearch.ConfigRequest.V1.Runtime.heapsize:type_name -> google.protobuf.StringValue
	20, // 64: chef.automate.infra.elasticsearch.ConfigRequest.V1.Routing.allocation:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.Allocation
	30, // 65: chef.automate.infra.elasticsearch.ConfigRequest.V1.Allocation.node_concurrent_recoveries:type_name -> google.protobuf.Int32Value
	30, // 66: chef.automate.infra.elasticsearch.ConfigRequest.V1.Allocation.node_initial_primaries_recoveries:type_name -> google.protobuf.Int32Value
	28, // 67: chef.automate.infra.elasticsearch.ConfigRequest.V1.Allocation.same_shard_host:type_name -> google.protobuf.BoolValue
	29, // 68: chef.automate.infra.elasticsearch.ConfigRequest.V1.Allocation.awareness_attributes:type_name -> google.protobuf.StringValue
	29, // 69: chef.automate.infra.elasticsearch.ConfigRequest.V1.Recovery.max_bytes_per_sec:type_name -> google.protobuf.StringValue
	29, // 70: chef.automate.infra.elasticsearch.ConfigRequest.V1.Fielddata.cache_size:type_name -> google.protobuf.StringValue
	29, // 71: chef.automate.infra.elasticsearch.ConfigRequest.V1.Breaker.total_limit:type_name -> google.protobuf.StringValue
	29, // 72: chef.automate.infra.elasticsearch.ConfigRequest.V1.Breaker.fielddata_limit:type_name -> google.protobuf.StringValue
	29, // 73: chef.automate.infra.elasticsearch.ConfigRequest.V1.Breaker.fielddata_overhead:type_name -> google.protobuf.StringValue
	29, // 74: chef.automate.infra.elasticsearch.ConfigRequest.V1.Breaker.request_limit:type_name -> google.protobuf.StringValue
	29, // 75: chef.automate.infra.elasticsearch.ConfigRequest.V1.Breaker.request_overhead:type_name -> google.protobuf.StringValue
	26, // 76: chef.automate.infra.elasticsearch.ConfigRequest.V1.S3.client:type_name -> chef.automate.infra.elasticsearch.ConfigRequest.V1.S3.Client
	28, // 77: chef.automate.infra.elasticsearch.ConfigRequest.V1.Deprecated.external_es:type_name -> google.protobuf.BoolValue
	29, // 78: chef.automate.infra.elasticsearch.ConfigRequest.V1.S3.Client.name:type_name -> google.protobuf.StringValue
	29, // 79: chef.automate.infra.elasticsearch.ConfigRequest.V1.S3.Client.read_timeout:type_name -> google.protobuf.StringValue
	30, // 80: chef.automate.infra.elasticsearch.ConfigRequest.V1.S3.Client.max_retries:type_name -> google.protobuf.Int32Value
	28, // 81: chef.automate.infra.elasticsearch.ConfigRequest.V1.S3.Client.use_throttle_retries:type_name -> google.protobuf.BoolValue
	82, // [82:82] is the sub-list for method output_type
	82, // [82:82] is the sub-list for method input_type
	82, // [82:82] is the sub-list for extension type_name
	82, // [82:82] is the sub-list for extension extendee
	0,  // [0:82] is the sub-list for field type_name
}

func init() { file_config_elasticsearch_config_request_proto_init() }
func file_config_elasticsearch_config_request_proto_init() {
	if File_config_elasticsearch_config_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_elasticsearch_config_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_ProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Indices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Bootstrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Discovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Logger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Plugins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Runtime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Routing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Allocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Recovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Fielddata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Breaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Deprecated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_elasticsearch_config_request_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_S3_Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_elasticsearch_config_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_elasticsearch_config_request_proto_goTypes,
		DependencyIndexes: file_config_elasticsearch_config_request_proto_depIdxs,
		MessageInfos:      file_config_elasticsearch_config_request_proto_msgTypes,
	}.Build()
	File_config_elasticsearch_config_request_proto = out.File
	file_config_elasticsearch_config_request_proto_rawDesc = nil
	file_config_elasticsearch_config_request_proto_goTypes = nil
	file_config_elasticsearch_config_request_proto_depIdxs = nil
}
