// -*- mode: protobuf; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*-

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: config/workflow_server/config_request.proto

package workflow_server

import (
	shared "github.com/chef/automate/api/config/shared"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-a2-config/api/a2conf"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1 *ConfigRequest_V1 `protobuf:"bytes,1,opt,name=v1,proto3" json:"v1,omitempty" toml:"v1,omitempty" mapstructure:"v1,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_workflow_server_config_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_workflow_server_config_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_workflow_server_config_request_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigRequest) GetV1() *ConfigRequest_V1 {
	if x != nil {
		return x.V1
	}
	return nil
}

type ConfigRequest_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys *ConfigRequest_V1_System  `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty" toml:"sys,omitempty" mapstructure:"sys,omitempty"`
	Svc *ConfigRequest_V1_Service `protobuf:"bytes,2,opt,name=svc,proto3" json:"svc,omitempty" toml:"svc,omitempty" mapstructure:"svc,omitempty"`
}

func (x *ConfigRequest_V1) Reset() {
	*x = ConfigRequest_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_workflow_server_config_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1) ProtoMessage() {}

func (x *ConfigRequest_V1) ProtoReflect() protoreflect.Message {
	mi := &file_config_workflow_server_config_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1) Descriptor() ([]byte, []int) {
	return file_config_workflow_server_config_request_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConfigRequest_V1) GetSys() *ConfigRequest_V1_System {
	if x != nil {
		return x.Sys
	}
	return nil
}

func (x *ConfigRequest_V1) GetSvc() *ConfigRequest_V1_Service {
	if x != nil {
		return x.Svc
	}
	return nil
}

type ConfigRequest_V1_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mlsa                    *shared.Mlsa                 `protobuf:"bytes,1,opt,name=mlsa,proto3" json:"mlsa,omitempty" toml:"mlsa,omitempty" mapstructure:"mlsa,omitempty"`
	Log                     *ConfigRequest_V1_System_Log `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty" toml:"log,omitempty" mapstructure:"log,omitempty"`
	DevEnv                  bool                         `protobuf:"varint,3,opt,name=dev_env,json=devEnv,proto3" json:"dev_env,omitempty" toml:"dev_env,omitempty" mapstructure:"dev_env,omitempty"`
	Telemetry               *ConfigRequest_V1_Telemetry  `protobuf:"bytes,4,opt,name=telemetry,proto3" json:"telemetry,omitempty" toml:"telemetry,omitempty" mapstructure:"telemetry,omitempty"`
	ChefServer              *ConfigRequest_V1_ChefServer `protobuf:"bytes,5,opt,name=chef_server,json=chefServer,proto3" json:"chef_server,omitempty" toml:"chef_server,omitempty" mapstructure:"chef_server,omitempty"`
	Postgresql              *ConfigRequest_V1_Postgresql `protobuf:"bytes,6,opt,name=postgresql,proto3" json:"postgresql,omitempty" toml:"postgresql,omitempty" mapstructure:"postgresql,omitempty"`
	SshGit                  *ConfigRequest_V1_SshGit     `protobuf:"bytes,7,opt,name=ssh_git,json=sshGit,proto3" json:"ssh_git,omitempty" toml:"ssh_git,omitempty" mapstructure:"ssh_git,omitempty"`
	Fqdn                    *wrapperspb.StringValue      `protobuf:"bytes,9,opt,name=fqdn,proto3" json:"fqdn,omitempty" toml:"fqdn,omitempty" mapstructure:"fqdn,omitempty"`
	ApiPort                 *wrapperspb.Int32Value       `protobuf:"bytes,11,opt,name=api_port,json=apiPort,proto3" json:"api_port,omitempty" toml:"api_port,omitempty" mapstructure:"api_port,omitempty"`
	ApiProto                *wrapperspb.StringValue      `protobuf:"bytes,12,opt,name=api_proto,json=apiProto,proto3" json:"api_proto,omitempty" toml:"api_proto,omitempty" mapstructure:"api_proto,omitempty"`
	GitExecutable           *wrapperspb.StringValue      `protobuf:"bytes,13,opt,name=git_executable,json=gitExecutable,proto3" json:"git_executable,omitempty" toml:"git_executable,omitempty" mapstructure:"git_executable,omitempty"`
	TrustedCertificatesFile *wrapperspb.StringValue      `protobuf:"bytes,14,opt,name=trusted_certificates_file,json=trustedCertificatesFile,proto3" json:"trusted_certificates_file,omitempty" toml:"trusted_certificates_file,omitempty" mapstructure:"trusted_certificates_file,omitempty"`
	Tls                     *shared.TLSCredentials       `protobuf:"bytes,15,opt,name=tls,proto3" json:"tls,omitempty" toml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

func (x *ConfigRequest_V1_System) Reset() {
	*x = ConfigRequest_V1_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_workflow_server_config_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System) ProtoMessage() {}

func (x *ConfigRequest_V1_System) ProtoReflect() protoreflect.Message {
	mi := &file_config_workflow_server_config_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System) Descriptor() ([]byte, []int) {
	return file_config_workflow_server_config_request_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ConfigRequest_V1_System) GetMlsa() *shared.Mlsa {
	if x != nil {
		return x.Mlsa
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetLog() *ConfigRequest_V1_System_Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetDevEnv() bool {
	if x != nil {
		return x.DevEnv
	}
	return false
}

func (x *ConfigRequest_V1_System) GetTelemetry() *ConfigRequest_V1_Telemetry {
	if x != nil {
		return x.Telemetry
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetChefServer() *ConfigRequest_V1_ChefServer {
	if x != nil {
		return x.ChefServer
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetPostgresql() *ConfigRequest_V1_Postgresql {
	if x != nil {
		return x.Postgresql
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetSshGit() *ConfigRequest_V1_SshGit {
	if x != nil {
		return x.SshGit
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetFqdn() *wrapperspb.StringValue {
	if x != nil {
		return x.Fqdn
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetApiPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.ApiPort
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetApiProto() *wrapperspb.StringValue {
	if x != nil {
		return x.ApiProto
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetGitExecutable() *wrapperspb.StringValue {
	if x != nil {
		return x.GitExecutable
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetTrustedCertificatesFile() *wrapperspb.StringValue {
	if x != nil {
		return x.TrustedCertificatesFile
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetTls() *shared.TLSCredentials {
	if x != nil {
		return x.Tls
	}
	return nil
}

type ConfigRequest_V1_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest_V1_Service) Reset() {
	*x = ConfigRequest_V1_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_workflow_server_config_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_workflow_server_config_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Service) Descriptor() ([]byte, []int) {
	return file_config_workflow_server_config_request_proto_rawDescGZIP(), []int{0, 0, 1}
}

type ConfigRequest_V1_ChefServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" toml:"url,omitempty" mapstructure:"url,omitempty"`
	WebUiUrl *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=web_ui_url,json=webUiUrl,proto3" json:"web_ui_url,omitempty" toml:"web_ui_url,omitempty" mapstructure:"web_ui_url,omitempty"`
	Vip      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=vip,proto3" json:"vip,omitempty" toml:"vip,omitempty" mapstructure:"vip,omitempty"`
	ChefUser *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=chef_user,json=chefUser,proto3" json:"chef_user,omitempty" toml:"chef_user,omitempty" mapstructure:"chef_user,omitempty"`
}

func (x *ConfigRequest_V1_ChefServer) Reset() {
	*x = ConfigRequest_V1_ChefServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_workflow_server_config_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_ChefServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_ChefServer) ProtoMessage() {}

func (x *ConfigRequest_V1_ChefServer) ProtoReflect() protoreflect.Message {
	mi := &file_config_workflow_server_config_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_ChefServer.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_ChefServer) Descriptor() ([]byte, []int) {
	return file_config_workflow_server_config_request_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *ConfigRequest_V1_ChefServer) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ConfigRequest_V1_ChefServer) GetWebUiUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.WebUiUrl
	}
	return nil
}

func (x *ConfigRequest_V1_ChefServer) GetVip() *wrapperspb.StringValue {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *ConfigRequest_V1_ChefServer) GetChefUser() *wrapperspb.StringValue {
	if x != nil {
		return x.ChefUser
	}
	return nil
}

type ConfigRequest_V1_Postgresql struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty" toml:"db_name,omitempty" mapstructure:"db_name,omitempty"`
}

func (x *ConfigRequest_V1_Postgresql) Reset() {
	*x = ConfigRequest_V1_Postgresql{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_workflow_server_config_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Postgresql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Postgresql) ProtoMessage() {}

func (x *ConfigRequest_V1_Postgresql) ProtoReflect() protoreflect.Message {
	mi := &file_config_workflow_server_config_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Postgresql.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Postgresql) Descriptor() ([]byte, []int) {
	return file_config_workflow_server_config_request_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *ConfigRequest_V1_Postgresql) GetDbName() *wrapperspb.StringValue {
	if x != nil {
		return x.DbName
	}
	return nil
}

type ConfigRequest_V1_SshGit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty" toml:"hostname,omitempty" mapstructure:"hostname,omitempty"`
	HostAddress     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=host_address,json=hostAddress,proto3" json:"host_address,omitempty" toml:"host_address,omitempty" mapstructure:"host_address,omitempty"`
	Port            *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
	GitRepoTemplate *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=git_repo_template,json=gitRepoTemplate,proto3" json:"git_repo_template,omitempty" toml:"git_repo_template,omitempty" mapstructure:"git_repo_template,omitempty"`
}

func (x *ConfigRequest_V1_SshGit) Reset() {
	*x = ConfigRequest_V1_SshGit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_workflow_server_config_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_SshGit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_SshGit) ProtoMessage() {}

func (x *ConfigRequest_V1_SshGit) ProtoReflect() protoreflect.Message {
	mi := &file_config_workflow_server_config_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_SshGit.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_SshGit) Descriptor() ([]byte, []int) {
	return file_config_workflow_server_config_request_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *ConfigRequest_V1_SshGit) GetHostname() *wrapperspb.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *ConfigRequest_V1_SshGit) GetHostAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.HostAddress
	}
	return nil
}

func (x *ConfigRequest_V1_SshGit) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *ConfigRequest_V1_SshGit) GetGitRepoTemplate() *wrapperspb.StringValue {
	if x != nil {
		return x.GitRepoTemplate
	}
	return nil
}

type ConfigRequest_V1_Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty" toml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
	Api     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty" toml:"api,omitempty" mapstructure:"api,omitempty"`
}

func (x *ConfigRequest_V1_Telemetry) Reset() {
	*x = ConfigRequest_V1_Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_workflow_server_config_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Telemetry) ProtoMessage() {}

func (x *ConfigRequest_V1_Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_config_workflow_server_config_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Telemetry.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Telemetry) Descriptor() ([]byte, []int) {
	return file_config_workflow_server_config_request_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *ConfigRequest_V1_Telemetry) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *ConfigRequest_V1_Telemetry) GetApi() *wrapperspb.StringValue {
	if x != nil {
		return x.Api
	}
	return nil
}

type ConfigRequest_V1_System_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty" toml:"level,omitempty" mapstructure:"level,omitempty"`
}

func (x *ConfigRequest_V1_System_Log) Reset() {
	*x = ConfigRequest_V1_System_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_workflow_server_config_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Log) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Log) ProtoReflect() protoreflect.Message {
	mi := &file_config_workflow_server_config_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Log.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Log) Descriptor() ([]byte, []int) {
	return file_config_workflow_server_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *ConfigRequest_V1_System_Log) GetLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.Level
	}
	return nil
}

var File_config_workflow_server_config_request_proto protoreflect.FileDescriptor

var file_config_workflow_server_config_request_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x74,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x61, 0x32, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x32, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x0f, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x02, 0x76,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x52,
	0x02, 0x76, 0x31, 0x1a, 0xfa, 0x0e, 0x0a, 0x02, 0x56, 0x31, 0x12, 0x4f, 0x0a, 0x03, 0x73, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x50, 0x0a, 0x03, 0x73,
	0x76, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x73, 0x76, 0x63, 0x1a, 0x81, 0x08,
	0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x6c, 0x73, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6c, 0x73, 0x61, 0x52, 0x04, 0x6d, 0x6c, 0x73, 0x61, 0x12, 0x53,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x6e, 0x76, 0x12, 0x5e, 0x0a, 0x09,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x0b,
	0x63, 0x68, 0x65, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x66, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x61, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x12, 0x56, 0x0a, 0x07, 0x73, 0x73, 0x68, 0x5f, 0x67, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x73, 0x68,
	0x47, 0x69, 0x74, 0x52, 0x06, 0x73, 0x73, 0x68, 0x47, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x66,
	0x71, 0x64, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x4f, 0x0a,
	0x08, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0xc2, 0xf3,
	0x18, 0x13, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x8b, 0x4b, 0x1a, 0x05,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x52, 0x07, 0x61, 0x70, 0x69, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x39,
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x43, 0x0a, 0x0e, 0x67, 0x69, 0x74,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x67, 0x69, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58,
	0x0a, 0x19, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x17, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x1a, 0x09, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0xe9, 0x01, 0x0a,
	0x0a, 0x43, 0x68, 0x65, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x0a, 0x77,
	0x65, 0x62, 0x5f, 0x75, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77,
	0x65, 0x62, 0x55, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x66, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x68, 0x65, 0x66, 0x55, 0x73,
	0x65, 0x72, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x1a, 0x49, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x05, 0x1a, 0x97, 0x02, 0x0a, 0x06, 0x53, 0x73, 0x68, 0x47, 0x69, 0x74, 0x12, 0x38,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x68, 0x6f,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0xc2, 0xf3, 0x18, 0x0d, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x10,
	0x9d, 0x46, 0x1a, 0x03, 0x73, 0x73, 0x68, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a,
	0x11, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x08, 0x1a, 0x71, 0x0a,
	0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x3a, 0x1e, 0xc2, 0xf3, 0x18, 0x1a, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_workflow_server_config_request_proto_rawDescOnce sync.Once
	file_config_workflow_server_config_request_proto_rawDescData = file_config_workflow_server_config_request_proto_rawDesc
)

func file_config_workflow_server_config_request_proto_rawDescGZIP() []byte {
	file_config_workflow_server_config_request_proto_rawDescOnce.Do(func() {
		file_config_workflow_server_config_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_workflow_server_config_request_proto_rawDescData)
	})
	return file_config_workflow_server_config_request_proto_rawDescData
}

var file_config_workflow_server_config_request_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_config_workflow_server_config_request_proto_goTypes = []interface{}{
	(*ConfigRequest)(nil),               // 0: chef.automate.domain.workflow_server.ConfigRequest
	(*ConfigRequest_V1)(nil),            // 1: chef.automate.domain.workflow_server.ConfigRequest.V1
	(*ConfigRequest_V1_System)(nil),     // 2: chef.automate.domain.workflow_server.ConfigRequest.V1.System
	(*ConfigRequest_V1_Service)(nil),    // 3: chef.automate.domain.workflow_server.ConfigRequest.V1.Service
	(*ConfigRequest_V1_ChefServer)(nil), // 4: chef.automate.domain.workflow_server.ConfigRequest.V1.ChefServer
	(*ConfigRequest_V1_Postgresql)(nil), // 5: chef.automate.domain.workflow_server.ConfigRequest.V1.Postgresql
	(*ConfigRequest_V1_SshGit)(nil),     // 6: chef.automate.domain.workflow_server.ConfigRequest.V1.SshGit
	(*ConfigRequest_V1_Telemetry)(nil),  // 7: chef.automate.domain.workflow_server.ConfigRequest.V1.Telemetry
	(*ConfigRequest_V1_System_Log)(nil), // 8: chef.automate.domain.workflow_server.ConfigRequest.V1.System.Log
	(*shared.Mlsa)(nil),                 // 9: chef.automate.infra.config.Mlsa
	(*wrapperspb.StringValue)(nil),      // 10: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),       // 11: google.protobuf.Int32Value
	(*shared.TLSCredentials)(nil),       // 12: chef.automate.infra.config.TLSCredentials
	(*wrapperspb.BoolValue)(nil),        // 13: google.protobuf.BoolValue
}
var file_config_workflow_server_config_request_proto_depIdxs = []int32{
	1,  // 0: chef.automate.domain.workflow_server.ConfigRequest.v1:type_name -> chef.automate.domain.workflow_server.ConfigRequest.V1
	2,  // 1: chef.automate.domain.workflow_server.ConfigRequest.V1.sys:type_name -> chef.automate.domain.workflow_server.ConfigRequest.V1.System
	3,  // 2: chef.automate.domain.workflow_server.ConfigRequest.V1.svc:type_name -> chef.automate.domain.workflow_server.ConfigRequest.V1.Service
	9,  // 3: chef.automate.domain.workflow_server.ConfigRequest.V1.System.mlsa:type_name -> chef.automate.infra.config.Mlsa
	8,  // 4: chef.automate.domain.workflow_server.ConfigRequest.V1.System.log:type_name -> chef.automate.domain.workflow_server.ConfigRequest.V1.System.Log
	7,  // 5: chef.automate.domain.workflow_server.ConfigRequest.V1.System.telemetry:type_name -> chef.automate.domain.workflow_server.ConfigRequest.V1.Telemetry
	4,  // 6: chef.automate.domain.workflow_server.ConfigRequest.V1.System.chef_server:type_name -> chef.automate.domain.workflow_server.ConfigRequest.V1.ChefServer
	5,  // 7: chef.automate.domain.workflow_server.ConfigRequest.V1.System.postgresql:type_name -> chef.automate.domain.workflow_server.ConfigRequest.V1.Postgresql
	6,  // 8: chef.automate.domain.workflow_server.ConfigRequest.V1.System.ssh_git:type_name -> chef.automate.domain.workflow_server.ConfigRequest.V1.SshGit
	10, // 9: chef.automate.domain.workflow_server.ConfigRequest.V1.System.fqdn:type_name -> google.protobuf.StringValue
	11, // 10: chef.automate.domain.workflow_server.ConfigRequest.V1.System.api_port:type_name -> google.protobuf.Int32Value
	10, // 11: chef.automate.domain.workflow_server.ConfigRequest.V1.System.api_proto:type_name -> google.protobuf.StringValue
	10, // 12: chef.automate.domain.workflow_server.ConfigRequest.V1.System.git_executable:type_name -> google.protobuf.StringValue
	10, // 13: chef.automate.domain.workflow_server.ConfigRequest.V1.System.trusted_certificates_file:type_name -> google.protobuf.StringValue
	12, // 14: chef.automate.domain.workflow_server.ConfigRequest.V1.System.tls:type_name -> chef.automate.infra.config.TLSCredentials
	10, // 15: chef.automate.domain.workflow_server.ConfigRequest.V1.ChefServer.url:type_name -> google.protobuf.StringValue
	10, // 16: chef.automate.domain.workflow_server.ConfigRequest.V1.ChefServer.web_ui_url:type_name -> google.protobuf.StringValue
	10, // 17: chef.automate.domain.workflow_server.ConfigRequest.V1.ChefServer.vip:type_name -> google.protobuf.StringValue
	10, // 18: chef.automate.domain.workflow_server.ConfigRequest.V1.ChefServer.chef_user:type_name -> google.protobuf.StringValue
	10, // 19: chef.automate.domain.workflow_server.ConfigRequest.V1.Postgresql.db_name:type_name -> google.protobuf.StringValue
	10, // 20: chef.automate.domain.workflow_server.ConfigRequest.V1.SshGit.hostname:type_name -> google.protobuf.StringValue
	10, // 21: chef.automate.domain.workflow_server.ConfigRequest.V1.SshGit.host_address:type_name -> google.protobuf.StringValue
	11, // 22: chef.automate.domain.workflow_server.ConfigRequest.V1.SshGit.port:type_name -> google.protobuf.Int32Value
	10, // 23: chef.automate.domain.workflow_server.ConfigRequest.V1.SshGit.git_repo_template:type_name -> google.protobuf.StringValue
	13, // 24: chef.automate.domain.workflow_server.ConfigRequest.V1.Telemetry.enabled:type_name -> google.protobuf.BoolValue
	10, // 25: chef.automate.domain.workflow_server.ConfigRequest.V1.Telemetry.api:type_name -> google.protobuf.StringValue
	10, // 26: chef.automate.domain.workflow_server.ConfigRequest.V1.System.Log.level:type_name -> google.protobuf.StringValue
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_config_workflow_server_config_request_proto_init() }
func file_config_workflow_server_config_request_proto_init() {
	if File_config_workflow_server_config_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_workflow_server_config_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_workflow_server_config_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_workflow_server_config_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_workflow_server_config_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_workflow_server_config_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_ChefServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_workflow_server_config_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Postgresql); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_workflow_server_config_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_SshGit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_workflow_server_config_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_workflow_server_config_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_workflow_server_config_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_workflow_server_config_request_proto_goTypes,
		DependencyIndexes: file_config_workflow_server_config_request_proto_depIdxs,
		MessageInfos:      file_config_workflow_server_config_request_proto_msgTypes,
	}.Build()
	File_config_workflow_server_config_request_proto = out.File
	file_config_workflow_server_config_request_proto_rawDesc = nil
	file_config_workflow_server_config_request_proto_goTypes = nil
	file_config_workflow_server_config_request_proto_depIdxs = nil
}
