// -*- mode: protobuf; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*-

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: config/erchef/config_request.proto

package erchef

import (
	shared "github.com/chef/automate/api/config/shared"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-a2-config/api/a2conf"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1 *ConfigRequest_V1 `protobuf:"bytes,1,opt,name=v1,proto3" json:"v1,omitempty" toml:"v1,omitempty" mapstructure:"v1,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigRequest) GetV1() *ConfigRequest_V1 {
	if x != nil {
		return x.V1
	}
	return nil
}

type ConfigRequest_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys *ConfigRequest_V1_System  `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty" toml:"sys,omitempty" mapstructure:"sys,omitempty"`
	Svc *ConfigRequest_V1_Service `protobuf:"bytes,2,opt,name=svc,proto3" json:"svc,omitempty" toml:"svc,omitempty" mapstructure:"svc,omitempty"`
}

func (x *ConfigRequest_V1) Reset() {
	*x = ConfigRequest_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1) ProtoMessage() {}

func (x *ConfigRequest_V1) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConfigRequest_V1) GetSys() *ConfigRequest_V1_System {
	if x != nil {
		return x.Sys
	}
	return nil
}

func (x *ConfigRequest_V1) GetSvc() *ConfigRequest_V1_Service {
	if x != nil {
		return x.Svc
	}
	return nil
}

type ConfigRequest_V1_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mlsa             *shared.Mlsa                           `protobuf:"bytes,1,opt,name=mlsa,proto3" json:"mlsa,omitempty" toml:"mlsa,omitempty" mapstructure:"mlsa,omitempty"`
	Log              *ConfigRequest_V1_System_Log           `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty" toml:"log,omitempty" mapstructure:"log,omitempty"`
	Keygen           *ConfigRequest_V1_System_Keygen        `protobuf:"bytes,3,opt,name=keygen,proto3" json:"keygen,omitempty" toml:"keygen,omitempty" mapstructure:"keygen,omitempty"`
	Api              *ConfigRequest_V1_System_ChefApi       `protobuf:"bytes,4,opt,name=api,proto3" json:"api,omitempty" toml:"api,omitempty" mapstructure:"api,omitempty"`
	Index            *ConfigRequest_V1_System_Indexing      `protobuf:"bytes,5,opt,name=index,proto3" json:"index,omitempty" toml:"index,omitempty" mapstructure:"index,omitempty"`
	Network          *ConfigRequest_V1_System_Network       `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty" toml:"network,omitempty" mapstructure:"network,omitempty"`
	Sql              *ConfigRequest_V1_System_Sql           `protobuf:"bytes,7,opt,name=sql,proto3" json:"sql,omitempty" toml:"sql,omitempty" mapstructure:"sql,omitempty"`
	Authz            *ConfigRequest_V1_System_Authz         `protobuf:"bytes,8,opt,name=authz,proto3" json:"authz,omitempty" toml:"authz,omitempty" mapstructure:"authz,omitempty"`
	DataCollector    *ConfigRequest_V1_System_DataCollector `protobuf:"bytes,9,opt,name=data_collector,json=dataCollector,proto3" json:"data_collector,omitempty" toml:"data_collector,omitempty" mapstructure:"data_collector,omitempty"`
	Depsolver        *ConfigRequest_V1_System_Depsolver     `protobuf:"bytes,10,opt,name=depsolver,proto3" json:"depsolver,omitempty" toml:"depsolver,omitempty" mapstructure:"depsolver,omitempty"`
	Tls              *shared.TLSCredentials                 `protobuf:"bytes,11,opt,name=tls,proto3" json:"tls,omitempty" toml:"tls,omitempty" mapstructure:"tls,omitempty"`
	Memory           *ConfigRequest_V1_System_Memory        `protobuf:"bytes,12,opt,name=memory,proto3" json:"memory,omitempty" toml:"memory,omitempty" mapstructure:"memory,omitempty"`
	ExternalAutomate *shared.External_Automate              `protobuf:"bytes,13,opt,name=external_automate,json=externalAutomate,proto3" json:"external_automate,omitempty" toml:"external_automate,omitempty" mapstructure:"external_automate,omitempty"`
}

func (x *ConfigRequest_V1_System) Reset() {
	*x = ConfigRequest_V1_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System) ProtoMessage() {}

func (x *ConfigRequest_V1_System) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ConfigRequest_V1_System) GetMlsa() *shared.Mlsa {
	if x != nil {
		return x.Mlsa
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetLog() *ConfigRequest_V1_System_Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetKeygen() *ConfigRequest_V1_System_Keygen {
	if x != nil {
		return x.Keygen
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetApi() *ConfigRequest_V1_System_ChefApi {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetIndex() *ConfigRequest_V1_System_Indexing {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetNetwork() *ConfigRequest_V1_System_Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetSql() *ConfigRequest_V1_System_Sql {
	if x != nil {
		return x.Sql
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetAuthz() *ConfigRequest_V1_System_Authz {
	if x != nil {
		return x.Authz
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetDataCollector() *ConfigRequest_V1_System_DataCollector {
	if x != nil {
		return x.DataCollector
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetDepsolver() *ConfigRequest_V1_System_Depsolver {
	if x != nil {
		return x.Depsolver
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetTls() *shared.TLSCredentials {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetMemory() *ConfigRequest_V1_System_Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetExternalAutomate() *shared.External_Automate {
	if x != nil {
		return x.ExternalAutomate
	}
	return nil
}

type ConfigRequest_V1_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest_V1_Service) Reset() {
	*x = ConfigRequest_V1_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Service) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 1}
}

type ConfigRequest_V1_System_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port *wrappers.Int32Value `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
	// Deprecated: Do not use.
	ListenIp *wrappers.StringValue `protobuf:"bytes,2,opt,name=listen_ip,json=listenIp,proto3" json:"listen_ip,omitempty" toml:"listen_ip,omitempty" mapstructure:"listen_ip,omitempty"` // The listen host is no longer setable(localhost only)
}

func (x *ConfigRequest_V1_System_Network) Reset() {
	*x = ConfigRequest_V1_System_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Network) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Network) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Network.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Network) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *ConfigRequest_V1_System_Network) GetPort() *wrappers.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

// Deprecated: Do not use.
func (x *ConfigRequest_V1_System_Network) GetListenIp() *wrappers.StringValue {
	if x != nil {
		return x.ListenIp
	}
	return nil
}

type ConfigRequest_V1_System_Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                 *wrappers.StringValue `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty" toml:"level,omitempty" mapstructure:"level,omitempty"`
	RotationMaxBytes      *wrappers.Int64Value  `protobuf:"bytes,2,opt,name=rotation_max_bytes,json=rotationMaxBytes,proto3" json:"rotation_max_bytes,omitempty" toml:"rotation_max_bytes,omitempty" mapstructure:"rotation_max_bytes,omitempty"`
	RotationMaxFiles      *wrappers.Int32Value  `protobuf:"bytes,3,opt,name=rotation_max_files,json=rotationMaxFiles,proto3" json:"rotation_max_files,omitempty" toml:"rotation_max_files,omitempty" mapstructure:"rotation_max_files,omitempty"`
	MaxErrorLogsPerSecond *wrappers.Int32Value  `protobuf:"bytes,4,opt,name=max_error_logs_per_second,json=maxErrorLogsPerSecond,proto3" json:"max_error_logs_per_second,omitempty" toml:"max_error_logs_per_second,omitempty" mapstructure:"max_error_logs_per_second,omitempty"`
	// TODO(ssd) 2018-07-24: Different log
	// rotation configurables require
	// different units.
	RotationMaxMegabytes *wrappers.Int32Value `protobuf:"bytes,5,opt,name=rotation_max_megabytes,json=rotationMaxMegabytes,proto3" json:"rotation_max_megabytes,omitempty" toml:"rotation_max_megabytes,omitempty" mapstructure:"rotation_max_megabytes,omitempty"`
}

func (x *ConfigRequest_V1_System_Log) Reset() {
	*x = ConfigRequest_V1_System_Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Log) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Log) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Log.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Log) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *ConfigRequest_V1_System_Log) GetLevel() *wrappers.StringValue {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *ConfigRequest_V1_System_Log) GetRotationMaxBytes() *wrappers.Int64Value {
	if x != nil {
		return x.RotationMaxBytes
	}
	return nil
}

func (x *ConfigRequest_V1_System_Log) GetRotationMaxFiles() *wrappers.Int32Value {
	if x != nil {
		return x.RotationMaxFiles
	}
	return nil
}

func (x *ConfigRequest_V1_System_Log) GetMaxErrorLogsPerSecond() *wrappers.Int32Value {
	if x != nil {
		return x.MaxErrorLogsPerSecond
	}
	return nil
}

func (x *ConfigRequest_V1_System_Log) GetRotationMaxMegabytes() *wrappers.Int32Value {
	if x != nil {
		return x.RotationMaxMegabytes
	}
	return nil
}

type ConfigRequest_V1_System_Keygen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerCount *wrappers.Int32Value `protobuf:"bytes,1,opt,name=worker_count,json=workerCount,proto3" json:"worker_count,omitempty" toml:"worker_count,omitempty" mapstructure:"worker_count,omitempty"`
	CacheSize   *wrappers.Int32Value `protobuf:"bytes,2,opt,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty" toml:"cache_size,omitempty" mapstructure:"cache_size,omitempty"`
	StartSize   *wrappers.Int32Value `protobuf:"bytes,3,opt,name=start_size,json=startSize,proto3" json:"start_size,omitempty" toml:"start_size,omitempty" mapstructure:"start_size,omitempty"`
	Timeout     *wrappers.Int32Value `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty" toml:"timeout,omitempty" mapstructure:"timeout,omitempty"`
}

func (x *ConfigRequest_V1_System_Keygen) Reset() {
	*x = ConfigRequest_V1_System_Keygen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Keygen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Keygen) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Keygen) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Keygen.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Keygen) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *ConfigRequest_V1_System_Keygen) GetWorkerCount() *wrappers.Int32Value {
	if x != nil {
		return x.WorkerCount
	}
	return nil
}

func (x *ConfigRequest_V1_System_Keygen) GetCacheSize() *wrappers.Int32Value {
	if x != nil {
		return x.CacheSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Keygen) GetStartSize() *wrappers.Int32Value {
	if x != nil {
		return x.StartSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Keygen) GetTimeout() *wrappers.Int32Value {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type ConfigRequest_V1_System_ChefApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthSkew               *wrappers.Int32Value  `protobuf:"bytes,1,opt,name=auth_skew,json=authSkew,proto3" json:"auth_skew,omitempty" toml:"auth_skew,omitempty" mapstructure:"auth_skew,omitempty"`
	BulkFetchBatchSize     *wrappers.Int32Value  `protobuf:"bytes,2,opt,name=bulk_fetch_batch_size,json=bulkFetchBatchSize,proto3" json:"bulk_fetch_batch_size,omitempty" toml:"bulk_fetch_batch_size,omitempty" mapstructure:"bulk_fetch_batch_size,omitempty"`
	MaxRequestSize         *wrappers.Int32Value  `protobuf:"bytes,3,opt,name=max_request_size,json=maxRequestSize,proto3" json:"max_request_size,omitempty" toml:"max_request_size,omitempty" mapstructure:"max_request_size,omitempty"`
	BaseResourceUrl        *wrappers.StringValue `protobuf:"bytes,4,opt,name=base_resource_url,json=baseResourceUrl,proto3" json:"base_resource_url,omitempty" toml:"base_resource_url,omitempty" mapstructure:"base_resource_url,omitempty"`
	StrictSearchResultAcls *wrappers.BoolValue   `protobuf:"bytes,5,opt,name=strict_search_result_acls,json=strictSearchResultAcls,proto3" json:"strict_search_result_acls,omitempty" toml:"strict_search_result_acls,omitempty" mapstructure:"strict_search_result_acls,omitempty"`
	ActionsFqdn            *wrappers.StringValue `protobuf:"bytes,6,opt,name=actions_fqdn,json=actionsFqdn,proto3" json:"actions_fqdn,omitempty" toml:"actions_fqdn,omitempty" mapstructure:"actions_fqdn,omitempty"`
}

func (x *ConfigRequest_V1_System_ChefApi) Reset() {
	*x = ConfigRequest_V1_System_ChefApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_ChefApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_ChefApi) ProtoMessage() {}

func (x *ConfigRequest_V1_System_ChefApi) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_ChefApi.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_ChefApi) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 3}
}

func (x *ConfigRequest_V1_System_ChefApi) GetAuthSkew() *wrappers.Int32Value {
	if x != nil {
		return x.AuthSkew
	}
	return nil
}

func (x *ConfigRequest_V1_System_ChefApi) GetBulkFetchBatchSize() *wrappers.Int32Value {
	if x != nil {
		return x.BulkFetchBatchSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_ChefApi) GetMaxRequestSize() *wrappers.Int32Value {
	if x != nil {
		return x.MaxRequestSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_ChefApi) GetBaseResourceUrl() *wrappers.StringValue {
	if x != nil {
		return x.BaseResourceUrl
	}
	return nil
}

func (x *ConfigRequest_V1_System_ChefApi) GetStrictSearchResultAcls() *wrappers.BoolValue {
	if x != nil {
		return x.StrictSearchResultAcls
	}
	return nil
}

func (x *ConfigRequest_V1_System_ChefApi) GetActionsFqdn() *wrappers.StringValue {
	if x != nil {
		return x.ActionsFqdn
	}
	return nil
}

type ConfigRequest_V1_System_Indexing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReindexBatchSize   *wrappers.Int32Value `protobuf:"bytes,1,opt,name=reindex_batch_size,json=reindexBatchSize,proto3" json:"reindex_batch_size,omitempty" toml:"reindex_batch_size,omitempty" mapstructure:"reindex_batch_size,omitempty"`
	ReindexSleepMinMs  *wrappers.Int32Value `protobuf:"bytes,2,opt,name=reindex_sleep_min_ms,json=reindexSleepMinMs,proto3" json:"reindex_sleep_min_ms,omitempty" toml:"reindex_sleep_min_ms,omitempty" mapstructure:"reindex_sleep_min_ms,omitempty"`
	ReindexSleepMaxMs  *wrappers.Int32Value `protobuf:"bytes,3,opt,name=reindex_sleep_max_ms,json=reindexSleepMaxMs,proto3" json:"reindex_sleep_max_ms,omitempty" toml:"reindex_sleep_max_ms,omitempty" mapstructure:"reindex_sleep_max_ms,omitempty"`
	ReindexItemRetries *wrappers.Int32Value `protobuf:"bytes,4,opt,name=reindex_item_retries,json=reindexItemRetries,proto3" json:"reindex_item_retries,omitempty" toml:"reindex_item_retries,omitempty" mapstructure:"reindex_item_retries,omitempty"`
	Timeout            *wrappers.Int32Value `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty" toml:"timeout,omitempty" mapstructure:"timeout,omitempty"`
	PoolInitSize       *wrappers.Int32Value `protobuf:"bytes,6,opt,name=pool_init_size,json=poolInitSize,proto3" json:"pool_init_size,omitempty" toml:"pool_init_size,omitempty" mapstructure:"pool_init_size,omitempty"`
	PoolMaxSize        *wrappers.Int32Value `protobuf:"bytes,7,opt,name=pool_max_size,json=poolMaxSize,proto3" json:"pool_max_size,omitempty" toml:"pool_max_size,omitempty" mapstructure:"pool_max_size,omitempty"`
	PoolQueueMax       *wrappers.Int32Value `protobuf:"bytes,8,opt,name=pool_queue_max,json=poolQueueMax,proto3" json:"pool_queue_max,omitempty" toml:"pool_queue_max,omitempty" mapstructure:"pool_queue_max,omitempty"`
	BatchSize          *wrappers.Int32Value `protobuf:"bytes,9,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty" toml:"batch_size,omitempty" mapstructure:"batch_size,omitempty"`
	BatchMaxWait       *wrappers.Int32Value `protobuf:"bytes,10,opt,name=batch_max_wait,json=batchMaxWait,proto3" json:"batch_max_wait,omitempty" toml:"batch_max_wait,omitempty" mapstructure:"batch_max_wait,omitempty"`
}

func (x *ConfigRequest_V1_System_Indexing) Reset() {
	*x = ConfigRequest_V1_System_Indexing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Indexing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Indexing) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Indexing) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Indexing.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Indexing) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 4}
}

func (x *ConfigRequest_V1_System_Indexing) GetReindexBatchSize() *wrappers.Int32Value {
	if x != nil {
		return x.ReindexBatchSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Indexing) GetReindexSleepMinMs() *wrappers.Int32Value {
	if x != nil {
		return x.ReindexSleepMinMs
	}
	return nil
}

func (x *ConfigRequest_V1_System_Indexing) GetReindexSleepMaxMs() *wrappers.Int32Value {
	if x != nil {
		return x.ReindexSleepMaxMs
	}
	return nil
}

func (x *ConfigRequest_V1_System_Indexing) GetReindexItemRetries() *wrappers.Int32Value {
	if x != nil {
		return x.ReindexItemRetries
	}
	return nil
}

func (x *ConfigRequest_V1_System_Indexing) GetTimeout() *wrappers.Int32Value {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_Indexing) GetPoolInitSize() *wrappers.Int32Value {
	if x != nil {
		return x.PoolInitSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Indexing) GetPoolMaxSize() *wrappers.Int32Value {
	if x != nil {
		return x.PoolMaxSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Indexing) GetPoolQueueMax() *wrappers.Int32Value {
	if x != nil {
		return x.PoolQueueMax
	}
	return nil
}

func (x *ConfigRequest_V1_System_Indexing) GetBatchSize() *wrappers.Int32Value {
	if x != nil {
		return x.BatchSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Indexing) GetBatchMaxWait() *wrappers.Int32Value {
	if x != nil {
		return x.BatchMaxWait
	}
	return nil
}

type ConfigRequest_V1_System_Authz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fanout           *wrappers.Int32Value `protobuf:"bytes,1,opt,name=fanout,proto3" json:"fanout,omitempty" toml:"fanout,omitempty" mapstructure:"fanout,omitempty"`
	Timeout          *wrappers.Int32Value `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty" toml:"timeout,omitempty" mapstructure:"timeout,omitempty"`
	PoolInitSize     *wrappers.Int32Value `protobuf:"bytes,3,opt,name=pool_init_size,json=poolInitSize,proto3" json:"pool_init_size,omitempty" toml:"pool_init_size,omitempty" mapstructure:"pool_init_size,omitempty"`
	PoolMaxSize      *wrappers.Int32Value `protobuf:"bytes,4,opt,name=pool_max_size,json=poolMaxSize,proto3" json:"pool_max_size,omitempty" toml:"pool_max_size,omitempty" mapstructure:"pool_max_size,omitempty"`
	PoolQueueMax     *wrappers.Int32Value `protobuf:"bytes,5,opt,name=pool_queue_max,json=poolQueueMax,proto3" json:"pool_queue_max,omitempty" toml:"pool_queue_max,omitempty" mapstructure:"pool_queue_max,omitempty"`
	PoolQueueTimeout *wrappers.Int32Value `protobuf:"bytes,6,opt,name=pool_queue_timeout,json=poolQueueTimeout,proto3" json:"pool_queue_timeout,omitempty" toml:"pool_queue_timeout,omitempty" mapstructure:"pool_queue_timeout,omitempty"`
}

func (x *ConfigRequest_V1_System_Authz) Reset() {
	*x = ConfigRequest_V1_System_Authz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Authz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Authz) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Authz) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Authz.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Authz) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 5}
}

func (x *ConfigRequest_V1_System_Authz) GetFanout() *wrappers.Int32Value {
	if x != nil {
		return x.Fanout
	}
	return nil
}

func (x *ConfigRequest_V1_System_Authz) GetTimeout() *wrappers.Int32Value {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_Authz) GetPoolInitSize() *wrappers.Int32Value {
	if x != nil {
		return x.PoolInitSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Authz) GetPoolMaxSize() *wrappers.Int32Value {
	if x != nil {
		return x.PoolMaxSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Authz) GetPoolQueueMax() *wrappers.Int32Value {
	if x != nil {
		return x.PoolQueueMax
	}
	return nil
}

func (x *ConfigRequest_V1_System_Authz) GetPoolQueueTimeout() *wrappers.Int32Value {
	if x != nil {
		return x.PoolQueueTimeout
	}
	return nil
}

type ConfigRequest_V1_System_Sql struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout          *wrappers.Int32Value `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty" toml:"timeout,omitempty" mapstructure:"timeout,omitempty"`
	PoolInitSize     *wrappers.Int32Value `protobuf:"bytes,2,opt,name=pool_init_size,json=poolInitSize,proto3" json:"pool_init_size,omitempty" toml:"pool_init_size,omitempty" mapstructure:"pool_init_size,omitempty"`
	PoolMaxSize      *wrappers.Int32Value `protobuf:"bytes,3,opt,name=pool_max_size,json=poolMaxSize,proto3" json:"pool_max_size,omitempty" toml:"pool_max_size,omitempty" mapstructure:"pool_max_size,omitempty"`
	PoolQueueMax     *wrappers.Int32Value `protobuf:"bytes,4,opt,name=pool_queue_max,json=poolQueueMax,proto3" json:"pool_queue_max,omitempty" toml:"pool_queue_max,omitempty" mapstructure:"pool_queue_max,omitempty"`
	PoolQueueTimeout *wrappers.Int32Value `protobuf:"bytes,5,opt,name=pool_queue_timeout,json=poolQueueTimeout,proto3" json:"pool_queue_timeout,omitempty" toml:"pool_queue_timeout,omitempty" mapstructure:"pool_queue_timeout,omitempty"`
}

func (x *ConfigRequest_V1_System_Sql) Reset() {
	*x = ConfigRequest_V1_System_Sql{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Sql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Sql) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Sql) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Sql.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Sql) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 6}
}

func (x *ConfigRequest_V1_System_Sql) GetTimeout() *wrappers.Int32Value {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_Sql) GetPoolInitSize() *wrappers.Int32Value {
	if x != nil {
		return x.PoolInitSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Sql) GetPoolMaxSize() *wrappers.Int32Value {
	if x != nil {
		return x.PoolMaxSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Sql) GetPoolQueueMax() *wrappers.Int32Value {
	if x != nil {
		return x.PoolQueueMax
	}
	return nil
}

func (x *ConfigRequest_V1_System_Sql) GetPoolQueueTimeout() *wrappers.Int32Value {
	if x != nil {
		return x.PoolQueueTimeout
	}
	return nil
}

type ConfigRequest_V1_System_DataCollector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout      *wrappers.Int32Value `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty" toml:"timeout,omitempty" mapstructure:"timeout,omitempty"`
	PoolInitSize *wrappers.Int32Value `protobuf:"bytes,2,opt,name=pool_init_size,json=poolInitSize,proto3" json:"pool_init_size,omitempty" toml:"pool_init_size,omitempty" mapstructure:"pool_init_size,omitempty"`
	PoolMaxSize  *wrappers.Int32Value `protobuf:"bytes,3,opt,name=pool_max_size,json=poolMaxSize,proto3" json:"pool_max_size,omitempty" toml:"pool_max_size,omitempty" mapstructure:"pool_max_size,omitempty"`
	PoolQueueMax *wrappers.Int32Value `protobuf:"bytes,4,opt,name=pool_queue_max,json=poolQueueMax,proto3" json:"pool_queue_max,omitempty" toml:"pool_queue_max,omitempty" mapstructure:"pool_queue_max,omitempty"`
	Enabled      *wrappers.BoolValue  `protobuf:"bytes,5,opt,name=enabled,proto3" json:"enabled,omitempty" toml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
}

func (x *ConfigRequest_V1_System_DataCollector) Reset() {
	*x = ConfigRequest_V1_System_DataCollector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_DataCollector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_DataCollector) ProtoMessage() {}

func (x *ConfigRequest_V1_System_DataCollector) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_DataCollector.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_DataCollector) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 7}
}

func (x *ConfigRequest_V1_System_DataCollector) GetTimeout() *wrappers.Int32Value {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_DataCollector) GetPoolInitSize() *wrappers.Int32Value {
	if x != nil {
		return x.PoolInitSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_DataCollector) GetPoolMaxSize() *wrappers.Int32Value {
	if x != nil {
		return x.PoolMaxSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_DataCollector) GetPoolQueueMax() *wrappers.Int32Value {
	if x != nil {
		return x.PoolQueueMax
	}
	return nil
}

func (x *ConfigRequest_V1_System_DataCollector) GetEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type ConfigRequest_V1_System_Depsolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout          *wrappers.Int32Value `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty" toml:"timeout,omitempty" mapstructure:"timeout,omitempty"`
	PoolInitSize     *wrappers.Int32Value `protobuf:"bytes,2,opt,name=pool_init_size,json=poolInitSize,proto3" json:"pool_init_size,omitempty" toml:"pool_init_size,omitempty" mapstructure:"pool_init_size,omitempty"`
	PoolMaxSize      *wrappers.Int32Value `protobuf:"bytes,3,opt,name=pool_max_size,json=poolMaxSize,proto3" json:"pool_max_size,omitempty" toml:"pool_max_size,omitempty" mapstructure:"pool_max_size,omitempty"`
	PoolQueueMax     *wrappers.Int32Value `protobuf:"bytes,4,opt,name=pool_queue_max,json=poolQueueMax,proto3" json:"pool_queue_max,omitempty" toml:"pool_queue_max,omitempty" mapstructure:"pool_queue_max,omitempty"`
	PoolQueueTimeout *wrappers.Int32Value `protobuf:"bytes,5,opt,name=pool_queue_timeout,json=poolQueueTimeout,proto3" json:"pool_queue_timeout,omitempty" toml:"pool_queue_timeout,omitempty" mapstructure:"pool_queue_timeout,omitempty"`
}

func (x *ConfigRequest_V1_System_Depsolver) Reset() {
	*x = ConfigRequest_V1_System_Depsolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Depsolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Depsolver) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Depsolver) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Depsolver.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Depsolver) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 8}
}

func (x *ConfigRequest_V1_System_Depsolver) GetTimeout() *wrappers.Int32Value {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_Depsolver) GetPoolInitSize() *wrappers.Int32Value {
	if x != nil {
		return x.PoolInitSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Depsolver) GetPoolMaxSize() *wrappers.Int32Value {
	if x != nil {
		return x.PoolMaxSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_Depsolver) GetPoolQueueMax() *wrappers.Int32Value {
	if x != nil {
		return x.PoolQueueMax
	}
	return nil
}

func (x *ConfigRequest_V1_System_Depsolver) GetPoolQueueTimeout() *wrappers.Int32Value {
	if x != nil {
		return x.PoolQueueTimeout
	}
	return nil
}

type ConfigRequest_V1_System_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxBytes *wrappers.Int64Value `protobuf:"bytes,1,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty" toml:"max_bytes,omitempty" mapstructure:"max_bytes,omitempty"`
}

func (x *ConfigRequest_V1_System_Memory) Reset() {
	*x = ConfigRequest_V1_System_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_erchef_config_request_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Memory) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_config_erchef_config_request_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Memory.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Memory) Descriptor() ([]byte, []int) {
	return file_config_erchef_config_request_proto_rawDescGZIP(), []int{0, 0, 0, 9}
}

func (x *ConfigRequest_V1_System_Memory) GetMaxBytes() *wrappers.Int64Value {
	if x != nil {
		return x.MaxBytes
	}
	return nil
}

var File_config_erchef_config_request_proto protoreflect.FileDescriptor

var file_config_erchef_config_request_proto_rawDesc = []byte{
	0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68, 0x65,
	0x66, 0x1a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x74, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x61, 0x32, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x32, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x25, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x02, 0x76, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x31, 0x52, 0x02, 0x76, 0x31, 0x1a, 0x99, 0x24, 0x0a, 0x02, 0x56, 0x31, 0x12,
	0x46, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x47, 0x0a, 0x03, 0x73, 0x76, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x03, 0x73, 0x76, 0x63,
	0x1a, 0xf6, 0x22, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x04, 0x6d,
	0x6c, 0x73, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6c, 0x73, 0x61, 0x52, 0x04, 0x6d, 0x6c, 0x73,
	0x61, 0x12, 0x4a, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x53, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x67, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4b, 0x65, 0x79, 0x67, 0x65, 0x6e, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x67,
	0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x68, 0x65, 0x66, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x53, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x56, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x4a, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x50, 0x0a, 0x05, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x52, 0x05, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x12, 0x69, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x5c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x44, 0x65, 0x70, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x09, 0x64, 0x65, 0x70,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x4c, 0x53, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x03, 0x74, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x72, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x1a, 0x92, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x48, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0xc2, 0xf3,
	0x18, 0x13, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0xdb, 0x4f, 0x1a, 0x05,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x49, 0x70, 0x1a, 0xf9, 0x02, 0x0a, 0x03, 0x4c,
	0x6f, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x19,
	0x6d, 0x61, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x61,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x14, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x67,
	0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xf7, 0x01, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x67, 0x65,
	0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x1a, 0xbc, 0x03, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x66, 0x41, 0x70, 0x69, 0x12, 0x38, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x6b, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x53, 0x6b, 0x65, 0x77, 0x12, 0x4e, 0x0a, 0x15, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x62, 0x75, 0x6c, 0x6b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x55, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x61, 0x63, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x6c, 0x73, 0x12, 0x3f,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x71, 0x64, 0x6e, 0x1a,
	0xbd, 0x05, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x12,
	0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x4d, 0x69, 0x6e, 0x4d, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x61,
	0x78, 0x4d, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a,
	0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x3a, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x1a,
	0x85, 0x03, 0x0a, 0x05, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x61, 0x6e,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x6f, 0x6c,
	0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x6f,
	0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x70, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x49, 0x0a, 0x12,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xce, 0x02, 0x0a, 0x03, 0x53, 0x71, 0x6c, 0x12,
	0x35, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70,
	0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x49, 0x0a,
	0x12, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xc3, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x69, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x6f, 0x6c,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xd4,
	0x02, 0x0a, 0x09, 0x44, 0x65, 0x70, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e,
	0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x6f,
	0x6f, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x42, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x09, 0x0a, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x3a, 0x1b, 0xc2, 0xf3, 0x18, 0x17, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x73, 0x2d, 0x6f, 0x63, 0x2d, 0x65, 0x72, 0x63, 0x68, 0x65,
	0x66, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_erchef_config_request_proto_rawDescOnce sync.Once
	file_config_erchef_config_request_proto_rawDescData = file_config_erchef_config_request_proto_rawDesc
)

func file_config_erchef_config_request_proto_rawDescGZIP() []byte {
	file_config_erchef_config_request_proto_rawDescOnce.Do(func() {
		file_config_erchef_config_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_erchef_config_request_proto_rawDescData)
	})
	return file_config_erchef_config_request_proto_rawDescData
}

var file_config_erchef_config_request_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_config_erchef_config_request_proto_goTypes = []interface{}{
	(*ConfigRequest)(nil),                         // 0: chef.automate.domain.erchef.ConfigRequest
	(*ConfigRequest_V1)(nil),                      // 1: chef.automate.domain.erchef.ConfigRequest.V1
	(*ConfigRequest_V1_System)(nil),               // 2: chef.automate.domain.erchef.ConfigRequest.V1.System
	(*ConfigRequest_V1_Service)(nil),              // 3: chef.automate.domain.erchef.ConfigRequest.V1.Service
	(*ConfigRequest_V1_System_Network)(nil),       // 4: chef.automate.domain.erchef.ConfigRequest.V1.System.Network
	(*ConfigRequest_V1_System_Log)(nil),           // 5: chef.automate.domain.erchef.ConfigRequest.V1.System.Log
	(*ConfigRequest_V1_System_Keygen)(nil),        // 6: chef.automate.domain.erchef.ConfigRequest.V1.System.Keygen
	(*ConfigRequest_V1_System_ChefApi)(nil),       // 7: chef.automate.domain.erchef.ConfigRequest.V1.System.ChefApi
	(*ConfigRequest_V1_System_Indexing)(nil),      // 8: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing
	(*ConfigRequest_V1_System_Authz)(nil),         // 9: chef.automate.domain.erchef.ConfigRequest.V1.System.Authz
	(*ConfigRequest_V1_System_Sql)(nil),           // 10: chef.automate.domain.erchef.ConfigRequest.V1.System.Sql
	(*ConfigRequest_V1_System_DataCollector)(nil), // 11: chef.automate.domain.erchef.ConfigRequest.V1.System.DataCollector
	(*ConfigRequest_V1_System_Depsolver)(nil),     // 12: chef.automate.domain.erchef.ConfigRequest.V1.System.Depsolver
	(*ConfigRequest_V1_System_Memory)(nil),        // 13: chef.automate.domain.erchef.ConfigRequest.V1.System.Memory
	(*shared.Mlsa)(nil),                           // 14: chef.automate.infra.config.Mlsa
	(*shared.TLSCredentials)(nil),                 // 15: chef.automate.infra.config.TLSCredentials
	(*shared.External_Automate)(nil),              // 16: chef.automate.infra.config.External.Automate
	(*wrappers.Int32Value)(nil),                   // 17: google.protobuf.Int32Value
	(*wrappers.StringValue)(nil),                  // 18: google.protobuf.StringValue
	(*wrappers.Int64Value)(nil),                   // 19: google.protobuf.Int64Value
	(*wrappers.BoolValue)(nil),                    // 20: google.protobuf.BoolValue
}
var file_config_erchef_config_request_proto_depIdxs = []int32{
	1,  // 0: chef.automate.domain.erchef.ConfigRequest.v1:type_name -> chef.automate.domain.erchef.ConfigRequest.V1
	2,  // 1: chef.automate.domain.erchef.ConfigRequest.V1.sys:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System
	3,  // 2: chef.automate.domain.erchef.ConfigRequest.V1.svc:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.Service
	14, // 3: chef.automate.domain.erchef.ConfigRequest.V1.System.mlsa:type_name -> chef.automate.infra.config.Mlsa
	5,  // 4: chef.automate.domain.erchef.ConfigRequest.V1.System.log:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System.Log
	6,  // 5: chef.automate.domain.erchef.ConfigRequest.V1.System.keygen:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System.Keygen
	7,  // 6: chef.automate.domain.erchef.ConfigRequest.V1.System.api:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System.ChefApi
	8,  // 7: chef.automate.domain.erchef.ConfigRequest.V1.System.index:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing
	4,  // 8: chef.automate.domain.erchef.ConfigRequest.V1.System.network:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System.Network
	10, // 9: chef.automate.domain.erchef.ConfigRequest.V1.System.sql:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System.Sql
	9,  // 10: chef.automate.domain.erchef.ConfigRequest.V1.System.authz:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System.Authz
	11, // 11: chef.automate.domain.erchef.ConfigRequest.V1.System.data_collector:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System.DataCollector
	12, // 12: chef.automate.domain.erchef.ConfigRequest.V1.System.depsolver:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System.Depsolver
	15, // 13: chef.automate.domain.erchef.ConfigRequest.V1.System.tls:type_name -> chef.automate.infra.config.TLSCredentials
	13, // 14: chef.automate.domain.erchef.ConfigRequest.V1.System.memory:type_name -> chef.automate.domain.erchef.ConfigRequest.V1.System.Memory
	16, // 15: chef.automate.domain.erchef.ConfigRequest.V1.System.external_automate:type_name -> chef.automate.infra.config.External.Automate
	17, // 16: chef.automate.domain.erchef.ConfigRequest.V1.System.Network.port:type_name -> google.protobuf.Int32Value
	18, // 17: chef.automate.domain.erchef.ConfigRequest.V1.System.Network.listen_ip:type_name -> google.protobuf.StringValue
	18, // 18: chef.automate.domain.erchef.ConfigRequest.V1.System.Log.level:type_name -> google.protobuf.StringValue
	19, // 19: chef.automate.domain.erchef.ConfigRequest.V1.System.Log.rotation_max_bytes:type_name -> google.protobuf.Int64Value
	17, // 20: chef.automate.domain.erchef.ConfigRequest.V1.System.Log.rotation_max_files:type_name -> google.protobuf.Int32Value
	17, // 21: chef.automate.domain.erchef.ConfigRequest.V1.System.Log.max_error_logs_per_second:type_name -> google.protobuf.Int32Value
	17, // 22: chef.automate.domain.erchef.ConfigRequest.V1.System.Log.rotation_max_megabytes:type_name -> google.protobuf.Int32Value
	17, // 23: chef.automate.domain.erchef.ConfigRequest.V1.System.Keygen.worker_count:type_name -> google.protobuf.Int32Value
	17, // 24: chef.automate.domain.erchef.ConfigRequest.V1.System.Keygen.cache_size:type_name -> google.protobuf.Int32Value
	17, // 25: chef.automate.domain.erchef.ConfigRequest.V1.System.Keygen.start_size:type_name -> google.protobuf.Int32Value
	17, // 26: chef.automate.domain.erchef.ConfigRequest.V1.System.Keygen.timeout:type_name -> google.protobuf.Int32Value
	17, // 27: chef.automate.domain.erchef.ConfigRequest.V1.System.ChefApi.auth_skew:type_name -> google.protobuf.Int32Value
	17, // 28: chef.automate.domain.erchef.ConfigRequest.V1.System.ChefApi.bulk_fetch_batch_size:type_name -> google.protobuf.Int32Value
	17, // 29: chef.automate.domain.erchef.ConfigRequest.V1.System.ChefApi.max_request_size:type_name -> google.protobuf.Int32Value
	18, // 30: chef.automate.domain.erchef.ConfigRequest.V1.System.ChefApi.base_resource_url:type_name -> google.protobuf.StringValue
	20, // 31: chef.automate.domain.erchef.ConfigRequest.V1.System.ChefApi.strict_search_result_acls:type_name -> google.protobuf.BoolValue
	18, // 32: chef.automate.domain.erchef.ConfigRequest.V1.System.ChefApi.actions_fqdn:type_name -> google.protobuf.StringValue
	17, // 33: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing.reindex_batch_size:type_name -> google.protobuf.Int32Value
	17, // 34: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing.reindex_sleep_min_ms:type_name -> google.protobuf.Int32Value
	17, // 35: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing.reindex_sleep_max_ms:type_name -> google.protobuf.Int32Value
	17, // 36: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing.reindex_item_retries:type_name -> google.protobuf.Int32Value
	17, // 37: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing.timeout:type_name -> google.protobuf.Int32Value
	17, // 38: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing.pool_init_size:type_name -> google.protobuf.Int32Value
	17, // 39: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing.pool_max_size:type_name -> google.protobuf.Int32Value
	17, // 40: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing.pool_queue_max:type_name -> google.protobuf.Int32Value
	17, // 41: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing.batch_size:type_name -> google.protobuf.Int32Value
	17, // 42: chef.automate.domain.erchef.ConfigRequest.V1.System.Indexing.batch_max_wait:type_name -> google.protobuf.Int32Value
	17, // 43: chef.automate.domain.erchef.ConfigRequest.V1.System.Authz.fanout:type_name -> google.protobuf.Int32Value
	17, // 44: chef.automate.domain.erchef.ConfigRequest.V1.System.Authz.timeout:type_name -> google.protobuf.Int32Value
	17, // 45: chef.automate.domain.erchef.ConfigRequest.V1.System.Authz.pool_init_size:type_name -> google.protobuf.Int32Value
	17, // 46: chef.automate.domain.erchef.ConfigRequest.V1.System.Authz.pool_max_size:type_name -> google.protobuf.Int32Value
	17, // 47: chef.automate.domain.erchef.ConfigRequest.V1.System.Authz.pool_queue_max:type_name -> google.protobuf.Int32Value
	17, // 48: chef.automate.domain.erchef.ConfigRequest.V1.System.Authz.pool_queue_timeout:type_name -> google.protobuf.Int32Value
	17, // 49: chef.automate.domain.erchef.ConfigRequest.V1.System.Sql.timeout:type_name -> google.protobuf.Int32Value
	17, // 50: chef.automate.domain.erchef.ConfigRequest.V1.System.Sql.pool_init_size:type_name -> google.protobuf.Int32Value
	17, // 51: chef.automate.domain.erchef.ConfigRequest.V1.System.Sql.pool_max_size:type_name -> google.protobuf.Int32Value
	17, // 52: chef.automate.domain.erchef.ConfigRequest.V1.System.Sql.pool_queue_max:type_name -> google.protobuf.Int32Value
	17, // 53: chef.automate.domain.erchef.ConfigRequest.V1.System.Sql.pool_queue_timeout:type_name -> google.protobuf.Int32Value
	17, // 54: chef.automate.domain.erchef.ConfigRequest.V1.System.DataCollector.timeout:type_name -> google.protobuf.Int32Value
	17, // 55: chef.automate.domain.erchef.ConfigRequest.V1.System.DataCollector.pool_init_size:type_name -> google.protobuf.Int32Value
	17, // 56: chef.automate.domain.erchef.ConfigRequest.V1.System.DataCollector.pool_max_size:type_name -> google.protobuf.Int32Value
	17, // 57: chef.automate.domain.erchef.ConfigRequest.V1.System.DataCollector.pool_queue_max:type_name -> google.protobuf.Int32Value
	20, // 58: chef.automate.domain.erchef.ConfigRequest.V1.System.DataCollector.enabled:type_name -> google.protobuf.BoolValue
	17, // 59: chef.automate.domain.erchef.ConfigRequest.V1.System.Depsolver.timeout:type_name -> google.protobuf.Int32Value
	17, // 60: chef.automate.domain.erchef.ConfigRequest.V1.System.Depsolver.pool_init_size:type_name -> google.protobuf.Int32Value
	17, // 61: chef.automate.domain.erchef.ConfigRequest.V1.System.Depsolver.pool_max_size:type_name -> google.protobuf.Int32Value
	17, // 62: chef.automate.domain.erchef.ConfigRequest.V1.System.Depsolver.pool_queue_max:type_name -> google.protobuf.Int32Value
	17, // 63: chef.automate.domain.erchef.ConfigRequest.V1.System.Depsolver.pool_queue_timeout:type_name -> google.protobuf.Int32Value
	19, // 64: chef.automate.domain.erchef.ConfigRequest.V1.System.Memory.max_bytes:type_name -> google.protobuf.Int64Value
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_config_erchef_config_request_proto_init() }
func file_config_erchef_config_request_proto_init() {
	if File_config_erchef_config_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_erchef_config_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Keygen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_ChefApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Indexing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Authz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Sql); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_DataCollector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Depsolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_erchef_config_request_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_erchef_config_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_erchef_config_request_proto_goTypes,
		DependencyIndexes: file_config_erchef_config_request_proto_depIdxs,
		MessageInfos:      file_config_erchef_config_request_proto_msgTypes,
	}.Build()
	File_config_erchef_config_request_proto = out.File
	file_config_erchef_config_request_proto_rawDesc = nil
	file_config_erchef_config_request_proto_goTypes = nil
	file_config_erchef_config_request_proto_depIdxs = nil
}
