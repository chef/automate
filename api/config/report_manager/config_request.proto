syntax = "proto3";

package chef.automate.domain.report_manager;
option go_package = "github.com/chef/automate/api/config/report_manager";

import "config/shared/global.proto";
import "config/shared/tls.proto";
import "automate-grpc/protoc-gen-a2-config/api/a2conf/annotations.proto";
import "google/protobuf/wrappers.proto";

message ConfigRequest {
  option (chef.automate.api.service_config) = {name: "report-manager-service"};

	V1 v1 = 1;

	message V1 {
		System sys = 1;
    	Service svc = 2;

		message System {
			chef.automate.infra.config.Mlsa mlsa = 1;
			Service service = 2;
			chef.automate.infra.config.TLSCredentials tls = 3;
			chef.automate.infra.config.Log log = 4;
			Objstore objstore = 5;
			Minio minio = 6;


			message Service {
				google.protobuf.StringValue host = 1 [deprecated=true];
				google.protobuf.Int32Value port = 2 [ (chef.automate.api.port) = { name: "service", default: 10152, protocol: "grpc" } ];
				google.protobuf.BoolValue enable_large_reporting = 3;
			}

			message Objstore {
				google.protobuf.StringValue bucket = 1;
			}

			message Minio {
				google.protobuf.StringValue endpoint = 1;
				google.protobuf.StringValue root_user = 2;
				google.protobuf.StringValue root_password = 3;
				google.protobuf.BoolValue enable_ssl = 4;
				google.protobuf.StringValue cert = 5;
				google.protobuf.Int32Value concurrent_open_search_requests = 6;
				google.protobuf.Int32Value concurrent_minio_requests = 7;
			}
		}

    	message Service {
		}
	}
}
