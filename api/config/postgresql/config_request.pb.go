// -*- mode: protobuf; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*-

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: config/postgresql/config_request.proto

package pg

import (
	shared "github.com/chef/automate/api/config/shared"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-a2-config/api/a2conf"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1 *ConfigRequest_V1 `protobuf:"bytes,3,opt,name=v1,proto3" json:"v1,omitempty" toml:"v1,omitempty" mapstructure:"v1,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_postgresql_config_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_postgresql_config_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_postgresql_config_request_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigRequest) GetV1() *ConfigRequest_V1 {
	if x != nil {
		return x.V1
	}
	return nil
}

type ConfigRequest_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sys *ConfigRequest_V1_System  `protobuf:"bytes,1,opt,name=sys,proto3" json:"sys,omitempty" toml:"sys,omitempty" mapstructure:"sys,omitempty"`
	Svc *ConfigRequest_V1_Service `protobuf:"bytes,2,opt,name=svc,proto3" json:"svc,omitempty" toml:"svc,omitempty" mapstructure:"svc,omitempty"`
}

func (x *ConfigRequest_V1) Reset() {
	*x = ConfigRequest_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_postgresql_config_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1) ProtoMessage() {}

func (x *ConfigRequest_V1) ProtoReflect() protoreflect.Message {
	mi := &file_config_postgresql_config_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1) Descriptor() ([]byte, []int) {
	return file_config_postgresql_config_request_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConfigRequest_V1) GetSys() *ConfigRequest_V1_System {
	if x != nil {
		return x.Sys
	}
	return nil
}

func (x *ConfigRequest_V1) GetSvc() *ConfigRequest_V1_Service {
	if x != nil {
		return x.Svc
	}
	return nil
}

type ConfigRequest_V1_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest_V1_Service) Reset() {
	*x = ConfigRequest_V1_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_postgresql_config_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_postgresql_config_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_Service) Descriptor() ([]byte, []int) {
	return file_config_postgresql_config_request_proto_rawDescGZIP(), []int{0, 0, 0}
}

type ConfigRequest_V1_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service   *ConfigRequest_V1_System_Service   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty" toml:"service,omitempty" mapstructure:"service,omitempty"`
	Pg        *ConfigRequest_V1_System_PGConfig  `protobuf:"bytes,2,opt,name=pg,proto3" json:"pg,omitempty" toml:"pg,omitempty" mapstructure:"pg,omitempty"`
	Logger    *ConfigRequest_V1_System_Logger    `protobuf:"bytes,3,opt,name=logger,proto3" json:"logger,omitempty" toml:"logger,omitempty" mapstructure:"logger,omitempty"`
	Superuser *ConfigRequest_V1_System_Superuser `protobuf:"bytes,4,opt,name=superuser,proto3" json:"superuser,omitempty" toml:"superuser,omitempty" mapstructure:"superuser,omitempty"`
	Tls       *shared.TLSCredentials             `protobuf:"bytes,5,opt,name=tls,proto3" json:"tls,omitempty" toml:"tls,omitempty" mapstructure:"tls,omitempty"`
	Disable   *wrapperspb.BoolValue              `protobuf:"bytes,6,opt,name=disable,proto3" json:"disable,omitempty" toml:"disable,omitempty" mapstructure:"disable,omitempty"` // If set to true, automate-postgresql will noop. Derived from the global config
}

func (x *ConfigRequest_V1_System) Reset() {
	*x = ConfigRequest_V1_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_postgresql_config_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System) ProtoMessage() {}

func (x *ConfigRequest_V1_System) ProtoReflect() protoreflect.Message {
	mi := &file_config_postgresql_config_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System) Descriptor() ([]byte, []int) {
	return file_config_postgresql_config_request_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *ConfigRequest_V1_System) GetService() *ConfigRequest_V1_System_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetPg() *ConfigRequest_V1_System_PGConfig {
	if x != nil {
		return x.Pg
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetLogger() *ConfigRequest_V1_System_Logger {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetSuperuser() *ConfigRequest_V1_System_Superuser {
	if x != nil {
		return x.Superuser
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetTls() *shared.TLSCredentials {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *ConfigRequest_V1_System) GetDisable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Disable
	}
	return nil
}

type ConfigRequest_V1_System_Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty" toml:"level,omitempty" mapstructure:"level,omitempty"`
}

func (x *ConfigRequest_V1_System_Logger) Reset() {
	*x = ConfigRequest_V1_System_Logger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_postgresql_config_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Logger) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Logger) ProtoReflect() protoreflect.Message {
	mi := &file_config_postgresql_config_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Logger.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Logger) Descriptor() ([]byte, []int) {
	return file_config_postgresql_config_request_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *ConfigRequest_V1_System_Logger) GetLevel() *wrapperspb.StringValue {
	if x != nil {
		return x.Level
	}
	return nil
}

type ConfigRequest_V1_System_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Host *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"` // The listen host is no longer setable(localhost only)
	Port *wrapperspb.Int32Value  `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
}

func (x *ConfigRequest_V1_System_Service) Reset() {
	*x = ConfigRequest_V1_System_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_postgresql_config_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Service) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Service) ProtoReflect() protoreflect.Message {
	mi := &file_config_postgresql_config_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Service.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Service) Descriptor() ([]byte, []int) {
	return file_config_postgresql_config_request_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

// Deprecated: Do not use.
func (x *ConfigRequest_V1_System_Service) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ConfigRequest_V1_System_Service) GetPort() *wrapperspb.Int32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

type ConfigRequest_V1_System_PGConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxWalSize                 *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=max_wal_size,json=maxWalSize,proto3" json:"max_wal_size,omitempty" toml:"max_wal_size,omitempty" mapstructure:"max_wal_size,omitempty"`
	MinWalSize                 *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=min_wal_size,json=minWalSize,proto3" json:"min_wal_size,omitempty" toml:"min_wal_size,omitempty" mapstructure:"min_wal_size,omitempty"`
	WalKeepSize                *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=wal_keep_size,json=walKeepSize,proto3" json:"wal_keep_size,omitempty" toml:"wal_keep_size,omitempty" mapstructure:"wal_keep_size,omitempty"`
	CheckpointTimeout          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=checkpoint_timeout,json=checkpointTimeout,proto3" json:"checkpoint_timeout,omitempty" toml:"checkpoint_timeout,omitempty" mapstructure:"checkpoint_timeout,omitempty"`
	CheckpointCompletionTarget *wrapperspb.FloatValue  `protobuf:"bytes,7,opt,name=checkpoint_completion_target,json=checkpointCompletionTarget,proto3" json:"checkpoint_completion_target,omitempty" toml:"checkpoint_completion_target,omitempty" mapstructure:"checkpoint_completion_target,omitempty"`
	CheckpointWarning          *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=checkpoint_warning,json=checkpointWarning,proto3" json:"checkpoint_warning,omitempty" toml:"checkpoint_warning,omitempty" mapstructure:"checkpoint_warning,omitempty"`
	EffectiveCacheSize         *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=effective_cache_size,json=effectiveCacheSize,proto3" json:"effective_cache_size,omitempty" toml:"effective_cache_size,omitempty" mapstructure:"effective_cache_size,omitempty"`
	MaxConnections             *wrapperspb.Int32Value  `protobuf:"bytes,10,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty" toml:"max_connections,omitempty" mapstructure:"max_connections,omitempty"`
	MaxLocksPerTransaction     *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=max_locks_per_transaction,json=maxLocksPerTransaction,proto3" json:"max_locks_per_transaction,omitempty" toml:"max_locks_per_transaction,omitempty" mapstructure:"max_locks_per_transaction,omitempty"`
	Md5AuthCidrAddresses       []string                `protobuf:"bytes,12,rep,name=md5_auth_cidr_addresses,json=md5AuthCidrAddresses,proto3" json:"md5_auth_cidr_addresses,omitempty" toml:"md5_auth_cidr_addresses,omitempty" mapstructure:"md5_auth_cidr_addresses,omitempty"`
	SharedBuffers              *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=shared_buffers,json=sharedBuffers,proto3" json:"shared_buffers,omitempty" toml:"shared_buffers,omitempty" mapstructure:"shared_buffers,omitempty"`
	WorkMem                    *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=work_mem,json=workMem,proto3" json:"work_mem,omitempty" toml:"work_mem,omitempty" mapstructure:"work_mem,omitempty"`
	SslCiphers                 *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=ssl_ciphers,json=sslCiphers,proto3" json:"ssl_ciphers,omitempty" toml:"ssl_ciphers,omitempty" mapstructure:"ssl_ciphers,omitempty"`
	LogDisconnections          *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=log_disconnections,json=logDisconnections,proto3" json:"log_disconnections,omitempty" toml:"log_disconnections,omitempty" mapstructure:"log_disconnections,omitempty"`
	ClientMinMessages          *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=client_min_messages,json=clientMinMessages,proto3" json:"client_min_messages,omitempty" toml:"client_min_messages,omitempty" mapstructure:"client_min_messages,omitempty"`
}

func (x *ConfigRequest_V1_System_PGConfig) Reset() {
	*x = ConfigRequest_V1_System_PGConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_postgresql_config_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_PGConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_PGConfig) ProtoMessage() {}

func (x *ConfigRequest_V1_System_PGConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_postgresql_config_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_PGConfig.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_PGConfig) Descriptor() ([]byte, []int) {
	return file_config_postgresql_config_request_proto_rawDescGZIP(), []int{0, 0, 1, 2}
}

func (x *ConfigRequest_V1_System_PGConfig) GetMaxWalSize() *wrapperspb.StringValue {
	if x != nil {
		return x.MaxWalSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetMinWalSize() *wrapperspb.StringValue {
	if x != nil {
		return x.MinWalSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetWalKeepSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.WalKeepSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetCheckpointTimeout() *wrapperspb.StringValue {
	if x != nil {
		return x.CheckpointTimeout
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetCheckpointCompletionTarget() *wrapperspb.FloatValue {
	if x != nil {
		return x.CheckpointCompletionTarget
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetCheckpointWarning() *wrapperspb.StringValue {
	if x != nil {
		return x.CheckpointWarning
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetEffectiveCacheSize() *wrapperspb.StringValue {
	if x != nil {
		return x.EffectiveCacheSize
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetMaxConnections() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetMaxLocksPerTransaction() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxLocksPerTransaction
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetMd5AuthCidrAddresses() []string {
	if x != nil {
		return x.Md5AuthCidrAddresses
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetSharedBuffers() *wrapperspb.StringValue {
	if x != nil {
		return x.SharedBuffers
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetWorkMem() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkMem
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetSslCiphers() *wrapperspb.StringValue {
	if x != nil {
		return x.SslCiphers
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetLogDisconnections() *wrapperspb.StringValue {
	if x != nil {
		return x.LogDisconnections
	}
	return nil
}

func (x *ConfigRequest_V1_System_PGConfig) GetClientMinMessages() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientMinMessages
	}
	return nil
}

type ConfigRequest_V1_System_Superuser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
}

func (x *ConfigRequest_V1_System_Superuser) Reset() {
	*x = ConfigRequest_V1_System_Superuser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_postgresql_config_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest_V1_System_Superuser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest_V1_System_Superuser) ProtoMessage() {}

func (x *ConfigRequest_V1_System_Superuser) ProtoReflect() protoreflect.Message {
	mi := &file_config_postgresql_config_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest_V1_System_Superuser.ProtoReflect.Descriptor instead.
func (*ConfigRequest_V1_System_Superuser) Descriptor() ([]byte, []int) {
	return file_config_postgresql_config_request_proto_rawDescGZIP(), []int{0, 0, 1, 3}
}

func (x *ConfigRequest_V1_System_Superuser) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

var File_config_postgresql_config_request_proto protoreflect.FileDescriptor

var file_config_postgresql_config_request_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x74, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2d, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x61, 0x32, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x32, 0x63, 0x6f, 0x6e, 0x66,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd7, 0x10, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x31, 0x52, 0x02, 0x76, 0x31, 0x1a, 0xe2, 0x0f, 0x0a, 0x02, 0x56, 0x31, 0x12, 0x49, 0x0a,
	0x03, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x4a, 0x0a, 0x03, 0x73, 0x76, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x03, 0x73, 0x76, 0x63, 0x1a, 0x09, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0xb9, 0x0e, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x59, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x02, 0x70, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x47, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x02, 0x70, 0x67, 0x12, 0x56, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x5f, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x71, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x75, 0x73, 0x65, 0x72, 0x52, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3c, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x1a, 0x87, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x15, 0xc2, 0xf3, 0x18, 0x11, 0x0a, 0x05, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x10, 0xb8, 0x2a, 0x1a,
	0x05, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xc7, 0x08, 0x0a,
	0x08, 0x50, 0x47, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x57, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x69, 0x6e,
	0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x57, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x77, 0x61, 0x6c,
	0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77,
	0x61, 0x6c, 0x4b, 0x65, 0x65, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5d, 0x0a, 0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x14, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x4c, 0x6f,
	0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x64, 0x35, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x69,
	0x64, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x6d, 0x64, 0x35, 0x41, 0x75, 0x74, 0x68, 0x43, 0x69, 0x64, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x6d, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x73, 0x6c, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x03, 0x1a, 0x43, 0x0a, 0x09, 0x53, 0x75, 0x70, 0x65, 0x72, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x3a, 0x19, 0xc2, 0xf3, 0x18,
	0x15, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x03, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x3b, 0x70,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_postgresql_config_request_proto_rawDescOnce sync.Once
	file_config_postgresql_config_request_proto_rawDescData = file_config_postgresql_config_request_proto_rawDesc
)

func file_config_postgresql_config_request_proto_rawDescGZIP() []byte {
	file_config_postgresql_config_request_proto_rawDescOnce.Do(func() {
		file_config_postgresql_config_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_postgresql_config_request_proto_rawDescData)
	})
	return file_config_postgresql_config_request_proto_rawDescData
}

var file_config_postgresql_config_request_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_config_postgresql_config_request_proto_goTypes = []interface{}{
	(*ConfigRequest)(nil),                     // 0: chef.automate.infra.postgresql.ConfigRequest
	(*ConfigRequest_V1)(nil),                  // 1: chef.automate.infra.postgresql.ConfigRequest.V1
	(*ConfigRequest_V1_Service)(nil),          // 2: chef.automate.infra.postgresql.ConfigRequest.V1.Service
	(*ConfigRequest_V1_System)(nil),           // 3: chef.automate.infra.postgresql.ConfigRequest.V1.System
	(*ConfigRequest_V1_System_Logger)(nil),    // 4: chef.automate.infra.postgresql.ConfigRequest.V1.System.Logger
	(*ConfigRequest_V1_System_Service)(nil),   // 5: chef.automate.infra.postgresql.ConfigRequest.V1.System.Service
	(*ConfigRequest_V1_System_PGConfig)(nil),  // 6: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig
	(*ConfigRequest_V1_System_Superuser)(nil), // 7: chef.automate.infra.postgresql.ConfigRequest.V1.System.Superuser
	(*shared.TLSCredentials)(nil),             // 8: chef.automate.infra.config.TLSCredentials
	(*wrapperspb.BoolValue)(nil),              // 9: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),            // 10: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),             // 11: google.protobuf.Int32Value
	(*wrapperspb.FloatValue)(nil),             // 12: google.protobuf.FloatValue
}
var file_config_postgresql_config_request_proto_depIdxs = []int32{
	1,  // 0: chef.automate.infra.postgresql.ConfigRequest.v1:type_name -> chef.automate.infra.postgresql.ConfigRequest.V1
	3,  // 1: chef.automate.infra.postgresql.ConfigRequest.V1.sys:type_name -> chef.automate.infra.postgresql.ConfigRequest.V1.System
	2,  // 2: chef.automate.infra.postgresql.ConfigRequest.V1.svc:type_name -> chef.automate.infra.postgresql.ConfigRequest.V1.Service
	5,  // 3: chef.automate.infra.postgresql.ConfigRequest.V1.System.service:type_name -> chef.automate.infra.postgresql.ConfigRequest.V1.System.Service
	6,  // 4: chef.automate.infra.postgresql.ConfigRequest.V1.System.pg:type_name -> chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig
	4,  // 5: chef.automate.infra.postgresql.ConfigRequest.V1.System.logger:type_name -> chef.automate.infra.postgresql.ConfigRequest.V1.System.Logger
	7,  // 6: chef.automate.infra.postgresql.ConfigRequest.V1.System.superuser:type_name -> chef.automate.infra.postgresql.ConfigRequest.V1.System.Superuser
	8,  // 7: chef.automate.infra.postgresql.ConfigRequest.V1.System.tls:type_name -> chef.automate.infra.config.TLSCredentials
	9,  // 8: chef.automate.infra.postgresql.ConfigRequest.V1.System.disable:type_name -> google.protobuf.BoolValue
	10, // 9: chef.automate.infra.postgresql.ConfigRequest.V1.System.Logger.level:type_name -> google.protobuf.StringValue
	10, // 10: chef.automate.infra.postgresql.ConfigRequest.V1.System.Service.host:type_name -> google.protobuf.StringValue
	11, // 11: chef.automate.infra.postgresql.ConfigRequest.V1.System.Service.port:type_name -> google.protobuf.Int32Value
	10, // 12: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.max_wal_size:type_name -> google.protobuf.StringValue
	10, // 13: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.min_wal_size:type_name -> google.protobuf.StringValue
	11, // 14: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.wal_keep_size:type_name -> google.protobuf.Int32Value
	10, // 15: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.checkpoint_timeout:type_name -> google.protobuf.StringValue
	12, // 16: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.checkpoint_completion_target:type_name -> google.protobuf.FloatValue
	10, // 17: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.checkpoint_warning:type_name -> google.protobuf.StringValue
	10, // 18: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.effective_cache_size:type_name -> google.protobuf.StringValue
	11, // 19: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.max_connections:type_name -> google.protobuf.Int32Value
	11, // 20: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.max_locks_per_transaction:type_name -> google.protobuf.Int32Value
	10, // 21: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.shared_buffers:type_name -> google.protobuf.StringValue
	10, // 22: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.work_mem:type_name -> google.protobuf.StringValue
	10, // 23: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.ssl_ciphers:type_name -> google.protobuf.StringValue
	10, // 24: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.log_disconnections:type_name -> google.protobuf.StringValue
	10, // 25: chef.automate.infra.postgresql.ConfigRequest.V1.System.PGConfig.client_min_messages:type_name -> google.protobuf.StringValue
	10, // 26: chef.automate.infra.postgresql.ConfigRequest.V1.System.Superuser.name:type_name -> google.protobuf.StringValue
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_config_postgresql_config_request_proto_init() }
func file_config_postgresql_config_request_proto_init() {
	if File_config_postgresql_config_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_postgresql_config_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_postgresql_config_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_postgresql_config_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_postgresql_config_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_postgresql_config_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Logger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_postgresql_config_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_postgresql_config_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_PGConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_postgresql_config_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest_V1_System_Superuser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_postgresql_config_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_postgresql_config_request_proto_goTypes,
		DependencyIndexes: file_config_postgresql_config_request_proto_depIdxs,
		MessageInfos:      file_config_postgresql_config_request_proto_msgTypes,
	}.Build()
	File_config_postgresql_config_request_proto = out.File
	file_config_postgresql_config_request_proto_rawDesc = nil
	file_config_postgresql_config_request_proto_goTypes = nil
	file_config_postgresql_config_request_proto_depIdxs = nil
}
