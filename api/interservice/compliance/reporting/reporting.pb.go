// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: interservice/compliance/reporting/reporting.proto

package reporting

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

// Enum value maps for Query_OrderType.
var (
	Query_OrderType_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Query_OrderType_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Query_OrderType) Enum() *Query_OrderType {
	p := new(Query_OrderType)
	*p = x
	return p
}

func (x Query_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_compliance_reporting_reporting_proto_enumTypes[0].Descriptor()
}

func (Query_OrderType) Type() protoreflect.EnumType {
	return &file_interservice_compliance_reporting_reporting_proto_enumTypes[0]
}

func (x Query_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_OrderType.Descriptor instead.
func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{4, 0}
}

type ReportContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Filters []*ListFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
}

func (x *ReportContentRequest) Reset() {
	*x = ReportContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportContentRequest) ProtoMessage() {}

func (x *ReportContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportContentRequest.ProtoReflect.Descriptor instead.
func (*ReportContentRequest) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{0}
}

func (x *ReportContentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReportContentRequest) GetFilters() []*ListFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ReportContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty" toml:"content,omitempty" mapstructure:"content,omitempty"`
}

func (x *ReportContentResponse) Reset() {
	*x = ReportContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportContentResponse) ProtoMessage() {}

func (x *ReportContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportContentResponse.ProtoReflect.Descriptor instead.
func (*ReportContentResponse) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{1}
}

func (x *ReportContentResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type ExportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty" toml:"content,omitempty" mapstructure:"content,omitempty"`
}

func (x *ExportData) Reset() {
	*x = ExportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportData) ProtoMessage() {}

func (x *ExportData) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportData.ProtoReflect.Descriptor instead.
func (*ExportData) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{2}
}

func (x *ExportData) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{3}
}

func (x *Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string          `protobuf:"bytes,18,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Type    string          `protobuf:"bytes,19,opt,name=type,proto3" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
	Filters []*ListFilter   `protobuf:"bytes,20,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
	Order   Query_OrderType `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.domain.compliance.reporting.Query_OrderType" json:"order,omitempty" toml:"order,omitempty" mapstructure:"order,omitempty"`
	Sort    string          `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty" toml:"sort,omitempty" mapstructure:"sort,omitempty"`
	Page    int32           `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty" toml:"page,omitempty" mapstructure:"page,omitempty"`
	PerPage int32           `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty" toml:"per_page,omitempty" mapstructure:"per_page,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{4}
}

func (x *Query) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Query) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Query) GetFilters() []*ListFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Query) GetOrder() Query_OrderType {
	if x != nil {
		return x.Order
	}
	return Query_ASC
}

func (x *Query) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *Query) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Query) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type ListFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,20,rep,name=values,proto3" json:"values,omitempty" toml:"values,omitempty" mapstructure:"values,omitempty"`
	Type   string   `protobuf:"bytes,21,opt,name=type,proto3" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
}

func (x *ListFilter) Reset() {
	*x = ListFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilter) ProtoMessage() {}

func (x *ListFilter) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilter.ProtoReflect.Descriptor instead.
func (*ListFilter) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{5}
}

func (x *ListFilter) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ListFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ListFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*ListFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
}

func (x *ListFilters) Reset() {
	*x = ListFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilters) ProtoMessage() {}

func (x *ListFilters) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilters.ProtoReflect.Descriptor instead.
func (*ListFilters) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{6}
}

func (x *ListFilters) GetFilters() []*ListFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type Total struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty" toml:"total,omitempty" mapstructure:"total,omitempty"`
}

func (x *Total) Reset() {
	*x = Total{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Total) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Total) ProtoMessage() {}

func (x *Total) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Total.ProtoReflect.Descriptor instead.
func (*Total) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{7}
}

func (x *Total) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Failed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty" toml:"total,omitempty" mapstructure:"total,omitempty"`
	Minor    int32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty" toml:"minor,omitempty" mapstructure:"minor,omitempty"`
	Major    int32 `protobuf:"varint,3,opt,name=major,proto3" json:"major,omitempty" toml:"major,omitempty" mapstructure:"major,omitempty"`
	Critical int32 `protobuf:"varint,4,opt,name=critical,proto3" json:"critical,omitempty" toml:"critical,omitempty" mapstructure:"critical,omitempty"`
}

func (x *Failed) Reset() {
	*x = Failed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failed) ProtoMessage() {}

func (x *Failed) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failed.ProtoReflect.Descriptor instead.
func (*Failed) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{8}
}

func (x *Failed) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Failed) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Failed) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Failed) GetCritical() int32 {
	if x != nil {
		return x.Critical
	}
	return 0
}

type ControlSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int32   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty" toml:"total,omitempty" mapstructure:"total,omitempty"`
	Passed  *Total  `protobuf:"bytes,2,opt,name=passed,proto3" json:"passed,omitempty" toml:"passed,omitempty" mapstructure:"passed,omitempty"`
	Skipped *Total  `protobuf:"bytes,3,opt,name=skipped,proto3" json:"skipped,omitempty" toml:"skipped,omitempty" mapstructure:"skipped,omitempty"`
	Failed  *Failed `protobuf:"bytes,4,opt,name=failed,proto3" json:"failed,omitempty" toml:"failed,omitempty" mapstructure:"failed,omitempty"`
	Waived  *Total  `protobuf:"bytes,5,opt,name=waived,proto3" json:"waived,omitempty" toml:"waived,omitempty" mapstructure:"waived,omitempty"`
}

func (x *ControlSummary) Reset() {
	*x = ControlSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlSummary) ProtoMessage() {}

func (x *ControlSummary) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlSummary.ProtoReflect.Descriptor instead.
func (*ControlSummary) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{9}
}

func (x *ControlSummary) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ControlSummary) GetPassed() *Total {
	if x != nil {
		return x.Passed
	}
	return nil
}

func (x *ControlSummary) GetSkipped() *Total {
	if x != nil {
		return x.Skipped
	}
	return nil
}

func (x *ControlSummary) GetFailed() *Failed {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *ControlSummary) GetWaived() *Total {
	if x != nil {
		return x.Waived
	}
	return nil
}

type ControlItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       string        `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty" toml:"text,omitempty" mapstructure:"text,omitempty"`
	Size       int32         `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty" toml:"size,omitempty" mapstructure:"size,omitempty"`
	PageNumber int32         `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty" toml:"page_number,omitempty" mapstructure:"page_number,omitempty"`
	Filters    []*ListFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
}

func (x *ControlItemRequest) Reset() {
	*x = ControlItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlItemRequest) ProtoMessage() {}

func (x *ControlItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlItemRequest.ProtoReflect.Descriptor instead.
func (*ControlItemRequest) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{10}
}

func (x *ControlItemRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ControlItemRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ControlItemRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ControlItemRequest) GetFilters() []*ListFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type WaiverData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaivedStr      string          `protobuf:"bytes,1,opt,name=waived_str,json=waivedStr,proto3" json:"waived_str,omitempty" toml:"waived_str,omitempty" mapstructure:"waived_str,omitempty"`
	ExpirationDate string          `protobuf:"bytes,2,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty" toml:"expiration_date,omitempty" mapstructure:"expiration_date,omitempty"`
	Justification  string          `protobuf:"bytes,3,opt,name=justification,proto3" json:"justification,omitempty" toml:"justification,omitempty" mapstructure:"justification,omitempty"`
	WaiverSummary  *ControlSummary `protobuf:"bytes,4,opt,name=waiver_summary,json=waiverSummary,proto3" json:"waiver_summary,omitempty" toml:"waiver_summary,omitempty" mapstructure:"waiver_summary,omitempty"`
}

func (x *WaiverData) Reset() {
	*x = WaiverData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaiverData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaiverData) ProtoMessage() {}

func (x *WaiverData) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaiverData.ProtoReflect.Descriptor instead.
func (*WaiverData) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{11}
}

func (x *WaiverData) GetWaivedStr() string {
	if x != nil {
		return x.WaivedStr
	}
	return ""
}

func (x *WaiverData) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *WaiverData) GetJustification() string {
	if x != nil {
		return x.Justification
	}
	return ""
}

func (x *WaiverData) GetWaiverSummary() *ControlSummary {
	if x != nil {
		return x.WaiverSummary
	}
	return nil
}

type ControlItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" toml:"title,omitempty" mapstructure:"title,omitempty"`
	Profile        *ProfileMin            `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty" toml:"profile,omitempty" mapstructure:"profile,omitempty"`
	Impact         float32                `protobuf:"fixed32,4,opt,name=impact,proto3" json:"impact,omitempty" toml:"impact,omitempty" mapstructure:"impact,omitempty"`
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
	ControlSummary *ControlSummary        `protobuf:"bytes,6,opt,name=control_summary,json=controlSummary,proto3" json:"control_summary,omitempty" toml:"control_summary,omitempty" mapstructure:"control_summary,omitempty"`
	Waivers        []*WaiverData          `protobuf:"bytes,7,rep,name=waivers,proto3" json:"waivers,omitempty" toml:"waivers,omitempty" mapstructure:"waivers,omitempty"`
}

func (x *ControlItem) Reset() {
	*x = ControlItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlItem) ProtoMessage() {}

func (x *ControlItem) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlItem.ProtoReflect.Descriptor instead.
func (*ControlItem) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{12}
}

func (x *ControlItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ControlItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ControlItem) GetProfile() *ProfileMin {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ControlItem) GetImpact() float32 {
	if x != nil {
		return x.Impact
	}
	return 0
}

func (x *ControlItem) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ControlItem) GetControlSummary() *ControlSummary {
	if x != nil {
		return x.ControlSummary
	}
	return nil
}

func (x *ControlItem) GetWaivers() []*WaiverData {
	if x != nil {
		return x.Waivers
	}
	return nil
}

type ControlItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlItems         []*ControlItem  `protobuf:"bytes,1,rep,name=control_items,json=controlItems,proto3" json:"control_items,omitempty" toml:"control_items,omitempty" mapstructure:"control_items,omitempty"`
	ControlSummaryTotals *ControlSummary `protobuf:"bytes,2,opt,name=control_summary_totals,json=controlSummaryTotals,proto3" json:"control_summary_totals,omitempty" toml:"control_summary_totals,omitempty" mapstructure:"control_summary_totals,omitempty"`
}

func (x *ControlItems) Reset() {
	*x = ControlItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlItems) ProtoMessage() {}

func (x *ControlItems) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlItems.ProtoReflect.Descriptor instead.
func (*ControlItems) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{13}
}

func (x *ControlItems) GetControlItems() []*ControlItem {
	if x != nil {
		return x.ControlItems
	}
	return nil
}

func (x *ControlItems) GetControlSummaryTotals() *ControlSummary {
	if x != nil {
		return x.ControlSummaryTotals
	}
	return nil
}

type ReportsSummaryLevelOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*ReportSummaryLevelOne `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty" toml:"reports,omitempty" mapstructure:"reports,omitempty"`
	Total   int32                    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty" toml:"total,omitempty" mapstructure:"total,omitempty"`
}

func (x *ReportsSummaryLevelOne) Reset() {
	*x = ReportsSummaryLevelOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportsSummaryLevelOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportsSummaryLevelOne) ProtoMessage() {}

func (x *ReportsSummaryLevelOne) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportsSummaryLevelOne.ProtoReflect.Descriptor instead.
func (*ReportsSummaryLevelOne) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{14}
}

func (x *ReportsSummaryLevelOne) GetReports() []*ReportSummaryLevelOne {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *ReportsSummaryLevelOne) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ReportSummaryLevelOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	NodeId    string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" toml:"node_id,omitempty" mapstructure:"node_id,omitempty"`
	NodeName  string                 `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty" toml:"node_name,omitempty" mapstructure:"node_name,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
	Status    string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Controls  *ControlSummary        `protobuf:"bytes,6,opt,name=controls,proto3" json:"controls,omitempty" toml:"controls,omitempty" mapstructure:"controls,omitempty"`
	Ipaddress string                 `protobuf:"bytes,7,opt,name=ipaddress,proto3" json:"ipaddress,omitempty" toml:"ipaddress,omitempty" mapstructure:"ipaddress,omitempty"`
}

func (x *ReportSummaryLevelOne) Reset() {
	*x = ReportSummaryLevelOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSummaryLevelOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSummaryLevelOne) ProtoMessage() {}

func (x *ReportSummaryLevelOne) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSummaryLevelOne.ProtoReflect.Descriptor instead.
func (*ReportSummaryLevelOne) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{15}
}

func (x *ReportSummaryLevelOne) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReportSummaryLevelOne) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ReportSummaryLevelOne) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ReportSummaryLevelOne) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ReportSummaryLevelOne) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReportSummaryLevelOne) GetControls() *ControlSummary {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *ReportSummaryLevelOne) GetIpaddress() string {
	if x != nil {
		return x.Ipaddress
	}
	return ""
}

type Reports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*Report `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty" toml:"reports,omitempty" mapstructure:"reports,omitempty"`
	Total   int32     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty" toml:"total,omitempty" mapstructure:"total,omitempty"`
}

func (x *Reports) Reset() {
	*x = Reports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reports) ProtoMessage() {}

func (x *Reports) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reports.ProtoReflect.Descriptor instead.
func (*Reports) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{16}
}

func (x *Reports) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *Reports) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	NodeId           string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" toml:"node_id,omitempty" mapstructure:"node_id,omitempty"`
	NodeName         string                 `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty" toml:"node_name,omitempty" mapstructure:"node_name,omitempty"`
	EndTime          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
	Status           string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Controls         *ControlSummary        `protobuf:"bytes,6,opt,name=controls,proto3" json:"controls,omitempty" toml:"controls,omitempty" mapstructure:"controls,omitempty"`
	Environment      string                 `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty" toml:"environment,omitempty" mapstructure:"environment,omitempty"`
	Version          string                 `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	Platform         *Platform              `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty" toml:"platform,omitempty" mapstructure:"platform,omitempty"`
	Statistics       *Statistics            `protobuf:"bytes,10,opt,name=statistics,proto3" json:"statistics,omitempty" toml:"statistics,omitempty" mapstructure:"statistics,omitempty"`
	Profiles         []*Profile             `protobuf:"bytes,11,rep,name=profiles,proto3" json:"profiles,omitempty" toml:"profiles,omitempty" mapstructure:"profiles,omitempty"`
	JobId            string                 `protobuf:"bytes,12,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty" toml:"job_id,omitempty" mapstructure:"job_id,omitempty"`
	Ipaddress        string                 `protobuf:"bytes,13,opt,name=ipaddress,proto3" json:"ipaddress,omitempty" toml:"ipaddress,omitempty" mapstructure:"ipaddress,omitempty"`
	Fqdn             string                 `protobuf:"bytes,14,opt,name=fqdn,proto3" json:"fqdn,omitempty" toml:"fqdn,omitempty" mapstructure:"fqdn,omitempty"`
	ChefServer       string                 `protobuf:"bytes,15,opt,name=chef_server,json=chefServer,proto3" json:"chef_server,omitempty" toml:"chef_server,omitempty" mapstructure:"chef_server,omitempty"`
	ChefOrganization string                 `protobuf:"bytes,16,opt,name=chef_organization,json=chefOrganization,proto3" json:"chef_organization,omitempty" toml:"chef_organization,omitempty" mapstructure:"chef_organization,omitempty"`
	Roles            []string               `protobuf:"bytes,17,rep,name=roles,proto3" json:"roles,omitempty" toml:"roles,omitempty" mapstructure:"roles,omitempty"`
	ChefTags         []string               `protobuf:"bytes,18,rep,name=chef_tags,json=chefTags,proto3" json:"chef_tags,omitempty" toml:"chef_tags,omitempty" mapstructure:"chef_tags,omitempty"`
	Projects         []string               `protobuf:"bytes,20,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
	StatusMessage    string                 `protobuf:"bytes,21,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty" toml:"status_message,omitempty" mapstructure:"status_message,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{17}
}

func (x *Report) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Report) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Report) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Report) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Report) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Report) GetControls() *ControlSummary {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *Report) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Report) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Report) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *Report) GetStatistics() *Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Report) GetProfiles() []*Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Report) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Report) GetIpaddress() string {
	if x != nil {
		return x.Ipaddress
	}
	return ""
}

func (x *Report) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *Report) GetChefServer() string {
	if x != nil {
		return x.ChefServer
	}
	return ""
}

func (x *Report) GetChefOrganization() string {
	if x != nil {
		return x.ChefOrganization
	}
	return ""
}

func (x *Report) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Report) GetChefTags() []string {
	if x != nil {
		return x.ChefTags
	}
	return nil
}

func (x *Report) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *Report) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type NodeHeaderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId        string                   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" toml:"node_id,omitempty" mapstructure:"node_id,omitempty"`
	NodeName      string                   `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty" toml:"node_name,omitempty" mapstructure:"node_name,omitempty"`
	EndTime       *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
	Status        string                   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Environment   string                   `protobuf:"bytes,5,opt,name=environment,proto3" json:"environment,omitempty" toml:"environment,omitempty" mapstructure:"environment,omitempty"`
	Version       string                   `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	Platform      *Platform                `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty" toml:"platform,omitempty" mapstructure:"platform,omitempty"`
	Profiles      []*NodeHeaderProfileInfo `protobuf:"bytes,8,rep,name=profiles,proto3" json:"profiles,omitempty" toml:"profiles,omitempty" mapstructure:"profiles,omitempty"`
	Roles         []string                 `protobuf:"bytes,9,rep,name=roles,proto3" json:"roles,omitempty" toml:"roles,omitempty" mapstructure:"roles,omitempty"`
	StatusMessage string                   `protobuf:"bytes,10,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty" toml:"status_message,omitempty" mapstructure:"status_message,omitempty"`
}

func (x *NodeHeaderInfo) Reset() {
	*x = NodeHeaderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHeaderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHeaderInfo) ProtoMessage() {}

func (x *NodeHeaderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHeaderInfo.ProtoReflect.Descriptor instead.
func (*NodeHeaderInfo) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{18}
}

func (x *NodeHeaderInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeHeaderInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeHeaderInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *NodeHeaderInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeHeaderInfo) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *NodeHeaderInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NodeHeaderInfo) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *NodeHeaderInfo) GetProfiles() []*NodeHeaderProfileInfo {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *NodeHeaderInfo) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *NodeHeaderInfo) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type ReportIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids        []string      `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty" toml:"ids,omitempty" mapstructure:"ids,omitempty"`
	ReportData []*ReportData `protobuf:"bytes,2,rep,name=report_data,json=reportData,proto3" json:"report_data,omitempty" toml:"report_data,omitempty" mapstructure:"report_data,omitempty"`
}

func (x *ReportIds) Reset() {
	*x = ReportIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportIds) ProtoMessage() {}

func (x *ReportIds) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportIds.ProtoReflect.Descriptor instead.
func (*ReportIds) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{19}
}

func (x *ReportIds) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ReportIds) GetReportData() []*ReportData {
	if x != nil {
		return x.ReportData
	}
	return nil
}

type ReportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
}

func (x *ReportData) Reset() {
	*x = ReportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportData) ProtoMessage() {}

func (x *ReportData) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportData.ProtoReflect.Descriptor instead.
func (*ReportData) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{20}
}

func (x *ReportData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReportData) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Title          string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" toml:"title,omitempty" mapstructure:"title,omitempty"`
	Maintainer     string        `protobuf:"bytes,3,opt,name=maintainer,proto3" json:"maintainer,omitempty" toml:"maintainer,omitempty" mapstructure:"maintainer,omitempty"`
	Copyright      string        `protobuf:"bytes,4,opt,name=copyright,proto3" json:"copyright,omitempty" toml:"copyright,omitempty" mapstructure:"copyright,omitempty"`
	CopyrightEmail string        `protobuf:"bytes,5,opt,name=copyright_email,json=copyrightEmail,proto3" json:"copyright_email,omitempty" toml:"copyright_email,omitempty" mapstructure:"copyright_email,omitempty"`
	License        string        `protobuf:"bytes,6,opt,name=license,proto3" json:"license,omitempty" toml:"license,omitempty" mapstructure:"license,omitempty"`
	Summary        string        `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty" toml:"summary,omitempty" mapstructure:"summary,omitempty"`
	Version        string        `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	Owner          string        `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty" toml:"owner,omitempty" mapstructure:"owner,omitempty"`
	Full           string        `protobuf:"bytes,10,opt,name=full,proto3" json:"full,omitempty" toml:"full,omitempty" mapstructure:"full,omitempty"`
	Supports       []*Support    `protobuf:"bytes,16,rep,name=supports,proto3" json:"supports,omitempty" toml:"supports,omitempty" mapstructure:"supports,omitempty"`
	Depends        []*Dependency `protobuf:"bytes,17,rep,name=depends,proto3" json:"depends,omitempty" toml:"depends,omitempty" mapstructure:"depends,omitempty"`
	Sha256         string        `protobuf:"bytes,18,opt,name=sha256,proto3" json:"sha256,omitempty" toml:"sha256,omitempty" mapstructure:"sha256,omitempty"`
	Groups         []*Group      `protobuf:"bytes,19,rep,name=groups,proto3" json:"groups,omitempty" toml:"groups,omitempty" mapstructure:"groups,omitempty"`
	Controls       []*Control    `protobuf:"bytes,20,rep,name=controls,proto3" json:"controls,omitempty" toml:"controls,omitempty" mapstructure:"controls,omitempty"`
	Attributes     []*Attribute  `protobuf:"bytes,21,rep,name=attributes,proto3" json:"attributes,omitempty" toml:"attributes,omitempty" mapstructure:"attributes,omitempty"`
	LatestVersion  string        `protobuf:"bytes,22,opt,name=latest_version,json=latestVersion,proto3" json:"latest_version,omitempty" toml:"latest_version,omitempty" mapstructure:"latest_version,omitempty"`
	Status         string        `protobuf:"bytes,23,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	SkipMessage    string        `protobuf:"bytes,24,opt,name=skip_message,json=skipMessage,proto3" json:"skip_message,omitempty" toml:"skip_message,omitempty" mapstructure:"skip_message,omitempty"`
	StatusMessage  string        `protobuf:"bytes,25,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty" toml:"status_message,omitempty" mapstructure:"status_message,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{21}
}

func (x *Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Profile) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Profile) GetMaintainer() string {
	if x != nil {
		return x.Maintainer
	}
	return ""
}

func (x *Profile) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *Profile) GetCopyrightEmail() string {
	if x != nil {
		return x.CopyrightEmail
	}
	return ""
}

func (x *Profile) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Profile) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Profile) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Profile) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Profile) GetFull() string {
	if x != nil {
		return x.Full
	}
	return ""
}

func (x *Profile) GetSupports() []*Support {
	if x != nil {
		return x.Supports
	}
	return nil
}

func (x *Profile) GetDepends() []*Dependency {
	if x != nil {
		return x.Depends
	}
	return nil
}

func (x *Profile) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *Profile) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Profile) GetControls() []*Control {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *Profile) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Profile) GetLatestVersion() string {
	if x != nil {
		return x.LatestVersion
	}
	return ""
}

func (x *Profile) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Profile) GetSkipMessage() string {
	if x != nil {
		return x.SkipMessage
	}
	return ""
}

func (x *Profile) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type NodeHeaderProfileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Status        string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	StatusMessage string `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty" toml:"status_message,omitempty" mapstructure:"status_message,omitempty"`
}

func (x *NodeHeaderProfileInfo) Reset() {
	*x = NodeHeaderProfileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHeaderProfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHeaderProfileInfo) ProtoMessage() {}

func (x *NodeHeaderProfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHeaderProfileInfo.ProtoReflect.Descriptor instead.
func (*NodeHeaderProfileInfo) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{22}
}

func (x *NodeHeaderProfileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeHeaderProfileInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeHeaderProfileInfo) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

type Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" toml:"url,omitempty" mapstructure:"url,omitempty"`
	Ref string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty" toml:"ref,omitempty" mapstructure:"ref,omitempty"`
}

func (x *Ref) Reset() {
	*x = Ref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref) ProtoMessage() {}

func (x *Ref) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref.ProtoReflect.Descriptor instead.
func (*Ref) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{23}
}

func (x *Ref) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Ref) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	CodeDesc    string  `protobuf:"bytes,2,opt,name=code_desc,json=codeDesc,proto3" json:"code_desc,omitempty" toml:"code_desc,omitempty" mapstructure:"code_desc,omitempty"`
	RunTime     float32 `protobuf:"fixed32,3,opt,name=run_time,json=runTime,proto3" json:"run_time,omitempty" toml:"run_time,omitempty" mapstructure:"run_time,omitempty"`
	StartTime   string  `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" toml:"start_time,omitempty" mapstructure:"start_time,omitempty"`
	Message     string  `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty" toml:"message,omitempty" mapstructure:"message,omitempty"`
	SkipMessage string  `protobuf:"bytes,6,opt,name=skip_message,json=skipMessage,proto3" json:"skip_message,omitempty" toml:"skip_message,omitempty" mapstructure:"skip_message,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{24}
}

func (x *Result) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Result) GetCodeDesc() string {
	if x != nil {
		return x.CodeDesc
	}
	return ""
}

func (x *Result) GetRunTime() float32 {
	if x != nil {
		return x.RunTime
	}
	return 0
}

func (x *Result) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Result) GetSkipMessage() string {
	if x != nil {
		return x.SkipMessage
	}
	return ""
}

type SourceLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref  string `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty" toml:"ref,omitempty" mapstructure:"ref,omitempty"`
	Line int32  `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty" toml:"line,omitempty" mapstructure:"line,omitempty"`
}

func (x *SourceLocation) Reset() {
	*x = SourceLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceLocation) ProtoMessage() {}

func (x *SourceLocation) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceLocation.ProtoReflect.Descriptor instead.
func (*SourceLocation) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{25}
}

func (x *SourceLocation) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *SourceLocation) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty" toml:"description,omitempty" mapstructure:"description,omitempty"`
	Default     string `protobuf:"bytes,2,opt,name=default,proto3" json:"default,omitempty" toml:"default,omitempty" mapstructure:"default,omitempty"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{26}
}

func (x *Option) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Option) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

type Support struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsName        string `protobuf:"bytes,1,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty" toml:"os_name,omitempty" mapstructure:"os_name,omitempty"`
	OsFamily      string `protobuf:"bytes,2,opt,name=os_family,json=osFamily,proto3" json:"os_family,omitempty" toml:"os_family,omitempty" mapstructure:"os_family,omitempty"`
	Release       string `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty" toml:"release,omitempty" mapstructure:"release,omitempty"`
	InspecVersion string `protobuf:"bytes,4,opt,name=inspec_version,json=inspecVersion,proto3" json:"inspec_version,omitempty" toml:"inspec_version,omitempty" mapstructure:"inspec_version,omitempty"`
	Platform      string `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty" toml:"platform,omitempty" mapstructure:"platform,omitempty"`
}

func (x *Support) Reset() {
	*x = Support{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Support) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Support) ProtoMessage() {}

func (x *Support) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Support.ProtoReflect.Descriptor instead.
func (*Support) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{27}
}

func (x *Support) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *Support) GetOsFamily() string {
	if x != nil {
		return x.OsFamily
	}
	return ""
}

func (x *Support) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *Support) GetInspecVersion() string {
	if x != nil {
		return x.InspecVersion
	}
	return ""
}

func (x *Support) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Url         string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty" toml:"url,omitempty" mapstructure:"url,omitempty"`
	Path        string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty" toml:"path,omitempty" mapstructure:"path,omitempty"`
	Git         string `protobuf:"bytes,4,opt,name=git,proto3" json:"git,omitempty" toml:"git,omitempty" mapstructure:"git,omitempty"`
	Branch      string `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty" toml:"branch,omitempty" mapstructure:"branch,omitempty"`
	Tag         string `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty" toml:"tag,omitempty" mapstructure:"tag,omitempty"`
	Commit      string `protobuf:"bytes,7,opt,name=commit,proto3" json:"commit,omitempty" toml:"commit,omitempty" mapstructure:"commit,omitempty"`
	Version     string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	Supermarket string `protobuf:"bytes,9,opt,name=supermarket,proto3" json:"supermarket,omitempty" toml:"supermarket,omitempty" mapstructure:"supermarket,omitempty"`
	Github      string `protobuf:"bytes,10,opt,name=github,proto3" json:"github,omitempty" toml:"github,omitempty" mapstructure:"github,omitempty"`
	Compliance  string `protobuf:"bytes,11,opt,name=compliance,proto3" json:"compliance,omitempty" toml:"compliance,omitempty" mapstructure:"compliance,omitempty"`
	Status      string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	SkipMessage string `protobuf:"bytes,13,opt,name=skip_message,json=skipMessage,proto3" json:"skip_message,omitempty" toml:"skip_message,omitempty" mapstructure:"skip_message,omitempty"`
}

func (x *Dependency) Reset() {
	*x = Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependency) ProtoMessage() {}

func (x *Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependency.ProtoReflect.Descriptor instead.
func (*Dependency) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{28}
}

func (x *Dependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dependency) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Dependency) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Dependency) GetGit() string {
	if x != nil {
		return x.Git
	}
	return ""
}

func (x *Dependency) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Dependency) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Dependency) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Dependency) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Dependency) GetSupermarket() string {
	if x != nil {
		return x.Supermarket
	}
	return ""
}

func (x *Dependency) GetGithub() string {
	if x != nil {
		return x.Github
	}
	return ""
}

func (x *Dependency) GetCompliance() string {
	if x != nil {
		return x.Compliance
	}
	return ""
}

func (x *Dependency) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Dependency) GetSkipMessage() string {
	if x != nil {
		return x.SkipMessage
	}
	return ""
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Title    string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" toml:"title,omitempty" mapstructure:"title,omitempty"`
	Controls []string `protobuf:"bytes,3,rep,name=controls,proto3" json:"controls,omitempty" toml:"controls,omitempty" mapstructure:"controls,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{29}
}

func (x *Group) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Group) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Group) GetControls() []string {
	if x != nil {
		return x.Controls
	}
	return nil
}

type Control struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Code                 string                `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty" toml:"code,omitempty" mapstructure:"code,omitempty"`
	Desc                 string                `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty" toml:"desc,omitempty" mapstructure:"desc,omitempty"`
	Impact               float32               `protobuf:"fixed32,4,opt,name=impact,proto3" json:"impact,omitempty" toml:"impact,omitempty" mapstructure:"impact,omitempty"`
	Title                string                `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty" toml:"title,omitempty" mapstructure:"title,omitempty"`
	SourceLocation       *SourceLocation       `protobuf:"bytes,6,opt,name=source_location,json=sourceLocation,proto3" json:"source_location,omitempty" toml:"source_location,omitempty" mapstructure:"source_location,omitempty"`
	Results              []*Result             `protobuf:"bytes,7,rep,name=results,proto3" json:"results,omitempty" toml:"results,omitempty" mapstructure:"results,omitempty"`
	Refs                 []*Ref                `protobuf:"bytes,8,rep,name=refs,proto3" json:"refs,omitempty" toml:"refs,omitempty" mapstructure:"refs,omitempty"`
	Tags                 string                `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty" toml:"tags,omitempty" mapstructure:"tags,omitempty"`
	StringTags           map[string]*TagValues `protobuf:"bytes,10,rep,name=string_tags,json=stringTags,proto3" json:"string_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" toml:"string_tags,omitempty" mapstructure:"string_tags,omitempty"`
	WaivedStr            string                `protobuf:"bytes,11,opt,name=waived_str,json=waivedStr,proto3" json:"waived_str,omitempty" toml:"waived_str,omitempty" mapstructure:"waived_str,omitempty"`
	WaiverData           *OrigWaiverData       `protobuf:"bytes,12,opt,name=waiver_data,json=waiverData,proto3" json:"waiver_data,omitempty" toml:"waiver_data,omitempty" mapstructure:"waiver_data,omitempty"`
	RemovedResultsCounts *RemovedResultsCounts `protobuf:"bytes,13,opt,name=removed_results_counts,json=removedResultsCounts,proto3" json:"removed_results_counts,omitempty" toml:"removed_results_counts,omitempty" mapstructure:"removed_results_counts,omitempty"`
}

func (x *Control) Reset() {
	*x = Control{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Control) ProtoMessage() {}

func (x *Control) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Control.ProtoReflect.Descriptor instead.
func (*Control) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{30}
}

func (x *Control) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Control) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Control) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Control) GetImpact() float32 {
	if x != nil {
		return x.Impact
	}
	return 0
}

func (x *Control) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Control) GetSourceLocation() *SourceLocation {
	if x != nil {
		return x.SourceLocation
	}
	return nil
}

func (x *Control) GetResults() []*Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Control) GetRefs() []*Ref {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *Control) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Control) GetStringTags() map[string]*TagValues {
	if x != nil {
		return x.StringTags
	}
	return nil
}

func (x *Control) GetWaivedStr() string {
	if x != nil {
		return x.WaivedStr
	}
	return ""
}

func (x *Control) GetWaiverData() *OrigWaiverData {
	if x != nil {
		return x.WaiverData
	}
	return nil
}

func (x *Control) GetRemovedResultsCounts() *RemovedResultsCounts {
	if x != nil {
		return x.RemovedResultsCounts
	}
	return nil
}

// WaiverData as it originally came from the InSpec report
// Will supplement this with waived_str to make consumption easier
type OrigWaiverData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpirationDate     string `protobuf:"bytes,1,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty" toml:"expiration_date,omitempty" mapstructure:"expiration_date,omitempty"`
	Justification      string `protobuf:"bytes,2,opt,name=justification,proto3" json:"justification,omitempty" toml:"justification,omitempty" mapstructure:"justification,omitempty"`
	Run                bool   `protobuf:"varint,3,opt,name=run,proto3" json:"run,omitempty" toml:"run,omitempty" mapstructure:"run,omitempty"`
	SkippedDueToWaiver bool   `protobuf:"varint,4,opt,name=skipped_due_to_waiver,json=skippedDueToWaiver,proto3" json:"skipped_due_to_waiver,omitempty" toml:"skipped_due_to_waiver,omitempty" mapstructure:"skipped_due_to_waiver,omitempty"`
	Message            string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty" toml:"message,omitempty" mapstructure:"message,omitempty"`
}

func (x *OrigWaiverData) Reset() {
	*x = OrigWaiverData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrigWaiverData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrigWaiverData) ProtoMessage() {}

func (x *OrigWaiverData) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrigWaiverData.ProtoReflect.Descriptor instead.
func (*OrigWaiverData) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{31}
}

func (x *OrigWaiverData) GetExpirationDate() string {
	if x != nil {
		return x.ExpirationDate
	}
	return ""
}

func (x *OrigWaiverData) GetJustification() string {
	if x != nil {
		return x.Justification
	}
	return ""
}

func (x *OrigWaiverData) GetRun() bool {
	if x != nil {
		return x.Run
	}
	return false
}

func (x *OrigWaiverData) GetSkippedDueToWaiver() bool {
	if x != nil {
		return x.SkippedDueToWaiver
	}
	return false
}

func (x *OrigWaiverData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RemovedResultsCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failed  int32 `protobuf:"varint,1,opt,name=failed,proto3" json:"failed,omitempty" toml:"failed,omitempty" mapstructure:"failed,omitempty"`
	Skipped int32 `protobuf:"varint,2,opt,name=skipped,proto3" json:"skipped,omitempty" toml:"skipped,omitempty" mapstructure:"skipped,omitempty"`
	Passed  int32 `protobuf:"varint,3,opt,name=passed,proto3" json:"passed,omitempty" toml:"passed,omitempty" mapstructure:"passed,omitempty"`
}

func (x *RemovedResultsCounts) Reset() {
	*x = RemovedResultsCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovedResultsCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovedResultsCounts) ProtoMessage() {}

func (x *RemovedResultsCounts) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovedResultsCounts.ProtoReflect.Descriptor instead.
func (*RemovedResultsCounts) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{32}
}

func (x *RemovedResultsCounts) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *RemovedResultsCounts) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *RemovedResultsCounts) GetPassed() int32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

type TagValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" toml:"values,omitempty" mapstructure:"values,omitempty"`
}

func (x *TagValues) Reset() {
	*x = TagValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagValues) ProtoMessage() {}

func (x *TagValues) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagValues.ProtoReflect.Descriptor instead.
func (*TagValues) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{33}
}

func (x *TagValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Options *Option `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty" toml:"options,omitempty" mapstructure:"options,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{34}
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetOptions() *Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Release string `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty" toml:"release,omitempty" mapstructure:"release,omitempty"`
	Full    string `protobuf:"bytes,3,opt,name=full,proto3" json:"full,omitempty" toml:"full,omitempty" mapstructure:"full,omitempty"`
}

func (x *Platform) Reset() {
	*x = Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{35}
}

func (x *Platform) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Platform) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *Platform) GetFull() string {
	if x != nil {
		return x.Full
	}
	return ""
}

type Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration float32 `protobuf:"fixed32,1,opt,name=duration,proto3" json:"duration,omitempty" toml:"duration,omitempty" mapstructure:"duration,omitempty"`
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{36}
}

func (x *Statistics) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SuggestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
	Text    string        `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty" toml:"text,omitempty" mapstructure:"text,omitempty"`
	Size    int32         `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty" toml:"size,omitempty" mapstructure:"size,omitempty"`
	Filters []*ListFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
	TypeKey string        `protobuf:"bytes,5,opt,name=type_key,json=typeKey,proto3" json:"type_key,omitempty" toml:"type_key,omitempty" mapstructure:"type_key,omitempty"`
}

func (x *SuggestionRequest) Reset() {
	*x = SuggestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestionRequest) ProtoMessage() {}

func (x *SuggestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestionRequest.ProtoReflect.Descriptor instead.
func (*SuggestionRequest) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{37}
}

func (x *SuggestionRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SuggestionRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SuggestionRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SuggestionRequest) GetFilters() []*ListFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SuggestionRequest) GetTypeKey() string {
	if x != nil {
		return x.TypeKey
	}
	return ""
}

type Suggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty" toml:"text,omitempty" mapstructure:"text,omitempty"`
	Id      string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Score   float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty" toml:"score,omitempty" mapstructure:"score,omitempty"`
	Version string  `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
}

func (x *Suggestion) Reset() {
	*x = Suggestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suggestion) ProtoMessage() {}

func (x *Suggestion) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suggestion.ProtoReflect.Descriptor instead.
func (*Suggestion) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{38}
}

func (x *Suggestion) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Suggestion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Suggestion) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Suggestion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Suggestions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suggestions []*Suggestion `protobuf:"bytes,1,rep,name=suggestions,proto3" json:"suggestions,omitempty" toml:"suggestions,omitempty" mapstructure:"suggestions,omitempty"`
}

func (x *Suggestions) Reset() {
	*x = Suggestions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suggestions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suggestions) ProtoMessage() {}

func (x *Suggestions) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suggestions.ProtoReflect.Descriptor instead.
func (*Suggestions) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{39}
}

func (x *Suggestions) GetSuggestions() []*Suggestion {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

type ProfileMins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles []*ProfileMin  `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty" toml:"profiles,omitempty" mapstructure:"profiles,omitempty"`
	Counts   *ProfileCounts `protobuf:"bytes,2,opt,name=counts,proto3" json:"counts,omitempty" toml:"counts,omitempty" mapstructure:"counts,omitempty"`
}

func (x *ProfileMins) Reset() {
	*x = ProfileMins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileMins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileMins) ProtoMessage() {}

func (x *ProfileMins) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileMins.ProtoReflect.Descriptor instead.
func (*ProfileMins) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{40}
}

func (x *ProfileMins) GetProfiles() []*ProfileMin {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ProfileMins) GetCounts() *ProfileCounts {
	if x != nil {
		return x.Counts
	}
	return nil
}

type ProfileCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty" toml:"total,omitempty" mapstructure:"total,omitempty"`
	Failed  int32 `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty" toml:"failed,omitempty" mapstructure:"failed,omitempty"`
	Skipped int32 `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty" toml:"skipped,omitempty" mapstructure:"skipped,omitempty"`
	Passed  int32 `protobuf:"varint,4,opt,name=passed,proto3" json:"passed,omitempty" toml:"passed,omitempty" mapstructure:"passed,omitempty"`
	Waived  int32 `protobuf:"varint,5,opt,name=waived,proto3" json:"waived,omitempty" toml:"waived,omitempty" mapstructure:"waived,omitempty"`
}

func (x *ProfileCounts) Reset() {
	*x = ProfileCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileCounts) ProtoMessage() {}

func (x *ProfileCounts) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileCounts.ProtoReflect.Descriptor instead.
func (*ProfileCounts) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{41}
}

func (x *ProfileCounts) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProfileCounts) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *ProfileCounts) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *ProfileCounts) GetPassed() int32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *ProfileCounts) GetWaived() int32 {
	if x != nil {
		return x.Waived
	}
	return 0
}

type ProfileMin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" toml:"title,omitempty" mapstructure:"title,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	Status  string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
}

func (x *ProfileMin) Reset() {
	*x = ProfileMin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileMin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileMin) ProtoMessage() {}

func (x *ProfileMin) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileMin.ProtoReflect.Descriptor instead.
func (*ProfileMin) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{42}
}

func (x *ProfileMin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProfileMin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProfileMin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProfileMin) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProfileMin) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name         string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Platform     *Platform            `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty" toml:"platform,omitempty" mapstructure:"platform,omitempty"`
	Environment  string               `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty" toml:"environment,omitempty" mapstructure:"environment,omitempty"`
	LatestReport *LatestReportSummary `protobuf:"bytes,8,opt,name=latest_report,json=latestReport,proto3" json:"latest_report,omitempty" toml:"latest_report,omitempty" mapstructure:"latest_report,omitempty"`
	Tags         []*Kv                `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" toml:"tags,omitempty" mapstructure:"tags,omitempty"`
	Profiles     []*ProfileMeta       `protobuf:"bytes,10,rep,name=profiles,proto3" json:"profiles,omitempty" toml:"profiles,omitempty" mapstructure:"profiles,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{43}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *Node) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Node) GetLatestReport() *LatestReportSummary {
	if x != nil {
		return x.LatestReport
	}
	return nil
}

func (x *Node) GetTags() []*Kv {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Node) GetProfiles() []*ProfileMeta {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type Nodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes        []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" toml:"nodes,omitempty" mapstructure:"nodes,omitempty"`
	Total        int32   `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty" toml:"total,omitempty" mapstructure:"total,omitempty"`
	TotalPassed  int32   `protobuf:"varint,21,opt,name=total_passed,json=totalPassed,proto3" json:"total_passed,omitempty" toml:"total_passed,omitempty" mapstructure:"total_passed,omitempty"`
	TotalFailed  int32   `protobuf:"varint,22,opt,name=total_failed,json=totalFailed,proto3" json:"total_failed,omitempty" toml:"total_failed,omitempty" mapstructure:"total_failed,omitempty"`
	TotalSkipped int32   `protobuf:"varint,23,opt,name=total_skipped,json=totalSkipped,proto3" json:"total_skipped,omitempty" toml:"total_skipped,omitempty" mapstructure:"total_skipped,omitempty"`
	TotalWaived  int32   `protobuf:"varint,24,opt,name=total_waived,json=totalWaived,proto3" json:"total_waived,omitempty" toml:"total_waived,omitempty" mapstructure:"total_waived,omitempty"`
}

func (x *Nodes) Reset() {
	*x = Nodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodes) ProtoMessage() {}

func (x *Nodes) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodes.ProtoReflect.Descriptor instead.
func (*Nodes) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{44}
}

func (x *Nodes) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Nodes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Nodes) GetTotalPassed() int32 {
	if x != nil {
		return x.TotalPassed
	}
	return 0
}

func (x *Nodes) GetTotalFailed() int32 {
	if x != nil {
		return x.TotalFailed
	}
	return 0
}

func (x *Nodes) GetTotalSkipped() int32 {
	if x != nil {
		return x.TotalSkipped
	}
	return 0
}

func (x *Nodes) GetTotalWaived() int32 {
	if x != nil {
		return x.TotalWaived
	}
	return 0
}

type Kv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" toml:"key,omitempty" mapstructure:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" toml:"value,omitempty" mapstructure:"value,omitempty"`
}

func (x *Kv) Reset() {
	*x = Kv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kv) ProtoMessage() {}

func (x *Kv) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kv.ProtoReflect.Descriptor instead.
func (*Kv) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{45}
}

func (x *Kv) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Kv) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LatestReportSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	EndTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
	Status   string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Controls *ControlSummary        `protobuf:"bytes,4,opt,name=controls,proto3" json:"controls,omitempty" toml:"controls,omitempty" mapstructure:"controls,omitempty"`
}

func (x *LatestReportSummary) Reset() {
	*x = LatestReportSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestReportSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestReportSummary) ProtoMessage() {}

func (x *LatestReportSummary) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestReportSummary.ProtoReflect.Descriptor instead.
func (*LatestReportSummary) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{46}
}

func (x *LatestReportSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LatestReportSummary) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *LatestReportSummary) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *LatestReportSummary) GetControls() *ControlSummary {
	if x != nil {
		return x.Controls
	}
	return nil
}

type ProfileMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Status  string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Full    string `protobuf:"bytes,5,opt,name=full,proto3" json:"full,omitempty" toml:"full,omitempty" mapstructure:"full,omitempty"`
}

func (x *ProfileMeta) Reset() {
	*x = ProfileMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileMeta) ProtoMessage() {}

func (x *ProfileMeta) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileMeta.ProtoReflect.Descriptor instead.
func (*ProfileMeta) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{47}
}

func (x *ProfileMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProfileMeta) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProfileMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProfileMeta) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProfileMeta) GetFull() string {
	if x != nil {
		return x.Full
	}
	return ""
}

type ControlElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Title     string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" toml:"title,omitempty" mapstructure:"title,omitempty"`
	Profile   string  `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty" toml:"profile,omitempty" mapstructure:"profile,omitempty"`
	Impact    float32 `protobuf:"fixed32,4,opt,name=impact,proto3" json:"impact,omitempty" toml:"impact,omitempty" mapstructure:"impact,omitempty"`
	Results   int32   `protobuf:"varint,5,opt,name=results,proto3" json:"results,omitempty" toml:"results,omitempty" mapstructure:"results,omitempty"`
	Status    string  `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	ProfileId string  `protobuf:"bytes,7,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" toml:"profile_id,omitempty" mapstructure:"profile_id,omitempty"`
}

func (x *ControlElement) Reset() {
	*x = ControlElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlElement) ProtoMessage() {}

func (x *ControlElement) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlElement.ProtoReflect.Descriptor instead.
func (*ControlElement) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{48}
}

func (x *ControlElement) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ControlElement) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ControlElement) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *ControlElement) GetImpact() float32 {
	if x != nil {
		return x.Impact
	}
	return 0
}

func (x *ControlElement) GetResults() int32 {
	if x != nil {
		return x.Results
	}
	return 0
}

func (x *ControlElement) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ControlElement) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type ControlElements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlElements []*ControlElement `protobuf:"bytes,1,rep,name=control_elements,json=controlElements,proto3" json:"control_elements,omitempty" toml:"control_elements,omitempty" mapstructure:"control_elements,omitempty"`
}

func (x *ControlElements) Reset() {
	*x = ControlElements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlElements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlElements) ProtoMessage() {}

func (x *ControlElements) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlElements.ProtoReflect.Descriptor instead.
func (*ControlElements) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{49}
}

func (x *ControlElements) GetControlElements() []*ControlElement {
	if x != nil {
		return x.ControlElements
	}
	return nil
}

type CustomReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcknowledgementId string `protobuf:"bytes,1,opt,name=acknowledgement_id,json=acknowledgementId,proto3" json:"acknowledgement_id,omitempty" toml:"acknowledgement_id,omitempty" mapstructure:"acknowledgement_id,omitempty"`
}

func (x *CustomReportResponse) Reset() {
	*x = CustomReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomReportResponse) ProtoMessage() {}

func (x *CustomReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomReportResponse.ProtoReflect.Descriptor instead.
func (*CustomReportResponse) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{50}
}

func (x *CustomReportResponse) GetAcknowledgementId() string {
	if x != nil {
		return x.AcknowledgementId
	}
	return ""
}

type ReportListForReportManagerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*ReportResponse `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty" toml:"reports,omitempty" mapstructure:"reports,omitempty"`
}

func (x *ReportListForReportManagerResponse) Reset() {
	*x = ReportListForReportManagerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportListForReportManagerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportListForReportManagerResponse) ProtoMessage() {}

func (x *ReportListForReportManagerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportListForReportManagerResponse.ProtoReflect.Descriptor instead.
func (*ReportListForReportManagerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{51}
}

func (x *ReportListForReportManagerResponse) GetReports() []*ReportResponse {
	if x != nil {
		return x.Reports
	}
	return nil
}

type ReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string             `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty" toml:"report_id,omitempty" mapstructure:"report_id,omitempty"`
	Profiles []*ProfileResponse `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty" toml:"profiles,omitempty" mapstructure:"profiles,omitempty"`
}

func (x *ReportResponse) Reset() {
	*x = ReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResponse) ProtoMessage() {}

func (x *ReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResponse.ProtoReflect.Descriptor instead.
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{52}
}

func (x *ReportResponse) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *ReportResponse) GetProfiles() []*ProfileResponse {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type ProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileId string   `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" toml:"profile_id,omitempty" mapstructure:"profile_id,omitempty"`
	Controls  []string `protobuf:"bytes,2,rep,name=controls,proto3" json:"controls,omitempty" toml:"controls,omitempty" mapstructure:"controls,omitempty"`
}

func (x *ProfileResponse) Reset() {
	*x = ProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResponse) ProtoMessage() {}

func (x *ProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResponse.ProtoReflect.Descriptor instead.
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{53}
}

func (x *ProfileResponse) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *ProfileResponse) GetControls() []string {
	if x != nil {
		return x.Controls
	}
	return nil
}

type AssetSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAssets  int32      `protobuf:"varint,1,opt,name=total_assets,json=totalAssets,proto3" json:"total_assets,omitempty" toml:"total_assets,omitempty" mapstructure:"total_assets,omitempty"`
	Collected    *Collected `protobuf:"bytes,2,opt,name=collected,proto3" json:"collected,omitempty" toml:"collected,omitempty" mapstructure:"collected,omitempty"`
	NotCollected int32      `protobuf:"varint,3,opt,name=not_collected,json=notCollected,proto3" json:"not_collected,omitempty" toml:"not_collected,omitempty" mapstructure:"not_collected,omitempty"`
	Unreported   int32      `protobuf:"varint,4,opt,name=unreported,proto3" json:"unreported,omitempty" toml:"unreported,omitempty" mapstructure:"unreported,omitempty"`
	Unreachable  int32      `protobuf:"varint,5,opt,name=unreachable,proto3" json:"unreachable,omitempty" toml:"unreachable,omitempty" mapstructure:"unreachable,omitempty"`
}

func (x *AssetSummary) Reset() {
	*x = AssetSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSummary) ProtoMessage() {}

func (x *AssetSummary) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSummary.ProtoReflect.Descriptor instead.
func (*AssetSummary) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{54}
}

func (x *AssetSummary) GetTotalAssets() int32 {
	if x != nil {
		return x.TotalAssets
	}
	return 0
}

func (x *AssetSummary) GetCollected() *Collected {
	if x != nil {
		return x.Collected
	}
	return nil
}

func (x *AssetSummary) GetNotCollected() int32 {
	if x != nil {
		return x.NotCollected
	}
	return 0
}

func (x *AssetSummary) GetUnreported() int32 {
	if x != nil {
		return x.Unreported
	}
	return 0
}

func (x *AssetSummary) GetUnreachable() int32 {
	if x != nil {
		return x.Unreachable
	}
	return 0
}

type Collected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passed  int32 `protobuf:"varint,1,opt,name=passed,proto3" json:"passed,omitempty" toml:"passed,omitempty" mapstructure:"passed,omitempty"`
	Failed  int32 `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty" toml:"failed,omitempty" mapstructure:"failed,omitempty"`
	Skipped int32 `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty" toml:"skipped,omitempty" mapstructure:"skipped,omitempty"`
	Weived  int32 `protobuf:"varint,4,opt,name=weived,proto3" json:"weived,omitempty" toml:"weived,omitempty" mapstructure:"weived,omitempty"`
}

func (x *Collected) Reset() {
	*x = Collected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collected) ProtoMessage() {}

func (x *Collected) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collected.ProtoReflect.Descriptor instead.
func (*Collected) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{55}
}

func (x *Collected) GetPassed() int32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *Collected) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *Collected) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *Collected) GetWeived() int32 {
	if x != nil {
		return x.Weived
	}
	return 0
}

type Assets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUuid string `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty" toml:"node_uuid,omitempty" mapstructure:"node_uuid,omitempty"`
	Status   string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	FirstRun string `protobuf:"bytes,3,opt,name=first_run,json=firstRun,proto3" json:"first_run,omitempty" toml:"first_run,omitempty" mapstructure:"first_run,omitempty"`
	LastRun  string `protobuf:"bytes,4,opt,name=last_run,json=lastRun,proto3" json:"last_run,omitempty" toml:"last_run,omitempty" mapstructure:"last_run,omitempty"`
}

func (x *Assets) Reset() {
	*x = Assets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assets) ProtoMessage() {}

func (x *Assets) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assets.ProtoReflect.Descriptor instead.
func (*Assets) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{56}
}

func (x *Assets) GetNodeUuid() string {
	if x != nil {
		return x.NodeUuid
	}
	return ""
}

func (x *Assets) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Assets) GetFirstRun() string {
	if x != nil {
		return x.FirstRun
	}
	return ""
}

func (x *Assets) GetLastRun() string {
	if x != nil {
		return x.LastRun
	}
	return ""
}

type AssetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters    []*ListFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
	Size       int32         `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty" toml:"size,omitempty" mapstructure:"size,omitempty"`
	From       int32         `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty" toml:"from,omitempty" mapstructure:"from,omitempty"`
	Sort       string        `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty" toml:"sort,omitempty" mapstructure:"sort,omitempty"`
	AssetsType string        `protobuf:"bytes,5,opt,name=assets_type,json=assetsType,proto3" json:"assets_type,omitempty" toml:"assets_type,omitempty" mapstructure:"assets_type,omitempty"`
}

func (x *AssetListRequest) Reset() {
	*x = AssetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetListRequest) ProtoMessage() {}

func (x *AssetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetListRequest.ProtoReflect.Descriptor instead.
func (*AssetListRequest) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{57}
}

func (x *AssetListRequest) GetFilters() []*ListFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *AssetListRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AssetListRequest) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *AssetListRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *AssetListRequest) GetAssetsType() string {
	if x != nil {
		return x.AssetsType
	}
	return ""
}

type AssetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*Assets `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty" toml:"assets,omitempty" mapstructure:"assets,omitempty"`
}

func (x *AssetListResponse) Reset() {
	*x = AssetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetListResponse) ProtoMessage() {}

func (x *AssetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetListResponse.ProtoReflect.Descriptor instead.
func (*AssetListResponse) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{58}
}

func (x *AssetListResponse) GetAssets() []*Assets {
	if x != nil {
		return x.Assets
	}
	return nil
}

// ComplianceConfigRequest to update no of days in the config
type ComplianceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//No of days for the config
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty" toml:"value,omitempty" mapstructure:"value,omitempty"`
}

func (x *ComplianceConfigRequest) Reset() {
	*x = ComplianceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceConfigRequest) ProtoMessage() {}

func (x *ComplianceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceConfigRequest.ProtoReflect.Descriptor instead.
func (*ComplianceConfigRequest) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{59}
}

func (x *ComplianceConfigRequest) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// ComplianceConfigResponse to get the policy name and no of days
type ComplianceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Policy name to get from config
	PolicyName string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty" toml:"policy_name,omitempty" mapstructure:"policy_name,omitempty"`
	//No of days to get for config
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty" toml:"value,omitempty" mapstructure:"value,omitempty"`
}

func (x *ComplianceConfigResponse) Reset() {
	*x = ComplianceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceConfigResponse) ProtoMessage() {}

func (x *ComplianceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceConfigResponse.ProtoReflect.Descriptor instead.
func (*ComplianceConfigResponse) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{60}
}

func (x *ComplianceConfigResponse) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *ComplianceConfigResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// GetAssetConfigRequest to perform GET request
type GetAssetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAssetConfigRequest) Reset() {
	*x = GetAssetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetConfigRequest) ProtoMessage() {}

func (x *GetAssetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_reporting_reporting_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetAssetConfigRequest) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_reporting_reporting_proto_rawDescGZIP(), []int{61}
}

var File_interservice_compliance_reporting_reporting_proto protoreflect.FileDescriptor

var file_interservice_compliance_reporting_reporting_proto_rawDesc = []byte{
	0x0a, 0x31, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x29, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a,
	0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x31, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x0a, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x1e, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x22, 0x38, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x1d, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x66, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0xd1, 0x02, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x4a, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x06,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x06, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64,
	0x22, 0xae, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x57, 0x61, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x75, 0x73, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60,
	0x0a, 0x0e, 0x77, 0x61, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0d, 0x77, 0x61, 0x69, 0x76, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0x88, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x07, 0x77, 0x61,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x61, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x77, 0x61, 0x69, 0x76, 0x65, 0x72, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5b, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x6f, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa1, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x6e,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6c, 0x0a, 0x07, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb5, 0x06, 0x0a, 0x06, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x55, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x65, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x66, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x68, 0x65, 0x66, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x65, 0x66, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x66, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x66, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xbd, 0x03, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x5c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x75, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x56, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc4, 0x06,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75,
	0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x4f, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x07, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x48, 0x0a, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x29, 0x0a, 0x03, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0xb4, 0x01, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72,
	0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x36, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x44, 0x0a, 0x06, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x9c, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x73, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22,
	0xc9, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x6b, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x22, 0xc4, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x72, 0x65, 0x66,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x63, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x69, 0x76,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x5a, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x57, 0x61, 0x69, 0x76, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x75, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x73, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x01,
	0x0a, 0x0e, 0x4f, 0x72, 0x69, 0x67, 0x57, 0x61, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x75, 0x73,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x75,
	0x6e, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x57, 0x61,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x60,
	0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x22, 0x23, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x4c, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6c,
	0x6c, 0x22, 0x28, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x11,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x60, 0x0a, 0x0a, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x0b, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x69, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61, 0x69, 0x76,
	0x65, 0x64, 0x22, 0x78, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x99, 0x03, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x0d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x76, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x05, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x76, 0x65, 0x64, 0x22, 0x2c, 0x0a,
	0x02, 0x4b, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x13,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x22, 0x77, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75,
	0x6c, 0x6c, 0x22, 0xb9, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x77,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x64, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x14, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x79,
	0x0a, 0x22, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0x4c, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x22,
	0xec, 0x01, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x09, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x6d,
	0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x75, 0x0a,
	0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x85, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x41, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x6e, 0x65, 0x22, 0x00,
	0x12, 0x79, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0a, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x31, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00,
	0x12, 0x89, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x36,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x79, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x49, 0x64, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3d, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x39, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x3a,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x37, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x99, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x40, 0x5a, 0x3e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interservice_compliance_reporting_reporting_proto_rawDescOnce sync.Once
	file_interservice_compliance_reporting_reporting_proto_rawDescData = file_interservice_compliance_reporting_reporting_proto_rawDesc
)

func file_interservice_compliance_reporting_reporting_proto_rawDescGZIP() []byte {
	file_interservice_compliance_reporting_reporting_proto_rawDescOnce.Do(func() {
		file_interservice_compliance_reporting_reporting_proto_rawDescData = protoimpl.X.CompressGZIP(file_interservice_compliance_reporting_reporting_proto_rawDescData)
	})
	return file_interservice_compliance_reporting_reporting_proto_rawDescData
}

var file_interservice_compliance_reporting_reporting_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_interservice_compliance_reporting_reporting_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_interservice_compliance_reporting_reporting_proto_goTypes = []interface{}{
	(Query_OrderType)(0),                       // 0: chef.automate.domain.compliance.reporting.Query.OrderType
	(*ReportContentRequest)(nil),               // 1: chef.automate.domain.compliance.reporting.ReportContentRequest
	(*ReportContentResponse)(nil),              // 2: chef.automate.domain.compliance.reporting.ReportContentResponse
	(*ExportData)(nil),                         // 3: chef.automate.domain.compliance.reporting.ExportData
	(*Id)(nil),                                 // 4: chef.automate.domain.compliance.reporting.Id
	(*Query)(nil),                              // 5: chef.automate.domain.compliance.reporting.Query
	(*ListFilter)(nil),                         // 6: chef.automate.domain.compliance.reporting.ListFilter
	(*ListFilters)(nil),                        // 7: chef.automate.domain.compliance.reporting.ListFilters
	(*Total)(nil),                              // 8: chef.automate.domain.compliance.reporting.Total
	(*Failed)(nil),                             // 9: chef.automate.domain.compliance.reporting.Failed
	(*ControlSummary)(nil),                     // 10: chef.automate.domain.compliance.reporting.ControlSummary
	(*ControlItemRequest)(nil),                 // 11: chef.automate.domain.compliance.reporting.ControlItemRequest
	(*WaiverData)(nil),                         // 12: chef.automate.domain.compliance.reporting.WaiverData
	(*ControlItem)(nil),                        // 13: chef.automate.domain.compliance.reporting.ControlItem
	(*ControlItems)(nil),                       // 14: chef.automate.domain.compliance.reporting.ControlItems
	(*ReportsSummaryLevelOne)(nil),             // 15: chef.automate.domain.compliance.reporting.ReportsSummaryLevelOne
	(*ReportSummaryLevelOne)(nil),              // 16: chef.automate.domain.compliance.reporting.ReportSummaryLevelOne
	(*Reports)(nil),                            // 17: chef.automate.domain.compliance.reporting.Reports
	(*Report)(nil),                             // 18: chef.automate.domain.compliance.reporting.Report
	(*NodeHeaderInfo)(nil),                     // 19: chef.automate.domain.compliance.reporting.NodeHeaderInfo
	(*ReportIds)(nil),                          // 20: chef.automate.domain.compliance.reporting.ReportIds
	(*ReportData)(nil),                         // 21: chef.automate.domain.compliance.reporting.ReportData
	(*Profile)(nil),                            // 22: chef.automate.domain.compliance.reporting.Profile
	(*NodeHeaderProfileInfo)(nil),              // 23: chef.automate.domain.compliance.reporting.NodeHeaderProfileInfo
	(*Ref)(nil),                                // 24: chef.automate.domain.compliance.reporting.Ref
	(*Result)(nil),                             // 25: chef.automate.domain.compliance.reporting.Result
	(*SourceLocation)(nil),                     // 26: chef.automate.domain.compliance.reporting.SourceLocation
	(*Option)(nil),                             // 27: chef.automate.domain.compliance.reporting.Option
	(*Support)(nil),                            // 28: chef.automate.domain.compliance.reporting.Support
	(*Dependency)(nil),                         // 29: chef.automate.domain.compliance.reporting.Dependency
	(*Group)(nil),                              // 30: chef.automate.domain.compliance.reporting.Group
	(*Control)(nil),                            // 31: chef.automate.domain.compliance.reporting.Control
	(*OrigWaiverData)(nil),                     // 32: chef.automate.domain.compliance.reporting.OrigWaiverData
	(*RemovedResultsCounts)(nil),               // 33: chef.automate.domain.compliance.reporting.RemovedResultsCounts
	(*TagValues)(nil),                          // 34: chef.automate.domain.compliance.reporting.TagValues
	(*Attribute)(nil),                          // 35: chef.automate.domain.compliance.reporting.Attribute
	(*Platform)(nil),                           // 36: chef.automate.domain.compliance.reporting.Platform
	(*Statistics)(nil),                         // 37: chef.automate.domain.compliance.reporting.Statistics
	(*SuggestionRequest)(nil),                  // 38: chef.automate.domain.compliance.reporting.SuggestionRequest
	(*Suggestion)(nil),                         // 39: chef.automate.domain.compliance.reporting.Suggestion
	(*Suggestions)(nil),                        // 40: chef.automate.domain.compliance.reporting.Suggestions
	(*ProfileMins)(nil),                        // 41: chef.automate.domain.compliance.reporting.ProfileMins
	(*ProfileCounts)(nil),                      // 42: chef.automate.domain.compliance.reporting.ProfileCounts
	(*ProfileMin)(nil),                         // 43: chef.automate.domain.compliance.reporting.ProfileMin
	(*Node)(nil),                               // 44: chef.automate.domain.compliance.reporting.Node
	(*Nodes)(nil),                              // 45: chef.automate.domain.compliance.reporting.Nodes
	(*Kv)(nil),                                 // 46: chef.automate.domain.compliance.reporting.Kv
	(*LatestReportSummary)(nil),                // 47: chef.automate.domain.compliance.reporting.LatestReportSummary
	(*ProfileMeta)(nil),                        // 48: chef.automate.domain.compliance.reporting.ProfileMeta
	(*ControlElement)(nil),                     // 49: chef.automate.domain.compliance.reporting.ControlElement
	(*ControlElements)(nil),                    // 50: chef.automate.domain.compliance.reporting.ControlElements
	(*CustomReportResponse)(nil),               // 51: chef.automate.domain.compliance.reporting.CustomReportResponse
	(*ReportListForReportManagerResponse)(nil), // 52: chef.automate.domain.compliance.reporting.ReportListForReportManagerResponse
	(*ReportResponse)(nil),                     // 53: chef.automate.domain.compliance.reporting.ReportResponse
	(*ProfileResponse)(nil),                    // 54: chef.automate.domain.compliance.reporting.ProfileResponse
	(*AssetSummary)(nil),                       // 55: chef.automate.domain.compliance.reporting.AssetSummary
	(*Collected)(nil),                          // 56: chef.automate.domain.compliance.reporting.Collected
	(*Assets)(nil),                             // 57: chef.automate.domain.compliance.reporting.Assets
	(*AssetListRequest)(nil),                   // 58: chef.automate.domain.compliance.reporting.AssetListRequest
	(*AssetListResponse)(nil),                  // 59: chef.automate.domain.compliance.reporting.AssetListResponse
	(*ComplianceConfigRequest)(nil),            // 60: chef.automate.domain.compliance.reporting.ComplianceConfigRequest
	(*ComplianceConfigResponse)(nil),           // 61: chef.automate.domain.compliance.reporting.ComplianceConfigResponse
	(*GetAssetConfigRequest)(nil),              // 62: chef.automate.domain.compliance.reporting.GetAssetConfigRequest
	nil,                                        // 63: chef.automate.domain.compliance.reporting.Control.StringTagsEntry
	(*timestamppb.Timestamp)(nil),              // 64: google.protobuf.Timestamp
}
var file_interservice_compliance_reporting_reporting_proto_depIdxs = []int32{
	6,  // 0: chef.automate.domain.compliance.reporting.ReportContentRequest.filters:type_name -> chef.automate.domain.compliance.reporting.ListFilter
	6,  // 1: chef.automate.domain.compliance.reporting.Query.filters:type_name -> chef.automate.domain.compliance.reporting.ListFilter
	0,  // 2: chef.automate.domain.compliance.reporting.Query.order:type_name -> chef.automate.domain.compliance.reporting.Query.OrderType
	6,  // 3: chef.automate.domain.compliance.reporting.ListFilters.filters:type_name -> chef.automate.domain.compliance.reporting.ListFilter
	8,  // 4: chef.automate.domain.compliance.reporting.ControlSummary.passed:type_name -> chef.automate.domain.compliance.reporting.Total
	8,  // 5: chef.automate.domain.compliance.reporting.ControlSummary.skipped:type_name -> chef.automate.domain.compliance.reporting.Total
	9,  // 6: chef.automate.domain.compliance.reporting.ControlSummary.failed:type_name -> chef.automate.domain.compliance.reporting.Failed
	8,  // 7: chef.automate.domain.compliance.reporting.ControlSummary.waived:type_name -> chef.automate.domain.compliance.reporting.Total
	6,  // 8: chef.automate.domain.compliance.reporting.ControlItemRequest.filters:type_name -> chef.automate.domain.compliance.reporting.ListFilter
	10, // 9: chef.automate.domain.compliance.reporting.WaiverData.waiver_summary:type_name -> chef.automate.domain.compliance.reporting.ControlSummary
	43, // 10: chef.automate.domain.compliance.reporting.ControlItem.profile:type_name -> chef.automate.domain.compliance.reporting.ProfileMin
	64, // 11: chef.automate.domain.compliance.reporting.ControlItem.end_time:type_name -> google.protobuf.Timestamp
	10, // 12: chef.automate.domain.compliance.reporting.ControlItem.control_summary:type_name -> chef.automate.domain.compliance.reporting.ControlSummary
	12, // 13: chef.automate.domain.compliance.reporting.ControlItem.waivers:type_name -> chef.automate.domain.compliance.reporting.WaiverData
	13, // 14: chef.automate.domain.compliance.reporting.ControlItems.control_items:type_name -> chef.automate.domain.compliance.reporting.ControlItem
	10, // 15: chef.automate.domain.compliance.reporting.ControlItems.control_summary_totals:type_name -> chef.automate.domain.compliance.reporting.ControlSummary
	16, // 16: chef.automate.domain.compliance.reporting.ReportsSummaryLevelOne.reports:type_name -> chef.automate.domain.compliance.reporting.ReportSummaryLevelOne
	64, // 17: chef.automate.domain.compliance.reporting.ReportSummaryLevelOne.end_time:type_name -> google.protobuf.Timestamp
	10, // 18: chef.automate.domain.compliance.reporting.ReportSummaryLevelOne.controls:type_name -> chef.automate.domain.compliance.reporting.ControlSummary
	18, // 19: chef.automate.domain.compliance.reporting.Reports.reports:type_name -> chef.automate.domain.compliance.reporting.Report
	64, // 20: chef.automate.domain.compliance.reporting.Report.end_time:type_name -> google.protobuf.Timestamp
	10, // 21: chef.automate.domain.compliance.reporting.Report.controls:type_name -> chef.automate.domain.compliance.reporting.ControlSummary
	36, // 22: chef.automate.domain.compliance.reporting.Report.platform:type_name -> chef.automate.domain.compliance.reporting.Platform
	37, // 23: chef.automate.domain.compliance.reporting.Report.statistics:type_name -> chef.automate.domain.compliance.reporting.Statistics
	22, // 24: chef.automate.domain.compliance.reporting.Report.profiles:type_name -> chef.automate.domain.compliance.reporting.Profile
	64, // 25: chef.automate.domain.compliance.reporting.NodeHeaderInfo.end_time:type_name -> google.protobuf.Timestamp
	36, // 26: chef.automate.domain.compliance.reporting.NodeHeaderInfo.platform:type_name -> chef.automate.domain.compliance.reporting.Platform
	23, // 27: chef.automate.domain.compliance.reporting.NodeHeaderInfo.profiles:type_name -> chef.automate.domain.compliance.reporting.NodeHeaderProfileInfo
	21, // 28: chef.automate.domain.compliance.reporting.ReportIds.report_data:type_name -> chef.automate.domain.compliance.reporting.ReportData
	64, // 29: chef.automate.domain.compliance.reporting.ReportData.end_time:type_name -> google.protobuf.Timestamp
	28, // 30: chef.automate.domain.compliance.reporting.Profile.supports:type_name -> chef.automate.domain.compliance.reporting.Support
	29, // 31: chef.automate.domain.compliance.reporting.Profile.depends:type_name -> chef.automate.domain.compliance.reporting.Dependency
	30, // 32: chef.automate.domain.compliance.reporting.Profile.groups:type_name -> chef.automate.domain.compliance.reporting.Group
	31, // 33: chef.automate.domain.compliance.reporting.Profile.controls:type_name -> chef.automate.domain.compliance.reporting.Control
	35, // 34: chef.automate.domain.compliance.reporting.Profile.attributes:type_name -> chef.automate.domain.compliance.reporting.Attribute
	26, // 35: chef.automate.domain.compliance.reporting.Control.source_location:type_name -> chef.automate.domain.compliance.reporting.SourceLocation
	25, // 36: chef.automate.domain.compliance.reporting.Control.results:type_name -> chef.automate.domain.compliance.reporting.Result
	24, // 37: chef.automate.domain.compliance.reporting.Control.refs:type_name -> chef.automate.domain.compliance.reporting.Ref
	63, // 38: chef.automate.domain.compliance.reporting.Control.string_tags:type_name -> chef.automate.domain.compliance.reporting.Control.StringTagsEntry
	32, // 39: chef.automate.domain.compliance.reporting.Control.waiver_data:type_name -> chef.automate.domain.compliance.reporting.OrigWaiverData
	33, // 40: chef.automate.domain.compliance.reporting.Control.removed_results_counts:type_name -> chef.automate.domain.compliance.reporting.RemovedResultsCounts
	27, // 41: chef.automate.domain.compliance.reporting.Attribute.options:type_name -> chef.automate.domain.compliance.reporting.Option
	6,  // 42: chef.automate.domain.compliance.reporting.SuggestionRequest.filters:type_name -> chef.automate.domain.compliance.reporting.ListFilter
	39, // 43: chef.automate.domain.compliance.reporting.Suggestions.suggestions:type_name -> chef.automate.domain.compliance.reporting.Suggestion
	43, // 44: chef.automate.domain.compliance.reporting.ProfileMins.profiles:type_name -> chef.automate.domain.compliance.reporting.ProfileMin
	42, // 45: chef.automate.domain.compliance.reporting.ProfileMins.counts:type_name -> chef.automate.domain.compliance.reporting.ProfileCounts
	36, // 46: chef.automate.domain.compliance.reporting.Node.platform:type_name -> chef.automate.domain.compliance.reporting.Platform
	47, // 47: chef.automate.domain.compliance.reporting.Node.latest_report:type_name -> chef.automate.domain.compliance.reporting.LatestReportSummary
	46, // 48: chef.automate.domain.compliance.reporting.Node.tags:type_name -> chef.automate.domain.compliance.reporting.Kv
	48, // 49: chef.automate.domain.compliance.reporting.Node.profiles:type_name -> chef.automate.domain.compliance.reporting.ProfileMeta
	44, // 50: chef.automate.domain.compliance.reporting.Nodes.nodes:type_name -> chef.automate.domain.compliance.reporting.Node
	64, // 51: chef.automate.domain.compliance.reporting.LatestReportSummary.end_time:type_name -> google.protobuf.Timestamp
	10, // 52: chef.automate.domain.compliance.reporting.LatestReportSummary.controls:type_name -> chef.automate.domain.compliance.reporting.ControlSummary
	49, // 53: chef.automate.domain.compliance.reporting.ControlElements.control_elements:type_name -> chef.automate.domain.compliance.reporting.ControlElement
	53, // 54: chef.automate.domain.compliance.reporting.ReportListForReportManagerResponse.reports:type_name -> chef.automate.domain.compliance.reporting.ReportResponse
	54, // 55: chef.automate.domain.compliance.reporting.ReportResponse.profiles:type_name -> chef.automate.domain.compliance.reporting.ProfileResponse
	56, // 56: chef.automate.domain.compliance.reporting.AssetSummary.collected:type_name -> chef.automate.domain.compliance.reporting.Collected
	6,  // 57: chef.automate.domain.compliance.reporting.AssetListRequest.filters:type_name -> chef.automate.domain.compliance.reporting.ListFilter
	57, // 58: chef.automate.domain.compliance.reporting.AssetListResponse.assets:type_name -> chef.automate.domain.compliance.reporting.Assets
	34, // 59: chef.automate.domain.compliance.reporting.Control.StringTagsEntry.value:type_name -> chef.automate.domain.compliance.reporting.TagValues
	5,  // 60: chef.automate.domain.compliance.reporting.ReportingService.ListReports:input_type -> chef.automate.domain.compliance.reporting.Query
	5,  // 61: chef.automate.domain.compliance.reporting.ReportingService.ListReportIds:input_type -> chef.automate.domain.compliance.reporting.Query
	5,  // 62: chef.automate.domain.compliance.reporting.ReportingService.ReadReport:input_type -> chef.automate.domain.compliance.reporting.Query
	38, // 63: chef.automate.domain.compliance.reporting.ReportingService.ListSuggestions:input_type -> chef.automate.domain.compliance.reporting.SuggestionRequest
	5,  // 64: chef.automate.domain.compliance.reporting.ReportingService.ListProfiles:input_type -> chef.automate.domain.compliance.reporting.Query
	5,  // 65: chef.automate.domain.compliance.reporting.ReportingService.Export:input_type -> chef.automate.domain.compliance.reporting.Query
	5,  // 66: chef.automate.domain.compliance.reporting.ReportingService.ExportNode:input_type -> chef.automate.domain.compliance.reporting.Query
	5,  // 67: chef.automate.domain.compliance.reporting.ReportingService.ExportReportManager:input_type -> chef.automate.domain.compliance.reporting.Query
	4,  // 68: chef.automate.domain.compliance.reporting.ReportingService.ReadNode:input_type -> chef.automate.domain.compliance.reporting.Id
	5,  // 69: chef.automate.domain.compliance.reporting.ReportingService.ListNodes:input_type -> chef.automate.domain.compliance.reporting.Query
	11, // 70: chef.automate.domain.compliance.reporting.ReportingService.ListControlItems:input_type -> chef.automate.domain.compliance.reporting.ControlItemRequest
	5,  // 71: chef.automate.domain.compliance.reporting.ReportingService.ReadNodeHeader:input_type -> chef.automate.domain.compliance.reporting.Query
	5,  // 72: chef.automate.domain.compliance.reporting.ReportingService.ListControlInfo:input_type -> chef.automate.domain.compliance.reporting.Query
	1,  // 73: chef.automate.domain.compliance.reporting.ReportingService.GetReportContent:input_type -> chef.automate.domain.compliance.reporting.ReportContentRequest
	7,  // 74: chef.automate.domain.compliance.reporting.ReportingService.GetReportListForReportManager:input_type -> chef.automate.domain.compliance.reporting.ListFilters
	7,  // 75: chef.automate.domain.compliance.reporting.ReportingService.AssetCount:input_type -> chef.automate.domain.compliance.reporting.ListFilters
	58, // 76: chef.automate.domain.compliance.reporting.ReportingService.ListAsset:input_type -> chef.automate.domain.compliance.reporting.AssetListRequest
	60, // 77: chef.automate.domain.compliance.reporting.ReportingService.SetAssetConfig:input_type -> chef.automate.domain.compliance.reporting.ComplianceConfigRequest
	62, // 78: chef.automate.domain.compliance.reporting.ReportingService.GetAssetConfig:input_type -> chef.automate.domain.compliance.reporting.GetAssetConfigRequest
	15, // 79: chef.automate.domain.compliance.reporting.ReportingService.ListReports:output_type -> chef.automate.domain.compliance.reporting.ReportsSummaryLevelOne
	20, // 80: chef.automate.domain.compliance.reporting.ReportingService.ListReportIds:output_type -> chef.automate.domain.compliance.reporting.ReportIds
	18, // 81: chef.automate.domain.compliance.reporting.ReportingService.ReadReport:output_type -> chef.automate.domain.compliance.reporting.Report
	40, // 82: chef.automate.domain.compliance.reporting.ReportingService.ListSuggestions:output_type -> chef.automate.domain.compliance.reporting.Suggestions
	41, // 83: chef.automate.domain.compliance.reporting.ReportingService.ListProfiles:output_type -> chef.automate.domain.compliance.reporting.ProfileMins
	3,  // 84: chef.automate.domain.compliance.reporting.ReportingService.Export:output_type -> chef.automate.domain.compliance.reporting.ExportData
	3,  // 85: chef.automate.domain.compliance.reporting.ReportingService.ExportNode:output_type -> chef.automate.domain.compliance.reporting.ExportData
	51, // 86: chef.automate.domain.compliance.reporting.ReportingService.ExportReportManager:output_type -> chef.automate.domain.compliance.reporting.CustomReportResponse
	44, // 87: chef.automate.domain.compliance.reporting.ReportingService.ReadNode:output_type -> chef.automate.domain.compliance.reporting.Node
	45, // 88: chef.automate.domain.compliance.reporting.ReportingService.ListNodes:output_type -> chef.automate.domain.compliance.reporting.Nodes
	14, // 89: chef.automate.domain.compliance.reporting.ReportingService.ListControlItems:output_type -> chef.automate.domain.compliance.reporting.ControlItems
	19, // 90: chef.automate.domain.compliance.reporting.ReportingService.ReadNodeHeader:output_type -> chef.automate.domain.compliance.reporting.NodeHeaderInfo
	50, // 91: chef.automate.domain.compliance.reporting.ReportingService.ListControlInfo:output_type -> chef.automate.domain.compliance.reporting.ControlElements
	2,  // 92: chef.automate.domain.compliance.reporting.ReportingService.GetReportContent:output_type -> chef.automate.domain.compliance.reporting.ReportContentResponse
	2,  // 93: chef.automate.domain.compliance.reporting.ReportingService.GetReportListForReportManager:output_type -> chef.automate.domain.compliance.reporting.ReportContentResponse
	55, // 94: chef.automate.domain.compliance.reporting.ReportingService.AssetCount:output_type -> chef.automate.domain.compliance.reporting.AssetSummary
	59, // 95: chef.automate.domain.compliance.reporting.ReportingService.ListAsset:output_type -> chef.automate.domain.compliance.reporting.AssetListResponse
	61, // 96: chef.automate.domain.compliance.reporting.ReportingService.SetAssetConfig:output_type -> chef.automate.domain.compliance.reporting.ComplianceConfigResponse
	61, // 97: chef.automate.domain.compliance.reporting.ReportingService.GetAssetConfig:output_type -> chef.automate.domain.compliance.reporting.ComplianceConfigResponse
	79, // [79:98] is the sub-list for method output_type
	60, // [60:79] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_interservice_compliance_reporting_reporting_proto_init() }
func file_interservice_compliance_reporting_reporting_proto_init() {
	if File_interservice_compliance_reporting_reporting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interservice_compliance_reporting_reporting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Total); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaiverData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportsSummaryLevelOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSummaryLevelOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHeaderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHeaderProfileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Support); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Control); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrigWaiverData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovedResultsCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suggestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suggestions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileMins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileMin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestReportSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlElements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportListForReportManagerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_compliance_reporting_reporting_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_compliance_reporting_reporting_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_compliance_reporting_reporting_proto_goTypes,
		DependencyIndexes: file_interservice_compliance_reporting_reporting_proto_depIdxs,
		EnumInfos:         file_interservice_compliance_reporting_reporting_proto_enumTypes,
		MessageInfos:      file_interservice_compliance_reporting_reporting_proto_msgTypes,
	}.Build()
	File_interservice_compliance_reporting_reporting_proto = out.File
	file_interservice_compliance_reporting_reporting_proto_rawDesc = nil
	file_interservice_compliance_reporting_reporting_proto_goTypes = nil
	file_interservice_compliance_reporting_reporting_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportingServiceClient is the client API for ReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportingServiceClient interface {
	ListReports(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReportsSummaryLevelOne, error)
	ListReportIds(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReportIds, error)
	ReadReport(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Report, error)
	ListSuggestions(ctx context.Context, in *SuggestionRequest, opts ...grpc.CallOption) (*Suggestions, error)
	ListProfiles(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ProfileMins, error)
	Export(ctx context.Context, in *Query, opts ...grpc.CallOption) (ReportingService_ExportClient, error)
	ExportNode(ctx context.Context, in *Query, opts ...grpc.CallOption) (ReportingService_ExportNodeClient, error)
	ExportReportManager(ctx context.Context, in *Query, opts ...grpc.CallOption) (*CustomReportResponse, error)
	ReadNode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error)
	ListNodes(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Nodes, error)
	ListControlItems(ctx context.Context, in *ControlItemRequest, opts ...grpc.CallOption) (*ControlItems, error)
	ReadNodeHeader(ctx context.Context, in *Query, opts ...grpc.CallOption) (*NodeHeaderInfo, error)
	ListControlInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ControlElements, error)
	GetReportContent(ctx context.Context, in *ReportContentRequest, opts ...grpc.CallOption) (*ReportContentResponse, error)
	GetReportListForReportManager(ctx context.Context, in *ListFilters, opts ...grpc.CallOption) (ReportingService_GetReportListForReportManagerClient, error)
	AssetCount(ctx context.Context, in *ListFilters, opts ...grpc.CallOption) (*AssetSummary, error)
	ListAsset(ctx context.Context, in *AssetListRequest, opts ...grpc.CallOption) (*AssetListResponse, error)
	SetAssetConfig(ctx context.Context, in *ComplianceConfigRequest, opts ...grpc.CallOption) (*ComplianceConfigResponse, error)
	GetAssetConfig(ctx context.Context, in *GetAssetConfigRequest, opts ...grpc.CallOption) (*ComplianceConfigResponse, error)
}

type reportingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportingServiceClient(cc grpc.ClientConnInterface) ReportingServiceClient {
	return &reportingServiceClient{cc}
}

func (c *reportingServiceClient) ListReports(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReportsSummaryLevelOne, error) {
	out := new(ReportsSummaryLevelOne)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ListReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListReportIds(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReportIds, error) {
	out := new(ReportIds)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ListReportIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ReadReport(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ReadReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListSuggestions(ctx context.Context, in *SuggestionRequest, opts ...grpc.CallOption) (*Suggestions, error) {
	out := new(Suggestions)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ListSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListProfiles(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ProfileMins, error) {
	out := new(ProfileMins)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ListProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) Export(ctx context.Context, in *Query, opts ...grpc.CallOption) (ReportingService_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReportingService_serviceDesc.Streams[0], "/chef.automate.domain.compliance.reporting.ReportingService/Export", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportingServiceExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReportingService_ExportClient interface {
	Recv() (*ExportData, error)
	grpc.ClientStream
}

type reportingServiceExportClient struct {
	grpc.ClientStream
}

func (x *reportingServiceExportClient) Recv() (*ExportData, error) {
	m := new(ExportData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportingServiceClient) ExportNode(ctx context.Context, in *Query, opts ...grpc.CallOption) (ReportingService_ExportNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReportingService_serviceDesc.Streams[1], "/chef.automate.domain.compliance.reporting.ReportingService/ExportNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportingServiceExportNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReportingService_ExportNodeClient interface {
	Recv() (*ExportData, error)
	grpc.ClientStream
}

type reportingServiceExportNodeClient struct {
	grpc.ClientStream
}

func (x *reportingServiceExportNodeClient) Recv() (*ExportData, error) {
	m := new(ExportData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportingServiceClient) ExportReportManager(ctx context.Context, in *Query, opts ...grpc.CallOption) (*CustomReportResponse, error) {
	out := new(CustomReportResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ExportReportManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ReadNode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ReadNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListNodes(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListControlItems(ctx context.Context, in *ControlItemRequest, opts ...grpc.CallOption) (*ControlItems, error) {
	out := new(ControlItems)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ListControlItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ReadNodeHeader(ctx context.Context, in *Query, opts ...grpc.CallOption) (*NodeHeaderInfo, error) {
	out := new(NodeHeaderInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ReadNodeHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListControlInfo(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ControlElements, error) {
	out := new(ControlElements)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ListControlInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) GetReportContent(ctx context.Context, in *ReportContentRequest, opts ...grpc.CallOption) (*ReportContentResponse, error) {
	out := new(ReportContentResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/GetReportContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) GetReportListForReportManager(ctx context.Context, in *ListFilters, opts ...grpc.CallOption) (ReportingService_GetReportListForReportManagerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReportingService_serviceDesc.Streams[2], "/chef.automate.domain.compliance.reporting.ReportingService/GetReportListForReportManager", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportingServiceGetReportListForReportManagerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReportingService_GetReportListForReportManagerClient interface {
	Recv() (*ReportContentResponse, error)
	grpc.ClientStream
}

type reportingServiceGetReportListForReportManagerClient struct {
	grpc.ClientStream
}

func (x *reportingServiceGetReportListForReportManagerClient) Recv() (*ReportContentResponse, error) {
	m := new(ReportContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportingServiceClient) AssetCount(ctx context.Context, in *ListFilters, opts ...grpc.CallOption) (*AssetSummary, error) {
	out := new(AssetSummary)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/AssetCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListAsset(ctx context.Context, in *AssetListRequest, opts ...grpc.CallOption) (*AssetListResponse, error) {
	out := new(AssetListResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/ListAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) SetAssetConfig(ctx context.Context, in *ComplianceConfigRequest, opts ...grpc.CallOption) (*ComplianceConfigResponse, error) {
	out := new(ComplianceConfigResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/SetAssetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) GetAssetConfig(ctx context.Context, in *GetAssetConfigRequest, opts ...grpc.CallOption) (*ComplianceConfigResponse, error) {
	out := new(ComplianceConfigResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.reporting.ReportingService/GetAssetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingServiceServer is the server API for ReportingService service.
type ReportingServiceServer interface {
	ListReports(context.Context, *Query) (*ReportsSummaryLevelOne, error)
	ListReportIds(context.Context, *Query) (*ReportIds, error)
	ReadReport(context.Context, *Query) (*Report, error)
	ListSuggestions(context.Context, *SuggestionRequest) (*Suggestions, error)
	ListProfiles(context.Context, *Query) (*ProfileMins, error)
	Export(*Query, ReportingService_ExportServer) error
	ExportNode(*Query, ReportingService_ExportNodeServer) error
	ExportReportManager(context.Context, *Query) (*CustomReportResponse, error)
	ReadNode(context.Context, *Id) (*Node, error)
	ListNodes(context.Context, *Query) (*Nodes, error)
	ListControlItems(context.Context, *ControlItemRequest) (*ControlItems, error)
	ReadNodeHeader(context.Context, *Query) (*NodeHeaderInfo, error)
	ListControlInfo(context.Context, *Query) (*ControlElements, error)
	GetReportContent(context.Context, *ReportContentRequest) (*ReportContentResponse, error)
	GetReportListForReportManager(*ListFilters, ReportingService_GetReportListForReportManagerServer) error
	AssetCount(context.Context, *ListFilters) (*AssetSummary, error)
	ListAsset(context.Context, *AssetListRequest) (*AssetListResponse, error)
	SetAssetConfig(context.Context, *ComplianceConfigRequest) (*ComplianceConfigResponse, error)
	GetAssetConfig(context.Context, *GetAssetConfigRequest) (*ComplianceConfigResponse, error)
}

// UnimplementedReportingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportingServiceServer struct {
}

func (*UnimplementedReportingServiceServer) ListReports(context.Context, *Query) (*ReportsSummaryLevelOne, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (*UnimplementedReportingServiceServer) ListReportIds(context.Context, *Query) (*ReportIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportIds not implemented")
}
func (*UnimplementedReportingServiceServer) ReadReport(context.Context, *Query) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadReport not implemented")
}
func (*UnimplementedReportingServiceServer) ListSuggestions(context.Context, *SuggestionRequest) (*Suggestions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuggestions not implemented")
}
func (*UnimplementedReportingServiceServer) ListProfiles(context.Context, *Query) (*ProfileMins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (*UnimplementedReportingServiceServer) Export(*Query, ReportingService_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (*UnimplementedReportingServiceServer) ExportNode(*Query, ReportingService_ExportNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportNode not implemented")
}
func (*UnimplementedReportingServiceServer) ExportReportManager(context.Context, *Query) (*CustomReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportReportManager not implemented")
}
func (*UnimplementedReportingServiceServer) ReadNode(context.Context, *Id) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNode not implemented")
}
func (*UnimplementedReportingServiceServer) ListNodes(context.Context, *Query) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedReportingServiceServer) ListControlItems(context.Context, *ControlItemRequest) (*ControlItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListControlItems not implemented")
}
func (*UnimplementedReportingServiceServer) ReadNodeHeader(context.Context, *Query) (*NodeHeaderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNodeHeader not implemented")
}
func (*UnimplementedReportingServiceServer) ListControlInfo(context.Context, *Query) (*ControlElements, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListControlInfo not implemented")
}
func (*UnimplementedReportingServiceServer) GetReportContent(context.Context, *ReportContentRequest) (*ReportContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportContent not implemented")
}
func (*UnimplementedReportingServiceServer) GetReportListForReportManager(*ListFilters, ReportingService_GetReportListForReportManagerServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReportListForReportManager not implemented")
}
func (*UnimplementedReportingServiceServer) AssetCount(context.Context, *ListFilters) (*AssetSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetCount not implemented")
}
func (*UnimplementedReportingServiceServer) ListAsset(context.Context, *AssetListRequest) (*AssetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAsset not implemented")
}
func (*UnimplementedReportingServiceServer) SetAssetConfig(context.Context, *ComplianceConfigRequest) (*ComplianceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAssetConfig not implemented")
}
func (*UnimplementedReportingServiceServer) GetAssetConfig(context.Context, *GetAssetConfigRequest) (*ComplianceConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetConfig not implemented")
}

func RegisterReportingServiceServer(s *grpc.Server, srv ReportingServiceServer) {
	s.RegisterService(&_ReportingService_serviceDesc, srv)
}

func _ReportingService_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ListReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListReports(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListReportIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListReportIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ListReportIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListReportIds(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ReadReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ReadReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ReadReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ReadReport(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ListSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListSuggestions(ctx, req.(*SuggestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ListProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListProfiles(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportingServiceServer).Export(m, &reportingServiceExportServer{stream})
}

type ReportingService_ExportServer interface {
	Send(*ExportData) error
	grpc.ServerStream
}

type reportingServiceExportServer struct {
	grpc.ServerStream
}

func (x *reportingServiceExportServer) Send(m *ExportData) error {
	return x.ServerStream.SendMsg(m)
}

func _ReportingService_ExportNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportingServiceServer).ExportNode(m, &reportingServiceExportNodeServer{stream})
}

type ReportingService_ExportNodeServer interface {
	Send(*ExportData) error
	grpc.ServerStream
}

type reportingServiceExportNodeServer struct {
	grpc.ServerStream
}

func (x *reportingServiceExportNodeServer) Send(m *ExportData) error {
	return x.ServerStream.SendMsg(m)
}

func _ReportingService_ExportReportManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ExportReportManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ExportReportManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ExportReportManager(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ReadNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ReadNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ReadNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ReadNode(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListNodes(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListControlItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListControlItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ListControlItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListControlItems(ctx, req.(*ControlItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ReadNodeHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ReadNodeHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ReadNodeHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ReadNodeHeader(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListControlInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListControlInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ListControlInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListControlInfo(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_GetReportContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GetReportContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/GetReportContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GetReportContent(ctx, req.(*ReportContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_GetReportListForReportManager_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFilters)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportingServiceServer).GetReportListForReportManager(m, &reportingServiceGetReportListForReportManagerServer{stream})
}

type ReportingService_GetReportListForReportManagerServer interface {
	Send(*ReportContentResponse) error
	grpc.ServerStream
}

type reportingServiceGetReportListForReportManagerServer struct {
	grpc.ServerStream
}

func (x *reportingServiceGetReportListForReportManagerServer) Send(m *ReportContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ReportingService_AssetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).AssetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/AssetCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).AssetCount(ctx, req.(*ListFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/ListAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListAsset(ctx, req.(*AssetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_SetAssetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplianceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).SetAssetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/SetAssetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).SetAssetConfig(ctx, req.(*ComplianceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_GetAssetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GetAssetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.reporting.ReportingService/GetAssetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GetAssetConfig(ctx, req.(*GetAssetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.compliance.reporting.ReportingService",
	HandlerType: (*ReportingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReports",
			Handler:    _ReportingService_ListReports_Handler,
		},
		{
			MethodName: "ListReportIds",
			Handler:    _ReportingService_ListReportIds_Handler,
		},
		{
			MethodName: "ReadReport",
			Handler:    _ReportingService_ReadReport_Handler,
		},
		{
			MethodName: "ListSuggestions",
			Handler:    _ReportingService_ListSuggestions_Handler,
		},
		{
			MethodName: "ListProfiles",
			Handler:    _ReportingService_ListProfiles_Handler,
		},
		{
			MethodName: "ExportReportManager",
			Handler:    _ReportingService_ExportReportManager_Handler,
		},
		{
			MethodName: "ReadNode",
			Handler:    _ReportingService_ReadNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _ReportingService_ListNodes_Handler,
		},
		{
			MethodName: "ListControlItems",
			Handler:    _ReportingService_ListControlItems_Handler,
		},
		{
			MethodName: "ReadNodeHeader",
			Handler:    _ReportingService_ReadNodeHeader_Handler,
		},
		{
			MethodName: "ListControlInfo",
			Handler:    _ReportingService_ListControlInfo_Handler,
		},
		{
			MethodName: "GetReportContent",
			Handler:    _ReportingService_GetReportContent_Handler,
		},
		{
			MethodName: "AssetCount",
			Handler:    _ReportingService_AssetCount_Handler,
		},
		{
			MethodName: "ListAsset",
			Handler:    _ReportingService_ListAsset_Handler,
		},
		{
			MethodName: "SetAssetConfig",
			Handler:    _ReportingService_SetAssetConfig_Handler,
		},
		{
			MethodName: "GetAssetConfig",
			Handler:    _ReportingService_GetAssetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Export",
			Handler:       _ReportingService_Export_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExportNode",
			Handler:       _ReportingService_ExportNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetReportListForReportManager",
			Handler:       _ReportingService_GetReportListForReportManager_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interservice/compliance/reporting/reporting.proto",
}
