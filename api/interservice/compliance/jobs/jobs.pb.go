// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.0
// source: interservice/compliance/jobs/jobs.proto

package jobs

import (
	context "context"
	common "github.com/chef/automate/api/interservice/compliance/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

// Enum value maps for Query_OrderType.
var (
	Query_OrderType_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Query_OrderType_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Query_OrderType) Enum() *Query_OrderType {
	p := new(Query_OrderType)
	*p = x
	return p
}

func (x Query_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_compliance_jobs_jobs_proto_enumTypes[0].Descriptor()
}

func (Query_OrderType) Type() protoreflect.EnumType {
	return &file_interservice_compliance_jobs_jobs_proto_enumTypes[0]
}

func (x Query_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_OrderType.Descriptor instead.
func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{7, 0}
}

type GetJobResultByNodeIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty" toml:"job_id,omitempty" mapstructure:"job_id,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" toml:"node_id,omitempty" mapstructure:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJobResultByNodeIdRequest) Reset() {
	*x = GetJobResultByNodeIdRequest{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobResultByNodeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobResultByNodeIdRequest) ProtoMessage() {}

func (x *GetJobResultByNodeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobResultByNodeIdRequest.ProtoReflect.Descriptor instead.
func (*GetJobResultByNodeIdRequest) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{0}
}

func (x *GetJobResultByNodeIdRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GetJobResultByNodeIdRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type RerunResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RerunResponse) Reset() {
	*x = RerunResponse{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RerunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunResponse) ProtoMessage() {}

func (x *RerunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunResponse.ProtoReflect.Descriptor instead.
func (*RerunResponse) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{1}
}

type Id struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Id) Reset() {
	*x = Id{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{2}
}

func (x *Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Id) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Ids struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty" toml:"ids,omitempty" mapstructure:"ids,omitempty"`
	IdsWithTime   []*IdsWithTime         `protobuf:"bytes,2,rep,name=ids_with_time,json=idsWithTime,proto3" json:"ids_with_time,omitempty" toml:"ids_with_time,omitempty" mapstructure:"ids_with_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ids) Reset() {
	*x = Ids{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{3}
}

func (x *Ids) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Ids) GetIdsWithTime() []*IdsWithTime {
	if x != nil {
		return x.IdsWithTime
	}
	return nil
}

type IdsWithTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdsWithTime) Reset() {
	*x = IdsWithTime{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdsWithTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdsWithTime) ProtoMessage() {}

func (x *IdsWithTime) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdsWithTime.ProtoReflect.Descriptor instead.
func (*IdsWithTime) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{4}
}

func (x *IdsWithTime) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdsWithTime) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type TimeQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" toml:"start_time,omitempty" mapstructure:"start_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeQuery) Reset() {
	*x = TimeQuery{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeQuery) ProtoMessage() {}

func (x *TimeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeQuery.ProtoReflect.Descriptor instead.
func (*TimeQuery) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{5}
}

func (x *TimeQuery) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type ManagerFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ManagerId     string                 `protobuf:"bytes,1,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty" toml:"manager_id,omitempty" mapstructure:"manager_id,omitempty"`
	Filters       []*common.Filter       `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManagerFilter) Reset() {
	*x = ManagerFilter{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagerFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerFilter) ProtoMessage() {}

func (x *ManagerFilter) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerFilter.ProtoReflect.Descriptor instead.
func (*ManagerFilter) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{6}
}

func (x *ManagerFilter) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *ManagerFilter) GetFilters() []*common.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       []*common.Filter       `protobuf:"bytes,20,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
	Order         Query_OrderType        `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.domain.compliance.jobs.Query_OrderType" json:"order,omitempty" toml:"order,omitempty" mapstructure:"order,omitempty"`
	Sort          string                 `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty" toml:"sort,omitempty" mapstructure:"sort,omitempty"`
	Page          int32                  `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty" toml:"page,omitempty" mapstructure:"page,omitempty"`
	PerPage       int32                  `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty" toml:"per_page,omitempty" mapstructure:"per_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{7}
}

func (x *Query) GetFilters() []*common.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Query) GetOrder() Query_OrderType {
	if x != nil {
		return x.Order
	}
	return Query_ASC
}

func (x *Query) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *Query) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Query) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type Job struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
	Timeout       int32                  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty" toml:"timeout,omitempty" mapstructure:"timeout,omitempty"`
	Tags          []*common.Kv           `protobuf:"bytes,20,rep,name=tags,proto3" json:"tags,omitempty" toml:"tags,omitempty" mapstructure:"tags,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" toml:"start_time,omitempty" mapstructure:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
	Status        string                 `protobuf:"bytes,23,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Retries       int32                  `protobuf:"varint,26,opt,name=retries,proto3" json:"retries,omitempty" toml:"retries,omitempty" mapstructure:"retries,omitempty"`
	RetriesLeft   int32                  `protobuf:"varint,27,opt,name=retries_left,json=retriesLeft,proto3" json:"retries_left,omitempty" toml:"retries_left,omitempty" mapstructure:"retries_left,omitempty"`
	Results       []*ResultsRow          `protobuf:"bytes,28,rep,name=results,proto3" json:"results,omitempty" toml:"results,omitempty" mapstructure:"results,omitempty"`
	Nodes         []string               `protobuf:"bytes,100,rep,name=nodes,proto3" json:"nodes,omitempty" toml:"nodes,omitempty" mapstructure:"nodes,omitempty"`
	Profiles      []string               `protobuf:"bytes,101,rep,name=profiles,proto3" json:"profiles,omitempty" toml:"profiles,omitempty" mapstructure:"profiles,omitempty"`
	NodeCount     int32                  `protobuf:"varint,102,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty" toml:"node_count,omitempty" mapstructure:"node_count,omitempty"`
	ProfileCount  int32                  `protobuf:"varint,103,opt,name=profile_count,json=profileCount,proto3" json:"profile_count,omitempty" toml:"profile_count,omitempty" mapstructure:"profile_count,omitempty"`
	NodeSelectors []*ManagerFilter       `protobuf:"bytes,104,rep,name=node_selectors,json=nodeSelectors,proto3" json:"node_selectors,omitempty" toml:"node_selectors,omitempty" mapstructure:"node_selectors,omitempty"`
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,105,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty" toml:"scheduled_time,omitempty" mapstructure:"scheduled_time,omitempty"`
	Recurrence    string                 `protobuf:"bytes,106,opt,name=recurrence,proto3" json:"recurrence,omitempty" toml:"recurrence,omitempty" mapstructure:"recurrence,omitempty"`
	ParentId      string                 `protobuf:"bytes,107,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" toml:"parent_id,omitempty" mapstructure:"parent_id,omitempty"`
	JobCount      int32                  `protobuf:"varint,108,opt,name=job_count,json=jobCount,proto3" json:"job_count,omitempty" toml:"job_count,omitempty" mapstructure:"job_count,omitempty"`
	Deleted       bool                   `protobuf:"varint,109,opt,name=deleted,proto3" json:"deleted,omitempty" toml:"deleted,omitempty" mapstructure:"deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{8}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Job) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Job) GetTags() []*common.Kv {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Job) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Job) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Job) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Job) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *Job) GetRetriesLeft() int32 {
	if x != nil {
		return x.RetriesLeft
	}
	return 0
}

func (x *Job) GetResults() []*ResultsRow {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Job) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Job) GetProfiles() []string {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Job) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *Job) GetProfileCount() int32 {
	if x != nil {
		return x.ProfileCount
	}
	return 0
}

func (x *Job) GetNodeSelectors() []*ManagerFilter {
	if x != nil {
		return x.NodeSelectors
	}
	return nil
}

func (x *Job) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *Job) GetRecurrence() string {
	if x != nil {
		return x.Recurrence
	}
	return ""
}

func (x *Job) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Job) GetJobCount() int32 {
	if x != nil {
		return x.JobCount
	}
	return 0
}

func (x *Job) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type Jobs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Jobs          []*Job                 `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty" toml:"jobs,omitempty" mapstructure:"jobs,omitempty"`
	Total         int32                  `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty" toml:"total,omitempty" mapstructure:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Jobs) Reset() {
	*x = Jobs{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jobs) ProtoMessage() {}

func (x *Jobs) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jobs.ProtoReflect.Descriptor instead.
func (*Jobs) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{9}
}

func (x *Jobs) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *Jobs) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ResultsRow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" toml:"node_id,omitempty" mapstructure:"node_id,omitempty"`
	ReportId      string                 `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty" toml:"report_id,omitempty" mapstructure:"report_id,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Result        string                 `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty" toml:"result,omitempty" mapstructure:"result,omitempty"`
	JobId         string                 `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty" toml:"job_id,omitempty" mapstructure:"job_id,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" toml:"start_time,omitempty" mapstructure:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultsRow) Reset() {
	*x = ResultsRow{}
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultsRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsRow) ProtoMessage() {}

func (x *ResultsRow) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_compliance_jobs_jobs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsRow.ProtoReflect.Descriptor instead.
func (*ResultsRow) Descriptor() ([]byte, []int) {
	return file_interservice_compliance_jobs_jobs_proto_rawDescGZIP(), []int{10}
}

func (x *ResultsRow) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ResultsRow) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *ResultsRow) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ResultsRow) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ResultsRow) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ResultsRow) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ResultsRow) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

var File_interservice_compliance_jobs_jobs_proto protoreflect.FileDescriptor

const file_interservice_compliance_jobs_jobs_proto_rawDesc = "" +
	"\n" +
	"'interservice/compliance/jobs/jobs.proto\x12$chef.automate.domain.compliance.jobs\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a+interservice/compliance/common/common.proto\"M\n" +
	"\x1bGetJobResultByNodeIdRequest\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\tR\x05jobId\x12\x17\n" +
	"\anode_id\x18\x02 \x01(\tR\x06nodeId\"\x0f\n" +
	"\rRerunResponse\"(\n" +
	"\x02Id\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"n\n" +
	"\x03Ids\x12\x10\n" +
	"\x03ids\x18\x01 \x03(\tR\x03ids\x12U\n" +
	"\rids_with_time\x18\x02 \x03(\v21.chef.automate.domain.compliance.jobs.IdsWithTimeR\vidsWithTime\"T\n" +
	"\vIdsWithTime\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x125\n" +
	"\bend_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\"F\n" +
	"\tTimeQuery\x129\n" +
	"\n" +
	"start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\"x\n" +
	"\rManagerFilter\x12\x1d\n" +
	"\n" +
	"manager_id\x18\x01 \x01(\tR\tmanagerId\x12H\n" +
	"\afilters\x18\x02 \x03(\v2..chef.automate.domain.compliance.common.FilterR\afilters\"\x81\x02\n" +
	"\x05Query\x12H\n" +
	"\afilters\x18\x14 \x03(\v2..chef.automate.domain.compliance.common.FilterR\afilters\x12K\n" +
	"\x05order\x18\x15 \x01(\x0e25.chef.automate.domain.compliance.jobs.Query.OrderTypeR\x05order\x12\x12\n" +
	"\x04sort\x18\x16 \x01(\tR\x04sort\x12\x12\n" +
	"\x04page\x18\x17 \x01(\x05R\x04page\x12\x19\n" +
	"\bper_page\x18\x18 \x01(\x05R\aperPage\"\x1e\n" +
	"\tOrderType\x12\a\n" +
	"\x03ASC\x10\x00\x12\b\n" +
	"\x04DESC\x10\x01\"\xb3\x06\n" +
	"\x03Job\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x18\n" +
	"\atimeout\x18\x04 \x01(\x05R\atimeout\x12>\n" +
	"\x04tags\x18\x14 \x03(\v2*.chef.automate.domain.compliance.common.KvR\x04tags\x129\n" +
	"\n" +
	"start_time\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x16 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x16\n" +
	"\x06status\x18\x17 \x01(\tR\x06status\x12\x18\n" +
	"\aretries\x18\x1a \x01(\x05R\aretries\x12!\n" +
	"\fretries_left\x18\x1b \x01(\x05R\vretriesLeft\x12J\n" +
	"\aresults\x18\x1c \x03(\v20.chef.automate.domain.compliance.jobs.ResultsRowR\aresults\x12\x14\n" +
	"\x05nodes\x18d \x03(\tR\x05nodes\x12\x1a\n" +
	"\bprofiles\x18e \x03(\tR\bprofiles\x12\x1d\n" +
	"\n" +
	"node_count\x18f \x01(\x05R\tnodeCount\x12#\n" +
	"\rprofile_count\x18g \x01(\x05R\fprofileCount\x12Z\n" +
	"\x0enode_selectors\x18h \x03(\v23.chef.automate.domain.compliance.jobs.ManagerFilterR\rnodeSelectors\x12A\n" +
	"\x0escheduled_time\x18i \x01(\v2\x1a.google.protobuf.TimestampR\rscheduledTime\x12\x1e\n" +
	"\n" +
	"recurrence\x18j \x01(\tR\n" +
	"recurrence\x12\x1b\n" +
	"\tparent_id\x18k \x01(\tR\bparentId\x12\x1b\n" +
	"\tjob_count\x18l \x01(\x05R\bjobCount\x12\x18\n" +
	"\adeleted\x18m \x01(\bR\adeleted\"[\n" +
	"\x04Jobs\x12=\n" +
	"\x04jobs\x18\x01 \x03(\v2).chef.automate.domain.compliance.jobs.JobR\x04jobs\x12\x14\n" +
	"\x05total\x18\x14 \x01(\x05R\x05total\"\xfb\x01\n" +
	"\n" +
	"ResultsRow\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1b\n" +
	"\treport_id\x18\x02 \x01(\tR\breportId\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12\x16\n" +
	"\x06result\x18\x04 \x01(\tR\x06result\x12\x15\n" +
	"\x06job_id\x18\x05 \x01(\tR\x05jobId\x129\n" +
	"\n" +
	"start_time\x18\x14 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime2\xbb\x06\n" +
	"\vJobsService\x12_\n" +
	"\x06Create\x12).chef.automate.domain.compliance.jobs.Job\x1a(.chef.automate.domain.compliance.jobs.Id\"\x00\x12]\n" +
	"\x04Read\x12(.chef.automate.domain.compliance.jobs.Id\x1a).chef.automate.domain.compliance.jobs.Job\"\x00\x12M\n" +
	"\x06Update\x12).chef.automate.domain.compliance.jobs.Job\x1a\x16.google.protobuf.Empty\"\x00\x12L\n" +
	"\x06Delete\x12(.chef.automate.domain.compliance.jobs.Id\x1a\x16.google.protobuf.Empty\"\x00\x12a\n" +
	"\x04List\x12+.chef.automate.domain.compliance.jobs.Query\x1a*.chef.automate.domain.compliance.jobs.Jobs\"\x00\x12h\n" +
	"\x05Rerun\x12(.chef.automate.domain.compliance.jobs.Id\x1a3.chef.automate.domain.compliance.jobs.RerunResponse\"\x00\x12r\n" +
	"\x12ListInitiatedScans\x12/.chef.automate.domain.compliance.jobs.TimeQuery\x1a).chef.automate.domain.compliance.jobs.Ids\"\x00\x12\x8d\x01\n" +
	"\x14GetJobResultByNodeId\x12A.chef.automate.domain.compliance.jobs.GetJobResultByNodeIdRequest\x1a0.chef.automate.domain.compliance.jobs.ResultsRow\"\x00B;Z9github.com/chef/automate/api/interservice/compliance/jobsb\x06proto3"

var (
	file_interservice_compliance_jobs_jobs_proto_rawDescOnce sync.Once
	file_interservice_compliance_jobs_jobs_proto_rawDescData []byte
)

func file_interservice_compliance_jobs_jobs_proto_rawDescGZIP() []byte {
	file_interservice_compliance_jobs_jobs_proto_rawDescOnce.Do(func() {
		file_interservice_compliance_jobs_jobs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_interservice_compliance_jobs_jobs_proto_rawDesc), len(file_interservice_compliance_jobs_jobs_proto_rawDesc)))
	})
	return file_interservice_compliance_jobs_jobs_proto_rawDescData
}

var file_interservice_compliance_jobs_jobs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_interservice_compliance_jobs_jobs_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_interservice_compliance_jobs_jobs_proto_goTypes = []any{
	(Query_OrderType)(0),                // 0: chef.automate.domain.compliance.jobs.Query.OrderType
	(*GetJobResultByNodeIdRequest)(nil), // 1: chef.automate.domain.compliance.jobs.GetJobResultByNodeIdRequest
	(*RerunResponse)(nil),               // 2: chef.automate.domain.compliance.jobs.RerunResponse
	(*Id)(nil),                          // 3: chef.automate.domain.compliance.jobs.Id
	(*Ids)(nil),                         // 4: chef.automate.domain.compliance.jobs.Ids
	(*IdsWithTime)(nil),                 // 5: chef.automate.domain.compliance.jobs.IdsWithTime
	(*TimeQuery)(nil),                   // 6: chef.automate.domain.compliance.jobs.TimeQuery
	(*ManagerFilter)(nil),               // 7: chef.automate.domain.compliance.jobs.ManagerFilter
	(*Query)(nil),                       // 8: chef.automate.domain.compliance.jobs.Query
	(*Job)(nil),                         // 9: chef.automate.domain.compliance.jobs.Job
	(*Jobs)(nil),                        // 10: chef.automate.domain.compliance.jobs.Jobs
	(*ResultsRow)(nil),                  // 11: chef.automate.domain.compliance.jobs.ResultsRow
	(*timestamppb.Timestamp)(nil),       // 12: google.protobuf.Timestamp
	(*common.Filter)(nil),               // 13: chef.automate.domain.compliance.common.Filter
	(*common.Kv)(nil),                   // 14: chef.automate.domain.compliance.common.Kv
	(*emptypb.Empty)(nil),               // 15: google.protobuf.Empty
}
var file_interservice_compliance_jobs_jobs_proto_depIdxs = []int32{
	5,  // 0: chef.automate.domain.compliance.jobs.Ids.ids_with_time:type_name -> chef.automate.domain.compliance.jobs.IdsWithTime
	12, // 1: chef.automate.domain.compliance.jobs.IdsWithTime.end_time:type_name -> google.protobuf.Timestamp
	12, // 2: chef.automate.domain.compliance.jobs.TimeQuery.start_time:type_name -> google.protobuf.Timestamp
	13, // 3: chef.automate.domain.compliance.jobs.ManagerFilter.filters:type_name -> chef.automate.domain.compliance.common.Filter
	13, // 4: chef.automate.domain.compliance.jobs.Query.filters:type_name -> chef.automate.domain.compliance.common.Filter
	0,  // 5: chef.automate.domain.compliance.jobs.Query.order:type_name -> chef.automate.domain.compliance.jobs.Query.OrderType
	14, // 6: chef.automate.domain.compliance.jobs.Job.tags:type_name -> chef.automate.domain.compliance.common.Kv
	12, // 7: chef.automate.domain.compliance.jobs.Job.start_time:type_name -> google.protobuf.Timestamp
	12, // 8: chef.automate.domain.compliance.jobs.Job.end_time:type_name -> google.protobuf.Timestamp
	11, // 9: chef.automate.domain.compliance.jobs.Job.results:type_name -> chef.automate.domain.compliance.jobs.ResultsRow
	7,  // 10: chef.automate.domain.compliance.jobs.Job.node_selectors:type_name -> chef.automate.domain.compliance.jobs.ManagerFilter
	12, // 11: chef.automate.domain.compliance.jobs.Job.scheduled_time:type_name -> google.protobuf.Timestamp
	9,  // 12: chef.automate.domain.compliance.jobs.Jobs.jobs:type_name -> chef.automate.domain.compliance.jobs.Job
	12, // 13: chef.automate.domain.compliance.jobs.ResultsRow.start_time:type_name -> google.protobuf.Timestamp
	12, // 14: chef.automate.domain.compliance.jobs.ResultsRow.end_time:type_name -> google.protobuf.Timestamp
	9,  // 15: chef.automate.domain.compliance.jobs.JobsService.Create:input_type -> chef.automate.domain.compliance.jobs.Job
	3,  // 16: chef.automate.domain.compliance.jobs.JobsService.Read:input_type -> chef.automate.domain.compliance.jobs.Id
	9,  // 17: chef.automate.domain.compliance.jobs.JobsService.Update:input_type -> chef.automate.domain.compliance.jobs.Job
	3,  // 18: chef.automate.domain.compliance.jobs.JobsService.Delete:input_type -> chef.automate.domain.compliance.jobs.Id
	8,  // 19: chef.automate.domain.compliance.jobs.JobsService.List:input_type -> chef.automate.domain.compliance.jobs.Query
	3,  // 20: chef.automate.domain.compliance.jobs.JobsService.Rerun:input_type -> chef.automate.domain.compliance.jobs.Id
	6,  // 21: chef.automate.domain.compliance.jobs.JobsService.ListInitiatedScans:input_type -> chef.automate.domain.compliance.jobs.TimeQuery
	1,  // 22: chef.automate.domain.compliance.jobs.JobsService.GetJobResultByNodeId:input_type -> chef.automate.domain.compliance.jobs.GetJobResultByNodeIdRequest
	3,  // 23: chef.automate.domain.compliance.jobs.JobsService.Create:output_type -> chef.automate.domain.compliance.jobs.Id
	9,  // 24: chef.automate.domain.compliance.jobs.JobsService.Read:output_type -> chef.automate.domain.compliance.jobs.Job
	15, // 25: chef.automate.domain.compliance.jobs.JobsService.Update:output_type -> google.protobuf.Empty
	15, // 26: chef.automate.domain.compliance.jobs.JobsService.Delete:output_type -> google.protobuf.Empty
	10, // 27: chef.automate.domain.compliance.jobs.JobsService.List:output_type -> chef.automate.domain.compliance.jobs.Jobs
	2,  // 28: chef.automate.domain.compliance.jobs.JobsService.Rerun:output_type -> chef.automate.domain.compliance.jobs.RerunResponse
	4,  // 29: chef.automate.domain.compliance.jobs.JobsService.ListInitiatedScans:output_type -> chef.automate.domain.compliance.jobs.Ids
	11, // 30: chef.automate.domain.compliance.jobs.JobsService.GetJobResultByNodeId:output_type -> chef.automate.domain.compliance.jobs.ResultsRow
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_interservice_compliance_jobs_jobs_proto_init() }
func file_interservice_compliance_jobs_jobs_proto_init() {
	if File_interservice_compliance_jobs_jobs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_interservice_compliance_jobs_jobs_proto_rawDesc), len(file_interservice_compliance_jobs_jobs_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_compliance_jobs_jobs_proto_goTypes,
		DependencyIndexes: file_interservice_compliance_jobs_jobs_proto_depIdxs,
		EnumInfos:         file_interservice_compliance_jobs_jobs_proto_enumTypes,
		MessageInfos:      file_interservice_compliance_jobs_jobs_proto_msgTypes,
	}.Build()
	File_interservice_compliance_jobs_jobs_proto = out.File
	file_interservice_compliance_jobs_jobs_proto_goTypes = nil
	file_interservice_compliance_jobs_jobs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JobsServiceClient is the client API for JobsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobsServiceClient interface {
	Create(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Id, error)
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error)
	Update(ctx context.Context, in *Job, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Jobs, error)
	Rerun(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RerunResponse, error)
	ListInitiatedScans(ctx context.Context, in *TimeQuery, opts ...grpc.CallOption) (*Ids, error)
	GetJobResultByNodeId(ctx context.Context, in *GetJobResultByNodeIdRequest, opts ...grpc.CallOption) (*ResultsRow, error)
}

type jobsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsServiceClient(cc grpc.ClientConnInterface) JobsServiceClient {
	return &jobsServiceClient{cc}
}

func (c *jobsServiceClient) Create(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.jobs.JobsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.jobs.JobsService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Update(ctx context.Context, in *Job, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.jobs.JobsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.jobs.JobsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Jobs, error) {
	out := new(Jobs)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.jobs.JobsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Rerun(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RerunResponse, error) {
	out := new(RerunResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.jobs.JobsService/Rerun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) ListInitiatedScans(ctx context.Context, in *TimeQuery, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.jobs.JobsService/ListInitiatedScans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) GetJobResultByNodeId(ctx context.Context, in *GetJobResultByNodeIdRequest, opts ...grpc.CallOption) (*ResultsRow, error) {
	out := new(ResultsRow)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.jobs.JobsService/GetJobResultByNodeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsServiceServer is the server API for JobsService service.
type JobsServiceServer interface {
	Create(context.Context, *Job) (*Id, error)
	Read(context.Context, *Id) (*Job, error)
	Update(context.Context, *Job) (*emptypb.Empty, error)
	Delete(context.Context, *Id) (*emptypb.Empty, error)
	List(context.Context, *Query) (*Jobs, error)
	Rerun(context.Context, *Id) (*RerunResponse, error)
	ListInitiatedScans(context.Context, *TimeQuery) (*Ids, error)
	GetJobResultByNodeId(context.Context, *GetJobResultByNodeIdRequest) (*ResultsRow, error)
}

// UnimplementedJobsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJobsServiceServer struct {
}

func (*UnimplementedJobsServiceServer) Create(context.Context, *Job) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedJobsServiceServer) Read(context.Context, *Id) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedJobsServiceServer) Update(context.Context, *Job) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedJobsServiceServer) Delete(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedJobsServiceServer) List(context.Context, *Query) (*Jobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedJobsServiceServer) Rerun(context.Context, *Id) (*RerunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rerun not implemented")
}
func (*UnimplementedJobsServiceServer) ListInitiatedScans(context.Context, *TimeQuery) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInitiatedScans not implemented")
}
func (*UnimplementedJobsServiceServer) GetJobResultByNodeId(context.Context, *GetJobResultByNodeIdRequest) (*ResultsRow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobResultByNodeId not implemented")
}

func RegisterJobsServiceServer(s *grpc.Server, srv JobsServiceServer) {
	s.RegisterService(&_JobsService_serviceDesc, srv)
}

func _JobsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.jobs.JobsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Create(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.jobs.JobsService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.jobs.JobsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Update(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.jobs.JobsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.jobs.JobsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).List(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Rerun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Rerun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.jobs.JobsService/Rerun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Rerun(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_ListInitiatedScans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).ListInitiatedScans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.jobs.JobsService/ListInitiatedScans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).ListInitiatedScans(ctx, req.(*TimeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_GetJobResultByNodeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobResultByNodeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).GetJobResultByNodeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.jobs.JobsService/GetJobResultByNodeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).GetJobResultByNodeId(ctx, req.(*GetJobResultByNodeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.compliance.jobs.JobsService",
	HandlerType: (*JobsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _JobsService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _JobsService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _JobsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JobsService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _JobsService_List_Handler,
		},
		{
			MethodName: "Rerun",
			Handler:    _JobsService_Rerun_Handler,
		},
		{
			MethodName: "ListInitiatedScans",
			Handler:    _JobsService_ListInitiatedScans_Handler,
		},
		{
			MethodName: "GetJobResultByNodeId",
			Handler:    _JobsService_GetJobResultByNodeId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interservice/compliance/jobs/jobs.proto",
}
