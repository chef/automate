// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interservice/compliance/ingest/ingest/compliance.proto

package ingest

import (
	context "context"
	fmt "fmt"
	compliance "github.com/chef/automate/api/interservice/compliance/ingest/events/compliance"
	event "github.com/chef/automate/api/interservice/event"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProjectUpdateStatusReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ProjectUpdateStatusReq) Reset()         { *m = ProjectUpdateStatusReq{} }
func (m *ProjectUpdateStatusReq) String() string { return proto.CompactTextString(m) }
func (*ProjectUpdateStatusReq) ProtoMessage()    {}
func (*ProjectUpdateStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2715c08101ec334a, []int{0}
}

func (m *ProjectUpdateStatusReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectUpdateStatusReq.Unmarshal(m, b)
}
func (m *ProjectUpdateStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectUpdateStatusReq.Marshal(b, m, deterministic)
}
func (m *ProjectUpdateStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectUpdateStatusReq.Merge(m, src)
}
func (m *ProjectUpdateStatusReq) XXX_Size() int {
	return xxx_messageInfo_ProjectUpdateStatusReq.Size(m)
}
func (m *ProjectUpdateStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectUpdateStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectUpdateStatusReq proto.InternalMessageInfo

type ProjectUpdateStatusResp struct {
	State                 string               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty" toml:"state,omitempty" mapstructure:"state,omitempty"`
	EstimatedTimeComplete *timestamp.Timestamp `protobuf:"bytes,2,opt,name=estimated_time_complete,json=estimatedTimeComplete,proto3" json:"estimated_time_complete,omitempty" toml:"estimated_time_complete,omitempty" mapstructure:"estimated_time_complete,omitempty"`
	PercentageComplete    float32              `protobuf:"fixed32,3,opt,name=percentage_complete,json=percentageComplete,proto3" json:"percentage_complete,omitempty" toml:"percentage_complete,omitempty" mapstructure:"percentage_complete,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized      []byte               `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache         int32                `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ProjectUpdateStatusResp) Reset()         { *m = ProjectUpdateStatusResp{} }
func (m *ProjectUpdateStatusResp) String() string { return proto.CompactTextString(m) }
func (*ProjectUpdateStatusResp) ProtoMessage()    {}
func (*ProjectUpdateStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2715c08101ec334a, []int{1}
}

func (m *ProjectUpdateStatusResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectUpdateStatusResp.Unmarshal(m, b)
}
func (m *ProjectUpdateStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectUpdateStatusResp.Marshal(b, m, deterministic)
}
func (m *ProjectUpdateStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectUpdateStatusResp.Merge(m, src)
}
func (m *ProjectUpdateStatusResp) XXX_Size() int {
	return xxx_messageInfo_ProjectUpdateStatusResp.Size(m)
}
func (m *ProjectUpdateStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectUpdateStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectUpdateStatusResp proto.InternalMessageInfo

func (m *ProjectUpdateStatusResp) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ProjectUpdateStatusResp) GetEstimatedTimeComplete() *timestamp.Timestamp {
	if m != nil {
		return m.EstimatedTimeComplete
	}
	return nil
}

func (m *ProjectUpdateStatusResp) GetPercentageComplete() float32 {
	if m != nil {
		return m.PercentageComplete
	}
	return 0
}

func init() {
	proto.RegisterType((*ProjectUpdateStatusReq)(nil), "chef.automate.domain.compliance.ingest.ingest.ProjectUpdateStatusReq")
	proto.RegisterType((*ProjectUpdateStatusResp)(nil), "chef.automate.domain.compliance.ingest.ingest.ProjectUpdateStatusResp")
}

func init() {
	proto.RegisterFile("interservice/compliance/ingest/ingest/compliance.proto", fileDescriptor_2715c08101ec334a)
}

var fileDescriptor_2715c08101ec334a = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x41, 0x8a, 0x14, 0x31,
	0x14, 0xa5, 0x7a, 0x50, 0x30, 0xb3, 0xcb, 0xe8, 0x4c, 0x53, 0x8a, 0x36, 0x05, 0x42, 0xa1, 0x4c,
	0x22, 0x23, 0xb8, 0x70, 0xa5, 0x33, 0xb6, 0xe8, 0x42, 0x90, 0x52, 0x37, 0x6e, 0x86, 0x74, 0xd5,
	0xef, 0x9a, 0x48, 0x57, 0x12, 0x93, 0x5f, 0x0d, 0x6e, 0xbd, 0x82, 0x17, 0x70, 0xe1, 0x11, 0x3c,
	0x83, 0x17, 0xf0, 0x0a, 0x1e, 0x44, 0x92, 0x54, 0x4d, 0x97, 0x63, 0x81, 0x2d, 0xcc, 0xa6, 0x43,
	0xfa, 0xfd, 0xf7, 0xf2, 0xfe, 0x7f, 0xbf, 0xc8, 0x23, 0xa9, 0x10, 0xac, 0x03, 0xbb, 0x96, 0x25,
	0xf0, 0x52, 0x37, 0x66, 0x25, 0x85, 0x2a, 0x81, 0x4b, 0x55, 0x83, 0xc3, 0xfe, 0xd8, 0x00, 0xcc,
	0x58, 0x8d, 0x9a, 0x1e, 0x96, 0x67, 0xb0, 0x64, 0xa2, 0x45, 0xdd, 0x08, 0x04, 0x56, 0xe9, 0x46,
	0x48, 0xc5, 0x06, 0x65, 0x91, 0xd8, 0x1d, 0xe9, 0xad, 0x5a, 0xeb, 0x7a, 0x05, 0x5c, 0x18, 0xc9,
	0x85, 0x52, 0x1a, 0x05, 0x4a, 0xad, 0x5c, 0x14, 0x4b, 0x9f, 0xfe, 0xc3, 0x04, 0xac, 0x41, 0xa1,
	0x1b, 0x02, 0x17, 0xfd, 0xa4, 0x37, 0xbb, 0x07, 0xc2, 0x6d, 0xd1, 0x2e, 0x39, 0x34, 0x06, 0x3f,
	0x75, 0xe0, 0xed, 0x3f, 0xf4, 0x83, 0x5a, 0xfc, 0xed, 0xf0, 0x3b, 0x17, 0xc9, 0x28, 0x1b, 0x70,
	0x28, 0x1a, 0x13, 0x0b, 0xb2, 0x29, 0xd9, 0x7f, 0x6d, 0xf5, 0x07, 0x28, 0xf1, 0x9d, 0xa9, 0x04,
	0xc2, 0x1b, 0x14, 0xd8, 0xba, 0x02, 0x3e, 0x66, 0xdf, 0x13, 0x72, 0x30, 0x0a, 0x39, 0x43, 0xaf,
	0x93, 0x2b, 0x0e, 0x05, 0xc2, 0x34, 0x99, 0x25, 0xf9, 0xb5, 0x22, 0x5e, 0x68, 0x41, 0x0e, 0xc0,
	0xa1, 0xf4, 0x63, 0xab, 0x4e, 0xfd, 0x43, 0xa7, 0xa1, 0x19, 0x40, 0x98, 0x4e, 0x66, 0x49, 0xbe,
	0x7b, 0x94, 0xb2, 0x68, 0x87, 0xf5, 0x76, 0xd8, 0xdb, 0xde, 0x4e, 0x71, 0xe3, 0x9c, 0xea, 0xff,
	0x3b, 0xe9, 0x88, 0x94, 0x93, 0x3d, 0x03, 0xb6, 0x04, 0x85, 0xa2, 0x1e, 0xe8, 0xed, 0xcc, 0x92,
	0x7c, 0x52, 0xd0, 0x0d, 0xd4, 0x13, 0x8e, 0x7e, 0xec, 0x10, 0x7a, 0x72, 0x3e, 0xc3, 0x97, 0x61,
	0xcc, 0x60, 0xe9, 0xd7, 0xd8, 0x4d, 0x09, 0xce, 0x6d, 0xd0, 0x02, 0x8c, 0xb6, 0x48, 0x9f, 0xb0,
	0x2d, 0x23, 0x8f, 0x69, 0x0d, 0x81, 0xa8, 0x90, 0xee, 0xff, 0xd5, 0xd8, 0xdc, 0x87, 0x94, 0xdd,
	0xff, 0xfc, 0xf3, 0xd7, 0x97, 0xc9, 0xdd, 0x6c, 0x16, 0xd6, 0x63, 0xfd, 0x60, 0x24, 0x6f, 0x1b,
	0x14, 0x1e, 0x27, 0xf7, 0xe8, 0x92, 0xec, 0xbe, 0x10, 0xaa, 0x5a, 0xc1, 0xdc, 0x17, 0xd1, 0x7c,
	0xdc, 0x55, 0x4c, 0x57, 0x18, 0xc9, 0x42, 0xd9, 0x2b, 0x57, 0xa7, 0x87, 0x5b, 0x55, 0xfa, 0xe0,
	0xb4, 0x72, 0x40, 0xbf, 0x25, 0x64, 0x6f, 0x24, 0x58, 0x3a, 0x67, 0xff, 0xb5, 0xf9, 0x6c, 0x7c,
	0x6f, 0xd2, 0xe7, 0x97, 0x21, 0xe3, 0xcc, 0xf1, 0xb3, 0xf7, 0xc7, 0xb5, 0xc4, 0xb3, 0x76, 0xe1,
	0xa9, 0xdc, 0x6b, 0xf2, 0x5e, 0x33, 0x4c, 0x73, 0xab, 0xcf, 0x7b, 0x71, 0x35, 0x24, 0xf2, 0xf0,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xcd, 0x10, 0x21, 0x0e, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComplianceIngesterClient is the client API for ComplianceIngester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComplianceIngesterClient interface {
	ProcessComplianceReport(ctx context.Context, in *compliance.Report, opts ...grpc.CallOption) (*empty.Empty, error)
	HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error)
	ProjectUpdateStatus(ctx context.Context, in *ProjectUpdateStatusReq, opts ...grpc.CallOption) (*ProjectUpdateStatusResp, error)
}

type complianceIngesterClient struct {
	cc grpc.ClientConnInterface
}

func NewComplianceIngesterClient(cc grpc.ClientConnInterface) ComplianceIngesterClient {
	return &complianceIngesterClient{cc}
}

func (c *complianceIngesterClient) ProcessComplianceReport(ctx context.Context, in *compliance.Report, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.ingest.ingest.ComplianceIngester/ProcessComplianceReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceIngesterClient) HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error) {
	out := new(event.EventResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.ingest.ingest.ComplianceIngester/HandleEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complianceIngesterClient) ProjectUpdateStatus(ctx context.Context, in *ProjectUpdateStatusReq, opts ...grpc.CallOption) (*ProjectUpdateStatusResp, error) {
	out := new(ProjectUpdateStatusResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.compliance.ingest.ingest.ComplianceIngester/ProjectUpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplianceIngesterServer is the server API for ComplianceIngester service.
type ComplianceIngesterServer interface {
	ProcessComplianceReport(context.Context, *compliance.Report) (*empty.Empty, error)
	HandleEvent(context.Context, *event.EventMsg) (*event.EventResponse, error)
	ProjectUpdateStatus(context.Context, *ProjectUpdateStatusReq) (*ProjectUpdateStatusResp, error)
}

// UnimplementedComplianceIngesterServer can be embedded to have forward compatible implementations.
type UnimplementedComplianceIngesterServer struct {
}

func (*UnimplementedComplianceIngesterServer) ProcessComplianceReport(ctx context.Context, req *compliance.Report) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessComplianceReport not implemented")
}
func (*UnimplementedComplianceIngesterServer) HandleEvent(ctx context.Context, req *event.EventMsg) (*event.EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleEvent not implemented")
}
func (*UnimplementedComplianceIngesterServer) ProjectUpdateStatus(ctx context.Context, req *ProjectUpdateStatusReq) (*ProjectUpdateStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectUpdateStatus not implemented")
}

func RegisterComplianceIngesterServer(s *grpc.Server, srv ComplianceIngesterServer) {
	s.RegisterService(&_ComplianceIngester_serviceDesc, srv)
}

func _ComplianceIngester_ProcessComplianceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(compliance.Report)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceIngesterServer).ProcessComplianceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.ingest.ingest.ComplianceIngester/ProcessComplianceReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceIngesterServer).ProcessComplianceReport(ctx, req.(*compliance.Report))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceIngester_HandleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.EventMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceIngesterServer).HandleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.ingest.ingest.ComplianceIngester/HandleEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceIngesterServer).HandleEvent(ctx, req.(*event.EventMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplianceIngester_ProjectUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectUpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplianceIngesterServer).ProjectUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.compliance.ingest.ingest.ComplianceIngester/ProjectUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplianceIngesterServer).ProjectUpdateStatus(ctx, req.(*ProjectUpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComplianceIngester_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.compliance.ingest.ingest.ComplianceIngester",
	HandlerType: (*ComplianceIngesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessComplianceReport",
			Handler:    _ComplianceIngester_ProcessComplianceReport_Handler,
		},
		{
			MethodName: "HandleEvent",
			Handler:    _ComplianceIngester_HandleEvent_Handler,
		},
		{
			MethodName: "ProjectUpdateStatus",
			Handler:    _ComplianceIngester_ProjectUpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interservice/compliance/ingest/ingest/compliance.proto",
}
