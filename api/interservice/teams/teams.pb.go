// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: interservice/teams/teams.proto

package teams

import (
	context "context"
	version "github.com/chef/automate/api/external/common/version"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Projects []string `protobuf:"bytes,3,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{0}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type GetTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO (tc): We can't make this more restrictive until we migrate
	// existing IDs post-GA.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
}

func (x *GetTeamReq) Reset() {
	*x = GetTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamReq) ProtoMessage() {}

func (x *GetTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamReq.ProtoReflect.Descriptor instead.
func (*GetTeamReq) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{1}
}

func (x *GetTeamReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTeamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
}

func (x *GetTeamResp) Reset() {
	*x = GetTeamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamResp) ProtoMessage() {}

func (x *GetTeamResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamResp.ProtoReflect.Descriptor instead.
func (*GetTeamResp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{2}
}

func (x *GetTeamResp) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type ListTeamsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTeamsReq) Reset() {
	*x = ListTeamsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamsReq) ProtoMessage() {}

func (x *ListTeamsReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamsReq.ProtoReflect.Descriptor instead.
func (*ListTeamsReq) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{3}
}

type ListTeamsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty" toml:"teams,omitempty" mapstructure:"teams,omitempty"`
}

func (x *ListTeamsResp) Reset() {
	*x = ListTeamsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamsResp) ProtoMessage() {}

func (x *ListTeamsResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamsResp.ProtoReflect.Descriptor instead.
func (*ListTeamsResp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{4}
}

func (x *ListTeamsResp) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type UpdateTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO (tc): We can't make this more restrictive until we migrate
	// existing IDs post-GA.
	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Projects []string `protobuf:"bytes,3,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
}

func (x *UpdateTeamReq) Reset() {
	*x = UpdateTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamReq) ProtoMessage() {}

func (x *UpdateTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamReq.ProtoReflect.Descriptor instead.
func (*UpdateTeamReq) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateTeamReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTeamReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTeamReq) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type UpdateTeamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
}

func (x *UpdateTeamResp) Reset() {
	*x = UpdateTeamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamResp) ProtoMessage() {}

func (x *UpdateTeamResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamResp.ProtoReflect.Descriptor instead.
func (*UpdateTeamResp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTeamResp) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type DeleteTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO (tc): We can't make this more restrictive until we migrate
	// existing IDs post-GA.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
}

func (x *DeleteTeamReq) Reset() {
	*x = DeleteTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamReq) ProtoMessage() {}

func (x *DeleteTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamReq.ProtoReflect.Descriptor instead.
func (*DeleteTeamReq) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteTeamReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTeamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
}

func (x *DeleteTeamResp) Reset() {
	*x = DeleteTeamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamResp) ProtoMessage() {}

func (x *DeleteTeamResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamResp.ProtoReflect.Descriptor instead.
func (*DeleteTeamResp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTeamResp) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type CreateTeamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Projects []string `protobuf:"bytes,3,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
}

func (x *CreateTeamReq) Reset() {
	*x = CreateTeamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamReq) ProtoMessage() {}

func (x *CreateTeamReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamReq.ProtoReflect.Descriptor instead.
func (*CreateTeamReq) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTeamReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateTeamReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTeamReq) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type CreateTeamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team *Team `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty" toml:"team,omitempty" mapstructure:"team,omitempty"`
}

func (x *CreateTeamResp) Reset() {
	*x = CreateTeamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamResp) ProtoMessage() {}

func (x *CreateTeamResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamResp.ProtoReflect.Descriptor instead.
func (*CreateTeamResp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{10}
}

func (x *CreateTeamResp) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

type AddTeamMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO (tc): We can't make this more restrictive until we migrate
	// existing IDs post-GA.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	// However, this regex works for V1 and V2 User IDs.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty" toml:"user_ids,omitempty" mapstructure:"user_ids,omitempty"`
}

func (x *AddTeamMembersReq) Reset() {
	*x = AddTeamMembersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTeamMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTeamMembersReq) ProtoMessage() {}

func (x *AddTeamMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTeamMembersReq.ProtoReflect.Descriptor instead.
func (*AddTeamMembersReq) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{11}
}

func (x *AddTeamMembersReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddTeamMembersReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type AddTeamMembersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty" toml:"user_ids,omitempty" mapstructure:"user_ids,omitempty"`
}

func (x *AddTeamMembersResp) Reset() {
	*x = AddTeamMembersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTeamMembersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTeamMembersResp) ProtoMessage() {}

func (x *AddTeamMembersResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTeamMembersResp.ProtoReflect.Descriptor instead.
func (*AddTeamMembersResp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{12}
}

func (x *AddTeamMembersResp) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type RemoveTeamMembersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO (tc): We can't make this more restrictive until we migrate
	// existing IDs post-GA.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	// However, this regex works for V1 and V2 User IDs.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty" toml:"user_ids,omitempty" mapstructure:"user_ids,omitempty"`
}

func (x *RemoveTeamMembersReq) Reset() {
	*x = RemoveTeamMembersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTeamMembersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTeamMembersReq) ProtoMessage() {}

func (x *RemoveTeamMembersReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTeamMembersReq.ProtoReflect.Descriptor instead.
func (*RemoveTeamMembersReq) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveTeamMembersReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RemoveTeamMembersReq) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type RemoveTeamMembersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty" toml:"user_ids,omitempty" mapstructure:"user_ids,omitempty"`
}

func (x *RemoveTeamMembersResp) Reset() {
	*x = RemoveTeamMembersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTeamMembersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTeamMembersResp) ProtoMessage() {}

func (x *RemoveTeamMembersResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTeamMembersResp.ProtoReflect.Descriptor instead.
func (*RemoveTeamMembersResp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{14}
}

func (x *RemoveTeamMembersResp) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type GetTeamsForMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" toml:"user_id,omitempty" mapstructure:"user_id,omitempty"`
}

func (x *GetTeamsForMemberReq) Reset() {
	*x = GetTeamsForMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamsForMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsForMemberReq) ProtoMessage() {}

func (x *GetTeamsForMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsForMemberReq.ProtoReflect.Descriptor instead.
func (*GetTeamsForMemberReq) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{15}
}

func (x *GetTeamsForMemberReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetTeamsForMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty" toml:"teams,omitempty" mapstructure:"teams,omitempty"`
}

func (x *GetTeamsForMemberResp) Reset() {
	*x = GetTeamsForMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamsForMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsForMemberResp) ProtoMessage() {}

func (x *GetTeamsForMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsForMemberResp.ProtoReflect.Descriptor instead.
func (*GetTeamsForMemberResp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{16}
}

func (x *GetTeamsForMemberResp) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type GetTeamMembershipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO (tc): We can't make this more restrictive until we migrate
	// existing IDs post-GA.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
}

func (x *GetTeamMembershipReq) Reset() {
	*x = GetTeamMembershipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamMembershipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamMembershipReq) ProtoMessage() {}

func (x *GetTeamMembershipReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamMembershipReq.ProtoReflect.Descriptor instead.
func (*GetTeamMembershipReq) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{17}
}

func (x *GetTeamMembershipReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTeamMembershipResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty" toml:"user_ids,omitempty" mapstructure:"user_ids,omitempty"`
}

func (x *GetTeamMembershipResp) Reset() {
	*x = GetTeamMembershipResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamMembershipResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamMembershipResp) ProtoMessage() {}

func (x *GetTeamMembershipResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamMembershipResp.ProtoReflect.Descriptor instead.
func (*GetTeamMembershipResp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{18}
}

func (x *GetTeamMembershipResp) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type UpgradeToV2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpgradeToV2Req) Reset() {
	*x = UpgradeToV2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeToV2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeToV2Req) ProtoMessage() {}

func (x *UpgradeToV2Req) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeToV2Req.ProtoReflect.Descriptor instead.
func (*UpgradeToV2Req) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{19}
}

type UpgradeToV2Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpgradeToV2Resp) Reset() {
	*x = UpgradeToV2Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeToV2Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeToV2Resp) ProtoMessage() {}

func (x *UpgradeToV2Resp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeToV2Resp.ProtoReflect.Descriptor instead.
func (*UpgradeToV2Resp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{20}
}

type ResetToV1Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetToV1Req) Reset() {
	*x = ResetToV1Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetToV1Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetToV1Req) ProtoMessage() {}

func (x *ResetToV1Req) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetToV1Req.ProtoReflect.Descriptor instead.
func (*ResetToV1Req) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{21}
}

type ResetToV1Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetToV1Resp) Reset() {
	*x = ResetToV1Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetToV1Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetToV1Resp) ProtoMessage() {}

func (x *ResetToV1Resp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetToV1Resp.ProtoReflect.Descriptor instead.
func (*ResetToV1Resp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{22}
}

type PurgeUserMembershipReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" toml:"user_id,omitempty" mapstructure:"user_id,omitempty"`
}

func (x *PurgeUserMembershipReq) Reset() {
	*x = PurgeUserMembershipReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeUserMembershipReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeUserMembershipReq) ProtoMessage() {}

func (x *PurgeUserMembershipReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeUserMembershipReq.ProtoReflect.Descriptor instead.
func (*PurgeUserMembershipReq) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{23}
}

func (x *PurgeUserMembershipReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type PurgeUserMembershipResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty" toml:"ids,omitempty" mapstructure:"ids,omitempty"`
}

func (x *PurgeUserMembershipResp) Reset() {
	*x = PurgeUserMembershipResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_teams_teams_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeUserMembershipResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeUserMembershipResp) ProtoMessage() {}

func (x *PurgeUserMembershipResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_teams_teams_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeUserMembershipResp.ProtoReflect.Descriptor instead.
func (*PurgeUserMembershipResp) Descriptor() ([]byte, []int) {
	return file_interservice_teams_teams_proto_rawDescGZIP(), []int{24}
}

func (x *PurgeUserMembershipResp) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_interservice_teams_teams_proto protoreflect.FileDescriptor

var file_interservice_teams_teams_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x04, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x22, 0x27, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x32, 0x02, 0x5c, 0x53, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x22, 0x47, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x7c, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x32, 0x02, 0x5c,
	0x53, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d,
	0x92, 0x01, 0x1a, 0x18, 0x01, 0x22, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x31, 0x2c, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22,
	0x2a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x32, 0x02, 0x5c, 0x53, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x31, 0x2c, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x92, 0x01, 0x1a, 0x18, 0x01,
	0x22, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x7b, 0x31, 0x2c, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x22, 0x46, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x6e, 0x0a, 0x11, 0x41, 0x64,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x32, 0x02, 0x5c, 0x53, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x23, 0xfa, 0x42,
	0x20, 0x92, 0x01, 0x1d, 0x08, 0x01, 0x18, 0x01, 0x22, 0x17, 0x72, 0x15, 0x32, 0x13, 0x5e, 0x5b,
	0x5b, 0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5f, 0x2e, 0x2b, 0x40, 0x2d, 0x5d, 0x2b,
	0x24, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x71, 0x0a, 0x14, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x32, 0x02, 0x5c, 0x53, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x23, 0xfa, 0x42, 0x20, 0x92, 0x01, 0x1d, 0x08, 0x01, 0x18, 0x01, 0x22, 0x17, 0x72, 0x15,
	0x32, 0x13, 0x5e, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5f, 0x2e, 0x2b,
	0x40, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x32,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x22, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x46, 0x6f,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17,
	0x72, 0x15, 0x32, 0x13, 0x5e, 0x5b, 0x5b, 0x3a, 0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x3a, 0x5d, 0x5f,
	0x2e, 0x2b, 0x40, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x22, 0x31, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x32, 0x02, 0x5c, 0x53, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x6f, 0x56, 0x32, 0x52, 0x65, 0x71, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x22, 0x0e, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x56, 0x31, 0x52, 0x65, 0x71, 0x22, 0x0f, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x22, 0x31, 0x0a,
	0x16, 0x50, 0x75, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2b, 0x0a, 0x17, 0x50, 0x75, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x32, 0xe4, 0x09,
	0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x26,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x28,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x29, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x2a,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x29, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7a, 0x0a,
	0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x50, 0x75, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interservice_teams_teams_proto_rawDescOnce sync.Once
	file_interservice_teams_teams_proto_rawDescData = file_interservice_teams_teams_proto_rawDesc
)

func file_interservice_teams_teams_proto_rawDescGZIP() []byte {
	file_interservice_teams_teams_proto_rawDescOnce.Do(func() {
		file_interservice_teams_teams_proto_rawDescData = protoimpl.X.CompressGZIP(file_interservice_teams_teams_proto_rawDescData)
	})
	return file_interservice_teams_teams_proto_rawDescData
}

var file_interservice_teams_teams_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_interservice_teams_teams_proto_goTypes = []interface{}{
	(*Team)(nil),                       // 0: chef.automate.domain.teams.Team
	(*GetTeamReq)(nil),                 // 1: chef.automate.domain.teams.GetTeamReq
	(*GetTeamResp)(nil),                // 2: chef.automate.domain.teams.GetTeamResp
	(*ListTeamsReq)(nil),               // 3: chef.automate.domain.teams.ListTeamsReq
	(*ListTeamsResp)(nil),              // 4: chef.automate.domain.teams.ListTeamsResp
	(*UpdateTeamReq)(nil),              // 5: chef.automate.domain.teams.UpdateTeamReq
	(*UpdateTeamResp)(nil),             // 6: chef.automate.domain.teams.UpdateTeamResp
	(*DeleteTeamReq)(nil),              // 7: chef.automate.domain.teams.DeleteTeamReq
	(*DeleteTeamResp)(nil),             // 8: chef.automate.domain.teams.DeleteTeamResp
	(*CreateTeamReq)(nil),              // 9: chef.automate.domain.teams.CreateTeamReq
	(*CreateTeamResp)(nil),             // 10: chef.automate.domain.teams.CreateTeamResp
	(*AddTeamMembersReq)(nil),          // 11: chef.automate.domain.teams.AddTeamMembersReq
	(*AddTeamMembersResp)(nil),         // 12: chef.automate.domain.teams.AddTeamMembersResp
	(*RemoveTeamMembersReq)(nil),       // 13: chef.automate.domain.teams.RemoveTeamMembersReq
	(*RemoveTeamMembersResp)(nil),      // 14: chef.automate.domain.teams.RemoveTeamMembersResp
	(*GetTeamsForMemberReq)(nil),       // 15: chef.automate.domain.teams.GetTeamsForMemberReq
	(*GetTeamsForMemberResp)(nil),      // 16: chef.automate.domain.teams.GetTeamsForMemberResp
	(*GetTeamMembershipReq)(nil),       // 17: chef.automate.domain.teams.GetTeamMembershipReq
	(*GetTeamMembershipResp)(nil),      // 18: chef.automate.domain.teams.GetTeamMembershipResp
	(*UpgradeToV2Req)(nil),             // 19: chef.automate.domain.teams.UpgradeToV2Req
	(*UpgradeToV2Resp)(nil),            // 20: chef.automate.domain.teams.UpgradeToV2Resp
	(*ResetToV1Req)(nil),               // 21: chef.automate.domain.teams.ResetToV1Req
	(*ResetToV1Resp)(nil),              // 22: chef.automate.domain.teams.ResetToV1Resp
	(*PurgeUserMembershipReq)(nil),     // 23: chef.automate.domain.teams.PurgeUserMembershipReq
	(*PurgeUserMembershipResp)(nil),    // 24: chef.automate.domain.teams.PurgeUserMembershipResp
	(*version.VersionInfoRequest)(nil), // 25: chef.automate.api.common.version.VersionInfoRequest
	(*version.VersionInfo)(nil),        // 26: chef.automate.api.common.version.VersionInfo
}
var file_interservice_teams_teams_proto_depIdxs = []int32{
	0,  // 0: chef.automate.domain.teams.GetTeamResp.team:type_name -> chef.automate.domain.teams.Team
	0,  // 1: chef.automate.domain.teams.ListTeamsResp.teams:type_name -> chef.automate.domain.teams.Team
	0,  // 2: chef.automate.domain.teams.UpdateTeamResp.team:type_name -> chef.automate.domain.teams.Team
	0,  // 3: chef.automate.domain.teams.DeleteTeamResp.team:type_name -> chef.automate.domain.teams.Team
	0,  // 4: chef.automate.domain.teams.CreateTeamResp.team:type_name -> chef.automate.domain.teams.Team
	0,  // 5: chef.automate.domain.teams.GetTeamsForMemberResp.teams:type_name -> chef.automate.domain.teams.Team
	25, // 6: chef.automate.domain.teams.TeamsService.GetVersion:input_type -> chef.automate.api.common.version.VersionInfoRequest
	1,  // 7: chef.automate.domain.teams.TeamsService.GetTeam:input_type -> chef.automate.domain.teams.GetTeamReq
	3,  // 8: chef.automate.domain.teams.TeamsService.ListTeams:input_type -> chef.automate.domain.teams.ListTeamsReq
	9,  // 9: chef.automate.domain.teams.TeamsService.CreateTeam:input_type -> chef.automate.domain.teams.CreateTeamReq
	5,  // 10: chef.automate.domain.teams.TeamsService.UpdateTeam:input_type -> chef.automate.domain.teams.UpdateTeamReq
	7,  // 11: chef.automate.domain.teams.TeamsService.DeleteTeam:input_type -> chef.automate.domain.teams.DeleteTeamReq
	11, // 12: chef.automate.domain.teams.TeamsService.AddTeamMembers:input_type -> chef.automate.domain.teams.AddTeamMembersReq
	13, // 13: chef.automate.domain.teams.TeamsService.RemoveTeamMembers:input_type -> chef.automate.domain.teams.RemoveTeamMembersReq
	15, // 14: chef.automate.domain.teams.TeamsService.GetTeamsForMember:input_type -> chef.automate.domain.teams.GetTeamsForMemberReq
	17, // 15: chef.automate.domain.teams.TeamsService.GetTeamMembership:input_type -> chef.automate.domain.teams.GetTeamMembershipReq
	23, // 16: chef.automate.domain.teams.TeamsService.PurgeUserMembership:input_type -> chef.automate.domain.teams.PurgeUserMembershipReq
	26, // 17: chef.automate.domain.teams.TeamsService.GetVersion:output_type -> chef.automate.api.common.version.VersionInfo
	2,  // 18: chef.automate.domain.teams.TeamsService.GetTeam:output_type -> chef.automate.domain.teams.GetTeamResp
	4,  // 19: chef.automate.domain.teams.TeamsService.ListTeams:output_type -> chef.automate.domain.teams.ListTeamsResp
	10, // 20: chef.automate.domain.teams.TeamsService.CreateTeam:output_type -> chef.automate.domain.teams.CreateTeamResp
	6,  // 21: chef.automate.domain.teams.TeamsService.UpdateTeam:output_type -> chef.automate.domain.teams.UpdateTeamResp
	8,  // 22: chef.automate.domain.teams.TeamsService.DeleteTeam:output_type -> chef.automate.domain.teams.DeleteTeamResp
	12, // 23: chef.automate.domain.teams.TeamsService.AddTeamMembers:output_type -> chef.automate.domain.teams.AddTeamMembersResp
	14, // 24: chef.automate.domain.teams.TeamsService.RemoveTeamMembers:output_type -> chef.automate.domain.teams.RemoveTeamMembersResp
	16, // 25: chef.automate.domain.teams.TeamsService.GetTeamsForMember:output_type -> chef.automate.domain.teams.GetTeamsForMemberResp
	18, // 26: chef.automate.domain.teams.TeamsService.GetTeamMembership:output_type -> chef.automate.domain.teams.GetTeamMembershipResp
	24, // 27: chef.automate.domain.teams.TeamsService.PurgeUserMembership:output_type -> chef.automate.domain.teams.PurgeUserMembershipResp
	17, // [17:28] is the sub-list for method output_type
	6,  // [6:17] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_interservice_teams_teams_proto_init() }
func file_interservice_teams_teams_proto_init() {
	if File_interservice_teams_teams_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interservice_teams_teams_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeamsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeamsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTeamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTeamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTeamMembersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTeamMembersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTeamMembersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTeamMembersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamsForMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamsForMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamMembershipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamMembershipResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeToV2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeToV2Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetToV1Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetToV1Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeUserMembershipReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_teams_teams_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeUserMembershipResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_teams_teams_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_teams_teams_proto_goTypes,
		DependencyIndexes: file_interservice_teams_teams_proto_depIdxs,
		MessageInfos:      file_interservice_teams_teams_proto_msgTypes,
	}.Build()
	File_interservice_teams_teams_proto = out.File
	file_interservice_teams_teams_proto_rawDesc = nil
	file_interservice_teams_teams_proto_goTypes = nil
	file_interservice_teams_teams_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TeamsServiceClient is the client API for TeamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeamsServiceClient interface {
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	GetTeam(ctx context.Context, in *GetTeamReq, opts ...grpc.CallOption) (*GetTeamResp, error)
	ListTeams(ctx context.Context, in *ListTeamsReq, opts ...grpc.CallOption) (*ListTeamsResp, error)
	CreateTeam(ctx context.Context, in *CreateTeamReq, opts ...grpc.CallOption) (*CreateTeamResp, error)
	UpdateTeam(ctx context.Context, in *UpdateTeamReq, opts ...grpc.CallOption) (*UpdateTeamResp, error)
	DeleteTeam(ctx context.Context, in *DeleteTeamReq, opts ...grpc.CallOption) (*DeleteTeamResp, error)
	AddTeamMembers(ctx context.Context, in *AddTeamMembersReq, opts ...grpc.CallOption) (*AddTeamMembersResp, error)
	RemoveTeamMembers(ctx context.Context, in *RemoveTeamMembersReq, opts ...grpc.CallOption) (*RemoveTeamMembersResp, error)
	GetTeamsForMember(ctx context.Context, in *GetTeamsForMemberReq, opts ...grpc.CallOption) (*GetTeamsForMemberResp, error)
	GetTeamMembership(ctx context.Context, in *GetTeamMembershipReq, opts ...grpc.CallOption) (*GetTeamMembershipResp, error)
	PurgeUserMembership(ctx context.Context, in *PurgeUserMembershipReq, opts ...grpc.CallOption) (*PurgeUserMembershipResp, error)
}

type teamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamsServiceClient(cc grpc.ClientConnInterface) TeamsServiceClient {
	return &teamsServiceClient{cc}
}

func (c *teamsServiceClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) GetTeam(ctx context.Context, in *GetTeamReq, opts ...grpc.CallOption) (*GetTeamResp, error) {
	out := new(GetTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) ListTeams(ctx context.Context, in *ListTeamsReq, opts ...grpc.CallOption) (*ListTeamsResp, error) {
	out := new(ListTeamsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/ListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) CreateTeam(ctx context.Context, in *CreateTeamReq, opts ...grpc.CallOption) (*CreateTeamResp, error) {
	out := new(CreateTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) UpdateTeam(ctx context.Context, in *UpdateTeamReq, opts ...grpc.CallOption) (*UpdateTeamResp, error) {
	out := new(UpdateTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) DeleteTeam(ctx context.Context, in *DeleteTeamReq, opts ...grpc.CallOption) (*DeleteTeamResp, error) {
	out := new(DeleteTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) AddTeamMembers(ctx context.Context, in *AddTeamMembersReq, opts ...grpc.CallOption) (*AddTeamMembersResp, error) {
	out := new(AddTeamMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/AddTeamMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) RemoveTeamMembers(ctx context.Context, in *RemoveTeamMembersReq, opts ...grpc.CallOption) (*RemoveTeamMembersResp, error) {
	out := new(RemoveTeamMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/RemoveTeamMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) GetTeamsForMember(ctx context.Context, in *GetTeamsForMemberReq, opts ...grpc.CallOption) (*GetTeamsForMemberResp, error) {
	out := new(GetTeamsForMemberResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/GetTeamsForMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) GetTeamMembership(ctx context.Context, in *GetTeamMembershipReq, opts ...grpc.CallOption) (*GetTeamMembershipResp, error) {
	out := new(GetTeamMembershipResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/GetTeamMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsServiceClient) PurgeUserMembership(ctx context.Context, in *PurgeUserMembershipReq, opts ...grpc.CallOption) (*PurgeUserMembershipResp, error) {
	out := new(PurgeUserMembershipResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.teams.TeamsService/PurgeUserMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsServiceServer is the server API for TeamsService service.
type TeamsServiceServer interface {
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	GetTeam(context.Context, *GetTeamReq) (*GetTeamResp, error)
	ListTeams(context.Context, *ListTeamsReq) (*ListTeamsResp, error)
	CreateTeam(context.Context, *CreateTeamReq) (*CreateTeamResp, error)
	UpdateTeam(context.Context, *UpdateTeamReq) (*UpdateTeamResp, error)
	DeleteTeam(context.Context, *DeleteTeamReq) (*DeleteTeamResp, error)
	AddTeamMembers(context.Context, *AddTeamMembersReq) (*AddTeamMembersResp, error)
	RemoveTeamMembers(context.Context, *RemoveTeamMembersReq) (*RemoveTeamMembersResp, error)
	GetTeamsForMember(context.Context, *GetTeamsForMemberReq) (*GetTeamsForMemberResp, error)
	GetTeamMembership(context.Context, *GetTeamMembershipReq) (*GetTeamMembershipResp, error)
	PurgeUserMembership(context.Context, *PurgeUserMembershipReq) (*PurgeUserMembershipResp, error)
}

// UnimplementedTeamsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTeamsServiceServer struct {
}

func (*UnimplementedTeamsServiceServer) GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedTeamsServiceServer) GetTeam(context.Context, *GetTeamReq) (*GetTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedTeamsServiceServer) ListTeams(context.Context, *ListTeamsReq) (*ListTeamsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (*UnimplementedTeamsServiceServer) CreateTeam(context.Context, *CreateTeamReq) (*CreateTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (*UnimplementedTeamsServiceServer) UpdateTeam(context.Context, *UpdateTeamReq) (*UpdateTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedTeamsServiceServer) DeleteTeam(context.Context, *DeleteTeamReq) (*DeleteTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedTeamsServiceServer) AddTeamMembers(context.Context, *AddTeamMembersReq) (*AddTeamMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamMembers not implemented")
}
func (*UnimplementedTeamsServiceServer) RemoveTeamMembers(context.Context, *RemoveTeamMembersReq) (*RemoveTeamMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamMembers not implemented")
}
func (*UnimplementedTeamsServiceServer) GetTeamsForMember(context.Context, *GetTeamsForMemberReq) (*GetTeamsForMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsForMember not implemented")
}
func (*UnimplementedTeamsServiceServer) GetTeamMembership(context.Context, *GetTeamMembershipReq) (*GetTeamMembershipResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMembership not implemented")
}
func (*UnimplementedTeamsServiceServer) PurgeUserMembership(context.Context, *PurgeUserMembershipReq) (*PurgeUserMembershipResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeUserMembership not implemented")
}

func RegisterTeamsServiceServer(s *grpc.Server, srv TeamsServiceServer) {
	s.RegisterService(&_TeamsService_serviceDesc, srv)
}

func _TeamsService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).GetTeam(ctx, req.(*GetTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsService_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).ListTeams(ctx, req.(*ListTeamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).CreateTeam(ctx, req.(*CreateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).UpdateTeam(ctx, req.(*UpdateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).DeleteTeam(ctx, req.(*DeleteTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsService_AddTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).AddTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/AddTeamMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).AddTeamMembers(ctx, req.(*AddTeamMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsService_RemoveTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).RemoveTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/RemoveTeamMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).RemoveTeamMembers(ctx, req.(*RemoveTeamMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsService_GetTeamsForMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamsForMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).GetTeamsForMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/GetTeamsForMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).GetTeamsForMember(ctx, req.(*GetTeamsForMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsService_GetTeamMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMembershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).GetTeamMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/GetTeamMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).GetTeamMembership(ctx, req.(*GetTeamMembershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsService_PurgeUserMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeUserMembershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServiceServer).PurgeUserMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.teams.TeamsService/PurgeUserMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServiceServer).PurgeUserMembership(ctx, req.(*PurgeUserMembershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TeamsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.teams.TeamsService",
	HandlerType: (*TeamsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _TeamsService_GetVersion_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _TeamsService_GetTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _TeamsService_ListTeams_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _TeamsService_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _TeamsService_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _TeamsService_DeleteTeam_Handler,
		},
		{
			MethodName: "AddTeamMembers",
			Handler:    _TeamsService_AddTeamMembers_Handler,
		},
		{
			MethodName: "RemoveTeamMembers",
			Handler:    _TeamsService_RemoveTeamMembers_Handler,
		},
		{
			MethodName: "GetTeamsForMember",
			Handler:    _TeamsService_GetTeamsForMember_Handler,
		},
		{
			MethodName: "GetTeamMembership",
			Handler:    _TeamsService_GetTeamMembership_Handler,
		},
		{
			MethodName: "PurgeUserMembership",
			Handler:    _TeamsService_PurgeUserMembership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interservice/teams/teams.proto",
}
