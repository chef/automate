// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: interservice/cfgmgmt/service/cfgmgmt.proto

package service

import (
	context "context"
	request1 "github.com/chef/automate/api/external/cfgmgmt/request"
	response1 "github.com/chef/automate/api/external/cfgmgmt/response"
	request "github.com/chef/automate/api/interservice/cfgmgmt/request"
	response "github.com/chef/automate/api/interservice/cfgmgmt/response"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_interservice_cfgmgmt_service_cfgmgmt_proto protoreflect.FileDescriptor

var file_interservice_cfgmgmt_service_cfgmgmt_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f,
	0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74,
	0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x66, 0x67, 0x6d,
	0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x66, 0x67,
	0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67,
	0x6d, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x66,
	0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d,
	0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x66,
	0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d,
	0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x66,
	0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xc3, 0x1b,
	0x0a, 0x0e, 0x43, 0x66, 0x67, 0x4d, 0x67, 0x6d, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x73, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x68, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x77, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x52, 0x75, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x31, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x67,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x2d, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x1a, 0x2a, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x75, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x71, 0x64, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66,
	0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x51, 0x44, 0x4e, 0x53, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x71, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66,
	0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12,
	0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x80, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x73, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x7d, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x30, 0x01, 0x12, 0x9b, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x62, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x29, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x2a, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x39,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x43,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x1a, 0x44, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x75, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x66, 0x67,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x73, 0x1a, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x12, 0xb2, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x43, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x34, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa7, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x44, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x63, 0x66, 0x67, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_interservice_cfgmgmt_service_cfgmgmt_proto_goTypes = []interface{}{
	(*request.VersionInfo)(nil),                          // 0: chef.automate.domain.cfgmgmt.request.VersionInfo
	(*request.Health)(nil),                               // 1: chef.automate.domain.cfgmgmt.request.Health
	(*request.NodesCounts)(nil),                          // 2: chef.automate.domain.cfgmgmt.request.NodesCounts
	(*request.RunsCounts)(nil),                           // 3: chef.automate.domain.cfgmgmt.request.RunsCounts
	(*request.NodeRun)(nil),                              // 4: chef.automate.domain.cfgmgmt.request.NodeRun
	(*request.Nodes)(nil),                                // 5: chef.automate.domain.cfgmgmt.request.Nodes
	(*request.Runs)(nil),                                 // 6: chef.automate.domain.cfgmgmt.request.Runs
	(*request.Suggestion)(nil),                           // 7: chef.automate.domain.cfgmgmt.request.Suggestion
	(*request.Organizations)(nil),                        // 8: chef.automate.domain.cfgmgmt.request.Organizations
	(*request.SourceFQDNS)(nil),                          // 9: chef.automate.domain.cfgmgmt.request.SourceFQDNS
	(*request.Node)(nil),                                 // 10: chef.automate.domain.cfgmgmt.request.Node
	(*request.PolicyRevision)(nil),                       // 11: chef.automate.domain.cfgmgmt.request.PolicyRevision
	(*request.InventoryNodes)(nil),                       // 12: chef.automate.domain.cfgmgmt.request.InventoryNodes
	(*request.NodeExport)(nil),                           // 13: chef.automate.domain.cfgmgmt.request.NodeExport
	(*request.ReportExport)(nil),                         // 14: chef.automate.domain.cfgmgmt.request.ReportExport
	(*request.CheckInCountsTimeSeries)(nil),              // 15: chef.automate.domain.cfgmgmt.request.CheckInCountsTimeSeries
	(*request1.Errors)(nil),                              // 16: chef.automate.api.cfgmgmt.request.Errors
	(*request.MissingNodeDurationCounts)(nil),            // 17: chef.automate.domain.cfgmgmt.request.MissingNodeDurationCounts
	(*request.NodeMetadataCounts)(nil),                   // 18: chef.automate.domain.cfgmgmt.request.NodeMetadataCounts
	(*request.NodeRunsDailyStatusTimeSeries)(nil),        // 19: chef.automate.domain.cfgmgmt.request.NodeRunsDailyStatusTimeSeries
	(*request1.CreateRollout)(nil),                       // 20: chef.automate.api.cfgmgmt.request.CreateRollout
	(*request1.Rollouts)(nil),                            // 21: chef.automate.api.cfgmgmt.request.Rollouts
	(*request1.RolloutById)(nil),                         // 22: chef.automate.api.cfgmgmt.request.RolloutById
	(*request1.ListNodeSegmentsWithRolloutProgress)(nil), // 23: chef.automate.api.cfgmgmt.request.ListNodeSegmentsWithRolloutProgress
	(*request1.CreateRolloutTest)(nil),                   // 24: chef.automate.api.cfgmgmt.request.CreateRolloutTest
	(*request.PolicyUpdateAction)(nil),                   // 25: chef.automate.domain.cfgmgmt.request.PolicyUpdateAction
	(*request.UpdateTelemetryReportedRequest)(nil),       // 26: chef.automate.domain.cfgmgmt.request.UpdateTelemetryReportedRequest
	(*request.GetNodesUsageCountRequest)(nil),            // 27: chef.automate.domain.cfgmgmt.request.GetNodesUsageCountRequest
	(*response.VersionInfo)(nil),                         // 28: chef.automate.domain.cfgmgmt.response.VersionInfo
	(*response.Health)(nil),                              // 29: chef.automate.domain.cfgmgmt.response.Health
	(*response.NodesCounts)(nil),                         // 30: chef.automate.domain.cfgmgmt.response.NodesCounts
	(*response.RunsCounts)(nil),                          // 31: chef.automate.domain.cfgmgmt.response.RunsCounts
	(*response.Run)(nil),                                 // 32: chef.automate.domain.cfgmgmt.response.Run
	(*structpb.ListValue)(nil),                           // 33: google.protobuf.ListValue
	(*response.NodeAttribute)(nil),                       // 34: chef.automate.domain.cfgmgmt.response.NodeAttribute
	(*response.PolicyCookbooks)(nil),                     // 35: chef.automate.domain.cfgmgmt.response.PolicyCookbooks
	(*response.InventoryNodes)(nil),                      // 36: chef.automate.domain.cfgmgmt.response.InventoryNodes
	(*response.ExportData)(nil),                          // 37: chef.automate.domain.cfgmgmt.response.ExportData
	(*response.ReportExportData)(nil),                    // 38: chef.automate.domain.cfgmgmt.response.ReportExportData
	(*response.CheckInCountsTimeSeries)(nil),             // 39: chef.automate.domain.cfgmgmt.response.CheckInCountsTimeSeries
	(*response1.Errors)(nil),                             // 40: chef.automate.api.cfgmgmt.response.Errors
	(*response.MissingNodeDurationCounts)(nil),           // 41: chef.automate.domain.cfgmgmt.response.MissingNodeDurationCounts
	(*response.NodeMetadataCounts)(nil),                  // 42: chef.automate.domain.cfgmgmt.response.NodeMetadataCounts
	(*response.NodeRunsDailyStatusTimeSeries)(nil),       // 43: chef.automate.domain.cfgmgmt.response.NodeRunsDailyStatusTimeSeries
	(*response1.Rollout)(nil),                            // 44: chef.automate.api.cfgmgmt.response.Rollout
	(*response1.Rollouts)(nil),                           // 45: chef.automate.api.cfgmgmt.response.Rollouts
	(*response1.NodeSegmentsWithRolloutProgress)(nil),    // 46: chef.automate.api.cfgmgmt.response.NodeSegmentsWithRolloutProgress
	(*response1.CreateRolloutTest)(nil),                  // 47: chef.automate.api.cfgmgmt.response.CreateRolloutTest
	(*response.PolicyUpdateAction)(nil),                  // 48: chef.automate.domain.cfgmgmt.response.PolicyUpdateAction
	(*response.UpdateTelemetryReportedResponse)(nil),     // 49: chef.automate.domain.cfgmgmt.response.UpdateTelemetryReportedResponse
	(*response.GetNodesUsageCountResponse)(nil),          // 50: chef.automate.domain.cfgmgmt.response.GetNodesUsageCountResponse
}
var file_interservice_cfgmgmt_service_cfgmgmt_proto_depIdxs = []int32{
	0,  // 0: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetVersion:input_type -> chef.automate.domain.cfgmgmt.request.VersionInfo
	1,  // 1: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetHealth:input_type -> chef.automate.domain.cfgmgmt.request.Health
	2,  // 2: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodesCounts:input_type -> chef.automate.domain.cfgmgmt.request.NodesCounts
	3,  // 3: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetRunsCounts:input_type -> chef.automate.domain.cfgmgmt.request.RunsCounts
	4,  // 4: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodeRun:input_type -> chef.automate.domain.cfgmgmt.request.NodeRun
	5,  // 5: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodes:input_type -> chef.automate.domain.cfgmgmt.request.Nodes
	6,  // 6: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetRuns:input_type -> chef.automate.domain.cfgmgmt.request.Runs
	7,  // 7: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetSuggestions:input_type -> chef.automate.domain.cfgmgmt.request.Suggestion
	8,  // 8: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetOrganizations:input_type -> chef.automate.domain.cfgmgmt.request.Organizations
	9,  // 9: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetSourceFqdns:input_type -> chef.automate.domain.cfgmgmt.request.SourceFQDNS
	10, // 10: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetAttributes:input_type -> chef.automate.domain.cfgmgmt.request.Node
	11, // 11: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetPolicyCookbooks:input_type -> chef.automate.domain.cfgmgmt.request.PolicyRevision
	12, // 12: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetInventoryNodes:input_type -> chef.automate.domain.cfgmgmt.request.InventoryNodes
	13, // 13: chef.automate.domain.cfgmgmt.service.CfgMgmtService.NodeExport:input_type -> chef.automate.domain.cfgmgmt.request.NodeExport
	14, // 14: chef.automate.domain.cfgmgmt.service.CfgMgmtService.ReportExport:input_type -> chef.automate.domain.cfgmgmt.request.ReportExport
	15, // 15: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetCheckInCountsTimeSeries:input_type -> chef.automate.domain.cfgmgmt.request.CheckInCountsTimeSeries
	16, // 16: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetErrors:input_type -> chef.automate.api.cfgmgmt.request.Errors
	17, // 17: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetMissingNodeDurationCounts:input_type -> chef.automate.domain.cfgmgmt.request.MissingNodeDurationCounts
	18, // 18: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodeMetadataCounts:input_type -> chef.automate.domain.cfgmgmt.request.NodeMetadataCounts
	19, // 19: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodeRunsDailyStatusTimeSeries:input_type -> chef.automate.domain.cfgmgmt.request.NodeRunsDailyStatusTimeSeries
	20, // 20: chef.automate.domain.cfgmgmt.service.CfgMgmtService.CreateRollout:input_type -> chef.automate.api.cfgmgmt.request.CreateRollout
	21, // 21: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetRollouts:input_type -> chef.automate.api.cfgmgmt.request.Rollouts
	22, // 22: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetRolloutById:input_type -> chef.automate.api.cfgmgmt.request.RolloutById
	23, // 23: chef.automate.domain.cfgmgmt.service.CfgMgmtService.ListNodeSegmentsWithRolloutProgress:input_type -> chef.automate.api.cfgmgmt.request.ListNodeSegmentsWithRolloutProgress
	24, // 24: chef.automate.domain.cfgmgmt.service.CfgMgmtService.CreateRolloutTest:input_type -> chef.automate.api.cfgmgmt.request.CreateRolloutTest
	25, // 25: chef.automate.domain.cfgmgmt.service.CfgMgmtService.HandlePolicyUpdateAction:input_type -> chef.automate.domain.cfgmgmt.request.PolicyUpdateAction
	26, // 26: chef.automate.domain.cfgmgmt.service.CfgMgmtService.UpdateTelemetryReported:input_type -> chef.automate.domain.cfgmgmt.request.UpdateTelemetryReportedRequest
	27, // 27: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodesUsageCount:input_type -> chef.automate.domain.cfgmgmt.request.GetNodesUsageCountRequest
	28, // 28: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetVersion:output_type -> chef.automate.domain.cfgmgmt.response.VersionInfo
	29, // 29: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetHealth:output_type -> chef.automate.domain.cfgmgmt.response.Health
	30, // 30: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodesCounts:output_type -> chef.automate.domain.cfgmgmt.response.NodesCounts
	31, // 31: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetRunsCounts:output_type -> chef.automate.domain.cfgmgmt.response.RunsCounts
	32, // 32: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodeRun:output_type -> chef.automate.domain.cfgmgmt.response.Run
	33, // 33: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodes:output_type -> google.protobuf.ListValue
	33, // 34: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetRuns:output_type -> google.protobuf.ListValue
	33, // 35: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetSuggestions:output_type -> google.protobuf.ListValue
	33, // 36: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetOrganizations:output_type -> google.protobuf.ListValue
	33, // 37: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetSourceFqdns:output_type -> google.protobuf.ListValue
	34, // 38: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetAttributes:output_type -> chef.automate.domain.cfgmgmt.response.NodeAttribute
	35, // 39: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetPolicyCookbooks:output_type -> chef.automate.domain.cfgmgmt.response.PolicyCookbooks
	36, // 40: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetInventoryNodes:output_type -> chef.automate.domain.cfgmgmt.response.InventoryNodes
	37, // 41: chef.automate.domain.cfgmgmt.service.CfgMgmtService.NodeExport:output_type -> chef.automate.domain.cfgmgmt.response.ExportData
	38, // 42: chef.automate.domain.cfgmgmt.service.CfgMgmtService.ReportExport:output_type -> chef.automate.domain.cfgmgmt.response.ReportExportData
	39, // 43: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetCheckInCountsTimeSeries:output_type -> chef.automate.domain.cfgmgmt.response.CheckInCountsTimeSeries
	40, // 44: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetErrors:output_type -> chef.automate.api.cfgmgmt.response.Errors
	41, // 45: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetMissingNodeDurationCounts:output_type -> chef.automate.domain.cfgmgmt.response.MissingNodeDurationCounts
	42, // 46: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodeMetadataCounts:output_type -> chef.automate.domain.cfgmgmt.response.NodeMetadataCounts
	43, // 47: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodeRunsDailyStatusTimeSeries:output_type -> chef.automate.domain.cfgmgmt.response.NodeRunsDailyStatusTimeSeries
	44, // 48: chef.automate.domain.cfgmgmt.service.CfgMgmtService.CreateRollout:output_type -> chef.automate.api.cfgmgmt.response.Rollout
	45, // 49: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetRollouts:output_type -> chef.automate.api.cfgmgmt.response.Rollouts
	44, // 50: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetRolloutById:output_type -> chef.automate.api.cfgmgmt.response.Rollout
	46, // 51: chef.automate.domain.cfgmgmt.service.CfgMgmtService.ListNodeSegmentsWithRolloutProgress:output_type -> chef.automate.api.cfgmgmt.response.NodeSegmentsWithRolloutProgress
	47, // 52: chef.automate.domain.cfgmgmt.service.CfgMgmtService.CreateRolloutTest:output_type -> chef.automate.api.cfgmgmt.response.CreateRolloutTest
	48, // 53: chef.automate.domain.cfgmgmt.service.CfgMgmtService.HandlePolicyUpdateAction:output_type -> chef.automate.domain.cfgmgmt.response.PolicyUpdateAction
	49, // 54: chef.automate.domain.cfgmgmt.service.CfgMgmtService.UpdateTelemetryReported:output_type -> chef.automate.domain.cfgmgmt.response.UpdateTelemetryReportedResponse
	50, // 55: chef.automate.domain.cfgmgmt.service.CfgMgmtService.GetNodesUsageCount:output_type -> chef.automate.domain.cfgmgmt.response.GetNodesUsageCountResponse
	28, // [28:56] is the sub-list for method output_type
	0,  // [0:28] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_interservice_cfgmgmt_service_cfgmgmt_proto_init() }
func file_interservice_cfgmgmt_service_cfgmgmt_proto_init() {
	if File_interservice_cfgmgmt_service_cfgmgmt_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_cfgmgmt_service_cfgmgmt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_cfgmgmt_service_cfgmgmt_proto_goTypes,
		DependencyIndexes: file_interservice_cfgmgmt_service_cfgmgmt_proto_depIdxs,
	}.Build()
	File_interservice_cfgmgmt_service_cfgmgmt_proto = out.File
	file_interservice_cfgmgmt_service_cfgmgmt_proto_rawDesc = nil
	file_interservice_cfgmgmt_service_cfgmgmt_proto_goTypes = nil
	file_interservice_cfgmgmt_service_cfgmgmt_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CfgMgmtServiceClient is the client API for CfgMgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CfgMgmtServiceClient interface {
	GetVersion(ctx context.Context, in *request.VersionInfo, opts ...grpc.CallOption) (*response.VersionInfo, error)
	GetHealth(ctx context.Context, in *request.Health, opts ...grpc.CallOption) (*response.Health, error)
	GetNodesCounts(ctx context.Context, in *request.NodesCounts, opts ...grpc.CallOption) (*response.NodesCounts, error)
	GetRunsCounts(ctx context.Context, in *request.RunsCounts, opts ...grpc.CallOption) (*response.RunsCounts, error)
	GetNodeRun(ctx context.Context, in *request.NodeRun, opts ...grpc.CallOption) (*response.Run, error)
	GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*structpb.ListValue, error)
	GetRuns(ctx context.Context, in *request.Runs, opts ...grpc.CallOption) (*structpb.ListValue, error)
	GetSuggestions(ctx context.Context, in *request.Suggestion, opts ...grpc.CallOption) (*structpb.ListValue, error)
	GetOrganizations(ctx context.Context, in *request.Organizations, opts ...grpc.CallOption) (*structpb.ListValue, error)
	GetSourceFqdns(ctx context.Context, in *request.SourceFQDNS, opts ...grpc.CallOption) (*structpb.ListValue, error)
	GetAttributes(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.NodeAttribute, error)
	GetPolicyCookbooks(ctx context.Context, in *request.PolicyRevision, opts ...grpc.CallOption) (*response.PolicyCookbooks, error)
	GetInventoryNodes(ctx context.Context, in *request.InventoryNodes, opts ...grpc.CallOption) (*response.InventoryNodes, error)
	NodeExport(ctx context.Context, in *request.NodeExport, opts ...grpc.CallOption) (CfgMgmtService_NodeExportClient, error)
	ReportExport(ctx context.Context, in *request.ReportExport, opts ...grpc.CallOption) (CfgMgmtService_ReportExportClient, error)
	GetCheckInCountsTimeSeries(ctx context.Context, in *request.CheckInCountsTimeSeries, opts ...grpc.CallOption) (*response.CheckInCountsTimeSeries, error)
	GetErrors(ctx context.Context, in *request1.Errors, opts ...grpc.CallOption) (*response1.Errors, error)
	GetMissingNodeDurationCounts(ctx context.Context, in *request.MissingNodeDurationCounts, opts ...grpc.CallOption) (*response.MissingNodeDurationCounts, error)
	GetNodeMetadataCounts(ctx context.Context, in *request.NodeMetadataCounts, opts ...grpc.CallOption) (*response.NodeMetadataCounts, error)
	GetNodeRunsDailyStatusTimeSeries(ctx context.Context, in *request.NodeRunsDailyStatusTimeSeries, opts ...grpc.CallOption) (*response.NodeRunsDailyStatusTimeSeries, error)
	CreateRollout(ctx context.Context, in *request1.CreateRollout, opts ...grpc.CallOption) (*response1.Rollout, error)
	GetRollouts(ctx context.Context, in *request1.Rollouts, opts ...grpc.CallOption) (*response1.Rollouts, error)
	GetRolloutById(ctx context.Context, in *request1.RolloutById, opts ...grpc.CallOption) (*response1.Rollout, error)
	ListNodeSegmentsWithRolloutProgress(ctx context.Context, in *request1.ListNodeSegmentsWithRolloutProgress, opts ...grpc.CallOption) (*response1.NodeSegmentsWithRolloutProgress, error)
	CreateRolloutTest(ctx context.Context, in *request1.CreateRolloutTest, opts ...grpc.CallOption) (*response1.CreateRolloutTest, error)
	HandlePolicyUpdateAction(ctx context.Context, in *request.PolicyUpdateAction, opts ...grpc.CallOption) (*response.PolicyUpdateAction, error)
	UpdateTelemetryReported(ctx context.Context, in *request.UpdateTelemetryReportedRequest, opts ...grpc.CallOption) (*response.UpdateTelemetryReportedResponse, error)
	GetNodesUsageCount(ctx context.Context, in *request.GetNodesUsageCountRequest, opts ...grpc.CallOption) (*response.GetNodesUsageCountResponse, error)
}

type cfgMgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCfgMgmtServiceClient(cc grpc.ClientConnInterface) CfgMgmtServiceClient {
	return &cfgMgmtServiceClient{cc}
}

func (c *cfgMgmtServiceClient) GetVersion(ctx context.Context, in *request.VersionInfo, opts ...grpc.CallOption) (*response.VersionInfo, error) {
	out := new(response.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetHealth(ctx context.Context, in *request.Health, opts ...grpc.CallOption) (*response.Health, error) {
	out := new(response.Health)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetNodesCounts(ctx context.Context, in *request.NodesCounts, opts ...grpc.CallOption) (*response.NodesCounts, error) {
	out := new(response.NodesCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodesCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetRunsCounts(ctx context.Context, in *request.RunsCounts, opts ...grpc.CallOption) (*response.RunsCounts, error) {
	out := new(response.RunsCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetRunsCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetNodeRun(ctx context.Context, in *request.NodeRun, opts ...grpc.CallOption) (*response.Run, error) {
	out := new(response.Run)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*structpb.ListValue, error) {
	out := new(structpb.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetRuns(ctx context.Context, in *request.Runs, opts ...grpc.CallOption) (*structpb.ListValue, error) {
	out := new(structpb.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetSuggestions(ctx context.Context, in *request.Suggestion, opts ...grpc.CallOption) (*structpb.ListValue, error) {
	out := new(structpb.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetOrganizations(ctx context.Context, in *request.Organizations, opts ...grpc.CallOption) (*structpb.ListValue, error) {
	out := new(structpb.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetSourceFqdns(ctx context.Context, in *request.SourceFQDNS, opts ...grpc.CallOption) (*structpb.ListValue, error) {
	out := new(structpb.ListValue)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetSourceFqdns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetAttributes(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.NodeAttribute, error) {
	out := new(response.NodeAttribute)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetPolicyCookbooks(ctx context.Context, in *request.PolicyRevision, opts ...grpc.CallOption) (*response.PolicyCookbooks, error) {
	out := new(response.PolicyCookbooks)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetPolicyCookbooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetInventoryNodes(ctx context.Context, in *request.InventoryNodes, opts ...grpc.CallOption) (*response.InventoryNodes, error) {
	out := new(response.InventoryNodes)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetInventoryNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) NodeExport(ctx context.Context, in *request.NodeExport, opts ...grpc.CallOption) (CfgMgmtService_NodeExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CfgMgmtService_serviceDesc.Streams[0], "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/NodeExport", opts...)
	if err != nil {
		return nil, err
	}
	x := &cfgMgmtServiceNodeExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CfgMgmtService_NodeExportClient interface {
	Recv() (*response.ExportData, error)
	grpc.ClientStream
}

type cfgMgmtServiceNodeExportClient struct {
	grpc.ClientStream
}

func (x *cfgMgmtServiceNodeExportClient) Recv() (*response.ExportData, error) {
	m := new(response.ExportData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cfgMgmtServiceClient) ReportExport(ctx context.Context, in *request.ReportExport, opts ...grpc.CallOption) (CfgMgmtService_ReportExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CfgMgmtService_serviceDesc.Streams[1], "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/ReportExport", opts...)
	if err != nil {
		return nil, err
	}
	x := &cfgMgmtServiceReportExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CfgMgmtService_ReportExportClient interface {
	Recv() (*response.ReportExportData, error)
	grpc.ClientStream
}

type cfgMgmtServiceReportExportClient struct {
	grpc.ClientStream
}

func (x *cfgMgmtServiceReportExportClient) Recv() (*response.ReportExportData, error) {
	m := new(response.ReportExportData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cfgMgmtServiceClient) GetCheckInCountsTimeSeries(ctx context.Context, in *request.CheckInCountsTimeSeries, opts ...grpc.CallOption) (*response.CheckInCountsTimeSeries, error) {
	out := new(response.CheckInCountsTimeSeries)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetCheckInCountsTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetErrors(ctx context.Context, in *request1.Errors, opts ...grpc.CallOption) (*response1.Errors, error) {
	out := new(response1.Errors)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetMissingNodeDurationCounts(ctx context.Context, in *request.MissingNodeDurationCounts, opts ...grpc.CallOption) (*response.MissingNodeDurationCounts, error) {
	out := new(response.MissingNodeDurationCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetMissingNodeDurationCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetNodeMetadataCounts(ctx context.Context, in *request.NodeMetadataCounts, opts ...grpc.CallOption) (*response.NodeMetadataCounts, error) {
	out := new(response.NodeMetadataCounts)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodeMetadataCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetNodeRunsDailyStatusTimeSeries(ctx context.Context, in *request.NodeRunsDailyStatusTimeSeries, opts ...grpc.CallOption) (*response.NodeRunsDailyStatusTimeSeries, error) {
	out := new(response.NodeRunsDailyStatusTimeSeries)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodeRunsDailyStatusTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) CreateRollout(ctx context.Context, in *request1.CreateRollout, opts ...grpc.CallOption) (*response1.Rollout, error) {
	out := new(response1.Rollout)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/CreateRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetRollouts(ctx context.Context, in *request1.Rollouts, opts ...grpc.CallOption) (*response1.Rollouts, error) {
	out := new(response1.Rollouts)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetRollouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetRolloutById(ctx context.Context, in *request1.RolloutById, opts ...grpc.CallOption) (*response1.Rollout, error) {
	out := new(response1.Rollout)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetRolloutById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) ListNodeSegmentsWithRolloutProgress(ctx context.Context, in *request1.ListNodeSegmentsWithRolloutProgress, opts ...grpc.CallOption) (*response1.NodeSegmentsWithRolloutProgress, error) {
	out := new(response1.NodeSegmentsWithRolloutProgress)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/ListNodeSegmentsWithRolloutProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) CreateRolloutTest(ctx context.Context, in *request1.CreateRolloutTest, opts ...grpc.CallOption) (*response1.CreateRolloutTest, error) {
	out := new(response1.CreateRolloutTest)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/CreateRolloutTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) HandlePolicyUpdateAction(ctx context.Context, in *request.PolicyUpdateAction, opts ...grpc.CallOption) (*response.PolicyUpdateAction, error) {
	out := new(response.PolicyUpdateAction)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/HandlePolicyUpdateAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) UpdateTelemetryReported(ctx context.Context, in *request.UpdateTelemetryReportedRequest, opts ...grpc.CallOption) (*response.UpdateTelemetryReportedResponse, error) {
	out := new(response.UpdateTelemetryReportedResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/UpdateTelemetryReported", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cfgMgmtServiceClient) GetNodesUsageCount(ctx context.Context, in *request.GetNodesUsageCountRequest, opts ...grpc.CallOption) (*response.GetNodesUsageCountResponse, error) {
	out := new(response.GetNodesUsageCountResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodesUsageCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CfgMgmtServiceServer is the server API for CfgMgmtService service.
type CfgMgmtServiceServer interface {
	GetVersion(context.Context, *request.VersionInfo) (*response.VersionInfo, error)
	GetHealth(context.Context, *request.Health) (*response.Health, error)
	GetNodesCounts(context.Context, *request.NodesCounts) (*response.NodesCounts, error)
	GetRunsCounts(context.Context, *request.RunsCounts) (*response.RunsCounts, error)
	GetNodeRun(context.Context, *request.NodeRun) (*response.Run, error)
	GetNodes(context.Context, *request.Nodes) (*structpb.ListValue, error)
	GetRuns(context.Context, *request.Runs) (*structpb.ListValue, error)
	GetSuggestions(context.Context, *request.Suggestion) (*structpb.ListValue, error)
	GetOrganizations(context.Context, *request.Organizations) (*structpb.ListValue, error)
	GetSourceFqdns(context.Context, *request.SourceFQDNS) (*structpb.ListValue, error)
	GetAttributes(context.Context, *request.Node) (*response.NodeAttribute, error)
	GetPolicyCookbooks(context.Context, *request.PolicyRevision) (*response.PolicyCookbooks, error)
	GetInventoryNodes(context.Context, *request.InventoryNodes) (*response.InventoryNodes, error)
	NodeExport(*request.NodeExport, CfgMgmtService_NodeExportServer) error
	ReportExport(*request.ReportExport, CfgMgmtService_ReportExportServer) error
	GetCheckInCountsTimeSeries(context.Context, *request.CheckInCountsTimeSeries) (*response.CheckInCountsTimeSeries, error)
	GetErrors(context.Context, *request1.Errors) (*response1.Errors, error)
	GetMissingNodeDurationCounts(context.Context, *request.MissingNodeDurationCounts) (*response.MissingNodeDurationCounts, error)
	GetNodeMetadataCounts(context.Context, *request.NodeMetadataCounts) (*response.NodeMetadataCounts, error)
	GetNodeRunsDailyStatusTimeSeries(context.Context, *request.NodeRunsDailyStatusTimeSeries) (*response.NodeRunsDailyStatusTimeSeries, error)
	CreateRollout(context.Context, *request1.CreateRollout) (*response1.Rollout, error)
	GetRollouts(context.Context, *request1.Rollouts) (*response1.Rollouts, error)
	GetRolloutById(context.Context, *request1.RolloutById) (*response1.Rollout, error)
	ListNodeSegmentsWithRolloutProgress(context.Context, *request1.ListNodeSegmentsWithRolloutProgress) (*response1.NodeSegmentsWithRolloutProgress, error)
	CreateRolloutTest(context.Context, *request1.CreateRolloutTest) (*response1.CreateRolloutTest, error)
	HandlePolicyUpdateAction(context.Context, *request.PolicyUpdateAction) (*response.PolicyUpdateAction, error)
	UpdateTelemetryReported(context.Context, *request.UpdateTelemetryReportedRequest) (*response.UpdateTelemetryReportedResponse, error)
	GetNodesUsageCount(context.Context, *request.GetNodesUsageCountRequest) (*response.GetNodesUsageCountResponse, error)
}

// UnimplementedCfgMgmtServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCfgMgmtServiceServer struct {
}

func (*UnimplementedCfgMgmtServiceServer) GetVersion(context.Context, *request.VersionInfo) (*response.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetHealth(context.Context, *request.Health) (*response.Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetNodesCounts(context.Context, *request.NodesCounts) (*response.NodesCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodesCounts not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetRunsCounts(context.Context, *request.RunsCounts) (*response.RunsCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunsCounts not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetNodeRun(context.Context, *request.NodeRun) (*response.Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeRun not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetNodes(context.Context, *request.Nodes) (*structpb.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetRuns(context.Context, *request.Runs) (*structpb.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuns not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetSuggestions(context.Context, *request.Suggestion) (*structpb.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestions not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetOrganizations(context.Context, *request.Organizations) (*structpb.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizations not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetSourceFqdns(context.Context, *request.SourceFQDNS) (*structpb.ListValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceFqdns not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetAttributes(context.Context, *request.Node) (*response.NodeAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttributes not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetPolicyCookbooks(context.Context, *request.PolicyRevision) (*response.PolicyCookbooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyCookbooks not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetInventoryNodes(context.Context, *request.InventoryNodes) (*response.InventoryNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventoryNodes not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) NodeExport(*request.NodeExport, CfgMgmtService_NodeExportServer) error {
	return status.Errorf(codes.Unimplemented, "method NodeExport not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) ReportExport(*request.ReportExport, CfgMgmtService_ReportExportServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportExport not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetCheckInCountsTimeSeries(context.Context, *request.CheckInCountsTimeSeries) (*response.CheckInCountsTimeSeries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckInCountsTimeSeries not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetErrors(context.Context, *request1.Errors) (*response1.Errors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrors not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetMissingNodeDurationCounts(context.Context, *request.MissingNodeDurationCounts) (*response.MissingNodeDurationCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissingNodeDurationCounts not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetNodeMetadataCounts(context.Context, *request.NodeMetadataCounts) (*response.NodeMetadataCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMetadataCounts not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetNodeRunsDailyStatusTimeSeries(context.Context, *request.NodeRunsDailyStatusTimeSeries) (*response.NodeRunsDailyStatusTimeSeries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeRunsDailyStatusTimeSeries not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) CreateRollout(context.Context, *request1.CreateRollout) (*response1.Rollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRollout not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetRollouts(context.Context, *request1.Rollouts) (*response1.Rollouts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollouts not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetRolloutById(context.Context, *request1.RolloutById) (*response1.Rollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolloutById not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) ListNodeSegmentsWithRolloutProgress(context.Context, *request1.ListNodeSegmentsWithRolloutProgress) (*response1.NodeSegmentsWithRolloutProgress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeSegmentsWithRolloutProgress not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) CreateRolloutTest(context.Context, *request1.CreateRolloutTest) (*response1.CreateRolloutTest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRolloutTest not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) HandlePolicyUpdateAction(context.Context, *request.PolicyUpdateAction) (*response.PolicyUpdateAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlePolicyUpdateAction not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) UpdateTelemetryReported(context.Context, *request.UpdateTelemetryReportedRequest) (*response.UpdateTelemetryReportedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelemetryReported not implemented")
}
func (*UnimplementedCfgMgmtServiceServer) GetNodesUsageCount(context.Context, *request.GetNodesUsageCountRequest) (*response.GetNodesUsageCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodesUsageCount not implemented")
}

func RegisterCfgMgmtServiceServer(s *grpc.Server, srv CfgMgmtServiceServer) {
	s.RegisterService(&_CfgMgmtService_serviceDesc, srv)
}

func _CfgMgmtService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.VersionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetVersion(ctx, req.(*request.VersionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Health)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetHealth(ctx, req.(*request.Health))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetNodesCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodesCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetNodesCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodesCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetNodesCounts(ctx, req.(*request.NodesCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetRunsCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RunsCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetRunsCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetRunsCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetRunsCounts(ctx, req.(*request.RunsCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetNodeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodeRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetNodeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetNodeRun(ctx, req.(*request.NodeRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetNodes(ctx, req.(*request.Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Runs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetRuns(ctx, req.(*request.Runs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Suggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetSuggestions(ctx, req.(*request.Suggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Organizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetOrganizations(ctx, req.(*request.Organizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetSourceFqdns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SourceFQDNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetSourceFqdns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetSourceFqdns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetSourceFqdns(ctx, req.(*request.SourceFQDNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetAttributes(ctx, req.(*request.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetPolicyCookbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.PolicyRevision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetPolicyCookbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetPolicyCookbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetPolicyCookbooks(ctx, req.(*request.PolicyRevision))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetInventoryNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.InventoryNodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetInventoryNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetInventoryNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetInventoryNodes(ctx, req.(*request.InventoryNodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_NodeExport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(request.NodeExport)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CfgMgmtServiceServer).NodeExport(m, &cfgMgmtServiceNodeExportServer{stream})
}

type CfgMgmtService_NodeExportServer interface {
	Send(*response.ExportData) error
	grpc.ServerStream
}

type cfgMgmtServiceNodeExportServer struct {
	grpc.ServerStream
}

func (x *cfgMgmtServiceNodeExportServer) Send(m *response.ExportData) error {
	return x.ServerStream.SendMsg(m)
}

func _CfgMgmtService_ReportExport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(request.ReportExport)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CfgMgmtServiceServer).ReportExport(m, &cfgMgmtServiceReportExportServer{stream})
}

type CfgMgmtService_ReportExportServer interface {
	Send(*response.ReportExportData) error
	grpc.ServerStream
}

type cfgMgmtServiceReportExportServer struct {
	grpc.ServerStream
}

func (x *cfgMgmtServiceReportExportServer) Send(m *response.ReportExportData) error {
	return x.ServerStream.SendMsg(m)
}

func _CfgMgmtService_GetCheckInCountsTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CheckInCountsTimeSeries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetCheckInCountsTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetCheckInCountsTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetCheckInCountsTimeSeries(ctx, req.(*request.CheckInCountsTimeSeries))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request1.Errors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetErrors(ctx, req.(*request1.Errors))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetMissingNodeDurationCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.MissingNodeDurationCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetMissingNodeDurationCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetMissingNodeDurationCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetMissingNodeDurationCounts(ctx, req.(*request.MissingNodeDurationCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetNodeMetadataCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodeMetadataCounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetNodeMetadataCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodeMetadataCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetNodeMetadataCounts(ctx, req.(*request.NodeMetadataCounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetNodeRunsDailyStatusTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.NodeRunsDailyStatusTimeSeries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetNodeRunsDailyStatusTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodeRunsDailyStatusTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetNodeRunsDailyStatusTimeSeries(ctx, req.(*request.NodeRunsDailyStatusTimeSeries))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_CreateRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request1.CreateRollout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).CreateRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/CreateRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).CreateRollout(ctx, req.(*request1.CreateRollout))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetRollouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request1.Rollouts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetRollouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetRollouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetRollouts(ctx, req.(*request1.Rollouts))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetRolloutById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request1.RolloutById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetRolloutById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetRolloutById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetRolloutById(ctx, req.(*request1.RolloutById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_ListNodeSegmentsWithRolloutProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request1.ListNodeSegmentsWithRolloutProgress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).ListNodeSegmentsWithRolloutProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/ListNodeSegmentsWithRolloutProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).ListNodeSegmentsWithRolloutProgress(ctx, req.(*request1.ListNodeSegmentsWithRolloutProgress))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_CreateRolloutTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request1.CreateRolloutTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).CreateRolloutTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/CreateRolloutTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).CreateRolloutTest(ctx, req.(*request1.CreateRolloutTest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_HandlePolicyUpdateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.PolicyUpdateAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).HandlePolicyUpdateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/HandlePolicyUpdateAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).HandlePolicyUpdateAction(ctx, req.(*request.PolicyUpdateAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_UpdateTelemetryReported_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateTelemetryReportedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).UpdateTelemetryReported(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/UpdateTelemetryReported",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).UpdateTelemetryReported(ctx, req.(*request.UpdateTelemetryReportedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CfgMgmtService_GetNodesUsageCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetNodesUsageCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CfgMgmtServiceServer).GetNodesUsageCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.cfgmgmt.service.CfgMgmtService/GetNodesUsageCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CfgMgmtServiceServer).GetNodesUsageCount(ctx, req.(*request.GetNodesUsageCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CfgMgmtService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.cfgmgmt.service.CfgMgmtService",
	HandlerType: (*CfgMgmtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _CfgMgmtService_GetVersion_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _CfgMgmtService_GetHealth_Handler,
		},
		{
			MethodName: "GetNodesCounts",
			Handler:    _CfgMgmtService_GetNodesCounts_Handler,
		},
		{
			MethodName: "GetRunsCounts",
			Handler:    _CfgMgmtService_GetRunsCounts_Handler,
		},
		{
			MethodName: "GetNodeRun",
			Handler:    _CfgMgmtService_GetNodeRun_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _CfgMgmtService_GetNodes_Handler,
		},
		{
			MethodName: "GetRuns",
			Handler:    _CfgMgmtService_GetRuns_Handler,
		},
		{
			MethodName: "GetSuggestions",
			Handler:    _CfgMgmtService_GetSuggestions_Handler,
		},
		{
			MethodName: "GetOrganizations",
			Handler:    _CfgMgmtService_GetOrganizations_Handler,
		},
		{
			MethodName: "GetSourceFqdns",
			Handler:    _CfgMgmtService_GetSourceFqdns_Handler,
		},
		{
			MethodName: "GetAttributes",
			Handler:    _CfgMgmtService_GetAttributes_Handler,
		},
		{
			MethodName: "GetPolicyCookbooks",
			Handler:    _CfgMgmtService_GetPolicyCookbooks_Handler,
		},
		{
			MethodName: "GetInventoryNodes",
			Handler:    _CfgMgmtService_GetInventoryNodes_Handler,
		},
		{
			MethodName: "GetCheckInCountsTimeSeries",
			Handler:    _CfgMgmtService_GetCheckInCountsTimeSeries_Handler,
		},
		{
			MethodName: "GetErrors",
			Handler:    _CfgMgmtService_GetErrors_Handler,
		},
		{
			MethodName: "GetMissingNodeDurationCounts",
			Handler:    _CfgMgmtService_GetMissingNodeDurationCounts_Handler,
		},
		{
			MethodName: "GetNodeMetadataCounts",
			Handler:    _CfgMgmtService_GetNodeMetadataCounts_Handler,
		},
		{
			MethodName: "GetNodeRunsDailyStatusTimeSeries",
			Handler:    _CfgMgmtService_GetNodeRunsDailyStatusTimeSeries_Handler,
		},
		{
			MethodName: "CreateRollout",
			Handler:    _CfgMgmtService_CreateRollout_Handler,
		},
		{
			MethodName: "GetRollouts",
			Handler:    _CfgMgmtService_GetRollouts_Handler,
		},
		{
			MethodName: "GetRolloutById",
			Handler:    _CfgMgmtService_GetRolloutById_Handler,
		},
		{
			MethodName: "ListNodeSegmentsWithRolloutProgress",
			Handler:    _CfgMgmtService_ListNodeSegmentsWithRolloutProgress_Handler,
		},
		{
			MethodName: "CreateRolloutTest",
			Handler:    _CfgMgmtService_CreateRolloutTest_Handler,
		},
		{
			MethodName: "HandlePolicyUpdateAction",
			Handler:    _CfgMgmtService_HandlePolicyUpdateAction_Handler,
		},
		{
			MethodName: "UpdateTelemetryReported",
			Handler:    _CfgMgmtService_UpdateTelemetryReported_Handler,
		},
		{
			MethodName: "GetNodesUsageCount",
			Handler:    _CfgMgmtService_GetNodesUsageCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NodeExport",
			Handler:       _CfgMgmtService_NodeExport_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReportExport",
			Handler:       _CfgMgmtService_ReportExport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interservice/cfgmgmt/service/cfgmgmt.proto",
}
