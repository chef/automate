// Code generated by MockGen. DO NOT EDIT.
// Source: cfgmgmt/service/cfgmgmt.pb.go

// Package service is a generated GoMock package.
package service

import (
	request "github.com/chef/automate/api/interservice/cfgmgmt/request"
	response "github.com/chef/automate/api/interservice/cfgmgmt/response"
	gomock "github.com/golang/mock/gomock"
	struct0 "github.com/golang/protobuf/ptypes/struct"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockCfgMgmtClient is a mock of CfgMgmtClient interface
type MockCfgMgmtClient struct {
	ctrl     *gomock.Controller
	recorder *MockCfgMgmtClientMockRecorder
}

// MockCfgMgmtClientMockRecorder is the mock recorder for MockCfgMgmtClient
type MockCfgMgmtClientMockRecorder struct {
	mock *MockCfgMgmtClient
}

// NewMockCfgMgmtClient creates a new mock instance
func NewMockCfgMgmtClient(ctrl *gomock.Controller) *MockCfgMgmtClient {
	mock := &MockCfgMgmtClient{ctrl: ctrl}
	mock.recorder = &MockCfgMgmtClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfgMgmtClient) EXPECT() *MockCfgMgmtClientMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockCfgMgmtClient) GetVersion(ctx context.Context, in *request.VersionInfo, opts ...grpc.CallOption) (*response.VersionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*response.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockCfgMgmtClientMockRecorder) GetVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetVersion), varargs...)
}

// GetHealth mocks base method
func (m *MockCfgMgmtClient) GetHealth(ctx context.Context, in *request.Health, opts ...grpc.CallOption) (*response.Health, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHealth", varargs...)
	ret0, _ := ret[0].(*response.Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealth indicates an expected call of GetHealth
func (mr *MockCfgMgmtClientMockRecorder) GetHealth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealth", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetHealth), varargs...)
}

// GetNodesCounts mocks base method
func (m *MockCfgMgmtClient) GetNodesCounts(ctx context.Context, in *request.NodesCounts, opts ...grpc.CallOption) (*response.NodesCounts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodesCounts", varargs...)
	ret0, _ := ret[0].(*response.NodesCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodesCounts indicates an expected call of GetNodesCounts
func (mr *MockCfgMgmtClientMockRecorder) GetNodesCounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesCounts", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetNodesCounts), varargs...)
}

// GetRunsCounts mocks base method
func (m *MockCfgMgmtClient) GetRunsCounts(ctx context.Context, in *request.RunsCounts, opts ...grpc.CallOption) (*response.RunsCounts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRunsCounts", varargs...)
	ret0, _ := ret[0].(*response.RunsCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunsCounts indicates an expected call of GetRunsCounts
func (mr *MockCfgMgmtClientMockRecorder) GetRunsCounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunsCounts", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetRunsCounts), varargs...)
}

// GetNodeRun mocks base method
func (m *MockCfgMgmtClient) GetNodeRun(ctx context.Context, in *request.NodeRun, opts ...grpc.CallOption) (*response.Run, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeRun", varargs...)
	ret0, _ := ret[0].(*response.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeRun indicates an expected call of GetNodeRun
func (mr *MockCfgMgmtClientMockRecorder) GetNodeRun(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeRun", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetNodeRun), varargs...)
}

// GetNodes mocks base method
func (m *MockCfgMgmtClient) GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*struct0.ListValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodes", varargs...)
	ret0, _ := ret[0].(*struct0.ListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockCfgMgmtClientMockRecorder) GetNodes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetNodes), varargs...)
}

// GetRuns mocks base method
func (m *MockCfgMgmtClient) GetRuns(ctx context.Context, in *request.Runs, opts ...grpc.CallOption) (*struct0.ListValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRuns", varargs...)
	ret0, _ := ret[0].(*struct0.ListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuns indicates an expected call of GetRuns
func (mr *MockCfgMgmtClientMockRecorder) GetRuns(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuns", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetRuns), varargs...)
}

// GetSuggestions mocks base method
func (m *MockCfgMgmtClient) GetSuggestions(ctx context.Context, in *request.Suggestion, opts ...grpc.CallOption) (*struct0.ListValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuggestions", varargs...)
	ret0, _ := ret[0].(*struct0.ListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestions indicates an expected call of GetSuggestions
func (mr *MockCfgMgmtClientMockRecorder) GetSuggestions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestions", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetSuggestions), varargs...)
}

// GetOrganizations mocks base method
func (m *MockCfgMgmtClient) GetOrganizations(ctx context.Context, in *request.Organizations, opts ...grpc.CallOption) (*struct0.ListValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizations", varargs...)
	ret0, _ := ret[0].(*struct0.ListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations
func (mr *MockCfgMgmtClientMockRecorder) GetOrganizations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetOrganizations), varargs...)
}

// GetSourceFqdns mocks base method
func (m *MockCfgMgmtClient) GetSourceFqdns(ctx context.Context, in *request.SourceFQDNS, opts ...grpc.CallOption) (*struct0.ListValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSourceFqdns", varargs...)
	ret0, _ := ret[0].(*struct0.ListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceFqdns indicates an expected call of GetSourceFqdns
func (mr *MockCfgMgmtClientMockRecorder) GetSourceFqdns(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceFqdns", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetSourceFqdns), varargs...)
}

// GetAttributes mocks base method
func (m *MockCfgMgmtClient) GetAttributes(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.NodeAttribute, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAttributes", varargs...)
	ret0, _ := ret[0].(*response.NodeAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributes indicates an expected call of GetAttributes
func (mr *MockCfgMgmtClientMockRecorder) GetAttributes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributes", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetAttributes), varargs...)
}

// GetPolicyCookbooks mocks base method
func (m *MockCfgMgmtClient) GetPolicyCookbooks(ctx context.Context, in *request.PolicyRevision, opts ...grpc.CallOption) (*response.PolicyCookbooks, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyCookbooks", varargs...)
	ret0, _ := ret[0].(*response.PolicyCookbooks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyCookbooks indicates an expected call of GetPolicyCookbooks
func (mr *MockCfgMgmtClientMockRecorder) GetPolicyCookbooks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyCookbooks", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetPolicyCookbooks), varargs...)
}

// GetEventFeed mocks base method
func (m *MockCfgMgmtClient) GetEventFeed(ctx context.Context, in *request.EventFilter, opts ...grpc.CallOption) (*response.Events, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventFeed", varargs...)
	ret0, _ := ret[0].(*response.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventFeed indicates an expected call of GetEventFeed
func (mr *MockCfgMgmtClientMockRecorder) GetEventFeed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventFeed", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetEventFeed), varargs...)
}

// GetEventTypeCounts mocks base method
func (m *MockCfgMgmtClient) GetEventTypeCounts(ctx context.Context, in *request.EventCountsFilter, opts ...grpc.CallOption) (*response.EventCounts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventTypeCounts", varargs...)
	ret0, _ := ret[0].(*response.EventCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventTypeCounts indicates an expected call of GetEventTypeCounts
func (mr *MockCfgMgmtClientMockRecorder) GetEventTypeCounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypeCounts", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetEventTypeCounts), varargs...)
}

// GetEventTaskCounts mocks base method
func (m *MockCfgMgmtClient) GetEventTaskCounts(ctx context.Context, in *request.EventCountsFilter, opts ...grpc.CallOption) (*response.EventCounts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventTaskCounts", varargs...)
	ret0, _ := ret[0].(*response.EventCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventTaskCounts indicates an expected call of GetEventTaskCounts
func (mr *MockCfgMgmtClientMockRecorder) GetEventTaskCounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTaskCounts", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetEventTaskCounts), varargs...)
}

// GetEventStringBuckets mocks base method
func (m *MockCfgMgmtClient) GetEventStringBuckets(ctx context.Context, in *request.EventStrings, opts ...grpc.CallOption) (*response.EventStrings, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventStringBuckets", varargs...)
	ret0, _ := ret[0].(*response.EventStrings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventStringBuckets indicates an expected call of GetEventStringBuckets
func (mr *MockCfgMgmtClientMockRecorder) GetEventStringBuckets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventStringBuckets", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetEventStringBuckets), varargs...)
}

// GetInventoryNodes mocks base method
func (m *MockCfgMgmtClient) GetInventoryNodes(ctx context.Context, in *request.InventoryNodes, opts ...grpc.CallOption) (*response.InventoryNodes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInventoryNodes", varargs...)
	ret0, _ := ret[0].(*response.InventoryNodes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventoryNodes indicates an expected call of GetInventoryNodes
func (mr *MockCfgMgmtClientMockRecorder) GetInventoryNodes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryNodes", reflect.TypeOf((*MockCfgMgmtClient)(nil).GetInventoryNodes), varargs...)
}

// NodeExport mocks base method
func (m *MockCfgMgmtClient) NodeExport(ctx context.Context, in *request.NodeExport, opts ...grpc.CallOption) (CfgMgmt_NodeExportClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeExport", varargs...)
	ret0, _ := ret[0].(CfgMgmt_NodeExportClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeExport indicates an expected call of NodeExport
func (mr *MockCfgMgmtClientMockRecorder) NodeExport(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeExport", reflect.TypeOf((*MockCfgMgmtClient)(nil).NodeExport), varargs...)
}

// MockCfgMgmt_NodeExportClient is a mock of CfgMgmt_NodeExportClient interface
type MockCfgMgmt_NodeExportClient struct {
	ctrl     *gomock.Controller
	recorder *MockCfgMgmt_NodeExportClientMockRecorder
}

// MockCfgMgmt_NodeExportClientMockRecorder is the mock recorder for MockCfgMgmt_NodeExportClient
type MockCfgMgmt_NodeExportClientMockRecorder struct {
	mock *MockCfgMgmt_NodeExportClient
}

// NewMockCfgMgmt_NodeExportClient creates a new mock instance
func NewMockCfgMgmt_NodeExportClient(ctrl *gomock.Controller) *MockCfgMgmt_NodeExportClient {
	mock := &MockCfgMgmt_NodeExportClient{ctrl: ctrl}
	mock.recorder = &MockCfgMgmt_NodeExportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfgMgmt_NodeExportClient) EXPECT() *MockCfgMgmt_NodeExportClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockCfgMgmt_NodeExportClient) Recv() (*response.ExportData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*response.ExportData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockCfgMgmt_NodeExportClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCfgMgmt_NodeExportClient)(nil).Recv))
}

// Header mocks base method
func (m *MockCfgMgmt_NodeExportClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockCfgMgmt_NodeExportClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCfgMgmt_NodeExportClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockCfgMgmt_NodeExportClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockCfgMgmt_NodeExportClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCfgMgmt_NodeExportClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockCfgMgmt_NodeExportClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockCfgMgmt_NodeExportClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCfgMgmt_NodeExportClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockCfgMgmt_NodeExportClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockCfgMgmt_NodeExportClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCfgMgmt_NodeExportClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockCfgMgmt_NodeExportClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockCfgMgmt_NodeExportClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCfgMgmt_NodeExportClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockCfgMgmt_NodeExportClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockCfgMgmt_NodeExportClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCfgMgmt_NodeExportClient)(nil).RecvMsg), m)
}

// MockCfgMgmtServer is a mock of CfgMgmtServer interface
type MockCfgMgmtServer struct {
	ctrl     *gomock.Controller
	recorder *MockCfgMgmtServerMockRecorder
}

// MockCfgMgmtServerMockRecorder is the mock recorder for MockCfgMgmtServer
type MockCfgMgmtServerMockRecorder struct {
	mock *MockCfgMgmtServer
}

// NewMockCfgMgmtServer creates a new mock instance
func NewMockCfgMgmtServer(ctrl *gomock.Controller) *MockCfgMgmtServer {
	mock := &MockCfgMgmtServer{ctrl: ctrl}
	mock.recorder = &MockCfgMgmtServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfgMgmtServer) EXPECT() *MockCfgMgmtServerMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockCfgMgmtServer) GetVersion(arg0 context.Context, arg1 *request.VersionInfo) (*response.VersionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0, arg1)
	ret0, _ := ret[0].(*response.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockCfgMgmtServerMockRecorder) GetVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetVersion), arg0, arg1)
}

// GetHealth mocks base method
func (m *MockCfgMgmtServer) GetHealth(arg0 context.Context, arg1 *request.Health) (*response.Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealth", arg0, arg1)
	ret0, _ := ret[0].(*response.Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealth indicates an expected call of GetHealth
func (mr *MockCfgMgmtServerMockRecorder) GetHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealth", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetHealth), arg0, arg1)
}

// GetNodesCounts mocks base method
func (m *MockCfgMgmtServer) GetNodesCounts(arg0 context.Context, arg1 *request.NodesCounts) (*response.NodesCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodesCounts", arg0, arg1)
	ret0, _ := ret[0].(*response.NodesCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodesCounts indicates an expected call of GetNodesCounts
func (mr *MockCfgMgmtServerMockRecorder) GetNodesCounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesCounts", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetNodesCounts), arg0, arg1)
}

// GetRunsCounts mocks base method
func (m *MockCfgMgmtServer) GetRunsCounts(arg0 context.Context, arg1 *request.RunsCounts) (*response.RunsCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunsCounts", arg0, arg1)
	ret0, _ := ret[0].(*response.RunsCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunsCounts indicates an expected call of GetRunsCounts
func (mr *MockCfgMgmtServerMockRecorder) GetRunsCounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunsCounts", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetRunsCounts), arg0, arg1)
}

// GetNodeRun mocks base method
func (m *MockCfgMgmtServer) GetNodeRun(arg0 context.Context, arg1 *request.NodeRun) (*response.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeRun", arg0, arg1)
	ret0, _ := ret[0].(*response.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeRun indicates an expected call of GetNodeRun
func (mr *MockCfgMgmtServerMockRecorder) GetNodeRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeRun", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetNodeRun), arg0, arg1)
}

// GetNodes mocks base method
func (m *MockCfgMgmtServer) GetNodes(arg0 context.Context, arg1 *request.Nodes) (*struct0.ListValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", arg0, arg1)
	ret0, _ := ret[0].(*struct0.ListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockCfgMgmtServerMockRecorder) GetNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetNodes), arg0, arg1)
}

// GetRuns mocks base method
func (m *MockCfgMgmtServer) GetRuns(arg0 context.Context, arg1 *request.Runs) (*struct0.ListValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuns", arg0, arg1)
	ret0, _ := ret[0].(*struct0.ListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuns indicates an expected call of GetRuns
func (mr *MockCfgMgmtServerMockRecorder) GetRuns(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuns", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetRuns), arg0, arg1)
}

// GetSuggestions mocks base method
func (m *MockCfgMgmtServer) GetSuggestions(arg0 context.Context, arg1 *request.Suggestion) (*struct0.ListValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestions", arg0, arg1)
	ret0, _ := ret[0].(*struct0.ListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestions indicates an expected call of GetSuggestions
func (mr *MockCfgMgmtServerMockRecorder) GetSuggestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestions", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetSuggestions), arg0, arg1)
}

// GetOrganizations mocks base method
func (m *MockCfgMgmtServer) GetOrganizations(arg0 context.Context, arg1 *request.Organizations) (*struct0.ListValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations", arg0, arg1)
	ret0, _ := ret[0].(*struct0.ListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations
func (mr *MockCfgMgmtServerMockRecorder) GetOrganizations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetOrganizations), arg0, arg1)
}

// GetSourceFqdns mocks base method
func (m *MockCfgMgmtServer) GetSourceFqdns(arg0 context.Context, arg1 *request.SourceFQDNS) (*struct0.ListValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceFqdns", arg0, arg1)
	ret0, _ := ret[0].(*struct0.ListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceFqdns indicates an expected call of GetSourceFqdns
func (mr *MockCfgMgmtServerMockRecorder) GetSourceFqdns(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceFqdns", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetSourceFqdns), arg0, arg1)
}

// GetAttributes mocks base method
func (m *MockCfgMgmtServer) GetAttributes(arg0 context.Context, arg1 *request.Node) (*response.NodeAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributes", arg0, arg1)
	ret0, _ := ret[0].(*response.NodeAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributes indicates an expected call of GetAttributes
func (mr *MockCfgMgmtServerMockRecorder) GetAttributes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributes", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetAttributes), arg0, arg1)
}

// GetPolicyCookbooks mocks base method
func (m *MockCfgMgmtServer) GetPolicyCookbooks(arg0 context.Context, arg1 *request.PolicyRevision) (*response.PolicyCookbooks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyCookbooks", arg0, arg1)
	ret0, _ := ret[0].(*response.PolicyCookbooks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyCookbooks indicates an expected call of GetPolicyCookbooks
func (mr *MockCfgMgmtServerMockRecorder) GetPolicyCookbooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyCookbooks", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetPolicyCookbooks), arg0, arg1)
}

// GetEventFeed mocks base method
func (m *MockCfgMgmtServer) GetEventFeed(arg0 context.Context, arg1 *request.EventFilter) (*response.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventFeed", arg0, arg1)
	ret0, _ := ret[0].(*response.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventFeed indicates an expected call of GetEventFeed
func (mr *MockCfgMgmtServerMockRecorder) GetEventFeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventFeed", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetEventFeed), arg0, arg1)
}

// GetEventTypeCounts mocks base method
func (m *MockCfgMgmtServer) GetEventTypeCounts(arg0 context.Context, arg1 *request.EventCountsFilter) (*response.EventCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventTypeCounts", arg0, arg1)
	ret0, _ := ret[0].(*response.EventCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventTypeCounts indicates an expected call of GetEventTypeCounts
func (mr *MockCfgMgmtServerMockRecorder) GetEventTypeCounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTypeCounts", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetEventTypeCounts), arg0, arg1)
}

// GetEventTaskCounts mocks base method
func (m *MockCfgMgmtServer) GetEventTaskCounts(arg0 context.Context, arg1 *request.EventCountsFilter) (*response.EventCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventTaskCounts", arg0, arg1)
	ret0, _ := ret[0].(*response.EventCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventTaskCounts indicates an expected call of GetEventTaskCounts
func (mr *MockCfgMgmtServerMockRecorder) GetEventTaskCounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventTaskCounts", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetEventTaskCounts), arg0, arg1)
}

// GetEventStringBuckets mocks base method
func (m *MockCfgMgmtServer) GetEventStringBuckets(arg0 context.Context, arg1 *request.EventStrings) (*response.EventStrings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventStringBuckets", arg0, arg1)
	ret0, _ := ret[0].(*response.EventStrings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventStringBuckets indicates an expected call of GetEventStringBuckets
func (mr *MockCfgMgmtServerMockRecorder) GetEventStringBuckets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventStringBuckets", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetEventStringBuckets), arg0, arg1)
}

// GetInventoryNodes mocks base method
func (m *MockCfgMgmtServer) GetInventoryNodes(arg0 context.Context, arg1 *request.InventoryNodes) (*response.InventoryNodes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventoryNodes", arg0, arg1)
	ret0, _ := ret[0].(*response.InventoryNodes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventoryNodes indicates an expected call of GetInventoryNodes
func (mr *MockCfgMgmtServerMockRecorder) GetInventoryNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryNodes", reflect.TypeOf((*MockCfgMgmtServer)(nil).GetInventoryNodes), arg0, arg1)
}

// NodeExport mocks base method
func (m *MockCfgMgmtServer) NodeExport(arg0 *request.NodeExport, arg1 CfgMgmt_NodeExportServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeExport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NodeExport indicates an expected call of NodeExport
func (mr *MockCfgMgmtServerMockRecorder) NodeExport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeExport", reflect.TypeOf((*MockCfgMgmtServer)(nil).NodeExport), arg0, arg1)
}

// MockCfgMgmt_NodeExportServer is a mock of CfgMgmt_NodeExportServer interface
type MockCfgMgmt_NodeExportServer struct {
	ctrl     *gomock.Controller
	recorder *MockCfgMgmt_NodeExportServerMockRecorder
}

// MockCfgMgmt_NodeExportServerMockRecorder is the mock recorder for MockCfgMgmt_NodeExportServer
type MockCfgMgmt_NodeExportServerMockRecorder struct {
	mock *MockCfgMgmt_NodeExportServer
}

// NewMockCfgMgmt_NodeExportServer creates a new mock instance
func NewMockCfgMgmt_NodeExportServer(ctrl *gomock.Controller) *MockCfgMgmt_NodeExportServer {
	mock := &MockCfgMgmt_NodeExportServer{ctrl: ctrl}
	mock.recorder = &MockCfgMgmt_NodeExportServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCfgMgmt_NodeExportServer) EXPECT() *MockCfgMgmt_NodeExportServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockCfgMgmt_NodeExportServer) Send(arg0 *response.ExportData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockCfgMgmt_NodeExportServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCfgMgmt_NodeExportServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockCfgMgmt_NodeExportServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockCfgMgmt_NodeExportServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCfgMgmt_NodeExportServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockCfgMgmt_NodeExportServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockCfgMgmt_NodeExportServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCfgMgmt_NodeExportServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockCfgMgmt_NodeExportServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockCfgMgmt_NodeExportServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCfgMgmt_NodeExportServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockCfgMgmt_NodeExportServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockCfgMgmt_NodeExportServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCfgMgmt_NodeExportServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockCfgMgmt_NodeExportServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockCfgMgmt_NodeExportServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCfgMgmt_NodeExportServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockCfgMgmt_NodeExportServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockCfgMgmt_NodeExportServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCfgMgmt_NodeExportServer)(nil).RecvMsg), m)
}
