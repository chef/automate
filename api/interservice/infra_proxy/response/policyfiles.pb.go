// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: interservice/infra_proxy/response/policyfiles.proto

package response

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Policyfiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policyfiles list.
	Policies []*PolicyfileListItem `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty" toml:"policies,omitempty" mapstructure:"policies,omitempty"`
}

func (x *Policyfiles) Reset() {
	*x = Policyfiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policyfiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policyfiles) ProtoMessage() {}

func (x *Policyfiles) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policyfiles.ProtoReflect.Descriptor instead.
func (*Policyfiles) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{0}
}

func (x *Policyfiles) GetPolicies() []*PolicyfileListItem {
	if x != nil {
		return x.Policies
	}
	return nil
}

type PolicyfileListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policyfile name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// Policyfile revision ID.
	RevisionId string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty" toml:"revision_id,omitempty" mapstructure:"revision_id,omitempty"`
	// Policyfile policy group.
	PolicyGroup string `protobuf:"bytes,2,opt,name=policy_group,json=policyGroup,proto3" json:"policy_group,omitempty" toml:"policy_group,omitempty" mapstructure:"policy_group,omitempty"`
}

func (x *PolicyfileListItem) Reset() {
	*x = PolicyfileListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyfileListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyfileListItem) ProtoMessage() {}

func (x *PolicyfileListItem) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyfileListItem.ProtoReflect.Descriptor instead.
func (*PolicyfileListItem) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyfileListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyfileListItem) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *PolicyfileListItem) GetPolicyGroup() string {
	if x != nil {
		return x.PolicyGroup
	}
	return ""
}

type Policyfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policyfile name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// Policy group name.
	PolicyGroup string `protobuf:"bytes,2,opt,name=policy_group,json=policyGroup,proto3" json:"policy_group,omitempty" toml:"policy_group,omitempty" mapstructure:"policy_group,omitempty"`
	// Policy revision ID.
	RevisionId string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty" toml:"revision_id,omitempty" mapstructure:"revision_id,omitempty"`
	// Run-list associated with the policy.
	RunList []string `protobuf:"bytes,4,rep,name=run_list,json=runList,proto3" json:"run_list,omitempty" toml:"run_list,omitempty" mapstructure:"run_list,omitempty"`
	// Named run-list associated with the policy.
	NamedRunList []*NamedRunList `protobuf:"bytes,5,rep,name=named_run_list,json=namedRunList,proto3" json:"named_run_list,omitempty" toml:"named_run_list,omitempty" mapstructure:"named_run_list,omitempty"`
	// Included policy locks files.
	IncludedPolicyLocks []*IncludedPolicyLock `protobuf:"bytes,6,rep,name=included_policy_locks,json=includedPolicyLocks,proto3" json:"included_policy_locks,omitempty" toml:"included_policy_locks,omitempty" mapstructure:"included_policy_locks,omitempty"`
	// List of cookbook locks under this policy.
	CookbookLocks []*CookbookLock `protobuf:"bytes,7,rep,name=cookbook_locks,json=cookbookLocks,proto3" json:"cookbook_locks,omitempty" toml:"cookbook_locks,omitempty" mapstructure:"cookbook_locks,omitempty"`
	// Policyfile default attributes JSON.
	DefaultAttributes string `protobuf:"bytes,8,opt,name=default_attributes,json=defaultAttributes,proto3" json:"default_attributes,omitempty" toml:"default_attributes,omitempty" mapstructure:"default_attributes,omitempty"`
	// Policyfile override attributes JSON.
	OverrideAttributes string `protobuf:"bytes,9,opt,name=override_attributes,json=overrideAttributes,proto3" json:"override_attributes,omitempty" toml:"override_attributes,omitempty" mapstructure:"override_attributes,omitempty"`
	// Expanded run-list associated with the policy.
	ExpandedRunList []*ExpandedRunList `protobuf:"bytes,10,rep,name=expanded_run_list,json=expandedRunList,proto3" json:"expanded_run_list,omitempty" toml:"expanded_run_list,omitempty" mapstructure:"expanded_run_list,omitempty"`
	// Solution Dependencies versions.
	SolutionDependecies []*SolutionDependencies `protobuf:"bytes,11,rep,name=solution_dependecies,json=solutionDependecies,proto3" json:"solution_dependecies,omitempty" toml:"solution_dependecies,omitempty" mapstructure:"solution_dependecies,omitempty"`
}

func (x *Policyfile) Reset() {
	*x = Policyfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policyfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policyfile) ProtoMessage() {}

func (x *Policyfile) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policyfile.ProtoReflect.Descriptor instead.
func (*Policyfile) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{2}
}

func (x *Policyfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policyfile) GetPolicyGroup() string {
	if x != nil {
		return x.PolicyGroup
	}
	return ""
}

func (x *Policyfile) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *Policyfile) GetRunList() []string {
	if x != nil {
		return x.RunList
	}
	return nil
}

func (x *Policyfile) GetNamedRunList() []*NamedRunList {
	if x != nil {
		return x.NamedRunList
	}
	return nil
}

func (x *Policyfile) GetIncludedPolicyLocks() []*IncludedPolicyLock {
	if x != nil {
		return x.IncludedPolicyLocks
	}
	return nil
}

func (x *Policyfile) GetCookbookLocks() []*CookbookLock {
	if x != nil {
		return x.CookbookLocks
	}
	return nil
}

func (x *Policyfile) GetDefaultAttributes() string {
	if x != nil {
		return x.DefaultAttributes
	}
	return ""
}

func (x *Policyfile) GetOverrideAttributes() string {
	if x != nil {
		return x.OverrideAttributes
	}
	return ""
}

func (x *Policyfile) GetExpandedRunList() []*ExpandedRunList {
	if x != nil {
		return x.ExpandedRunList
	}
	return nil
}

func (x *Policyfile) GetSolutionDependecies() []*SolutionDependencies {
	if x != nil {
		return x.SolutionDependecies
	}
	return nil
}

type SolutionDependencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cookbook name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// cookbook version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	// cookbook dependencies
	Dependencies []*DepedenciesData `protobuf:"bytes,3,rep,name=dependencies,proto3" json:"dependencies,omitempty" toml:"dependencies,omitempty" mapstructure:"dependencies,omitempty"`
}

func (x *SolutionDependencies) Reset() {
	*x = SolutionDependencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolutionDependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolutionDependencies) ProtoMessage() {}

func (x *SolutionDependencies) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolutionDependencies.ProtoReflect.Descriptor instead.
func (*SolutionDependencies) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{3}
}

func (x *SolutionDependencies) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SolutionDependencies) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SolutionDependencies) GetDependencies() []*DepedenciesData {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type DepedenciesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cookbook name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// cookbook version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
}

func (x *DepedenciesData) Reset() {
	*x = DepedenciesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepedenciesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepedenciesData) ProtoMessage() {}

func (x *DepedenciesData) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepedenciesData.ProtoReflect.Descriptor instead.
func (*DepedenciesData) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{4}
}

func (x *DepedenciesData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DepedenciesData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type IncludedPolicyLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Included policyfile name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// Included policyfile revision ID.
	RevisionId string `protobuf:"bytes,2,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty" toml:"revision_id,omitempty" mapstructure:"revision_id,omitempty"`
	// Included policyfile source options.
	SourceOptions *SourceOptions `protobuf:"bytes,3,opt,name=source_options,json=sourceOptions,proto3" json:"source_options,omitempty" toml:"source_options,omitempty" mapstructure:"source_options,omitempty"`
}

func (x *IncludedPolicyLock) Reset() {
	*x = IncludedPolicyLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncludedPolicyLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncludedPolicyLock) ProtoMessage() {}

func (x *IncludedPolicyLock) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncludedPolicyLock.ProtoReflect.Descriptor instead.
func (*IncludedPolicyLock) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{5}
}

func (x *IncludedPolicyLock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IncludedPolicyLock) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *IncludedPolicyLock) GetSourceOptions() *SourceOptions {
	if x != nil {
		return x.SourceOptions
	}
	return nil
}

type CookbookLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cookbook name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// Cookbook version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	// Cookbook identifier.
	Identifier string `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty" toml:"identifier,omitempty" mapstructure:"identifier,omitempty"`
	// Cookbook decimal number identifier.
	DottedIdentifier string `protobuf:"bytes,4,opt,name=dotted_identifier,json=dottedIdentifier,proto3" json:"dotted_identifier,omitempty" toml:"dotted_identifier,omitempty" mapstructure:"dotted_identifier,omitempty"`
	// Cookbook source.
	Source string `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty" toml:"source,omitempty" mapstructure:"source,omitempty"`
	// Cookbook cache key.
	CacheKey string `protobuf:"bytes,6,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty" toml:"cache_key,omitempty" mapstructure:"cache_key,omitempty"`
	// SCM detail.
	ScmDetail *SCMDetail `protobuf:"bytes,7,opt,name=scm_detail,json=scmDetail,proto3" json:"scm_detail,omitempty" toml:"scm_detail,omitempty" mapstructure:"scm_detail,omitempty"`
	// Cookbook source path.
	SourceOptions *SourceOptions `protobuf:"bytes,8,opt,name=source_options,json=sourceOptions,proto3" json:"source_options,omitempty" toml:"source_options,omitempty" mapstructure:"source_options,omitempty"`
}

func (x *CookbookLock) Reset() {
	*x = CookbookLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookbookLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookbookLock) ProtoMessage() {}

func (x *CookbookLock) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookbookLock.ProtoReflect.Descriptor instead.
func (*CookbookLock) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{6}
}

func (x *CookbookLock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CookbookLock) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CookbookLock) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *CookbookLock) GetDottedIdentifier() string {
	if x != nil {
		return x.DottedIdentifier
	}
	return ""
}

func (x *CookbookLock) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CookbookLock) GetCacheKey() string {
	if x != nil {
		return x.CacheKey
	}
	return ""
}

func (x *CookbookLock) GetScmDetail() *SCMDetail {
	if x != nil {
		return x.ScmDetail
	}
	return nil
}

func (x *CookbookLock) GetSourceOptions() *SourceOptions {
	if x != nil {
		return x.SourceOptions
	}
	return nil
}

type SCMDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SCM name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// SCM remote location.
	Remote string `protobuf:"bytes,2,opt,name=remote,proto3" json:"remote,omitempty" toml:"remote,omitempty" mapstructure:"remote,omitempty"`
	// SCM revision detail.
	Revision string `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty" toml:"revision,omitempty" mapstructure:"revision,omitempty"`
	// Boolean that denotes if the working tree is clean or not.
	WorkingTreeClean bool `protobuf:"varint,4,opt,name=working_tree_clean,json=workingTreeClean,proto3" json:"working_tree_clean,omitempty" toml:"working_tree_clean,omitempty" mapstructure:"working_tree_clean,omitempty"`
	// Source's published info.
	Published bool `protobuf:"varint,5,opt,name=published,proto3" json:"published,omitempty" toml:"published,omitempty" mapstructure:"published,omitempty"`
	// Synchronized remote branches list.
	SynchronizedRemoteBranches []string `protobuf:"bytes,6,rep,name=synchronized_remote_branches,json=synchronizedRemoteBranches,proto3" json:"synchronized_remote_branches,omitempty" toml:"synchronized_remote_branches,omitempty" mapstructure:"synchronized_remote_branches,omitempty"`
}

func (x *SCMDetail) Reset() {
	*x = SCMDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCMDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCMDetail) ProtoMessage() {}

func (x *SCMDetail) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCMDetail.ProtoReflect.Descriptor instead.
func (*SCMDetail) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{7}
}

func (x *SCMDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SCMDetail) GetRemote() string {
	if x != nil {
		return x.Remote
	}
	return ""
}

func (x *SCMDetail) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *SCMDetail) GetWorkingTreeClean() bool {
	if x != nil {
		return x.WorkingTreeClean
	}
	return false
}

func (x *SCMDetail) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

func (x *SCMDetail) GetSynchronizedRemoteBranches() []string {
	if x != nil {
		return x.SynchronizedRemoteBranches
	}
	return nil
}

type SourceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source options path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty" toml:"path,omitempty" mapstructure:"path,omitempty"`
}

func (x *SourceOptions) Reset() {
	*x = SourceOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceOptions) ProtoMessage() {}

func (x *SourceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceOptions.ProtoReflect.Descriptor instead.
func (*SourceOptions) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{8}
}

func (x *SourceOptions) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type NamedRunList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run-list name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// Run-list associated with the policy.
	RunList []string `protobuf:"bytes,2,rep,name=run_list,json=runList,proto3" json:"run_list,omitempty" toml:"run_list,omitempty" mapstructure:"run_list,omitempty"`
}

func (x *NamedRunList) Reset() {
	*x = NamedRunList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedRunList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedRunList) ProtoMessage() {}

func (x *NamedRunList) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedRunList.ProtoReflect.Descriptor instead.
func (*NamedRunList) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{9}
}

func (x *NamedRunList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamedRunList) GetRunList() []string {
	if x != nil {
		return x.RunList
	}
	return nil
}

type DeletePolicyfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policyfile name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
}

func (x *DeletePolicyfile) Reset() {
	*x = DeletePolicyfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyfile) ProtoMessage() {}

func (x *DeletePolicyfile) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyfile.ProtoReflect.Descriptor instead.
func (*DeletePolicyfile) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{10}
}

func (x *DeletePolicyfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PolicyfileRevisions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policyfile revisions.
	Revisions []*PolicyfileRevision `protobuf:"bytes,1,rep,name=revisions,proto3" json:"revisions,omitempty" toml:"revisions,omitempty" mapstructure:"revisions,omitempty"`
}

func (x *PolicyfileRevisions) Reset() {
	*x = PolicyfileRevisions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyfileRevisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyfileRevisions) ProtoMessage() {}

func (x *PolicyfileRevisions) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyfileRevisions.ProtoReflect.Descriptor instead.
func (*PolicyfileRevisions) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{11}
}

func (x *PolicyfileRevisions) GetRevisions() []*PolicyfileRevision {
	if x != nil {
		return x.Revisions
	}
	return nil
}

type PolicyfileRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// policyfile revision
	RevisionId string `protobuf:"bytes,1,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty" toml:"revision_id,omitempty" mapstructure:"revision_id,omitempty"`
}

func (x *PolicyfileRevision) Reset() {
	*x = PolicyfileRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyfileRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyfileRevision) ProtoMessage() {}

func (x *PolicyfileRevision) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyfileRevision.ProtoReflect.Descriptor instead.
func (*PolicyfileRevision) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{12}
}

func (x *PolicyfileRevision) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

type Policygroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policygroup name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// Policygroup policyfiles.
	Policies []*GroupPolicy `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty" toml:"policies,omitempty" mapstructure:"policies,omitempty"`
	// policygroup uri.
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty" toml:"uri,omitempty" mapstructure:"uri,omitempty"`
}

func (x *Policygroup) Reset() {
	*x = Policygroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policygroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policygroup) ProtoMessage() {}

func (x *Policygroup) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policygroup.ProtoReflect.Descriptor instead.
func (*Policygroup) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{13}
}

func (x *Policygroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policygroup) GetPolicies() []*GroupPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Policygroup) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type GroupPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policyfile name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// Policyfile Revision ID.
	RevisionId string `protobuf:"bytes,2,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty" toml:"revision_id,omitempty" mapstructure:"revision_id,omitempty"`
}

func (x *GroupPolicy) Reset() {
	*x = GroupPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupPolicy) ProtoMessage() {}

func (x *GroupPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupPolicy.ProtoReflect.Descriptor instead.
func (*GroupPolicy) Descriptor() ([]byte, []int) {
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP(), []int{14}
}

func (x *GroupPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupPolicy) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

var File_interservice_infra_proxy_response_policyfiles_proto protoreflect.FileDescriptor

var file_interservice_infra_proxy_response_policyfiles_proto_rawDesc = []byte{
	0x0a, 0x33, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x1a, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x68, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x59,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x12, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xed, 0x05, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x5e, 0x0a, 0x0e, 0x63,
	0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x63, 0x6f,
	0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x11, 0x65,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x14, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x13, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x63, 0x69, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e,
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x65, 0x70, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x3f,
	0x0a, 0x0f, 0x44, 0x65, 0x70, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xaa, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf4, 0x02, 0x0a,
	0x0c, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x64,
	0x6f, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x0a,
	0x0a, 0x73, 0x63, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x43,
	0x4d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x73, 0x63, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x5f, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x09, 0x53, 0x43, 0x4d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x65, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x73, 0x79, 0x6e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x3d, 0x0a, 0x0c,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x35, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x87,
	0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x42, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x40, 0x5a, 0x3e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interservice_infra_proxy_response_policyfiles_proto_rawDescOnce sync.Once
	file_interservice_infra_proxy_response_policyfiles_proto_rawDescData = file_interservice_infra_proxy_response_policyfiles_proto_rawDesc
)

func file_interservice_infra_proxy_response_policyfiles_proto_rawDescGZIP() []byte {
	file_interservice_infra_proxy_response_policyfiles_proto_rawDescOnce.Do(func() {
		file_interservice_infra_proxy_response_policyfiles_proto_rawDescData = protoimpl.X.CompressGZIP(file_interservice_infra_proxy_response_policyfiles_proto_rawDescData)
	})
	return file_interservice_infra_proxy_response_policyfiles_proto_rawDescData
}

var file_interservice_infra_proxy_response_policyfiles_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_interservice_infra_proxy_response_policyfiles_proto_goTypes = []interface{}{
	(*Policyfiles)(nil),          // 0: chef.automate.domain.infra_proxy.response.Policyfiles
	(*PolicyfileListItem)(nil),   // 1: chef.automate.domain.infra_proxy.response.PolicyfileListItem
	(*Policyfile)(nil),           // 2: chef.automate.domain.infra_proxy.response.Policyfile
	(*SolutionDependencies)(nil), // 3: chef.automate.domain.infra_proxy.response.SolutionDependencies
	(*DepedenciesData)(nil),      // 4: chef.automate.domain.infra_proxy.response.DepedenciesData
	(*IncludedPolicyLock)(nil),   // 5: chef.automate.domain.infra_proxy.response.IncludedPolicyLock
	(*CookbookLock)(nil),         // 6: chef.automate.domain.infra_proxy.response.CookbookLock
	(*SCMDetail)(nil),            // 7: chef.automate.domain.infra_proxy.response.SCMDetail
	(*SourceOptions)(nil),        // 8: chef.automate.domain.infra_proxy.response.SourceOptions
	(*NamedRunList)(nil),         // 9: chef.automate.domain.infra_proxy.response.NamedRunList
	(*DeletePolicyfile)(nil),     // 10: chef.automate.domain.infra_proxy.response.DeletePolicyfile
	(*PolicyfileRevisions)(nil),  // 11: chef.automate.domain.infra_proxy.response.PolicyfileRevisions
	(*PolicyfileRevision)(nil),   // 12: chef.automate.domain.infra_proxy.response.PolicyfileRevision
	(*Policygroup)(nil),          // 13: chef.automate.domain.infra_proxy.response.Policygroup
	(*GroupPolicy)(nil),          // 14: chef.automate.domain.infra_proxy.response.GroupPolicy
	(*ExpandedRunList)(nil),      // 15: chef.automate.domain.infra_proxy.response.ExpandedRunList
}
var file_interservice_infra_proxy_response_policyfiles_proto_depIdxs = []int32{
	1,  // 0: chef.automate.domain.infra_proxy.response.Policyfiles.policies:type_name -> chef.automate.domain.infra_proxy.response.PolicyfileListItem
	9,  // 1: chef.automate.domain.infra_proxy.response.Policyfile.named_run_list:type_name -> chef.automate.domain.infra_proxy.response.NamedRunList
	5,  // 2: chef.automate.domain.infra_proxy.response.Policyfile.included_policy_locks:type_name -> chef.automate.domain.infra_proxy.response.IncludedPolicyLock
	6,  // 3: chef.automate.domain.infra_proxy.response.Policyfile.cookbook_locks:type_name -> chef.automate.domain.infra_proxy.response.CookbookLock
	15, // 4: chef.automate.domain.infra_proxy.response.Policyfile.expanded_run_list:type_name -> chef.automate.domain.infra_proxy.response.ExpandedRunList
	3,  // 5: chef.automate.domain.infra_proxy.response.Policyfile.solution_dependecies:type_name -> chef.automate.domain.infra_proxy.response.SolutionDependencies
	4,  // 6: chef.automate.domain.infra_proxy.response.SolutionDependencies.dependencies:type_name -> chef.automate.domain.infra_proxy.response.DepedenciesData
	8,  // 7: chef.automate.domain.infra_proxy.response.IncludedPolicyLock.source_options:type_name -> chef.automate.domain.infra_proxy.response.SourceOptions
	7,  // 8: chef.automate.domain.infra_proxy.response.CookbookLock.scm_detail:type_name -> chef.automate.domain.infra_proxy.response.SCMDetail
	8,  // 9: chef.automate.domain.infra_proxy.response.CookbookLock.source_options:type_name -> chef.automate.domain.infra_proxy.response.SourceOptions
	12, // 10: chef.automate.domain.infra_proxy.response.PolicyfileRevisions.revisions:type_name -> chef.automate.domain.infra_proxy.response.PolicyfileRevision
	14, // 11: chef.automate.domain.infra_proxy.response.Policygroup.policies:type_name -> chef.automate.domain.infra_proxy.response.GroupPolicy
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_interservice_infra_proxy_response_policyfiles_proto_init() }
func file_interservice_infra_proxy_response_policyfiles_proto_init() {
	if File_interservice_infra_proxy_response_policyfiles_proto != nil {
		return
	}
	file_interservice_infra_proxy_response_roles_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policyfiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyfileListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policyfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolutionDependencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepedenciesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncludedPolicyLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookbookLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCMDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedRunList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyfileRevisions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyfileRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policygroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_infra_proxy_response_policyfiles_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_infra_proxy_response_policyfiles_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_interservice_infra_proxy_response_policyfiles_proto_goTypes,
		DependencyIndexes: file_interservice_infra_proxy_response_policyfiles_proto_depIdxs,
		MessageInfos:      file_interservice_infra_proxy_response_policyfiles_proto_msgTypes,
	}.Build()
	File_interservice_infra_proxy_response_policyfiles_proto = out.File
	file_interservice_infra_proxy_response_policyfiles_proto_rawDesc = nil
	file_interservice_infra_proxy_response_policyfiles_proto_goTypes = nil
	file_interservice_infra_proxy_response_policyfiles_proto_depIdxs = nil
}
