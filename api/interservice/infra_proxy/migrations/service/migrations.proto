syntax = "proto3";

package chef.automate.domain.infra_proxy.migrations.service;
option go_package = "github.com/chef/automate/api/interservice/infra_proxy/migrations/service";

import "interservice/infra_proxy/migrations/response/migrations.proto";
import "interservice/infra_proxy/migrations/request/migrations.proto";
import "google/api/annotations.proto";

service MigrationDataService{

  rpc UploadFile (stream chef.automate.domain.infra_proxy.migrations.request.UploadZipFileRequest) returns (chef.automate.domain.infra_proxy.migrations.response.UploadZipFileResponse) {};
  rpc GetMigrationStatus (chef.automate.domain.infra_proxy.migrations.request.GetMigrationStatusRequest) returns (chef.automate.domain.infra_proxy.migrations.response.GetMigrationStatusResponse) {};
  rpc CancelMigration (chef.automate.domain.infra_proxy.migrations.request.CancelMigrationRequest) returns (chef.automate.domain.infra_proxy.migrations.response.CancelMigrationResponse) {};
  rpc GetStagedData (chef.automate.domain.infra_proxy.migrations.request.GetStagedDataRequest) returns (chef.automate.domain.infra_proxy.migrations.response.GetStagedDataResponse) {};
  rpc ConfirmPreview (chef.automate.domain.infra_proxy.migrations.request.ConfirmPreview) returns (chef.automate.domain.infra_proxy.migrations.response.ConfirmPreview) {};
}
