syntax = "proto3";

package chef.automate.domain.infra_proxy.migrations.request;
option go_package = "github.com/chef/automate/api/interservice/infra_proxy/migrations/request";

message UploadFileRequest{
  //Chef infra server id for the file
  string server_id =1;
  //Chunk of the data in bytes
  Chunk chunk = 2;
  //Metadata for the request
  Metadata meta = 3;
}

message Metadata{
  //Migration File name
  string name = 1;
  //Content type of the request
  string content_type =2;
}

// Zip content in byte form.
message Chunk {
  // Byte data
  bytes data = 1;
  // Stream pointer
  int64 position = 2;
}

message GetMigrationStatusRequest {
  // Migration ID.
  string migration_id = 1;

}

message CancelMigrationRequest {
  // Chef Server ID
  string server_id = 1;
  // Migration ID
  string migration_id = 2; 
}

message GetStagedDataRequest {
  // Migration ID
  string migration_id = 1;
}

message ConfirmPreview {
  // Server ID
  string server_id = 1;
  // Migration ID.
  string migration_id = 2;
  // Staged data
  StagedData staged_data = 3; 
}

message StagedData {
  // Number of orgs to migrate
  int32 orgs_to_migrate =1;
  // Number of orgs to skip
  int32 orgs_to_skip =2;
  // Number of orgs to update
  int32 orgs_to_update =3;
  // Number of orgs to delete
  int32 orgs_to_delete =4;
  // Users
  repeated User users =5;
}

message User {
  // User's username
  string  username =1;
  // User's email ID
  string email =2;
  // User's display name
  string display_name=3;
  // User's first name
  string first_name=4;
  // User's last name
  string last_name=5;
  // User's middle name
  string middle_name=6;
  // User's username in automate
  string automate_username =7;
  // Local or ldap user
  string connector=8;
  // IsConflicting for user's existance in db
  bool is_conflicting=9;
  // user is admin or not
  bool is_admin=10;
  //Local User hash password
  string hash_password=11;
  // Local User actionops
  int32 action_ops=12;
}
