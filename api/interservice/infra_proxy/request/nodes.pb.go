// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/interservice/infra_proxy/request/nodes.proto

package request

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AffectedNodes struct {
	// ID of the Org.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty" toml:"org_id,omitempty" mapstructure:"org_id,omitempty"`
	// ID of the Server.
	ServerId string `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty" toml:"server_id,omitempty" mapstructure:"server_id,omitempty"`
	// Type of the chef object (e.g. 'cookbooks', 'roles', 'chef_environment').
	ChefType string `protobuf:"bytes,3,opt,name=chef_type,json=chefType,proto3" json:"chef_type,omitempty" toml:"chef_type,omitempty" mapstructure:"chef_type,omitempty"`
	// Name of the chef object.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// Version of the chef object.
	Version              string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *AffectedNodes) Reset()         { *m = AffectedNodes{} }
func (m *AffectedNodes) String() string { return proto.CompactTextString(m) }
func (*AffectedNodes) ProtoMessage()    {}
func (*AffectedNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f08f6af3a6e346b, []int{0}
}

func (m *AffectedNodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffectedNodes.Unmarshal(m, b)
}
func (m *AffectedNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffectedNodes.Marshal(b, m, deterministic)
}
func (m *AffectedNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffectedNodes.Merge(m, src)
}
func (m *AffectedNodes) XXX_Size() int {
	return xxx_messageInfo_AffectedNodes.Size(m)
}
func (m *AffectedNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_AffectedNodes.DiscardUnknown(m)
}

var xxx_messageInfo_AffectedNodes proto.InternalMessageInfo

func (m *AffectedNodes) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AffectedNodes) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *AffectedNodes) GetChefType() string {
	if m != nil {
		return m.ChefType
	}
	return ""
}

func (m *AffectedNodes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AffectedNodes) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*AffectedNodes)(nil), "chef.automate.domain.infra_proxy.request.AffectedNodes")
}

func init() {
	proto.RegisterFile("api/interservice/infra_proxy/request/nodes.proto", fileDescriptor_3f08f6af3a6e346b)
}

var fileDescriptor_3f08f6af3a6e346b = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4a, 0x04, 0x31,
	0x10, 0x86, 0x59, 0xbd, 0x3b, 0xbd, 0x80, 0x4d, 0x40, 0x08, 0xd8, 0x88, 0xd5, 0x55, 0x89, 0x60,
	0x2d, 0xa2, 0x9d, 0x8d, 0x85, 0x58, 0xd9, 0x2c, 0xb9, 0xcd, 0xec, 0xde, 0x14, 0x9b, 0x89, 0xb3,
	0xb3, 0x87, 0xfb, 0x12, 0x3e, 0xb3, 0x24, 0xeb, 0x82, 0xe5, 0x75, 0xc9, 0xf7, 0x31, 0xf3, 0x33,
	0xbf, 0xba, 0xf7, 0x09, 0x1d, 0x46, 0x01, 0x1e, 0x80, 0x8f, 0xd8, 0x80, 0xc3, 0xd8, 0xb2, 0xaf,
	0x13, 0xd3, 0xf7, 0xe4, 0x18, 0xbe, 0x46, 0x18, 0xc4, 0x45, 0x0a, 0x30, 0xd8, 0xc4, 0x24, 0xa4,
	0x77, 0xcd, 0x01, 0x5a, 0xeb, 0x47, 0xa1, 0xde, 0x0b, 0xd8, 0x40, 0xbd, 0xc7, 0x68, 0xff, 0x4d,
	0xd9, 0xbf, 0xa9, 0xbb, 0x9f, 0x4a, 0x5d, 0x3d, 0xb7, 0x2d, 0x34, 0x02, 0xe1, 0x2d, 0x6f, 0xd0,
	0xd7, 0x6a, 0x43, 0xdc, 0xd5, 0x18, 0x4c, 0x75, 0x5b, 0xed, 0xb6, 0xef, 0x6b, 0xe2, 0xee, 0x35,
	0xe8, 0x1b, 0xb5, 0xcd, 0xe9, 0xc0, 0xd9, 0x9c, 0x15, 0x73, 0x39, 0x83, 0x59, 0xe6, 0xc4, 0x5a,
	0xa6, 0x04, 0xe6, 0x7c, 0x96, 0x19, 0x7c, 0x4c, 0x09, 0xb4, 0x56, 0xab, 0xe8, 0x7b, 0x30, 0xab,
	0xc2, 0xcb, 0x5b, 0x1b, 0x75, 0x71, 0x04, 0x1e, 0x90, 0xa2, 0x59, 0x17, 0xbc, 0x7c, 0x5f, 0x9e,
	0x3e, 0x1f, 0x3b, 0x94, 0xc3, 0xb8, 0xb7, 0x0d, 0xf5, 0x2e, 0x2f, 0x71, 0xcb, 0x1d, 0xee, 0x94,
	0x1e, 0xf6, 0x9b, 0x52, 0xc1, 0xc3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0x11, 0x15, 0x2c,
	0x36, 0x01, 0x00, 0x00,
}
