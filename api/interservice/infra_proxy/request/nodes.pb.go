// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interservice/infra_proxy/request/nodes.proto

package request

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AffectedNodes struct {
	// Chef organization ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty" toml:"org_id,omitempty" mapstructure:"org_id,omitempty"`
	// Chef Infra Server ID.
	ServerId string `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty" toml:"server_id,omitempty" mapstructure:"server_id,omitempty"`
	// Chef object type (e.g. 'cookbooks', 'roles', 'chef_environment').
	ChefType string `protobuf:"bytes,3,opt,name=chef_type,json=chefType,proto3" json:"chef_type,omitempty" toml:"chef_type,omitempty" mapstructure:"chef_type,omitempty"`
	// Chef object name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	// Chef object version.
	Version              string   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *AffectedNodes) Reset()         { *m = AffectedNodes{} }
func (m *AffectedNodes) String() string { return proto.CompactTextString(m) }
func (*AffectedNodes) ProtoMessage()    {}
func (*AffectedNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f4a22d38f68d9de, []int{0}
}

func (m *AffectedNodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AffectedNodes.Unmarshal(m, b)
}
func (m *AffectedNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AffectedNodes.Marshal(b, m, deterministic)
}
func (m *AffectedNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffectedNodes.Merge(m, src)
}
func (m *AffectedNodes) XXX_Size() int {
	return xxx_messageInfo_AffectedNodes.Size(m)
}
func (m *AffectedNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_AffectedNodes.DiscardUnknown(m)
}

var xxx_messageInfo_AffectedNodes proto.InternalMessageInfo

func (m *AffectedNodes) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *AffectedNodes) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *AffectedNodes) GetChefType() string {
	if m != nil {
		return m.ChefType
	}
	return ""
}

func (m *AffectedNodes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AffectedNodes) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DeleteNode struct {
	// Chef organization ID.
	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty" toml:"org_id,omitempty" mapstructure:"org_id,omitempty"`
	// Chef Infra Server ID.
	ServerId string `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty" toml:"server_id,omitempty" mapstructure:"server_id,omitempty"`
	// Node name.
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *DeleteNode) Reset()         { *m = DeleteNode{} }
func (m *DeleteNode) String() string { return proto.CompactTextString(m) }
func (*DeleteNode) ProtoMessage()    {}
func (*DeleteNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f4a22d38f68d9de, []int{1}
}

func (m *DeleteNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNode.Unmarshal(m, b)
}
func (m *DeleteNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNode.Marshal(b, m, deterministic)
}
func (m *DeleteNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNode.Merge(m, src)
}
func (m *DeleteNode) XXX_Size() int {
	return xxx_messageInfo_DeleteNode.Size(m)
}
func (m *DeleteNode) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNode.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNode proto.InternalMessageInfo

func (m *DeleteNode) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteNode) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *DeleteNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*AffectedNodes)(nil), "chef.automate.domain.infra_proxy.request.AffectedNodes")
	proto.RegisterType((*DeleteNode)(nil), "chef.automate.domain.infra_proxy.request.DeleteNode")
}

func init() {
	proto.RegisterFile("interservice/infra_proxy/request/nodes.proto", fileDescriptor_7f4a22d38f68d9de)
}

var fileDescriptor_7f4a22d38f68d9de = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0x3f, 0x4b, 0xc5, 0x30,
	0x14, 0xc5, 0xa9, 0xef, 0x8f, 0xbe, 0x80, 0x4b, 0x40, 0x08, 0xb8, 0xc8, 0x9b, 0xde, 0x20, 0xc9,
	0xe0, 0x2c, 0xa2, 0xb8, 0xb8, 0x38, 0xc8, 0x9b, 0x5c, 0x4a, 0x5e, 0x73, 0xdb, 0x17, 0xb0, 0xb9,
	0xf1, 0xf6, 0xb6, 0xd8, 0x2f, 0xe1, 0x67, 0x96, 0xa4, 0x16, 0xdd, 0x04, 0xb7, 0xe4, 0x1c, 0xce,
	0xfd, 0x1d, 0x8e, 0xb8, 0xf6, 0x81, 0x81, 0x3a, 0xa0, 0xc1, 0x57, 0x60, 0x7c, 0xa8, 0xc9, 0x96,
	0x91, 0xf0, 0x63, 0x34, 0x04, 0xef, 0x3d, 0x74, 0x6c, 0x02, 0x3a, 0xe8, 0x74, 0x24, 0x64, 0x94,
	0xbb, 0xea, 0x08, 0xb5, 0xb6, 0x3d, 0x63, 0x6b, 0x19, 0xb4, 0xc3, 0xd6, 0xfa, 0xa0, 0x7f, 0xa5,
	0xf4, 0x77, 0x6a, 0xfb, 0x59, 0x88, 0xf3, 0xfb, 0xba, 0x86, 0x8a, 0xc1, 0x3d, 0xa7, 0x0b, 0xf2,
	0x42, 0xac, 0x91, 0x9a, 0xd2, 0x3b, 0x55, 0x5c, 0x15, 0xbb, 0xcd, 0xcb, 0x0a, 0xa9, 0x79, 0x72,
	0xf2, 0x52, 0x6c, 0x12, 0x1d, 0x28, 0x39, 0x27, 0xd9, 0x39, 0x9b, 0x84, 0xc9, 0x4c, 0xc4, 0x92,
	0xc7, 0x08, 0x6a, 0x31, 0x99, 0x49, 0xd8, 0x8f, 0x11, 0xa4, 0x14, 0xcb, 0x60, 0x5b, 0x50, 0xcb,
	0xac, 0xe7, 0xb7, 0x54, 0xe2, 0x74, 0x00, 0xea, 0x3c, 0x06, 0xb5, 0xca, 0xf2, 0xfc, 0xdd, 0xee,
	0x85, 0x78, 0x84, 0x37, 0x60, 0x48, 0x6d, 0xfe, 0x55, 0x66, 0xe6, 0x2d, 0x7e, 0x78, 0x0f, 0x77,
	0xaf, 0xb7, 0x8d, 0xe7, 0x63, 0x7f, 0xd0, 0x15, 0xb6, 0x26, 0x55, 0x33, 0xf3, 0x3a, 0xc6, 0x46,
	0x6f, 0xfe, 0x5a, 0xf7, 0xb0, 0xce, 0xc3, 0xde, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x33,
	0xe0, 0xbc, 0x88, 0x01, 0x00, 0x00,
}
