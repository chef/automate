// Code generated by MockGen. DO NOT EDIT.
// Source: api/interservice/infra_proxy/service/infra_proxy.pb.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	request "github.com/chef/automate/api/interservice/infra_proxy/request"
	response "github.com/chef/automate/api/interservice/infra_proxy/response"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockInfraProxyServiceClient is a mock of InfraProxyServiceClient interface
type MockInfraProxyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfraProxyServiceClientMockRecorder
}

// MockInfraProxyServiceClientMockRecorder is the mock recorder for MockInfraProxyServiceClient
type MockInfraProxyServiceClientMockRecorder struct {
	mock *MockInfraProxyServiceClient
}

// NewMockInfraProxyServiceClient creates a new mock instance
func NewMockInfraProxyServiceClient(ctrl *gomock.Controller) *MockInfraProxyServiceClient {
	mock := &MockInfraProxyServiceClient{ctrl: ctrl}
	mock.recorder = &MockInfraProxyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInfraProxyServiceClient) EXPECT() *MockInfraProxyServiceClientMockRecorder {
	return m.recorder
}

// CreateServer mocks base method
func (m *MockInfraProxyServiceClient) CreateServer(ctx context.Context, in *request.CreateServer, opts ...grpc.CallOption) (*response.CreateServer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServer", varargs...)
	ret0, _ := ret[0].(*response.CreateServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer
func (mr *MockInfraProxyServiceClientMockRecorder) CreateServer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).CreateServer), varargs...)
}

// DeleteServer mocks base method
func (m *MockInfraProxyServiceClient) DeleteServer(ctx context.Context, in *request.DeleteServer, opts ...grpc.CallOption) (*response.DeleteServer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServer", varargs...)
	ret0, _ := ret[0].(*response.DeleteServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServer indicates an expected call of DeleteServer
func (mr *MockInfraProxyServiceClientMockRecorder) DeleteServer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).DeleteServer), varargs...)
}

// UpdateServer mocks base method
func (m *MockInfraProxyServiceClient) UpdateServer(ctx context.Context, in *request.UpdateServer, opts ...grpc.CallOption) (*response.UpdateServer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServer", varargs...)
	ret0, _ := ret[0].(*response.UpdateServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServer indicates an expected call of UpdateServer
func (mr *MockInfraProxyServiceClientMockRecorder) UpdateServer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).UpdateServer), varargs...)
}

// GetServers mocks base method
func (m *MockInfraProxyServiceClient) GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServers", varargs...)
	ret0, _ := ret[0].(*response.GetServers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServers indicates an expected call of GetServers
func (mr *MockInfraProxyServiceClientMockRecorder) GetServers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetServers), varargs...)
}

// GetServer mocks base method
func (m *MockInfraProxyServiceClient) GetServer(ctx context.Context, in *request.GetServer, opts ...grpc.CallOption) (*response.GetServer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServer", varargs...)
	ret0, _ := ret[0].(*response.GetServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer
func (mr *MockInfraProxyServiceClientMockRecorder) GetServer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetServer), varargs...)
}

// GetServerStatus mocks base method
func (m *MockInfraProxyServiceClient) GetServerStatus(ctx context.Context, in *request.GetServerStatus, opts ...grpc.CallOption) (*response.GetServerStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServerStatus", varargs...)
	ret0, _ := ret[0].(*response.GetServerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerStatus indicates an expected call of GetServerStatus
func (mr *MockInfraProxyServiceClientMockRecorder) GetServerStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerStatus", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetServerStatus), varargs...)
}

// CreateOrg mocks base method
func (m *MockInfraProxyServiceClient) CreateOrg(ctx context.Context, in *request.CreateOrg, opts ...grpc.CallOption) (*response.CreateOrg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrg", varargs...)
	ret0, _ := ret[0].(*response.CreateOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrg indicates an expected call of CreateOrg
func (mr *MockInfraProxyServiceClientMockRecorder) CreateOrg(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrg", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).CreateOrg), varargs...)
}

// DeleteOrg mocks base method
func (m *MockInfraProxyServiceClient) DeleteOrg(ctx context.Context, in *request.DeleteOrg, opts ...grpc.CallOption) (*response.DeleteOrg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrg", varargs...)
	ret0, _ := ret[0].(*response.DeleteOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrg indicates an expected call of DeleteOrg
func (mr *MockInfraProxyServiceClientMockRecorder) DeleteOrg(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrg", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).DeleteOrg), varargs...)
}

// UpdateOrg mocks base method
func (m *MockInfraProxyServiceClient) UpdateOrg(ctx context.Context, in *request.UpdateOrg, opts ...grpc.CallOption) (*response.UpdateOrg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrg", varargs...)
	ret0, _ := ret[0].(*response.UpdateOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrg indicates an expected call of UpdateOrg
func (mr *MockInfraProxyServiceClientMockRecorder) UpdateOrg(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrg", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).UpdateOrg), varargs...)
}

// GetOrgs mocks base method
func (m *MockInfraProxyServiceClient) GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrgs", varargs...)
	ret0, _ := ret[0].(*response.GetOrgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgs indicates an expected call of GetOrgs
func (mr *MockInfraProxyServiceClientMockRecorder) GetOrgs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgs", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetOrgs), varargs...)
}

// GetOrg mocks base method
func (m *MockInfraProxyServiceClient) GetOrg(ctx context.Context, in *request.GetOrg, opts ...grpc.CallOption) (*response.GetOrg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrg", varargs...)
	ret0, _ := ret[0].(*response.GetOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg
func (mr *MockInfraProxyServiceClientMockRecorder) GetOrg(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetOrg), varargs...)
}

// ResetOrgAdminKey mocks base method
func (m *MockInfraProxyServiceClient) ResetOrgAdminKey(ctx context.Context, in *request.ResetOrgAdminKey, opts ...grpc.CallOption) (*response.ResetOrgAdminKey, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetOrgAdminKey", varargs...)
	ret0, _ := ret[0].(*response.ResetOrgAdminKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetOrgAdminKey indicates an expected call of ResetOrgAdminKey
func (mr *MockInfraProxyServiceClientMockRecorder) ResetOrgAdminKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetOrgAdminKey", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).ResetOrgAdminKey), varargs...)
}

// GetInfraServerOrgs mocks base method
func (m *MockInfraProxyServiceClient) GetInfraServerOrgs(ctx context.Context, in *request.GetInfraServerOrgs, opts ...grpc.CallOption) (*response.GetInfraServerOrgs, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInfraServerOrgs", varargs...)
	ret0, _ := ret[0].(*response.GetInfraServerOrgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfraServerOrgs indicates an expected call of GetInfraServerOrgs
func (mr *MockInfraProxyServiceClientMockRecorder) GetInfraServerOrgs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfraServerOrgs", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetInfraServerOrgs), varargs...)
}

// GetCookbooks mocks base method
func (m *MockInfraProxyServiceClient) GetCookbooks(ctx context.Context, in *request.Cookbooks, opts ...grpc.CallOption) (*response.Cookbooks, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCookbooks", varargs...)
	ret0, _ := ret[0].(*response.Cookbooks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookbooks indicates an expected call of GetCookbooks
func (mr *MockInfraProxyServiceClientMockRecorder) GetCookbooks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookbooks", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetCookbooks), varargs...)
}

// GetCookbookVersions mocks base method
func (m *MockInfraProxyServiceClient) GetCookbookVersions(ctx context.Context, in *request.CookbookVersions, opts ...grpc.CallOption) (*response.CookbookVersions, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCookbookVersions", varargs...)
	ret0, _ := ret[0].(*response.CookbookVersions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookbookVersions indicates an expected call of GetCookbookVersions
func (mr *MockInfraProxyServiceClientMockRecorder) GetCookbookVersions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookbookVersions", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetCookbookVersions), varargs...)
}

// GetCookbook mocks base method
func (m *MockInfraProxyServiceClient) GetCookbook(ctx context.Context, in *request.Cookbook, opts ...grpc.CallOption) (*response.Cookbook, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCookbook", varargs...)
	ret0, _ := ret[0].(*response.Cookbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookbook indicates an expected call of GetCookbook
func (mr *MockInfraProxyServiceClientMockRecorder) GetCookbook(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookbook", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetCookbook), varargs...)
}

// GetCookbookFileContent mocks base method
func (m *MockInfraProxyServiceClient) GetCookbookFileContent(ctx context.Context, in *request.CookbookFileContent, opts ...grpc.CallOption) (*response.CookbookFileContent, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCookbookFileContent", varargs...)
	ret0, _ := ret[0].(*response.CookbookFileContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookbookFileContent indicates an expected call of GetCookbookFileContent
func (mr *MockInfraProxyServiceClientMockRecorder) GetCookbookFileContent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookbookFileContent", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetCookbookFileContent), varargs...)
}

// GetRoles mocks base method
func (m *MockInfraProxyServiceClient) GetRoles(ctx context.Context, in *request.Roles, opts ...grpc.CallOption) (*response.Roles, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoles", varargs...)
	ret0, _ := ret[0].(*response.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles
func (mr *MockInfraProxyServiceClientMockRecorder) GetRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetRoles), varargs...)
}

// GetRole mocks base method
func (m *MockInfraProxyServiceClient) GetRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRole", varargs...)
	ret0, _ := ret[0].(*response.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole
func (mr *MockInfraProxyServiceClientMockRecorder) GetRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetRole), varargs...)
}

// GetRoleExpandedRunList mocks base method
func (m *MockInfraProxyServiceClient) GetRoleExpandedRunList(ctx context.Context, in *request.ExpandedRunList, opts ...grpc.CallOption) (*response.ExpandedRunList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoleExpandedRunList", varargs...)
	ret0, _ := ret[0].(*response.ExpandedRunList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleExpandedRunList indicates an expected call of GetRoleExpandedRunList
func (mr *MockInfraProxyServiceClientMockRecorder) GetRoleExpandedRunList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleExpandedRunList", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetRoleExpandedRunList), varargs...)
}

// GetRoleEnvironments mocks base method
func (m *MockInfraProxyServiceClient) GetRoleEnvironments(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.RoleEnvironments, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoleEnvironments", varargs...)
	ret0, _ := ret[0].(*response.RoleEnvironments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleEnvironments indicates an expected call of GetRoleEnvironments
func (mr *MockInfraProxyServiceClientMockRecorder) GetRoleEnvironments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleEnvironments", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetRoleEnvironments), varargs...)
}

// CreateRole mocks base method
func (m *MockInfraProxyServiceClient) CreateRole(ctx context.Context, in *request.CreateRole, opts ...grpc.CallOption) (*response.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRole", varargs...)
	ret0, _ := ret[0].(*response.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockInfraProxyServiceClientMockRecorder) CreateRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).CreateRole), varargs...)
}

// DeleteRole mocks base method
func (m *MockInfraProxyServiceClient) DeleteRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRole", varargs...)
	ret0, _ := ret[0].(*response.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockInfraProxyServiceClientMockRecorder) DeleteRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).DeleteRole), varargs...)
}

// UpdateRole mocks base method
func (m *MockInfraProxyServiceClient) UpdateRole(ctx context.Context, in *request.UpdateRole, opts ...grpc.CallOption) (*response.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRole", varargs...)
	ret0, _ := ret[0].(*response.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockInfraProxyServiceClientMockRecorder) UpdateRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).UpdateRole), varargs...)
}

// GetClients mocks base method
func (m *MockInfraProxyServiceClient) GetClients(ctx context.Context, in *request.Clients, opts ...grpc.CallOption) (*response.Clients, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClients", varargs...)
	ret0, _ := ret[0].(*response.Clients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients
func (mr *MockInfraProxyServiceClientMockRecorder) GetClients(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetClients), varargs...)
}

// GetClient mocks base method
func (m *MockInfraProxyServiceClient) GetClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClient", varargs...)
	ret0, _ := ret[0].(*response.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient
func (mr *MockInfraProxyServiceClientMockRecorder) GetClient(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetClient), varargs...)
}

// CreateClient mocks base method
func (m *MockInfraProxyServiceClient) CreateClient(ctx context.Context, in *request.CreateClient, opts ...grpc.CallOption) (*response.CreateClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClient", varargs...)
	ret0, _ := ret[0].(*response.CreateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient
func (mr *MockInfraProxyServiceClientMockRecorder) CreateClient(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).CreateClient), varargs...)
}

// DeleteClient mocks base method
func (m *MockInfraProxyServiceClient) DeleteClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClient", varargs...)
	ret0, _ := ret[0].(*response.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClient indicates an expected call of DeleteClient
func (mr *MockInfraProxyServiceClientMockRecorder) DeleteClient(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).DeleteClient), varargs...)
}

// ResetClientKey mocks base method
func (m *MockInfraProxyServiceClient) ResetClientKey(ctx context.Context, in *request.ClientKey, opts ...grpc.CallOption) (*response.ResetClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetClientKey", varargs...)
	ret0, _ := ret[0].(*response.ResetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetClientKey indicates an expected call of ResetClientKey
func (mr *MockInfraProxyServiceClientMockRecorder) ResetClientKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetClientKey", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).ResetClientKey), varargs...)
}

// GetDataBags mocks base method
func (m *MockInfraProxyServiceClient) GetDataBags(ctx context.Context, in *request.DataBags, opts ...grpc.CallOption) (*response.DataBags, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataBags", varargs...)
	ret0, _ := ret[0].(*response.DataBags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataBags indicates an expected call of GetDataBags
func (mr *MockInfraProxyServiceClientMockRecorder) GetDataBags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataBags", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetDataBags), varargs...)
}

// GetDataBagItems mocks base method
func (m *MockInfraProxyServiceClient) GetDataBagItems(ctx context.Context, in *request.DataBagItems, opts ...grpc.CallOption) (*response.DataBagItems, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataBagItems", varargs...)
	ret0, _ := ret[0].(*response.DataBagItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataBagItems indicates an expected call of GetDataBagItems
func (mr *MockInfraProxyServiceClientMockRecorder) GetDataBagItems(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataBagItems", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetDataBagItems), varargs...)
}

// GetDataBagItem mocks base method
func (m *MockInfraProxyServiceClient) GetDataBagItem(ctx context.Context, in *request.DataBagItem, opts ...grpc.CallOption) (*response.DataBagItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataBagItem", varargs...)
	ret0, _ := ret[0].(*response.DataBagItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataBagItem indicates an expected call of GetDataBagItem
func (mr *MockInfraProxyServiceClientMockRecorder) GetDataBagItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataBagItem", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetDataBagItem), varargs...)
}

// CreateDataBag mocks base method
func (m *MockInfraProxyServiceClient) CreateDataBag(ctx context.Context, in *request.CreateDataBag, opts ...grpc.CallOption) (*response.CreateDataBag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataBag", varargs...)
	ret0, _ := ret[0].(*response.CreateDataBag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataBag indicates an expected call of CreateDataBag
func (mr *MockInfraProxyServiceClientMockRecorder) CreateDataBag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataBag", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).CreateDataBag), varargs...)
}

// CreateDataBagItem mocks base method
func (m *MockInfraProxyServiceClient) CreateDataBagItem(ctx context.Context, in *request.CreateDataBagItem, opts ...grpc.CallOption) (*response.CreateDataBagItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataBagItem", varargs...)
	ret0, _ := ret[0].(*response.CreateDataBagItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataBagItem indicates an expected call of CreateDataBagItem
func (mr *MockInfraProxyServiceClientMockRecorder) CreateDataBagItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataBagItem", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).CreateDataBagItem), varargs...)
}

// DeleteDataBag mocks base method
func (m *MockInfraProxyServiceClient) DeleteDataBag(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataBag", varargs...)
	ret0, _ := ret[0].(*response.DataBag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataBag indicates an expected call of DeleteDataBag
func (mr *MockInfraProxyServiceClientMockRecorder) DeleteDataBag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataBag", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).DeleteDataBag), varargs...)
}

// DeleteDataBagItem mocks base method
func (m *MockInfraProxyServiceClient) DeleteDataBagItem(ctx context.Context, in *request.DataBagItem, opts ...grpc.CallOption) (*response.DataBagItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataBagItem", varargs...)
	ret0, _ := ret[0].(*response.DataBagItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataBagItem indicates an expected call of DeleteDataBagItem
func (mr *MockInfraProxyServiceClientMockRecorder) DeleteDataBagItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataBagItem", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).DeleteDataBagItem), varargs...)
}

// UpdateDataBagItem mocks base method
func (m *MockInfraProxyServiceClient) UpdateDataBagItem(ctx context.Context, in *request.UpdateDataBagItem, opts ...grpc.CallOption) (*response.UpdateDataBagItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataBagItem", varargs...)
	ret0, _ := ret[0].(*response.UpdateDataBagItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataBagItem indicates an expected call of UpdateDataBagItem
func (mr *MockInfraProxyServiceClientMockRecorder) UpdateDataBagItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataBagItem", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).UpdateDataBagItem), varargs...)
}

// GetEnvironments mocks base method
func (m *MockInfraProxyServiceClient) GetEnvironments(ctx context.Context, in *request.Environments, opts ...grpc.CallOption) (*response.Environments, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironments", varargs...)
	ret0, _ := ret[0].(*response.Environments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironments indicates an expected call of GetEnvironments
func (mr *MockInfraProxyServiceClientMockRecorder) GetEnvironments(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironments", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetEnvironments), varargs...)
}

// GetEnvironment mocks base method
func (m *MockInfraProxyServiceClient) GetEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironment", varargs...)
	ret0, _ := ret[0].(*response.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockInfraProxyServiceClientMockRecorder) GetEnvironment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetEnvironment), varargs...)
}

// CreateEnvironment mocks base method
func (m *MockInfraProxyServiceClient) CreateEnvironment(ctx context.Context, in *request.CreateEnvironment, opts ...grpc.CallOption) (*response.Environment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironment", varargs...)
	ret0, _ := ret[0].(*response.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockInfraProxyServiceClientMockRecorder) CreateEnvironment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).CreateEnvironment), varargs...)
}

// UpdateEnvironment mocks base method
func (m *MockInfraProxyServiceClient) UpdateEnvironment(ctx context.Context, in *request.UpdateEnvironment, opts ...grpc.CallOption) (*response.Environment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEnvironment", varargs...)
	ret0, _ := ret[0].(*response.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockInfraProxyServiceClientMockRecorder) UpdateEnvironment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).UpdateEnvironment), varargs...)
}

// DeleteEnvironment mocks base method
func (m *MockInfraProxyServiceClient) DeleteEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironment", varargs...)
	ret0, _ := ret[0].(*response.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockInfraProxyServiceClientMockRecorder) DeleteEnvironment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).DeleteEnvironment), varargs...)
}

// GetEnvironmentRecipes mocks base method
func (m *MockInfraProxyServiceClient) GetEnvironmentRecipes(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.EnvironmentRecipesList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironmentRecipes", varargs...)
	ret0, _ := ret[0].(*response.EnvironmentRecipesList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentRecipes indicates an expected call of GetEnvironmentRecipes
func (mr *MockInfraProxyServiceClientMockRecorder) GetEnvironmentRecipes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentRecipes", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetEnvironmentRecipes), varargs...)
}

// GetNodes mocks base method
func (m *MockInfraProxyServiceClient) GetNodes(ctx context.Context, in *request.Nodes, opts ...grpc.CallOption) (*response.Nodes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodes", varargs...)
	ret0, _ := ret[0].(*response.Nodes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockInfraProxyServiceClientMockRecorder) GetNodes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetNodes), varargs...)
}

// GetNode mocks base method
func (m *MockInfraProxyServiceClient) GetNode(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.Node, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNode", varargs...)
	ret0, _ := ret[0].(*response.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode
func (mr *MockInfraProxyServiceClientMockRecorder) GetNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetNode), varargs...)
}

// GetNodeExpandedRunList mocks base method
func (m *MockInfraProxyServiceClient) GetNodeExpandedRunList(ctx context.Context, in *request.NodeExpandedRunList, opts ...grpc.CallOption) (*response.NodeExpandedRunList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeExpandedRunList", varargs...)
	ret0, _ := ret[0].(*response.NodeExpandedRunList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeExpandedRunList indicates an expected call of GetNodeExpandedRunList
func (mr *MockInfraProxyServiceClientMockRecorder) GetNodeExpandedRunList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeExpandedRunList", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetNodeExpandedRunList), varargs...)
}

// CreateNode mocks base method
func (m *MockInfraProxyServiceClient) CreateNode(ctx context.Context, in *request.NodeDetails, opts ...grpc.CallOption) (*response.Node, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNode", varargs...)
	ret0, _ := ret[0].(*response.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode
func (mr *MockInfraProxyServiceClientMockRecorder) CreateNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).CreateNode), varargs...)
}

// DeleteNode mocks base method
func (m *MockInfraProxyServiceClient) DeleteNode(ctx context.Context, in *request.Node, opts ...grpc.CallOption) (*response.DeleteNode, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNode", varargs...)
	ret0, _ := ret[0].(*response.DeleteNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNode indicates an expected call of DeleteNode
func (mr *MockInfraProxyServiceClientMockRecorder) DeleteNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).DeleteNode), varargs...)
}

// UpdateNode mocks base method
func (m *MockInfraProxyServiceClient) UpdateNode(ctx context.Context, in *request.NodeDetails, opts ...grpc.CallOption) (*response.Node, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNode", varargs...)
	ret0, _ := ret[0].(*response.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode
func (mr *MockInfraProxyServiceClientMockRecorder) UpdateNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).UpdateNode), varargs...)
}

// UpdateNodeTags mocks base method
func (m *MockInfraProxyServiceClient) UpdateNodeTags(ctx context.Context, in *request.UpdateNodeTags, opts ...grpc.CallOption) (*response.UpdateNodeTags, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNodeTags", varargs...)
	ret0, _ := ret[0].(*response.UpdateNodeTags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeTags indicates an expected call of UpdateNodeTags
func (mr *MockInfraProxyServiceClientMockRecorder) UpdateNodeTags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeTags", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).UpdateNodeTags), varargs...)
}

// UpdateNodeEnvironment mocks base method
func (m *MockInfraProxyServiceClient) UpdateNodeEnvironment(ctx context.Context, in *request.UpdateNodeEnvironment, opts ...grpc.CallOption) (*response.UpdateNodeEnvironment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNodeEnvironment", varargs...)
	ret0, _ := ret[0].(*response.UpdateNodeEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeEnvironment indicates an expected call of UpdateNodeEnvironment
func (mr *MockInfraProxyServiceClientMockRecorder) UpdateNodeEnvironment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeEnvironment", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).UpdateNodeEnvironment), varargs...)
}

// UpdateNodeAttributes mocks base method
func (m *MockInfraProxyServiceClient) UpdateNodeAttributes(ctx context.Context, in *request.UpdateNodeAttributes, opts ...grpc.CallOption) (*response.UpdateNodeAttributes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNodeAttributes", varargs...)
	ret0, _ := ret[0].(*response.UpdateNodeAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeAttributes indicates an expected call of UpdateNodeAttributes
func (mr *MockInfraProxyServiceClientMockRecorder) UpdateNodeAttributes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeAttributes", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).UpdateNodeAttributes), varargs...)
}

// GetPolicyfiles mocks base method
func (m *MockInfraProxyServiceClient) GetPolicyfiles(ctx context.Context, in *request.Policyfiles, opts ...grpc.CallOption) (*response.Policyfiles, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyfiles", varargs...)
	ret0, _ := ret[0].(*response.Policyfiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyfiles indicates an expected call of GetPolicyfiles
func (mr *MockInfraProxyServiceClientMockRecorder) GetPolicyfiles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyfiles", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetPolicyfiles), varargs...)
}

// GetPolicyfile mocks base method
func (m *MockInfraProxyServiceClient) GetPolicyfile(ctx context.Context, in *request.Policyfile, opts ...grpc.CallOption) (*response.Policyfile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyfile", varargs...)
	ret0, _ := ret[0].(*response.Policyfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyfile indicates an expected call of GetPolicyfile
func (mr *MockInfraProxyServiceClientMockRecorder) GetPolicyfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyfile", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetPolicyfile), varargs...)
}

// DeletePolicyfile mocks base method
func (m *MockInfraProxyServiceClient) DeletePolicyfile(ctx context.Context, in *request.DeletePolicyfile, opts ...grpc.CallOption) (*response.DeletePolicyfile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicyfile", varargs...)
	ret0, _ := ret[0].(*response.DeletePolicyfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyfile indicates an expected call of DeletePolicyfile
func (mr *MockInfraProxyServiceClientMockRecorder) DeletePolicyfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyfile", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).DeletePolicyfile), varargs...)
}

// GetPolicyfileRevisions mocks base method
func (m *MockInfraProxyServiceClient) GetPolicyfileRevisions(ctx context.Context, in *request.PolicyfileRevisions, opts ...grpc.CallOption) (*response.PolicyfileRevisions, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyfileRevisions", varargs...)
	ret0, _ := ret[0].(*response.PolicyfileRevisions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyfileRevisions indicates an expected call of GetPolicyfileRevisions
func (mr *MockInfraProxyServiceClientMockRecorder) GetPolicyfileRevisions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyfileRevisions", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetPolicyfileRevisions), varargs...)
}

// GetPolicygroup mocks base method
func (m *MockInfraProxyServiceClient) GetPolicygroup(ctx context.Context, in *request.Policygroup, opts ...grpc.CallOption) (*response.Policygroup, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicygroup", varargs...)
	ret0, _ := ret[0].(*response.Policygroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicygroup indicates an expected call of GetPolicygroup
func (mr *MockInfraProxyServiceClientMockRecorder) GetPolicygroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicygroup", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetPolicygroup), varargs...)
}

// GetOrgUsersList mocks base method
func (m *MockInfraProxyServiceClient) GetOrgUsersList(ctx context.Context, in *request.OrgUsers, opts ...grpc.CallOption) (*response.OrgUsers, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrgUsersList", varargs...)
	ret0, _ := ret[0].(*response.OrgUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgUsersList indicates an expected call of GetOrgUsersList
func (mr *MockInfraProxyServiceClientMockRecorder) GetOrgUsersList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgUsersList", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetOrgUsersList), varargs...)
}

// GetServerUsersList mocks base method
func (m *MockInfraProxyServiceClient) GetServerUsersList(ctx context.Context, in *request.ServerUsers, opts ...grpc.CallOption) (*response.ServerUsers, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServerUsersList", varargs...)
	ret0, _ := ret[0].(*response.ServerUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerUsersList indicates an expected call of GetServerUsersList
func (mr *MockInfraProxyServiceClientMockRecorder) GetServerUsersList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerUsersList", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetServerUsersList), varargs...)
}

// GetAutomateInfraServerUsersList mocks base method
func (m *MockInfraProxyServiceClient) GetAutomateInfraServerUsersList(ctx context.Context, in *request.AutomateInfraServerUsers, opts ...grpc.CallOption) (*response.AutomateInfraServerUsers, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAutomateInfraServerUsersList", varargs...)
	ret0, _ := ret[0].(*response.AutomateInfraServerUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomateInfraServerUsersList indicates an expected call of GetAutomateInfraServerUsersList
func (mr *MockInfraProxyServiceClientMockRecorder) GetAutomateInfraServerUsersList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomateInfraServerUsersList", reflect.TypeOf((*MockInfraProxyServiceClient)(nil).GetAutomateInfraServerUsersList), varargs...)
}

// MockInfraProxyServiceServer is a mock of InfraProxyServiceServer interface
type MockInfraProxyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInfraProxyServiceServerMockRecorder
}

// MockInfraProxyServiceServerMockRecorder is the mock recorder for MockInfraProxyServiceServer
type MockInfraProxyServiceServerMockRecorder struct {
	mock *MockInfraProxyServiceServer
}

// NewMockInfraProxyServiceServer creates a new mock instance
func NewMockInfraProxyServiceServer(ctrl *gomock.Controller) *MockInfraProxyServiceServer {
	mock := &MockInfraProxyServiceServer{ctrl: ctrl}
	mock.recorder = &MockInfraProxyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInfraProxyServiceServer) EXPECT() *MockInfraProxyServiceServerMockRecorder {
	return m.recorder
}

// CreateServer mocks base method
func (m *MockInfraProxyServiceServer) CreateServer(arg0 context.Context, arg1 *request.CreateServer) (*response.CreateServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", arg0, arg1)
	ret0, _ := ret[0].(*response.CreateServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer
func (mr *MockInfraProxyServiceServerMockRecorder) CreateServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).CreateServer), arg0, arg1)
}

// DeleteServer mocks base method
func (m *MockInfraProxyServiceServer) DeleteServer(arg0 context.Context, arg1 *request.DeleteServer) (*response.DeleteServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", arg0, arg1)
	ret0, _ := ret[0].(*response.DeleteServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServer indicates an expected call of DeleteServer
func (mr *MockInfraProxyServiceServerMockRecorder) DeleteServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).DeleteServer), arg0, arg1)
}

// UpdateServer mocks base method
func (m *MockInfraProxyServiceServer) UpdateServer(arg0 context.Context, arg1 *request.UpdateServer) (*response.UpdateServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", arg0, arg1)
	ret0, _ := ret[0].(*response.UpdateServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServer indicates an expected call of UpdateServer
func (mr *MockInfraProxyServiceServerMockRecorder) UpdateServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).UpdateServer), arg0, arg1)
}

// GetServers mocks base method
func (m *MockInfraProxyServiceServer) GetServers(arg0 context.Context, arg1 *request.GetServers) (*response.GetServers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServers", arg0, arg1)
	ret0, _ := ret[0].(*response.GetServers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServers indicates an expected call of GetServers
func (mr *MockInfraProxyServiceServerMockRecorder) GetServers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetServers), arg0, arg1)
}

// GetServer mocks base method
func (m *MockInfraProxyServiceServer) GetServer(arg0 context.Context, arg1 *request.GetServer) (*response.GetServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", arg0, arg1)
	ret0, _ := ret[0].(*response.GetServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer
func (mr *MockInfraProxyServiceServerMockRecorder) GetServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetServer), arg0, arg1)
}

// GetServerStatus mocks base method
func (m *MockInfraProxyServiceServer) GetServerStatus(arg0 context.Context, arg1 *request.GetServerStatus) (*response.GetServerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerStatus", arg0, arg1)
	ret0, _ := ret[0].(*response.GetServerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerStatus indicates an expected call of GetServerStatus
func (mr *MockInfraProxyServiceServerMockRecorder) GetServerStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerStatus", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetServerStatus), arg0, arg1)
}

// CreateOrg mocks base method
func (m *MockInfraProxyServiceServer) CreateOrg(arg0 context.Context, arg1 *request.CreateOrg) (*response.CreateOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrg", arg0, arg1)
	ret0, _ := ret[0].(*response.CreateOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrg indicates an expected call of CreateOrg
func (mr *MockInfraProxyServiceServerMockRecorder) CreateOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrg", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).CreateOrg), arg0, arg1)
}

// DeleteOrg mocks base method
func (m *MockInfraProxyServiceServer) DeleteOrg(arg0 context.Context, arg1 *request.DeleteOrg) (*response.DeleteOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrg", arg0, arg1)
	ret0, _ := ret[0].(*response.DeleteOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrg indicates an expected call of DeleteOrg
func (mr *MockInfraProxyServiceServerMockRecorder) DeleteOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrg", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).DeleteOrg), arg0, arg1)
}

// UpdateOrg mocks base method
func (m *MockInfraProxyServiceServer) UpdateOrg(arg0 context.Context, arg1 *request.UpdateOrg) (*response.UpdateOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrg", arg0, arg1)
	ret0, _ := ret[0].(*response.UpdateOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrg indicates an expected call of UpdateOrg
func (mr *MockInfraProxyServiceServerMockRecorder) UpdateOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrg", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).UpdateOrg), arg0, arg1)
}

// GetOrgs mocks base method
func (m *MockInfraProxyServiceServer) GetOrgs(arg0 context.Context, arg1 *request.GetOrgs) (*response.GetOrgs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgs", arg0, arg1)
	ret0, _ := ret[0].(*response.GetOrgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgs indicates an expected call of GetOrgs
func (mr *MockInfraProxyServiceServerMockRecorder) GetOrgs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgs", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetOrgs), arg0, arg1)
}

// GetOrg mocks base method
func (m *MockInfraProxyServiceServer) GetOrg(arg0 context.Context, arg1 *request.GetOrg) (*response.GetOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg", arg0, arg1)
	ret0, _ := ret[0].(*response.GetOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg
func (mr *MockInfraProxyServiceServerMockRecorder) GetOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetOrg), arg0, arg1)
}

// ResetOrgAdminKey mocks base method
func (m *MockInfraProxyServiceServer) ResetOrgAdminKey(arg0 context.Context, arg1 *request.ResetOrgAdminKey) (*response.ResetOrgAdminKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetOrgAdminKey", arg0, arg1)
	ret0, _ := ret[0].(*response.ResetOrgAdminKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetOrgAdminKey indicates an expected call of ResetOrgAdminKey
func (mr *MockInfraProxyServiceServerMockRecorder) ResetOrgAdminKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetOrgAdminKey", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).ResetOrgAdminKey), arg0, arg1)
}

// GetInfraServerOrgs mocks base method
func (m *MockInfraProxyServiceServer) GetInfraServerOrgs(arg0 context.Context, arg1 *request.GetInfraServerOrgs) (*response.GetInfraServerOrgs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfraServerOrgs", arg0, arg1)
	ret0, _ := ret[0].(*response.GetInfraServerOrgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfraServerOrgs indicates an expected call of GetInfraServerOrgs
func (mr *MockInfraProxyServiceServerMockRecorder) GetInfraServerOrgs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfraServerOrgs", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetInfraServerOrgs), arg0, arg1)
}

// GetCookbooks mocks base method
func (m *MockInfraProxyServiceServer) GetCookbooks(arg0 context.Context, arg1 *request.Cookbooks) (*response.Cookbooks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookbooks", arg0, arg1)
	ret0, _ := ret[0].(*response.Cookbooks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookbooks indicates an expected call of GetCookbooks
func (mr *MockInfraProxyServiceServerMockRecorder) GetCookbooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookbooks", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetCookbooks), arg0, arg1)
}

// GetCookbookVersions mocks base method
func (m *MockInfraProxyServiceServer) GetCookbookVersions(arg0 context.Context, arg1 *request.CookbookVersions) (*response.CookbookVersions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookbookVersions", arg0, arg1)
	ret0, _ := ret[0].(*response.CookbookVersions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookbookVersions indicates an expected call of GetCookbookVersions
func (mr *MockInfraProxyServiceServerMockRecorder) GetCookbookVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookbookVersions", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetCookbookVersions), arg0, arg1)
}

// GetCookbook mocks base method
func (m *MockInfraProxyServiceServer) GetCookbook(arg0 context.Context, arg1 *request.Cookbook) (*response.Cookbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookbook", arg0, arg1)
	ret0, _ := ret[0].(*response.Cookbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookbook indicates an expected call of GetCookbook
func (mr *MockInfraProxyServiceServerMockRecorder) GetCookbook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookbook", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetCookbook), arg0, arg1)
}

// GetCookbookFileContent mocks base method
func (m *MockInfraProxyServiceServer) GetCookbookFileContent(arg0 context.Context, arg1 *request.CookbookFileContent) (*response.CookbookFileContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookbookFileContent", arg0, arg1)
	ret0, _ := ret[0].(*response.CookbookFileContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCookbookFileContent indicates an expected call of GetCookbookFileContent
func (mr *MockInfraProxyServiceServerMockRecorder) GetCookbookFileContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookbookFileContent", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetCookbookFileContent), arg0, arg1)
}

// GetRoles mocks base method
func (m *MockInfraProxyServiceServer) GetRoles(arg0 context.Context, arg1 *request.Roles) (*response.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", arg0, arg1)
	ret0, _ := ret[0].(*response.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles
func (mr *MockInfraProxyServiceServerMockRecorder) GetRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetRoles), arg0, arg1)
}

// GetRole mocks base method
func (m *MockInfraProxyServiceServer) GetRole(arg0 context.Context, arg1 *request.Role) (*response.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(*response.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole
func (mr *MockInfraProxyServiceServerMockRecorder) GetRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetRole), arg0, arg1)
}

// GetRoleExpandedRunList mocks base method
func (m *MockInfraProxyServiceServer) GetRoleExpandedRunList(arg0 context.Context, arg1 *request.ExpandedRunList) (*response.ExpandedRunList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleExpandedRunList", arg0, arg1)
	ret0, _ := ret[0].(*response.ExpandedRunList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleExpandedRunList indicates an expected call of GetRoleExpandedRunList
func (mr *MockInfraProxyServiceServerMockRecorder) GetRoleExpandedRunList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleExpandedRunList", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetRoleExpandedRunList), arg0, arg1)
}

// GetRoleEnvironments mocks base method
func (m *MockInfraProxyServiceServer) GetRoleEnvironments(arg0 context.Context, arg1 *request.Role) (*response.RoleEnvironments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleEnvironments", arg0, arg1)
	ret0, _ := ret[0].(*response.RoleEnvironments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleEnvironments indicates an expected call of GetRoleEnvironments
func (mr *MockInfraProxyServiceServerMockRecorder) GetRoleEnvironments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleEnvironments", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetRoleEnvironments), arg0, arg1)
}

// CreateRole mocks base method
func (m *MockInfraProxyServiceServer) CreateRole(arg0 context.Context, arg1 *request.CreateRole) (*response.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(*response.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockInfraProxyServiceServerMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).CreateRole), arg0, arg1)
}

// DeleteRole mocks base method
func (m *MockInfraProxyServiceServer) DeleteRole(arg0 context.Context, arg1 *request.Role) (*response.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(*response.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockInfraProxyServiceServerMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).DeleteRole), arg0, arg1)
}

// UpdateRole mocks base method
func (m *MockInfraProxyServiceServer) UpdateRole(arg0 context.Context, arg1 *request.UpdateRole) (*response.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(*response.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockInfraProxyServiceServerMockRecorder) UpdateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).UpdateRole), arg0, arg1)
}

// GetClients mocks base method
func (m *MockInfraProxyServiceServer) GetClients(arg0 context.Context, arg1 *request.Clients) (*response.Clients, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", arg0, arg1)
	ret0, _ := ret[0].(*response.Clients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients
func (mr *MockInfraProxyServiceServerMockRecorder) GetClients(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetClients), arg0, arg1)
}

// GetClient mocks base method
func (m *MockInfraProxyServiceServer) GetClient(arg0 context.Context, arg1 *request.Client) (*response.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0, arg1)
	ret0, _ := ret[0].(*response.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient
func (mr *MockInfraProxyServiceServerMockRecorder) GetClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetClient), arg0, arg1)
}

// CreateClient mocks base method
func (m *MockInfraProxyServiceServer) CreateClient(arg0 context.Context, arg1 *request.CreateClient) (*response.CreateClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0, arg1)
	ret0, _ := ret[0].(*response.CreateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient
func (mr *MockInfraProxyServiceServerMockRecorder) CreateClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).CreateClient), arg0, arg1)
}

// DeleteClient mocks base method
func (m *MockInfraProxyServiceServer) DeleteClient(arg0 context.Context, arg1 *request.Client) (*response.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", arg0, arg1)
	ret0, _ := ret[0].(*response.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClient indicates an expected call of DeleteClient
func (mr *MockInfraProxyServiceServerMockRecorder) DeleteClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).DeleteClient), arg0, arg1)
}

// ResetClientKey mocks base method
func (m *MockInfraProxyServiceServer) ResetClientKey(arg0 context.Context, arg1 *request.ClientKey) (*response.ResetClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetClientKey", arg0, arg1)
	ret0, _ := ret[0].(*response.ResetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetClientKey indicates an expected call of ResetClientKey
func (mr *MockInfraProxyServiceServerMockRecorder) ResetClientKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetClientKey", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).ResetClientKey), arg0, arg1)
}

// GetDataBags mocks base method
func (m *MockInfraProxyServiceServer) GetDataBags(arg0 context.Context, arg1 *request.DataBags) (*response.DataBags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataBags", arg0, arg1)
	ret0, _ := ret[0].(*response.DataBags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataBags indicates an expected call of GetDataBags
func (mr *MockInfraProxyServiceServerMockRecorder) GetDataBags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataBags", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetDataBags), arg0, arg1)
}

// GetDataBagItems mocks base method
func (m *MockInfraProxyServiceServer) GetDataBagItems(arg0 context.Context, arg1 *request.DataBagItems) (*response.DataBagItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataBagItems", arg0, arg1)
	ret0, _ := ret[0].(*response.DataBagItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataBagItems indicates an expected call of GetDataBagItems
func (mr *MockInfraProxyServiceServerMockRecorder) GetDataBagItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataBagItems", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetDataBagItems), arg0, arg1)
}

// GetDataBagItem mocks base method
func (m *MockInfraProxyServiceServer) GetDataBagItem(arg0 context.Context, arg1 *request.DataBagItem) (*response.DataBagItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataBagItem", arg0, arg1)
	ret0, _ := ret[0].(*response.DataBagItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataBagItem indicates an expected call of GetDataBagItem
func (mr *MockInfraProxyServiceServerMockRecorder) GetDataBagItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataBagItem", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetDataBagItem), arg0, arg1)
}

// CreateDataBag mocks base method
func (m *MockInfraProxyServiceServer) CreateDataBag(arg0 context.Context, arg1 *request.CreateDataBag) (*response.CreateDataBag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataBag", arg0, arg1)
	ret0, _ := ret[0].(*response.CreateDataBag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataBag indicates an expected call of CreateDataBag
func (mr *MockInfraProxyServiceServerMockRecorder) CreateDataBag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataBag", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).CreateDataBag), arg0, arg1)
}

// CreateDataBagItem mocks base method
func (m *MockInfraProxyServiceServer) CreateDataBagItem(arg0 context.Context, arg1 *request.CreateDataBagItem) (*response.CreateDataBagItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataBagItem", arg0, arg1)
	ret0, _ := ret[0].(*response.CreateDataBagItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataBagItem indicates an expected call of CreateDataBagItem
func (mr *MockInfraProxyServiceServerMockRecorder) CreateDataBagItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataBagItem", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).CreateDataBagItem), arg0, arg1)
}

// DeleteDataBag mocks base method
func (m *MockInfraProxyServiceServer) DeleteDataBag(arg0 context.Context, arg1 *request.DataBag) (*response.DataBag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataBag", arg0, arg1)
	ret0, _ := ret[0].(*response.DataBag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataBag indicates an expected call of DeleteDataBag
func (mr *MockInfraProxyServiceServerMockRecorder) DeleteDataBag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataBag", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).DeleteDataBag), arg0, arg1)
}

// DeleteDataBagItem mocks base method
func (m *MockInfraProxyServiceServer) DeleteDataBagItem(arg0 context.Context, arg1 *request.DataBagItem) (*response.DataBagItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataBagItem", arg0, arg1)
	ret0, _ := ret[0].(*response.DataBagItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataBagItem indicates an expected call of DeleteDataBagItem
func (mr *MockInfraProxyServiceServerMockRecorder) DeleteDataBagItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataBagItem", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).DeleteDataBagItem), arg0, arg1)
}

// UpdateDataBagItem mocks base method
func (m *MockInfraProxyServiceServer) UpdateDataBagItem(arg0 context.Context, arg1 *request.UpdateDataBagItem) (*response.UpdateDataBagItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataBagItem", arg0, arg1)
	ret0, _ := ret[0].(*response.UpdateDataBagItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataBagItem indicates an expected call of UpdateDataBagItem
func (mr *MockInfraProxyServiceServerMockRecorder) UpdateDataBagItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataBagItem", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).UpdateDataBagItem), arg0, arg1)
}

// GetEnvironments mocks base method
func (m *MockInfraProxyServiceServer) GetEnvironments(arg0 context.Context, arg1 *request.Environments) (*response.Environments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironments", arg0, arg1)
	ret0, _ := ret[0].(*response.Environments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironments indicates an expected call of GetEnvironments
func (mr *MockInfraProxyServiceServerMockRecorder) GetEnvironments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironments", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetEnvironments), arg0, arg1)
}

// GetEnvironment mocks base method
func (m *MockInfraProxyServiceServer) GetEnvironment(arg0 context.Context, arg1 *request.Environment) (*response.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*response.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockInfraProxyServiceServerMockRecorder) GetEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetEnvironment), arg0, arg1)
}

// CreateEnvironment mocks base method
func (m *MockInfraProxyServiceServer) CreateEnvironment(arg0 context.Context, arg1 *request.CreateEnvironment) (*response.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*response.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockInfraProxyServiceServerMockRecorder) CreateEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).CreateEnvironment), arg0, arg1)
}

// UpdateEnvironment mocks base method
func (m *MockInfraProxyServiceServer) UpdateEnvironment(arg0 context.Context, arg1 *request.UpdateEnvironment) (*response.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*response.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockInfraProxyServiceServerMockRecorder) UpdateEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).UpdateEnvironment), arg0, arg1)
}

// DeleteEnvironment mocks base method
func (m *MockInfraProxyServiceServer) DeleteEnvironment(arg0 context.Context, arg1 *request.Environment) (*response.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*response.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockInfraProxyServiceServerMockRecorder) DeleteEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).DeleteEnvironment), arg0, arg1)
}

// GetEnvironmentRecipes mocks base method
func (m *MockInfraProxyServiceServer) GetEnvironmentRecipes(arg0 context.Context, arg1 *request.Environment) (*response.EnvironmentRecipesList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentRecipes", arg0, arg1)
	ret0, _ := ret[0].(*response.EnvironmentRecipesList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentRecipes indicates an expected call of GetEnvironmentRecipes
func (mr *MockInfraProxyServiceServerMockRecorder) GetEnvironmentRecipes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentRecipes", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetEnvironmentRecipes), arg0, arg1)
}

// GetNodes mocks base method
func (m *MockInfraProxyServiceServer) GetNodes(arg0 context.Context, arg1 *request.Nodes) (*response.Nodes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", arg0, arg1)
	ret0, _ := ret[0].(*response.Nodes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockInfraProxyServiceServerMockRecorder) GetNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetNodes), arg0, arg1)
}

// GetNode mocks base method
func (m *MockInfraProxyServiceServer) GetNode(arg0 context.Context, arg1 *request.Node) (*response.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", arg0, arg1)
	ret0, _ := ret[0].(*response.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode
func (mr *MockInfraProxyServiceServerMockRecorder) GetNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetNode), arg0, arg1)
}

// GetNodeExpandedRunList mocks base method
func (m *MockInfraProxyServiceServer) GetNodeExpandedRunList(arg0 context.Context, arg1 *request.NodeExpandedRunList) (*response.NodeExpandedRunList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeExpandedRunList", arg0, arg1)
	ret0, _ := ret[0].(*response.NodeExpandedRunList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeExpandedRunList indicates an expected call of GetNodeExpandedRunList
func (mr *MockInfraProxyServiceServerMockRecorder) GetNodeExpandedRunList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeExpandedRunList", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetNodeExpandedRunList), arg0, arg1)
}

// CreateNode mocks base method
func (m *MockInfraProxyServiceServer) CreateNode(arg0 context.Context, arg1 *request.NodeDetails) (*response.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", arg0, arg1)
	ret0, _ := ret[0].(*response.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode
func (mr *MockInfraProxyServiceServerMockRecorder) CreateNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).CreateNode), arg0, arg1)
}

// DeleteNode mocks base method
func (m *MockInfraProxyServiceServer) DeleteNode(arg0 context.Context, arg1 *request.Node) (*response.DeleteNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", arg0, arg1)
	ret0, _ := ret[0].(*response.DeleteNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNode indicates an expected call of DeleteNode
func (mr *MockInfraProxyServiceServerMockRecorder) DeleteNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).DeleteNode), arg0, arg1)
}

// UpdateNode mocks base method
func (m *MockInfraProxyServiceServer) UpdateNode(arg0 context.Context, arg1 *request.NodeDetails) (*response.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", arg0, arg1)
	ret0, _ := ret[0].(*response.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode
func (mr *MockInfraProxyServiceServerMockRecorder) UpdateNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).UpdateNode), arg0, arg1)
}

// UpdateNodeTags mocks base method
func (m *MockInfraProxyServiceServer) UpdateNodeTags(arg0 context.Context, arg1 *request.UpdateNodeTags) (*response.UpdateNodeTags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeTags", arg0, arg1)
	ret0, _ := ret[0].(*response.UpdateNodeTags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeTags indicates an expected call of UpdateNodeTags
func (mr *MockInfraProxyServiceServerMockRecorder) UpdateNodeTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeTags", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).UpdateNodeTags), arg0, arg1)
}

// UpdateNodeEnvironment mocks base method
func (m *MockInfraProxyServiceServer) UpdateNodeEnvironment(arg0 context.Context, arg1 *request.UpdateNodeEnvironment) (*response.UpdateNodeEnvironment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*response.UpdateNodeEnvironment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeEnvironment indicates an expected call of UpdateNodeEnvironment
func (mr *MockInfraProxyServiceServerMockRecorder) UpdateNodeEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeEnvironment", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).UpdateNodeEnvironment), arg0, arg1)
}

// UpdateNodeAttributes mocks base method
func (m *MockInfraProxyServiceServer) UpdateNodeAttributes(arg0 context.Context, arg1 *request.UpdateNodeAttributes) (*response.UpdateNodeAttributes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeAttributes", arg0, arg1)
	ret0, _ := ret[0].(*response.UpdateNodeAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeAttributes indicates an expected call of UpdateNodeAttributes
func (mr *MockInfraProxyServiceServerMockRecorder) UpdateNodeAttributes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeAttributes", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).UpdateNodeAttributes), arg0, arg1)
}

// GetPolicyfiles mocks base method
func (m *MockInfraProxyServiceServer) GetPolicyfiles(arg0 context.Context, arg1 *request.Policyfiles) (*response.Policyfiles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyfiles", arg0, arg1)
	ret0, _ := ret[0].(*response.Policyfiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyfiles indicates an expected call of GetPolicyfiles
func (mr *MockInfraProxyServiceServerMockRecorder) GetPolicyfiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyfiles", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetPolicyfiles), arg0, arg1)
}

// GetPolicyfile mocks base method
func (m *MockInfraProxyServiceServer) GetPolicyfile(arg0 context.Context, arg1 *request.Policyfile) (*response.Policyfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyfile", arg0, arg1)
	ret0, _ := ret[0].(*response.Policyfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyfile indicates an expected call of GetPolicyfile
func (mr *MockInfraProxyServiceServerMockRecorder) GetPolicyfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyfile", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetPolicyfile), arg0, arg1)
}

// DeletePolicyfile mocks base method
func (m *MockInfraProxyServiceServer) DeletePolicyfile(arg0 context.Context, arg1 *request.DeletePolicyfile) (*response.DeletePolicyfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicyfile", arg0, arg1)
	ret0, _ := ret[0].(*response.DeletePolicyfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyfile indicates an expected call of DeletePolicyfile
func (mr *MockInfraProxyServiceServerMockRecorder) DeletePolicyfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyfile", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).DeletePolicyfile), arg0, arg1)
}

// GetPolicyfileRevisions mocks base method
func (m *MockInfraProxyServiceServer) GetPolicyfileRevisions(arg0 context.Context, arg1 *request.PolicyfileRevisions) (*response.PolicyfileRevisions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyfileRevisions", arg0, arg1)
	ret0, _ := ret[0].(*response.PolicyfileRevisions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyfileRevisions indicates an expected call of GetPolicyfileRevisions
func (mr *MockInfraProxyServiceServerMockRecorder) GetPolicyfileRevisions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyfileRevisions", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetPolicyfileRevisions), arg0, arg1)
}

// GetPolicygroup mocks base method
func (m *MockInfraProxyServiceServer) GetPolicygroup(arg0 context.Context, arg1 *request.Policygroup) (*response.Policygroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicygroup", arg0, arg1)
	ret0, _ := ret[0].(*response.Policygroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicygroup indicates an expected call of GetPolicygroup
func (mr *MockInfraProxyServiceServerMockRecorder) GetPolicygroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicygroup", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetPolicygroup), arg0, arg1)
}

// GetOrgUsersList mocks base method
func (m *MockInfraProxyServiceServer) GetOrgUsersList(arg0 context.Context, arg1 *request.OrgUsers) (*response.OrgUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgUsersList", arg0, arg1)
	ret0, _ := ret[0].(*response.OrgUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgUsersList indicates an expected call of GetOrgUsersList
func (mr *MockInfraProxyServiceServerMockRecorder) GetOrgUsersList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgUsersList", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetOrgUsersList), arg0, arg1)
}

// GetServerUsersList mocks base method
func (m *MockInfraProxyServiceServer) GetServerUsersList(arg0 context.Context, arg1 *request.ServerUsers) (*response.ServerUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerUsersList", arg0, arg1)
	ret0, _ := ret[0].(*response.ServerUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerUsersList indicates an expected call of GetServerUsersList
func (mr *MockInfraProxyServiceServerMockRecorder) GetServerUsersList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerUsersList", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetServerUsersList), arg0, arg1)
}

// GetAutomateInfraServerUsersList mocks base method
func (m *MockInfraProxyServiceServer) GetAutomateInfraServerUsersList(arg0 context.Context, arg1 *request.AutomateInfraServerUsers) (*response.AutomateInfraServerUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomateInfraServerUsersList", arg0, arg1)
	ret0, _ := ret[0].(*response.AutomateInfraServerUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomateInfraServerUsersList indicates an expected call of GetAutomateInfraServerUsersList
func (mr *MockInfraProxyServiceServerMockRecorder) GetAutomateInfraServerUsersList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomateInfraServerUsersList", reflect.TypeOf((*MockInfraProxyServiceServer)(nil).GetAutomateInfraServerUsersList), arg0, arg1)
}
