// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: interservice/infra_proxy/service/infra_proxy.proto

package service

import (
	context "context"
	version "github.com/chef/automate/api/external/common/version"
	request "github.com/chef/automate/api/interservice/infra_proxy/request"
	response "github.com/chef/automate/api/interservice/infra_proxy/response"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_interservice_infra_proxy_service_infra_proxy_proto protoreflect.FileDescriptor

var file_interservice_infra_proxy_service_infra_proxy_proto_rawDesc = []byte{
	0x0a, 0x32, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x25,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x6f, 0x72, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x30, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x6f,
	0x72, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6f,
	0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x86, 0x27, 0x0a, 0x0a, 0x49, 0x6e, 0x66,
	0x72, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x73, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x36, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x81, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x37, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x35, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x78, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x12, 0x33, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x1a, 0x34, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x12, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x22, 0x00, 0x12, 0x72, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x1a, 0x32, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x12, 0x30, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x1a, 0x31, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x00, 0x12,
	0x90, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x00, 0x12, 0x78, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f,
	0x6b, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6f,
	0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x2f, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x6f,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x2f, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x00, 0x12,
	0x75, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x34, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x72, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x31, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x78, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x73,
	0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x61, 0x67, 0x73, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x73, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67,
	0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x61, 0x67, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61,
	0x67, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x22, 0x00, 0x12, 0x90, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x1a, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00,
	0x12, 0x78, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61,
	0x67, 0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x61, 0x67, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x3c, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x00, 0x12, 0x84, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x36,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x37,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00,
	0x12, 0x7b, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x7e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_interservice_infra_proxy_service_infra_proxy_proto_goTypes = []interface{}{
	(*version.VersionInfoRequest)(nil),   // 0: chef.automate.api.common.version.VersionInfoRequest
	(*request.CreateServer)(nil),         // 1: chef.automate.domain.infra_proxy.request.CreateServer
	(*request.DeleteServer)(nil),         // 2: chef.automate.domain.infra_proxy.request.DeleteServer
	(*request.UpdateServer)(nil),         // 3: chef.automate.domain.infra_proxy.request.UpdateServer
	(*request.GetServers)(nil),           // 4: chef.automate.domain.infra_proxy.request.GetServers
	(*request.GetServer)(nil),            // 5: chef.automate.domain.infra_proxy.request.GetServer
	(*request.CreateOrg)(nil),            // 6: chef.automate.domain.infra_proxy.request.CreateOrg
	(*request.DeleteOrg)(nil),            // 7: chef.automate.domain.infra_proxy.request.DeleteOrg
	(*request.UpdateOrg)(nil),            // 8: chef.automate.domain.infra_proxy.request.UpdateOrg
	(*request.GetOrgs)(nil),              // 9: chef.automate.domain.infra_proxy.request.GetOrgs
	(*request.GetOrg)(nil),               // 10: chef.automate.domain.infra_proxy.request.GetOrg
	(*request.ResetOrgAdminKey)(nil),     // 11: chef.automate.domain.infra_proxy.request.ResetOrgAdminKey
	(*request.Cookbooks)(nil),            // 12: chef.automate.domain.infra_proxy.request.Cookbooks
	(*request.CookbookVersions)(nil),     // 13: chef.automate.domain.infra_proxy.request.CookbookVersions
	(*request.Cookbook)(nil),             // 14: chef.automate.domain.infra_proxy.request.Cookbook
	(*request.CookbookFileContent)(nil),  // 15: chef.automate.domain.infra_proxy.request.CookbookFileContent
	(*request.Roles)(nil),                // 16: chef.automate.domain.infra_proxy.request.Roles
	(*request.Role)(nil),                 // 17: chef.automate.domain.infra_proxy.request.Role
	(*request.CreateRole)(nil),           // 18: chef.automate.domain.infra_proxy.request.CreateRole
	(*request.UpdateRole)(nil),           // 19: chef.automate.domain.infra_proxy.request.UpdateRole
	(*request.Clients)(nil),              // 20: chef.automate.domain.infra_proxy.request.Clients
	(*request.Client)(nil),               // 21: chef.automate.domain.infra_proxy.request.Client
	(*request.DataBags)(nil),             // 22: chef.automate.domain.infra_proxy.request.DataBags
	(*request.DataBag)(nil),              // 23: chef.automate.domain.infra_proxy.request.DataBag
	(*request.CreateDataBag)(nil),        // 24: chef.automate.domain.infra_proxy.request.CreateDataBag
	(*request.CreateDataBagItem)(nil),    // 25: chef.automate.domain.infra_proxy.request.CreateDataBagItem
	(*request.UpdateDataBagItem)(nil),    // 26: chef.automate.domain.infra_proxy.request.UpdateDataBagItem
	(*request.Environments)(nil),         // 27: chef.automate.domain.infra_proxy.request.Environments
	(*request.Environment)(nil),          // 28: chef.automate.domain.infra_proxy.request.Environment
	(*request.CreateEnvironment)(nil),    // 29: chef.automate.domain.infra_proxy.request.CreateEnvironment
	(*request.UpdateEnvironment)(nil),    // 30: chef.automate.domain.infra_proxy.request.UpdateEnvironment
	(*request.AffectedNodes)(nil),        // 31: chef.automate.domain.infra_proxy.request.AffectedNodes
	(*request.DeleteNode)(nil),           // 32: chef.automate.domain.infra_proxy.request.DeleteNode
	(*request.UpdateNode)(nil),           // 33: chef.automate.domain.infra_proxy.request.UpdateNode
	(*request.Policyfiles)(nil),          // 34: chef.automate.domain.infra_proxy.request.Policyfiles
	(*request.Policyfile)(nil),           // 35: chef.automate.domain.infra_proxy.request.Policyfile
	(*version.VersionInfo)(nil),          // 36: chef.automate.api.common.version.VersionInfo
	(*response.CreateServer)(nil),        // 37: chef.automate.domain.infra_proxy.response.CreateServer
	(*response.DeleteServer)(nil),        // 38: chef.automate.domain.infra_proxy.response.DeleteServer
	(*response.UpdateServer)(nil),        // 39: chef.automate.domain.infra_proxy.response.UpdateServer
	(*response.GetServers)(nil),          // 40: chef.automate.domain.infra_proxy.response.GetServers
	(*response.GetServer)(nil),           // 41: chef.automate.domain.infra_proxy.response.GetServer
	(*response.CreateOrg)(nil),           // 42: chef.automate.domain.infra_proxy.response.CreateOrg
	(*response.DeleteOrg)(nil),           // 43: chef.automate.domain.infra_proxy.response.DeleteOrg
	(*response.UpdateOrg)(nil),           // 44: chef.automate.domain.infra_proxy.response.UpdateOrg
	(*response.GetOrgs)(nil),             // 45: chef.automate.domain.infra_proxy.response.GetOrgs
	(*response.GetOrg)(nil),              // 46: chef.automate.domain.infra_proxy.response.GetOrg
	(*response.ResetOrgAdminKey)(nil),    // 47: chef.automate.domain.infra_proxy.response.ResetOrgAdminKey
	(*response.Cookbooks)(nil),           // 48: chef.automate.domain.infra_proxy.response.Cookbooks
	(*response.CookbookVersions)(nil),    // 49: chef.automate.domain.infra_proxy.response.CookbookVersions
	(*response.Cookbook)(nil),            // 50: chef.automate.domain.infra_proxy.response.Cookbook
	(*response.CookbookFileContent)(nil), // 51: chef.automate.domain.infra_proxy.response.CookbookFileContent
	(*response.Roles)(nil),               // 52: chef.automate.domain.infra_proxy.response.Roles
	(*response.Role)(nil),                // 53: chef.automate.domain.infra_proxy.response.Role
	(*response.Clients)(nil),             // 54: chef.automate.domain.infra_proxy.response.Clients
	(*response.Client)(nil),              // 55: chef.automate.domain.infra_proxy.response.Client
	(*response.DataBags)(nil),            // 56: chef.automate.domain.infra_proxy.response.DataBags
	(*response.DataBag)(nil),             // 57: chef.automate.domain.infra_proxy.response.DataBag
	(*response.CreateDataBag)(nil),       // 58: chef.automate.domain.infra_proxy.response.CreateDataBag
	(*response.CreateDataBagItem)(nil),   // 59: chef.automate.domain.infra_proxy.response.CreateDataBagItem
	(*response.UpdateDataBagItem)(nil),   // 60: chef.automate.domain.infra_proxy.response.UpdateDataBagItem
	(*response.Environments)(nil),        // 61: chef.automate.domain.infra_proxy.response.Environments
	(*response.Environment)(nil),         // 62: chef.automate.domain.infra_proxy.response.Environment
	(*response.AffectedNodes)(nil),       // 63: chef.automate.domain.infra_proxy.response.AffectedNodes
	(*response.DeleteNode)(nil),          // 64: chef.automate.domain.infra_proxy.response.DeleteNode
	(*response.UpdateNode)(nil),          // 65: chef.automate.domain.infra_proxy.response.UpdateNode
	(*response.Policyfiles)(nil),         // 66: chef.automate.domain.infra_proxy.response.Policyfiles
	(*response.Policyfile)(nil),          // 67: chef.automate.domain.infra_proxy.response.Policyfile
}
var file_interservice_infra_proxy_service_infra_proxy_proto_depIdxs = []int32{
	0,  // 0: chef.automate.domain.infra_proxy.service.InfraProxy.GetVersion:input_type -> chef.automate.api.common.version.VersionInfoRequest
	1,  // 1: chef.automate.domain.infra_proxy.service.InfraProxy.CreateServer:input_type -> chef.automate.domain.infra_proxy.request.CreateServer
	2,  // 2: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteServer:input_type -> chef.automate.domain.infra_proxy.request.DeleteServer
	3,  // 3: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateServer:input_type -> chef.automate.domain.infra_proxy.request.UpdateServer
	4,  // 4: chef.automate.domain.infra_proxy.service.InfraProxy.GetServers:input_type -> chef.automate.domain.infra_proxy.request.GetServers
	5,  // 5: chef.automate.domain.infra_proxy.service.InfraProxy.GetServer:input_type -> chef.automate.domain.infra_proxy.request.GetServer
	6,  // 6: chef.automate.domain.infra_proxy.service.InfraProxy.CreateOrg:input_type -> chef.automate.domain.infra_proxy.request.CreateOrg
	7,  // 7: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteOrg:input_type -> chef.automate.domain.infra_proxy.request.DeleteOrg
	8,  // 8: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateOrg:input_type -> chef.automate.domain.infra_proxy.request.UpdateOrg
	9,  // 9: chef.automate.domain.infra_proxy.service.InfraProxy.GetOrgs:input_type -> chef.automate.domain.infra_proxy.request.GetOrgs
	10, // 10: chef.automate.domain.infra_proxy.service.InfraProxy.GetOrg:input_type -> chef.automate.domain.infra_proxy.request.GetOrg
	11, // 11: chef.automate.domain.infra_proxy.service.InfraProxy.ResetOrgAdminKey:input_type -> chef.automate.domain.infra_proxy.request.ResetOrgAdminKey
	12, // 12: chef.automate.domain.infra_proxy.service.InfraProxy.GetCookbooks:input_type -> chef.automate.domain.infra_proxy.request.Cookbooks
	13, // 13: chef.automate.domain.infra_proxy.service.InfraProxy.GetCookbookVersions:input_type -> chef.automate.domain.infra_proxy.request.CookbookVersions
	14, // 14: chef.automate.domain.infra_proxy.service.InfraProxy.GetCookbook:input_type -> chef.automate.domain.infra_proxy.request.Cookbook
	15, // 15: chef.automate.domain.infra_proxy.service.InfraProxy.GetCookbookFileContent:input_type -> chef.automate.domain.infra_proxy.request.CookbookFileContent
	16, // 16: chef.automate.domain.infra_proxy.service.InfraProxy.GetRoles:input_type -> chef.automate.domain.infra_proxy.request.Roles
	17, // 17: chef.automate.domain.infra_proxy.service.InfraProxy.GetRole:input_type -> chef.automate.domain.infra_proxy.request.Role
	18, // 18: chef.automate.domain.infra_proxy.service.InfraProxy.CreateRole:input_type -> chef.automate.domain.infra_proxy.request.CreateRole
	17, // 19: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteRole:input_type -> chef.automate.domain.infra_proxy.request.Role
	19, // 20: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateRole:input_type -> chef.automate.domain.infra_proxy.request.UpdateRole
	20, // 21: chef.automate.domain.infra_proxy.service.InfraProxy.GetClients:input_type -> chef.automate.domain.infra_proxy.request.Clients
	21, // 22: chef.automate.domain.infra_proxy.service.InfraProxy.GetClient:input_type -> chef.automate.domain.infra_proxy.request.Client
	22, // 23: chef.automate.domain.infra_proxy.service.InfraProxy.GetDataBags:input_type -> chef.automate.domain.infra_proxy.request.DataBags
	23, // 24: chef.automate.domain.infra_proxy.service.InfraProxy.GetDataBagItem:input_type -> chef.automate.domain.infra_proxy.request.DataBag
	24, // 25: chef.automate.domain.infra_proxy.service.InfraProxy.CreateDataBag:input_type -> chef.automate.domain.infra_proxy.request.CreateDataBag
	25, // 26: chef.automate.domain.infra_proxy.service.InfraProxy.CreateDataBagItem:input_type -> chef.automate.domain.infra_proxy.request.CreateDataBagItem
	23, // 27: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteDataBag:input_type -> chef.automate.domain.infra_proxy.request.DataBag
	26, // 28: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateDataBagItem:input_type -> chef.automate.domain.infra_proxy.request.UpdateDataBagItem
	27, // 29: chef.automate.domain.infra_proxy.service.InfraProxy.GetEnvironments:input_type -> chef.automate.domain.infra_proxy.request.Environments
	28, // 30: chef.automate.domain.infra_proxy.service.InfraProxy.GetEnvironment:input_type -> chef.automate.domain.infra_proxy.request.Environment
	29, // 31: chef.automate.domain.infra_proxy.service.InfraProxy.CreateEnvironment:input_type -> chef.automate.domain.infra_proxy.request.CreateEnvironment
	30, // 32: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateEnvironment:input_type -> chef.automate.domain.infra_proxy.request.UpdateEnvironment
	28, // 33: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteEnvironment:input_type -> chef.automate.domain.infra_proxy.request.Environment
	31, // 34: chef.automate.domain.infra_proxy.service.InfraProxy.GetAffectedNodes:input_type -> chef.automate.domain.infra_proxy.request.AffectedNodes
	32, // 35: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteNode:input_type -> chef.automate.domain.infra_proxy.request.DeleteNode
	33, // 36: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateNode:input_type -> chef.automate.domain.infra_proxy.request.UpdateNode
	34, // 37: chef.automate.domain.infra_proxy.service.InfraProxy.GetPolicyfiles:input_type -> chef.automate.domain.infra_proxy.request.Policyfiles
	35, // 38: chef.automate.domain.infra_proxy.service.InfraProxy.GetPolicyfile:input_type -> chef.automate.domain.infra_proxy.request.Policyfile
	36, // 39: chef.automate.domain.infra_proxy.service.InfraProxy.GetVersion:output_type -> chef.automate.api.common.version.VersionInfo
	37, // 40: chef.automate.domain.infra_proxy.service.InfraProxy.CreateServer:output_type -> chef.automate.domain.infra_proxy.response.CreateServer
	38, // 41: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteServer:output_type -> chef.automate.domain.infra_proxy.response.DeleteServer
	39, // 42: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateServer:output_type -> chef.automate.domain.infra_proxy.response.UpdateServer
	40, // 43: chef.automate.domain.infra_proxy.service.InfraProxy.GetServers:output_type -> chef.automate.domain.infra_proxy.response.GetServers
	41, // 44: chef.automate.domain.infra_proxy.service.InfraProxy.GetServer:output_type -> chef.automate.domain.infra_proxy.response.GetServer
	42, // 45: chef.automate.domain.infra_proxy.service.InfraProxy.CreateOrg:output_type -> chef.automate.domain.infra_proxy.response.CreateOrg
	43, // 46: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteOrg:output_type -> chef.automate.domain.infra_proxy.response.DeleteOrg
	44, // 47: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateOrg:output_type -> chef.automate.domain.infra_proxy.response.UpdateOrg
	45, // 48: chef.automate.domain.infra_proxy.service.InfraProxy.GetOrgs:output_type -> chef.automate.domain.infra_proxy.response.GetOrgs
	46, // 49: chef.automate.domain.infra_proxy.service.InfraProxy.GetOrg:output_type -> chef.automate.domain.infra_proxy.response.GetOrg
	47, // 50: chef.automate.domain.infra_proxy.service.InfraProxy.ResetOrgAdminKey:output_type -> chef.automate.domain.infra_proxy.response.ResetOrgAdminKey
	48, // 51: chef.automate.domain.infra_proxy.service.InfraProxy.GetCookbooks:output_type -> chef.automate.domain.infra_proxy.response.Cookbooks
	49, // 52: chef.automate.domain.infra_proxy.service.InfraProxy.GetCookbookVersions:output_type -> chef.automate.domain.infra_proxy.response.CookbookVersions
	50, // 53: chef.automate.domain.infra_proxy.service.InfraProxy.GetCookbook:output_type -> chef.automate.domain.infra_proxy.response.Cookbook
	51, // 54: chef.automate.domain.infra_proxy.service.InfraProxy.GetCookbookFileContent:output_type -> chef.automate.domain.infra_proxy.response.CookbookFileContent
	52, // 55: chef.automate.domain.infra_proxy.service.InfraProxy.GetRoles:output_type -> chef.automate.domain.infra_proxy.response.Roles
	53, // 56: chef.automate.domain.infra_proxy.service.InfraProxy.GetRole:output_type -> chef.automate.domain.infra_proxy.response.Role
	53, // 57: chef.automate.domain.infra_proxy.service.InfraProxy.CreateRole:output_type -> chef.automate.domain.infra_proxy.response.Role
	53, // 58: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteRole:output_type -> chef.automate.domain.infra_proxy.response.Role
	53, // 59: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateRole:output_type -> chef.automate.domain.infra_proxy.response.Role
	54, // 60: chef.automate.domain.infra_proxy.service.InfraProxy.GetClients:output_type -> chef.automate.domain.infra_proxy.response.Clients
	55, // 61: chef.automate.domain.infra_proxy.service.InfraProxy.GetClient:output_type -> chef.automate.domain.infra_proxy.response.Client
	56, // 62: chef.automate.domain.infra_proxy.service.InfraProxy.GetDataBags:output_type -> chef.automate.domain.infra_proxy.response.DataBags
	57, // 63: chef.automate.domain.infra_proxy.service.InfraProxy.GetDataBagItem:output_type -> chef.automate.domain.infra_proxy.response.DataBag
	58, // 64: chef.automate.domain.infra_proxy.service.InfraProxy.CreateDataBag:output_type -> chef.automate.domain.infra_proxy.response.CreateDataBag
	59, // 65: chef.automate.domain.infra_proxy.service.InfraProxy.CreateDataBagItem:output_type -> chef.automate.domain.infra_proxy.response.CreateDataBagItem
	57, // 66: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteDataBag:output_type -> chef.automate.domain.infra_proxy.response.DataBag
	60, // 67: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateDataBagItem:output_type -> chef.automate.domain.infra_proxy.response.UpdateDataBagItem
	61, // 68: chef.automate.domain.infra_proxy.service.InfraProxy.GetEnvironments:output_type -> chef.automate.domain.infra_proxy.response.Environments
	62, // 69: chef.automate.domain.infra_proxy.service.InfraProxy.GetEnvironment:output_type -> chef.automate.domain.infra_proxy.response.Environment
	62, // 70: chef.automate.domain.infra_proxy.service.InfraProxy.CreateEnvironment:output_type -> chef.automate.domain.infra_proxy.response.Environment
	62, // 71: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateEnvironment:output_type -> chef.automate.domain.infra_proxy.response.Environment
	62, // 72: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteEnvironment:output_type -> chef.automate.domain.infra_proxy.response.Environment
	63, // 73: chef.automate.domain.infra_proxy.service.InfraProxy.GetAffectedNodes:output_type -> chef.automate.domain.infra_proxy.response.AffectedNodes
	64, // 74: chef.automate.domain.infra_proxy.service.InfraProxy.DeleteNode:output_type -> chef.automate.domain.infra_proxy.response.DeleteNode
	65, // 75: chef.automate.domain.infra_proxy.service.InfraProxy.UpdateNode:output_type -> chef.automate.domain.infra_proxy.response.UpdateNode
	66, // 76: chef.automate.domain.infra_proxy.service.InfraProxy.GetPolicyfiles:output_type -> chef.automate.domain.infra_proxy.response.Policyfiles
	67, // 77: chef.automate.domain.infra_proxy.service.InfraProxy.GetPolicyfile:output_type -> chef.automate.domain.infra_proxy.response.Policyfile
	39, // [39:78] is the sub-list for method output_type
	0,  // [0:39] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_interservice_infra_proxy_service_infra_proxy_proto_init() }
func file_interservice_infra_proxy_service_infra_proxy_proto_init() {
	if File_interservice_infra_proxy_service_infra_proxy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_infra_proxy_service_infra_proxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_infra_proxy_service_infra_proxy_proto_goTypes,
		DependencyIndexes: file_interservice_infra_proxy_service_infra_proxy_proto_depIdxs,
	}.Build()
	File_interservice_infra_proxy_service_infra_proxy_proto = out.File
	file_interservice_infra_proxy_service_infra_proxy_proto_rawDesc = nil
	file_interservice_infra_proxy_service_infra_proxy_proto_goTypes = nil
	file_interservice_infra_proxy_service_infra_proxy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InfraProxyClient is the client API for InfraProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfraProxyClient interface {
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	CreateServer(ctx context.Context, in *request.CreateServer, opts ...grpc.CallOption) (*response.CreateServer, error)
	DeleteServer(ctx context.Context, in *request.DeleteServer, opts ...grpc.CallOption) (*response.DeleteServer, error)
	UpdateServer(ctx context.Context, in *request.UpdateServer, opts ...grpc.CallOption) (*response.UpdateServer, error)
	GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error)
	GetServer(ctx context.Context, in *request.GetServer, opts ...grpc.CallOption) (*response.GetServer, error)
	CreateOrg(ctx context.Context, in *request.CreateOrg, opts ...grpc.CallOption) (*response.CreateOrg, error)
	DeleteOrg(ctx context.Context, in *request.DeleteOrg, opts ...grpc.CallOption) (*response.DeleteOrg, error)
	UpdateOrg(ctx context.Context, in *request.UpdateOrg, opts ...grpc.CallOption) (*response.UpdateOrg, error)
	GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error)
	GetOrg(ctx context.Context, in *request.GetOrg, opts ...grpc.CallOption) (*response.GetOrg, error)
	ResetOrgAdminKey(ctx context.Context, in *request.ResetOrgAdminKey, opts ...grpc.CallOption) (*response.ResetOrgAdminKey, error)
	GetCookbooks(ctx context.Context, in *request.Cookbooks, opts ...grpc.CallOption) (*response.Cookbooks, error)
	GetCookbookVersions(ctx context.Context, in *request.CookbookVersions, opts ...grpc.CallOption) (*response.CookbookVersions, error)
	GetCookbook(ctx context.Context, in *request.Cookbook, opts ...grpc.CallOption) (*response.Cookbook, error)
	GetCookbookFileContent(ctx context.Context, in *request.CookbookFileContent, opts ...grpc.CallOption) (*response.CookbookFileContent, error)
	GetRoles(ctx context.Context, in *request.Roles, opts ...grpc.CallOption) (*response.Roles, error)
	GetRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error)
	CreateRole(ctx context.Context, in *request.CreateRole, opts ...grpc.CallOption) (*response.Role, error)
	DeleteRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error)
	UpdateRole(ctx context.Context, in *request.UpdateRole, opts ...grpc.CallOption) (*response.Role, error)
	GetClients(ctx context.Context, in *request.Clients, opts ...grpc.CallOption) (*response.Clients, error)
	GetClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error)
	GetDataBags(ctx context.Context, in *request.DataBags, opts ...grpc.CallOption) (*response.DataBags, error)
	GetDataBagItem(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error)
	CreateDataBag(ctx context.Context, in *request.CreateDataBag, opts ...grpc.CallOption) (*response.CreateDataBag, error)
	CreateDataBagItem(ctx context.Context, in *request.CreateDataBagItem, opts ...grpc.CallOption) (*response.CreateDataBagItem, error)
	DeleteDataBag(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error)
	UpdateDataBagItem(ctx context.Context, in *request.UpdateDataBagItem, opts ...grpc.CallOption) (*response.UpdateDataBagItem, error)
	GetEnvironments(ctx context.Context, in *request.Environments, opts ...grpc.CallOption) (*response.Environments, error)
	GetEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error)
	CreateEnvironment(ctx context.Context, in *request.CreateEnvironment, opts ...grpc.CallOption) (*response.Environment, error)
	UpdateEnvironment(ctx context.Context, in *request.UpdateEnvironment, opts ...grpc.CallOption) (*response.Environment, error)
	DeleteEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error)
	GetAffectedNodes(ctx context.Context, in *request.AffectedNodes, opts ...grpc.CallOption) (*response.AffectedNodes, error)
	DeleteNode(ctx context.Context, in *request.DeleteNode, opts ...grpc.CallOption) (*response.DeleteNode, error)
	UpdateNode(ctx context.Context, in *request.UpdateNode, opts ...grpc.CallOption) (*response.UpdateNode, error)
	GetPolicyfiles(ctx context.Context, in *request.Policyfiles, opts ...grpc.CallOption) (*response.Policyfiles, error)
	GetPolicyfile(ctx context.Context, in *request.Policyfile, opts ...grpc.CallOption) (*response.Policyfile, error)
}

type infraProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewInfraProxyClient(cc grpc.ClientConnInterface) InfraProxyClient {
	return &infraProxyClient{cc}
}

func (c *infraProxyClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateServer(ctx context.Context, in *request.CreateServer, opts ...grpc.CallOption) (*response.CreateServer, error) {
	out := new(response.CreateServer)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteServer(ctx context.Context, in *request.DeleteServer, opts ...grpc.CallOption) (*response.DeleteServer, error) {
	out := new(response.DeleteServer)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateServer(ctx context.Context, in *request.UpdateServer, opts ...grpc.CallOption) (*response.UpdateServer, error) {
	out := new(response.UpdateServer)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetServers(ctx context.Context, in *request.GetServers, opts ...grpc.CallOption) (*response.GetServers, error) {
	out := new(response.GetServers)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetServer(ctx context.Context, in *request.GetServer, opts ...grpc.CallOption) (*response.GetServer, error) {
	out := new(response.GetServer)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateOrg(ctx context.Context, in *request.CreateOrg, opts ...grpc.CallOption) (*response.CreateOrg, error) {
	out := new(response.CreateOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteOrg(ctx context.Context, in *request.DeleteOrg, opts ...grpc.CallOption) (*response.DeleteOrg, error) {
	out := new(response.DeleteOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateOrg(ctx context.Context, in *request.UpdateOrg, opts ...grpc.CallOption) (*response.UpdateOrg, error) {
	out := new(response.UpdateOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrgs(ctx context.Context, in *request.GetOrgs, opts ...grpc.CallOption) (*response.GetOrgs, error) {
	out := new(response.GetOrgs)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetOrgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetOrg(ctx context.Context, in *request.GetOrg, opts ...grpc.CallOption) (*response.GetOrg, error) {
	out := new(response.GetOrg)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) ResetOrgAdminKey(ctx context.Context, in *request.ResetOrgAdminKey, opts ...grpc.CallOption) (*response.ResetOrgAdminKey, error) {
	out := new(response.ResetOrgAdminKey)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/ResetOrgAdminKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbooks(ctx context.Context, in *request.Cookbooks, opts ...grpc.CallOption) (*response.Cookbooks, error) {
	out := new(response.Cookbooks)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetCookbooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbookVersions(ctx context.Context, in *request.CookbookVersions, opts ...grpc.CallOption) (*response.CookbookVersions, error) {
	out := new(response.CookbookVersions)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetCookbookVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbook(ctx context.Context, in *request.Cookbook, opts ...grpc.CallOption) (*response.Cookbook, error) {
	out := new(response.Cookbook)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetCookbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetCookbookFileContent(ctx context.Context, in *request.CookbookFileContent, opts ...grpc.CallOption) (*response.CookbookFileContent, error) {
	out := new(response.CookbookFileContent)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetCookbookFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRoles(ctx context.Context, in *request.Roles, opts ...grpc.CallOption) (*response.Roles, error) {
	out := new(response.Roles)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateRole(ctx context.Context, in *request.CreateRole, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteRole(ctx context.Context, in *request.Role, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateRole(ctx context.Context, in *request.UpdateRole, opts ...grpc.CallOption) (*response.Role, error) {
	out := new(response.Role)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetClients(ctx context.Context, in *request.Clients, opts ...grpc.CallOption) (*response.Clients, error) {
	out := new(response.Clients)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetClient(ctx context.Context, in *request.Client, opts ...grpc.CallOption) (*response.Client, error) {
	out := new(response.Client)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetDataBags(ctx context.Context, in *request.DataBags, opts ...grpc.CallOption) (*response.DataBags, error) {
	out := new(response.DataBags)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetDataBags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetDataBagItem(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error) {
	out := new(response.DataBag)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateDataBag(ctx context.Context, in *request.CreateDataBag, opts ...grpc.CallOption) (*response.CreateDataBag, error) {
	out := new(response.CreateDataBag)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateDataBag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateDataBagItem(ctx context.Context, in *request.CreateDataBagItem, opts ...grpc.CallOption) (*response.CreateDataBagItem, error) {
	out := new(response.CreateDataBagItem)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteDataBag(ctx context.Context, in *request.DataBag, opts ...grpc.CallOption) (*response.DataBag, error) {
	out := new(response.DataBag)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteDataBag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateDataBagItem(ctx context.Context, in *request.UpdateDataBagItem, opts ...grpc.CallOption) (*response.UpdateDataBagItem, error) {
	out := new(response.UpdateDataBagItem)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateDataBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetEnvironments(ctx context.Context, in *request.Environments, opts ...grpc.CallOption) (*response.Environments, error) {
	out := new(response.Environments)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetEnvironments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) CreateEnvironment(ctx context.Context, in *request.CreateEnvironment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateEnvironment(ctx context.Context, in *request.UpdateEnvironment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteEnvironment(ctx context.Context, in *request.Environment, opts ...grpc.CallOption) (*response.Environment, error) {
	out := new(response.Environment)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetAffectedNodes(ctx context.Context, in *request.AffectedNodes, opts ...grpc.CallOption) (*response.AffectedNodes, error) {
	out := new(response.AffectedNodes)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetAffectedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) DeleteNode(ctx context.Context, in *request.DeleteNode, opts ...grpc.CallOption) (*response.DeleteNode, error) {
	out := new(response.DeleteNode)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) UpdateNode(ctx context.Context, in *request.UpdateNode, opts ...grpc.CallOption) (*response.UpdateNode, error) {
	out := new(response.UpdateNode)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicyfiles(ctx context.Context, in *request.Policyfiles, opts ...grpc.CallOption) (*response.Policyfiles, error) {
	out := new(response.Policyfiles)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetPolicyfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraProxyClient) GetPolicyfile(ctx context.Context, in *request.Policyfile, opts ...grpc.CallOption) (*response.Policyfile, error) {
	out := new(response.Policyfile)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.infra_proxy.service.InfraProxy/GetPolicyfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraProxyServer is the server API for InfraProxy service.
type InfraProxyServer interface {
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	CreateServer(context.Context, *request.CreateServer) (*response.CreateServer, error)
	DeleteServer(context.Context, *request.DeleteServer) (*response.DeleteServer, error)
	UpdateServer(context.Context, *request.UpdateServer) (*response.UpdateServer, error)
	GetServers(context.Context, *request.GetServers) (*response.GetServers, error)
	GetServer(context.Context, *request.GetServer) (*response.GetServer, error)
	CreateOrg(context.Context, *request.CreateOrg) (*response.CreateOrg, error)
	DeleteOrg(context.Context, *request.DeleteOrg) (*response.DeleteOrg, error)
	UpdateOrg(context.Context, *request.UpdateOrg) (*response.UpdateOrg, error)
	GetOrgs(context.Context, *request.GetOrgs) (*response.GetOrgs, error)
	GetOrg(context.Context, *request.GetOrg) (*response.GetOrg, error)
	ResetOrgAdminKey(context.Context, *request.ResetOrgAdminKey) (*response.ResetOrgAdminKey, error)
	GetCookbooks(context.Context, *request.Cookbooks) (*response.Cookbooks, error)
	GetCookbookVersions(context.Context, *request.CookbookVersions) (*response.CookbookVersions, error)
	GetCookbook(context.Context, *request.Cookbook) (*response.Cookbook, error)
	GetCookbookFileContent(context.Context, *request.CookbookFileContent) (*response.CookbookFileContent, error)
	GetRoles(context.Context, *request.Roles) (*response.Roles, error)
	GetRole(context.Context, *request.Role) (*response.Role, error)
	CreateRole(context.Context, *request.CreateRole) (*response.Role, error)
	DeleteRole(context.Context, *request.Role) (*response.Role, error)
	UpdateRole(context.Context, *request.UpdateRole) (*response.Role, error)
	GetClients(context.Context, *request.Clients) (*response.Clients, error)
	GetClient(context.Context, *request.Client) (*response.Client, error)
	GetDataBags(context.Context, *request.DataBags) (*response.DataBags, error)
	GetDataBagItem(context.Context, *request.DataBag) (*response.DataBag, error)
	CreateDataBag(context.Context, *request.CreateDataBag) (*response.CreateDataBag, error)
	CreateDataBagItem(context.Context, *request.CreateDataBagItem) (*response.CreateDataBagItem, error)
	DeleteDataBag(context.Context, *request.DataBag) (*response.DataBag, error)
	UpdateDataBagItem(context.Context, *request.UpdateDataBagItem) (*response.UpdateDataBagItem, error)
	GetEnvironments(context.Context, *request.Environments) (*response.Environments, error)
	GetEnvironment(context.Context, *request.Environment) (*response.Environment, error)
	CreateEnvironment(context.Context, *request.CreateEnvironment) (*response.Environment, error)
	UpdateEnvironment(context.Context, *request.UpdateEnvironment) (*response.Environment, error)
	DeleteEnvironment(context.Context, *request.Environment) (*response.Environment, error)
	GetAffectedNodes(context.Context, *request.AffectedNodes) (*response.AffectedNodes, error)
	DeleteNode(context.Context, *request.DeleteNode) (*response.DeleteNode, error)
	UpdateNode(context.Context, *request.UpdateNode) (*response.UpdateNode, error)
	GetPolicyfiles(context.Context, *request.Policyfiles) (*response.Policyfiles, error)
	GetPolicyfile(context.Context, *request.Policyfile) (*response.Policyfile, error)
}

// UnimplementedInfraProxyServer can be embedded to have forward compatible implementations.
type UnimplementedInfraProxyServer struct {
}

func (*UnimplementedInfraProxyServer) GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedInfraProxyServer) CreateServer(context.Context, *request.CreateServer) (*response.CreateServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteServer(context.Context, *request.DeleteServer) (*response.DeleteServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateServer(context.Context, *request.UpdateServer) (*response.UpdateServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (*UnimplementedInfraProxyServer) GetServers(context.Context, *request.GetServers) (*response.GetServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (*UnimplementedInfraProxyServer) GetServer(context.Context, *request.GetServer) (*response.GetServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (*UnimplementedInfraProxyServer) CreateOrg(context.Context, *request.CreateOrg) (*response.CreateOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteOrg(context.Context, *request.DeleteOrg) (*response.DeleteOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrg not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateOrg(context.Context, *request.UpdateOrg) (*response.UpdateOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrgs(context.Context, *request.GetOrgs) (*response.GetOrgs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgs not implemented")
}
func (*UnimplementedInfraProxyServer) GetOrg(context.Context, *request.GetOrg) (*response.GetOrg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrg not implemented")
}
func (*UnimplementedInfraProxyServer) ResetOrgAdminKey(context.Context, *request.ResetOrgAdminKey) (*response.ResetOrgAdminKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetOrgAdminKey not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbooks(context.Context, *request.Cookbooks) (*response.Cookbooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbooks not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbookVersions(context.Context, *request.CookbookVersions) (*response.CookbookVersions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbookVersions not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbook(context.Context, *request.Cookbook) (*response.Cookbook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbook not implemented")
}
func (*UnimplementedInfraProxyServer) GetCookbookFileContent(context.Context, *request.CookbookFileContent) (*response.CookbookFileContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookbookFileContent not implemented")
}
func (*UnimplementedInfraProxyServer) GetRoles(context.Context, *request.Roles) (*response.Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (*UnimplementedInfraProxyServer) GetRole(context.Context, *request.Role) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedInfraProxyServer) CreateRole(context.Context, *request.CreateRole) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteRole(context.Context, *request.Role) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateRole(context.Context, *request.UpdateRole) (*response.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedInfraProxyServer) GetClients(context.Context, *request.Clients) (*response.Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (*UnimplementedInfraProxyServer) GetClient(context.Context, *request.Client) (*response.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (*UnimplementedInfraProxyServer) GetDataBags(context.Context, *request.DataBags) (*response.DataBags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBags not implemented")
}
func (*UnimplementedInfraProxyServer) GetDataBagItem(context.Context, *request.DataBag) (*response.DataBag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) CreateDataBag(context.Context, *request.CreateDataBag) (*response.CreateDataBag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataBag not implemented")
}
func (*UnimplementedInfraProxyServer) CreateDataBagItem(context.Context, *request.CreateDataBagItem) (*response.CreateDataBagItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteDataBag(context.Context, *request.DataBag) (*response.DataBag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataBag not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateDataBagItem(context.Context, *request.UpdateDataBagItem) (*response.UpdateDataBagItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataBagItem not implemented")
}
func (*UnimplementedInfraProxyServer) GetEnvironments(context.Context, *request.Environments) (*response.Environments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironments not implemented")
}
func (*UnimplementedInfraProxyServer) GetEnvironment(context.Context, *request.Environment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) CreateEnvironment(context.Context, *request.CreateEnvironment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateEnvironment(context.Context, *request.UpdateEnvironment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteEnvironment(context.Context, *request.Environment) (*response.Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (*UnimplementedInfraProxyServer) GetAffectedNodes(context.Context, *request.AffectedNodes) (*response.AffectedNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAffectedNodes not implemented")
}
func (*UnimplementedInfraProxyServer) DeleteNode(context.Context, *request.DeleteNode) (*response.DeleteNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedInfraProxyServer) UpdateNode(context.Context, *request.UpdateNode) (*response.UpdateNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicyfiles(context.Context, *request.Policyfiles) (*response.Policyfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyfiles not implemented")
}
func (*UnimplementedInfraProxyServer) GetPolicyfile(context.Context, *request.Policyfile) (*response.Policyfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyfile not implemented")
}

func RegisterInfraProxyServer(s *grpc.Server, srv InfraProxyServer) {
	s.RegisterService(&_InfraProxy_serviceDesc, srv)
}

func _InfraProxy_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateServer(ctx, req.(*request.CreateServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteServer(ctx, req.(*request.DeleteServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateServer(ctx, req.(*request.UpdateServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServers(ctx, req.(*request.GetServers))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetServer(ctx, req.(*request.GetServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateOrg(ctx, req.(*request.CreateOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteOrg(ctx, req.(*request.DeleteOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateOrg(ctx, req.(*request.UpdateOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetOrgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetOrgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrgs(ctx, req.(*request.GetOrgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetOrg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetOrg(ctx, req.(*request.GetOrg))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_ResetOrgAdminKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResetOrgAdminKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).ResetOrgAdminKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/ResetOrgAdminKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).ResetOrgAdminKey(ctx, req.(*request.ResetOrgAdminKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Cookbooks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetCookbooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbooks(ctx, req.(*request.Cookbooks))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbookVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CookbookVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbookVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetCookbookVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbookVersions(ctx, req.(*request.CookbookVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Cookbook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetCookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbook(ctx, req.(*request.Cookbook))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetCookbookFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CookbookFileContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetCookbookFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetCookbookFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetCookbookFileContent(ctx, req.(*request.CookbookFileContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Roles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRoles(ctx, req.(*request.Roles))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetRole(ctx, req.(*request.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateRole(ctx, req.(*request.CreateRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteRole(ctx, req.(*request.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateRole(ctx, req.(*request.UpdateRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Clients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetClients(ctx, req.(*request.Clients))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetClient(ctx, req.(*request.Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetDataBags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetDataBags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetDataBags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetDataBags(ctx, req.(*request.DataBags))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetDataBagItem(ctx, req.(*request.DataBag))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateDataBag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateDataBag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateDataBag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateDataBag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateDataBag(ctx, req.(*request.CreateDataBag))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateDataBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateDataBagItem(ctx, req.(*request.CreateDataBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteDataBag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DataBag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteDataBag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteDataBag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteDataBag(ctx, req.(*request.DataBag))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateDataBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateDataBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateDataBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateDataBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateDataBagItem(ctx, req.(*request.UpdateDataBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetEnvironments(ctx, req.(*request.Environments))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetEnvironment(ctx, req.(*request.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).CreateEnvironment(ctx, req.(*request.CreateEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateEnvironment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateEnvironment(ctx, req.(*request.UpdateEnvironment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteEnvironment(ctx, req.(*request.Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetAffectedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.AffectedNodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetAffectedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetAffectedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetAffectedNodes(ctx, req.(*request.AffectedNodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).DeleteNode(ctx, req.(*request.DeleteNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).UpdateNode(ctx, req.(*request.UpdateNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicyfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Policyfiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicyfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetPolicyfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicyfiles(ctx, req.(*request.Policyfiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraProxy_GetPolicyfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Policyfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraProxyServer).GetPolicyfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.infra_proxy.service.InfraProxy/GetPolicyfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraProxyServer).GetPolicyfile(ctx, req.(*request.Policyfile))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfraProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.infra_proxy.service.InfraProxy",
	HandlerType: (*InfraProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _InfraProxy_GetVersion_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _InfraProxy_CreateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _InfraProxy_DeleteServer_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _InfraProxy_UpdateServer_Handler,
		},
		{
			MethodName: "GetServers",
			Handler:    _InfraProxy_GetServers_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _InfraProxy_GetServer_Handler,
		},
		{
			MethodName: "CreateOrg",
			Handler:    _InfraProxy_CreateOrg_Handler,
		},
		{
			MethodName: "DeleteOrg",
			Handler:    _InfraProxy_DeleteOrg_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _InfraProxy_UpdateOrg_Handler,
		},
		{
			MethodName: "GetOrgs",
			Handler:    _InfraProxy_GetOrgs_Handler,
		},
		{
			MethodName: "GetOrg",
			Handler:    _InfraProxy_GetOrg_Handler,
		},
		{
			MethodName: "ResetOrgAdminKey",
			Handler:    _InfraProxy_ResetOrgAdminKey_Handler,
		},
		{
			MethodName: "GetCookbooks",
			Handler:    _InfraProxy_GetCookbooks_Handler,
		},
		{
			MethodName: "GetCookbookVersions",
			Handler:    _InfraProxy_GetCookbookVersions_Handler,
		},
		{
			MethodName: "GetCookbook",
			Handler:    _InfraProxy_GetCookbook_Handler,
		},
		{
			MethodName: "GetCookbookFileContent",
			Handler:    _InfraProxy_GetCookbookFileContent_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _InfraProxy_GetRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _InfraProxy_GetRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _InfraProxy_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _InfraProxy_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _InfraProxy_UpdateRole_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _InfraProxy_GetClients_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _InfraProxy_GetClient_Handler,
		},
		{
			MethodName: "GetDataBags",
			Handler:    _InfraProxy_GetDataBags_Handler,
		},
		{
			MethodName: "GetDataBagItem",
			Handler:    _InfraProxy_GetDataBagItem_Handler,
		},
		{
			MethodName: "CreateDataBag",
			Handler:    _InfraProxy_CreateDataBag_Handler,
		},
		{
			MethodName: "CreateDataBagItem",
			Handler:    _InfraProxy_CreateDataBagItem_Handler,
		},
		{
			MethodName: "DeleteDataBag",
			Handler:    _InfraProxy_DeleteDataBag_Handler,
		},
		{
			MethodName: "UpdateDataBagItem",
			Handler:    _InfraProxy_UpdateDataBagItem_Handler,
		},
		{
			MethodName: "GetEnvironments",
			Handler:    _InfraProxy_GetEnvironments_Handler,
		},
		{
			MethodName: "GetEnvironment",
			Handler:    _InfraProxy_GetEnvironment_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _InfraProxy_CreateEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _InfraProxy_UpdateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _InfraProxy_DeleteEnvironment_Handler,
		},
		{
			MethodName: "GetAffectedNodes",
			Handler:    _InfraProxy_GetAffectedNodes_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _InfraProxy_DeleteNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _InfraProxy_UpdateNode_Handler,
		},
		{
			MethodName: "GetPolicyfiles",
			Handler:    _InfraProxy_GetPolicyfiles_Handler,
		},
		{
			MethodName: "GetPolicyfile",
			Handler:    _InfraProxy_GetPolicyfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interservice/infra_proxy/service/infra_proxy.proto",
}
