// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: interservice/cereal/cereal.proto

package cereal

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Parameters []byte                 `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty" toml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
	StartAfter *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty" toml:"start_after,omitempty" mapstructure:"start_after,omitempty"`
	Metadata   *TaskMetadata          `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty" toml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetParameters() []byte {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Task) GetStartAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAfter
	}
	return nil
}

func (x *Task) GetMetadata() *TaskMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type TaskMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnqueuedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=enqueued_at,json=enqueuedAt,proto3" json:"enqueued_at,omitempty" toml:"enqueued_at,omitempty" mapstructure:"enqueued_at,omitempty"`
}

func (x *TaskMetadata) Reset() {
	*x = TaskMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMetadata) ProtoMessage() {}

func (x *TaskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMetadata.ProtoReflect.Descriptor instead.
func (*TaskMetadata) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{1}
}

func (x *TaskMetadata) GetEnqueuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueuedAt
	}
	return nil
}

type WorkflowInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	InstanceName string `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty" toml:"instance_name,omitempty" mapstructure:"instance_name,omitempty"`
	WorkflowName string `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty" toml:"workflow_name,omitempty" mapstructure:"workflow_name,omitempty"`
	Status       string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Parameters   []byte `protobuf:"bytes,5,opt,name=parameters,proto3" json:"parameters,omitempty" toml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
	Payload      []byte `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty" toml:"payload,omitempty" mapstructure:"payload,omitempty"`
	Result       []byte `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty" toml:"result,omitempty" mapstructure:"result,omitempty"`
	Err          string `protobuf:"bytes,8,opt,name=err,proto3" json:"err,omitempty" toml:"err,omitempty" mapstructure:"err,omitempty"`
}

func (x *WorkflowInstance) Reset() {
	*x = WorkflowInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowInstance) ProtoMessage() {}

func (x *WorkflowInstance) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowInstance.ProtoReflect.Descriptor instead.
func (*WorkflowInstance) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowInstance) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *WorkflowInstance) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *WorkflowInstance) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *WorkflowInstance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkflowInstance) GetParameters() []byte {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *WorkflowInstance) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *WorkflowInstance) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *WorkflowInstance) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type TaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName   string `protobuf:"bytes,1,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty" toml:"task_name,omitempty" mapstructure:"task_name,omitempty"`
	Parameters []byte `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty" toml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
	Status     string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	ErrorText  string `protobuf:"bytes,4,opt,name=error_text,json=errorText,proto3" json:"error_text,omitempty" toml:"error_text,omitempty" mapstructure:"error_text,omitempty"`
	Result     []byte `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty" toml:"result,omitempty" mapstructure:"result,omitempty"`
}

func (x *TaskResult) Reset() {
	*x = TaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult) ProtoMessage() {}

func (x *TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult.ProtoReflect.Descriptor instead.
func (*TaskResult) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{3}
}

func (x *TaskResult) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskResult) GetParameters() []byte {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *TaskResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskResult) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

func (x *TaskResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type WorkflowEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
	EnqueuedTaskCount  int64                  `protobuf:"varint,2,opt,name=enqueued_task_count,json=enqueuedTaskCount,proto3" json:"enqueued_task_count,omitempty" toml:"enqueued_task_count,omitempty" mapstructure:"enqueued_task_count,omitempty"`
	CompletedTaskCount int64                  `protobuf:"varint,3,opt,name=completed_task_count,json=completedTaskCount,proto3" json:"completed_task_count,omitempty" toml:"completed_task_count,omitempty" mapstructure:"completed_task_count,omitempty"`
	TaskResult         *TaskResult            `protobuf:"bytes,4,opt,name=task_result,json=taskResult,proto3" json:"task_result,omitempty" toml:"task_result,omitempty" mapstructure:"task_result,omitempty"`
	EnqueuedAt         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=enqueued_at,json=enqueuedAt,proto3" json:"enqueued_at,omitempty" toml:"enqueued_at,omitempty" mapstructure:"enqueued_at,omitempty"`
}

func (x *WorkflowEvent) Reset() {
	*x = WorkflowEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowEvent) ProtoMessage() {}

func (x *WorkflowEvent) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowEvent.ProtoReflect.Descriptor instead.
func (*WorkflowEvent) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{4}
}

func (x *WorkflowEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WorkflowEvent) GetEnqueuedTaskCount() int64 {
	if x != nil {
		return x.EnqueuedTaskCount
	}
	return 0
}

func (x *WorkflowEvent) GetCompletedTaskCount() int64 {
	if x != nil {
		return x.CompletedTaskCount
	}
	return 0
}

func (x *WorkflowEvent) GetTaskResult() *TaskResult {
	if x != nil {
		return x.TaskResult
	}
	return nil
}

func (x *WorkflowEvent) GetEnqueuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueuedAt
	}
	return nil
}

type DequeueWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cmd:
	//	*DequeueWorkflowRequest_Dequeue_
	//	*DequeueWorkflowRequest_Continue_
	//	*DequeueWorkflowRequest_Done_
	//	*DequeueWorkflowRequest_Fail_
	Cmd isDequeueWorkflowRequest_Cmd `protobuf_oneof:"cmd"`
}

func (x *DequeueWorkflowRequest) Reset() {
	*x = DequeueWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowRequest) ProtoMessage() {}

func (x *DequeueWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowRequest.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{5}
}

func (m *DequeueWorkflowRequest) GetCmd() isDequeueWorkflowRequest_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (x *DequeueWorkflowRequest) GetDequeue() *DequeueWorkflowRequest_Dequeue {
	if x, ok := x.GetCmd().(*DequeueWorkflowRequest_Dequeue_); ok {
		return x.Dequeue
	}
	return nil
}

func (x *DequeueWorkflowRequest) GetContinue() *DequeueWorkflowRequest_Continue {
	if x, ok := x.GetCmd().(*DequeueWorkflowRequest_Continue_); ok {
		return x.Continue
	}
	return nil
}

func (x *DequeueWorkflowRequest) GetDone() *DequeueWorkflowRequest_Done {
	if x, ok := x.GetCmd().(*DequeueWorkflowRequest_Done_); ok {
		return x.Done
	}
	return nil
}

func (x *DequeueWorkflowRequest) GetFail() *DequeueWorkflowRequest_Fail {
	if x, ok := x.GetCmd().(*DequeueWorkflowRequest_Fail_); ok {
		return x.Fail
	}
	return nil
}

type isDequeueWorkflowRequest_Cmd interface {
	isDequeueWorkflowRequest_Cmd()
}

type DequeueWorkflowRequest_Dequeue_ struct {
	Dequeue *DequeueWorkflowRequest_Dequeue `protobuf:"bytes,1,opt,name=dequeue,proto3,oneof"`
}

type DequeueWorkflowRequest_Continue_ struct {
	Continue *DequeueWorkflowRequest_Continue `protobuf:"bytes,2,opt,name=continue,proto3,oneof"`
}

type DequeueWorkflowRequest_Done_ struct {
	Done *DequeueWorkflowRequest_Done `protobuf:"bytes,3,opt,name=done,proto3,oneof"`
}

type DequeueWorkflowRequest_Fail_ struct {
	Fail *DequeueWorkflowRequest_Fail `protobuf:"bytes,4,opt,name=fail,proto3,oneof"`
}

func (*DequeueWorkflowRequest_Dequeue_) isDequeueWorkflowRequest_Cmd() {}

func (*DequeueWorkflowRequest_Continue_) isDequeueWorkflowRequest_Cmd() {}

func (*DequeueWorkflowRequest_Done_) isDequeueWorkflowRequest_Cmd() {}

func (*DequeueWorkflowRequest_Fail_) isDequeueWorkflowRequest_Cmd() {}

type DequeueWorkflowChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cmd:
	//	*DequeueWorkflowChunkRequest_Dequeue_
	//	*DequeueWorkflowChunkRequest_Continue_
	//	*DequeueWorkflowChunkRequest_Done_
	//	*DequeueWorkflowChunkRequest_Fail_
	Cmd isDequeueWorkflowChunkRequest_Cmd `protobuf_oneof:"cmd"`
}

func (x *DequeueWorkflowChunkRequest) Reset() {
	*x = DequeueWorkflowChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowChunkRequest) ProtoMessage() {}

func (x *DequeueWorkflowChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowChunkRequest.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowChunkRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{6}
}

func (m *DequeueWorkflowChunkRequest) GetCmd() isDequeueWorkflowChunkRequest_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (x *DequeueWorkflowChunkRequest) GetDequeue() *DequeueWorkflowChunkRequest_Dequeue {
	if x, ok := x.GetCmd().(*DequeueWorkflowChunkRequest_Dequeue_); ok {
		return x.Dequeue
	}
	return nil
}

func (x *DequeueWorkflowChunkRequest) GetContinue() *DequeueWorkflowChunkRequest_Continue {
	if x, ok := x.GetCmd().(*DequeueWorkflowChunkRequest_Continue_); ok {
		return x.Continue
	}
	return nil
}

func (x *DequeueWorkflowChunkRequest) GetDone() *DequeueWorkflowChunkRequest_Done {
	if x, ok := x.GetCmd().(*DequeueWorkflowChunkRequest_Done_); ok {
		return x.Done
	}
	return nil
}

func (x *DequeueWorkflowChunkRequest) GetFail() *DequeueWorkflowChunkRequest_Fail {
	if x, ok := x.GetCmd().(*DequeueWorkflowChunkRequest_Fail_); ok {
		return x.Fail
	}
	return nil
}

type isDequeueWorkflowChunkRequest_Cmd interface {
	isDequeueWorkflowChunkRequest_Cmd()
}

type DequeueWorkflowChunkRequest_Dequeue_ struct {
	Dequeue *DequeueWorkflowChunkRequest_Dequeue `protobuf:"bytes,1,opt,name=dequeue,proto3,oneof"`
}

type DequeueWorkflowChunkRequest_Continue_ struct {
	Continue *DequeueWorkflowChunkRequest_Continue `protobuf:"bytes,2,opt,name=continue,proto3,oneof"`
}

type DequeueWorkflowChunkRequest_Done_ struct {
	Done *DequeueWorkflowChunkRequest_Done `protobuf:"bytes,3,opt,name=done,proto3,oneof"`
}

type DequeueWorkflowChunkRequest_Fail_ struct {
	Fail *DequeueWorkflowChunkRequest_Fail `protobuf:"bytes,4,opt,name=fail,proto3,oneof"`
}

func (*DequeueWorkflowChunkRequest_Dequeue_) isDequeueWorkflowChunkRequest_Cmd() {}

func (*DequeueWorkflowChunkRequest_Continue_) isDequeueWorkflowChunkRequest_Cmd() {}

func (*DequeueWorkflowChunkRequest_Done_) isDequeueWorkflowChunkRequest_Cmd() {}

func (*DequeueWorkflowChunkRequest_Fail_) isDequeueWorkflowChunkRequest_Cmd() {}

type DequeueWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cmd:
	//	*DequeueWorkflowResponse_Dequeue_
	//	*DequeueWorkflowResponse_Status_
	//	*DequeueWorkflowResponse_Committed_
	Cmd isDequeueWorkflowResponse_Cmd `protobuf_oneof:"cmd"`
}

func (x *DequeueWorkflowResponse) Reset() {
	*x = DequeueWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowResponse) ProtoMessage() {}

func (x *DequeueWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowResponse.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{7}
}

func (m *DequeueWorkflowResponse) GetCmd() isDequeueWorkflowResponse_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (x *DequeueWorkflowResponse) GetDequeue() *DequeueWorkflowResponse_Dequeue {
	if x, ok := x.GetCmd().(*DequeueWorkflowResponse_Dequeue_); ok {
		return x.Dequeue
	}
	return nil
}

func (x *DequeueWorkflowResponse) GetStatus() *DequeueWorkflowResponse_Status {
	if x, ok := x.GetCmd().(*DequeueWorkflowResponse_Status_); ok {
		return x.Status
	}
	return nil
}

func (x *DequeueWorkflowResponse) GetCommitted() *DequeueWorkflowResponse_Committed {
	if x, ok := x.GetCmd().(*DequeueWorkflowResponse_Committed_); ok {
		return x.Committed
	}
	return nil
}

type isDequeueWorkflowResponse_Cmd interface {
	isDequeueWorkflowResponse_Cmd()
}

type DequeueWorkflowResponse_Dequeue_ struct {
	Dequeue *DequeueWorkflowResponse_Dequeue `protobuf:"bytes,1,opt,name=dequeue,proto3,oneof"`
}

type DequeueWorkflowResponse_Status_ struct {
	Status *DequeueWorkflowResponse_Status `protobuf:"bytes,2,opt,name=status,proto3,oneof"`
}

type DequeueWorkflowResponse_Committed_ struct {
	Committed *DequeueWorkflowResponse_Committed `protobuf:"bytes,3,opt,name=committed,proto3,oneof"`
}

func (*DequeueWorkflowResponse_Dequeue_) isDequeueWorkflowResponse_Cmd() {}

func (*DequeueWorkflowResponse_Status_) isDequeueWorkflowResponse_Cmd() {}

func (*DequeueWorkflowResponse_Committed_) isDequeueWorkflowResponse_Cmd() {}

type DequeueWorkflowChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty" toml:"chunk,omitempty" mapstructure:"chunk,omitempty"`
}

func (x *DequeueWorkflowChunkResponse) Reset() {
	*x = DequeueWorkflowChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowChunkResponse) ProtoMessage() {}

func (x *DequeueWorkflowChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowChunkResponse.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowChunkResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{8}
}

func (x *DequeueWorkflowChunkResponse) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type EnqueueWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	InstanceName string `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty" toml:"instance_name,omitempty" mapstructure:"instance_name,omitempty"`
	WorkflowName string `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty" toml:"workflow_name,omitempty" mapstructure:"workflow_name,omitempty"`
	Parameters   []byte `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty" toml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
}

func (x *EnqueueWorkflowRequest) Reset() {
	*x = EnqueueWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueWorkflowRequest) ProtoMessage() {}

func (x *EnqueueWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueWorkflowRequest.ProtoReflect.Descriptor instead.
func (*EnqueueWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{9}
}

func (x *EnqueueWorkflowRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *EnqueueWorkflowRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *EnqueueWorkflowRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *EnqueueWorkflowRequest) GetParameters() []byte {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type EnqueueWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnqueueWorkflowResponse) Reset() {
	*x = EnqueueWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueWorkflowResponse) ProtoMessage() {}

func (x *EnqueueWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueWorkflowResponse.ProtoReflect.Descriptor instead.
func (*EnqueueWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{10}
}

type CancelWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	InstanceName string `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty" toml:"instance_name,omitempty" mapstructure:"instance_name,omitempty"`
	WorkflowName string `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty" toml:"workflow_name,omitempty" mapstructure:"workflow_name,omitempty"`
}

func (x *CancelWorkflowRequest) Reset() {
	*x = CancelWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkflowRequest) ProtoMessage() {}

func (x *CancelWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CancelWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{11}
}

func (x *CancelWorkflowRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CancelWorkflowRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *CancelWorkflowRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

type CancelWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelWorkflowResponse) Reset() {
	*x = CancelWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkflowResponse) ProtoMessage() {}

func (x *CancelWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkflowResponse.ProtoReflect.Descriptor instead.
func (*CancelWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{12}
}

type KillWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	InstanceName string `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty" toml:"instance_name,omitempty" mapstructure:"instance_name,omitempty"`
	WorkflowName string `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty" toml:"workflow_name,omitempty" mapstructure:"workflow_name,omitempty"`
}

func (x *KillWorkflowRequest) Reset() {
	*x = KillWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillWorkflowRequest) ProtoMessage() {}

func (x *KillWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillWorkflowRequest.ProtoReflect.Descriptor instead.
func (*KillWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{13}
}

func (x *KillWorkflowRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *KillWorkflowRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *KillWorkflowRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

type KillWorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KillWorkflowResponse) Reset() {
	*x = KillWorkflowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillWorkflowResponse) ProtoMessage() {}

func (x *KillWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillWorkflowResponse.ProtoReflect.Descriptor instead.
func (*KillWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{14}
}

type DequeueTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cmd:
	//	*DequeueTaskRequest_Dequeue_
	//	*DequeueTaskRequest_Succeed_
	//	*DequeueTaskRequest_Fail_
	Cmd isDequeueTaskRequest_Cmd `protobuf_oneof:"cmd"`
}

func (x *DequeueTaskRequest) Reset() {
	*x = DequeueTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueTaskRequest) ProtoMessage() {}

func (x *DequeueTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueTaskRequest.ProtoReflect.Descriptor instead.
func (*DequeueTaskRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{15}
}

func (m *DequeueTaskRequest) GetCmd() isDequeueTaskRequest_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (x *DequeueTaskRequest) GetDequeue() *DequeueTaskRequest_Dequeue {
	if x, ok := x.GetCmd().(*DequeueTaskRequest_Dequeue_); ok {
		return x.Dequeue
	}
	return nil
}

func (x *DequeueTaskRequest) GetSucceed() *DequeueTaskRequest_Succeed {
	if x, ok := x.GetCmd().(*DequeueTaskRequest_Succeed_); ok {
		return x.Succeed
	}
	return nil
}

func (x *DequeueTaskRequest) GetFail() *DequeueTaskRequest_Fail {
	if x, ok := x.GetCmd().(*DequeueTaskRequest_Fail_); ok {
		return x.Fail
	}
	return nil
}

type isDequeueTaskRequest_Cmd interface {
	isDequeueTaskRequest_Cmd()
}

type DequeueTaskRequest_Dequeue_ struct {
	Dequeue *DequeueTaskRequest_Dequeue `protobuf:"bytes,1,opt,name=dequeue,proto3,oneof"`
}

type DequeueTaskRequest_Succeed_ struct {
	Succeed *DequeueTaskRequest_Succeed `protobuf:"bytes,2,opt,name=succeed,proto3,oneof"`
}

type DequeueTaskRequest_Fail_ struct {
	Fail *DequeueTaskRequest_Fail `protobuf:"bytes,3,opt,name=fail,proto3,oneof"`
}

func (*DequeueTaskRequest_Dequeue_) isDequeueTaskRequest_Cmd() {}

func (*DequeueTaskRequest_Succeed_) isDequeueTaskRequest_Cmd() {}

func (*DequeueTaskRequest_Fail_) isDequeueTaskRequest_Cmd() {}

type DequeueTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cmd:
	//	*DequeueTaskResponse_Dequeue_
	//	*DequeueTaskResponse_Cancel_
	//	*DequeueTaskResponse_Committed_
	Cmd isDequeueTaskResponse_Cmd `protobuf_oneof:"cmd"`
}

func (x *DequeueTaskResponse) Reset() {
	*x = DequeueTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueTaskResponse) ProtoMessage() {}

func (x *DequeueTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueTaskResponse.ProtoReflect.Descriptor instead.
func (*DequeueTaskResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{16}
}

func (m *DequeueTaskResponse) GetCmd() isDequeueTaskResponse_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (x *DequeueTaskResponse) GetDequeue() *DequeueTaskResponse_Dequeue {
	if x, ok := x.GetCmd().(*DequeueTaskResponse_Dequeue_); ok {
		return x.Dequeue
	}
	return nil
}

func (x *DequeueTaskResponse) GetCancel() *DequeueTaskResponse_Cancel {
	if x, ok := x.GetCmd().(*DequeueTaskResponse_Cancel_); ok {
		return x.Cancel
	}
	return nil
}

func (x *DequeueTaskResponse) GetCommitted() *DequeueTaskResponse_Committed {
	if x, ok := x.GetCmd().(*DequeueTaskResponse_Committed_); ok {
		return x.Committed
	}
	return nil
}

type isDequeueTaskResponse_Cmd interface {
	isDequeueTaskResponse_Cmd()
}

type DequeueTaskResponse_Dequeue_ struct {
	Dequeue *DequeueTaskResponse_Dequeue `protobuf:"bytes,1,opt,name=dequeue,proto3,oneof"`
}

type DequeueTaskResponse_Cancel_ struct {
	Cancel *DequeueTaskResponse_Cancel `protobuf:"bytes,2,opt,name=cancel,proto3,oneof"`
}

type DequeueTaskResponse_Committed_ struct {
	Committed *DequeueTaskResponse_Committed `protobuf:"bytes,3,opt,name=committed,proto3,oneof"`
}

func (*DequeueTaskResponse_Dequeue_) isDequeueTaskResponse_Cmd() {}

func (*DequeueTaskResponse_Cancel_) isDequeueTaskResponse_Cmd() {}

func (*DequeueTaskResponse_Committed_) isDequeueTaskResponse_Cmd() {}

type CreateWorkflowScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	InstanceName string                 `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty" toml:"instance_name,omitempty" mapstructure:"instance_name,omitempty"`
	WorkflowName string                 `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty" toml:"workflow_name,omitempty" mapstructure:"workflow_name,omitempty"`
	Parameters   []byte                 `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty" toml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
	Enabled      bool                   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty" toml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
	Recurrence   string                 `protobuf:"bytes,6,opt,name=recurrence,proto3" json:"recurrence,omitempty" toml:"recurrence,omitempty" mapstructure:"recurrence,omitempty"`
	Payload      []byte                 `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty" toml:"payload,omitempty" mapstructure:"payload,omitempty"`
	NextRunAt    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=next_run_at,json=nextRunAt,proto3" json:"next_run_at,omitempty" toml:"next_run_at,omitempty" mapstructure:"next_run_at,omitempty"`
}

func (x *CreateWorkflowScheduleRequest) Reset() {
	*x = CreateWorkflowScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowScheduleRequest) ProtoMessage() {}

func (x *CreateWorkflowScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowScheduleRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkflowScheduleRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{17}
}

func (x *CreateWorkflowScheduleRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateWorkflowScheduleRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *CreateWorkflowScheduleRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *CreateWorkflowScheduleRequest) GetParameters() []byte {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *CreateWorkflowScheduleRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CreateWorkflowScheduleRequest) GetRecurrence() string {
	if x != nil {
		return x.Recurrence
	}
	return ""
}

func (x *CreateWorkflowScheduleRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CreateWorkflowScheduleRequest) GetNextRunAt() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRunAt
	}
	return nil
}

type CreateWorkflowScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateWorkflowScheduleResponse) Reset() {
	*x = CreateWorkflowScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkflowScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowScheduleResponse) ProtoMessage() {}

func (x *CreateWorkflowScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowScheduleResponse.ProtoReflect.Descriptor instead.
func (*CreateWorkflowScheduleResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{18}
}

type ListWorkflowSchedulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
}

func (x *ListWorkflowSchedulesRequest) Reset() {
	*x = ListWorkflowSchedulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowSchedulesRequest) ProtoMessage() {}

func (x *ListWorkflowSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowSchedulesRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{19}
}

func (x *ListWorkflowSchedulesRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain         string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	InstanceName   string                 `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty" toml:"instance_name,omitempty" mapstructure:"instance_name,omitempty"`
	WorkflowName   string                 `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty" toml:"workflow_name,omitempty" mapstructure:"workflow_name,omitempty"`
	Parameters     []byte                 `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty" toml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
	Recurrence     string                 `protobuf:"bytes,5,opt,name=recurrence,proto3" json:"recurrence,omitempty" toml:"recurrence,omitempty" mapstructure:"recurrence,omitempty"`
	NextDueAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=next_due_at,json=nextDueAt,proto3" json:"next_due_at,omitempty" toml:"next_due_at,omitempty" mapstructure:"next_due_at,omitempty"`
	LastEnqueuedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_enqueued_at,json=lastEnqueuedAt,proto3" json:"last_enqueued_at,omitempty" toml:"last_enqueued_at,omitempty" mapstructure:"last_enqueued_at,omitempty"`
	Enabled        bool                   `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty" toml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
	LastStart      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_start,json=lastStart,proto3" json:"last_start,omitempty" toml:"last_start,omitempty" mapstructure:"last_start,omitempty"`
	LastEnd        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_end,json=lastEnd,proto3" json:"last_end,omitempty" toml:"last_end,omitempty" mapstructure:"last_end,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{20}
}

func (x *Schedule) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Schedule) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *Schedule) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *Schedule) GetParameters() []byte {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Schedule) GetRecurrence() string {
	if x != nil {
		return x.Recurrence
	}
	return ""
}

func (x *Schedule) GetNextDueAt() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDueAt
	}
	return nil
}

func (x *Schedule) GetLastEnqueuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEnqueuedAt
	}
	return nil
}

func (x *Schedule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Schedule) GetLastStart() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStart
	}
	return nil
}

func (x *Schedule) GetLastEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEnd
	}
	return nil
}

type ListWorkflowSchedulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumSchedules int32     `protobuf:"varint,1,opt,name=num_schedules,json=numSchedules,proto3" json:"num_schedules,omitempty" toml:"num_schedules,omitempty" mapstructure:"num_schedules,omitempty"`
	Schedule     *Schedule `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty" toml:"schedule,omitempty" mapstructure:"schedule,omitempty"`
}

func (x *ListWorkflowSchedulesResponse) Reset() {
	*x = ListWorkflowSchedulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowSchedulesResponse) ProtoMessage() {}

func (x *ListWorkflowSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowSchedulesResponse.ProtoReflect.Descriptor instead.
func (*ListWorkflowSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{21}
}

func (x *ListWorkflowSchedulesResponse) GetNumSchedules() int32 {
	if x != nil {
		return x.NumSchedules
	}
	return 0
}

func (x *ListWorkflowSchedulesResponse) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type GetWorkflowScheduleByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	InstanceName string `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty" toml:"instance_name,omitempty" mapstructure:"instance_name,omitempty"`
	WorkflowName string `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty" toml:"workflow_name,omitempty" mapstructure:"workflow_name,omitempty"`
}

func (x *GetWorkflowScheduleByNameRequest) Reset() {
	*x = GetWorkflowScheduleByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowScheduleByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowScheduleByNameRequest) ProtoMessage() {}

func (x *GetWorkflowScheduleByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowScheduleByNameRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowScheduleByNameRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{22}
}

func (x *GetWorkflowScheduleByNameRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetWorkflowScheduleByNameRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *GetWorkflowScheduleByNameRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

type GetWorkflowScheduleByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule *Schedule `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty" toml:"schedule,omitempty" mapstructure:"schedule,omitempty"`
}

func (x *GetWorkflowScheduleByNameResponse) Reset() {
	*x = GetWorkflowScheduleByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowScheduleByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowScheduleByNameResponse) ProtoMessage() {}

func (x *GetWorkflowScheduleByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowScheduleByNameResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowScheduleByNameResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{23}
}

func (x *GetWorkflowScheduleByNameResponse) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type UpdateWorkflowScheduleByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string                  `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	InstanceName string                  `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty" toml:"instance_name,omitempty" mapstructure:"instance_name,omitempty"`
	WorkflowName string                  `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty" toml:"workflow_name,omitempty" mapstructure:"workflow_name,omitempty"`
	Enabled      *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=enabled,proto3" json:"enabled,omitempty" toml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
	Parameters   *wrapperspb.BytesValue  `protobuf:"bytes,5,opt,name=parameters,proto3" json:"parameters,omitempty" toml:"parameters,omitempty" mapstructure:"parameters,omitempty"`
	Recurrence   *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=recurrence,proto3" json:"recurrence,omitempty" toml:"recurrence,omitempty" mapstructure:"recurrence,omitempty"`
	NextRunAt    *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=next_run_at,json=nextRunAt,proto3" json:"next_run_at,omitempty" toml:"next_run_at,omitempty" mapstructure:"next_run_at,omitempty"`
}

func (x *UpdateWorkflowScheduleByNameRequest) Reset() {
	*x = UpdateWorkflowScheduleByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowScheduleByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowScheduleByNameRequest) ProtoMessage() {}

func (x *UpdateWorkflowScheduleByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowScheduleByNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowScheduleByNameRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateWorkflowScheduleByNameRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UpdateWorkflowScheduleByNameRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *UpdateWorkflowScheduleByNameRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *UpdateWorkflowScheduleByNameRequest) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *UpdateWorkflowScheduleByNameRequest) GetParameters() *wrapperspb.BytesValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *UpdateWorkflowScheduleByNameRequest) GetRecurrence() *wrapperspb.StringValue {
	if x != nil {
		return x.Recurrence
	}
	return nil
}

func (x *UpdateWorkflowScheduleByNameRequest) GetNextRunAt() *timestamppb.Timestamp {
	if x != nil {
		return x.NextRunAt
	}
	return nil
}

type UpdateWorkflowScheduleByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateWorkflowScheduleByNameResponse) Reset() {
	*x = UpdateWorkflowScheduleByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkflowScheduleByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowScheduleByNameResponse) ProtoMessage() {}

func (x *UpdateWorkflowScheduleByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowScheduleByNameResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowScheduleByNameResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{25}
}

type GetWorkflowInstanceByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	InstanceName string `protobuf:"bytes,2,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty" toml:"instance_name,omitempty" mapstructure:"instance_name,omitempty"`
	WorkflowName string `protobuf:"bytes,3,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty" toml:"workflow_name,omitempty" mapstructure:"workflow_name,omitempty"`
}

func (x *GetWorkflowInstanceByNameRequest) Reset() {
	*x = GetWorkflowInstanceByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowInstanceByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowInstanceByNameRequest) ProtoMessage() {}

func (x *GetWorkflowInstanceByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowInstanceByNameRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowInstanceByNameRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{26}
}

func (x *GetWorkflowInstanceByNameRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetWorkflowInstanceByNameRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *GetWorkflowInstanceByNameRequest) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

type GetWorkflowInstanceByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowInstance *WorkflowInstance `protobuf:"bytes,1,opt,name=workflow_instance,json=workflowInstance,proto3" json:"workflow_instance,omitempty" toml:"workflow_instance,omitempty" mapstructure:"workflow_instance,omitempty"`
}

func (x *GetWorkflowInstanceByNameResponse) Reset() {
	*x = GetWorkflowInstanceByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkflowInstanceByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowInstanceByNameResponse) ProtoMessage() {}

func (x *GetWorkflowInstanceByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowInstanceByNameResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowInstanceByNameResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{27}
}

func (x *GetWorkflowInstanceByNameResponse) GetWorkflowInstance() *WorkflowInstance {
	if x != nil {
		return x.WorkflowInstance
	}
	return nil
}

type ListWorkflowInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string                  `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	WorkflowName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=workflow_name,json=workflowName,proto3" json:"workflow_name,omitempty" toml:"workflow_name,omitempty" mapstructure:"workflow_name,omitempty"`
	InstanceName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty" toml:"instance_name,omitempty" mapstructure:"instance_name,omitempty"`
	IsRunning    *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty" toml:"is_running,omitempty" mapstructure:"is_running,omitempty"`
}

func (x *ListWorkflowInstancesRequest) Reset() {
	*x = ListWorkflowInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowInstancesRequest) ProtoMessage() {}

func (x *ListWorkflowInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowInstancesRequest) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{28}
}

func (x *ListWorkflowInstancesRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ListWorkflowInstancesRequest) GetWorkflowName() *wrapperspb.StringValue {
	if x != nil {
		return x.WorkflowName
	}
	return nil
}

func (x *ListWorkflowInstancesRequest) GetInstanceName() *wrapperspb.StringValue {
	if x != nil {
		return x.InstanceName
	}
	return nil
}

func (x *ListWorkflowInstancesRequest) GetIsRunning() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsRunning
	}
	return nil
}

type ListWorkflowInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowInstance *WorkflowInstance `protobuf:"bytes,1,opt,name=workflow_instance,json=workflowInstance,proto3" json:"workflow_instance,omitempty" toml:"workflow_instance,omitempty" mapstructure:"workflow_instance,omitempty"`
}

func (x *ListWorkflowInstancesResponse) Reset() {
	*x = ListWorkflowInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowInstancesResponse) ProtoMessage() {}

func (x *ListWorkflowInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListWorkflowInstancesResponse) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{29}
}

func (x *ListWorkflowInstancesResponse) GetWorkflowInstance() *WorkflowInstance {
	if x != nil {
		return x.WorkflowInstance
	}
	return nil
}

type DequeueWorkflowRequest_Dequeue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain        string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	WorkflowNames []string `protobuf:"bytes,2,rep,name=workflow_names,json=workflowNames,proto3" json:"workflow_names,omitempty" toml:"workflow_names,omitempty" mapstructure:"workflow_names,omitempty"`
}

func (x *DequeueWorkflowRequest_Dequeue) Reset() {
	*x = DequeueWorkflowRequest_Dequeue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowRequest_Dequeue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowRequest_Dequeue) ProtoMessage() {}

func (x *DequeueWorkflowRequest_Dequeue) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowRequest_Dequeue.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowRequest_Dequeue) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{5, 0}
}

func (x *DequeueWorkflowRequest_Dequeue) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DequeueWorkflowRequest_Dequeue) GetWorkflowNames() []string {
	if x != nil {
		return x.WorkflowNames
	}
	return nil
}

type DequeueWorkflowRequest_Continue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte  `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty" toml:"payload,omitempty" mapstructure:"payload,omitempty"`
	Tasks   []*Task `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty" toml:"tasks,omitempty" mapstructure:"tasks,omitempty"`
}

func (x *DequeueWorkflowRequest_Continue) Reset() {
	*x = DequeueWorkflowRequest_Continue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowRequest_Continue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowRequest_Continue) ProtoMessage() {}

func (x *DequeueWorkflowRequest_Continue) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowRequest_Continue.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowRequest_Continue) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{5, 1}
}

func (x *DequeueWorkflowRequest_Continue) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DequeueWorkflowRequest_Continue) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type DequeueWorkflowRequest_Fail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty" toml:"err,omitempty" mapstructure:"err,omitempty"`
}

func (x *DequeueWorkflowRequest_Fail) Reset() {
	*x = DequeueWorkflowRequest_Fail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowRequest_Fail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowRequest_Fail) ProtoMessage() {}

func (x *DequeueWorkflowRequest_Fail) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowRequest_Fail.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowRequest_Fail) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{5, 2}
}

func (x *DequeueWorkflowRequest_Fail) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type DequeueWorkflowRequest_Done struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty" toml:"result,omitempty" mapstructure:"result,omitempty"`
}

func (x *DequeueWorkflowRequest_Done) Reset() {
	*x = DequeueWorkflowRequest_Done{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowRequest_Done) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowRequest_Done) ProtoMessage() {}

func (x *DequeueWorkflowRequest_Done) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowRequest_Done.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowRequest_Done) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{5, 3}
}

func (x *DequeueWorkflowRequest_Done) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type DequeueWorkflowChunkRequest_Dequeue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain        string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	WorkflowNames []string `protobuf:"bytes,2,rep,name=workflow_names,json=workflowNames,proto3" json:"workflow_names,omitempty" toml:"workflow_names,omitempty" mapstructure:"workflow_names,omitempty"`
}

func (x *DequeueWorkflowChunkRequest_Dequeue) Reset() {
	*x = DequeueWorkflowChunkRequest_Dequeue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowChunkRequest_Dequeue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowChunkRequest_Dequeue) ProtoMessage() {}

func (x *DequeueWorkflowChunkRequest_Dequeue) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowChunkRequest_Dequeue.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowChunkRequest_Dequeue) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DequeueWorkflowChunkRequest_Dequeue) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DequeueWorkflowChunkRequest_Dequeue) GetWorkflowNames() []string {
	if x != nil {
		return x.WorkflowNames
	}
	return nil
}

type DequeueWorkflowChunkRequest_Continue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte  `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty" toml:"payload,omitempty" mapstructure:"payload,omitempty"`
	Tasks   []*Task `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty" toml:"tasks,omitempty" mapstructure:"tasks,omitempty"`
}

func (x *DequeueWorkflowChunkRequest_Continue) Reset() {
	*x = DequeueWorkflowChunkRequest_Continue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowChunkRequest_Continue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowChunkRequest_Continue) ProtoMessage() {}

func (x *DequeueWorkflowChunkRequest_Continue) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowChunkRequest_Continue.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowChunkRequest_Continue) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{6, 1}
}

func (x *DequeueWorkflowChunkRequest_Continue) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DequeueWorkflowChunkRequest_Continue) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type DequeueWorkflowChunkRequest_Fail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty" toml:"err,omitempty" mapstructure:"err,omitempty"`
}

func (x *DequeueWorkflowChunkRequest_Fail) Reset() {
	*x = DequeueWorkflowChunkRequest_Fail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowChunkRequest_Fail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowChunkRequest_Fail) ProtoMessage() {}

func (x *DequeueWorkflowChunkRequest_Fail) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowChunkRequest_Fail.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowChunkRequest_Fail) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{6, 2}
}

func (x *DequeueWorkflowChunkRequest_Fail) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type DequeueWorkflowChunkRequest_Done struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty" toml:"result,omitempty" mapstructure:"result,omitempty"`
}

func (x *DequeueWorkflowChunkRequest_Done) Reset() {
	*x = DequeueWorkflowChunkRequest_Done{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowChunkRequest_Done) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowChunkRequest_Done) ProtoMessage() {}

func (x *DequeueWorkflowChunkRequest_Done) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowChunkRequest_Done.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowChunkRequest_Done) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{6, 3}
}

func (x *DequeueWorkflowChunkRequest_Done) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type DequeueWorkflowResponse_Dequeue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *WorkflowInstance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty" toml:"instance,omitempty" mapstructure:"instance,omitempty"`
	Event    *WorkflowEvent    `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty" toml:"event,omitempty" mapstructure:"event,omitempty"`
}

func (x *DequeueWorkflowResponse_Dequeue) Reset() {
	*x = DequeueWorkflowResponse_Dequeue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowResponse_Dequeue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowResponse_Dequeue) ProtoMessage() {}

func (x *DequeueWorkflowResponse_Dequeue) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowResponse_Dequeue.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowResponse_Dequeue) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{7, 0}
}

func (x *DequeueWorkflowResponse_Dequeue) GetInstance() *WorkflowInstance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *DequeueWorkflowResponse_Dequeue) GetEvent() *WorkflowEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type DequeueWorkflowResponse_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty" toml:"err,omitempty" mapstructure:"err,omitempty"`
}

func (x *DequeueWorkflowResponse_Status) Reset() {
	*x = DequeueWorkflowResponse_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowResponse_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowResponse_Status) ProtoMessage() {}

func (x *DequeueWorkflowResponse_Status) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowResponse_Status.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowResponse_Status) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{7, 1}
}

func (x *DequeueWorkflowResponse_Status) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type DequeueWorkflowResponse_Committed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DequeueWorkflowResponse_Committed) Reset() {
	*x = DequeueWorkflowResponse_Committed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueWorkflowResponse_Committed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueWorkflowResponse_Committed) ProtoMessage() {}

func (x *DequeueWorkflowResponse_Committed) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueWorkflowResponse_Committed.ProtoReflect.Descriptor instead.
func (*DequeueWorkflowResponse_Committed) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{7, 2}
}

type DequeueTaskRequest_Dequeue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain   string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" toml:"domain,omitempty" mapstructure:"domain,omitempty"`
	TaskName string `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty" toml:"task_name,omitempty" mapstructure:"task_name,omitempty"`
}

func (x *DequeueTaskRequest_Dequeue) Reset() {
	*x = DequeueTaskRequest_Dequeue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueTaskRequest_Dequeue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueTaskRequest_Dequeue) ProtoMessage() {}

func (x *DequeueTaskRequest_Dequeue) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueTaskRequest_Dequeue.ProtoReflect.Descriptor instead.
func (*DequeueTaskRequest_Dequeue) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{15, 0}
}

func (x *DequeueTaskRequest_Dequeue) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DequeueTaskRequest_Dequeue) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type DequeueTaskRequest_Fail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty" toml:"error,omitempty" mapstructure:"error,omitempty"`
}

func (x *DequeueTaskRequest_Fail) Reset() {
	*x = DequeueTaskRequest_Fail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueTaskRequest_Fail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueTaskRequest_Fail) ProtoMessage() {}

func (x *DequeueTaskRequest_Fail) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueTaskRequest_Fail.ProtoReflect.Descriptor instead.
func (*DequeueTaskRequest_Fail) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{15, 1}
}

func (x *DequeueTaskRequest_Fail) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DequeueTaskRequest_Succeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty" toml:"result,omitempty" mapstructure:"result,omitempty"`
}

func (x *DequeueTaskRequest_Succeed) Reset() {
	*x = DequeueTaskRequest_Succeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueTaskRequest_Succeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueTaskRequest_Succeed) ProtoMessage() {}

func (x *DequeueTaskRequest_Succeed) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueTaskRequest_Succeed.ProtoReflect.Descriptor instead.
func (*DequeueTaskRequest_Succeed) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{15, 2}
}

func (x *DequeueTaskRequest_Succeed) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type DequeueTaskResponse_Dequeue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty" toml:"task,omitempty" mapstructure:"task,omitempty"`
}

func (x *DequeueTaskResponse_Dequeue) Reset() {
	*x = DequeueTaskResponse_Dequeue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueTaskResponse_Dequeue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueTaskResponse_Dequeue) ProtoMessage() {}

func (x *DequeueTaskResponse_Dequeue) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueTaskResponse_Dequeue.ProtoReflect.Descriptor instead.
func (*DequeueTaskResponse_Dequeue) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{16, 0}
}

func (x *DequeueTaskResponse_Dequeue) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type DequeueTaskResponse_Cancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty" toml:"err,omitempty" mapstructure:"err,omitempty"`
}

func (x *DequeueTaskResponse_Cancel) Reset() {
	*x = DequeueTaskResponse_Cancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueTaskResponse_Cancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueTaskResponse_Cancel) ProtoMessage() {}

func (x *DequeueTaskResponse_Cancel) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueTaskResponse_Cancel.ProtoReflect.Descriptor instead.
func (*DequeueTaskResponse_Cancel) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{16, 1}
}

func (x *DequeueTaskResponse_Cancel) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type DequeueTaskResponse_Committed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DequeueTaskResponse_Committed) Reset() {
	*x = DequeueTaskResponse_Committed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_cereal_cereal_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueTaskResponse_Committed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueTaskResponse_Committed) ProtoMessage() {}

func (x *DequeueTaskResponse_Committed) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_cereal_cereal_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueTaskResponse_Committed.ProtoReflect.Descriptor instead.
func (*DequeueTaskResponse_Committed) Descriptor() ([]byte, []int) {
	return file_interservice_cereal_cereal_proto_rawDescGZIP(), []int{16, 2}
}

var File_interservice_cereal_cereal_proto protoreflect.FileDescriptor

var file_interservice_cereal_cereal_proto_rawDesc = []byte{
	0x0a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x65, 0x72, 0x65, 0x61, 0x6c, 0x2f, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1a, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbd, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x4b, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf0, 0x01, 0x0a,
	0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22,
	0x98, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x0d, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65,
	0x72, 0x65, 0x61, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd2, 0x04, 0x0a, 0x16, 0x44, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61,
	0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61,
	0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c,
	0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04,
	0x66, 0x61, 0x69, 0x6c, 0x1a, 0x48, 0x0a, 0x07, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x5c,
	0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x18, 0x0a, 0x04,
	0x46, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0x1e, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x22, 0xeb, 0x04,
	0x0a, 0x1b, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a,
	0x07, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63,
	0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x52,
	0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x66, 0x61,
	0x69, 0x6c, 0x1a, 0x48, 0x0a, 0x07, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x08,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x18, 0x0a, 0x04, 0x46, 0x61,
	0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x1a, 0x1e, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x22, 0xee, 0x03, 0x0a, 0x17,
	0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63,
	0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x1a, 0x94, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x48, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1a, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0x0b, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x34, 0x0a, 0x1c,
	0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x19, 0x0a, 0x17, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x15, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x77, 0x0a, 0x13, 0x4b, 0x69, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x4b, 0x69, 0x6c, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8f, 0x03, 0x0a, 0x12, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63,
	0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12,
	0x49, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x1a, 0x3e, 0x0a, 0x07, 0x44, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1c, 0x0a, 0x04, 0x46, 0x61,
	0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x21, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x22, 0x88, 0x03, 0x0a, 0x13, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x64, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x50, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61,
	0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x1a, 0x3f, 0x0a, 0x07,
	0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65,
	0x61, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1a, 0x0a,
	0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0x0b, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x22, 0xb1, 0x02,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x41,
	0x74, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xba, 0x03, 0x0a, 0x08,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x44, 0x75, 0x65, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75,
	0x6d, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x22, 0x84, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22,
	0xf4, 0x02, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x52, 0x75, 0x6e, 0x41, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84,
	0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65,
	0x61, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x41,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0x7a, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x89, 0x0d, 0x0a, 0x0d,
	0x43, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a,
	0x0f, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x45, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61,
	0x6c, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0f, 0x44, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x44, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e,
	0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x0e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x31, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x71, 0x0a, 0x0c, 0x4b, 0x69, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e,
	0x4b, 0x69, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c,
	0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x0b, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61,
	0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61,
	0x6c, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x8f, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61,
	0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65,
	0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63,
	0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63,
	0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65,
	0x72, 0x65, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_interservice_cereal_cereal_proto_rawDescOnce sync.Once
	file_interservice_cereal_cereal_proto_rawDescData = file_interservice_cereal_cereal_proto_rawDesc
)

func file_interservice_cereal_cereal_proto_rawDescGZIP() []byte {
	file_interservice_cereal_cereal_proto_rawDescOnce.Do(func() {
		file_interservice_cereal_cereal_proto_rawDescData = protoimpl.X.CompressGZIP(file_interservice_cereal_cereal_proto_rawDescData)
	})
	return file_interservice_cereal_cereal_proto_rawDescData
}

var file_interservice_cereal_cereal_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_interservice_cereal_cereal_proto_goTypes = []interface{}{
	(*Task)(nil),                                 // 0: chef.automate.infra.cereal.Task
	(*TaskMetadata)(nil),                         // 1: chef.automate.infra.cereal.TaskMetadata
	(*WorkflowInstance)(nil),                     // 2: chef.automate.infra.cereal.WorkflowInstance
	(*TaskResult)(nil),                           // 3: chef.automate.infra.cereal.TaskResult
	(*WorkflowEvent)(nil),                        // 4: chef.automate.infra.cereal.WorkflowEvent
	(*DequeueWorkflowRequest)(nil),               // 5: chef.automate.infra.cereal.DequeueWorkflowRequest
	(*DequeueWorkflowChunkRequest)(nil),          // 6: chef.automate.infra.cereal.DequeueWorkflowChunkRequest
	(*DequeueWorkflowResponse)(nil),              // 7: chef.automate.infra.cereal.DequeueWorkflowResponse
	(*DequeueWorkflowChunkResponse)(nil),         // 8: chef.automate.infra.cereal.DequeueWorkflowChunkResponse
	(*EnqueueWorkflowRequest)(nil),               // 9: chef.automate.infra.cereal.EnqueueWorkflowRequest
	(*EnqueueWorkflowResponse)(nil),              // 10: chef.automate.infra.cereal.EnqueueWorkflowResponse
	(*CancelWorkflowRequest)(nil),                // 11: chef.automate.infra.cereal.CancelWorkflowRequest
	(*CancelWorkflowResponse)(nil),               // 12: chef.automate.infra.cereal.CancelWorkflowResponse
	(*KillWorkflowRequest)(nil),                  // 13: chef.automate.infra.cereal.KillWorkflowRequest
	(*KillWorkflowResponse)(nil),                 // 14: chef.automate.infra.cereal.KillWorkflowResponse
	(*DequeueTaskRequest)(nil),                   // 15: chef.automate.infra.cereal.DequeueTaskRequest
	(*DequeueTaskResponse)(nil),                  // 16: chef.automate.infra.cereal.DequeueTaskResponse
	(*CreateWorkflowScheduleRequest)(nil),        // 17: chef.automate.infra.cereal.CreateWorkflowScheduleRequest
	(*CreateWorkflowScheduleResponse)(nil),       // 18: chef.automate.infra.cereal.CreateWorkflowScheduleResponse
	(*ListWorkflowSchedulesRequest)(nil),         // 19: chef.automate.infra.cereal.ListWorkflowSchedulesRequest
	(*Schedule)(nil),                             // 20: chef.automate.infra.cereal.Schedule
	(*ListWorkflowSchedulesResponse)(nil),        // 21: chef.automate.infra.cereal.ListWorkflowSchedulesResponse
	(*GetWorkflowScheduleByNameRequest)(nil),     // 22: chef.automate.infra.cereal.GetWorkflowScheduleByNameRequest
	(*GetWorkflowScheduleByNameResponse)(nil),    // 23: chef.automate.infra.cereal.GetWorkflowScheduleByNameResponse
	(*UpdateWorkflowScheduleByNameRequest)(nil),  // 24: chef.automate.infra.cereal.UpdateWorkflowScheduleByNameRequest
	(*UpdateWorkflowScheduleByNameResponse)(nil), // 25: chef.automate.infra.cereal.UpdateWorkflowScheduleByNameResponse
	(*GetWorkflowInstanceByNameRequest)(nil),     // 26: chef.automate.infra.cereal.GetWorkflowInstanceByNameRequest
	(*GetWorkflowInstanceByNameResponse)(nil),    // 27: chef.automate.infra.cereal.GetWorkflowInstanceByNameResponse
	(*ListWorkflowInstancesRequest)(nil),         // 28: chef.automate.infra.cereal.ListWorkflowInstancesRequest
	(*ListWorkflowInstancesResponse)(nil),        // 29: chef.automate.infra.cereal.ListWorkflowInstancesResponse
	(*DequeueWorkflowRequest_Dequeue)(nil),       // 30: chef.automate.infra.cereal.DequeueWorkflowRequest.Dequeue
	(*DequeueWorkflowRequest_Continue)(nil),      // 31: chef.automate.infra.cereal.DequeueWorkflowRequest.Continue
	(*DequeueWorkflowRequest_Fail)(nil),          // 32: chef.automate.infra.cereal.DequeueWorkflowRequest.Fail
	(*DequeueWorkflowRequest_Done)(nil),          // 33: chef.automate.infra.cereal.DequeueWorkflowRequest.Done
	(*DequeueWorkflowChunkRequest_Dequeue)(nil),  // 34: chef.automate.infra.cereal.DequeueWorkflowChunkRequest.Dequeue
	(*DequeueWorkflowChunkRequest_Continue)(nil), // 35: chef.automate.infra.cereal.DequeueWorkflowChunkRequest.Continue
	(*DequeueWorkflowChunkRequest_Fail)(nil),     // 36: chef.automate.infra.cereal.DequeueWorkflowChunkRequest.Fail
	(*DequeueWorkflowChunkRequest_Done)(nil),     // 37: chef.automate.infra.cereal.DequeueWorkflowChunkRequest.Done
	(*DequeueWorkflowResponse_Dequeue)(nil),      // 38: chef.automate.infra.cereal.DequeueWorkflowResponse.Dequeue
	(*DequeueWorkflowResponse_Status)(nil),       // 39: chef.automate.infra.cereal.DequeueWorkflowResponse.Status
	(*DequeueWorkflowResponse_Committed)(nil),    // 40: chef.automate.infra.cereal.DequeueWorkflowResponse.Committed
	(*DequeueTaskRequest_Dequeue)(nil),           // 41: chef.automate.infra.cereal.DequeueTaskRequest.Dequeue
	(*DequeueTaskRequest_Fail)(nil),              // 42: chef.automate.infra.cereal.DequeueTaskRequest.Fail
	(*DequeueTaskRequest_Succeed)(nil),           // 43: chef.automate.infra.cereal.DequeueTaskRequest.Succeed
	(*DequeueTaskResponse_Dequeue)(nil),          // 44: chef.automate.infra.cereal.DequeueTaskResponse.Dequeue
	(*DequeueTaskResponse_Cancel)(nil),           // 45: chef.automate.infra.cereal.DequeueTaskResponse.Cancel
	(*DequeueTaskResponse_Committed)(nil),        // 46: chef.automate.infra.cereal.DequeueTaskResponse.Committed
	(*timestamppb.Timestamp)(nil),                // 47: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),                 // 48: google.protobuf.BoolValue
	(*wrapperspb.BytesValue)(nil),                // 49: google.protobuf.BytesValue
	(*wrapperspb.StringValue)(nil),               // 50: google.protobuf.StringValue
}
var file_interservice_cereal_cereal_proto_depIdxs = []int32{
	47, // 0: chef.automate.infra.cereal.Task.start_after:type_name -> google.protobuf.Timestamp
	1,  // 1: chef.automate.infra.cereal.Task.metadata:type_name -> chef.automate.infra.cereal.TaskMetadata
	47, // 2: chef.automate.infra.cereal.TaskMetadata.enqueued_at:type_name -> google.protobuf.Timestamp
	3,  // 3: chef.automate.infra.cereal.WorkflowEvent.task_result:type_name -> chef.automate.infra.cereal.TaskResult
	47, // 4: chef.automate.infra.cereal.WorkflowEvent.enqueued_at:type_name -> google.protobuf.Timestamp
	30, // 5: chef.automate.infra.cereal.DequeueWorkflowRequest.dequeue:type_name -> chef.automate.infra.cereal.DequeueWorkflowRequest.Dequeue
	31, // 6: chef.automate.infra.cereal.DequeueWorkflowRequest.continue:type_name -> chef.automate.infra.cereal.DequeueWorkflowRequest.Continue
	33, // 7: chef.automate.infra.cereal.DequeueWorkflowRequest.done:type_name -> chef.automate.infra.cereal.DequeueWorkflowRequest.Done
	32, // 8: chef.automate.infra.cereal.DequeueWorkflowRequest.fail:type_name -> chef.automate.infra.cereal.DequeueWorkflowRequest.Fail
	34, // 9: chef.automate.infra.cereal.DequeueWorkflowChunkRequest.dequeue:type_name -> chef.automate.infra.cereal.DequeueWorkflowChunkRequest.Dequeue
	35, // 10: chef.automate.infra.cereal.DequeueWorkflowChunkRequest.continue:type_name -> chef.automate.infra.cereal.DequeueWorkflowChunkRequest.Continue
	37, // 11: chef.automate.infra.cereal.DequeueWorkflowChunkRequest.done:type_name -> chef.automate.infra.cereal.DequeueWorkflowChunkRequest.Done
	36, // 12: chef.automate.infra.cereal.DequeueWorkflowChunkRequest.fail:type_name -> chef.automate.infra.cereal.DequeueWorkflowChunkRequest.Fail
	38, // 13: chef.automate.infra.cereal.DequeueWorkflowResponse.dequeue:type_name -> chef.automate.infra.cereal.DequeueWorkflowResponse.Dequeue
	39, // 14: chef.automate.infra.cereal.DequeueWorkflowResponse.status:type_name -> chef.automate.infra.cereal.DequeueWorkflowResponse.Status
	40, // 15: chef.automate.infra.cereal.DequeueWorkflowResponse.committed:type_name -> chef.automate.infra.cereal.DequeueWorkflowResponse.Committed
	41, // 16: chef.automate.infra.cereal.DequeueTaskRequest.dequeue:type_name -> chef.automate.infra.cereal.DequeueTaskRequest.Dequeue
	43, // 17: chef.automate.infra.cereal.DequeueTaskRequest.succeed:type_name -> chef.automate.infra.cereal.DequeueTaskRequest.Succeed
	42, // 18: chef.automate.infra.cereal.DequeueTaskRequest.fail:type_name -> chef.automate.infra.cereal.DequeueTaskRequest.Fail
	44, // 19: chef.automate.infra.cereal.DequeueTaskResponse.dequeue:type_name -> chef.automate.infra.cereal.DequeueTaskResponse.Dequeue
	45, // 20: chef.automate.infra.cereal.DequeueTaskResponse.cancel:type_name -> chef.automate.infra.cereal.DequeueTaskResponse.Cancel
	46, // 21: chef.automate.infra.cereal.DequeueTaskResponse.committed:type_name -> chef.automate.infra.cereal.DequeueTaskResponse.Committed
	47, // 22: chef.automate.infra.cereal.CreateWorkflowScheduleRequest.next_run_at:type_name -> google.protobuf.Timestamp
	47, // 23: chef.automate.infra.cereal.Schedule.next_due_at:type_name -> google.protobuf.Timestamp
	47, // 24: chef.automate.infra.cereal.Schedule.last_enqueued_at:type_name -> google.protobuf.Timestamp
	47, // 25: chef.automate.infra.cereal.Schedule.last_start:type_name -> google.protobuf.Timestamp
	47, // 26: chef.automate.infra.cereal.Schedule.last_end:type_name -> google.protobuf.Timestamp
	20, // 27: chef.automate.infra.cereal.ListWorkflowSchedulesResponse.schedule:type_name -> chef.automate.infra.cereal.Schedule
	20, // 28: chef.automate.infra.cereal.GetWorkflowScheduleByNameResponse.schedule:type_name -> chef.automate.infra.cereal.Schedule
	48, // 29: chef.automate.infra.cereal.UpdateWorkflowScheduleByNameRequest.enabled:type_name -> google.protobuf.BoolValue
	49, // 30: chef.automate.infra.cereal.UpdateWorkflowScheduleByNameRequest.parameters:type_name -> google.protobuf.BytesValue
	50, // 31: chef.automate.infra.cereal.UpdateWorkflowScheduleByNameRequest.recurrence:type_name -> google.protobuf.StringValue
	47, // 32: chef.automate.infra.cereal.UpdateWorkflowScheduleByNameRequest.next_run_at:type_name -> google.protobuf.Timestamp
	2,  // 33: chef.automate.infra.cereal.GetWorkflowInstanceByNameResponse.workflow_instance:type_name -> chef.automate.infra.cereal.WorkflowInstance
	50, // 34: chef.automate.infra.cereal.ListWorkflowInstancesRequest.workflow_name:type_name -> google.protobuf.StringValue
	50, // 35: chef.automate.infra.cereal.ListWorkflowInstancesRequest.instance_name:type_name -> google.protobuf.StringValue
	48, // 36: chef.automate.infra.cereal.ListWorkflowInstancesRequest.is_running:type_name -> google.protobuf.BoolValue
	2,  // 37: chef.automate.infra.cereal.ListWorkflowInstancesResponse.workflow_instance:type_name -> chef.automate.infra.cereal.WorkflowInstance
	0,  // 38: chef.automate.infra.cereal.DequeueWorkflowRequest.Continue.tasks:type_name -> chef.automate.infra.cereal.Task
	0,  // 39: chef.automate.infra.cereal.DequeueWorkflowChunkRequest.Continue.tasks:type_name -> chef.automate.infra.cereal.Task
	2,  // 40: chef.automate.infra.cereal.DequeueWorkflowResponse.Dequeue.instance:type_name -> chef.automate.infra.cereal.WorkflowInstance
	4,  // 41: chef.automate.infra.cereal.DequeueWorkflowResponse.Dequeue.event:type_name -> chef.automate.infra.cereal.WorkflowEvent
	0,  // 42: chef.automate.infra.cereal.DequeueTaskResponse.Dequeue.task:type_name -> chef.automate.infra.cereal.Task
	9,  // 43: chef.automate.infra.cereal.CerealService.EnqueueWorkflow:input_type -> chef.automate.infra.cereal.EnqueueWorkflowRequest
	5,  // 44: chef.automate.infra.cereal.CerealService.DequeueWorkflow:input_type -> chef.automate.infra.cereal.DequeueWorkflowRequest
	6,  // 45: chef.automate.infra.cereal.CerealService.DequeueWorkflowChunk:input_type -> chef.automate.infra.cereal.DequeueWorkflowChunkRequest
	11, // 46: chef.automate.infra.cereal.CerealService.CancelWorkflow:input_type -> chef.automate.infra.cereal.CancelWorkflowRequest
	13, // 47: chef.automate.infra.cereal.CerealService.KillWorkflow:input_type -> chef.automate.infra.cereal.KillWorkflowRequest
	15, // 48: chef.automate.infra.cereal.CerealService.DequeueTask:input_type -> chef.automate.infra.cereal.DequeueTaskRequest
	17, // 49: chef.automate.infra.cereal.CerealService.CreateWorkflowSchedule:input_type -> chef.automate.infra.cereal.CreateWorkflowScheduleRequest
	19, // 50: chef.automate.infra.cereal.CerealService.ListWorkflowSchedules:input_type -> chef.automate.infra.cereal.ListWorkflowSchedulesRequest
	22, // 51: chef.automate.infra.cereal.CerealService.GetWorkflowScheduleByName:input_type -> chef.automate.infra.cereal.GetWorkflowScheduleByNameRequest
	24, // 52: chef.automate.infra.cereal.CerealService.UpdateWorkflowScheduleByName:input_type -> chef.automate.infra.cereal.UpdateWorkflowScheduleByNameRequest
	26, // 53: chef.automate.infra.cereal.CerealService.GetWorkflowInstanceByName:input_type -> chef.automate.infra.cereal.GetWorkflowInstanceByNameRequest
	28, // 54: chef.automate.infra.cereal.CerealService.ListWorkflowInstances:input_type -> chef.automate.infra.cereal.ListWorkflowInstancesRequest
	10, // 55: chef.automate.infra.cereal.CerealService.EnqueueWorkflow:output_type -> chef.automate.infra.cereal.EnqueueWorkflowResponse
	7,  // 56: chef.automate.infra.cereal.CerealService.DequeueWorkflow:output_type -> chef.automate.infra.cereal.DequeueWorkflowResponse
	8,  // 57: chef.automate.infra.cereal.CerealService.DequeueWorkflowChunk:output_type -> chef.automate.infra.cereal.DequeueWorkflowChunkResponse
	12, // 58: chef.automate.infra.cereal.CerealService.CancelWorkflow:output_type -> chef.automate.infra.cereal.CancelWorkflowResponse
	14, // 59: chef.automate.infra.cereal.CerealService.KillWorkflow:output_type -> chef.automate.infra.cereal.KillWorkflowResponse
	16, // 60: chef.automate.infra.cereal.CerealService.DequeueTask:output_type -> chef.automate.infra.cereal.DequeueTaskResponse
	18, // 61: chef.automate.infra.cereal.CerealService.CreateWorkflowSchedule:output_type -> chef.automate.infra.cereal.CreateWorkflowScheduleResponse
	21, // 62: chef.automate.infra.cereal.CerealService.ListWorkflowSchedules:output_type -> chef.automate.infra.cereal.ListWorkflowSchedulesResponse
	23, // 63: chef.automate.infra.cereal.CerealService.GetWorkflowScheduleByName:output_type -> chef.automate.infra.cereal.GetWorkflowScheduleByNameResponse
	25, // 64: chef.automate.infra.cereal.CerealService.UpdateWorkflowScheduleByName:output_type -> chef.automate.infra.cereal.UpdateWorkflowScheduleByNameResponse
	27, // 65: chef.automate.infra.cereal.CerealService.GetWorkflowInstanceByName:output_type -> chef.automate.infra.cereal.GetWorkflowInstanceByNameResponse
	29, // 66: chef.automate.infra.cereal.CerealService.ListWorkflowInstances:output_type -> chef.automate.infra.cereal.ListWorkflowInstancesResponse
	55, // [55:67] is the sub-list for method output_type
	43, // [43:55] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_interservice_cereal_cereal_proto_init() }
func file_interservice_cereal_cereal_proto_init() {
	if File_interservice_cereal_cereal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interservice_cereal_cereal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillWorkflowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkflowScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowSchedulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowSchedulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowScheduleByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowScheduleByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowScheduleByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkflowScheduleByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowInstanceByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkflowInstanceByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowRequest_Dequeue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowRequest_Continue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowRequest_Fail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowRequest_Done); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowChunkRequest_Dequeue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowChunkRequest_Continue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowChunkRequest_Fail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowChunkRequest_Done); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowResponse_Dequeue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowResponse_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueWorkflowResponse_Committed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueTaskRequest_Dequeue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueTaskRequest_Fail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueTaskRequest_Succeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueTaskResponse_Dequeue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueTaskResponse_Cancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_cereal_cereal_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueTaskResponse_Committed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_interservice_cereal_cereal_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DequeueWorkflowRequest_Dequeue_)(nil),
		(*DequeueWorkflowRequest_Continue_)(nil),
		(*DequeueWorkflowRequest_Done_)(nil),
		(*DequeueWorkflowRequest_Fail_)(nil),
	}
	file_interservice_cereal_cereal_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*DequeueWorkflowChunkRequest_Dequeue_)(nil),
		(*DequeueWorkflowChunkRequest_Continue_)(nil),
		(*DequeueWorkflowChunkRequest_Done_)(nil),
		(*DequeueWorkflowChunkRequest_Fail_)(nil),
	}
	file_interservice_cereal_cereal_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*DequeueWorkflowResponse_Dequeue_)(nil),
		(*DequeueWorkflowResponse_Status_)(nil),
		(*DequeueWorkflowResponse_Committed_)(nil),
	}
	file_interservice_cereal_cereal_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*DequeueTaskRequest_Dequeue_)(nil),
		(*DequeueTaskRequest_Succeed_)(nil),
		(*DequeueTaskRequest_Fail_)(nil),
	}
	file_interservice_cereal_cereal_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*DequeueTaskResponse_Dequeue_)(nil),
		(*DequeueTaskResponse_Cancel_)(nil),
		(*DequeueTaskResponse_Committed_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_cereal_cereal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_cereal_cereal_proto_goTypes,
		DependencyIndexes: file_interservice_cereal_cereal_proto_depIdxs,
		MessageInfos:      file_interservice_cereal_cereal_proto_msgTypes,
	}.Build()
	File_interservice_cereal_cereal_proto = out.File
	file_interservice_cereal_cereal_proto_rawDesc = nil
	file_interservice_cereal_cereal_proto_goTypes = nil
	file_interservice_cereal_cereal_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CerealServiceClient is the client API for CerealService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CerealServiceClient interface {
	EnqueueWorkflow(ctx context.Context, in *EnqueueWorkflowRequest, opts ...grpc.CallOption) (*EnqueueWorkflowResponse, error)
	DequeueWorkflow(ctx context.Context, opts ...grpc.CallOption) (CerealService_DequeueWorkflowClient, error)
	DequeueWorkflowChunk(ctx context.Context, opts ...grpc.CallOption) (CerealService_DequeueWorkflowChunkClient, error)
	CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error)
	KillWorkflow(ctx context.Context, in *KillWorkflowRequest, opts ...grpc.CallOption) (*KillWorkflowResponse, error)
	DequeueTask(ctx context.Context, opts ...grpc.CallOption) (CerealService_DequeueTaskClient, error)
	CreateWorkflowSchedule(ctx context.Context, in *CreateWorkflowScheduleRequest, opts ...grpc.CallOption) (*CreateWorkflowScheduleResponse, error)
	ListWorkflowSchedules(ctx context.Context, in *ListWorkflowSchedulesRequest, opts ...grpc.CallOption) (CerealService_ListWorkflowSchedulesClient, error)
	GetWorkflowScheduleByName(ctx context.Context, in *GetWorkflowScheduleByNameRequest, opts ...grpc.CallOption) (*GetWorkflowScheduleByNameResponse, error)
	UpdateWorkflowScheduleByName(ctx context.Context, in *UpdateWorkflowScheduleByNameRequest, opts ...grpc.CallOption) (*UpdateWorkflowScheduleByNameResponse, error)
	GetWorkflowInstanceByName(ctx context.Context, in *GetWorkflowInstanceByNameRequest, opts ...grpc.CallOption) (*GetWorkflowInstanceByNameResponse, error)
	ListWorkflowInstances(ctx context.Context, in *ListWorkflowInstancesRequest, opts ...grpc.CallOption) (CerealService_ListWorkflowInstancesClient, error)
}

type cerealServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCerealServiceClient(cc grpc.ClientConnInterface) CerealServiceClient {
	return &cerealServiceClient{cc}
}

func (c *cerealServiceClient) EnqueueWorkflow(ctx context.Context, in *EnqueueWorkflowRequest, opts ...grpc.CallOption) (*EnqueueWorkflowResponse, error) {
	out := new(EnqueueWorkflowResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.infra.cereal.CerealService/EnqueueWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cerealServiceClient) DequeueWorkflow(ctx context.Context, opts ...grpc.CallOption) (CerealService_DequeueWorkflowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CerealService_serviceDesc.Streams[0], "/chef.automate.infra.cereal.CerealService/DequeueWorkflow", opts...)
	if err != nil {
		return nil, err
	}
	x := &cerealServiceDequeueWorkflowClient{stream}
	return x, nil
}

type CerealService_DequeueWorkflowClient interface {
	Send(*DequeueWorkflowRequest) error
	Recv() (*DequeueWorkflowResponse, error)
	grpc.ClientStream
}

type cerealServiceDequeueWorkflowClient struct {
	grpc.ClientStream
}

func (x *cerealServiceDequeueWorkflowClient) Send(m *DequeueWorkflowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cerealServiceDequeueWorkflowClient) Recv() (*DequeueWorkflowResponse, error) {
	m := new(DequeueWorkflowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cerealServiceClient) DequeueWorkflowChunk(ctx context.Context, opts ...grpc.CallOption) (CerealService_DequeueWorkflowChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CerealService_serviceDesc.Streams[1], "/chef.automate.infra.cereal.CerealService/DequeueWorkflowChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &cerealServiceDequeueWorkflowChunkClient{stream}
	return x, nil
}

type CerealService_DequeueWorkflowChunkClient interface {
	Send(*DequeueWorkflowChunkRequest) error
	Recv() (*DequeueWorkflowChunkResponse, error)
	grpc.ClientStream
}

type cerealServiceDequeueWorkflowChunkClient struct {
	grpc.ClientStream
}

func (x *cerealServiceDequeueWorkflowChunkClient) Send(m *DequeueWorkflowChunkRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cerealServiceDequeueWorkflowChunkClient) Recv() (*DequeueWorkflowChunkResponse, error) {
	m := new(DequeueWorkflowChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cerealServiceClient) CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error) {
	out := new(CancelWorkflowResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.infra.cereal.CerealService/CancelWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cerealServiceClient) KillWorkflow(ctx context.Context, in *KillWorkflowRequest, opts ...grpc.CallOption) (*KillWorkflowResponse, error) {
	out := new(KillWorkflowResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.infra.cereal.CerealService/KillWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cerealServiceClient) DequeueTask(ctx context.Context, opts ...grpc.CallOption) (CerealService_DequeueTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CerealService_serviceDesc.Streams[2], "/chef.automate.infra.cereal.CerealService/DequeueTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &cerealServiceDequeueTaskClient{stream}
	return x, nil
}

type CerealService_DequeueTaskClient interface {
	Send(*DequeueTaskRequest) error
	Recv() (*DequeueTaskResponse, error)
	grpc.ClientStream
}

type cerealServiceDequeueTaskClient struct {
	grpc.ClientStream
}

func (x *cerealServiceDequeueTaskClient) Send(m *DequeueTaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cerealServiceDequeueTaskClient) Recv() (*DequeueTaskResponse, error) {
	m := new(DequeueTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cerealServiceClient) CreateWorkflowSchedule(ctx context.Context, in *CreateWorkflowScheduleRequest, opts ...grpc.CallOption) (*CreateWorkflowScheduleResponse, error) {
	out := new(CreateWorkflowScheduleResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.infra.cereal.CerealService/CreateWorkflowSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cerealServiceClient) ListWorkflowSchedules(ctx context.Context, in *ListWorkflowSchedulesRequest, opts ...grpc.CallOption) (CerealService_ListWorkflowSchedulesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CerealService_serviceDesc.Streams[3], "/chef.automate.infra.cereal.CerealService/ListWorkflowSchedules", opts...)
	if err != nil {
		return nil, err
	}
	x := &cerealServiceListWorkflowSchedulesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CerealService_ListWorkflowSchedulesClient interface {
	Recv() (*ListWorkflowSchedulesResponse, error)
	grpc.ClientStream
}

type cerealServiceListWorkflowSchedulesClient struct {
	grpc.ClientStream
}

func (x *cerealServiceListWorkflowSchedulesClient) Recv() (*ListWorkflowSchedulesResponse, error) {
	m := new(ListWorkflowSchedulesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cerealServiceClient) GetWorkflowScheduleByName(ctx context.Context, in *GetWorkflowScheduleByNameRequest, opts ...grpc.CallOption) (*GetWorkflowScheduleByNameResponse, error) {
	out := new(GetWorkflowScheduleByNameResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.infra.cereal.CerealService/GetWorkflowScheduleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cerealServiceClient) UpdateWorkflowScheduleByName(ctx context.Context, in *UpdateWorkflowScheduleByNameRequest, opts ...grpc.CallOption) (*UpdateWorkflowScheduleByNameResponse, error) {
	out := new(UpdateWorkflowScheduleByNameResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.infra.cereal.CerealService/UpdateWorkflowScheduleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cerealServiceClient) GetWorkflowInstanceByName(ctx context.Context, in *GetWorkflowInstanceByNameRequest, opts ...grpc.CallOption) (*GetWorkflowInstanceByNameResponse, error) {
	out := new(GetWorkflowInstanceByNameResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.infra.cereal.CerealService/GetWorkflowInstanceByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cerealServiceClient) ListWorkflowInstances(ctx context.Context, in *ListWorkflowInstancesRequest, opts ...grpc.CallOption) (CerealService_ListWorkflowInstancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CerealService_serviceDesc.Streams[4], "/chef.automate.infra.cereal.CerealService/ListWorkflowInstances", opts...)
	if err != nil {
		return nil, err
	}
	x := &cerealServiceListWorkflowInstancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CerealService_ListWorkflowInstancesClient interface {
	Recv() (*ListWorkflowInstancesResponse, error)
	grpc.ClientStream
}

type cerealServiceListWorkflowInstancesClient struct {
	grpc.ClientStream
}

func (x *cerealServiceListWorkflowInstancesClient) Recv() (*ListWorkflowInstancesResponse, error) {
	m := new(ListWorkflowInstancesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CerealServiceServer is the server API for CerealService service.
type CerealServiceServer interface {
	EnqueueWorkflow(context.Context, *EnqueueWorkflowRequest) (*EnqueueWorkflowResponse, error)
	DequeueWorkflow(CerealService_DequeueWorkflowServer) error
	DequeueWorkflowChunk(CerealService_DequeueWorkflowChunkServer) error
	CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error)
	KillWorkflow(context.Context, *KillWorkflowRequest) (*KillWorkflowResponse, error)
	DequeueTask(CerealService_DequeueTaskServer) error
	CreateWorkflowSchedule(context.Context, *CreateWorkflowScheduleRequest) (*CreateWorkflowScheduleResponse, error)
	ListWorkflowSchedules(*ListWorkflowSchedulesRequest, CerealService_ListWorkflowSchedulesServer) error
	GetWorkflowScheduleByName(context.Context, *GetWorkflowScheduleByNameRequest) (*GetWorkflowScheduleByNameResponse, error)
	UpdateWorkflowScheduleByName(context.Context, *UpdateWorkflowScheduleByNameRequest) (*UpdateWorkflowScheduleByNameResponse, error)
	GetWorkflowInstanceByName(context.Context, *GetWorkflowInstanceByNameRequest) (*GetWorkflowInstanceByNameResponse, error)
	ListWorkflowInstances(*ListWorkflowInstancesRequest, CerealService_ListWorkflowInstancesServer) error
}

// UnimplementedCerealServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCerealServiceServer struct {
}

func (*UnimplementedCerealServiceServer) EnqueueWorkflow(context.Context, *EnqueueWorkflowRequest) (*EnqueueWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueWorkflow not implemented")
}
func (*UnimplementedCerealServiceServer) DequeueWorkflow(CerealService_DequeueWorkflowServer) error {
	return status.Errorf(codes.Unimplemented, "method DequeueWorkflow not implemented")
}
func (*UnimplementedCerealServiceServer) DequeueWorkflowChunk(CerealService_DequeueWorkflowChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method DequeueWorkflowChunk not implemented")
}
func (*UnimplementedCerealServiceServer) CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorkflow not implemented")
}
func (*UnimplementedCerealServiceServer) KillWorkflow(context.Context, *KillWorkflowRequest) (*KillWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillWorkflow not implemented")
}
func (*UnimplementedCerealServiceServer) DequeueTask(CerealService_DequeueTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method DequeueTask not implemented")
}
func (*UnimplementedCerealServiceServer) CreateWorkflowSchedule(context.Context, *CreateWorkflowScheduleRequest) (*CreateWorkflowScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflowSchedule not implemented")
}
func (*UnimplementedCerealServiceServer) ListWorkflowSchedules(*ListWorkflowSchedulesRequest, CerealService_ListWorkflowSchedulesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWorkflowSchedules not implemented")
}
func (*UnimplementedCerealServiceServer) GetWorkflowScheduleByName(context.Context, *GetWorkflowScheduleByNameRequest) (*GetWorkflowScheduleByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowScheduleByName not implemented")
}
func (*UnimplementedCerealServiceServer) UpdateWorkflowScheduleByName(context.Context, *UpdateWorkflowScheduleByNameRequest) (*UpdateWorkflowScheduleByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowScheduleByName not implemented")
}
func (*UnimplementedCerealServiceServer) GetWorkflowInstanceByName(context.Context, *GetWorkflowInstanceByNameRequest) (*GetWorkflowInstanceByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowInstanceByName not implemented")
}
func (*UnimplementedCerealServiceServer) ListWorkflowInstances(*ListWorkflowInstancesRequest, CerealService_ListWorkflowInstancesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWorkflowInstances not implemented")
}

func RegisterCerealServiceServer(s *grpc.Server, srv CerealServiceServer) {
	s.RegisterService(&_CerealService_serviceDesc, srv)
}

func _CerealService_EnqueueWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerealServiceServer).EnqueueWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.infra.cereal.CerealService/EnqueueWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerealServiceServer).EnqueueWorkflow(ctx, req.(*EnqueueWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CerealService_DequeueWorkflow_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CerealServiceServer).DequeueWorkflow(&cerealServiceDequeueWorkflowServer{stream})
}

type CerealService_DequeueWorkflowServer interface {
	Send(*DequeueWorkflowResponse) error
	Recv() (*DequeueWorkflowRequest, error)
	grpc.ServerStream
}

type cerealServiceDequeueWorkflowServer struct {
	grpc.ServerStream
}

func (x *cerealServiceDequeueWorkflowServer) Send(m *DequeueWorkflowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cerealServiceDequeueWorkflowServer) Recv() (*DequeueWorkflowRequest, error) {
	m := new(DequeueWorkflowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CerealService_DequeueWorkflowChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CerealServiceServer).DequeueWorkflowChunk(&cerealServiceDequeueWorkflowChunkServer{stream})
}

type CerealService_DequeueWorkflowChunkServer interface {
	Send(*DequeueWorkflowChunkResponse) error
	Recv() (*DequeueWorkflowChunkRequest, error)
	grpc.ServerStream
}

type cerealServiceDequeueWorkflowChunkServer struct {
	grpc.ServerStream
}

func (x *cerealServiceDequeueWorkflowChunkServer) Send(m *DequeueWorkflowChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cerealServiceDequeueWorkflowChunkServer) Recv() (*DequeueWorkflowChunkRequest, error) {
	m := new(DequeueWorkflowChunkRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CerealService_CancelWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerealServiceServer).CancelWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.infra.cereal.CerealService/CancelWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerealServiceServer).CancelWorkflow(ctx, req.(*CancelWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CerealService_KillWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerealServiceServer).KillWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.infra.cereal.CerealService/KillWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerealServiceServer).KillWorkflow(ctx, req.(*KillWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CerealService_DequeueTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CerealServiceServer).DequeueTask(&cerealServiceDequeueTaskServer{stream})
}

type CerealService_DequeueTaskServer interface {
	Send(*DequeueTaskResponse) error
	Recv() (*DequeueTaskRequest, error)
	grpc.ServerStream
}

type cerealServiceDequeueTaskServer struct {
	grpc.ServerStream
}

func (x *cerealServiceDequeueTaskServer) Send(m *DequeueTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cerealServiceDequeueTaskServer) Recv() (*DequeueTaskRequest, error) {
	m := new(DequeueTaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CerealService_CreateWorkflowSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerealServiceServer).CreateWorkflowSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.infra.cereal.CerealService/CreateWorkflowSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerealServiceServer).CreateWorkflowSchedule(ctx, req.(*CreateWorkflowScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CerealService_ListWorkflowSchedules_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListWorkflowSchedulesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CerealServiceServer).ListWorkflowSchedules(m, &cerealServiceListWorkflowSchedulesServer{stream})
}

type CerealService_ListWorkflowSchedulesServer interface {
	Send(*ListWorkflowSchedulesResponse) error
	grpc.ServerStream
}

type cerealServiceListWorkflowSchedulesServer struct {
	grpc.ServerStream
}

func (x *cerealServiceListWorkflowSchedulesServer) Send(m *ListWorkflowSchedulesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CerealService_GetWorkflowScheduleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowScheduleByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerealServiceServer).GetWorkflowScheduleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.infra.cereal.CerealService/GetWorkflowScheduleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerealServiceServer).GetWorkflowScheduleByName(ctx, req.(*GetWorkflowScheduleByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CerealService_UpdateWorkflowScheduleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowScheduleByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerealServiceServer).UpdateWorkflowScheduleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.infra.cereal.CerealService/UpdateWorkflowScheduleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerealServiceServer).UpdateWorkflowScheduleByName(ctx, req.(*UpdateWorkflowScheduleByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CerealService_GetWorkflowInstanceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowInstanceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerealServiceServer).GetWorkflowInstanceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.infra.cereal.CerealService/GetWorkflowInstanceByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerealServiceServer).GetWorkflowInstanceByName(ctx, req.(*GetWorkflowInstanceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CerealService_ListWorkflowInstances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListWorkflowInstancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CerealServiceServer).ListWorkflowInstances(m, &cerealServiceListWorkflowInstancesServer{stream})
}

type CerealService_ListWorkflowInstancesServer interface {
	Send(*ListWorkflowInstancesResponse) error
	grpc.ServerStream
}

type cerealServiceListWorkflowInstancesServer struct {
	grpc.ServerStream
}

func (x *cerealServiceListWorkflowInstancesServer) Send(m *ListWorkflowInstancesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CerealService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.infra.cereal.CerealService",
	HandlerType: (*CerealServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnqueueWorkflow",
			Handler:    _CerealService_EnqueueWorkflow_Handler,
		},
		{
			MethodName: "CancelWorkflow",
			Handler:    _CerealService_CancelWorkflow_Handler,
		},
		{
			MethodName: "KillWorkflow",
			Handler:    _CerealService_KillWorkflow_Handler,
		},
		{
			MethodName: "CreateWorkflowSchedule",
			Handler:    _CerealService_CreateWorkflowSchedule_Handler,
		},
		{
			MethodName: "GetWorkflowScheduleByName",
			Handler:    _CerealService_GetWorkflowScheduleByName_Handler,
		},
		{
			MethodName: "UpdateWorkflowScheduleByName",
			Handler:    _CerealService_UpdateWorkflowScheduleByName_Handler,
		},
		{
			MethodName: "GetWorkflowInstanceByName",
			Handler:    _CerealService_GetWorkflowInstanceByName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DequeueWorkflow",
			Handler:       _CerealService_DequeueWorkflow_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DequeueWorkflowChunk",
			Handler:       _CerealService_DequeueWorkflowChunk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DequeueTask",
			Handler:       _CerealService_DequeueTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListWorkflowSchedules",
			Handler:       _CerealService_ListWorkflowSchedules_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListWorkflowInstances",
			Handler:       _CerealService_ListWorkflowInstances_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interservice/cereal/cereal.proto",
}
