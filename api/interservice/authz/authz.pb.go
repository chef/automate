// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: interservice/authz/authz.proto

package authz

import (
	context "context"
	version "github.com/chef/automate/api/external/common/version"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TODO (tc): Keeping this around for the validation used in protoc-gen-policy/policy.go
type IsAuthorizedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []string `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty" toml:"subjects,omitempty" mapstructure:"subjects,omitempty"`
	Resource string   `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty" toml:"resource,omitempty" mapstructure:"resource,omitempty"`
	Action   string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty" mapstructure:"action,omitempty"`
}

func (x *IsAuthorizedReq) Reset() {
	*x = IsAuthorizedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAuthorizedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAuthorizedReq) ProtoMessage() {}

func (x *IsAuthorizedReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAuthorizedReq.ProtoReflect.Descriptor instead.
func (*IsAuthorizedReq) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{0}
}

func (x *IsAuthorizedReq) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *IsAuthorizedReq) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *IsAuthorizedReq) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type GetVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionReq) Reset() {
	*x = GetVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionReq) ProtoMessage() {}

func (x *GetVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionReq.ProtoReflect.Descriptor instead.
func (*GetVersionReq) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{1}
}

type ProjectsAuthorizedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects       []string `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty" toml:"subjects,omitempty" mapstructure:"subjects,omitempty"`
	Resource       string   `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty" toml:"resource,omitempty" mapstructure:"resource,omitempty"`
	Action         string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty" mapstructure:"action,omitempty"`
	ProjectsFilter []string `protobuf:"bytes,4,rep,name=projects_filter,json=projectsFilter,proto3" json:"projects_filter,omitempty" toml:"projects_filter,omitempty" mapstructure:"projects_filter,omitempty"`
}

func (x *ProjectsAuthorizedReq) Reset() {
	*x = ProjectsAuthorizedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectsAuthorizedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectsAuthorizedReq) ProtoMessage() {}

func (x *ProjectsAuthorizedReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectsAuthorizedReq.ProtoReflect.Descriptor instead.
func (*ProjectsAuthorizedReq) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{2}
}

func (x *ProjectsAuthorizedReq) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *ProjectsAuthorizedReq) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ProjectsAuthorizedReq) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ProjectsAuthorizedReq) GetProjectsFilter() []string {
	if x != nil {
		return x.ProjectsFilter
	}
	return nil
}

type ProjectsAuthorizedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
}

func (x *ProjectsAuthorizedResp) Reset() {
	*x = ProjectsAuthorizedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectsAuthorizedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectsAuthorizedResp) ProtoMessage() {}

func (x *ProjectsAuthorizedResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectsAuthorizedResp.ProtoReflect.Descriptor instead.
func (*ProjectsAuthorizedResp) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectsAuthorizedResp) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type FilterAuthorizedPairsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []string `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty" toml:"subjects,omitempty" mapstructure:"subjects,omitempty"`
	Pairs    []*Pair  `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty" toml:"pairs,omitempty" mapstructure:"pairs,omitempty"`
}

func (x *FilterAuthorizedPairsReq) Reset() {
	*x = FilterAuthorizedPairsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAuthorizedPairsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAuthorizedPairsReq) ProtoMessage() {}

func (x *FilterAuthorizedPairsReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAuthorizedPairsReq.ProtoReflect.Descriptor instead.
func (*FilterAuthorizedPairsReq) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{4}
}

func (x *FilterAuthorizedPairsReq) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *FilterAuthorizedPairsReq) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type FilterAuthorizedPairsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*Pair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty" toml:"pairs,omitempty" mapstructure:"pairs,omitempty"`
}

func (x *FilterAuthorizedPairsResp) Reset() {
	*x = FilterAuthorizedPairsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAuthorizedPairsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAuthorizedPairsResp) ProtoMessage() {}

func (x *FilterAuthorizedPairsResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAuthorizedPairsResp.ProtoReflect.Descriptor instead.
func (*FilterAuthorizedPairsResp) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{5}
}

func (x *FilterAuthorizedPairsResp) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty" toml:"resource,omitempty" mapstructure:"resource,omitempty"`
	Action   string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty" mapstructure:"action,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{6}
}

func (x *Pair) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Pair) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type FilterAuthorizedProjectsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []string `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty" toml:"subjects,omitempty" mapstructure:"subjects,omitempty"`
}

func (x *FilterAuthorizedProjectsReq) Reset() {
	*x = FilterAuthorizedProjectsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAuthorizedProjectsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAuthorizedProjectsReq) ProtoMessage() {}

func (x *FilterAuthorizedProjectsReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAuthorizedProjectsReq.ProtoReflect.Descriptor instead.
func (*FilterAuthorizedProjectsReq) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{7}
}

func (x *FilterAuthorizedProjectsReq) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type FilterAuthorizedProjectsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
}

func (x *FilterAuthorizedProjectsResp) Reset() {
	*x = FilterAuthorizedProjectsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAuthorizedProjectsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAuthorizedProjectsResp) ProtoMessage() {}

func (x *FilterAuthorizedProjectsResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAuthorizedProjectsResp.ProtoReflect.Descriptor instead.
func (*FilterAuthorizedProjectsResp) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{8}
}

func (x *FilterAuthorizedProjectsResp) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type ValidateProjectAssignmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects        []string `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty" toml:"subjects,omitempty" mapstructure:"subjects,omitempty"`
	OldProjects     []string `protobuf:"bytes,2,rep,name=old_projects,json=oldProjects,proto3" json:"old_projects,omitempty" toml:"old_projects,omitempty" mapstructure:"old_projects,omitempty"`
	NewProjects     []string `protobuf:"bytes,3,rep,name=new_projects,json=newProjects,proto3" json:"new_projects,omitempty" toml:"new_projects,omitempty" mapstructure:"new_projects,omitempty"`
	IsUpdateRequest bool     `protobuf:"varint,4,opt,name=is_update_request,json=isUpdateRequest,proto3" json:"is_update_request,omitempty" toml:"is_update_request,omitempty" mapstructure:"is_update_request,omitempty"`
}

func (x *ValidateProjectAssignmentReq) Reset() {
	*x = ValidateProjectAssignmentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateProjectAssignmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateProjectAssignmentReq) ProtoMessage() {}

func (x *ValidateProjectAssignmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateProjectAssignmentReq.ProtoReflect.Descriptor instead.
func (*ValidateProjectAssignmentReq) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{9}
}

func (x *ValidateProjectAssignmentReq) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *ValidateProjectAssignmentReq) GetOldProjects() []string {
	if x != nil {
		return x.OldProjects
	}
	return nil
}

func (x *ValidateProjectAssignmentReq) GetNewProjects() []string {
	if x != nil {
		return x.NewProjects
	}
	return nil
}

func (x *ValidateProjectAssignmentReq) GetIsUpdateRequest() bool {
	if x != nil {
		return x.IsUpdateRequest
	}
	return false
}

type ValidateProjectAssignmentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ValidateProjectAssignmentResp) Reset() {
	*x = ValidateProjectAssignmentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_authz_authz_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateProjectAssignmentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateProjectAssignmentResp) ProtoMessage() {}

func (x *ValidateProjectAssignmentResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authz_authz_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateProjectAssignmentResp.ProtoReflect.Descriptor instead.
func (*ValidateProjectAssignmentResp) Descriptor() ([]byte, []int) {
	return file_interservice_authz_authz_proto_rawDescGZIP(), []int{10}
}

var File_interservice_authz_authz_proto protoreflect.FileDescriptor

var file_interservice_authz_authz_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a,
	0x0f, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x7f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x63, 0xfa, 0x42, 0x60, 0x92, 0x01, 0x5d, 0x08, 0x01, 0x22, 0x59, 0x72, 0x57,
	0x32, 0x55, 0x5e, 0x28, 0x3f, 0x3a, 0x74, 0x65, 0x61, 0x6d, 0x7c, 0x75, 0x73, 0x65, 0x72, 0x29,
	0x3a, 0x28, 0x3f, 0x3a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x7c, 0x6c, 0x64, 0x61, 0x70, 0x7c, 0x73,
	0x61, 0x6d, 0x6c, 0x29, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x24, 0x7c, 0x5e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x24, 0x7c, 0x5e, 0x74, 0x6c, 0x73,
	0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x3a,
	0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x24, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2a, 0x28, 0x3f, 0x3a, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a,
	0x5d, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x32, 0x19, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x5e,
	0x3a, 0x2a, 0x5d, 0x2a, 0x28, 0x3f, 0x3a, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x29, 0x2a,
	0x24, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22, 0xea, 0x02, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x7f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x63, 0xfa, 0x42, 0x60, 0x92, 0x01, 0x5d, 0x08, 0x01,
	0x22, 0x59, 0x72, 0x57, 0x32, 0x55, 0x5e, 0x28, 0x3f, 0x3a, 0x74, 0x65, 0x61, 0x6d, 0x7c, 0x75,
	0x73, 0x65, 0x72, 0x29, 0x3a, 0x28, 0x3f, 0x3a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x7c, 0x6c, 0x64,
	0x61, 0x70, 0x7c, 0x73, 0x61, 0x6d, 0x6c, 0x29, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x24,
	0x7c, 0x5e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x24, 0x7c,
	0x5e, 0x74, 0x6c, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x5b, 0x5e, 0x3a,
	0x2a, 0x5d, 0x2b, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x24, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x32, 0x19,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2a, 0x28, 0x3f, 0x3a, 0x3a,
	0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x28, 0x3f, 0x3a, 0x3a, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x29, 0x7b, 0x32,
	0x7d, 0x24, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x18, 0x01, 0x22, 0x18, 0x72,
	0x16, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x28, 0x29, 0x2d, 0x5f, 0x5d,
	0x7b, 0x31, 0x2c, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x92, 0x01, 0x1a, 0x18, 0x01, 0x22, 0x16, 0x72,
	0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x7b, 0x31,
	0x2c, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22,
	0xc5, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x71, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x55,
	0xfa, 0x42, 0x52, 0x92, 0x01, 0x4f, 0x08, 0x01, 0x22, 0x4b, 0x72, 0x49, 0x32, 0x47, 0x5e, 0x28,
	0x3f, 0x3a, 0x28, 0x3f, 0x3a, 0x74, 0x65, 0x61, 0x6d, 0x7c, 0x75, 0x73, 0x65, 0x72, 0x29, 0x3a,
	0x28, 0x3f, 0x3a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x7c, 0x6c, 0x64, 0x61, 0x70, 0x7c, 0x73, 0x61,
	0x6d, 0x6c, 0x29, 0x7c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x7c, 0x74, 0x6c, 0x73, 0x3a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x29, 0x3a, 0x5b, 0x5e,
	0x3a, 0x2a, 0x5d, 0x2b, 0x24, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x53, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x8b, 0x01, 0x0a,
	0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x32, 0x19,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2a, 0x28, 0x3f, 0x3a, 0x3a,
	0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x32, 0x26, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x28, 0x3f, 0x3a, 0x3a, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x29, 0x7b, 0x32,
	0x7d, 0x24, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x71, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x55, 0xfa, 0x42,
	0x52, 0x92, 0x01, 0x4f, 0x08, 0x01, 0x22, 0x4b, 0x72, 0x49, 0x32, 0x47, 0x5e, 0x28, 0x3f, 0x3a,
	0x28, 0x3f, 0x3a, 0x74, 0x65, 0x61, 0x6d, 0x7c, 0x75, 0x73, 0x65, 0x72, 0x29, 0x3a, 0x28, 0x3f,
	0x3a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x7c, 0x6c, 0x64, 0x61, 0x70, 0x7c, 0x73, 0x61, 0x6d, 0x6c,
	0x29, 0x7c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x7c, 0x74, 0x6c, 0x73, 0x3a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a, 0x5d, 0x2b, 0x29, 0x3a, 0x5b, 0x5e, 0x3a, 0x2a,
	0x5d, 0x2b, 0x24, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x3a, 0x0a,
	0x1c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x1c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42,
	0x1f, 0x92, 0x01, 0x1c, 0x18, 0x01, 0x22, 0x18, 0x72, 0x16, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x28, 0x29, 0x2d, 0x5f, 0x5d, 0x7b, 0x31, 0x2c, 0x36, 0x34, 0x7d, 0x24,
	0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x45, 0x0a,
	0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x22, 0xfa, 0x42, 0x1f, 0x92, 0x01, 0x1c, 0x18, 0x01, 0x22, 0x18, 0x72,
	0x16, 0x32, 0x14, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x28, 0x29, 0x2d, 0x5f, 0x5d,
	0x7b, 0x31, 0x2c, 0x36, 0x34, 0x7d, 0x24, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1f, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x32, 0xba, 0x05, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12,
	0x86, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x7a, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x38,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x7a, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x31,
	0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65,
	0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x7a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interservice_authz_authz_proto_rawDescOnce sync.Once
	file_interservice_authz_authz_proto_rawDescData = file_interservice_authz_authz_proto_rawDesc
)

func file_interservice_authz_authz_proto_rawDescGZIP() []byte {
	file_interservice_authz_authz_proto_rawDescOnce.Do(func() {
		file_interservice_authz_authz_proto_rawDescData = protoimpl.X.CompressGZIP(file_interservice_authz_authz_proto_rawDescData)
	})
	return file_interservice_authz_authz_proto_rawDescData
}

var file_interservice_authz_authz_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_interservice_authz_authz_proto_goTypes = []interface{}{
	(*IsAuthorizedReq)(nil),               // 0: chef.automate.domain.authz.IsAuthorizedReq
	(*GetVersionReq)(nil),                 // 1: chef.automate.domain.authz.GetVersionReq
	(*ProjectsAuthorizedReq)(nil),         // 2: chef.automate.domain.authz.ProjectsAuthorizedReq
	(*ProjectsAuthorizedResp)(nil),        // 3: chef.automate.domain.authz.ProjectsAuthorizedResp
	(*FilterAuthorizedPairsReq)(nil),      // 4: chef.automate.domain.authz.FilterAuthorizedPairsReq
	(*FilterAuthorizedPairsResp)(nil),     // 5: chef.automate.domain.authz.FilterAuthorizedPairsResp
	(*Pair)(nil),                          // 6: chef.automate.domain.authz.Pair
	(*FilterAuthorizedProjectsReq)(nil),   // 7: chef.automate.domain.authz.FilterAuthorizedProjectsReq
	(*FilterAuthorizedProjectsResp)(nil),  // 8: chef.automate.domain.authz.FilterAuthorizedProjectsResp
	(*ValidateProjectAssignmentReq)(nil),  // 9: chef.automate.domain.authz.ValidateProjectAssignmentReq
	(*ValidateProjectAssignmentResp)(nil), // 10: chef.automate.domain.authz.ValidateProjectAssignmentResp
	(*version.VersionInfoRequest)(nil),    // 11: chef.automate.api.common.version.VersionInfoRequest
	(*version.VersionInfo)(nil),           // 12: chef.automate.api.common.version.VersionInfo
}
var file_interservice_authz_authz_proto_depIdxs = []int32{
	6,  // 0: chef.automate.domain.authz.FilterAuthorizedPairsReq.pairs:type_name -> chef.automate.domain.authz.Pair
	6,  // 1: chef.automate.domain.authz.FilterAuthorizedPairsResp.pairs:type_name -> chef.automate.domain.authz.Pair
	11, // 2: chef.automate.domain.authz.AuthorizationService.GetVersion:input_type -> chef.automate.api.common.version.VersionInfoRequest
	4,  // 3: chef.automate.domain.authz.AuthorizationService.FilterAuthorizedPairs:input_type -> chef.automate.domain.authz.FilterAuthorizedPairsReq
	7,  // 4: chef.automate.domain.authz.AuthorizationService.FilterAuthorizedProjects:input_type -> chef.automate.domain.authz.FilterAuthorizedProjectsReq
	2,  // 5: chef.automate.domain.authz.AuthorizationService.ProjectsAuthorized:input_type -> chef.automate.domain.authz.ProjectsAuthorizedReq
	9,  // 6: chef.automate.domain.authz.AuthorizationService.ValidateProjectAssignment:input_type -> chef.automate.domain.authz.ValidateProjectAssignmentReq
	12, // 7: chef.automate.domain.authz.AuthorizationService.GetVersion:output_type -> chef.automate.api.common.version.VersionInfo
	5,  // 8: chef.automate.domain.authz.AuthorizationService.FilterAuthorizedPairs:output_type -> chef.automate.domain.authz.FilterAuthorizedPairsResp
	8,  // 9: chef.automate.domain.authz.AuthorizationService.FilterAuthorizedProjects:output_type -> chef.automate.domain.authz.FilterAuthorizedProjectsResp
	3,  // 10: chef.automate.domain.authz.AuthorizationService.ProjectsAuthorized:output_type -> chef.automate.domain.authz.ProjectsAuthorizedResp
	10, // 11: chef.automate.domain.authz.AuthorizationService.ValidateProjectAssignment:output_type -> chef.automate.domain.authz.ValidateProjectAssignmentResp
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_interservice_authz_authz_proto_init() }
func file_interservice_authz_authz_proto_init() {
	if File_interservice_authz_authz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interservice_authz_authz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAuthorizedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_authz_authz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_authz_authz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectsAuthorizedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_authz_authz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectsAuthorizedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_authz_authz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAuthorizedPairsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_authz_authz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAuthorizedPairsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_authz_authz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_authz_authz_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAuthorizedProjectsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_authz_authz_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAuthorizedProjectsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_authz_authz_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateProjectAssignmentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_authz_authz_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateProjectAssignmentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_authz_authz_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_authz_authz_proto_goTypes,
		DependencyIndexes: file_interservice_authz_authz_proto_depIdxs,
		MessageInfos:      file_interservice_authz_authz_proto_msgTypes,
	}.Build()
	File_interservice_authz_authz_proto = out.File
	file_interservice_authz_authz_proto_rawDesc = nil
	file_interservice_authz_authz_proto_goTypes = nil
	file_interservice_authz_authz_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthorizationServiceClient is the client API for AuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizationServiceClient interface {
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	FilterAuthorizedPairs(ctx context.Context, in *FilterAuthorizedPairsReq, opts ...grpc.CallOption) (*FilterAuthorizedPairsResp, error)
	FilterAuthorizedProjects(ctx context.Context, in *FilterAuthorizedProjectsReq, opts ...grpc.CallOption) (*FilterAuthorizedProjectsResp, error)
	ProjectsAuthorized(ctx context.Context, in *ProjectsAuthorizedReq, opts ...grpc.CallOption) (*ProjectsAuthorizedResp, error)
	ValidateProjectAssignment(ctx context.Context, in *ValidateProjectAssignmentReq, opts ...grpc.CallOption) (*ValidateProjectAssignmentResp, error)
}

type authorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationServiceClient(cc grpc.ClientConnInterface) AuthorizationServiceClient {
	return &authorizationServiceClient{cc}
}

func (c *authorizationServiceClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.AuthorizationService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) FilterAuthorizedPairs(ctx context.Context, in *FilterAuthorizedPairsReq, opts ...grpc.CallOption) (*FilterAuthorizedPairsResp, error) {
	out := new(FilterAuthorizedPairsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.AuthorizationService/FilterAuthorizedPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) FilterAuthorizedProjects(ctx context.Context, in *FilterAuthorizedProjectsReq, opts ...grpc.CallOption) (*FilterAuthorizedProjectsResp, error) {
	out := new(FilterAuthorizedProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.AuthorizationService/FilterAuthorizedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) ProjectsAuthorized(ctx context.Context, in *ProjectsAuthorizedReq, opts ...grpc.CallOption) (*ProjectsAuthorizedResp, error) {
	out := new(ProjectsAuthorizedResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.AuthorizationService/ProjectsAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) ValidateProjectAssignment(ctx context.Context, in *ValidateProjectAssignmentReq, opts ...grpc.CallOption) (*ValidateProjectAssignmentResp, error) {
	out := new(ValidateProjectAssignmentResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.AuthorizationService/ValidateProjectAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServiceServer is the server API for AuthorizationService service.
type AuthorizationServiceServer interface {
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	FilterAuthorizedPairs(context.Context, *FilterAuthorizedPairsReq) (*FilterAuthorizedPairsResp, error)
	FilterAuthorizedProjects(context.Context, *FilterAuthorizedProjectsReq) (*FilterAuthorizedProjectsResp, error)
	ProjectsAuthorized(context.Context, *ProjectsAuthorizedReq) (*ProjectsAuthorizedResp, error)
	ValidateProjectAssignment(context.Context, *ValidateProjectAssignmentReq) (*ValidateProjectAssignmentResp, error)
}

// UnimplementedAuthorizationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServiceServer struct {
}

func (*UnimplementedAuthorizationServiceServer) GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedAuthorizationServiceServer) FilterAuthorizedPairs(context.Context, *FilterAuthorizedPairsReq) (*FilterAuthorizedPairsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAuthorizedPairs not implemented")
}
func (*UnimplementedAuthorizationServiceServer) FilterAuthorizedProjects(context.Context, *FilterAuthorizedProjectsReq) (*FilterAuthorizedProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAuthorizedProjects not implemented")
}
func (*UnimplementedAuthorizationServiceServer) ProjectsAuthorized(context.Context, *ProjectsAuthorizedReq) (*ProjectsAuthorizedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectsAuthorized not implemented")
}
func (*UnimplementedAuthorizationServiceServer) ValidateProjectAssignment(context.Context, *ValidateProjectAssignmentReq) (*ValidateProjectAssignmentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateProjectAssignment not implemented")
}

func RegisterAuthorizationServiceServer(s *grpc.Server, srv AuthorizationServiceServer) {
	s.RegisterService(&_AuthorizationService_serviceDesc, srv)
}

func _AuthorizationService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.AuthorizationService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_FilterAuthorizedPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAuthorizedPairsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).FilterAuthorizedPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.AuthorizationService/FilterAuthorizedPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).FilterAuthorizedPairs(ctx, req.(*FilterAuthorizedPairsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_FilterAuthorizedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAuthorizedProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).FilterAuthorizedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.AuthorizationService/FilterAuthorizedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).FilterAuthorizedProjects(ctx, req.(*FilterAuthorizedProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_ProjectsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsAuthorizedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).ProjectsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.AuthorizationService/ProjectsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).ProjectsAuthorized(ctx, req.(*ProjectsAuthorizedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_ValidateProjectAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateProjectAssignmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).ValidateProjectAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.AuthorizationService/ValidateProjectAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).ValidateProjectAssignment(ctx, req.(*ValidateProjectAssignmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthorizationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.authz.AuthorizationService",
	HandlerType: (*AuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _AuthorizationService_GetVersion_Handler,
		},
		{
			MethodName: "FilterAuthorizedPairs",
			Handler:    _AuthorizationService_FilterAuthorizedPairs_Handler,
		},
		{
			MethodName: "FilterAuthorizedProjects",
			Handler:    _AuthorizationService_FilterAuthorizedProjects_Handler,
		},
		{
			MethodName: "ProjectsAuthorized",
			Handler:    _AuthorizationService_ProjectsAuthorized_Handler,
		},
		{
			MethodName: "ValidateProjectAssignment",
			Handler:    _AuthorizationService_ValidateProjectAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interservice/authz/authz.proto",
}
