// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/interservice/authz/authz.proto

package authz

import (
	context "context"
	fmt "fmt"
	version "github.com/chef/automate/api/external/common/version"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetVersionReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetVersionReq) Reset()         { *m = GetVersionReq{} }
func (m *GetVersionReq) String() string { return proto.CompactTextString(m) }
func (*GetVersionReq) ProtoMessage()    {}
func (*GetVersionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{0}
}

func (m *GetVersionReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionReq.Unmarshal(m, b)
}
func (m *GetVersionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionReq.Marshal(b, m, deterministic)
}
func (m *GetVersionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionReq.Merge(m, src)
}
func (m *GetVersionReq) XXX_Size() int {
	return xxx_messageInfo_GetVersionReq.Size(m)
}
func (m *GetVersionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionReq proto.InternalMessageInfo

type IsAuthorizedReq struct {
	Subjects             []string `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty" toml:"subjects,omitempty" mapstructure:"subjects,omitempty"`
	Resource             string   `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty" toml:"resource,omitempty" mapstructure:"resource,omitempty"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty" mapstructure:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *IsAuthorizedReq) Reset()         { *m = IsAuthorizedReq{} }
func (m *IsAuthorizedReq) String() string { return proto.CompactTextString(m) }
func (*IsAuthorizedReq) ProtoMessage()    {}
func (*IsAuthorizedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{1}
}

func (m *IsAuthorizedReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsAuthorizedReq.Unmarshal(m, b)
}
func (m *IsAuthorizedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsAuthorizedReq.Marshal(b, m, deterministic)
}
func (m *IsAuthorizedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsAuthorizedReq.Merge(m, src)
}
func (m *IsAuthorizedReq) XXX_Size() int {
	return xxx_messageInfo_IsAuthorizedReq.Size(m)
}
func (m *IsAuthorizedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsAuthorizedReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsAuthorizedReq proto.InternalMessageInfo

func (m *IsAuthorizedReq) GetSubjects() []string {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *IsAuthorizedReq) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *IsAuthorizedReq) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type IsAuthorizedResp struct {
	Authorized           bool     `protobuf:"varint,1,opt,name=authorized,proto3" json:"authorized,omitempty" toml:"authorized,omitempty" mapstructure:"authorized,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *IsAuthorizedResp) Reset()         { *m = IsAuthorizedResp{} }
func (m *IsAuthorizedResp) String() string { return proto.CompactTextString(m) }
func (*IsAuthorizedResp) ProtoMessage()    {}
func (*IsAuthorizedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{2}
}

func (m *IsAuthorizedResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsAuthorizedResp.Unmarshal(m, b)
}
func (m *IsAuthorizedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsAuthorizedResp.Marshal(b, m, deterministic)
}
func (m *IsAuthorizedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsAuthorizedResp.Merge(m, src)
}
func (m *IsAuthorizedResp) XXX_Size() int {
	return xxx_messageInfo_IsAuthorizedResp.Size(m)
}
func (m *IsAuthorizedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IsAuthorizedResp.DiscardUnknown(m)
}

var xxx_messageInfo_IsAuthorizedResp proto.InternalMessageInfo

func (m *IsAuthorizedResp) GetAuthorized() bool {
	if m != nil {
		return m.Authorized
	}
	return false
}

type Policy struct {
	Action               string               `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty" mapstructure:"action,omitempty"`
	Subjects             []string             `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty" toml:"subjects,omitempty" mapstructure:"subjects,omitempty"`
	Id                   string               `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Resource             string               `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty" toml:"resource,omitempty" mapstructure:"resource,omitempty"`
	Effect               string               `protobuf:"bytes,5,opt,name=effect,proto3" json:"effect,omitempty" toml:"effect,omitempty" mapstructure:"effect,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" toml:"created_at,omitempty" mapstructure:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" toml:"updated_at,omitempty" mapstructure:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte               `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32                `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{3}
}

func (m *Policy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Policy.Unmarshal(m, b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return xxx_messageInfo_Policy.Size(m)
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Policy) GetSubjects() []string {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *Policy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Policy) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *Policy) GetEffect() string {
	if m != nil {
		return m.Effect
	}
	return ""
}

func (m *Policy) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Policy) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type CreatePolicyReq struct {
	Action               string   `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty" mapstructure:"action,omitempty"`
	Subjects             []string `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty" toml:"subjects,omitempty" mapstructure:"subjects,omitempty"`
	Resource             string   `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty" toml:"resource,omitempty" mapstructure:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *CreatePolicyReq) Reset()         { *m = CreatePolicyReq{} }
func (m *CreatePolicyReq) String() string { return proto.CompactTextString(m) }
func (*CreatePolicyReq) ProtoMessage()    {}
func (*CreatePolicyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{4}
}

func (m *CreatePolicyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePolicyReq.Unmarshal(m, b)
}
func (m *CreatePolicyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePolicyReq.Marshal(b, m, deterministic)
}
func (m *CreatePolicyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePolicyReq.Merge(m, src)
}
func (m *CreatePolicyReq) XXX_Size() int {
	return xxx_messageInfo_CreatePolicyReq.Size(m)
}
func (m *CreatePolicyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePolicyReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePolicyReq proto.InternalMessageInfo

func (m *CreatePolicyReq) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *CreatePolicyReq) GetSubjects() []string {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *CreatePolicyReq) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

type CreatePolicyResp struct {
	Policy               *Policy  `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty" toml:"policy,omitempty" mapstructure:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *CreatePolicyResp) Reset()         { *m = CreatePolicyResp{} }
func (m *CreatePolicyResp) String() string { return proto.CompactTextString(m) }
func (*CreatePolicyResp) ProtoMessage()    {}
func (*CreatePolicyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{5}
}

func (m *CreatePolicyResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePolicyResp.Unmarshal(m, b)
}
func (m *CreatePolicyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePolicyResp.Marshal(b, m, deterministic)
}
func (m *CreatePolicyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePolicyResp.Merge(m, src)
}
func (m *CreatePolicyResp) XXX_Size() int {
	return xxx_messageInfo_CreatePolicyResp.Size(m)
}
func (m *CreatePolicyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePolicyResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePolicyResp proto.InternalMessageInfo

func (m *CreatePolicyResp) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type ListPoliciesReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ListPoliciesReq) Reset()         { *m = ListPoliciesReq{} }
func (m *ListPoliciesReq) String() string { return proto.CompactTextString(m) }
func (*ListPoliciesReq) ProtoMessage()    {}
func (*ListPoliciesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{6}
}

func (m *ListPoliciesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPoliciesReq.Unmarshal(m, b)
}
func (m *ListPoliciesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPoliciesReq.Marshal(b, m, deterministic)
}
func (m *ListPoliciesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPoliciesReq.Merge(m, src)
}
func (m *ListPoliciesReq) XXX_Size() int {
	return xxx_messageInfo_ListPoliciesReq.Size(m)
}
func (m *ListPoliciesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPoliciesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListPoliciesReq proto.InternalMessageInfo

type ListPoliciesResp struct {
	Policies             []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty" toml:"policies,omitempty" mapstructure:"policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte    `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32     `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ListPoliciesResp) Reset()         { *m = ListPoliciesResp{} }
func (m *ListPoliciesResp) String() string { return proto.CompactTextString(m) }
func (*ListPoliciesResp) ProtoMessage()    {}
func (*ListPoliciesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{7}
}

func (m *ListPoliciesResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPoliciesResp.Unmarshal(m, b)
}
func (m *ListPoliciesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPoliciesResp.Marshal(b, m, deterministic)
}
func (m *ListPoliciesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPoliciesResp.Merge(m, src)
}
func (m *ListPoliciesResp) XXX_Size() int {
	return xxx_messageInfo_ListPoliciesResp.Size(m)
}
func (m *ListPoliciesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPoliciesResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListPoliciesResp proto.InternalMessageInfo

func (m *ListPoliciesResp) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type DeletePolicyReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *DeletePolicyReq) Reset()         { *m = DeletePolicyReq{} }
func (m *DeletePolicyReq) String() string { return proto.CompactTextString(m) }
func (*DeletePolicyReq) ProtoMessage()    {}
func (*DeletePolicyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{8}
}

func (m *DeletePolicyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePolicyReq.Unmarshal(m, b)
}
func (m *DeletePolicyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePolicyReq.Marshal(b, m, deterministic)
}
func (m *DeletePolicyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePolicyReq.Merge(m, src)
}
func (m *DeletePolicyReq) XXX_Size() int {
	return xxx_messageInfo_DeletePolicyReq.Size(m)
}
func (m *DeletePolicyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePolicyReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePolicyReq proto.InternalMessageInfo

func (m *DeletePolicyReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeletePolicyResp struct {
	Policy               *Policy  `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty" toml:"policy,omitempty" mapstructure:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *DeletePolicyResp) Reset()         { *m = DeletePolicyResp{} }
func (m *DeletePolicyResp) String() string { return proto.CompactTextString(m) }
func (*DeletePolicyResp) ProtoMessage()    {}
func (*DeletePolicyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{9}
}

func (m *DeletePolicyResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePolicyResp.Unmarshal(m, b)
}
func (m *DeletePolicyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePolicyResp.Marshal(b, m, deterministic)
}
func (m *DeletePolicyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePolicyResp.Merge(m, src)
}
func (m *DeletePolicyResp) XXX_Size() int {
	return xxx_messageInfo_DeletePolicyResp.Size(m)
}
func (m *DeletePolicyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePolicyResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePolicyResp proto.InternalMessageInfo

func (m *DeletePolicyResp) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type PurgeSubjectFromPoliciesReq struct {
	// Q: Right now, this allows purging subject wildcards (like "user:*").
	// -- Do we want to restrict this to only complete subjects?
	Subject              string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty" toml:"subject,omitempty" mapstructure:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *PurgeSubjectFromPoliciesReq) Reset()         { *m = PurgeSubjectFromPoliciesReq{} }
func (m *PurgeSubjectFromPoliciesReq) String() string { return proto.CompactTextString(m) }
func (*PurgeSubjectFromPoliciesReq) ProtoMessage()    {}
func (*PurgeSubjectFromPoliciesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{10}
}

func (m *PurgeSubjectFromPoliciesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurgeSubjectFromPoliciesReq.Unmarshal(m, b)
}
func (m *PurgeSubjectFromPoliciesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurgeSubjectFromPoliciesReq.Marshal(b, m, deterministic)
}
func (m *PurgeSubjectFromPoliciesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurgeSubjectFromPoliciesReq.Merge(m, src)
}
func (m *PurgeSubjectFromPoliciesReq) XXX_Size() int {
	return xxx_messageInfo_PurgeSubjectFromPoliciesReq.Size(m)
}
func (m *PurgeSubjectFromPoliciesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PurgeSubjectFromPoliciesReq.DiscardUnknown(m)
}

var xxx_messageInfo_PurgeSubjectFromPoliciesReq proto.InternalMessageInfo

func (m *PurgeSubjectFromPoliciesReq) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

type PurgeSubjectFromPoliciesResp struct {
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty" toml:"ids,omitempty" mapstructure:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *PurgeSubjectFromPoliciesResp) Reset()         { *m = PurgeSubjectFromPoliciesResp{} }
func (m *PurgeSubjectFromPoliciesResp) String() string { return proto.CompactTextString(m) }
func (*PurgeSubjectFromPoliciesResp) ProtoMessage()    {}
func (*PurgeSubjectFromPoliciesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{11}
}

func (m *PurgeSubjectFromPoliciesResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PurgeSubjectFromPoliciesResp.Unmarshal(m, b)
}
func (m *PurgeSubjectFromPoliciesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PurgeSubjectFromPoliciesResp.Marshal(b, m, deterministic)
}
func (m *PurgeSubjectFromPoliciesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurgeSubjectFromPoliciesResp.Merge(m, src)
}
func (m *PurgeSubjectFromPoliciesResp) XXX_Size() int {
	return xxx_messageInfo_PurgeSubjectFromPoliciesResp.Size(m)
}
func (m *PurgeSubjectFromPoliciesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PurgeSubjectFromPoliciesResp.DiscardUnknown(m)
}

var xxx_messageInfo_PurgeSubjectFromPoliciesResp proto.InternalMessageInfo

func (m *PurgeSubjectFromPoliciesResp) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type FilterAuthorizedPairsReq struct {
	Subjects             []string `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty" toml:"subjects,omitempty" mapstructure:"subjects,omitempty"`
	Pairs                []*Pair  `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty" toml:"pairs,omitempty" mapstructure:"pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *FilterAuthorizedPairsReq) Reset()         { *m = FilterAuthorizedPairsReq{} }
func (m *FilterAuthorizedPairsReq) String() string { return proto.CompactTextString(m) }
func (*FilterAuthorizedPairsReq) ProtoMessage()    {}
func (*FilterAuthorizedPairsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{12}
}

func (m *FilterAuthorizedPairsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilterAuthorizedPairsReq.Unmarshal(m, b)
}
func (m *FilterAuthorizedPairsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilterAuthorizedPairsReq.Marshal(b, m, deterministic)
}
func (m *FilterAuthorizedPairsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterAuthorizedPairsReq.Merge(m, src)
}
func (m *FilterAuthorizedPairsReq) XXX_Size() int {
	return xxx_messageInfo_FilterAuthorizedPairsReq.Size(m)
}
func (m *FilterAuthorizedPairsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterAuthorizedPairsReq.DiscardUnknown(m)
}

var xxx_messageInfo_FilterAuthorizedPairsReq proto.InternalMessageInfo

func (m *FilterAuthorizedPairsReq) GetSubjects() []string {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *FilterAuthorizedPairsReq) GetPairs() []*Pair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type FilterAuthorizedPairsResp struct {
	Pairs                []*Pair  `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty" toml:"pairs,omitempty" mapstructure:"pairs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *FilterAuthorizedPairsResp) Reset()         { *m = FilterAuthorizedPairsResp{} }
func (m *FilterAuthorizedPairsResp) String() string { return proto.CompactTextString(m) }
func (*FilterAuthorizedPairsResp) ProtoMessage()    {}
func (*FilterAuthorizedPairsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{13}
}

func (m *FilterAuthorizedPairsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilterAuthorizedPairsResp.Unmarshal(m, b)
}
func (m *FilterAuthorizedPairsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilterAuthorizedPairsResp.Marshal(b, m, deterministic)
}
func (m *FilterAuthorizedPairsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterAuthorizedPairsResp.Merge(m, src)
}
func (m *FilterAuthorizedPairsResp) XXX_Size() int {
	return xxx_messageInfo_FilterAuthorizedPairsResp.Size(m)
}
func (m *FilterAuthorizedPairsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterAuthorizedPairsResp.DiscardUnknown(m)
}

var xxx_messageInfo_FilterAuthorizedPairsResp proto.InternalMessageInfo

func (m *FilterAuthorizedPairsResp) GetPairs() []*Pair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type Pair struct {
	Resource             string   `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty" toml:"resource,omitempty" mapstructure:"resource,omitempty"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty" mapstructure:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *Pair) Reset()         { *m = Pair{} }
func (m *Pair) String() string { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()    {}
func (*Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_145513b0a9558cd4, []int{14}
}

func (m *Pair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pair.Unmarshal(m, b)
}
func (m *Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pair.Marshal(b, m, deterministic)
}
func (m *Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pair.Merge(m, src)
}
func (m *Pair) XXX_Size() int {
	return xxx_messageInfo_Pair.Size(m)
}
func (m *Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_Pair proto.InternalMessageInfo

func (m *Pair) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *Pair) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func init() {
	proto.RegisterType((*GetVersionReq)(nil), "chef.automate.domain.authz.GetVersionReq")
	proto.RegisterType((*IsAuthorizedReq)(nil), "chef.automate.domain.authz.IsAuthorizedReq")
	proto.RegisterType((*IsAuthorizedResp)(nil), "chef.automate.domain.authz.IsAuthorizedResp")
	proto.RegisterType((*Policy)(nil), "chef.automate.domain.authz.Policy")
	proto.RegisterType((*CreatePolicyReq)(nil), "chef.automate.domain.authz.CreatePolicyReq")
	proto.RegisterType((*CreatePolicyResp)(nil), "chef.automate.domain.authz.CreatePolicyResp")
	proto.RegisterType((*ListPoliciesReq)(nil), "chef.automate.domain.authz.ListPoliciesReq")
	proto.RegisterType((*ListPoliciesResp)(nil), "chef.automate.domain.authz.ListPoliciesResp")
	proto.RegisterType((*DeletePolicyReq)(nil), "chef.automate.domain.authz.DeletePolicyReq")
	proto.RegisterType((*DeletePolicyResp)(nil), "chef.automate.domain.authz.DeletePolicyResp")
	proto.RegisterType((*PurgeSubjectFromPoliciesReq)(nil), "chef.automate.domain.authz.PurgeSubjectFromPoliciesReq")
	proto.RegisterType((*PurgeSubjectFromPoliciesResp)(nil), "chef.automate.domain.authz.PurgeSubjectFromPoliciesResp")
	proto.RegisterType((*FilterAuthorizedPairsReq)(nil), "chef.automate.domain.authz.FilterAuthorizedPairsReq")
	proto.RegisterType((*FilterAuthorizedPairsResp)(nil), "chef.automate.domain.authz.FilterAuthorizedPairsResp")
	proto.RegisterType((*Pair)(nil), "chef.automate.domain.authz.Pair")
}

func init() {
	proto.RegisterFile("api/interservice/authz/authz.proto", fileDescriptor_145513b0a9558cd4)
}

var fileDescriptor_145513b0a9558cd4 = []byte{
	// 1040 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xd8, 0xad, 0xeb, 0x4c, 0x5a, 0x1c, 0x56, 0xa2, 0xb8, 0x2e, 0x7f, 0xac, 0x91, 0x0f,
	0xb6, 0x5b, 0xef, 0x36, 0xdb, 0x00, 0xc9, 0x1e, 0xb0, 0x6c, 0x50, 0xaa, 0x88, 0x7f, 0xd1, 0x16,
	0x5a, 0x68, 0x64, 0x97, 0xf1, 0x7a, 0x9c, 0x0c, 0x59, 0x7b, 0x37, 0x33, 0xb3, 0x11, 0x04, 0xe7,
	0x40, 0x0f, 0x5c, 0x51, 0x23, 0x24, 0x2e, 0x20, 0x71, 0xe2, 0x33, 0x20, 0x4e, 0x48, 0x1c, 0xf8,
	0x00, 0x5c, 0xf8, 0x0a, 0x1c, 0xb9, 0x70, 0x46, 0xb3, 0x7f, 0xec, 0xf5, 0x26, 0x5e, 0x92, 0x70,
	0x80, 0x4b, 0xb2, 0x6f, 0xf6, 0xfd, 0xde, 0x9b, 0xf7, 0x9b, 0xdf, 0xbe, 0x37, 0x86, 0x08, 0xbb,
	0x54, 0xa3, 0x23, 0x41, 0x18, 0x27, 0xec, 0x80, 0x5a, 0x44, 0xc3, 0x9e, 0xd8, 0x3d, 0x0c, 0xfe,
	0xaa, 0x2e, 0x73, 0x84, 0xa3, 0x94, 0xac, 0x5d, 0x32, 0x50, 0xb1, 0x27, 0x9c, 0x21, 0x16, 0x44,
	0xed, 0x3b, 0x43, 0x4c, 0x47, 0xaa, 0xef, 0x51, 0xaa, 0x49, 0x3c, 0xf9, 0x54, 0x10, 0x36, 0xc2,
	0xb6, 0x66, 0x39, 0xc3, 0xa1, 0x33, 0xd2, 0x0e, 0x08, 0xe3, 0x74, 0xfa, 0x3f, 0x08, 0x53, 0x7a,
	0xfe, 0x00, 0xdb, 0xb4, 0x8f, 0x05, 0xd1, 0xa2, 0x87, 0xf0, 0xc5, 0xcb, 0x3b, 0x8e, 0xb3, 0x63,
	0x13, 0xcd, 0xb7, 0x7a, 0xde, 0x40, 0x13, 0x74, 0x48, 0xb8, 0xc0, 0x43, 0x37, 0x70, 0x40, 0x05,
	0x78, 0xed, 0x1e, 0x11, 0x0f, 0x82, 0x68, 0x26, 0xd9, 0x47, 0x4f, 0x33, 0xb0, 0xb0, 0xc9, 0x5b,
	0x9e, 0xd8, 0x75, 0x18, 0x3d, 0x24, 0x7d, 0x93, 0xec, 0x2b, 0x5f, 0x00, 0x98, 0xe7, 0x5e, 0xef,
	0x13, 0x62, 0x09, 0x5e, 0x04, 0xe5, 0x6c, 0x75, 0xb1, 0x4d, 0x7e, 0xfa, 0xe3, 0xe7, 0xec, 0xc7,
	0xc7, 0xa0, 0x93, 0x07, 0xe8, 0x23, 0xf6, 0x50, 0xff, 0xa0, 0x5b, 0x6d, 0x1a, 0x82, 0xe0, 0xe1,
	0xd8, 0xe3, 0x84, 0xd5, 0x8c, 0x6a, 0xd3, 0xb0, 0x1d, 0x0b, 0xdb, 0x63, 0xbb, 0x8f, 0xdd, 0x31,
	0xc7, 0x43, 0xbb, 0x66, 0x6c, 0x77, 0x8d, 0x7a, 0xe7, 0x56, 0x65, 0xdc, 0x15, 0xce, 0x1e, 0x19,
	0xc5, 0x4c, 0x9b, 0x1b, 0x21, 0x45, 0xe1, 0x62, 0xf4, 0xce, 0x9c, 0xa4, 0x55, 0x5e, 0x87, 0x79,
	0x46, 0xb8, 0xe3, 0x31, 0x8b, 0x14, 0x33, 0x65, 0x50, 0x5d, 0x6c, 0x23, 0xb9, 0x85, 0x17, 0xd9,
	0x4d, 0xfd, 0x46, 0x77, 0x1b, 0x37, 0x0e, 0x3b, 0x3e, 0xa6, 0x5e, 0x6d, 0x1a, 0x21, 0xba, 0x56,
	0xaf, 0x98, 0x13, 0x8c, 0x62, 0xc0, 0x1c, 0xb6, 0x04, 0x75, 0x46, 0xc5, 0xec, 0x99, 0xd1, 0x21,
	0x02, 0xe9, 0x70, 0x79, 0x96, 0x12, 0xee, 0x2a, 0x2f, 0x41, 0x88, 0x27, 0x2b, 0x45, 0x50, 0x06,
	0xd5, 0xbc, 0x19, 0x5b, 0x41, 0x7f, 0x01, 0x98, 0xdb, 0x72, 0x6c, 0x6a, 0x7d, 0xa6, 0x5c, 0x9f,
	0xa4, 0x96, 0x6e, 0x8b, 0x51, 0x58, 0xa5, 0x14, 0x63, 0x35, 0x23, 0x59, 0x8d, 0x95, 0xfb, 0x0c,
	0xcc, 0xd0, 0x7e, 0xb0, 0x55, 0x33, 0x43, 0xfb, 0xd2, 0x77, 0x52, 0xfe, 0x25, 0x7f, 0x75, 0x5a,
	0xda, 0x75, 0x98, 0x23, 0x83, 0x01, 0xb1, 0x44, 0xf1, 0x72, 0x10, 0x3f, 0xb0, 0x94, 0x75, 0x08,
	0x2d, 0x46, 0xb0, 0x20, 0xfd, 0xc7, 0x58, 0x14, 0x73, 0x65, 0x50, 0x5d, 0xd2, 0x4b, 0x6a, 0xa0,
	0x08, 0x35, 0x52, 0x84, 0xfa, 0x7e, 0xa4, 0x08, 0x73, 0x31, 0xf4, 0x6e, 0xf9, 0x50, 0xcf, 0xed,
	0x47, 0xd0, 0x2b, 0xff, 0x0c, 0x0d, 0xbd, 0x5b, 0x02, 0xfd, 0x99, 0x81, 0x85, 0x37, 0xfc, 0x40,
	0x41, 0xf9, 0x52, 0x40, 0x9b, 0xb3, 0x0c, 0xb4, 0x57, 0x24, 0xf9, 0xb7, 0x59, 0x5d, 0xaf, 0xce,
	0x23, 0xdf, 0x7f, 0xae, 0x77, 0x6a, 0xcd, 0xca, 0xb8, 0xbb, 0x5d, 0xef, 0x4c, 0xce, 0x42, 0xf9,
	0x05, 0x24, 0x59, 0x6b, 0xff, 0x00, 0x64, 0xb8, 0xef, 0xc1, 0x31, 0xf8, 0x16, 0xe4, 0x01, 0xfa,
	0x06, 0xb0, 0xaf, 0x81, 0xfe, 0x14, 0x9c, 0x41, 0x91, 0xd5, 0x66, 0x98, 0x70, 0x2c, 0x73, 0x55,
	0xc6, 0x12, 0x12, 0x47, 0x8d, 0x7d, 0xa5, 0x8e, 0x43, 0x71, 0xd6, 0x8c, 0x5a, 0x53, 0xee, 0x25,
	0x55, 0xc0, 0x93, 0x90, 0x46, 0xad, 0x99, 0x08, 0x1f, 0x3b, 0xde, 0x77, 0x62, 0xc7, 0x99, 0xbd,
	0x28, 0x25, 0x93, 0x10, 0xe8, 0x5d, 0xb8, 0x3c, 0x4b, 0x39, 0x77, 0xa5, 0xe0, 0x5d, 0xdf, 0xf2,
	0x39, 0x5f, 0xd2, 0x91, 0x3a, 0xbf, 0xd7, 0xa8, 0x21, 0x2e, 0x44, 0xa0, 0x67, 0x61, 0xe1, 0x6d,
	0xca, 0x85, 0xbf, 0x4a, 0x09, 0x97, 0x7d, 0xc1, 0x84, 0xcb, 0xb3, 0x4b, 0xdc, 0x95, 0xdf, 0xa4,
	0x1b, 0xda, 0x7e, 0x5b, 0x38, 0x5b, 0x92, 0x09, 0x06, 0x3d, 0x01, 0xb0, 0xf0, 0x26, 0xb1, 0x49,
	0x5c, 0x2a, 0x8e, 0x2f, 0xfc, 0x40, 0x26, 0x8f, 0x25, 0x27, 0x8f, 0xd8, 0x87, 0xfa, 0x03, 0xc9,
	0xc9, 0xa0, 0xd5, 0xd8, 0xb8, 0xd3, 0x58, 0xef, 0x7c, 0xbe, 0x76, 0xd4, 0x88, 0x9b, 0xab, 0x47,
	0x8d, 0xd5, 0xb8, 0x7d, 0xf7, 0xa8, 0xb1, 0xbd, 0xb6, 0x8e, 0x5b, 0xbd, 0x76, 0x27, 0xb9, 0x1c,
	0x33, 0x57, 0xf4, 0xa3, 0x8a, 0xfc, 0xb2, 0x24, 0x77, 0xb3, 0x7b, 0xf8, 0x97, 0xdc, 0xfd, 0x0e,
	0xe0, 0xcd, 0x2d, 0x8f, 0xed, 0x90, 0xfb, 0xc1, 0x61, 0x6f, 0x30, 0x67, 0x18, 0x23, 0x52, 0xf9,
	0x11, 0xc0, 0x2b, 0xa1, 0x0e, 0xc2, 0x32, 0xbf, 0xf3, 0xf5, 0xfb, 0xff, 0x95, 0x6d, 0xb4, 0x5d,
	0x74, 0x07, 0xbe, 0x30, 0xbf, 0x32, 0xee, 0x2a, 0xcb, 0x30, 0x4b, 0xfb, 0xe1, 0x84, 0x30, 0xe5,
	0x23, 0xfa, 0x15, 0xc0, 0xe2, 0x06, 0xb5, 0x05, 0x61, 0xd3, 0xf6, 0xb9, 0x85, 0x29, 0xf3, 0x99,
	0xe0, 0x27, 0xa6, 0xca, 0x43, 0x49, 0x84, 0x79, 0x0c, 0xde, 0xcb, 0x03, 0xf4, 0x16, 0xdb, 0xd4,
	0xef, 0x25, 0x2b, 0x3b, 0x95, 0x8f, 0xb0, 0xdc, 0x93, 0x63, 0xa4, 0x76, 0xca, 0x1c, 0x79, 0x15,
	0x5e, 0x76, 0xe5, 0x06, 0xfc, 0xde, 0xb1, 0xa4, 0x97, 0x53, 0x4f, 0x16, 0x53, 0x66, 0x06, 0xee,
	0xe8, 0x3e, 0xbc, 0x31, 0xa7, 0x10, 0xee, 0x4e, 0x83, 0x82, 0xf3, 0x05, 0x7d, 0x02, 0xe0, 0x25,
	0x69, 0xff, 0x97, 0xd3, 0x4d, 0xff, 0x2d, 0x07, 0xaf, 0x45, 0x45, 0x61, 0xbf, 0xc7, 0x72, 0x08,
	0xa7, 0x97, 0x02, 0x65, 0x35, 0x51, 0x0d, 0x76, 0xa9, 0x1a, 0xdc, 0x46, 0xd4, 0xe8, 0x16, 0x12,
	0xba, 0x6e, 0x8e, 0x06, 0x8e, 0x49, 0xf6, 0x3d, 0xc2, 0x45, 0xa9, 0x71, 0x2e, 0x14, 0x5a, 0x50,
	0xf6, 0xe0, 0xd5, 0xf8, 0x90, 0x55, 0x6e, 0xa5, 0x91, 0x98, 0xb8, 0xa1, 0x94, 0x6e, 0x9f, 0xdd,
	0x99, 0xbb, 0x68, 0x41, 0xf9, 0x12, 0xc0, 0xe7, 0x4e, 0x3d, 0xce, 0x13, 0xd5, 0xce, 0x44, 0x9a,
	0x27, 0xe5, 0xd2, 0x2b, 0x17, 0x40, 0xf9, 0x1b, 0xd9, 0x83, 0x57, 0xe3, 0x9d, 0x3b, 0xbd, 0xea,
	0xc4, 0x58, 0x4d, 0xaf, 0x3a, 0x39, 0x10, 0x82, 0x64, 0xf1, 0x1e, 0x9e, 0x9e, 0x2c, 0x31, 0x00,
	0xd2, 0x93, 0x25, 0x47, 0x43, 0x90, 0x2c, 0xde, 0x57, 0xd3, 0x93, 0x25, 0xa6, 0x40, 0x7a, 0xb2,
	0x64, 0xbb, 0x46, 0x0b, 0xca, 0x57, 0x00, 0x16, 0xe7, 0xb5, 0x26, 0xe5, 0xb5, 0xd4, 0xcf, 0x71,
	0x7e, 0xab, 0x2e, 0xad, 0x5d, 0x0c, 0x28, 0x77, 0xd4, 0x5e, 0x79, 0xa4, 0xed, 0x50, 0xb1, 0xeb,
	0xf5, 0xa4, 0xea, 0x35, 0x19, 0x47, 0x8b, 0xe2, 0x68, 0xa7, 0xff, 0x30, 0xe8, 0xe5, 0xfc, 0x8b,
	0xd5, 0xdd, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x75, 0xa0, 0x4e, 0xec, 0x39, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizationClient interface {
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	IsAuthorized(ctx context.Context, in *IsAuthorizedReq, opts ...grpc.CallOption) (*IsAuthorizedResp, error)
	FilterAuthorizedPairs(ctx context.Context, in *FilterAuthorizedPairsReq, opts ...grpc.CallOption) (*FilterAuthorizedPairsResp, error)
	CreatePolicy(ctx context.Context, in *CreatePolicyReq, opts ...grpc.CallOption) (*CreatePolicyResp, error)
	ListPolicies(ctx context.Context, in *ListPoliciesReq, opts ...grpc.CallOption) (*ListPoliciesResp, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyReq, opts ...grpc.CallOption) (*DeletePolicyResp, error)
	PurgeSubjectFromPolicies(ctx context.Context, in *PurgeSubjectFromPoliciesReq, opts ...grpc.CallOption) (*PurgeSubjectFromPoliciesResp, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.Authorization/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) IsAuthorized(ctx context.Context, in *IsAuthorizedReq, opts ...grpc.CallOption) (*IsAuthorizedResp, error) {
	out := new(IsAuthorizedResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.Authorization/IsAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FilterAuthorizedPairs(ctx context.Context, in *FilterAuthorizedPairsReq, opts ...grpc.CallOption) (*FilterAuthorizedPairsResp, error) {
	out := new(FilterAuthorizedPairsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.Authorization/FilterAuthorizedPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreatePolicy(ctx context.Context, in *CreatePolicyReq, opts ...grpc.CallOption) (*CreatePolicyResp, error) {
	out := new(CreatePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.Authorization/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) ListPolicies(ctx context.Context, in *ListPoliciesReq, opts ...grpc.CallOption) (*ListPoliciesResp, error) {
	out := new(ListPoliciesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.Authorization/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeletePolicy(ctx context.Context, in *DeletePolicyReq, opts ...grpc.CallOption) (*DeletePolicyResp, error) {
	out := new(DeletePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.Authorization/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) PurgeSubjectFromPolicies(ctx context.Context, in *PurgeSubjectFromPoliciesReq, opts ...grpc.CallOption) (*PurgeSubjectFromPoliciesResp, error) {
	out := new(PurgeSubjectFromPoliciesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.Authorization/PurgeSubjectFromPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
type AuthorizationServer interface {
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	IsAuthorized(context.Context, *IsAuthorizedReq) (*IsAuthorizedResp, error)
	FilterAuthorizedPairs(context.Context, *FilterAuthorizedPairsReq) (*FilterAuthorizedPairsResp, error)
	CreatePolicy(context.Context, *CreatePolicyReq) (*CreatePolicyResp, error)
	ListPolicies(context.Context, *ListPoliciesReq) (*ListPoliciesResp, error)
	DeletePolicy(context.Context, *DeletePolicyReq) (*DeletePolicyResp, error)
	PurgeSubjectFromPolicies(context.Context, *PurgeSubjectFromPoliciesReq) (*PurgeSubjectFromPoliciesResp, error)
}

// UnimplementedAuthorizationServer can be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (*UnimplementedAuthorizationServer) GetVersion(ctx context.Context, req *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedAuthorizationServer) IsAuthorized(ctx context.Context, req *IsAuthorizedReq) (*IsAuthorizedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorized not implemented")
}
func (*UnimplementedAuthorizationServer) FilterAuthorizedPairs(ctx context.Context, req *FilterAuthorizedPairsReq) (*FilterAuthorizedPairsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAuthorizedPairs not implemented")
}
func (*UnimplementedAuthorizationServer) CreatePolicy(ctx context.Context, req *CreatePolicyReq) (*CreatePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (*UnimplementedAuthorizationServer) ListPolicies(ctx context.Context, req *ListPoliciesReq) (*ListPoliciesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (*UnimplementedAuthorizationServer) DeletePolicy(ctx context.Context, req *DeletePolicyReq) (*DeletePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedAuthorizationServer) PurgeSubjectFromPolicies(ctx context.Context, req *PurgeSubjectFromPoliciesReq) (*PurgeSubjectFromPoliciesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeSubjectFromPolicies not implemented")
}

func RegisterAuthorizationServer(s *grpc.Server, srv AuthorizationServer) {
	s.RegisterService(&_Authorization_serviceDesc, srv)
}

func _Authorization_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.Authorization/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_IsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAuthorizedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).IsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.Authorization/IsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).IsAuthorized(ctx, req.(*IsAuthorizedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FilterAuthorizedPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAuthorizedPairsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FilterAuthorizedPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.Authorization/FilterAuthorizedPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FilterAuthorizedPairs(ctx, req.(*FilterAuthorizedPairsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.Authorization/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreatePolicy(ctx, req.(*CreatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.Authorization/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).ListPolicies(ctx, req.(*ListPoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.Authorization/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeletePolicy(ctx, req.(*DeletePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_PurgeSubjectFromPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeSubjectFromPoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).PurgeSubjectFromPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.Authorization/PurgeSubjectFromPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).PurgeSubjectFromPolicies(ctx, req.(*PurgeSubjectFromPoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.authz.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Authorization_GetVersion_Handler,
		},
		{
			MethodName: "IsAuthorized",
			Handler:    _Authorization_IsAuthorized_Handler,
		},
		{
			MethodName: "FilterAuthorizedPairs",
			Handler:    _Authorization_FilterAuthorizedPairs_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _Authorization_CreatePolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _Authorization_ListPolicies_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _Authorization_DeletePolicy_Handler,
		},
		{
			MethodName: "PurgeSubjectFromPolicies",
			Handler:    _Authorization_PurgeSubjectFromPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/interservice/authz/authz.proto",
}
