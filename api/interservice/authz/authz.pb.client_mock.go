// Code generated by MockGen. DO NOT EDIT.
// Source: authz/authz.pb.go

// Package authz is a generated GoMock package.
package authz

import (
	version "github.com/chef/automate/api/external/common/version"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthorizationClient is a mock of AuthorizationClient interface
type MockAuthorizationClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationClientMockRecorder
}

// MockAuthorizationClientMockRecorder is the mock recorder for MockAuthorizationClient
type MockAuthorizationClientMockRecorder struct {
	mock *MockAuthorizationClient
}

// NewMockAuthorizationClient creates a new mock instance
func NewMockAuthorizationClient(ctrl *gomock.Controller) *MockAuthorizationClient {
	mock := &MockAuthorizationClient{ctrl: ctrl}
	mock.recorder = &MockAuthorizationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizationClient) EXPECT() *MockAuthorizationClientMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockAuthorizationClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*version.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockAuthorizationClientMockRecorder) GetVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockAuthorizationClient)(nil).GetVersion), varargs...)
}

// IsAuthorized mocks base method
func (m *MockAuthorizationClient) IsAuthorized(ctx context.Context, in *IsAuthorizedReq, opts ...grpc.CallOption) (*IsAuthorizedResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAuthorized", varargs...)
	ret0, _ := ret[0].(*IsAuthorizedResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized
func (mr *MockAuthorizationClientMockRecorder) IsAuthorized(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockAuthorizationClient)(nil).IsAuthorized), varargs...)
}

// FilterAuthorizedPairs mocks base method
func (m *MockAuthorizationClient) FilterAuthorizedPairs(ctx context.Context, in *FilterAuthorizedPairsReq, opts ...grpc.CallOption) (*FilterAuthorizedPairsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilterAuthorizedPairs", varargs...)
	ret0, _ := ret[0].(*FilterAuthorizedPairsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAuthorizedPairs indicates an expected call of FilterAuthorizedPairs
func (mr *MockAuthorizationClientMockRecorder) FilterAuthorizedPairs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAuthorizedPairs", reflect.TypeOf((*MockAuthorizationClient)(nil).FilterAuthorizedPairs), varargs...)
}

// FilterAuthorizedProjects mocks base method
func (m *MockAuthorizationClient) FilterAuthorizedProjects(ctx context.Context, in *FilterAuthorizedPairsReq, opts ...grpc.CallOption) (*FilterAuthorizedProjectsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilterAuthorizedProjects", varargs...)
	ret0, _ := ret[0].(*FilterAuthorizedProjectsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAuthorizedProjects indicates an expected call of FilterAuthorizedProjects
func (mr *MockAuthorizationClientMockRecorder) FilterAuthorizedProjects(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAuthorizedProjects", reflect.TypeOf((*MockAuthorizationClient)(nil).FilterAuthorizedProjects), varargs...)
}

// CreatePolicy mocks base method
func (m *MockAuthorizationClient) CreatePolicy(ctx context.Context, in *CreatePolicyReq, opts ...grpc.CallOption) (*CreatePolicyResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicy", varargs...)
	ret0, _ := ret[0].(*CreatePolicyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy
func (mr *MockAuthorizationClientMockRecorder) CreatePolicy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockAuthorizationClient)(nil).CreatePolicy), varargs...)
}

// ListPolicies mocks base method
func (m *MockAuthorizationClient) ListPolicies(ctx context.Context, in *ListPoliciesReq, opts ...grpc.CallOption) (*ListPoliciesResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicies", varargs...)
	ret0, _ := ret[0].(*ListPoliciesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies
func (mr *MockAuthorizationClientMockRecorder) ListPolicies(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockAuthorizationClient)(nil).ListPolicies), varargs...)
}

// DeletePolicy mocks base method
func (m *MockAuthorizationClient) DeletePolicy(ctx context.Context, in *DeletePolicyReq, opts ...grpc.CallOption) (*DeletePolicyResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicy", varargs...)
	ret0, _ := ret[0].(*DeletePolicyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockAuthorizationClientMockRecorder) DeletePolicy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockAuthorizationClient)(nil).DeletePolicy), varargs...)
}

// PurgeSubjectFromPolicies mocks base method
func (m *MockAuthorizationClient) PurgeSubjectFromPolicies(ctx context.Context, in *PurgeSubjectFromPoliciesReq, opts ...grpc.CallOption) (*PurgeSubjectFromPoliciesResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PurgeSubjectFromPolicies", varargs...)
	ret0, _ := ret[0].(*PurgeSubjectFromPoliciesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurgeSubjectFromPolicies indicates an expected call of PurgeSubjectFromPolicies
func (mr *MockAuthorizationClientMockRecorder) PurgeSubjectFromPolicies(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeSubjectFromPolicies", reflect.TypeOf((*MockAuthorizationClient)(nil).PurgeSubjectFromPolicies), varargs...)
}

// MockAuthorizationServer is a mock of AuthorizationServer interface
type MockAuthorizationServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServerMockRecorder
}

// MockAuthorizationServerMockRecorder is the mock recorder for MockAuthorizationServer
type MockAuthorizationServerMockRecorder struct {
	mock *MockAuthorizationServer
}

// NewMockAuthorizationServer creates a new mock instance
func NewMockAuthorizationServer(ctrl *gomock.Controller) *MockAuthorizationServer {
	mock := &MockAuthorizationServer{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizationServer) EXPECT() *MockAuthorizationServerMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockAuthorizationServer) GetVersion(arg0 context.Context, arg1 *version.VersionInfoRequest) (*version.VersionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0, arg1)
	ret0, _ := ret[0].(*version.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockAuthorizationServerMockRecorder) GetVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockAuthorizationServer)(nil).GetVersion), arg0, arg1)
}

// IsAuthorized mocks base method
func (m *MockAuthorizationServer) IsAuthorized(arg0 context.Context, arg1 *IsAuthorizedReq) (*IsAuthorizedResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", arg0, arg1)
	ret0, _ := ret[0].(*IsAuthorizedResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorized indicates an expected call of IsAuthorized
func (mr *MockAuthorizationServerMockRecorder) IsAuthorized(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*MockAuthorizationServer)(nil).IsAuthorized), arg0, arg1)
}

// FilterAuthorizedPairs mocks base method
func (m *MockAuthorizationServer) FilterAuthorizedPairs(arg0 context.Context, arg1 *FilterAuthorizedPairsReq) (*FilterAuthorizedPairsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAuthorizedPairs", arg0, arg1)
	ret0, _ := ret[0].(*FilterAuthorizedPairsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAuthorizedPairs indicates an expected call of FilterAuthorizedPairs
func (mr *MockAuthorizationServerMockRecorder) FilterAuthorizedPairs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAuthorizedPairs", reflect.TypeOf((*MockAuthorizationServer)(nil).FilterAuthorizedPairs), arg0, arg1)
}

// FilterAuthorizedProjects mocks base method
func (m *MockAuthorizationServer) FilterAuthorizedProjects(arg0 context.Context, arg1 *FilterAuthorizedPairsReq) (*FilterAuthorizedProjectsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAuthorizedProjects", arg0, arg1)
	ret0, _ := ret[0].(*FilterAuthorizedProjectsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAuthorizedProjects indicates an expected call of FilterAuthorizedProjects
func (mr *MockAuthorizationServerMockRecorder) FilterAuthorizedProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAuthorizedProjects", reflect.TypeOf((*MockAuthorizationServer)(nil).FilterAuthorizedProjects), arg0, arg1)
}

// CreatePolicy mocks base method
func (m *MockAuthorizationServer) CreatePolicy(arg0 context.Context, arg1 *CreatePolicyReq) (*CreatePolicyResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0, arg1)
	ret0, _ := ret[0].(*CreatePolicyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy
func (mr *MockAuthorizationServerMockRecorder) CreatePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockAuthorizationServer)(nil).CreatePolicy), arg0, arg1)
}

// ListPolicies mocks base method
func (m *MockAuthorizationServer) ListPolicies(arg0 context.Context, arg1 *ListPoliciesReq) (*ListPoliciesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicies", arg0, arg1)
	ret0, _ := ret[0].(*ListPoliciesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies
func (mr *MockAuthorizationServerMockRecorder) ListPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockAuthorizationServer)(nil).ListPolicies), arg0, arg1)
}

// DeletePolicy mocks base method
func (m *MockAuthorizationServer) DeletePolicy(arg0 context.Context, arg1 *DeletePolicyReq) (*DeletePolicyResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0, arg1)
	ret0, _ := ret[0].(*DeletePolicyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockAuthorizationServerMockRecorder) DeletePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockAuthorizationServer)(nil).DeletePolicy), arg0, arg1)
}

// PurgeSubjectFromPolicies mocks base method
func (m *MockAuthorizationServer) PurgeSubjectFromPolicies(arg0 context.Context, arg1 *PurgeSubjectFromPoliciesReq) (*PurgeSubjectFromPoliciesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeSubjectFromPolicies", arg0, arg1)
	ret0, _ := ret[0].(*PurgeSubjectFromPoliciesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurgeSubjectFromPolicies indicates an expected call of PurgeSubjectFromPolicies
func (mr *MockAuthorizationServerMockRecorder) PurgeSubjectFromPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeSubjectFromPolicies", reflect.TypeOf((*MockAuthorizationServer)(nil).PurgeSubjectFromPolicies), arg0, arg1)
}
