// Code generated by MockGen. DO NOT EDIT.
// Source: authz/policy.pb.go

// Package authz is a generated GoMock package.
package authz

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockPoliciesServiceClient is a mock of PoliciesServiceClient interface
type MockPoliciesServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPoliciesServiceClientMockRecorder
}

// MockPoliciesServiceClientMockRecorder is the mock recorder for MockPoliciesServiceClient
type MockPoliciesServiceClientMockRecorder struct {
	mock *MockPoliciesServiceClient
}

// NewMockPoliciesServiceClient creates a new mock instance
func NewMockPoliciesServiceClient(ctrl *gomock.Controller) *MockPoliciesServiceClient {
	mock := &MockPoliciesServiceClient{ctrl: ctrl}
	mock.recorder = &MockPoliciesServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoliciesServiceClient) EXPECT() *MockPoliciesServiceClientMockRecorder {
	return m.recorder
}

// ReplacePolicyMembers mocks base method
func (m *MockPoliciesServiceClient) ReplacePolicyMembers(ctx context.Context, in *ReplacePolicyMembersReq, opts ...grpc.CallOption) (*ReplacePolicyMembersResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplacePolicyMembers", varargs...)
	ret0, _ := ret[0].(*ReplacePolicyMembersResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplacePolicyMembers indicates an expected call of ReplacePolicyMembers
func (mr *MockPoliciesServiceClientMockRecorder) ReplacePolicyMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplacePolicyMembers", reflect.TypeOf((*MockPoliciesServiceClient)(nil).ReplacePolicyMembers), varargs...)
}

// CreatePolicy mocks base method
func (m *MockPoliciesServiceClient) CreatePolicy(ctx context.Context, in *CreatePolicyReq, opts ...grpc.CallOption) (*Policy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicy", varargs...)
	ret0, _ := ret[0].(*Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy
func (mr *MockPoliciesServiceClientMockRecorder) CreatePolicy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockPoliciesServiceClient)(nil).CreatePolicy), varargs...)
}

// DeletePolicy mocks base method
func (m *MockPoliciesServiceClient) DeletePolicy(ctx context.Context, in *DeletePolicyReq, opts ...grpc.CallOption) (*DeletePolicyResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicy", varargs...)
	ret0, _ := ret[0].(*DeletePolicyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockPoliciesServiceClientMockRecorder) DeletePolicy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockPoliciesServiceClient)(nil).DeletePolicy), varargs...)
}

// ListPolicies mocks base method
func (m *MockPoliciesServiceClient) ListPolicies(ctx context.Context, in *ListPoliciesReq, opts ...grpc.CallOption) (*ListPoliciesResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicies", varargs...)
	ret0, _ := ret[0].(*ListPoliciesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies
func (mr *MockPoliciesServiceClientMockRecorder) ListPolicies(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockPoliciesServiceClient)(nil).ListPolicies), varargs...)
}

// GetPolicy mocks base method
func (m *MockPoliciesServiceClient) GetPolicy(ctx context.Context, in *GetPolicyReq, opts ...grpc.CallOption) (*Policy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicy", varargs...)
	ret0, _ := ret[0].(*Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockPoliciesServiceClientMockRecorder) GetPolicy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockPoliciesServiceClient)(nil).GetPolicy), varargs...)
}

// UpdatePolicy mocks base method
func (m *MockPoliciesServiceClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyReq, opts ...grpc.CallOption) (*Policy, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePolicy", varargs...)
	ret0, _ := ret[0].(*Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy
func (mr *MockPoliciesServiceClientMockRecorder) UpdatePolicy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockPoliciesServiceClient)(nil).UpdatePolicy), varargs...)
}

// GetPolicyVersion mocks base method
func (m *MockPoliciesServiceClient) GetPolicyVersion(ctx context.Context, in *GetPolicyVersionReq, opts ...grpc.CallOption) (*GetPolicyVersionResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicyVersion", varargs...)
	ret0, _ := ret[0].(*GetPolicyVersionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyVersion indicates an expected call of GetPolicyVersion
func (mr *MockPoliciesServiceClientMockRecorder) GetPolicyVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyVersion", reflect.TypeOf((*MockPoliciesServiceClient)(nil).GetPolicyVersion), varargs...)
}

// CreateRole mocks base method
func (m *MockPoliciesServiceClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRole", varargs...)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockPoliciesServiceClientMockRecorder) CreateRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockPoliciesServiceClient)(nil).CreateRole), varargs...)
}

// ListRoles mocks base method
func (m *MockPoliciesServiceClient) ListRoles(ctx context.Context, in *ListRolesReq, opts ...grpc.CallOption) (*ListRolesResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoles", varargs...)
	ret0, _ := ret[0].(*ListRolesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles
func (mr *MockPoliciesServiceClientMockRecorder) ListRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockPoliciesServiceClient)(nil).ListRoles), varargs...)
}

// GetRole mocks base method
func (m *MockPoliciesServiceClient) GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRole", varargs...)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole
func (mr *MockPoliciesServiceClientMockRecorder) GetRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockPoliciesServiceClient)(nil).GetRole), varargs...)
}

// DeleteRole mocks base method
func (m *MockPoliciesServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRole", varargs...)
	ret0, _ := ret[0].(*DeleteRoleResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockPoliciesServiceClientMockRecorder) DeleteRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockPoliciesServiceClient)(nil).DeleteRole), varargs...)
}

// UpdateRole mocks base method
func (m *MockPoliciesServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRole", varargs...)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockPoliciesServiceClientMockRecorder) UpdateRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockPoliciesServiceClient)(nil).UpdateRole), varargs...)
}

// ListPolicyMembers mocks base method
func (m *MockPoliciesServiceClient) ListPolicyMembers(ctx context.Context, in *ListPolicyMembersReq, opts ...grpc.CallOption) (*ListPolicyMembersResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyMembers", varargs...)
	ret0, _ := ret[0].(*ListPolicyMembersResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyMembers indicates an expected call of ListPolicyMembers
func (mr *MockPoliciesServiceClientMockRecorder) ListPolicyMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyMembers", reflect.TypeOf((*MockPoliciesServiceClient)(nil).ListPolicyMembers), varargs...)
}

// RemovePolicyMembers mocks base method
func (m *MockPoliciesServiceClient) RemovePolicyMembers(ctx context.Context, in *RemovePolicyMembersReq, opts ...grpc.CallOption) (*RemovePolicyMembersResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePolicyMembers", varargs...)
	ret0, _ := ret[0].(*RemovePolicyMembersResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePolicyMembers indicates an expected call of RemovePolicyMembers
func (mr *MockPoliciesServiceClientMockRecorder) RemovePolicyMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicyMembers", reflect.TypeOf((*MockPoliciesServiceClient)(nil).RemovePolicyMembers), varargs...)
}

// AddPolicyMembers mocks base method
func (m *MockPoliciesServiceClient) AddPolicyMembers(ctx context.Context, in *AddPolicyMembersReq, opts ...grpc.CallOption) (*AddPolicyMembersResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPolicyMembers", varargs...)
	ret0, _ := ret[0].(*AddPolicyMembersResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPolicyMembers indicates an expected call of AddPolicyMembers
func (mr *MockPoliciesServiceClientMockRecorder) AddPolicyMembers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicyMembers", reflect.TypeOf((*MockPoliciesServiceClient)(nil).AddPolicyMembers), varargs...)
}

// PurgeSubjectFromPolicies mocks base method
func (m *MockPoliciesServiceClient) PurgeSubjectFromPolicies(ctx context.Context, in *PurgeSubjectFromPoliciesReq, opts ...grpc.CallOption) (*PurgeSubjectFromPoliciesResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PurgeSubjectFromPolicies", varargs...)
	ret0, _ := ret[0].(*PurgeSubjectFromPoliciesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurgeSubjectFromPolicies indicates an expected call of PurgeSubjectFromPolicies
func (mr *MockPoliciesServiceClientMockRecorder) PurgeSubjectFromPolicies(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeSubjectFromPolicies", reflect.TypeOf((*MockPoliciesServiceClient)(nil).PurgeSubjectFromPolicies), varargs...)
}

// MockPoliciesServiceServer is a mock of PoliciesServiceServer interface
type MockPoliciesServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPoliciesServiceServerMockRecorder
}

// MockPoliciesServiceServerMockRecorder is the mock recorder for MockPoliciesServiceServer
type MockPoliciesServiceServerMockRecorder struct {
	mock *MockPoliciesServiceServer
}

// NewMockPoliciesServiceServer creates a new mock instance
func NewMockPoliciesServiceServer(ctrl *gomock.Controller) *MockPoliciesServiceServer {
	mock := &MockPoliciesServiceServer{ctrl: ctrl}
	mock.recorder = &MockPoliciesServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoliciesServiceServer) EXPECT() *MockPoliciesServiceServerMockRecorder {
	return m.recorder
}

// ReplacePolicyMembers mocks base method
func (m *MockPoliciesServiceServer) ReplacePolicyMembers(arg0 context.Context, arg1 *ReplacePolicyMembersReq) (*ReplacePolicyMembersResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplacePolicyMembers", arg0, arg1)
	ret0, _ := ret[0].(*ReplacePolicyMembersResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplacePolicyMembers indicates an expected call of ReplacePolicyMembers
func (mr *MockPoliciesServiceServerMockRecorder) ReplacePolicyMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplacePolicyMembers", reflect.TypeOf((*MockPoliciesServiceServer)(nil).ReplacePolicyMembers), arg0, arg1)
}

// CreatePolicy mocks base method
func (m *MockPoliciesServiceServer) CreatePolicy(arg0 context.Context, arg1 *CreatePolicyReq) (*Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0, arg1)
	ret0, _ := ret[0].(*Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy
func (mr *MockPoliciesServiceServerMockRecorder) CreatePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockPoliciesServiceServer)(nil).CreatePolicy), arg0, arg1)
}

// DeletePolicy mocks base method
func (m *MockPoliciesServiceServer) DeletePolicy(arg0 context.Context, arg1 *DeletePolicyReq) (*DeletePolicyResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0, arg1)
	ret0, _ := ret[0].(*DeletePolicyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy
func (mr *MockPoliciesServiceServerMockRecorder) DeletePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockPoliciesServiceServer)(nil).DeletePolicy), arg0, arg1)
}

// ListPolicies mocks base method
func (m *MockPoliciesServiceServer) ListPolicies(arg0 context.Context, arg1 *ListPoliciesReq) (*ListPoliciesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicies", arg0, arg1)
	ret0, _ := ret[0].(*ListPoliciesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies
func (mr *MockPoliciesServiceServerMockRecorder) ListPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockPoliciesServiceServer)(nil).ListPolicies), arg0, arg1)
}

// GetPolicy mocks base method
func (m *MockPoliciesServiceServer) GetPolicy(arg0 context.Context, arg1 *GetPolicyReq) (*Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0, arg1)
	ret0, _ := ret[0].(*Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockPoliciesServiceServerMockRecorder) GetPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockPoliciesServiceServer)(nil).GetPolicy), arg0, arg1)
}

// UpdatePolicy mocks base method
func (m *MockPoliciesServiceServer) UpdatePolicy(arg0 context.Context, arg1 *UpdatePolicyReq) (*Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0, arg1)
	ret0, _ := ret[0].(*Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy
func (mr *MockPoliciesServiceServerMockRecorder) UpdatePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockPoliciesServiceServer)(nil).UpdatePolicy), arg0, arg1)
}

// GetPolicyVersion mocks base method
func (m *MockPoliciesServiceServer) GetPolicyVersion(arg0 context.Context, arg1 *GetPolicyVersionReq) (*GetPolicyVersionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyVersion", arg0, arg1)
	ret0, _ := ret[0].(*GetPolicyVersionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicyVersion indicates an expected call of GetPolicyVersion
func (mr *MockPoliciesServiceServerMockRecorder) GetPolicyVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyVersion", reflect.TypeOf((*MockPoliciesServiceServer)(nil).GetPolicyVersion), arg0, arg1)
}

// CreateRole mocks base method
func (m *MockPoliciesServiceServer) CreateRole(arg0 context.Context, arg1 *CreateRoleReq) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole
func (mr *MockPoliciesServiceServerMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockPoliciesServiceServer)(nil).CreateRole), arg0, arg1)
}

// ListRoles mocks base method
func (m *MockPoliciesServiceServer) ListRoles(arg0 context.Context, arg1 *ListRolesReq) (*ListRolesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", arg0, arg1)
	ret0, _ := ret[0].(*ListRolesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles
func (mr *MockPoliciesServiceServerMockRecorder) ListRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockPoliciesServiceServer)(nil).ListRoles), arg0, arg1)
}

// GetRole mocks base method
func (m *MockPoliciesServiceServer) GetRole(arg0 context.Context, arg1 *GetRoleReq) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole
func (mr *MockPoliciesServiceServerMockRecorder) GetRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockPoliciesServiceServer)(nil).GetRole), arg0, arg1)
}

// DeleteRole mocks base method
func (m *MockPoliciesServiceServer) DeleteRole(arg0 context.Context, arg1 *DeleteRoleReq) (*DeleteRoleResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(*DeleteRoleResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockPoliciesServiceServerMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockPoliciesServiceServer)(nil).DeleteRole), arg0, arg1)
}

// UpdateRole mocks base method
func (m *MockPoliciesServiceServer) UpdateRole(arg0 context.Context, arg1 *UpdateRoleReq) (*Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(*Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockPoliciesServiceServerMockRecorder) UpdateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockPoliciesServiceServer)(nil).UpdateRole), arg0, arg1)
}

// ListPolicyMembers mocks base method
func (m *MockPoliciesServiceServer) ListPolicyMembers(arg0 context.Context, arg1 *ListPolicyMembersReq) (*ListPolicyMembersResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyMembers", arg0, arg1)
	ret0, _ := ret[0].(*ListPolicyMembersResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyMembers indicates an expected call of ListPolicyMembers
func (mr *MockPoliciesServiceServerMockRecorder) ListPolicyMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyMembers", reflect.TypeOf((*MockPoliciesServiceServer)(nil).ListPolicyMembers), arg0, arg1)
}

// RemovePolicyMembers mocks base method
func (m *MockPoliciesServiceServer) RemovePolicyMembers(arg0 context.Context, arg1 *RemovePolicyMembersReq) (*RemovePolicyMembersResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicyMembers", arg0, arg1)
	ret0, _ := ret[0].(*RemovePolicyMembersResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePolicyMembers indicates an expected call of RemovePolicyMembers
func (mr *MockPoliciesServiceServerMockRecorder) RemovePolicyMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicyMembers", reflect.TypeOf((*MockPoliciesServiceServer)(nil).RemovePolicyMembers), arg0, arg1)
}

// AddPolicyMembers mocks base method
func (m *MockPoliciesServiceServer) AddPolicyMembers(arg0 context.Context, arg1 *AddPolicyMembersReq) (*AddPolicyMembersResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicyMembers", arg0, arg1)
	ret0, _ := ret[0].(*AddPolicyMembersResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPolicyMembers indicates an expected call of AddPolicyMembers
func (mr *MockPoliciesServiceServerMockRecorder) AddPolicyMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicyMembers", reflect.TypeOf((*MockPoliciesServiceServer)(nil).AddPolicyMembers), arg0, arg1)
}

// PurgeSubjectFromPolicies mocks base method
func (m *MockPoliciesServiceServer) PurgeSubjectFromPolicies(arg0 context.Context, arg1 *PurgeSubjectFromPoliciesReq) (*PurgeSubjectFromPoliciesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeSubjectFromPolicies", arg0, arg1)
	ret0, _ := ret[0].(*PurgeSubjectFromPoliciesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurgeSubjectFromPolicies indicates an expected call of PurgeSubjectFromPolicies
func (mr *MockPoliciesServiceServerMockRecorder) PurgeSubjectFromPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeSubjectFromPolicies", reflect.TypeOf((*MockPoliciesServiceServer)(nil).PurgeSubjectFromPolicies), arg0, arg1)
}
