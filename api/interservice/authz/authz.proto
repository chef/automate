syntax = "proto3";

import "validate/validate.proto";
import "external/common/version/version.proto";

package chef.automate.domain.authz;
option go_package = "github.com/chef/automate/api/interservice/authz";

// TODO (tc): Keeping this around for the validation used in protoc-gen-policy/policy.go
message IsAuthorizedReq {
  repeated string subjects = 1
    [(validate.rules).repeated = {
      min_items: 1,
      items: { string: { pattern: "^(?:team|user):(?:local|ldap|saml):[^:*]+$|^token:[^:*]+$|^tls:service:[^:*]+:[^:*]+$" } }
     }];
  string resource = 2
    [(validate.rules).string.pattern = "^[a-z][^:*]*(?::[^:*]+)*$"];
  string action = 3
    [(validate.rules).string.pattern = "^[a-z][^:*]*(?::[^:*]+)*$"];
}

message GetVersionReq {}

message ProjectsAuthorizedReq {
  repeated string subjects = 1
    [(validate.rules).repeated = {
      min_items: 1,
      items: { string: { pattern: "^(?:team|user):(?:local|ldap|saml):[^:*]+$|^token:[^:*]+$|^tls:service:[^:*]+:[^:*]+$" } }
     }];
  string resource = 2
    [(validate.rules).string.pattern = "^[a-z][^:*]*(?::[^:*]+)*$"];
  string action = 3
    [(validate.rules).string.pattern = "^[a-z][a-zA-Z]*(?::[a-z][a-zA-Z]*){2}$"];
  repeated string projects_filter = 4 [(validate.rules).repeated = {
      unique: true,
      items: {
          string: {
            pattern: "^[a-z0-9()-_]{1,64}$"
          }
      }
     }];
}

message ProjectsAuthorizedResp {
  repeated string projects = 1 [(validate.rules).repeated = {
    unique: true,
    items: {
        string: {
            pattern: "^[a-z0-9-_]{1,64}$"
        }
    }
   }];
}

message FilterAuthorizedPairsReq {
    repeated string subjects = 1
      [(validate.rules).repeated = {
        min_items: 1,
        items: { string: { pattern: "^(?:(?:team|user):(?:local|ldap|saml)|token|tls:service:[^:*]+):[^:*]+$" } }
       }];
    repeated Pair pairs = 2;
}

message FilterAuthorizedPairsResp {
    repeated Pair pairs = 1;
}

message Pair {
    string resource = 2
      [(validate.rules).string.pattern = "^[a-z][^:*]*(?::[^:*]+)*$"];
    string action = 3
      [(validate.rules).string.pattern = "^[a-z][a-zA-Z]*(?::[a-z][a-zA-Z]*){2}$"];
}

message FilterAuthorizedProjectsReq {
    repeated string subjects = 1
      [(validate.rules).repeated = {
        min_items: 1,
        items: { string: { pattern: "^(?:(?:team|user):(?:local|ldap|saml)|token|tls:service:[^:*]+):[^:*]+$" } }
       }];
}

message FilterAuthorizedProjectsResp {
    repeated string projects = 1;
}

message ValidateProjectAssignmentReq {
    repeated string subjects = 1;
    repeated string old_projects = 2
      [(validate.rules).repeated = {
        unique: true,
        items: { string: { pattern: "^[a-z0-9()-_]{1,64}$" } }
      }];
    repeated string new_projects = 3
      [(validate.rules).repeated = {
        unique: true,
        items: { string: { pattern: "^[a-z0-9()-_]{1,64}$" } }
      }];
    bool is_update_request = 4;
}

message ValidateProjectAssignmentResp {}

service AuthorizationService {
    rpc GetVersion (chef.automate.api.common.version.VersionInfoRequest) returns (chef.automate.api.common.version.VersionInfo) {};
    rpc FilterAuthorizedPairs (FilterAuthorizedPairsReq) returns (FilterAuthorizedPairsResp) {};
    rpc FilterAuthorizedProjects (FilterAuthorizedProjectsReq) returns (FilterAuthorizedProjectsResp) {};
    rpc ProjectsAuthorized (ProjectsAuthorizedReq) returns (ProjectsAuthorizedResp) {};
    rpc ValidateProjectAssignment (ValidateProjectAssignmentReq) returns (ValidateProjectAssignmentResp) {};
}
