// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/interservice/authz/v2/project.proto

package v2 // import "github.com/chef/automate/api/interservice/authz/v2"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import event "github.com/chef/automate/api/interservice/event"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/lyft/protoc-gen-validate/validate"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProjectRuleTypes int32

const (
	ProjectRuleTypes_NODE  ProjectRuleTypes = 0
	ProjectRuleTypes_EVENT ProjectRuleTypes = 1
)

var ProjectRuleTypes_name = map[int32]string{
	0: "NODE",
	1: "EVENT",
}
var ProjectRuleTypes_value = map[string]int32{
	"NODE":  0,
	"EVENT": 1,
}

func (x ProjectRuleTypes) String() string {
	return proto.EnumName(ProjectRuleTypes_name, int32(x))
}
func (ProjectRuleTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{0}
}

type ProjectRuleConditionTypes int32

const (
	ProjectRuleConditionTypes_CHEF_SERVERS      ProjectRuleConditionTypes = 0
	ProjectRuleConditionTypes_CHEF_ORGS         ProjectRuleConditionTypes = 1
	ProjectRuleConditionTypes_CHEF_ENVIRONMENTS ProjectRuleConditionTypes = 2
	ProjectRuleConditionTypes_ROLES             ProjectRuleConditionTypes = 3
	ProjectRuleConditionTypes_CHEF_TAGS         ProjectRuleConditionTypes = 4
	ProjectRuleConditionTypes_POLICY_GROUP      ProjectRuleConditionTypes = 5
	ProjectRuleConditionTypes_POLICY_NAME       ProjectRuleConditionTypes = 6
)

var ProjectRuleConditionTypes_name = map[int32]string{
	0: "CHEF_SERVERS",
	1: "CHEF_ORGS",
	2: "CHEF_ENVIRONMENTS",
	3: "ROLES",
	4: "CHEF_TAGS",
	5: "POLICY_GROUP",
	6: "POLICY_NAME",
}
var ProjectRuleConditionTypes_value = map[string]int32{
	"CHEF_SERVERS":      0,
	"CHEF_ORGS":         1,
	"CHEF_ENVIRONMENTS": 2,
	"ROLES":             3,
	"CHEF_TAGS":         4,
	"POLICY_GROUP":      5,
	"POLICY_NAME":       6,
}

func (x ProjectRuleConditionTypes) String() string {
	return proto.EnumName(ProjectRuleConditionTypes_name, int32(x))
}
func (ProjectRuleConditionTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{1}
}

type ProjectRuleConditionOperators int32

const (
	ProjectRuleConditionOperators_MEMBER_OF ProjectRuleConditionOperators = 0
	ProjectRuleConditionOperators_EQUALS    ProjectRuleConditionOperators = 1
)

var ProjectRuleConditionOperators_name = map[int32]string{
	0: "MEMBER_OF",
	1: "EQUALS",
}
var ProjectRuleConditionOperators_value = map[string]int32{
	"MEMBER_OF": 0,
	"EQUALS":    1,
}

func (x ProjectRuleConditionOperators) String() string {
	return proto.EnumName(ProjectRuleConditionOperators_name, int32(x))
}
func (ProjectRuleConditionOperators) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{2}
}

type Project struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Type                 Type     `protobuf:"varint,3,opt,name=type,proto3,enum=chef.automate.domain.authz.v2.Type" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
	Projects             []string `protobuf:"bytes,4,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{0}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (dst *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(dst, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Project) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_CHEF_MANAGED
}

func (m *Project) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

type CreateProjectReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *CreateProjectReq) Reset()         { *m = CreateProjectReq{} }
func (m *CreateProjectReq) String() string { return proto.CompactTextString(m) }
func (*CreateProjectReq) ProtoMessage()    {}
func (*CreateProjectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{1}
}
func (m *CreateProjectReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProjectReq.Unmarshal(m, b)
}
func (m *CreateProjectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProjectReq.Marshal(b, m, deterministic)
}
func (dst *CreateProjectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProjectReq.Merge(dst, src)
}
func (m *CreateProjectReq) XXX_Size() int {
	return xxx_messageInfo_CreateProjectReq.Size(m)
}
func (m *CreateProjectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProjectReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProjectReq proto.InternalMessageInfo

func (m *CreateProjectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateProjectReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateProjectResp struct {
	Project              *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty" toml:"project,omitempty" mapstructure:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *CreateProjectResp) Reset()         { *m = CreateProjectResp{} }
func (m *CreateProjectResp) String() string { return proto.CompactTextString(m) }
func (*CreateProjectResp) ProtoMessage()    {}
func (*CreateProjectResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{2}
}
func (m *CreateProjectResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProjectResp.Unmarshal(m, b)
}
func (m *CreateProjectResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProjectResp.Marshal(b, m, deterministic)
}
func (dst *CreateProjectResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProjectResp.Merge(dst, src)
}
func (m *CreateProjectResp) XXX_Size() int {
	return xxx_messageInfo_CreateProjectResp.Size(m)
}
func (m *CreateProjectResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProjectResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProjectResp proto.InternalMessageInfo

func (m *CreateProjectResp) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

type GetProjectReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetProjectReq) Reset()         { *m = GetProjectReq{} }
func (m *GetProjectReq) String() string { return proto.CompactTextString(m) }
func (*GetProjectReq) ProtoMessage()    {}
func (*GetProjectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{3}
}
func (m *GetProjectReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProjectReq.Unmarshal(m, b)
}
func (m *GetProjectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProjectReq.Marshal(b, m, deterministic)
}
func (dst *GetProjectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProjectReq.Merge(dst, src)
}
func (m *GetProjectReq) XXX_Size() int {
	return xxx_messageInfo_GetProjectReq.Size(m)
}
func (m *GetProjectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProjectReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetProjectReq proto.InternalMessageInfo

func (m *GetProjectReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetProjectResp struct {
	Project              *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty" toml:"project,omitempty" mapstructure:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetProjectResp) Reset()         { *m = GetProjectResp{} }
func (m *GetProjectResp) String() string { return proto.CompactTextString(m) }
func (*GetProjectResp) ProtoMessage()    {}
func (*GetProjectResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{4}
}
func (m *GetProjectResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProjectResp.Unmarshal(m, b)
}
func (m *GetProjectResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProjectResp.Marshal(b, m, deterministic)
}
func (dst *GetProjectResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProjectResp.Merge(dst, src)
}
func (m *GetProjectResp) XXX_Size() int {
	return xxx_messageInfo_GetProjectResp.Size(m)
}
func (m *GetProjectResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProjectResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetProjectResp proto.InternalMessageInfo

func (m *GetProjectResp) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

type ListProjectsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ListProjectsReq) Reset()         { *m = ListProjectsReq{} }
func (m *ListProjectsReq) String() string { return proto.CompactTextString(m) }
func (*ListProjectsReq) ProtoMessage()    {}
func (*ListProjectsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{5}
}
func (m *ListProjectsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProjectsReq.Unmarshal(m, b)
}
func (m *ListProjectsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProjectsReq.Marshal(b, m, deterministic)
}
func (dst *ListProjectsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProjectsReq.Merge(dst, src)
}
func (m *ListProjectsReq) XXX_Size() int {
	return xxx_messageInfo_ListProjectsReq.Size(m)
}
func (m *ListProjectsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProjectsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListProjectsReq proto.InternalMessageInfo

type ListProjectsResp struct {
	Projects             []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte     `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32      `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ListProjectsResp) Reset()         { *m = ListProjectsResp{} }
func (m *ListProjectsResp) String() string { return proto.CompactTextString(m) }
func (*ListProjectsResp) ProtoMessage()    {}
func (*ListProjectsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{6}
}
func (m *ListProjectsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProjectsResp.Unmarshal(m, b)
}
func (m *ListProjectsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProjectsResp.Marshal(b, m, deterministic)
}
func (dst *ListProjectsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProjectsResp.Merge(dst, src)
}
func (m *ListProjectsResp) XXX_Size() int {
	return xxx_messageInfo_ListProjectsResp.Size(m)
}
func (m *ListProjectsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProjectsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListProjectsResp proto.InternalMessageInfo

func (m *ListProjectsResp) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type UpdateProjectReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *UpdateProjectReq) Reset()         { *m = UpdateProjectReq{} }
func (m *UpdateProjectReq) String() string { return proto.CompactTextString(m) }
func (*UpdateProjectReq) ProtoMessage()    {}
func (*UpdateProjectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{7}
}
func (m *UpdateProjectReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateProjectReq.Unmarshal(m, b)
}
func (m *UpdateProjectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateProjectReq.Marshal(b, m, deterministic)
}
func (dst *UpdateProjectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProjectReq.Merge(dst, src)
}
func (m *UpdateProjectReq) XXX_Size() int {
	return xxx_messageInfo_UpdateProjectReq.Size(m)
}
func (m *UpdateProjectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProjectReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProjectReq proto.InternalMessageInfo

func (m *UpdateProjectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateProjectReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateProjectResp struct {
	Project              *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty" toml:"project,omitempty" mapstructure:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *UpdateProjectResp) Reset()         { *m = UpdateProjectResp{} }
func (m *UpdateProjectResp) String() string { return proto.CompactTextString(m) }
func (*UpdateProjectResp) ProtoMessage()    {}
func (*UpdateProjectResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{8}
}
func (m *UpdateProjectResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateProjectResp.Unmarshal(m, b)
}
func (m *UpdateProjectResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateProjectResp.Marshal(b, m, deterministic)
}
func (dst *UpdateProjectResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProjectResp.Merge(dst, src)
}
func (m *UpdateProjectResp) XXX_Size() int {
	return xxx_messageInfo_UpdateProjectResp.Size(m)
}
func (m *UpdateProjectResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProjectResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProjectResp proto.InternalMessageInfo

func (m *UpdateProjectResp) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

type DeleteProjectReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *DeleteProjectReq) Reset()         { *m = DeleteProjectReq{} }
func (m *DeleteProjectReq) String() string { return proto.CompactTextString(m) }
func (*DeleteProjectReq) ProtoMessage()    {}
func (*DeleteProjectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{9}
}
func (m *DeleteProjectReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteProjectReq.Unmarshal(m, b)
}
func (m *DeleteProjectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteProjectReq.Marshal(b, m, deterministic)
}
func (dst *DeleteProjectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteProjectReq.Merge(dst, src)
}
func (m *DeleteProjectReq) XXX_Size() int {
	return xxx_messageInfo_DeleteProjectReq.Size(m)
}
func (m *DeleteProjectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteProjectReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteProjectReq proto.InternalMessageInfo

func (m *DeleteProjectReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteProjectResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *DeleteProjectResp) Reset()         { *m = DeleteProjectResp{} }
func (m *DeleteProjectResp) String() string { return proto.CompactTextString(m) }
func (*DeleteProjectResp) ProtoMessage()    {}
func (*DeleteProjectResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{10}
}
func (m *DeleteProjectResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteProjectResp.Unmarshal(m, b)
}
func (m *DeleteProjectResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteProjectResp.Marshal(b, m, deterministic)
}
func (dst *DeleteProjectResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteProjectResp.Merge(dst, src)
}
func (m *DeleteProjectResp) XXX_Size() int {
	return xxx_messageInfo_DeleteProjectResp.Size(m)
}
func (m *DeleteProjectResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteProjectResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteProjectResp proto.InternalMessageInfo

type ProjectUpdateCancelReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ProjectUpdateCancelReq) Reset()         { *m = ProjectUpdateCancelReq{} }
func (m *ProjectUpdateCancelReq) String() string { return proto.CompactTextString(m) }
func (*ProjectUpdateCancelReq) ProtoMessage()    {}
func (*ProjectUpdateCancelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{11}
}
func (m *ProjectUpdateCancelReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectUpdateCancelReq.Unmarshal(m, b)
}
func (m *ProjectUpdateCancelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectUpdateCancelReq.Marshal(b, m, deterministic)
}
func (dst *ProjectUpdateCancelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectUpdateCancelReq.Merge(dst, src)
}
func (m *ProjectUpdateCancelReq) XXX_Size() int {
	return xxx_messageInfo_ProjectUpdateCancelReq.Size(m)
}
func (m *ProjectUpdateCancelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectUpdateCancelReq.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectUpdateCancelReq proto.InternalMessageInfo

type ProjectUpdateCancelResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ProjectUpdateCancelResp) Reset()         { *m = ProjectUpdateCancelResp{} }
func (m *ProjectUpdateCancelResp) String() string { return proto.CompactTextString(m) }
func (*ProjectUpdateCancelResp) ProtoMessage()    {}
func (*ProjectUpdateCancelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{12}
}
func (m *ProjectUpdateCancelResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectUpdateCancelResp.Unmarshal(m, b)
}
func (m *ProjectUpdateCancelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectUpdateCancelResp.Marshal(b, m, deterministic)
}
func (dst *ProjectUpdateCancelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectUpdateCancelResp.Merge(dst, src)
}
func (m *ProjectUpdateCancelResp) XXX_Size() int {
	return xxx_messageInfo_ProjectUpdateCancelResp.Size(m)
}
func (m *ProjectUpdateCancelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectUpdateCancelResp.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectUpdateCancelResp proto.InternalMessageInfo

type ProjectUpdateStatusReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ProjectUpdateStatusReq) Reset()         { *m = ProjectUpdateStatusReq{} }
func (m *ProjectUpdateStatusReq) String() string { return proto.CompactTextString(m) }
func (*ProjectUpdateStatusReq) ProtoMessage()    {}
func (*ProjectUpdateStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{13}
}
func (m *ProjectUpdateStatusReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectUpdateStatusReq.Unmarshal(m, b)
}
func (m *ProjectUpdateStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectUpdateStatusReq.Marshal(b, m, deterministic)
}
func (dst *ProjectUpdateStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectUpdateStatusReq.Merge(dst, src)
}
func (m *ProjectUpdateStatusReq) XXX_Size() int {
	return xxx_messageInfo_ProjectUpdateStatusReq.Size(m)
}
func (m *ProjectUpdateStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectUpdateStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectUpdateStatusReq proto.InternalMessageInfo

type ProjectUpdateStatusResp struct {
	State                 string               `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty" toml:"state,omitempty" mapstructure:"state,omitempty"`
	EstimatedTimeComplete *timestamp.Timestamp `protobuf:"bytes,2,opt,name=estimated_time_complete,json=estimatedTimeComplete,proto3" json:"estimated_time_complete,omitempty" toml:"estimated_time_complete,omitempty" mapstructure:"estimated_time_complete,omitempty"`
	PercentageComplete    float32              `protobuf:"fixed32,3,opt,name=percentage_complete,json=percentageComplete,proto3" json:"percentage_complete,omitempty" toml:"percentage_complete,omitempty" mapstructure:"percentage_complete,omitempty"`
	Failed                bool                 `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty" toml:"failed,omitempty" mapstructure:"failed,omitempty"`
	FailureMessage        string               `protobuf:"bytes,5,opt,name=failure_message,json=failureMessage,proto3" json:"failure_message,omitempty" toml:"failure_message,omitempty" mapstructure:"failure_message,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized      []byte               `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache         int32                `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ProjectUpdateStatusResp) Reset()         { *m = ProjectUpdateStatusResp{} }
func (m *ProjectUpdateStatusResp) String() string { return proto.CompactTextString(m) }
func (*ProjectUpdateStatusResp) ProtoMessage()    {}
func (*ProjectUpdateStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{14}
}
func (m *ProjectUpdateStatusResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectUpdateStatusResp.Unmarshal(m, b)
}
func (m *ProjectUpdateStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectUpdateStatusResp.Marshal(b, m, deterministic)
}
func (dst *ProjectUpdateStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectUpdateStatusResp.Merge(dst, src)
}
func (m *ProjectUpdateStatusResp) XXX_Size() int {
	return xxx_messageInfo_ProjectUpdateStatusResp.Size(m)
}
func (m *ProjectUpdateStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectUpdateStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectUpdateStatusResp proto.InternalMessageInfo

func (m *ProjectUpdateStatusResp) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ProjectUpdateStatusResp) GetEstimatedTimeComplete() *timestamp.Timestamp {
	if m != nil {
		return m.EstimatedTimeComplete
	}
	return nil
}

func (m *ProjectUpdateStatusResp) GetPercentageComplete() float32 {
	if m != nil {
		return m.PercentageComplete
	}
	return 0
}

func (m *ProjectUpdateStatusResp) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *ProjectUpdateStatusResp) GetFailureMessage() string {
	if m != nil {
		return m.FailureMessage
	}
	return ""
}

type ListRulesForAllProjectsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ListRulesForAllProjectsReq) Reset()         { *m = ListRulesForAllProjectsReq{} }
func (m *ListRulesForAllProjectsReq) String() string { return proto.CompactTextString(m) }
func (*ListRulesForAllProjectsReq) ProtoMessage()    {}
func (*ListRulesForAllProjectsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{15}
}
func (m *ListRulesForAllProjectsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRulesForAllProjectsReq.Unmarshal(m, b)
}
func (m *ListRulesForAllProjectsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRulesForAllProjectsReq.Marshal(b, m, deterministic)
}
func (dst *ListRulesForAllProjectsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRulesForAllProjectsReq.Merge(dst, src)
}
func (m *ListRulesForAllProjectsReq) XXX_Size() int {
	return xxx_messageInfo_ListRulesForAllProjectsReq.Size(m)
}
func (m *ListRulesForAllProjectsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRulesForAllProjectsReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRulesForAllProjectsReq proto.InternalMessageInfo

type ListRulesForAllProjectsResp struct {
	ProjectRules         map[string]*ProjectRules `protobuf:"bytes,2,rep,name=project_rules,json=projectRules,proto3" json:"project_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" toml:"project_rules,omitempty" mapstructure:"project_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte                   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32                    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ListRulesForAllProjectsResp) Reset()         { *m = ListRulesForAllProjectsResp{} }
func (m *ListRulesForAllProjectsResp) String() string { return proto.CompactTextString(m) }
func (*ListRulesForAllProjectsResp) ProtoMessage()    {}
func (*ListRulesForAllProjectsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{16}
}
func (m *ListRulesForAllProjectsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRulesForAllProjectsResp.Unmarshal(m, b)
}
func (m *ListRulesForAllProjectsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRulesForAllProjectsResp.Marshal(b, m, deterministic)
}
func (dst *ListRulesForAllProjectsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRulesForAllProjectsResp.Merge(dst, src)
}
func (m *ListRulesForAllProjectsResp) XXX_Size() int {
	return xxx_messageInfo_ListRulesForAllProjectsResp.Size(m)
}
func (m *ListRulesForAllProjectsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRulesForAllProjectsResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListRulesForAllProjectsResp proto.InternalMessageInfo

func (m *ListRulesForAllProjectsResp) GetProjectRules() map[string]*ProjectRules {
	if m != nil {
		return m.ProjectRules
	}
	return nil
}

type ProjectRules struct {
	Rules                []*ProjectRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty" toml:"rules,omitempty" mapstructure:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte         `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32          `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ProjectRules) Reset()         { *m = ProjectRules{} }
func (m *ProjectRules) String() string { return proto.CompactTextString(m) }
func (*ProjectRules) ProtoMessage()    {}
func (*ProjectRules) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{17}
}
func (m *ProjectRules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectRules.Unmarshal(m, b)
}
func (m *ProjectRules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectRules.Marshal(b, m, deterministic)
}
func (dst *ProjectRules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectRules.Merge(dst, src)
}
func (m *ProjectRules) XXX_Size() int {
	return xxx_messageInfo_ProjectRules.Size(m)
}
func (m *ProjectRules) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectRules.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectRules proto.InternalMessageInfo

func (m *ProjectRules) GetRules() []*ProjectRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type ProjectRule struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	ProjectId            string           `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" toml:"project_id,omitempty" mapstructure:"project_id,omitempty"`
	Name                 string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Type                 ProjectRuleTypes `protobuf:"varint,4,opt,name=type,proto3,enum=chef.automate.domain.authz.v2.ProjectRuleTypes" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
	Conditions           []*Condition     `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty" toml:"conditions,omitempty" mapstructure:"conditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte           `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32            `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ProjectRule) Reset()         { *m = ProjectRule{} }
func (m *ProjectRule) String() string { return proto.CompactTextString(m) }
func (*ProjectRule) ProtoMessage()    {}
func (*ProjectRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{18}
}
func (m *ProjectRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectRule.Unmarshal(m, b)
}
func (m *ProjectRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectRule.Marshal(b, m, deterministic)
}
func (dst *ProjectRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectRule.Merge(dst, src)
}
func (m *ProjectRule) XXX_Size() int {
	return xxx_messageInfo_ProjectRule.Size(m)
}
func (m *ProjectRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectRule.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectRule proto.InternalMessageInfo

func (m *ProjectRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectRule) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ProjectRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProjectRule) GetType() ProjectRuleTypes {
	if m != nil {
		return m.Type
	}
	return ProjectRuleTypes_NODE
}

func (m *ProjectRule) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type Condition struct {
	Type                 ProjectRuleConditionTypes     `protobuf:"varint,1,opt,name=type,proto3,enum=chef.automate.domain.authz.v2.ProjectRuleConditionTypes" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
	Values               []string                      `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" toml:"values,omitempty" mapstructure:"values,omitempty"`
	Operator             ProjectRuleConditionOperators `protobuf:"varint,3,opt,name=operator,proto3,enum=chef.automate.domain.authz.v2.ProjectRuleConditionOperators" json:"operator,omitempty" toml:"operator,omitempty" mapstructure:"operator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte                        `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32                         `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{19}
}
func (m *Condition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Condition.Unmarshal(m, b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
}
func (dst *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(dst, src)
}
func (m *Condition) XXX_Size() int {
	return xxx_messageInfo_Condition.Size(m)
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetType() ProjectRuleConditionTypes {
	if m != nil {
		return m.Type
	}
	return ProjectRuleConditionTypes_CHEF_SERVERS
}

func (m *Condition) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Condition) GetOperator() ProjectRuleConditionOperators {
	if m != nil {
		return m.Operator
	}
	return ProjectRuleConditionOperators_MEMBER_OF
}

// CreateRuleReq is ProjectRule, so the input is just one JSON object. Also adds
// basic validation.
type CreateRuleReq struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	ProjectId            string           `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" toml:"project_id,omitempty" mapstructure:"project_id,omitempty"`
	Name                 string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Type                 ProjectRuleTypes `protobuf:"varint,4,opt,name=type,proto3,enum=chef.automate.domain.authz.v2.ProjectRuleTypes" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
	Conditions           []*Condition     `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty" toml:"conditions,omitempty" mapstructure:"conditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte           `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32            `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *CreateRuleReq) Reset()         { *m = CreateRuleReq{} }
func (m *CreateRuleReq) String() string { return proto.CompactTextString(m) }
func (*CreateRuleReq) ProtoMessage()    {}
func (*CreateRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{20}
}
func (m *CreateRuleReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRuleReq.Unmarshal(m, b)
}
func (m *CreateRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRuleReq.Marshal(b, m, deterministic)
}
func (dst *CreateRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRuleReq.Merge(dst, src)
}
func (m *CreateRuleReq) XXX_Size() int {
	return xxx_messageInfo_CreateRuleReq.Size(m)
}
func (m *CreateRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRuleReq proto.InternalMessageInfo

func (m *CreateRuleReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateRuleReq) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CreateRuleReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRuleReq) GetType() ProjectRuleTypes {
	if m != nil {
		return m.Type
	}
	return ProjectRuleTypes_NODE
}

func (m *CreateRuleReq) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type CreateRuleResp struct {
	Rule                 *ProjectRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty" toml:"rule,omitempty" mapstructure:"rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte       `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32        `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *CreateRuleResp) Reset()         { *m = CreateRuleResp{} }
func (m *CreateRuleResp) String() string { return proto.CompactTextString(m) }
func (*CreateRuleResp) ProtoMessage()    {}
func (*CreateRuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{21}
}
func (m *CreateRuleResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRuleResp.Unmarshal(m, b)
}
func (m *CreateRuleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRuleResp.Marshal(b, m, deterministic)
}
func (dst *CreateRuleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRuleResp.Merge(dst, src)
}
func (m *CreateRuleResp) XXX_Size() int {
	return xxx_messageInfo_CreateRuleResp.Size(m)
}
func (m *CreateRuleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRuleResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRuleResp proto.InternalMessageInfo

func (m *CreateRuleResp) GetRule() *ProjectRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

type UpdateRuleReq struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	ProjectId            string           `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty" toml:"project_id,omitempty" mapstructure:"project_id,omitempty"`
	Name                 string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Type                 ProjectRuleTypes `protobuf:"varint,4,opt,name=type,proto3,enum=chef.automate.domain.authz.v2.ProjectRuleTypes" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
	Conditions           []*Condition     `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty" toml:"conditions,omitempty" mapstructure:"conditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte           `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32            `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *UpdateRuleReq) Reset()         { *m = UpdateRuleReq{} }
func (m *UpdateRuleReq) String() string { return proto.CompactTextString(m) }
func (*UpdateRuleReq) ProtoMessage()    {}
func (*UpdateRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{22}
}
func (m *UpdateRuleReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRuleReq.Unmarshal(m, b)
}
func (m *UpdateRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRuleReq.Marshal(b, m, deterministic)
}
func (dst *UpdateRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRuleReq.Merge(dst, src)
}
func (m *UpdateRuleReq) XXX_Size() int {
	return xxx_messageInfo_UpdateRuleReq.Size(m)
}
func (m *UpdateRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRuleReq proto.InternalMessageInfo

func (m *UpdateRuleReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRuleReq) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *UpdateRuleReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRuleReq) GetType() ProjectRuleTypes {
	if m != nil {
		return m.Type
	}
	return ProjectRuleTypes_NODE
}

func (m *UpdateRuleReq) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

type UpdateRuleResp struct {
	Rule                 *ProjectRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty" toml:"rule,omitempty" mapstructure:"rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte       `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32        `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *UpdateRuleResp) Reset()         { *m = UpdateRuleResp{} }
func (m *UpdateRuleResp) String() string { return proto.CompactTextString(m) }
func (*UpdateRuleResp) ProtoMessage()    {}
func (*UpdateRuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{23}
}
func (m *UpdateRuleResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRuleResp.Unmarshal(m, b)
}
func (m *UpdateRuleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRuleResp.Marshal(b, m, deterministic)
}
func (dst *UpdateRuleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRuleResp.Merge(dst, src)
}
func (m *UpdateRuleResp) XXX_Size() int {
	return xxx_messageInfo_UpdateRuleResp.Size(m)
}
func (m *UpdateRuleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRuleResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRuleResp proto.InternalMessageInfo

func (m *UpdateRuleResp) GetRule() *ProjectRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

type GetRuleReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetRuleReq) Reset()         { *m = GetRuleReq{} }
func (m *GetRuleReq) String() string { return proto.CompactTextString(m) }
func (*GetRuleReq) ProtoMessage()    {}
func (*GetRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{24}
}
func (m *GetRuleReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRuleReq.Unmarshal(m, b)
}
func (m *GetRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRuleReq.Marshal(b, m, deterministic)
}
func (dst *GetRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRuleReq.Merge(dst, src)
}
func (m *GetRuleReq) XXX_Size() int {
	return xxx_messageInfo_GetRuleReq.Size(m)
}
func (m *GetRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRuleReq proto.InternalMessageInfo

func (m *GetRuleReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetRuleResp struct {
	Rule                 *ProjectRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty" toml:"rule,omitempty" mapstructure:"rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte       `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32        `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *GetRuleResp) Reset()         { *m = GetRuleResp{} }
func (m *GetRuleResp) String() string { return proto.CompactTextString(m) }
func (*GetRuleResp) ProtoMessage()    {}
func (*GetRuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{25}
}
func (m *GetRuleResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRuleResp.Unmarshal(m, b)
}
func (m *GetRuleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRuleResp.Marshal(b, m, deterministic)
}
func (dst *GetRuleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRuleResp.Merge(dst, src)
}
func (m *GetRuleResp) XXX_Size() int {
	return xxx_messageInfo_GetRuleResp.Size(m)
}
func (m *GetRuleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRuleResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRuleResp proto.InternalMessageInfo

func (m *GetRuleResp) GetRule() *ProjectRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

type ListRulesReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ListRulesReq) Reset()         { *m = ListRulesReq{} }
func (m *ListRulesReq) String() string { return proto.CompactTextString(m) }
func (*ListRulesReq) ProtoMessage()    {}
func (*ListRulesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{26}
}
func (m *ListRulesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRulesReq.Unmarshal(m, b)
}
func (m *ListRulesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRulesReq.Marshal(b, m, deterministic)
}
func (dst *ListRulesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRulesReq.Merge(dst, src)
}
func (m *ListRulesReq) XXX_Size() int {
	return xxx_messageInfo_ListRulesReq.Size(m)
}
func (m *ListRulesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRulesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRulesReq proto.InternalMessageInfo

type ListRulesResp struct {
	Rules                []*ProjectRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty" toml:"rules,omitempty" mapstructure:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte         `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32          `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ListRulesResp) Reset()         { *m = ListRulesResp{} }
func (m *ListRulesResp) String() string { return proto.CompactTextString(m) }
func (*ListRulesResp) ProtoMessage()    {}
func (*ListRulesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{27}
}
func (m *ListRulesResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRulesResp.Unmarshal(m, b)
}
func (m *ListRulesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRulesResp.Marshal(b, m, deterministic)
}
func (dst *ListRulesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRulesResp.Merge(dst, src)
}
func (m *ListRulesResp) XXX_Size() int {
	return xxx_messageInfo_ListRulesResp.Size(m)
}
func (m *ListRulesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRulesResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListRulesResp proto.InternalMessageInfo

func (m *ListRulesResp) GetRules() []*ProjectRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type ListRulesForProjectReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ListRulesForProjectReq) Reset()         { *m = ListRulesForProjectReq{} }
func (m *ListRulesForProjectReq) String() string { return proto.CompactTextString(m) }
func (*ListRulesForProjectReq) ProtoMessage()    {}
func (*ListRulesForProjectReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{28}
}
func (m *ListRulesForProjectReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRulesForProjectReq.Unmarshal(m, b)
}
func (m *ListRulesForProjectReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRulesForProjectReq.Marshal(b, m, deterministic)
}
func (dst *ListRulesForProjectReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRulesForProjectReq.Merge(dst, src)
}
func (m *ListRulesForProjectReq) XXX_Size() int {
	return xxx_messageInfo_ListRulesForProjectReq.Size(m)
}
func (m *ListRulesForProjectReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRulesForProjectReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRulesForProjectReq proto.InternalMessageInfo

func (m *ListRulesForProjectReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListRulesForProjectResp struct {
	Rules                []*ProjectRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty" toml:"rules,omitempty" mapstructure:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte         `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32          `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *ListRulesForProjectResp) Reset()         { *m = ListRulesForProjectResp{} }
func (m *ListRulesForProjectResp) String() string { return proto.CompactTextString(m) }
func (*ListRulesForProjectResp) ProtoMessage()    {}
func (*ListRulesForProjectResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{29}
}
func (m *ListRulesForProjectResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRulesForProjectResp.Unmarshal(m, b)
}
func (m *ListRulesForProjectResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRulesForProjectResp.Marshal(b, m, deterministic)
}
func (dst *ListRulesForProjectResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRulesForProjectResp.Merge(dst, src)
}
func (m *ListRulesForProjectResp) XXX_Size() int {
	return xxx_messageInfo_ListRulesForProjectResp.Size(m)
}
func (m *ListRulesForProjectResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRulesForProjectResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListRulesForProjectResp proto.InternalMessageInfo

func (m *ListRulesForProjectResp) GetRules() []*ProjectRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type DeleteRuleReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *DeleteRuleReq) Reset()         { *m = DeleteRuleReq{} }
func (m *DeleteRuleReq) String() string { return proto.CompactTextString(m) }
func (*DeleteRuleReq) ProtoMessage()    {}
func (*DeleteRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{30}
}
func (m *DeleteRuleReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRuleReq.Unmarshal(m, b)
}
func (m *DeleteRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRuleReq.Marshal(b, m, deterministic)
}
func (dst *DeleteRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRuleReq.Merge(dst, src)
}
func (m *DeleteRuleReq) XXX_Size() int {
	return xxx_messageInfo_DeleteRuleReq.Size(m)
}
func (m *DeleteRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRuleReq proto.InternalMessageInfo

func (m *DeleteRuleReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteRuleResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *DeleteRuleResp) Reset()         { *m = DeleteRuleResp{} }
func (m *DeleteRuleResp) String() string { return proto.CompactTextString(m) }
func (*DeleteRuleResp) ProtoMessage()    {}
func (*DeleteRuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_3cccbec51318149b, []int{31}
}
func (m *DeleteRuleResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRuleResp.Unmarshal(m, b)
}
func (m *DeleteRuleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRuleResp.Marshal(b, m, deterministic)
}
func (dst *DeleteRuleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRuleResp.Merge(dst, src)
}
func (m *DeleteRuleResp) XXX_Size() int {
	return xxx_messageInfo_DeleteRuleResp.Size(m)
}
func (m *DeleteRuleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRuleResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRuleResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Project)(nil), "chef.automate.domain.authz.v2.Project")
	proto.RegisterType((*CreateProjectReq)(nil), "chef.automate.domain.authz.v2.CreateProjectReq")
	proto.RegisterType((*CreateProjectResp)(nil), "chef.automate.domain.authz.v2.CreateProjectResp")
	proto.RegisterType((*GetProjectReq)(nil), "chef.automate.domain.authz.v2.GetProjectReq")
	proto.RegisterType((*GetProjectResp)(nil), "chef.automate.domain.authz.v2.GetProjectResp")
	proto.RegisterType((*ListProjectsReq)(nil), "chef.automate.domain.authz.v2.ListProjectsReq")
	proto.RegisterType((*ListProjectsResp)(nil), "chef.automate.domain.authz.v2.ListProjectsResp")
	proto.RegisterType((*UpdateProjectReq)(nil), "chef.automate.domain.authz.v2.UpdateProjectReq")
	proto.RegisterType((*UpdateProjectResp)(nil), "chef.automate.domain.authz.v2.UpdateProjectResp")
	proto.RegisterType((*DeleteProjectReq)(nil), "chef.automate.domain.authz.v2.DeleteProjectReq")
	proto.RegisterType((*DeleteProjectResp)(nil), "chef.automate.domain.authz.v2.DeleteProjectResp")
	proto.RegisterType((*ProjectUpdateCancelReq)(nil), "chef.automate.domain.authz.v2.ProjectUpdateCancelReq")
	proto.RegisterType((*ProjectUpdateCancelResp)(nil), "chef.automate.domain.authz.v2.ProjectUpdateCancelResp")
	proto.RegisterType((*ProjectUpdateStatusReq)(nil), "chef.automate.domain.authz.v2.ProjectUpdateStatusReq")
	proto.RegisterType((*ProjectUpdateStatusResp)(nil), "chef.automate.domain.authz.v2.ProjectUpdateStatusResp")
	proto.RegisterType((*ListRulesForAllProjectsReq)(nil), "chef.automate.domain.authz.v2.ListRulesForAllProjectsReq")
	proto.RegisterType((*ListRulesForAllProjectsResp)(nil), "chef.automate.domain.authz.v2.ListRulesForAllProjectsResp")
	proto.RegisterMapType((map[string]*ProjectRules)(nil), "chef.automate.domain.authz.v2.ListRulesForAllProjectsResp.ProjectRulesEntry")
	proto.RegisterType((*ProjectRules)(nil), "chef.automate.domain.authz.v2.ProjectRules")
	proto.RegisterType((*ProjectRule)(nil), "chef.automate.domain.authz.v2.ProjectRule")
	proto.RegisterType((*Condition)(nil), "chef.automate.domain.authz.v2.Condition")
	proto.RegisterType((*CreateRuleReq)(nil), "chef.automate.domain.authz.v2.CreateRuleReq")
	proto.RegisterType((*CreateRuleResp)(nil), "chef.automate.domain.authz.v2.CreateRuleResp")
	proto.RegisterType((*UpdateRuleReq)(nil), "chef.automate.domain.authz.v2.UpdateRuleReq")
	proto.RegisterType((*UpdateRuleResp)(nil), "chef.automate.domain.authz.v2.UpdateRuleResp")
	proto.RegisterType((*GetRuleReq)(nil), "chef.automate.domain.authz.v2.GetRuleReq")
	proto.RegisterType((*GetRuleResp)(nil), "chef.automate.domain.authz.v2.GetRuleResp")
	proto.RegisterType((*ListRulesReq)(nil), "chef.automate.domain.authz.v2.ListRulesReq")
	proto.RegisterType((*ListRulesResp)(nil), "chef.automate.domain.authz.v2.ListRulesResp")
	proto.RegisterType((*ListRulesForProjectReq)(nil), "chef.automate.domain.authz.v2.ListRulesForProjectReq")
	proto.RegisterType((*ListRulesForProjectResp)(nil), "chef.automate.domain.authz.v2.ListRulesForProjectResp")
	proto.RegisterType((*DeleteRuleReq)(nil), "chef.automate.domain.authz.v2.DeleteRuleReq")
	proto.RegisterType((*DeleteRuleResp)(nil), "chef.automate.domain.authz.v2.DeleteRuleResp")
	proto.RegisterEnum("chef.automate.domain.authz.v2.ProjectRuleTypes", ProjectRuleTypes_name, ProjectRuleTypes_value)
	proto.RegisterEnum("chef.automate.domain.authz.v2.ProjectRuleConditionTypes", ProjectRuleConditionTypes_name, ProjectRuleConditionTypes_value)
	proto.RegisterEnum("chef.automate.domain.authz.v2.ProjectRuleConditionOperators", ProjectRuleConditionOperators_name, ProjectRuleConditionOperators_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProjectsClient is the client API for Projects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectsClient interface {
	UpdateProject(ctx context.Context, in *UpdateProjectReq, opts ...grpc.CallOption) (*UpdateProjectResp, error)
	CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectResp, error)
	GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectResp, error)
	DeleteProject(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*DeleteProjectResp, error)
	ListProjects(ctx context.Context, in *ListProjectsReq, opts ...grpc.CallOption) (*ListProjectsResp, error)
	ListProjectsForIntrospection(ctx context.Context, in *ListProjectsReq, opts ...grpc.CallOption) (*ListProjectsResp, error)
	// Note: POC functions that are not ready to expose outside of our
	// spike (aka keep them out of the gateway for now).
	HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error)
	ProjectUpdateStatus(ctx context.Context, in *ProjectUpdateStatusReq, opts ...grpc.CallOption) (*ProjectUpdateStatusResp, error)
	ProjectUpdateCancel(ctx context.Context, in *ProjectUpdateStatusReq, opts ...grpc.CallOption) (*ProjectUpdateCancelResp, error)
	// "proper" methods go here (and the ones above will be phased out eventually)
	CreateRule(ctx context.Context, in *CreateRuleReq, opts ...grpc.CallOption) (*CreateRuleResp, error)
	UpdateRule(ctx context.Context, in *UpdateRuleReq, opts ...grpc.CallOption) (*UpdateRuleResp, error)
	GetRule(ctx context.Context, in *GetRuleReq, opts ...grpc.CallOption) (*GetRuleResp, error)
	ListRules(ctx context.Context, in *ListRulesReq, opts ...grpc.CallOption) (*ListRulesResp, error)
	ListRulesForProject(ctx context.Context, in *ListRulesForProjectReq, opts ...grpc.CallOption) (*ListRulesForProjectResp, error)
	DeleteRule(ctx context.Context, in *DeleteRuleReq, opts ...grpc.CallOption) (*DeleteRuleResp, error)
	ListRulesForAllProjects(ctx context.Context, in *ListRulesForAllProjectsReq, opts ...grpc.CallOption) (*ListRulesForAllProjectsResp, error)
}

type projectsClient struct {
	cc *grpc.ClientConn
}

func NewProjectsClient(cc *grpc.ClientConn) ProjectsClient {
	return &projectsClient{cc}
}

func (c *projectsClient) UpdateProject(ctx context.Context, in *UpdateProjectReq, opts ...grpc.CallOption) (*UpdateProjectResp, error) {
	out := new(UpdateProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectResp, error) {
	out := new(CreateProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectResp, error) {
	out := new(GetProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) DeleteProject(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*DeleteProjectResp, error) {
	out := new(DeleteProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) ListProjects(ctx context.Context, in *ListProjectsReq, opts ...grpc.CallOption) (*ListProjectsResp, error) {
	out := new(ListProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) ListProjectsForIntrospection(ctx context.Context, in *ListProjectsReq, opts ...grpc.CallOption) (*ListProjectsResp, error) {
	out := new(ListProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/ListProjectsForIntrospection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error) {
	out := new(event.EventResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/HandleEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) ProjectUpdateStatus(ctx context.Context, in *ProjectUpdateStatusReq, opts ...grpc.CallOption) (*ProjectUpdateStatusResp, error) {
	out := new(ProjectUpdateStatusResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/ProjectUpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) ProjectUpdateCancel(ctx context.Context, in *ProjectUpdateStatusReq, opts ...grpc.CallOption) (*ProjectUpdateCancelResp, error) {
	out := new(ProjectUpdateCancelResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/ProjectUpdateCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) CreateRule(ctx context.Context, in *CreateRuleReq, opts ...grpc.CallOption) (*CreateRuleResp, error) {
	out := new(CreateRuleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) UpdateRule(ctx context.Context, in *UpdateRuleReq, opts ...grpc.CallOption) (*UpdateRuleResp, error) {
	out := new(UpdateRuleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) GetRule(ctx context.Context, in *GetRuleReq, opts ...grpc.CallOption) (*GetRuleResp, error) {
	out := new(GetRuleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/GetRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) ListRules(ctx context.Context, in *ListRulesReq, opts ...grpc.CallOption) (*ListRulesResp, error) {
	out := new(ListRulesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) ListRulesForProject(ctx context.Context, in *ListRulesForProjectReq, opts ...grpc.CallOption) (*ListRulesForProjectResp, error) {
	out := new(ListRulesForProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/ListRulesForProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) DeleteRule(ctx context.Context, in *DeleteRuleReq, opts ...grpc.CallOption) (*DeleteRuleResp, error) {
	out := new(DeleteRuleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) ListRulesForAllProjects(ctx context.Context, in *ListRulesForAllProjectsReq, opts ...grpc.CallOption) (*ListRulesForAllProjectsResp, error) {
	out := new(ListRulesForAllProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authz.v2.Projects/ListRulesForAllProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServer is the server API for Projects service.
type ProjectsServer interface {
	UpdateProject(context.Context, *UpdateProjectReq) (*UpdateProjectResp, error)
	CreateProject(context.Context, *CreateProjectReq) (*CreateProjectResp, error)
	GetProject(context.Context, *GetProjectReq) (*GetProjectResp, error)
	DeleteProject(context.Context, *DeleteProjectReq) (*DeleteProjectResp, error)
	ListProjects(context.Context, *ListProjectsReq) (*ListProjectsResp, error)
	ListProjectsForIntrospection(context.Context, *ListProjectsReq) (*ListProjectsResp, error)
	// Note: POC functions that are not ready to expose outside of our
	// spike (aka keep them out of the gateway for now).
	HandleEvent(context.Context, *event.EventMsg) (*event.EventResponse, error)
	ProjectUpdateStatus(context.Context, *ProjectUpdateStatusReq) (*ProjectUpdateStatusResp, error)
	ProjectUpdateCancel(context.Context, *ProjectUpdateStatusReq) (*ProjectUpdateCancelResp, error)
	// "proper" methods go here (and the ones above will be phased out eventually)
	CreateRule(context.Context, *CreateRuleReq) (*CreateRuleResp, error)
	UpdateRule(context.Context, *UpdateRuleReq) (*UpdateRuleResp, error)
	GetRule(context.Context, *GetRuleReq) (*GetRuleResp, error)
	ListRules(context.Context, *ListRulesReq) (*ListRulesResp, error)
	ListRulesForProject(context.Context, *ListRulesForProjectReq) (*ListRulesForProjectResp, error)
	DeleteRule(context.Context, *DeleteRuleReq) (*DeleteRuleResp, error)
	ListRulesForAllProjects(context.Context, *ListRulesForAllProjectsReq) (*ListRulesForAllProjectsResp, error)
}

func RegisterProjectsServer(s *grpc.Server, srv ProjectsServer) {
	s.RegisterService(&_Projects_serviceDesc, srv)
}

func _Projects_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).UpdateProject(ctx, req.(*UpdateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).CreateProject(ctx, req.(*CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetProject(ctx, req.(*GetProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).DeleteProject(ctx, req.(*DeleteProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).ListProjects(ctx, req.(*ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_ListProjectsForIntrospection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).ListProjectsForIntrospection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/ListProjectsForIntrospection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).ListProjectsForIntrospection(ctx, req.(*ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_HandleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.EventMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).HandleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/HandleEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).HandleEvent(ctx, req.(*event.EventMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_ProjectUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectUpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).ProjectUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/ProjectUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).ProjectUpdateStatus(ctx, req.(*ProjectUpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_ProjectUpdateCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectUpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).ProjectUpdateCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/ProjectUpdateCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).ProjectUpdateCancel(ctx, req.(*ProjectUpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).CreateRule(ctx, req.(*CreateRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).UpdateRule(ctx, req.(*UpdateRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/GetRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetRule(ctx, req.(*GetRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).ListRules(ctx, req.(*ListRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_ListRulesForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesForProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).ListRulesForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/ListRulesForProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).ListRulesForProject(ctx, req.(*ListRulesForProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).DeleteRule(ctx, req.(*DeleteRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_ListRulesForAllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesForAllProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).ListRulesForAllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authz.v2.Projects/ListRulesForAllProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).ListRulesForAllProjects(ctx, req.(*ListRulesForAllProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Projects_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.authz.v2.Projects",
	HandlerType: (*ProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProject",
			Handler:    _Projects_UpdateProject_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _Projects_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Projects_GetProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Projects_DeleteProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _Projects_ListProjects_Handler,
		},
		{
			MethodName: "ListProjectsForIntrospection",
			Handler:    _Projects_ListProjectsForIntrospection_Handler,
		},
		{
			MethodName: "HandleEvent",
			Handler:    _Projects_HandleEvent_Handler,
		},
		{
			MethodName: "ProjectUpdateStatus",
			Handler:    _Projects_ProjectUpdateStatus_Handler,
		},
		{
			MethodName: "ProjectUpdateCancel",
			Handler:    _Projects_ProjectUpdateCancel_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _Projects_CreateRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _Projects_UpdateRule_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _Projects_GetRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _Projects_ListRules_Handler,
		},
		{
			MethodName: "ListRulesForProject",
			Handler:    _Projects_ListRulesForProject_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _Projects_DeleteRule_Handler,
		},
		{
			MethodName: "ListRulesForAllProjects",
			Handler:    _Projects_ListRulesForAllProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/interservice/authz/v2/project.proto",
}

func init() {
	proto.RegisterFile("api/interservice/authz/v2/project.proto", fileDescriptor_project_3cccbec51318149b)
}

var fileDescriptor_project_3cccbec51318149b = []byte{
	// 1400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xf8, 0x23, 0x8d, 0x5f, 0x12, 0x77, 0x33, 0xa1, 0x89, 0x6b, 0x1a, 0x11, 0x2d, 0x15,
	0x0d, 0x69, 0xb3, 0x5b, 0x4c, 0x29, 0xfd, 0x40, 0x55, 0x13, 0x77, 0x93, 0x46, 0x8a, 0xe3, 0x74,
	0x9d, 0x44, 0x40, 0x05, 0xd6, 0xc6, 0x9e, 0x24, 0x4b, 0xed, 0xdd, 0xcd, 0xee, 0xd8, 0x52, 0x8a,
	0x38, 0x80, 0x10, 0x67, 0xd4, 0xbf, 0x84, 0x33, 0x27, 0xee, 0xfc, 0x11, 0x9c, 0xf9, 0x03, 0x38,
	0x70, 0x41, 0x68, 0x66, 0x3f, 0xb2, 0xeb, 0xd8, 0x59, 0xdb, 0x58, 0x3d, 0x71, 0xb1, 0x76, 0x66,
	0xde, 0xc7, 0x6f, 0xe6, 0x37, 0x6f, 0xde, 0x7b, 0x86, 0x5b, 0x9a, 0xa5, 0xcb, 0xba, 0x41, 0x89,
	0xed, 0x10, 0xbb, 0xa3, 0xd7, 0x89, 0xac, 0xb5, 0xe9, 0xc9, 0x6b, 0xb9, 0x53, 0x94, 0x2d, 0xdb,
	0xfc, 0x86, 0xd4, 0xa9, 0x64, 0xd9, 0x26, 0x35, 0xf1, 0x62, 0xfd, 0x84, 0x1c, 0x49, 0x5a, 0x9b,
	0x9a, 0x2d, 0x8d, 0x12, 0xa9, 0x61, 0xb6, 0x34, 0xdd, 0x90, 0xb8, 0xb0, 0xd4, 0x29, 0x16, 0x16,
	0x3a, 0x5a, 0x53, 0x6f, 0x68, 0x94, 0xc8, 0xfe, 0x87, 0xab, 0x57, 0xb8, 0xd9, 0xdf, 0x01, 0x3d,
	0xb3, 0x7c, 0x29, 0xf1, 0x82, 0x14, 0xe9, 0x10, 0x83, 0xba, 0xbf, 0x9e, 0xcc, 0x7b, 0xc7, 0xa6,
	0x79, 0xdc, 0x24, 0x32, 0x1f, 0x1d, 0xb6, 0x8f, 0x64, 0xaa, 0xb7, 0x88, 0x43, 0xb5, 0x96, 0xe5,
	0x0a, 0x88, 0x3f, 0x20, 0xb8, 0xb2, 0xeb, 0x82, 0xc6, 0x18, 0xd2, 0x86, 0xd6, 0x22, 0x79, 0xb4,
	0x84, 0x96, 0xb3, 0x2a, 0xff, 0xc6, 0x39, 0x48, 0xea, 0x8d, 0x7c, 0x92, 0xcf, 0x24, 0xf5, 0x06,
	0xfe, 0x14, 0xd2, 0x0c, 0x42, 0x3e, 0xb5, 0x84, 0x96, 0x73, 0xc5, 0xf7, 0xa5, 0x4b, 0x77, 0x28,
	0xed, 0x9d, 0x59, 0x44, 0xe5, 0x0a, 0xb8, 0x00, 0x93, 0xde, 0xe1, 0x38, 0xf9, 0xf4, 0x52, 0x6a,
	0x39, 0xab, 0x06, 0x63, 0x51, 0x05, 0xa1, 0x64, 0x13, 0x8d, 0x12, 0x0f, 0x89, 0x4a, 0x4e, 0x7b,
	0x82, 0x59, 0x39, 0x07, 0xb3, 0x5e, 0xf8, 0xf5, 0xcf, 0xdf, 0x52, 0xd7, 0xec, 0xb9, 0xe2, 0xec,
	0xd7, 0x2f, 0xb5, 0xd5, 0xd7, 0x77, 0x57, 0x1f, 0xae, 0x7e, 0xf5, 0xed, 0x47, 0x77, 0xee, 0xdf,
	0xfb, 0xee, 0x26, 0x03, 0x2a, 0xee, 0xc3, 0x6c, 0x97, 0x4d, 0xc7, 0xc2, 0x4f, 0xe1, 0x8a, 0xe7,
	0x94, 0xdb, 0x9d, 0x2a, 0x7e, 0x10, 0xb3, 0x01, 0x5f, 0xd9, 0x57, 0x13, 0x1f, 0xc3, 0xcc, 0x26,
	0xa1, 0x21, 0x9c, 0x2e, 0x26, 0x34, 0x10, 0x26, 0x15, 0x72, 0x61, 0xe5, 0xb1, 0x00, 0x9a, 0x85,
	0xab, 0xdb, 0xba, 0xe3, 0x1b, 0x75, 0x54, 0x72, 0x2a, 0x1e, 0x80, 0x10, 0x9d, 0x72, 0x2c, 0xbc,
	0x1e, 0x3a, 0x7e, 0xb4, 0x94, 0x1a, 0xc2, 0x53, 0x84, 0xa6, 0x7d, 0xab, 0x31, 0x76, 0x9a, 0xba,
	0x6c, 0x8e, 0xe5, 0x54, 0x9e, 0x80, 0xf0, 0x8c, 0x34, 0x49, 0x04, 0xea, 0x30, 0x4c, 0xcd, 0xc1,
	0x6c, 0x97, 0xbe, 0x63, 0x89, 0x79, 0x98, 0xf7, 0x86, 0x2e, 0xe4, 0x92, 0x66, 0xd4, 0x49, 0x93,
	0x9d, 0xf8, 0x75, 0x58, 0xe8, 0xb9, 0xd2, 0x43, 0xa9, 0x4a, 0x35, 0xda, 0xe6, 0x34, 0xfd, 0x85,
	0xba, 0xb4, 0xfc, 0x25, 0xc7, 0xc2, 0xef, 0x40, 0xc6, 0xa1, 0x1a, 0xf5, 0xcf, 0xd5, 0x1d, 0x60,
	0x15, 0x16, 0x88, 0x43, 0x75, 0x76, 0x04, 0x8d, 0x1a, 0x8b, 0xe4, 0x5a, 0xdd, 0x6c, 0x59, 0x0c,
	0x26, 0x3f, 0xed, 0xa9, 0x62, 0x41, 0x72, 0xe3, 0x5d, 0xf2, 0xe3, 0x5d, 0xda, 0xf3, 0xe3, 0x5d,
	0xbd, 0x16, 0xa8, 0xb2, 0xb9, 0x92, 0xa7, 0x88, 0x65, 0x98, 0xb3, 0x88, 0x5d, 0x27, 0x06, 0xd5,
	0x8e, 0x43, 0xf6, 0x58, 0x7c, 0x27, 0x55, 0x7c, 0xbe, 0x14, 0x28, 0xcc, 0xc3, 0xc4, 0x91, 0xa6,
	0x37, 0x49, 0x23, 0x9f, 0x5e, 0x42, 0xcb, 0x93, 0xaa, 0x37, 0xc2, 0xb7, 0xe0, 0x2a, 0xfb, 0x6a,
	0xdb, 0xa4, 0xd6, 0x22, 0x8e, 0xa3, 0x1d, 0x93, 0x7c, 0x86, 0x83, 0xcf, 0x79, 0xd3, 0x65, 0x77,
	0x56, 0xbc, 0x01, 0x05, 0x76, 0x3d, 0xd5, 0x76, 0x93, 0x38, 0x1b, 0xa6, 0xbd, 0xd6, 0x6c, 0x86,
	0x2f, 0xef, 0x3f, 0x08, 0xde, 0xed, 0xbb, 0xec, 0x58, 0xf8, 0x14, 0x66, 0x3c, 0x92, 0x6b, 0x36,
	0x13, 0xc9, 0x27, 0xf9, 0x6d, 0xde, 0x8e, 0xb9, 0x21, 0x97, 0x98, 0x0c, 0x6e, 0x0f, 0x5b, 0x56,
	0x0c, 0x6a, 0x9f, 0xa9, 0xd3, 0x56, 0x68, 0xaa, 0xd0, 0x84, 0xd9, 0x0b, 0x22, 0x58, 0x80, 0xd4,
	0x2b, 0x72, 0xe6, 0xf1, 0xc3, 0x3e, 0xf1, 0x1a, 0x64, 0x3a, 0x5a, 0xb3, 0xed, 0x73, 0x71, 0x7b,
	0xc0, 0x3b, 0xcb, 0x4c, 0xaa, 0xae, 0xe6, 0xa3, 0xe4, 0x03, 0x24, 0xee, 0xc2, 0x74, 0x78, 0x09,
	0x3f, 0x85, 0x4c, 0x78, 0xa3, 0x2b, 0x83, 0x9b, 0x55, 0x5d, 0x45, 0xf1, 0x0f, 0x04, 0x53, 0xa1,
	0x69, 0xef, 0x4d, 0x47, 0xc1, 0x9b, 0xbe, 0x08, 0xe0, 0x1f, 0x69, 0xf0, 0xd6, 0x67, 0xbd, 0x99,
	0xad, 0x46, 0x10, 0xe2, 0xa9, 0x50, 0x88, 0x97, 0xbc, 0x34, 0x90, 0xe6, 0x69, 0x40, 0x1e, 0x1c,
	0x13, 0xcb, 0x08, 0x8e, 0x97, 0x12, 0x9e, 0x03, 0xd4, 0x4d, 0xa3, 0xa1, 0x53, 0xdd, 0x34, 0x9c,
	0x7c, 0x86, 0x6f, 0x6f, 0x39, 0xc6, 0x54, 0xc9, 0x57, 0x50, 0x43, 0xba, 0xe2, 0xef, 0x08, 0xb2,
	0xc1, 0x0a, 0xde, 0xf6, 0xc0, 0x21, 0x0e, 0xee, 0xc1, 0xe0, 0xe0, 0x02, 0x13, 0x61, 0x94, 0xf3,
	0x30, 0xc1, 0xc9, 0x71, 0x09, 0xc8, 0xaa, 0xde, 0x08, 0x7f, 0x0e, 0x93, 0xa6, 0x45, 0x6c, 0x8d,
	0x9a, 0xb6, 0x97, 0x0d, 0x3f, 0x1b, 0xc1, 0x53, 0xc5, 0x33, 0xe1, 0xa8, 0x81, 0x35, 0xf1, 0x97,
	0x24, 0xcc, 0xb8, 0xb9, 0x8b, 0xb3, 0x38, 0xdc, 0xd3, 0x85, 0x1f, 0x5e, 0x64, 0xf3, 0x52, 0x9d,
	0x10, 0xd3, 0x8b, 0x61, 0xa6, 0xd7, 0xb3, 0x4c, 0x29, 0x6d, 0x27, 0x05, 0x34, 0x4e, 0xd2, 0xf7,
	0xfe, 0x0b, 0xe9, 0xeb, 0xc0, 0x30, 0x65, 0xde, 0xa0, 0xe4, 0x24, 0x8a, 0x5c, 0x80, 0x5d, 0xc8,
	0x85, 0x4f, 0xcc, 0xb1, 0xf0, 0x13, 0x48, 0xb3, 0xdb, 0xef, 0x25, 0x90, 0x61, 0xa2, 0x86, 0xeb,
	0x71, 0x12, 0xdc, 0x67, 0xf9, 0x7f, 0x12, 0x06, 0x27, 0x21, 0x7c, 0x62, 0x63, 0x20, 0xe1, 0x01,
	0xc0, 0x26, 0xa1, 0x23, 0x10, 0x20, 0x96, 0x61, 0x2a, 0xd0, 0x1c, 0x03, 0x90, 0x1c, 0x4c, 0x07,
	0x19, 0x84, 0x65, 0xa9, 0x17, 0x30, 0x13, 0x1a, 0xf3, 0x92, 0xc5, 0x7b, 0xa5, 0xd1, 0xa8, 0xaf,
	0xf4, 0x33, 0x98, 0x0f, 0x27, 0xa9, 0x11, 0x0b, 0x97, 0x97, 0xb0, 0xd0, 0xd3, 0xca, 0x58, 0x20,
	0x3e, 0x86, 0x19, 0xb7, 0x2a, 0x1a, 0x85, 0x11, 0x01, 0x72, 0x61, 0x65, 0xc7, 0x5a, 0xb9, 0x05,
	0x42, 0xf7, 0xfd, 0xc4, 0x93, 0x90, 0xde, 0xa9, 0x3c, 0x53, 0x84, 0x04, 0xce, 0x42, 0x46, 0x39,
	0x50, 0x76, 0xf6, 0x04, 0xb4, 0xf2, 0x33, 0x82, 0xeb, 0x7d, 0x9f, 0x69, 0x2c, 0xc0, 0x74, 0xe9,
	0xb9, 0xb2, 0x51, 0xab, 0x2a, 0xea, 0x81, 0xa2, 0x56, 0x85, 0x04, 0x9e, 0x81, 0x2c, 0x9f, 0xa9,
	0xa8, 0x9b, 0x55, 0x01, 0xe1, 0x6b, 0x30, 0xcb, 0x87, 0xca, 0xce, 0xc1, 0x96, 0x5a, 0xd9, 0x29,
	0x2b, 0x3b, 0x7b, 0x55, 0x21, 0xc9, 0x1c, 0xa8, 0x95, 0x6d, 0xa5, 0x2a, 0xa4, 0x02, 0x85, 0xbd,
	0xb5, 0xcd, 0xaa, 0x90, 0x66, 0x16, 0x77, 0x2b, 0xdb, 0x5b, 0xa5, 0x2f, 0x6a, 0x9b, 0x6a, 0x65,
	0x7f, 0x57, 0xc8, 0xe0, 0xab, 0x30, 0xe5, 0xcd, 0xec, 0xac, 0x95, 0x15, 0x61, 0x62, 0xe5, 0x11,
	0x2c, 0x5e, 0xfa, 0x9c, 0x33, 0x93, 0x65, 0xa5, 0xbc, 0xae, 0xa8, 0xb5, 0xca, 0x86, 0x90, 0xc0,
	0x00, 0x13, 0xca, 0x8b, 0xfd, 0xb5, 0xed, 0xaa, 0x80, 0x8a, 0x7f, 0xe7, 0x60, 0xd2, 0x2f, 0x40,
	0x30, 0xf5, 0x9f, 0x19, 0xbf, 0x0b, 0x8b, 0x0b, 0xe9, 0xee, 0x12, 0xbc, 0x70, 0x77, 0x38, 0x05,
	0xc7, 0x12, 0x13, 0xcc, 0x6b, 0xa4, 0x3b, 0x8a, 0xf5, 0xda, 0xdd, 0x9f, 0xc5, 0x7a, 0xbd, 0xd0,
	0x7c, 0x89, 0x09, 0xfc, 0x8a, 0x87, 0xb3, 0xef, 0xf2, 0x4e, 0x8c, 0x85, 0x48, 0x9f, 0x55, 0x58,
	0x1d, 0x42, 0xda, 0xdf, 0x62, 0xa4, 0x84, 0x8f, 0xdd, 0x62, 0x77, 0xc3, 0x10, 0xbb, 0xc5, 0x8b,
	0x1d, 0x42, 0x02, 0x9f, 0xba, 0x0f, 0x45, 0x40, 0xaf, 0x34, 0x40, 0x5d, 0x1a, 0x2a, 0x7f, 0x0b,
	0xf2, 0x50, 0xf2, 0xdc, 0xe5, 0xf7, 0x08, 0x6e, 0x84, 0xa7, 0x37, 0x4c, 0x7b, 0xcb, 0xa0, 0xb6,
	0xe9, 0x58, 0xa4, 0xce, 0xeb, 0xa1, 0xb7, 0x80, 0xe1, 0x08, 0xa6, 0x9e, 0x6b, 0x46, 0xa3, 0x49,
	0x94, 0x0e, 0x31, 0x28, 0xee, 0x93, 0x4b, 0xdc, 0x7f, 0x26, 0x34, 0x4b, 0x97, 0xb8, 0x58, 0xd9,
	0x39, 0xee, 0x47, 0x6b, 0x97, 0x24, 0xf3, 0x62, 0x1a, 0x0e, 0xc1, 0x3f, 0x22, 0x98, 0xeb, 0xd1,
	0x33, 0xe1, 0x4f, 0x06, 0x7b, 0xcc, 0xba, 0x5a, 0xb0, 0xc2, 0xfd, 0x51, 0xd4, 0x1c, 0xeb, 0x22,
	0x0c, 0xb7, 0xe1, 0x7b, 0x2b, 0x30, 0xce, 0x7b, 0x4b, 0x16, 0x4f, 0xe7, 0x55, 0x4f, 0x6c, 0x3c,
	0x45, 0x4a, 0xca, 0xd8, 0x78, 0x8a, 0x96, 0x53, 0x6e, 0xf0, 0x9e, 0x67, 0xf7, 0x58, 0x67, 0x91,
	0xd2, 0x29, 0xd6, 0x59, 0xb4, 0x6c, 0x10, 0x13, 0xf8, 0x10, 0xae, 0x78, 0xe9, 0x1b, 0x7f, 0x18,
	0x1f, 0xf8, 0xbe, 0x9b, 0x95, 0x41, 0x45, 0xb9, 0x8f, 0x13, 0xc8, 0x06, 0xa9, 0x12, 0xdf, 0x1e,
	0xb4, 0x7f, 0x64, 0x7e, 0xee, 0x0c, 0x2e, 0xcc, 0x3d, 0xfd, 0x84, 0x60, 0xae, 0x47, 0x56, 0x8e,
	0xbd, 0x2e, 0xbd, 0xeb, 0x81, 0xd8, 0xeb, 0xd2, 0xa7, 0x00, 0x70, 0x39, 0x3c, 0xcf, 0xc1, 0xb1,
	0x1c, 0x46, 0x72, 0x7d, 0x2c, 0x87, 0xd1, 0xe4, 0x2e, 0x26, 0xf0, 0x1b, 0x14, 0xad, 0x45, 0x42,
	0x6d, 0x37, 0x7e, 0x38, 0x6a, 0xbb, 0x7e, 0x5a, 0x78, 0x34, 0x7a, 0xa7, 0x2f, 0x26, 0xd6, 0xef,
	0x7d, 0x59, 0x3c, 0xd6, 0xe9, 0x49, 0xfb, 0x50, 0xaa, 0x9b, 0x2d, 0x99, 0x59, 0x92, 0x7d, 0x4b,
	0x72, 0xdf, 0x7f, 0x5d, 0x0f, 0x27, 0xf8, 0xff, 0x29, 0x1f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x32, 0xfe, 0x19, 0x19, 0xfa, 0x15, 0x00, 0x00,
}
