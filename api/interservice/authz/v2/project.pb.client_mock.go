// Code generated by MockGen. DO NOT EDIT.
// Source: authz/v2/project.pb.go

// Package v2 is a generated GoMock package.
package v2

import (
	event "github.com/chef/automate/api/interservice/event"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockProjectsClient is a mock of ProjectsClient interface
type MockProjectsClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectsClientMockRecorder
}

// MockProjectsClientMockRecorder is the mock recorder for MockProjectsClient
type MockProjectsClientMockRecorder struct {
	mock *MockProjectsClient
}

// NewMockProjectsClient creates a new mock instance
func NewMockProjectsClient(ctrl *gomock.Controller) *MockProjectsClient {
	mock := &MockProjectsClient{ctrl: ctrl}
	mock.recorder = &MockProjectsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectsClient) EXPECT() *MockProjectsClientMockRecorder {
	return m.recorder
}

// UpdateProject mocks base method
func (m *MockProjectsClient) UpdateProject(ctx context.Context, in *UpdateProjectReq, opts ...grpc.CallOption) (*UpdateProjectResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProject", varargs...)
	ret0, _ := ret[0].(*UpdateProjectResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockProjectsClientMockRecorder) UpdateProject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectsClient)(nil).UpdateProject), varargs...)
}

// CreateProject mocks base method
func (m *MockProjectsClient) CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProject", varargs...)
	ret0, _ := ret[0].(*CreateProjectResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockProjectsClientMockRecorder) CreateProject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectsClient)(nil).CreateProject), varargs...)
}

// GetProject mocks base method
func (m *MockProjectsClient) GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProject", varargs...)
	ret0, _ := ret[0].(*GetProjectResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (mr *MockProjectsClientMockRecorder) GetProject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectsClient)(nil).GetProject), varargs...)
}

// DeleteProject mocks base method
func (m *MockProjectsClient) DeleteProject(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*DeleteProjectResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProject", varargs...)
	ret0, _ := ret[0].(*DeleteProjectResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockProjectsClientMockRecorder) DeleteProject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectsClient)(nil).DeleteProject), varargs...)
}

// ListProjects mocks base method
func (m *MockProjectsClient) ListProjects(ctx context.Context, in *ListProjectsReq, opts ...grpc.CallOption) (*ListProjectsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjects", varargs...)
	ret0, _ := ret[0].(*ListProjectsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockProjectsClientMockRecorder) ListProjects(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectsClient)(nil).ListProjects), varargs...)
}

// ListProjectRules mocks base method
func (m *MockProjectsClient) ListProjectRules(ctx context.Context, in *ListProjectRulesReq, opts ...grpc.CallOption) (*ProjectCollectionRulesResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectRules", varargs...)
	ret0, _ := ret[0].(*ProjectCollectionRulesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectRules indicates an expected call of ListProjectRules
func (mr *MockProjectsClientMockRecorder) ListProjectRules(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectRules", reflect.TypeOf((*MockProjectsClient)(nil).ListProjectRules), varargs...)
}

// GetProjectRules mocks base method
func (m *MockProjectsClient) GetProjectRules(ctx context.Context, in *GetProjectRulesReq, opts ...grpc.CallOption) (*GetProjectRulesResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectRules", varargs...)
	ret0, _ := ret[0].(*GetProjectRulesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectRules indicates an expected call of GetProjectRules
func (mr *MockProjectsClientMockRecorder) GetProjectRules(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectRules", reflect.TypeOf((*MockProjectsClient)(nil).GetProjectRules), varargs...)
}

// HandleEvent mocks base method
func (m *MockProjectsClient) HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleEvent", varargs...)
	ret0, _ := ret[0].(*event.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEvent indicates an expected call of HandleEvent
func (mr *MockProjectsClientMockRecorder) HandleEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockProjectsClient)(nil).HandleEvent), varargs...)
}

// ProjectUpdateStatus mocks base method
func (m *MockProjectsClient) ProjectUpdateStatus(ctx context.Context, in *ProjectUpdateStatusReq, opts ...grpc.CallOption) (*ProjectUpdateStatusResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectUpdateStatus", varargs...)
	ret0, _ := ret[0].(*ProjectUpdateStatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectUpdateStatus indicates an expected call of ProjectUpdateStatus
func (mr *MockProjectsClientMockRecorder) ProjectUpdateStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectUpdateStatus", reflect.TypeOf((*MockProjectsClient)(nil).ProjectUpdateStatus), varargs...)
}

// MockProjectsServer is a mock of ProjectsServer interface
type MockProjectsServer struct {
	ctrl     *gomock.Controller
	recorder *MockProjectsServerMockRecorder
}

// MockProjectsServerMockRecorder is the mock recorder for MockProjectsServer
type MockProjectsServerMockRecorder struct {
	mock *MockProjectsServer
}

// NewMockProjectsServer creates a new mock instance
func NewMockProjectsServer(ctrl *gomock.Controller) *MockProjectsServer {
	mock := &MockProjectsServer{ctrl: ctrl}
	mock.recorder = &MockProjectsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectsServer) EXPECT() *MockProjectsServerMockRecorder {
	return m.recorder
}

// UpdateProject mocks base method
func (m *MockProjectsServer) UpdateProject(arg0 context.Context, arg1 *UpdateProjectReq) (*UpdateProjectResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1)
	ret0, _ := ret[0].(*UpdateProjectResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockProjectsServerMockRecorder) UpdateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectsServer)(nil).UpdateProject), arg0, arg1)
}

// CreateProject mocks base method
func (m *MockProjectsServer) CreateProject(arg0 context.Context, arg1 *CreateProjectReq) (*CreateProjectResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(*CreateProjectResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockProjectsServerMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectsServer)(nil).CreateProject), arg0, arg1)
}

// GetProject mocks base method
func (m *MockProjectsServer) GetProject(arg0 context.Context, arg1 *GetProjectReq) (*GetProjectResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(*GetProjectResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (mr *MockProjectsServerMockRecorder) GetProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockProjectsServer)(nil).GetProject), arg0, arg1)
}

// DeleteProject mocks base method
func (m *MockProjectsServer) DeleteProject(arg0 context.Context, arg1 *DeleteProjectReq) (*DeleteProjectResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].(*DeleteProjectResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockProjectsServerMockRecorder) DeleteProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectsServer)(nil).DeleteProject), arg0, arg1)
}

// ListProjects mocks base method
func (m *MockProjectsServer) ListProjects(arg0 context.Context, arg1 *ListProjectsReq) (*ListProjectsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1)
	ret0, _ := ret[0].(*ListProjectsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockProjectsServerMockRecorder) ListProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectsServer)(nil).ListProjects), arg0, arg1)
}

// ListProjectRules mocks base method
func (m *MockProjectsServer) ListProjectRules(arg0 context.Context, arg1 *ListProjectRulesReq) (*ProjectCollectionRulesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectRules", arg0, arg1)
	ret0, _ := ret[0].(*ProjectCollectionRulesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectRules indicates an expected call of ListProjectRules
func (mr *MockProjectsServerMockRecorder) ListProjectRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectRules", reflect.TypeOf((*MockProjectsServer)(nil).ListProjectRules), arg0, arg1)
}

// GetProjectRules mocks base method
func (m *MockProjectsServer) GetProjectRules(arg0 context.Context, arg1 *GetProjectRulesReq) (*GetProjectRulesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectRules", arg0, arg1)
	ret0, _ := ret[0].(*GetProjectRulesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectRules indicates an expected call of GetProjectRules
func (mr *MockProjectsServerMockRecorder) GetProjectRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectRules", reflect.TypeOf((*MockProjectsServer)(nil).GetProjectRules), arg0, arg1)
}

// HandleEvent mocks base method
func (m *MockProjectsServer) HandleEvent(arg0 context.Context, arg1 *event.EventMsg) (*event.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", arg0, arg1)
	ret0, _ := ret[0].(*event.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEvent indicates an expected call of HandleEvent
func (mr *MockProjectsServerMockRecorder) HandleEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockProjectsServer)(nil).HandleEvent), arg0, arg1)
}

// ProjectUpdateStatus mocks base method
func (m *MockProjectsServer) ProjectUpdateStatus(arg0 context.Context, arg1 *ProjectUpdateStatusReq) (*ProjectUpdateStatusResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectUpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(*ProjectUpdateStatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectUpdateStatus indicates an expected call of ProjectUpdateStatus
func (mr *MockProjectsServerMockRecorder) ProjectUpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectUpdateStatus", reflect.TypeOf((*MockProjectsServer)(nil).ProjectUpdateStatus), arg0, arg1)
}
