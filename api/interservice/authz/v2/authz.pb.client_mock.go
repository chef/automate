// Code generated by MockGen. DO NOT EDIT.
// Source: authz/v2/authz.pb.go

// Package v2 is a generated GoMock package.
package v2

import (
	context "context"
	version "github.com/chef/automate/api/external/common/version"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthorizationClient is a mock of AuthorizationClient interface
type MockAuthorizationClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationClientMockRecorder
}

// MockAuthorizationClientMockRecorder is the mock recorder for MockAuthorizationClient
type MockAuthorizationClientMockRecorder struct {
	mock *MockAuthorizationClient
}

// NewMockAuthorizationClient creates a new mock instance
func NewMockAuthorizationClient(ctrl *gomock.Controller) *MockAuthorizationClient {
	mock := &MockAuthorizationClient{ctrl: ctrl}
	mock.recorder = &MockAuthorizationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizationClient) EXPECT() *MockAuthorizationClientMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockAuthorizationClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*version.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockAuthorizationClientMockRecorder) GetVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockAuthorizationClient)(nil).GetVersion), varargs...)
}

// FilterAuthorizedPairs mocks base method
func (m *MockAuthorizationClient) FilterAuthorizedPairs(ctx context.Context, in *FilterAuthorizedPairsReq, opts ...grpc.CallOption) (*FilterAuthorizedPairsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilterAuthorizedPairs", varargs...)
	ret0, _ := ret[0].(*FilterAuthorizedPairsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAuthorizedPairs indicates an expected call of FilterAuthorizedPairs
func (mr *MockAuthorizationClientMockRecorder) FilterAuthorizedPairs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAuthorizedPairs", reflect.TypeOf((*MockAuthorizationClient)(nil).FilterAuthorizedPairs), varargs...)
}

// FilterAuthorizedProjects mocks base method
func (m *MockAuthorizationClient) FilterAuthorizedProjects(ctx context.Context, in *FilterAuthorizedProjectsReq, opts ...grpc.CallOption) (*FilterAuthorizedProjectsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilterAuthorizedProjects", varargs...)
	ret0, _ := ret[0].(*FilterAuthorizedProjectsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAuthorizedProjects indicates an expected call of FilterAuthorizedProjects
func (mr *MockAuthorizationClientMockRecorder) FilterAuthorizedProjects(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAuthorizedProjects", reflect.TypeOf((*MockAuthorizationClient)(nil).FilterAuthorizedProjects), varargs...)
}

// ProjectsAuthorized mocks base method
func (m *MockAuthorizationClient) ProjectsAuthorized(ctx context.Context, in *ProjectsAuthorizedReq, opts ...grpc.CallOption) (*ProjectsAuthorizedResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectsAuthorized", varargs...)
	ret0, _ := ret[0].(*ProjectsAuthorizedResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectsAuthorized indicates an expected call of ProjectsAuthorized
func (mr *MockAuthorizationClientMockRecorder) ProjectsAuthorized(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectsAuthorized", reflect.TypeOf((*MockAuthorizationClient)(nil).ProjectsAuthorized), varargs...)
}

// ValidateProjectAssignment mocks base method
func (m *MockAuthorizationClient) ValidateProjectAssignment(ctx context.Context, in *ValidateProjectAssignmentReq, opts ...grpc.CallOption) (*ValidateProjectAssignmentResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateProjectAssignment", varargs...)
	ret0, _ := ret[0].(*ValidateProjectAssignmentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProjectAssignment indicates an expected call of ValidateProjectAssignment
func (mr *MockAuthorizationClientMockRecorder) ValidateProjectAssignment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProjectAssignment", reflect.TypeOf((*MockAuthorizationClient)(nil).ValidateProjectAssignment), varargs...)
}

// MockAuthorizationServer is a mock of AuthorizationServer interface
type MockAuthorizationServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationServerMockRecorder
}

// MockAuthorizationServerMockRecorder is the mock recorder for MockAuthorizationServer
type MockAuthorizationServerMockRecorder struct {
	mock *MockAuthorizationServer
}

// NewMockAuthorizationServer creates a new mock instance
func NewMockAuthorizationServer(ctrl *gomock.Controller) *MockAuthorizationServer {
	mock := &MockAuthorizationServer{ctrl: ctrl}
	mock.recorder = &MockAuthorizationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizationServer) EXPECT() *MockAuthorizationServerMockRecorder {
	return m.recorder
}

// GetVersion mocks base method
func (m *MockAuthorizationServer) GetVersion(arg0 context.Context, arg1 *version.VersionInfoRequest) (*version.VersionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0, arg1)
	ret0, _ := ret[0].(*version.VersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockAuthorizationServerMockRecorder) GetVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockAuthorizationServer)(nil).GetVersion), arg0, arg1)
}

// FilterAuthorizedPairs mocks base method
func (m *MockAuthorizationServer) FilterAuthorizedPairs(arg0 context.Context, arg1 *FilterAuthorizedPairsReq) (*FilterAuthorizedPairsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAuthorizedPairs", arg0, arg1)
	ret0, _ := ret[0].(*FilterAuthorizedPairsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAuthorizedPairs indicates an expected call of FilterAuthorizedPairs
func (mr *MockAuthorizationServerMockRecorder) FilterAuthorizedPairs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAuthorizedPairs", reflect.TypeOf((*MockAuthorizationServer)(nil).FilterAuthorizedPairs), arg0, arg1)
}

// FilterAuthorizedProjects mocks base method
func (m *MockAuthorizationServer) FilterAuthorizedProjects(arg0 context.Context, arg1 *FilterAuthorizedProjectsReq) (*FilterAuthorizedProjectsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAuthorizedProjects", arg0, arg1)
	ret0, _ := ret[0].(*FilterAuthorizedProjectsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAuthorizedProjects indicates an expected call of FilterAuthorizedProjects
func (mr *MockAuthorizationServerMockRecorder) FilterAuthorizedProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAuthorizedProjects", reflect.TypeOf((*MockAuthorizationServer)(nil).FilterAuthorizedProjects), arg0, arg1)
}

// ProjectsAuthorized mocks base method
func (m *MockAuthorizationServer) ProjectsAuthorized(arg0 context.Context, arg1 *ProjectsAuthorizedReq) (*ProjectsAuthorizedResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectsAuthorized", arg0, arg1)
	ret0, _ := ret[0].(*ProjectsAuthorizedResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectsAuthorized indicates an expected call of ProjectsAuthorized
func (mr *MockAuthorizationServerMockRecorder) ProjectsAuthorized(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectsAuthorized", reflect.TypeOf((*MockAuthorizationServer)(nil).ProjectsAuthorized), arg0, arg1)
}

// ValidateProjectAssignment mocks base method
func (m *MockAuthorizationServer) ValidateProjectAssignment(arg0 context.Context, arg1 *ValidateProjectAssignmentReq) (*ValidateProjectAssignmentResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProjectAssignment", arg0, arg1)
	ret0, _ := ret[0].(*ValidateProjectAssignmentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProjectAssignment indicates an expected call of ValidateProjectAssignment
func (mr *MockAuthorizationServerMockRecorder) ValidateProjectAssignment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProjectAssignment", reflect.TypeOf((*MockAuthorizationServer)(nil).ValidateProjectAssignment), arg0, arg1)
}
