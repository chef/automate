// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: interservice/authz/authz.proto

package authz

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _authz_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on IsAuthorizedReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IsAuthorizedReq) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSubjects()) < 1 {
		return IsAuthorizedReqValidationError{
			field:  "Subjects",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetSubjects() {
		_, _ = idx, item

		if !_IsAuthorizedReq_Subjects_Pattern.MatchString(item) {
			return IsAuthorizedReqValidationError{
				field:  fmt.Sprintf("Subjects[%v]", idx),
				reason: "value does not match regex pattern \"^(?:team|user):(?:local|ldap|saml):[^:*]+$|^token:[^:*]+$|^tls:service:[^:*]+:[^:*]+$\"",
			}
		}

	}

	if !_IsAuthorizedReq_Resource_Pattern.MatchString(m.GetResource()) {
		return IsAuthorizedReqValidationError{
			field:  "Resource",
			reason: "value does not match regex pattern \"^[a-z][^:*]*(?::[^:*]+)*$\"",
		}
	}

	if !_IsAuthorizedReq_Action_Pattern.MatchString(m.GetAction()) {
		return IsAuthorizedReqValidationError{
			field:  "Action",
			reason: "value does not match regex pattern \"^[a-z][^:*]*(?::[^:*]+)*$\"",
		}
	}

	return nil
}

// IsAuthorizedReqValidationError is the validation error returned by
// IsAuthorizedReq.Validate if the designated constraints aren't met.
type IsAuthorizedReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAuthorizedReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAuthorizedReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAuthorizedReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAuthorizedReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAuthorizedReqValidationError) ErrorName() string { return "IsAuthorizedReqValidationError" }

// Error satisfies the builtin error interface
func (e IsAuthorizedReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAuthorizedReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAuthorizedReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAuthorizedReqValidationError{}

var _IsAuthorizedReq_Subjects_Pattern = regexp.MustCompile("^(?:team|user):(?:local|ldap|saml):[^:*]+$|^token:[^:*]+$|^tls:service:[^:*]+:[^:*]+$")

var _IsAuthorizedReq_Resource_Pattern = regexp.MustCompile("^[a-z][^:*]*(?::[^:*]+)*$")

var _IsAuthorizedReq_Action_Pattern = regexp.MustCompile("^[a-z][^:*]*(?::[^:*]+)*$")

// Validate checks the field values on GetVersionReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetVersionReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetVersionReqValidationError is the validation error returned by
// GetVersionReq.Validate if the designated constraints aren't met.
type GetVersionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionReqValidationError) ErrorName() string { return "GetVersionReqValidationError" }

// Error satisfies the builtin error interface
func (e GetVersionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionReqValidationError{}

// Validate checks the field values on ProjectsAuthorizedReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProjectsAuthorizedReq) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSubjects()) < 1 {
		return ProjectsAuthorizedReqValidationError{
			field:  "Subjects",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetSubjects() {
		_, _ = idx, item

		if !_ProjectsAuthorizedReq_Subjects_Pattern.MatchString(item) {
			return ProjectsAuthorizedReqValidationError{
				field:  fmt.Sprintf("Subjects[%v]", idx),
				reason: "value does not match regex pattern \"^(?:team|user):(?:local|ldap|saml):[^:*]+$|^token:[^:*]+$|^tls:service:[^:*]+:[^:*]+$\"",
			}
		}

	}

	if !_ProjectsAuthorizedReq_Resource_Pattern.MatchString(m.GetResource()) {
		return ProjectsAuthorizedReqValidationError{
			field:  "Resource",
			reason: "value does not match regex pattern \"^[a-z][^:*]*(?::[^:*]+)*$\"",
		}
	}

	if !_ProjectsAuthorizedReq_Action_Pattern.MatchString(m.GetAction()) {
		return ProjectsAuthorizedReqValidationError{
			field:  "Action",
			reason: "value does not match regex pattern \"^[a-z][a-zA-Z]*(?::[a-z][a-zA-Z]*){2}$\"",
		}
	}

	_ProjectsAuthorizedReq_ProjectsFilter_Unique := make(map[string]struct{}, len(m.GetProjectsFilter()))

	for idx, item := range m.GetProjectsFilter() {
		_, _ = idx, item

		if _, exists := _ProjectsAuthorizedReq_ProjectsFilter_Unique[item]; exists {
			return ProjectsAuthorizedReqValidationError{
				field:  fmt.Sprintf("ProjectsFilter[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_ProjectsAuthorizedReq_ProjectsFilter_Unique[item] = struct{}{}
		}

		if !_ProjectsAuthorizedReq_ProjectsFilter_Pattern.MatchString(item) {
			return ProjectsAuthorizedReqValidationError{
				field:  fmt.Sprintf("ProjectsFilter[%v]", idx),
				reason: "value does not match regex pattern \"^[a-z0-9()-_]{1,64}$\"",
			}
		}

	}

	return nil
}

// ProjectsAuthorizedReqValidationError is the validation error returned by
// ProjectsAuthorizedReq.Validate if the designated constraints aren't met.
type ProjectsAuthorizedReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectsAuthorizedReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectsAuthorizedReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectsAuthorizedReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectsAuthorizedReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectsAuthorizedReqValidationError) ErrorName() string {
	return "ProjectsAuthorizedReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectsAuthorizedReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectsAuthorizedReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectsAuthorizedReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectsAuthorizedReqValidationError{}

var _ProjectsAuthorizedReq_Subjects_Pattern = regexp.MustCompile("^(?:team|user):(?:local|ldap|saml):[^:*]+$|^token:[^:*]+$|^tls:service:[^:*]+:[^:*]+$")

var _ProjectsAuthorizedReq_Resource_Pattern = regexp.MustCompile("^[a-z][^:*]*(?::[^:*]+)*$")

var _ProjectsAuthorizedReq_Action_Pattern = regexp.MustCompile("^[a-z][a-zA-Z]*(?::[a-z][a-zA-Z]*){2}$")

var _ProjectsAuthorizedReq_ProjectsFilter_Pattern = regexp.MustCompile("^[a-z0-9()-_]{1,64}$")

// Validate checks the field values on ProjectsAuthorizedResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProjectsAuthorizedResp) Validate() error {
	if m == nil {
		return nil
	}

	_ProjectsAuthorizedResp_Projects_Unique := make(map[string]struct{}, len(m.GetProjects()))

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if _, exists := _ProjectsAuthorizedResp_Projects_Unique[item]; exists {
			return ProjectsAuthorizedRespValidationError{
				field:  fmt.Sprintf("Projects[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_ProjectsAuthorizedResp_Projects_Unique[item] = struct{}{}
		}

		if !_ProjectsAuthorizedResp_Projects_Pattern.MatchString(item) {
			return ProjectsAuthorizedRespValidationError{
				field:  fmt.Sprintf("Projects[%v]", idx),
				reason: "value does not match regex pattern \"^[a-z0-9-_]{1,64}$\"",
			}
		}

	}

	return nil
}

// ProjectsAuthorizedRespValidationError is the validation error returned by
// ProjectsAuthorizedResp.Validate if the designated constraints aren't met.
type ProjectsAuthorizedRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectsAuthorizedRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectsAuthorizedRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectsAuthorizedRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectsAuthorizedRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectsAuthorizedRespValidationError) ErrorName() string {
	return "ProjectsAuthorizedRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectsAuthorizedRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectsAuthorizedResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectsAuthorizedRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectsAuthorizedRespValidationError{}

var _ProjectsAuthorizedResp_Projects_Pattern = regexp.MustCompile("^[a-z0-9-_]{1,64}$")

// Validate checks the field values on FilterAuthorizedPairsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FilterAuthorizedPairsReq) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSubjects()) < 1 {
		return FilterAuthorizedPairsReqValidationError{
			field:  "Subjects",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetSubjects() {
		_, _ = idx, item

		if !_FilterAuthorizedPairsReq_Subjects_Pattern.MatchString(item) {
			return FilterAuthorizedPairsReqValidationError{
				field:  fmt.Sprintf("Subjects[%v]", idx),
				reason: "value does not match regex pattern \"^(?:(?:team|user):(?:local|ldap|saml)|token|tls:service:[^:*]+):[^:*]+$\"",
			}
		}

	}

	for idx, item := range m.GetPairs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterAuthorizedPairsReqValidationError{
					field:  fmt.Sprintf("Pairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FilterAuthorizedPairsReqValidationError is the validation error returned by
// FilterAuthorizedPairsReq.Validate if the designated constraints aren't met.
type FilterAuthorizedPairsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterAuthorizedPairsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterAuthorizedPairsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterAuthorizedPairsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterAuthorizedPairsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterAuthorizedPairsReqValidationError) ErrorName() string {
	return "FilterAuthorizedPairsReqValidationError"
}

// Error satisfies the builtin error interface
func (e FilterAuthorizedPairsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterAuthorizedPairsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterAuthorizedPairsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterAuthorizedPairsReqValidationError{}

var _FilterAuthorizedPairsReq_Subjects_Pattern = regexp.MustCompile("^(?:(?:team|user):(?:local|ldap|saml)|token|tls:service:[^:*]+):[^:*]+$")

// Validate checks the field values on FilterAuthorizedPairsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FilterAuthorizedPairsResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPairs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterAuthorizedPairsRespValidationError{
					field:  fmt.Sprintf("Pairs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FilterAuthorizedPairsRespValidationError is the validation error returned by
// FilterAuthorizedPairsResp.Validate if the designated constraints aren't met.
type FilterAuthorizedPairsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterAuthorizedPairsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterAuthorizedPairsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterAuthorizedPairsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterAuthorizedPairsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterAuthorizedPairsRespValidationError) ErrorName() string {
	return "FilterAuthorizedPairsRespValidationError"
}

// Error satisfies the builtin error interface
func (e FilterAuthorizedPairsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterAuthorizedPairsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterAuthorizedPairsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterAuthorizedPairsRespValidationError{}

// Validate checks the field values on Pair with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Pair) Validate() error {
	if m == nil {
		return nil
	}

	if !_Pair_Resource_Pattern.MatchString(m.GetResource()) {
		return PairValidationError{
			field:  "Resource",
			reason: "value does not match regex pattern \"^[a-z][^:*]*(?::[^:*]+)*$\"",
		}
	}

	if !_Pair_Action_Pattern.MatchString(m.GetAction()) {
		return PairValidationError{
			field:  "Action",
			reason: "value does not match regex pattern \"^[a-z][a-zA-Z]*(?::[a-z][a-zA-Z]*){2}$\"",
		}
	}

	return nil
}

// PairValidationError is the validation error returned by Pair.Validate if the
// designated constraints aren't met.
type PairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PairValidationError) ErrorName() string { return "PairValidationError" }

// Error satisfies the builtin error interface
func (e PairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PairValidationError{}

var _Pair_Resource_Pattern = regexp.MustCompile("^[a-z][^:*]*(?::[^:*]+)*$")

var _Pair_Action_Pattern = regexp.MustCompile("^[a-z][a-zA-Z]*(?::[a-z][a-zA-Z]*){2}$")

// Validate checks the field values on FilterAuthorizedProjectsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FilterAuthorizedProjectsReq) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetSubjects()) < 1 {
		return FilterAuthorizedProjectsReqValidationError{
			field:  "Subjects",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetSubjects() {
		_, _ = idx, item

		if !_FilterAuthorizedProjectsReq_Subjects_Pattern.MatchString(item) {
			return FilterAuthorizedProjectsReqValidationError{
				field:  fmt.Sprintf("Subjects[%v]", idx),
				reason: "value does not match regex pattern \"^(?:(?:team|user):(?:local|ldap|saml)|token|tls:service:[^:*]+):[^:*]+$\"",
			}
		}

	}

	return nil
}

// FilterAuthorizedProjectsReqValidationError is the validation error returned
// by FilterAuthorizedProjectsReq.Validate if the designated constraints
// aren't met.
type FilterAuthorizedProjectsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterAuthorizedProjectsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterAuthorizedProjectsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterAuthorizedProjectsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterAuthorizedProjectsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterAuthorizedProjectsReqValidationError) ErrorName() string {
	return "FilterAuthorizedProjectsReqValidationError"
}

// Error satisfies the builtin error interface
func (e FilterAuthorizedProjectsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterAuthorizedProjectsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterAuthorizedProjectsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterAuthorizedProjectsReqValidationError{}

var _FilterAuthorizedProjectsReq_Subjects_Pattern = regexp.MustCompile("^(?:(?:team|user):(?:local|ldap|saml)|token|tls:service:[^:*]+):[^:*]+$")

// Validate checks the field values on FilterAuthorizedProjectsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FilterAuthorizedProjectsResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// FilterAuthorizedProjectsRespValidationError is the validation error returned
// by FilterAuthorizedProjectsResp.Validate if the designated constraints
// aren't met.
type FilterAuthorizedProjectsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterAuthorizedProjectsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterAuthorizedProjectsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterAuthorizedProjectsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterAuthorizedProjectsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterAuthorizedProjectsRespValidationError) ErrorName() string {
	return "FilterAuthorizedProjectsRespValidationError"
}

// Error satisfies the builtin error interface
func (e FilterAuthorizedProjectsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterAuthorizedProjectsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterAuthorizedProjectsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterAuthorizedProjectsRespValidationError{}

// Validate checks the field values on ValidateProjectAssignmentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateProjectAssignmentReq) Validate() error {
	if m == nil {
		return nil
	}

	_ValidateProjectAssignmentReq_OldProjects_Unique := make(map[string]struct{}, len(m.GetOldProjects()))

	for idx, item := range m.GetOldProjects() {
		_, _ = idx, item

		if _, exists := _ValidateProjectAssignmentReq_OldProjects_Unique[item]; exists {
			return ValidateProjectAssignmentReqValidationError{
				field:  fmt.Sprintf("OldProjects[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_ValidateProjectAssignmentReq_OldProjects_Unique[item] = struct{}{}
		}

		if !_ValidateProjectAssignmentReq_OldProjects_Pattern.MatchString(item) {
			return ValidateProjectAssignmentReqValidationError{
				field:  fmt.Sprintf("OldProjects[%v]", idx),
				reason: "value does not match regex pattern \"^[a-z0-9()-_]{1,64}$\"",
			}
		}

	}

	_ValidateProjectAssignmentReq_NewProjects_Unique := make(map[string]struct{}, len(m.GetNewProjects()))

	for idx, item := range m.GetNewProjects() {
		_, _ = idx, item

		if _, exists := _ValidateProjectAssignmentReq_NewProjects_Unique[item]; exists {
			return ValidateProjectAssignmentReqValidationError{
				field:  fmt.Sprintf("NewProjects[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_ValidateProjectAssignmentReq_NewProjects_Unique[item] = struct{}{}
		}

		if !_ValidateProjectAssignmentReq_NewProjects_Pattern.MatchString(item) {
			return ValidateProjectAssignmentReqValidationError{
				field:  fmt.Sprintf("NewProjects[%v]", idx),
				reason: "value does not match regex pattern \"^[a-z0-9()-_]{1,64}$\"",
			}
		}

	}

	// no validation rules for IsUpdateRequest

	return nil
}

// ValidateProjectAssignmentReqValidationError is the validation error returned
// by ValidateProjectAssignmentReq.Validate if the designated constraints
// aren't met.
type ValidateProjectAssignmentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateProjectAssignmentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateProjectAssignmentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateProjectAssignmentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateProjectAssignmentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateProjectAssignmentReqValidationError) ErrorName() string {
	return "ValidateProjectAssignmentReqValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateProjectAssignmentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateProjectAssignmentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateProjectAssignmentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateProjectAssignmentReqValidationError{}

var _ValidateProjectAssignmentReq_OldProjects_Pattern = regexp.MustCompile("^[a-z0-9()-_]{1,64}$")

var _ValidateProjectAssignmentReq_NewProjects_Pattern = regexp.MustCompile("^[a-z0-9()-_]{1,64}$")

// Validate checks the field values on ValidateProjectAssignmentResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateProjectAssignmentResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ValidateProjectAssignmentRespValidationError is the validation error
// returned by ValidateProjectAssignmentResp.Validate if the designated
// constraints aren't met.
type ValidateProjectAssignmentRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateProjectAssignmentRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateProjectAssignmentRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateProjectAssignmentRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateProjectAssignmentRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateProjectAssignmentRespValidationError) ErrorName() string {
	return "ValidateProjectAssignmentRespValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateProjectAssignmentRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateProjectAssignmentResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateProjectAssignmentRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateProjectAssignmentRespValidationError{}
