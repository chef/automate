// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/interservice/license_control/license-control.proto

package license_control

import (
	context "context"
	fmt "fmt"
	license "github.com/chef/automate/lib/license"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LicenseRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *LicenseRequest) Reset()         { *m = LicenseRequest{} }
func (m *LicenseRequest) String() string { return proto.CompactTextString(m) }
func (*LicenseRequest) ProtoMessage()    {}
func (*LicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{0}
}

func (m *LicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicenseRequest.Unmarshal(m, b)
}
func (m *LicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicenseRequest.Marshal(b, m, deterministic)
}
func (m *LicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseRequest.Merge(m, src)
}
func (m *LicenseRequest) XXX_Size() int {
	return xxx_messageInfo_LicenseRequest.Size(m)
}
func (m *LicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseRequest proto.InternalMessageInfo

type LicenseResponse struct {
	License              *license.License `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty" toml:"license,omitempty" mapstructure:"license,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte           `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32            `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *LicenseResponse) Reset()         { *m = LicenseResponse{} }
func (m *LicenseResponse) String() string { return proto.CompactTextString(m) }
func (*LicenseResponse) ProtoMessage()    {}
func (*LicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{1}
}

func (m *LicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicenseResponse.Unmarshal(m, b)
}
func (m *LicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicenseResponse.Marshal(b, m, deterministic)
}
func (m *LicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseResponse.Merge(m, src)
}
func (m *LicenseResponse) XXX_Size() int {
	return xxx_messageInfo_LicenseResponse.Size(m)
}
func (m *LicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseResponse proto.InternalMessageInfo

func (m *LicenseResponse) GetLicense() *license.License {
	if m != nil {
		return m.License
	}
	return nil
}

type PolicyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *PolicyRequest) Reset()         { *m = PolicyRequest{} }
func (m *PolicyRequest) String() string { return proto.CompactTextString(m) }
func (*PolicyRequest) ProtoMessage()    {}
func (*PolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{2}
}

func (m *PolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyRequest.Unmarshal(m, b)
}
func (m *PolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyRequest.Marshal(b, m, deterministic)
}
func (m *PolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRequest.Merge(m, src)
}
func (m *PolicyRequest) XXX_Size() int {
	return xxx_messageInfo_PolicyRequest.Size(m)
}
func (m *PolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRequest proto.InternalMessageInfo

type PolicyResponse struct {
	Policy               *Policy  `protobuf:"bytes,1,opt,name=Policy,proto3" json:"Policy,omitempty" toml:"Policy,omitempty" mapstructure:"Policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *PolicyResponse) Reset()         { *m = PolicyResponse{} }
func (m *PolicyResponse) String() string { return proto.CompactTextString(m) }
func (*PolicyResponse) ProtoMessage()    {}
func (*PolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{3}
}

func (m *PolicyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyResponse.Unmarshal(m, b)
}
func (m *PolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyResponse.Marshal(b, m, deterministic)
}
func (m *PolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyResponse.Merge(m, src)
}
func (m *PolicyResponse) XXX_Size() int {
	return xxx_messageInfo_PolicyResponse.Size(m)
}
func (m *PolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyResponse proto.InternalMessageInfo

func (m *PolicyResponse) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type Policy struct {
	LicenseId            string               `protobuf:"bytes,1,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty" toml:"license_id,omitempty" mapstructure:"license_id,omitempty"`
	Valid                bool                 `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty" toml:"valid,omitempty" mapstructure:"valid,omitempty"`
	Capabilities         []*Capability        `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty" toml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`
	Rules                map[string]string    `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" toml:"rules,omitempty" mapstructure:"rules,omitempty"`
	ConfiguredAt         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=configured_at,json=configuredAt,proto3" json:"configured_at,omitempty" toml:"configured_at,omitempty" mapstructure:"configured_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte               `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32                `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{4}
}

func (m *Policy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Policy.Unmarshal(m, b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return xxx_messageInfo_Policy.Size(m)
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetLicenseId() string {
	if m != nil {
		return m.LicenseId
	}
	return ""
}

func (m *Policy) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Policy) GetCapabilities() []*Capability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *Policy) GetRules() map[string]string {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *Policy) GetConfiguredAt() *timestamp.Timestamp {
	if m != nil {
		return m.ConfiguredAt
	}
	return nil
}

type Capability struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Measure              string               `protobuf:"bytes,2,opt,name=measure,proto3" json:"measure,omitempty" toml:"measure,omitempty" mapstructure:"measure,omitempty"`
	Limit                int64                `protobuf:"zigzag64,3,opt,name=limit,proto3" json:"limit,omitempty" toml:"limit,omitempty" mapstructure:"limit,omitempty"`
	Start                *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty" toml:"start,omitempty" mapstructure:"start,omitempty"`
	End                  *timestamp.Timestamp `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty" toml:"end,omitempty" mapstructure:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte               `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32                `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *Capability) Reset()         { *m = Capability{} }
func (m *Capability) String() string { return proto.CompactTextString(m) }
func (*Capability) ProtoMessage()    {}
func (*Capability) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{5}
}

func (m *Capability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Capability.Unmarshal(m, b)
}
func (m *Capability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Capability.Marshal(b, m, deterministic)
}
func (m *Capability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Capability.Merge(m, src)
}
func (m *Capability) XXX_Size() int {
	return xxx_messageInfo_Capability.Size(m)
}
func (m *Capability) XXX_DiscardUnknown() {
	xxx_messageInfo_Capability.DiscardUnknown(m)
}

var xxx_messageInfo_Capability proto.InternalMessageInfo

func (m *Capability) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Capability) GetMeasure() string {
	if m != nil {
		return m.Measure
	}
	return ""
}

func (m *Capability) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Capability) GetStart() *timestamp.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Capability) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

type StatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{6}
}

func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusRequest.Unmarshal(m, b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return xxx_messageInfo_StatusRequest.Size(m)
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

type StatusResponse struct {
	LicenseId            string               `protobuf:"bytes,1,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty" toml:"license_id,omitempty" mapstructure:"license_id,omitempty"`
	ConfiguredAt         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=configured_at,json=configuredAt,proto3" json:"configured_at,omitempty" toml:"configured_at,omitempty" mapstructure:"configured_at,omitempty"`
	LicensedPeriod       *DateRange           `protobuf:"bytes,3,opt,name=licensed_period,json=licensedPeriod,proto3" json:"licensed_period,omitempty" toml:"licensed_period,omitempty" mapstructure:"licensed_period,omitempty"`
	CustomerName         string               `protobuf:"bytes,4,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty" toml:"customer_name,omitempty" mapstructure:"customer_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte               `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32                `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{7}
}

func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse.Unmarshal(m, b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return xxx_messageInfo_StatusResponse.Size(m)
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetLicenseId() string {
	if m != nil {
		return m.LicenseId
	}
	return ""
}

func (m *StatusResponse) GetConfiguredAt() *timestamp.Timestamp {
	if m != nil {
		return m.ConfiguredAt
	}
	return nil
}

func (m *StatusResponse) GetLicensedPeriod() *DateRange {
	if m != nil {
		return m.LicensedPeriod
	}
	return nil
}

func (m *StatusResponse) GetCustomerName() string {
	if m != nil {
		return m.CustomerName
	}
	return ""
}

type DateRange struct {
	Start                *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty" toml:"start,omitempty" mapstructure:"start,omitempty"`
	End                  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty" toml:"end,omitempty" mapstructure:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte               `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32                `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *DateRange) Reset()         { *m = DateRange{} }
func (m *DateRange) String() string { return proto.CompactTextString(m) }
func (*DateRange) ProtoMessage()    {}
func (*DateRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{8}
}

func (m *DateRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DateRange.Unmarshal(m, b)
}
func (m *DateRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DateRange.Marshal(b, m, deterministic)
}
func (m *DateRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateRange.Merge(m, src)
}
func (m *DateRange) XXX_Size() int {
	return xxx_messageInfo_DateRange.Size(m)
}
func (m *DateRange) XXX_DiscardUnknown() {
	xxx_messageInfo_DateRange.DiscardUnknown(m)
}

var xxx_messageInfo_DateRange proto.InternalMessageInfo

func (m *DateRange) GetStart() *timestamp.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *DateRange) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

type UpdateRequest struct {
	LicenseData          string   `protobuf:"bytes,1,opt,name=license_data,json=licenseData,proto3" json:"license_data,omitempty" toml:"license_data,omitempty" mapstructure:"license_data,omitempty"`
	Force                bool     `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty" toml:"force,omitempty" mapstructure:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{9}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetLicenseData() string {
	if m != nil {
		return m.LicenseData
	}
	return ""
}

func (m *UpdateRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type UpdateResponse struct {
	Updated              bool     `protobuf:"varint,1,opt,name=updated,proto3" json:"updated,omitempty" toml:"updated,omitempty" mapstructure:"updated,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" toml:"message,omitempty" mapstructure:"message,omitempty"`
	Duplicate            bool     `protobuf:"varint,3,opt,name=duplicate,proto3" json:"duplicate,omitempty" toml:"duplicate,omitempty" mapstructure:"duplicate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{10}
}

func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateResponse.Unmarshal(m, b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
}
func (m *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(m, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateResponse.Size(m)
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func (m *UpdateResponse) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *UpdateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UpdateResponse) GetDuplicate() bool {
	if m != nil {
		return m.Duplicate
	}
	return false
}

type TelemetryRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *TelemetryRequest) Reset()         { *m = TelemetryRequest{} }
func (m *TelemetryRequest) String() string { return proto.CompactTextString(m) }
func (*TelemetryRequest) ProtoMessage()    {}
func (*TelemetryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{11}
}

func (m *TelemetryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryRequest.Unmarshal(m, b)
}
func (m *TelemetryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryRequest.Marshal(b, m, deterministic)
}
func (m *TelemetryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryRequest.Merge(m, src)
}
func (m *TelemetryRequest) XXX_Size() int {
	return xxx_messageInfo_TelemetryRequest.Size(m)
}
func (m *TelemetryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryRequest proto.InternalMessageInfo

type TelemetryResponse struct {
	TelemetryEnabled     bool     `protobuf:"varint,1,opt,name=telemetry_enabled,json=telemetryEnabled,proto3" json:"telemetry_enabled,omitempty" toml:"telemetry_enabled,omitempty" mapstructure:"telemetry_enabled,omitempty"`
	TelemetryUrl         string   `protobuf:"bytes,2,opt,name=telemetry_url,json=telemetryUrl,proto3" json:"telemetry_url,omitempty" toml:"telemetry_url,omitempty" mapstructure:"telemetry_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_unrecognized     []byte   `json:"-" toml:"-" mapstructure:"-,omitempty"`
	XXX_sizecache        int32    `json:"-" toml:"-" mapstructure:"-,omitempty"`
}

func (m *TelemetryResponse) Reset()         { *m = TelemetryResponse{} }
func (m *TelemetryResponse) String() string { return proto.CompactTextString(m) }
func (*TelemetryResponse) ProtoMessage()    {}
func (*TelemetryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c9e1fd6ec1a7af2, []int{12}
}

func (m *TelemetryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryResponse.Unmarshal(m, b)
}
func (m *TelemetryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryResponse.Marshal(b, m, deterministic)
}
func (m *TelemetryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryResponse.Merge(m, src)
}
func (m *TelemetryResponse) XXX_Size() int {
	return xxx_messageInfo_TelemetryResponse.Size(m)
}
func (m *TelemetryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryResponse proto.InternalMessageInfo

func (m *TelemetryResponse) GetTelemetryEnabled() bool {
	if m != nil {
		return m.TelemetryEnabled
	}
	return false
}

func (m *TelemetryResponse) GetTelemetryUrl() string {
	if m != nil {
		return m.TelemetryUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*LicenseRequest)(nil), "chef.automate.domain.license_control.LicenseRequest")
	proto.RegisterType((*LicenseResponse)(nil), "chef.automate.domain.license_control.LicenseResponse")
	proto.RegisterType((*PolicyRequest)(nil), "chef.automate.domain.license_control.PolicyRequest")
	proto.RegisterType((*PolicyResponse)(nil), "chef.automate.domain.license_control.PolicyResponse")
	proto.RegisterType((*Policy)(nil), "chef.automate.domain.license_control.Policy")
	proto.RegisterMapType((map[string]string)(nil), "chef.automate.domain.license_control.Policy.RulesEntry")
	proto.RegisterType((*Capability)(nil), "chef.automate.domain.license_control.Capability")
	proto.RegisterType((*StatusRequest)(nil), "chef.automate.domain.license_control.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "chef.automate.domain.license_control.StatusResponse")
	proto.RegisterType((*DateRange)(nil), "chef.automate.domain.license_control.DateRange")
	proto.RegisterType((*UpdateRequest)(nil), "chef.automate.domain.license_control.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "chef.automate.domain.license_control.UpdateResponse")
	proto.RegisterType((*TelemetryRequest)(nil), "chef.automate.domain.license_control.TelemetryRequest")
	proto.RegisterType((*TelemetryResponse)(nil), "chef.automate.domain.license_control.TelemetryResponse")
}

func init() {
	proto.RegisterFile("api/interservice/license_control/license-control.proto", fileDescriptor_3c9e1fd6ec1a7af2)
}

var fileDescriptor_3c9e1fd6ec1a7af2 = []byte{
	// 759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x05, 0xf5, 0x61, 0x59, 0xa3, 0x0f, 0xcb, 0x8b, 0x1e, 0x58, 0xa1, 0x45, 0x55, 0xb6, 0x07,
	0xa1, 0x75, 0x49, 0x43, 0x76, 0x6d, 0xb7, 0x45, 0x11, 0x24, 0xb6, 0x81, 0x04, 0x48, 0x02, 0x83,
	0xb1, 0x83, 0x20, 0x17, 0x61, 0x45, 0x8e, 0xe4, 0x85, 0xf9, 0x15, 0xee, 0xd2, 0x80, 0x80, 0xfc,
	0xa8, 0xfc, 0xa1, 0x1c, 0x73, 0xce, 0x5f, 0x08, 0xc8, 0xdd, 0xa5, 0x2c, 0xe5, 0x60, 0xea, 0x64,
	0xcd, 0xe3, 0xce, 0x9b, 0x9d, 0x37, 0x6f, 0x16, 0x86, 0x13, 0x9a, 0x30, 0x87, 0x45, 0x02, 0x53,
	0x8e, 0xe9, 0x3d, 0xf3, 0xd0, 0x09, 0x98, 0x87, 0x11, 0xc7, 0xa9, 0x17, 0x47, 0x22, 0x8d, 0x03,
	0x1d, 0xff, 0xa5, 0x62, 0x3b, 0x49, 0x63, 0x11, 0x93, 0xdf, 0xbd, 0x5b, 0x9c, 0xdb, 0x34, 0x13,
	0x71, 0x48, 0x05, 0xda, 0x7e, 0x1c, 0x52, 0x16, 0xd9, 0x1b, 0xb9, 0xc3, 0x5f, 0x16, 0x71, 0xbc,
	0x08, 0xd0, 0x29, 0x72, 0x66, 0xd9, 0xdc, 0x11, 0x2c, 0x44, 0x2e, 0x68, 0x98, 0x48, 0x9a, 0xe1,
	0x8f, 0x01, 0x9b, 0xe9, 0x0a, 0xfa, 0xaf, 0xfc, 0x64, 0x0d, 0xa0, 0xff, 0x52, 0x02, 0x2e, 0x7e,
	0xc8, 0x90, 0x0b, 0xeb, 0x7f, 0xd8, 0x2b, 0x11, 0x9e, 0xc4, 0x11, 0x47, 0xf2, 0x07, 0xb4, 0x54,
	0x96, 0x69, 0x8c, 0x8c, 0x71, 0x67, 0x32, 0xd0, 0x77, 0xb0, 0xf5, 0x51, 0x7d, 0xc0, 0xda, 0x83,
	0xde, 0x55, 0x1c, 0x30, 0x6f, 0xa9, 0xf9, 0xde, 0x42, 0x5f, 0x03, 0x8a, 0xee, 0x02, 0x76, 0x24,
	0xa2, 0xd8, 0x0e, 0xec, 0x2a, 0x6d, 0xda, 0x8a, 0x45, 0xe5, 0x5a, 0x9f, 0x6b, 0x9a, 0x86, 0xfc,
	0x0c, 0xa0, 0x0f, 0x33, 0xbf, 0x20, 0x6d, 0xbb, 0x6d, 0x85, 0xbc, 0xf0, 0xc9, 0x0f, 0xd0, 0xbc,
	0xa7, 0x01, 0xf3, 0xcd, 0xda, 0xc8, 0x18, 0xef, 0xba, 0x32, 0x20, 0xd7, 0xd0, 0xf5, 0x68, 0x42,
	0x67, 0x2c, 0x60, 0x82, 0x21, 0x37, 0xeb, 0xa3, 0xfa, 0xb8, 0x33, 0x39, 0xac, 0x76, 0x97, 0x73,
	0x9d, 0xb9, 0x74, 0xd7, 0x58, 0xc8, 0x2b, 0x68, 0xa6, 0x59, 0x80, 0xdc, 0x6c, 0x14, 0x74, 0xa7,
	0xdb, 0xb4, 0x66, 0xbb, 0x79, 0xe6, 0x65, 0x24, 0xd2, 0xa5, 0x2b, 0x59, 0xc8, 0x13, 0xe8, 0x79,
	0x71, 0x34, 0x67, 0x8b, 0x2c, 0x45, 0x7f, 0x4a, 0x85, 0xd9, 0x2c, 0x14, 0x1b, 0xda, 0x72, 0xe4,
	0xb6, 0x1e, 0xb9, 0x7d, 0xad, 0x47, 0xee, 0x76, 0x57, 0x09, 0x4f, 0xc5, 0xf0, 0x0c, 0x60, 0xc5,
	0x4a, 0x06, 0x50, 0xbf, 0xc3, 0xa5, 0x52, 0x28, 0xff, 0xa9, 0xb4, 0xc9, 0xb0, 0xd0, 0xa6, 0xed,
	0xca, 0xe0, 0xdf, 0xda, 0x99, 0x61, 0x7d, 0x32, 0x00, 0x56, 0x6d, 0x12, 0x02, 0x8d, 0x88, 0x86,
	0xa8, 0x72, 0x8b, 0xdf, 0xc4, 0x84, 0x56, 0x88, 0x94, 0x67, 0xa9, 0x4e, 0xd7, 0x61, 0x4e, 0x1b,
	0xb0, 0x90, 0x09, 0xb3, 0x3e, 0x32, 0xc6, 0xc4, 0x95, 0x01, 0x39, 0x84, 0x26, 0x17, 0x34, 0x15,
	0x66, 0xe3, 0xd1, 0x2e, 0xe4, 0x41, 0x72, 0x00, 0x75, 0x8c, 0xfc, 0x0a, 0x5d, 0xe7, 0xc7, 0x72,
	0xef, 0xbd, 0x11, 0x54, 0x64, 0x5c, 0x7b, 0xef, 0xab, 0x01, 0x7d, 0x8d, 0x28, 0xf3, 0x3d, 0xe2,
	0x95, 0xef, 0x04, 0xaf, 0x6d, 0x27, 0x38, 0x79, 0x07, 0x7b, 0x8a, 0xcd, 0x9f, 0x26, 0x98, 0xb2,
	0xd8, 0x2f, 0x34, 0xe8, 0x4c, 0x9c, 0x6a, 0x56, 0xb8, 0xa0, 0x02, 0x5d, 0x1a, 0x2d, 0xd0, 0xed,
	0x6b, 0x9e, 0xab, 0x82, 0x86, 0xfc, 0x06, 0x3d, 0x2f, 0xe3, 0x22, 0x0e, 0x31, 0x9d, 0x16, 0xa3,
	0x68, 0x14, 0x97, 0xef, 0x6a, 0xf0, 0x35, 0x0d, 0xd1, 0xba, 0x83, 0x76, 0xc9, 0xb0, 0xd2, 0xdb,
	0xd8, 0x52, 0xef, 0x5a, 0x35, 0xbd, 0x9f, 0x43, 0xef, 0x26, 0xf1, 0xf3, 0x72, 0x52, 0x6f, 0xf2,
	0x2b, 0x74, 0x75, 0x3f, 0x3e, 0x15, 0x54, 0xc9, 0xdb, 0x51, 0xd8, 0x05, 0x15, 0x34, 0x77, 0xc6,
	0x3c, 0x4e, 0x3d, 0xd4, 0xcb, 0x58, 0x04, 0xd6, 0x0c, 0xfa, 0x9a, 0x49, 0xcd, 0xc9, 0x84, 0x56,
	0x56, 0x20, 0x72, 0x48, 0xbb, 0xae, 0x0e, 0xa5, 0xeb, 0x38, 0xa7, 0x8b, 0x07, 0xae, 0x2b, 0x42,
	0xf2, 0x13, 0xb4, 0xfd, 0x2c, 0x09, 0x98, 0x47, 0x05, 0x16, 0xaa, 0xef, 0xba, 0x2b, 0xc0, 0x22,
	0x30, 0xb8, 0xc6, 0x00, 0x43, 0xcc, 0xf7, 0x4b, 0x19, 0x04, 0x61, 0xff, 0x01, 0xa6, 0x4a, 0xff,
	0x09, 0xfb, 0x42, 0x83, 0x53, 0x8c, 0xe8, 0x2c, 0x28, 0x2f, 0x31, 0x28, 0x3f, 0x5c, 0x4a, 0x3c,
	0x9f, 0xca, 0xea, 0x70, 0x96, 0x06, 0xea, 0x4e, 0xdd, 0x12, 0xbc, 0x49, 0x83, 0xc9, 0x97, 0x46,
	0xf9, 0xcc, 0x9e, 0xcb, 0x39, 0x93, 0x7b, 0x68, 0x29, 0x84, 0x1c, 0x57, 0x73, 0xc6, 0xfa, 0x3b,
	0x3d, 0xfc, 0x7b, 0xcb, 0x2c, 0xd5, 0x1c, 0x2f, 0x5f, 0xcd, 0xa3, 0xad, 0x9e, 0x5d, 0x55, 0xf5,
	0x78, 0xbb, 0xa4, 0x55, 0x51, 0xb9, 0x86, 0x55, 0x8b, 0xae, 0xad, 0x71, 0xd5, 0xa2, 0x1b, 0x9b,
	0xce, 0x61, 0x47, 0x7a, 0xaa, 0x6a, 0xd1, 0x35, 0x2f, 0x57, 0x2d, 0xba, 0x61, 0xdb, 0x8f, 0xd0,
	0x2e, 0x0d, 0x45, 0x4e, 0xaa, 0x51, 0x6c, 0xba, 0x72, 0x78, 0xba, 0x75, 0x9e, 0xac, 0xfe, 0xec,
	0xbf, 0xf7, 0xff, 0x2c, 0x98, 0xb8, 0xcd, 0x66, 0xb6, 0x17, 0x87, 0x4e, 0x4e, 0xe2, 0x68, 0x12,
	0xe7, 0xb1, 0x7f, 0x41, 0x66, 0x3b, 0xc5, 0x9a, 0x1f, 0x7d, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb3,
	0xb2, 0xd0, 0xa4, 0xad, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LicenseControlClient is the client API for LicenseControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LicenseControlClient interface {
	License(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseResponse, error)
	Policy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*PolicyResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Telemetry(ctx context.Context, in *TelemetryRequest, opts ...grpc.CallOption) (*TelemetryResponse, error)
}

type licenseControlClient struct {
	cc grpc.ClientConnInterface
}

func NewLicenseControlClient(cc grpc.ClientConnInterface) LicenseControlClient {
	return &licenseControlClient{cc}
}

func (c *licenseControlClient) License(ctx context.Context, in *LicenseRequest, opts ...grpc.CallOption) (*LicenseResponse, error) {
	out := new(LicenseResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.license_control.LicenseControl/License", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseControlClient) Policy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*PolicyResponse, error) {
	out := new(PolicyResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.license_control.LicenseControl/Policy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseControlClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.license_control.LicenseControl/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseControlClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.license_control.LicenseControl/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseControlClient) Telemetry(ctx context.Context, in *TelemetryRequest, opts ...grpc.CallOption) (*TelemetryResponse, error) {
	out := new(TelemetryResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.license_control.LicenseControl/Telemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseControlServer is the server API for LicenseControl service.
type LicenseControlServer interface {
	License(context.Context, *LicenseRequest) (*LicenseResponse, error)
	Policy(context.Context, *PolicyRequest) (*PolicyResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Telemetry(context.Context, *TelemetryRequest) (*TelemetryResponse, error)
}

// UnimplementedLicenseControlServer can be embedded to have forward compatible implementations.
type UnimplementedLicenseControlServer struct {
}

func (*UnimplementedLicenseControlServer) License(ctx context.Context, req *LicenseRequest) (*LicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method License not implemented")
}
func (*UnimplementedLicenseControlServer) Policy(ctx context.Context, req *PolicyRequest) (*PolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Policy not implemented")
}
func (*UnimplementedLicenseControlServer) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedLicenseControlServer) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedLicenseControlServer) Telemetry(ctx context.Context, req *TelemetryRequest) (*TelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Telemetry not implemented")
}

func RegisterLicenseControlServer(s *grpc.Server, srv LicenseControlServer) {
	s.RegisterService(&_LicenseControl_serviceDesc, srv)
}

func _LicenseControl_License_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseControlServer).License(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.license_control.LicenseControl/License",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseControlServer).License(ctx, req.(*LicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseControl_Policy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseControlServer).Policy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.license_control.LicenseControl/Policy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseControlServer).Policy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseControl_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseControlServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.license_control.LicenseControl/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseControlServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseControl_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseControlServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.license_control.LicenseControl/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseControlServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseControl_Telemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseControlServer).Telemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.license_control.LicenseControl/Telemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseControlServer).Telemetry(ctx, req.(*TelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LicenseControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.license_control.LicenseControl",
	HandlerType: (*LicenseControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "License",
			Handler:    _LicenseControl_License_Handler,
		},
		{
			MethodName: "Policy",
			Handler:    _LicenseControl_Policy_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _LicenseControl_Status_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LicenseControl_Update_Handler,
		},
		{
			MethodName: "Telemetry",
			Handler:    _LicenseControl_Telemetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/interservice/license_control/license-control.proto",
}
