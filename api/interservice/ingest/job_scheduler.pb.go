// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.0
// source: interservice/ingest/job_scheduler.proto

package ingest

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// JobSettings - The job settings message to configure any scheduler job
type JobSettings struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Every     string                 `protobuf:"bytes,1,opt,name=every,proto3" json:"every,omitempty" toml:"every,omitempty" mapstructure:"every,omitempty"` // accepts '1h30m', '1m', '2h30m', ...
	Threshold string                 `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty" toml:"threshold,omitempty" mapstructure:"threshold,omitempty"`
	Running   bool                   `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty" toml:"running,omitempty" mapstructure:"running,omitempty"`
	// recurrence rules are how underlying cereal workflow schedules are stored
	// and executed. 'every' was the scheduler format that was used in the
	// previous scheduler implementation and is still supported, though they
	// are translated to and from recurrence rules when getting and setting
	// the schedule recurrence.
	// When the UI is moved to the data_lifecycle top level api, which uses
	// recurrence, we can probably deprecate or remove every support.
	Recurrence    string `protobuf:"bytes,5,opt,name=recurrence,proto3" json:"recurrence,omitempty" toml:"recurrence,omitempty" mapstructure:"recurrence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSettings) Reset() {
	*x = JobSettings{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSettings) ProtoMessage() {}

func (x *JobSettings) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSettings.ProtoReflect.Descriptor instead.
func (*JobSettings) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *JobSettings) GetEvery() string {
	if x != nil {
		return x.Every
	}
	return ""
}

func (x *JobSettings) GetThreshold() string {
	if x != nil {
		return x.Threshold
	}
	return ""
}

func (x *JobSettings) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *JobSettings) GetRecurrence() string {
	if x != nil {
		return x.Recurrence
	}
	return ""
}

type JobSchedulerStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Running       bool                   `protobuf:"varint,1,opt,name=running,proto3" json:"running,omitempty" toml:"running,omitempty" mapstructure:"running,omitempty"`
	Jobs          []*Job                 `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty" toml:"jobs,omitempty" mapstructure:"jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSchedulerStatus) Reset() {
	*x = JobSchedulerStatus{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSchedulerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSchedulerStatus) ProtoMessage() {}

func (x *JobSchedulerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSchedulerStatus.ProtoReflect.Descriptor instead.
func (*JobSchedulerStatus) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *JobSchedulerStatus) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *JobSchedulerStatus) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type Job struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Running       bool                   `protobuf:"varint,1,opt,name=running,proto3" json:"running,omitempty" toml:"running,omitempty" mapstructure:"running,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Every         string                 `protobuf:"bytes,3,opt,name=every,proto3" json:"every,omitempty" toml:"every,omitempty" mapstructure:"every,omitempty"`
	LastRun       string                 `protobuf:"bytes,4,opt,name=last_run,json=lastRun,proto3" json:"last_run,omitempty" toml:"last_run,omitempty" mapstructure:"last_run,omitempty"`
	NextRun       string                 `protobuf:"bytes,5,opt,name=next_run,json=nextRun,proto3" json:"next_run,omitempty" toml:"next_run,omitempty" mapstructure:"next_run,omitempty"`
	LastElapsed   string                 `protobuf:"bytes,6,opt,name=last_elapsed,json=lastElapsed,proto3" json:"last_elapsed,omitempty" toml:"last_elapsed,omitempty" mapstructure:"last_elapsed,omitempty"`
	StartedOn     string                 `protobuf:"bytes,7,opt,name=started_on,json=startedOn,proto3" json:"started_on,omitempty" toml:"started_on,omitempty" mapstructure:"started_on,omitempty"`
	Threshold     string                 `protobuf:"bytes,8,opt,name=threshold,proto3" json:"threshold,omitempty" toml:"threshold,omitempty" mapstructure:"threshold,omitempty"`
	Recurrence    string                 `protobuf:"bytes,9,opt,name=recurrence,proto3" json:"recurrence,omitempty" toml:"recurrence,omitempty" mapstructure:"recurrence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *Job) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetEvery() string {
	if x != nil {
		return x.Every
	}
	return ""
}

func (x *Job) GetLastRun() string {
	if x != nil {
		return x.LastRun
	}
	return ""
}

func (x *Job) GetNextRun() string {
	if x != nil {
		return x.NextRun
	}
	return ""
}

func (x *Job) GetLastElapsed() string {
	if x != nil {
		return x.LastElapsed
	}
	return ""
}

func (x *Job) GetStartedOn() string {
	if x != nil {
		return x.StartedOn
	}
	return ""
}

func (x *Job) GetThreshold() string {
	if x != nil {
		return x.Threshold
	}
	return ""
}

func (x *Job) GetRecurrence() string {
	if x != nil {
		return x.Recurrence
	}
	return ""
}

type JobSchedulerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSchedulerStatusRequest) Reset() {
	*x = JobSchedulerStatusRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSchedulerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSchedulerStatusRequest) ProtoMessage() {}

func (x *JobSchedulerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSchedulerStatusRequest.ProtoReflect.Descriptor instead.
func (*JobSchedulerStatusRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{3}
}

type StopJobSchedulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopJobSchedulerRequest) Reset() {
	*x = StopJobSchedulerRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopJobSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobSchedulerRequest) ProtoMessage() {}

func (x *StopJobSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobSchedulerRequest.ProtoReflect.Descriptor instead.
func (*StopJobSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{4}
}

type StopJobSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopJobSchedulerResponse) Reset() {
	*x = StopJobSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopJobSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobSchedulerResponse) ProtoMessage() {}

func (x *StopJobSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobSchedulerResponse.ProtoReflect.Descriptor instead.
func (*StopJobSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{5}
}

type StartJobSchedulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartJobSchedulerRequest) Reset() {
	*x = StartJobSchedulerRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartJobSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobSchedulerRequest) ProtoMessage() {}

func (x *StartJobSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobSchedulerRequest.ProtoReflect.Descriptor instead.
func (*StartJobSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{6}
}

type StartJobSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartJobSchedulerResponse) Reset() {
	*x = StartJobSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartJobSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobSchedulerResponse) ProtoMessage() {}

func (x *StartJobSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobSchedulerResponse.ProtoReflect.Descriptor instead.
func (*StartJobSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{7}
}

// NodesMissingScheduler
type MarkNodesMissingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkNodesMissingRequest) Reset() {
	*x = MarkNodesMissingRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkNodesMissingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkNodesMissingRequest) ProtoMessage() {}

func (x *MarkNodesMissingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkNodesMissingRequest.ProtoReflect.Descriptor instead.
func (*MarkNodesMissingRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{8}
}

type MarkNodesMissingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkNodesMissingResponse) Reset() {
	*x = MarkNodesMissingResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkNodesMissingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkNodesMissingResponse) ProtoMessage() {}

func (x *MarkNodesMissingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkNodesMissingResponse.ProtoReflect.Descriptor instead.
func (*MarkNodesMissingResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{9}
}

type ConfigureNodesMissingSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureNodesMissingSchedulerResponse) Reset() {
	*x = ConfigureNodesMissingSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureNodesMissingSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureNodesMissingSchedulerResponse) ProtoMessage() {}

func (x *ConfigureNodesMissingSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureNodesMissingSchedulerResponse.ProtoReflect.Descriptor instead.
func (*ConfigureNodesMissingSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{10}
}

type StartNodesMissingSchedulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartNodesMissingSchedulerRequest) Reset() {
	*x = StartNodesMissingSchedulerRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartNodesMissingSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartNodesMissingSchedulerRequest) ProtoMessage() {}

func (x *StartNodesMissingSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartNodesMissingSchedulerRequest.ProtoReflect.Descriptor instead.
func (*StartNodesMissingSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{11}
}

type StartNodesMissingSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartNodesMissingSchedulerResponse) Reset() {
	*x = StartNodesMissingSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartNodesMissingSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartNodesMissingSchedulerResponse) ProtoMessage() {}

func (x *StartNodesMissingSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartNodesMissingSchedulerResponse.ProtoReflect.Descriptor instead.
func (*StartNodesMissingSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{12}
}

type StopNodesMissingSchedulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopNodesMissingSchedulerRequest) Reset() {
	*x = StopNodesMissingSchedulerRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopNodesMissingSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopNodesMissingSchedulerRequest) ProtoMessage() {}

func (x *StopNodesMissingSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopNodesMissingSchedulerRequest.ProtoReflect.Descriptor instead.
func (*StopNodesMissingSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{13}
}

type StopNodesMissingSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopNodesMissingSchedulerResponse) Reset() {
	*x = StopNodesMissingSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopNodesMissingSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopNodesMissingSchedulerResponse) ProtoMessage() {}

func (x *StopNodesMissingSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopNodesMissingSchedulerResponse.ProtoReflect.Descriptor instead.
func (*StopNodesMissingSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{14}
}

// DeleteNodesScheduler
type DeleteMarkedNodesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMarkedNodesRequest) Reset() {
	*x = DeleteMarkedNodesRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMarkedNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMarkedNodesRequest) ProtoMessage() {}

func (x *DeleteMarkedNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMarkedNodesRequest.ProtoReflect.Descriptor instead.
func (*DeleteMarkedNodesRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{15}
}

type DeleteMarkedNodesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMarkedNodesResponse) Reset() {
	*x = DeleteMarkedNodesResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMarkedNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMarkedNodesResponse) ProtoMessage() {}

func (x *DeleteMarkedNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMarkedNodesResponse.ProtoReflect.Descriptor instead.
func (*DeleteMarkedNodesResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{16}
}

type StartDeleteNodesSchedulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartDeleteNodesSchedulerRequest) Reset() {
	*x = StartDeleteNodesSchedulerRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartDeleteNodesSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDeleteNodesSchedulerRequest) ProtoMessage() {}

func (x *StartDeleteNodesSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDeleteNodesSchedulerRequest.ProtoReflect.Descriptor instead.
func (*StartDeleteNodesSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{17}
}

type StartDeleteNodesSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartDeleteNodesSchedulerResponse) Reset() {
	*x = StartDeleteNodesSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartDeleteNodesSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDeleteNodesSchedulerResponse) ProtoMessage() {}

func (x *StartDeleteNodesSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDeleteNodesSchedulerResponse.ProtoReflect.Descriptor instead.
func (*StartDeleteNodesSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{18}
}

type StopDeleteNodesSchedulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopDeleteNodesSchedulerRequest) Reset() {
	*x = StopDeleteNodesSchedulerRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopDeleteNodesSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDeleteNodesSchedulerRequest) ProtoMessage() {}

func (x *StopDeleteNodesSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDeleteNodesSchedulerRequest.ProtoReflect.Descriptor instead.
func (*StopDeleteNodesSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{19}
}

type StopDeleteNodesSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopDeleteNodesSchedulerResponse) Reset() {
	*x = StopDeleteNodesSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopDeleteNodesSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDeleteNodesSchedulerResponse) ProtoMessage() {}

func (x *StopDeleteNodesSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDeleteNodesSchedulerResponse.ProtoReflect.Descriptor instead.
func (*StopDeleteNodesSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{20}
}

type ConfigureDeleteNodesSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureDeleteNodesSchedulerResponse) Reset() {
	*x = ConfigureDeleteNodesSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureDeleteNodesSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureDeleteNodesSchedulerResponse) ProtoMessage() {}

func (x *ConfigureDeleteNodesSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureDeleteNodesSchedulerResponse.ProtoReflect.Descriptor instead.
func (*ConfigureDeleteNodesSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{21}
}

type MarkMissingNodesForDeletionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkMissingNodesForDeletionRequest) Reset() {
	*x = MarkMissingNodesForDeletionRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkMissingNodesForDeletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMissingNodesForDeletionRequest) ProtoMessage() {}

func (x *MarkMissingNodesForDeletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMissingNodesForDeletionRequest.ProtoReflect.Descriptor instead.
func (*MarkMissingNodesForDeletionRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{22}
}

// MissingNodesForDeletionScheduler
type MarkMissingNodesForDeletionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkMissingNodesForDeletionResponse) Reset() {
	*x = MarkMissingNodesForDeletionResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkMissingNodesForDeletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMissingNodesForDeletionResponse) ProtoMessage() {}

func (x *MarkMissingNodesForDeletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMissingNodesForDeletionResponse.ProtoReflect.Descriptor instead.
func (*MarkMissingNodesForDeletionResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{23}
}

type ConfigureMissingNodesForDeletionSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureMissingNodesForDeletionSchedulerResponse) Reset() {
	*x = ConfigureMissingNodesForDeletionSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureMissingNodesForDeletionSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureMissingNodesForDeletionSchedulerResponse) ProtoMessage() {}

func (x *ConfigureMissingNodesForDeletionSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureMissingNodesForDeletionSchedulerResponse.ProtoReflect.Descriptor instead.
func (*ConfigureMissingNodesForDeletionSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{24}
}

type StartMissingNodesForDeletionSchedulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartMissingNodesForDeletionSchedulerRequest) Reset() {
	*x = StartMissingNodesForDeletionSchedulerRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMissingNodesForDeletionSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMissingNodesForDeletionSchedulerRequest) ProtoMessage() {}

func (x *StartMissingNodesForDeletionSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMissingNodesForDeletionSchedulerRequest.ProtoReflect.Descriptor instead.
func (*StartMissingNodesForDeletionSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{25}
}

type StartMissingNodesForDeletionSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartMissingNodesForDeletionSchedulerResponse) Reset() {
	*x = StartMissingNodesForDeletionSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartMissingNodesForDeletionSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMissingNodesForDeletionSchedulerResponse) ProtoMessage() {}

func (x *StartMissingNodesForDeletionSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMissingNodesForDeletionSchedulerResponse.ProtoReflect.Descriptor instead.
func (*StartMissingNodesForDeletionSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{26}
}

type StopMissingNodesForDeletionSchedulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopMissingNodesForDeletionSchedulerRequest) Reset() {
	*x = StopMissingNodesForDeletionSchedulerRequest{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopMissingNodesForDeletionSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMissingNodesForDeletionSchedulerRequest) ProtoMessage() {}

func (x *StopMissingNodesForDeletionSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMissingNodesForDeletionSchedulerRequest.ProtoReflect.Descriptor instead.
func (*StopMissingNodesForDeletionSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{27}
}

type StopMissingNodesForDeletionSchedulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopMissingNodesForDeletionSchedulerResponse) Reset() {
	*x = StopMissingNodesForDeletionSchedulerResponse{}
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopMissingNodesForDeletionSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMissingNodesForDeletionSchedulerResponse) ProtoMessage() {}

func (x *StopMissingNodesForDeletionSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_job_scheduler_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMissingNodesForDeletionSchedulerResponse.ProtoReflect.Descriptor instead.
func (*StopMissingNodesForDeletionSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_job_scheduler_proto_rawDescGZIP(), []int{28}
}

var File_interservice_ingest_job_scheduler_proto protoreflect.FileDescriptor

const file_interservice_ingest_job_scheduler_proto_rawDesc = "" +
	"\n" +
	"'interservice/ingest/job_scheduler.proto\x12\x1bchef.automate.domain.ingest\x1a\x1cgoogle/api/annotations.proto\"{\n" +
	"\vJobSettings\x12\x14\n" +
	"\x05every\x18\x01 \x01(\tR\x05every\x12\x1c\n" +
	"\tthreshold\x18\x03 \x01(\tR\tthreshold\x12\x18\n" +
	"\arunning\x18\x04 \x01(\bR\arunning\x12\x1e\n" +
	"\n" +
	"recurrence\x18\x05 \x01(\tR\n" +
	"recurrence\"d\n" +
	"\x12JobSchedulerStatus\x12\x18\n" +
	"\arunning\x18\x01 \x01(\bR\arunning\x124\n" +
	"\x04jobs\x18\x02 \x03(\v2 .chef.automate.domain.ingest.JobR\x04jobs\"\xff\x01\n" +
	"\x03Job\x12\x18\n" +
	"\arunning\x18\x01 \x01(\bR\arunning\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05every\x18\x03 \x01(\tR\x05every\x12\x19\n" +
	"\blast_run\x18\x04 \x01(\tR\alastRun\x12\x19\n" +
	"\bnext_run\x18\x05 \x01(\tR\anextRun\x12!\n" +
	"\flast_elapsed\x18\x06 \x01(\tR\vlastElapsed\x12\x1d\n" +
	"\n" +
	"started_on\x18\a \x01(\tR\tstartedOn\x12\x1c\n" +
	"\tthreshold\x18\b \x01(\tR\tthreshold\x12\x1e\n" +
	"\n" +
	"recurrence\x18\t \x01(\tR\n" +
	"recurrence\"\x1b\n" +
	"\x19JobSchedulerStatusRequest\"\x19\n" +
	"\x17StopJobSchedulerRequest\"\x1a\n" +
	"\x18StopJobSchedulerResponse\"\x1a\n" +
	"\x18StartJobSchedulerRequest\"\x1b\n" +
	"\x19StartJobSchedulerResponse\"\x19\n" +
	"\x17MarkNodesMissingRequest\"\x1a\n" +
	"\x18MarkNodesMissingResponse\"(\n" +
	"&ConfigureNodesMissingSchedulerResponse\"#\n" +
	"!StartNodesMissingSchedulerRequest\"$\n" +
	"\"StartNodesMissingSchedulerResponse\"\"\n" +
	" StopNodesMissingSchedulerRequest\"#\n" +
	"!StopNodesMissingSchedulerResponse\"\x1a\n" +
	"\x18DeleteMarkedNodesRequest\"\x1b\n" +
	"\x19DeleteMarkedNodesResponse\"\"\n" +
	" StartDeleteNodesSchedulerRequest\"#\n" +
	"!StartDeleteNodesSchedulerResponse\"!\n" +
	"\x1fStopDeleteNodesSchedulerRequest\"\"\n" +
	" StopDeleteNodesSchedulerResponse\"'\n" +
	"%ConfigureDeleteNodesSchedulerResponse\"$\n" +
	"\"MarkMissingNodesForDeletionRequest\"%\n" +
	"#MarkMissingNodesForDeletionResponse\"3\n" +
	"1ConfigureMissingNodesForDeletionSchedulerResponse\".\n" +
	",StartMissingNodesForDeletionSchedulerRequest\"/\n" +
	"-StartMissingNodesForDeletionSchedulerResponse\"-\n" +
	"+StopMissingNodesForDeletionSchedulerRequest\".\n" +
	",StopMissingNodesForDeletionSchedulerResponse2\x88\x13\n" +
	"\x13JobSchedulerService\x12\xaa\x01\n" +
	"\x15GetStatusJobScheduler\x126.chef.automate.domain.ingest.JobSchedulerStatusRequest\x1a/.chef.automate.domain.ingest.JobSchedulerStatus\"(\x82\xd3\xe4\x93\x02\"\x12 /api/v0/job/job-scheduler/status\x12\xb5\x01\n" +
	"\x10MarkNodesMissing\x124.chef.automate.domain.ingest.MarkNodesMissingRequest\x1a5.chef.automate.domain.ingest.MarkNodesMissingResponse\"4\x82\xd3\xe4\x93\x02.\",/api/v0/job/missing-nodes/mark-nodes-missing\x12\xb9\x01\n" +
	"\x1eConfigureNodesMissingScheduler\x12(.chef.automate.domain.ingest.JobSettings\x1aC.chef.automate.domain.ingest.ConfigureNodesMissingSchedulerResponse\"(\x82\xd3\xe4\x93\x02\"\" /api/v0/job/missing-nodes/config\x12\xc6\x01\n" +
	"\x1aStartNodesMissingScheduler\x12>.chef.automate.domain.ingest.StartNodesMissingSchedulerRequest\x1a?.chef.automate.domain.ingest.StartNodesMissingSchedulerResponse\"'\x82\xd3\xe4\x93\x02!\"\x1f/api/v0/job/missing-nodes/start\x12\xc2\x01\n" +
	"\x19StopNodesMissingScheduler\x12=.chef.automate.domain.ingest.StopNodesMissingSchedulerRequest\x1a>.chef.automate.domain.ingest.StopNodesMissingSchedulerResponse\"&\x82\xd3\xe4\x93\x02 \"\x1e/api/v0/job/missing-nodes/stop\x12\xb8\x01\n" +
	"\x11DeleteMarkedNodes\x125.chef.automate.domain.ingest.DeleteMarkedNodesRequest\x1a6.chef.automate.domain.ingest.DeleteMarkedNodesResponse\"4\x82\xd3\xe4\x93\x02.\",/api/v0/job/delete-nodes/delete-marked-nodes\x12\xc2\x01\n" +
	"\x19StartDeleteNodesScheduler\x12=.chef.automate.domain.ingest.StartDeleteNodesSchedulerRequest\x1a>.chef.automate.domain.ingest.StartDeleteNodesSchedulerResponse\"&\x82\xd3\xe4\x93\x02 \"\x1e/api/v0/job/delete-nodes/start\x12\xbe\x01\n" +
	"\x18StopDeleteNodesScheduler\x12<.chef.automate.domain.ingest.StopDeleteNodesSchedulerRequest\x1a=.chef.automate.domain.ingest.StopDeleteNodesSchedulerResponse\"%\x82\xd3\xe4\x93\x02\x1f\"\x1d/api/v0/job/delete-nodes/stop\x12\xb6\x01\n" +
	"\x1dConfigureDeleteNodesScheduler\x12(.chef.automate.domain.ingest.JobSettings\x1aB.chef.automate.domain.ingest.ConfigureDeleteNodesSchedulerResponse\"'\x82\xd3\xe4\x93\x02!\"\x1f/api/v0/job/delete-nodes/config\x12\xa0\x01\n" +
	"\x1bMarkMissingNodesForDeletion\x12?.chef.automate.domain.ingest.MarkMissingNodesForDeletionRequest\x1a@.chef.automate.domain.ingest.MarkMissingNodesForDeletionResponse\x12\xa5\x01\n" +
	")ConfigureMissingNodesForDeletionScheduler\x12(.chef.automate.domain.ingest.JobSettings\x1aN.chef.automate.domain.ingest.ConfigureMissingNodesForDeletionSchedulerResponse\x12\xbe\x01\n" +
	"%StartMissingNodesForDeletionScheduler\x12I.chef.automate.domain.ingest.StartMissingNodesForDeletionSchedulerRequest\x1aJ.chef.automate.domain.ingest.StartMissingNodesForDeletionSchedulerResponse\x12\xbb\x01\n" +
	"$StopMissingNodesForDeletionScheduler\x12H.chef.automate.domain.ingest.StopMissingNodesForDeletionSchedulerRequest\x1aI.chef.automate.domain.ingest.StopMissingNodesForDeletionSchedulerResponseB2Z0github.com/chef/automate/api/interservice/ingestb\x06proto3"

var (
	file_interservice_ingest_job_scheduler_proto_rawDescOnce sync.Once
	file_interservice_ingest_job_scheduler_proto_rawDescData []byte
)

func file_interservice_ingest_job_scheduler_proto_rawDescGZIP() []byte {
	file_interservice_ingest_job_scheduler_proto_rawDescOnce.Do(func() {
		file_interservice_ingest_job_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_interservice_ingest_job_scheduler_proto_rawDesc), len(file_interservice_ingest_job_scheduler_proto_rawDesc)))
	})
	return file_interservice_ingest_job_scheduler_proto_rawDescData
}

var file_interservice_ingest_job_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_interservice_ingest_job_scheduler_proto_goTypes = []any{
	(*JobSettings)(nil),                                       // 0: chef.automate.domain.ingest.JobSettings
	(*JobSchedulerStatus)(nil),                                // 1: chef.automate.domain.ingest.JobSchedulerStatus
	(*Job)(nil),                                               // 2: chef.automate.domain.ingest.Job
	(*JobSchedulerStatusRequest)(nil),                         // 3: chef.automate.domain.ingest.JobSchedulerStatusRequest
	(*StopJobSchedulerRequest)(nil),                           // 4: chef.automate.domain.ingest.StopJobSchedulerRequest
	(*StopJobSchedulerResponse)(nil),                          // 5: chef.automate.domain.ingest.StopJobSchedulerResponse
	(*StartJobSchedulerRequest)(nil),                          // 6: chef.automate.domain.ingest.StartJobSchedulerRequest
	(*StartJobSchedulerResponse)(nil),                         // 7: chef.automate.domain.ingest.StartJobSchedulerResponse
	(*MarkNodesMissingRequest)(nil),                           // 8: chef.automate.domain.ingest.MarkNodesMissingRequest
	(*MarkNodesMissingResponse)(nil),                          // 9: chef.automate.domain.ingest.MarkNodesMissingResponse
	(*ConfigureNodesMissingSchedulerResponse)(nil),            // 10: chef.automate.domain.ingest.ConfigureNodesMissingSchedulerResponse
	(*StartNodesMissingSchedulerRequest)(nil),                 // 11: chef.automate.domain.ingest.StartNodesMissingSchedulerRequest
	(*StartNodesMissingSchedulerResponse)(nil),                // 12: chef.automate.domain.ingest.StartNodesMissingSchedulerResponse
	(*StopNodesMissingSchedulerRequest)(nil),                  // 13: chef.automate.domain.ingest.StopNodesMissingSchedulerRequest
	(*StopNodesMissingSchedulerResponse)(nil),                 // 14: chef.automate.domain.ingest.StopNodesMissingSchedulerResponse
	(*DeleteMarkedNodesRequest)(nil),                          // 15: chef.automate.domain.ingest.DeleteMarkedNodesRequest
	(*DeleteMarkedNodesResponse)(nil),                         // 16: chef.automate.domain.ingest.DeleteMarkedNodesResponse
	(*StartDeleteNodesSchedulerRequest)(nil),                  // 17: chef.automate.domain.ingest.StartDeleteNodesSchedulerRequest
	(*StartDeleteNodesSchedulerResponse)(nil),                 // 18: chef.automate.domain.ingest.StartDeleteNodesSchedulerResponse
	(*StopDeleteNodesSchedulerRequest)(nil),                   // 19: chef.automate.domain.ingest.StopDeleteNodesSchedulerRequest
	(*StopDeleteNodesSchedulerResponse)(nil),                  // 20: chef.automate.domain.ingest.StopDeleteNodesSchedulerResponse
	(*ConfigureDeleteNodesSchedulerResponse)(nil),             // 21: chef.automate.domain.ingest.ConfigureDeleteNodesSchedulerResponse
	(*MarkMissingNodesForDeletionRequest)(nil),                // 22: chef.automate.domain.ingest.MarkMissingNodesForDeletionRequest
	(*MarkMissingNodesForDeletionResponse)(nil),               // 23: chef.automate.domain.ingest.MarkMissingNodesForDeletionResponse
	(*ConfigureMissingNodesForDeletionSchedulerResponse)(nil), // 24: chef.automate.domain.ingest.ConfigureMissingNodesForDeletionSchedulerResponse
	(*StartMissingNodesForDeletionSchedulerRequest)(nil),      // 25: chef.automate.domain.ingest.StartMissingNodesForDeletionSchedulerRequest
	(*StartMissingNodesForDeletionSchedulerResponse)(nil),     // 26: chef.automate.domain.ingest.StartMissingNodesForDeletionSchedulerResponse
	(*StopMissingNodesForDeletionSchedulerRequest)(nil),       // 27: chef.automate.domain.ingest.StopMissingNodesForDeletionSchedulerRequest
	(*StopMissingNodesForDeletionSchedulerResponse)(nil),      // 28: chef.automate.domain.ingest.StopMissingNodesForDeletionSchedulerResponse
}
var file_interservice_ingest_job_scheduler_proto_depIdxs = []int32{
	2,  // 0: chef.automate.domain.ingest.JobSchedulerStatus.jobs:type_name -> chef.automate.domain.ingest.Job
	3,  // 1: chef.automate.domain.ingest.JobSchedulerService.GetStatusJobScheduler:input_type -> chef.automate.domain.ingest.JobSchedulerStatusRequest
	8,  // 2: chef.automate.domain.ingest.JobSchedulerService.MarkNodesMissing:input_type -> chef.automate.domain.ingest.MarkNodesMissingRequest
	0,  // 3: chef.automate.domain.ingest.JobSchedulerService.ConfigureNodesMissingScheduler:input_type -> chef.automate.domain.ingest.JobSettings
	11, // 4: chef.automate.domain.ingest.JobSchedulerService.StartNodesMissingScheduler:input_type -> chef.automate.domain.ingest.StartNodesMissingSchedulerRequest
	13, // 5: chef.automate.domain.ingest.JobSchedulerService.StopNodesMissingScheduler:input_type -> chef.automate.domain.ingest.StopNodesMissingSchedulerRequest
	15, // 6: chef.automate.domain.ingest.JobSchedulerService.DeleteMarkedNodes:input_type -> chef.automate.domain.ingest.DeleteMarkedNodesRequest
	17, // 7: chef.automate.domain.ingest.JobSchedulerService.StartDeleteNodesScheduler:input_type -> chef.automate.domain.ingest.StartDeleteNodesSchedulerRequest
	19, // 8: chef.automate.domain.ingest.JobSchedulerService.StopDeleteNodesScheduler:input_type -> chef.automate.domain.ingest.StopDeleteNodesSchedulerRequest
	0,  // 9: chef.automate.domain.ingest.JobSchedulerService.ConfigureDeleteNodesScheduler:input_type -> chef.automate.domain.ingest.JobSettings
	22, // 10: chef.automate.domain.ingest.JobSchedulerService.MarkMissingNodesForDeletion:input_type -> chef.automate.domain.ingest.MarkMissingNodesForDeletionRequest
	0,  // 11: chef.automate.domain.ingest.JobSchedulerService.ConfigureMissingNodesForDeletionScheduler:input_type -> chef.automate.domain.ingest.JobSettings
	25, // 12: chef.automate.domain.ingest.JobSchedulerService.StartMissingNodesForDeletionScheduler:input_type -> chef.automate.domain.ingest.StartMissingNodesForDeletionSchedulerRequest
	27, // 13: chef.automate.domain.ingest.JobSchedulerService.StopMissingNodesForDeletionScheduler:input_type -> chef.automate.domain.ingest.StopMissingNodesForDeletionSchedulerRequest
	1,  // 14: chef.automate.domain.ingest.JobSchedulerService.GetStatusJobScheduler:output_type -> chef.automate.domain.ingest.JobSchedulerStatus
	9,  // 15: chef.automate.domain.ingest.JobSchedulerService.MarkNodesMissing:output_type -> chef.automate.domain.ingest.MarkNodesMissingResponse
	10, // 16: chef.automate.domain.ingest.JobSchedulerService.ConfigureNodesMissingScheduler:output_type -> chef.automate.domain.ingest.ConfigureNodesMissingSchedulerResponse
	12, // 17: chef.automate.domain.ingest.JobSchedulerService.StartNodesMissingScheduler:output_type -> chef.automate.domain.ingest.StartNodesMissingSchedulerResponse
	14, // 18: chef.automate.domain.ingest.JobSchedulerService.StopNodesMissingScheduler:output_type -> chef.automate.domain.ingest.StopNodesMissingSchedulerResponse
	16, // 19: chef.automate.domain.ingest.JobSchedulerService.DeleteMarkedNodes:output_type -> chef.automate.domain.ingest.DeleteMarkedNodesResponse
	18, // 20: chef.automate.domain.ingest.JobSchedulerService.StartDeleteNodesScheduler:output_type -> chef.automate.domain.ingest.StartDeleteNodesSchedulerResponse
	20, // 21: chef.automate.domain.ingest.JobSchedulerService.StopDeleteNodesScheduler:output_type -> chef.automate.domain.ingest.StopDeleteNodesSchedulerResponse
	21, // 22: chef.automate.domain.ingest.JobSchedulerService.ConfigureDeleteNodesScheduler:output_type -> chef.automate.domain.ingest.ConfigureDeleteNodesSchedulerResponse
	23, // 23: chef.automate.domain.ingest.JobSchedulerService.MarkMissingNodesForDeletion:output_type -> chef.automate.domain.ingest.MarkMissingNodesForDeletionResponse
	24, // 24: chef.automate.domain.ingest.JobSchedulerService.ConfigureMissingNodesForDeletionScheduler:output_type -> chef.automate.domain.ingest.ConfigureMissingNodesForDeletionSchedulerResponse
	26, // 25: chef.automate.domain.ingest.JobSchedulerService.StartMissingNodesForDeletionScheduler:output_type -> chef.automate.domain.ingest.StartMissingNodesForDeletionSchedulerResponse
	28, // 26: chef.automate.domain.ingest.JobSchedulerService.StopMissingNodesForDeletionScheduler:output_type -> chef.automate.domain.ingest.StopMissingNodesForDeletionSchedulerResponse
	14, // [14:27] is the sub-list for method output_type
	1,  // [1:14] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_interservice_ingest_job_scheduler_proto_init() }
func file_interservice_ingest_job_scheduler_proto_init() {
	if File_interservice_ingest_job_scheduler_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_interservice_ingest_job_scheduler_proto_rawDesc), len(file_interservice_ingest_job_scheduler_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_ingest_job_scheduler_proto_goTypes,
		DependencyIndexes: file_interservice_ingest_job_scheduler_proto_depIdxs,
		MessageInfos:      file_interservice_ingest_job_scheduler_proto_msgTypes,
	}.Build()
	File_interservice_ingest_job_scheduler_proto = out.File
	file_interservice_ingest_job_scheduler_proto_goTypes = nil
	file_interservice_ingest_job_scheduler_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JobSchedulerServiceClient is the client API for JobSchedulerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobSchedulerServiceClient interface {
	GetStatusJobScheduler(ctx context.Context, in *JobSchedulerStatusRequest, opts ...grpc.CallOption) (*JobSchedulerStatus, error)
	MarkNodesMissing(ctx context.Context, in *MarkNodesMissingRequest, opts ...grpc.CallOption) (*MarkNodesMissingResponse, error)
	ConfigureNodesMissingScheduler(ctx context.Context, in *JobSettings, opts ...grpc.CallOption) (*ConfigureNodesMissingSchedulerResponse, error)
	StartNodesMissingScheduler(ctx context.Context, in *StartNodesMissingSchedulerRequest, opts ...grpc.CallOption) (*StartNodesMissingSchedulerResponse, error)
	StopNodesMissingScheduler(ctx context.Context, in *StopNodesMissingSchedulerRequest, opts ...grpc.CallOption) (*StopNodesMissingSchedulerResponse, error)
	// DeleteNodesScheduler
	DeleteMarkedNodes(ctx context.Context, in *DeleteMarkedNodesRequest, opts ...grpc.CallOption) (*DeleteMarkedNodesResponse, error)
	StartDeleteNodesScheduler(ctx context.Context, in *StartDeleteNodesSchedulerRequest, opts ...grpc.CallOption) (*StartDeleteNodesSchedulerResponse, error)
	StopDeleteNodesScheduler(ctx context.Context, in *StopDeleteNodesSchedulerRequest, opts ...grpc.CallOption) (*StopDeleteNodesSchedulerResponse, error)
	ConfigureDeleteNodesScheduler(ctx context.Context, in *JobSettings, opts ...grpc.CallOption) (*ConfigureDeleteNodesSchedulerResponse, error)
	// MissingNodesForDeletionScheduler
	MarkMissingNodesForDeletion(ctx context.Context, in *MarkMissingNodesForDeletionRequest, opts ...grpc.CallOption) (*MarkMissingNodesForDeletionResponse, error)
	ConfigureMissingNodesForDeletionScheduler(ctx context.Context, in *JobSettings, opts ...grpc.CallOption) (*ConfigureMissingNodesForDeletionSchedulerResponse, error)
	StartMissingNodesForDeletionScheduler(ctx context.Context, in *StartMissingNodesForDeletionSchedulerRequest, opts ...grpc.CallOption) (*StartMissingNodesForDeletionSchedulerResponse, error)
	StopMissingNodesForDeletionScheduler(ctx context.Context, in *StopMissingNodesForDeletionSchedulerRequest, opts ...grpc.CallOption) (*StopMissingNodesForDeletionSchedulerResponse, error)
}

type jobSchedulerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobSchedulerServiceClient(cc grpc.ClientConnInterface) JobSchedulerServiceClient {
	return &jobSchedulerServiceClient{cc}
}

func (c *jobSchedulerServiceClient) GetStatusJobScheduler(ctx context.Context, in *JobSchedulerStatusRequest, opts ...grpc.CallOption) (*JobSchedulerStatus, error) {
	out := new(JobSchedulerStatus)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/GetStatusJobScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) MarkNodesMissing(ctx context.Context, in *MarkNodesMissingRequest, opts ...grpc.CallOption) (*MarkNodesMissingResponse, error) {
	out := new(MarkNodesMissingResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/MarkNodesMissing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) ConfigureNodesMissingScheduler(ctx context.Context, in *JobSettings, opts ...grpc.CallOption) (*ConfigureNodesMissingSchedulerResponse, error) {
	out := new(ConfigureNodesMissingSchedulerResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/ConfigureNodesMissingScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) StartNodesMissingScheduler(ctx context.Context, in *StartNodesMissingSchedulerRequest, opts ...grpc.CallOption) (*StartNodesMissingSchedulerResponse, error) {
	out := new(StartNodesMissingSchedulerResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/StartNodesMissingScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) StopNodesMissingScheduler(ctx context.Context, in *StopNodesMissingSchedulerRequest, opts ...grpc.CallOption) (*StopNodesMissingSchedulerResponse, error) {
	out := new(StopNodesMissingSchedulerResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/StopNodesMissingScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) DeleteMarkedNodes(ctx context.Context, in *DeleteMarkedNodesRequest, opts ...grpc.CallOption) (*DeleteMarkedNodesResponse, error) {
	out := new(DeleteMarkedNodesResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/DeleteMarkedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) StartDeleteNodesScheduler(ctx context.Context, in *StartDeleteNodesSchedulerRequest, opts ...grpc.CallOption) (*StartDeleteNodesSchedulerResponse, error) {
	out := new(StartDeleteNodesSchedulerResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/StartDeleteNodesScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) StopDeleteNodesScheduler(ctx context.Context, in *StopDeleteNodesSchedulerRequest, opts ...grpc.CallOption) (*StopDeleteNodesSchedulerResponse, error) {
	out := new(StopDeleteNodesSchedulerResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/StopDeleteNodesScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) ConfigureDeleteNodesScheduler(ctx context.Context, in *JobSettings, opts ...grpc.CallOption) (*ConfigureDeleteNodesSchedulerResponse, error) {
	out := new(ConfigureDeleteNodesSchedulerResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/ConfigureDeleteNodesScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) MarkMissingNodesForDeletion(ctx context.Context, in *MarkMissingNodesForDeletionRequest, opts ...grpc.CallOption) (*MarkMissingNodesForDeletionResponse, error) {
	out := new(MarkMissingNodesForDeletionResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/MarkMissingNodesForDeletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) ConfigureMissingNodesForDeletionScheduler(ctx context.Context, in *JobSettings, opts ...grpc.CallOption) (*ConfigureMissingNodesForDeletionSchedulerResponse, error) {
	out := new(ConfigureMissingNodesForDeletionSchedulerResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/ConfigureMissingNodesForDeletionScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) StartMissingNodesForDeletionScheduler(ctx context.Context, in *StartMissingNodesForDeletionSchedulerRequest, opts ...grpc.CallOption) (*StartMissingNodesForDeletionSchedulerResponse, error) {
	out := new(StartMissingNodesForDeletionSchedulerResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/StartMissingNodesForDeletionScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSchedulerServiceClient) StopMissingNodesForDeletionScheduler(ctx context.Context, in *StopMissingNodesForDeletionSchedulerRequest, opts ...grpc.CallOption) (*StopMissingNodesForDeletionSchedulerResponse, error) {
	out := new(StopMissingNodesForDeletionSchedulerResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.JobSchedulerService/StopMissingNodesForDeletionScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobSchedulerServiceServer is the server API for JobSchedulerService service.
type JobSchedulerServiceServer interface {
	GetStatusJobScheduler(context.Context, *JobSchedulerStatusRequest) (*JobSchedulerStatus, error)
	MarkNodesMissing(context.Context, *MarkNodesMissingRequest) (*MarkNodesMissingResponse, error)
	ConfigureNodesMissingScheduler(context.Context, *JobSettings) (*ConfigureNodesMissingSchedulerResponse, error)
	StartNodesMissingScheduler(context.Context, *StartNodesMissingSchedulerRequest) (*StartNodesMissingSchedulerResponse, error)
	StopNodesMissingScheduler(context.Context, *StopNodesMissingSchedulerRequest) (*StopNodesMissingSchedulerResponse, error)
	// DeleteNodesScheduler
	DeleteMarkedNodes(context.Context, *DeleteMarkedNodesRequest) (*DeleteMarkedNodesResponse, error)
	StartDeleteNodesScheduler(context.Context, *StartDeleteNodesSchedulerRequest) (*StartDeleteNodesSchedulerResponse, error)
	StopDeleteNodesScheduler(context.Context, *StopDeleteNodesSchedulerRequest) (*StopDeleteNodesSchedulerResponse, error)
	ConfigureDeleteNodesScheduler(context.Context, *JobSettings) (*ConfigureDeleteNodesSchedulerResponse, error)
	// MissingNodesForDeletionScheduler
	MarkMissingNodesForDeletion(context.Context, *MarkMissingNodesForDeletionRequest) (*MarkMissingNodesForDeletionResponse, error)
	ConfigureMissingNodesForDeletionScheduler(context.Context, *JobSettings) (*ConfigureMissingNodesForDeletionSchedulerResponse, error)
	StartMissingNodesForDeletionScheduler(context.Context, *StartMissingNodesForDeletionSchedulerRequest) (*StartMissingNodesForDeletionSchedulerResponse, error)
	StopMissingNodesForDeletionScheduler(context.Context, *StopMissingNodesForDeletionSchedulerRequest) (*StopMissingNodesForDeletionSchedulerResponse, error)
}

// UnimplementedJobSchedulerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJobSchedulerServiceServer struct {
}

func (*UnimplementedJobSchedulerServiceServer) GetStatusJobScheduler(context.Context, *JobSchedulerStatusRequest) (*JobSchedulerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusJobScheduler not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) MarkNodesMissing(context.Context, *MarkNodesMissingRequest) (*MarkNodesMissingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNodesMissing not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) ConfigureNodesMissingScheduler(context.Context, *JobSettings) (*ConfigureNodesMissingSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureNodesMissingScheduler not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) StartNodesMissingScheduler(context.Context, *StartNodesMissingSchedulerRequest) (*StartNodesMissingSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNodesMissingScheduler not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) StopNodesMissingScheduler(context.Context, *StopNodesMissingSchedulerRequest) (*StopNodesMissingSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNodesMissingScheduler not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) DeleteMarkedNodes(context.Context, *DeleteMarkedNodesRequest) (*DeleteMarkedNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMarkedNodes not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) StartDeleteNodesScheduler(context.Context, *StartDeleteNodesSchedulerRequest) (*StartDeleteNodesSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDeleteNodesScheduler not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) StopDeleteNodesScheduler(context.Context, *StopDeleteNodesSchedulerRequest) (*StopDeleteNodesSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDeleteNodesScheduler not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) ConfigureDeleteNodesScheduler(context.Context, *JobSettings) (*ConfigureDeleteNodesSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureDeleteNodesScheduler not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) MarkMissingNodesForDeletion(context.Context, *MarkMissingNodesForDeletionRequest) (*MarkMissingNodesForDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkMissingNodesForDeletion not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) ConfigureMissingNodesForDeletionScheduler(context.Context, *JobSettings) (*ConfigureMissingNodesForDeletionSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureMissingNodesForDeletionScheduler not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) StartMissingNodesForDeletionScheduler(context.Context, *StartMissingNodesForDeletionSchedulerRequest) (*StartMissingNodesForDeletionSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMissingNodesForDeletionScheduler not implemented")
}
func (*UnimplementedJobSchedulerServiceServer) StopMissingNodesForDeletionScheduler(context.Context, *StopMissingNodesForDeletionSchedulerRequest) (*StopMissingNodesForDeletionSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMissingNodesForDeletionScheduler not implemented")
}

func RegisterJobSchedulerServiceServer(s *grpc.Server, srv JobSchedulerServiceServer) {
	s.RegisterService(&_JobSchedulerService_serviceDesc, srv)
}

func _JobSchedulerService_GetStatusJobScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSchedulerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).GetStatusJobScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/GetStatusJobScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).GetStatusJobScheduler(ctx, req.(*JobSchedulerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_MarkNodesMissing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNodesMissingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).MarkNodesMissing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/MarkNodesMissing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).MarkNodesMissing(ctx, req.(*MarkNodesMissingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_ConfigureNodesMissingScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).ConfigureNodesMissingScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/ConfigureNodesMissingScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).ConfigureNodesMissingScheduler(ctx, req.(*JobSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_StartNodesMissingScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNodesMissingSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).StartNodesMissingScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/StartNodesMissingScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).StartNodesMissingScheduler(ctx, req.(*StartNodesMissingSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_StopNodesMissingScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopNodesMissingSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).StopNodesMissingScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/StopNodesMissingScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).StopNodesMissingScheduler(ctx, req.(*StopNodesMissingSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_DeleteMarkedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMarkedNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).DeleteMarkedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/DeleteMarkedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).DeleteMarkedNodes(ctx, req.(*DeleteMarkedNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_StartDeleteNodesScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDeleteNodesSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).StartDeleteNodesScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/StartDeleteNodesScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).StartDeleteNodesScheduler(ctx, req.(*StartDeleteNodesSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_StopDeleteNodesScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDeleteNodesSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).StopDeleteNodesScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/StopDeleteNodesScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).StopDeleteNodesScheduler(ctx, req.(*StopDeleteNodesSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_ConfigureDeleteNodesScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).ConfigureDeleteNodesScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/ConfigureDeleteNodesScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).ConfigureDeleteNodesScheduler(ctx, req.(*JobSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_MarkMissingNodesForDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkMissingNodesForDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).MarkMissingNodesForDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/MarkMissingNodesForDeletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).MarkMissingNodesForDeletion(ctx, req.(*MarkMissingNodesForDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_ConfigureMissingNodesForDeletionScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).ConfigureMissingNodesForDeletionScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/ConfigureMissingNodesForDeletionScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).ConfigureMissingNodesForDeletionScheduler(ctx, req.(*JobSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_StartMissingNodesForDeletionScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMissingNodesForDeletionSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).StartMissingNodesForDeletionScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/StartMissingNodesForDeletionScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).StartMissingNodesForDeletionScheduler(ctx, req.(*StartMissingNodesForDeletionSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSchedulerService_StopMissingNodesForDeletionScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMissingNodesForDeletionSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServiceServer).StopMissingNodesForDeletionScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.JobSchedulerService/StopMissingNodesForDeletionScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServiceServer).StopMissingNodesForDeletionScheduler(ctx, req.(*StopMissingNodesForDeletionSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobSchedulerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.ingest.JobSchedulerService",
	HandlerType: (*JobSchedulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatusJobScheduler",
			Handler:    _JobSchedulerService_GetStatusJobScheduler_Handler,
		},
		{
			MethodName: "MarkNodesMissing",
			Handler:    _JobSchedulerService_MarkNodesMissing_Handler,
		},
		{
			MethodName: "ConfigureNodesMissingScheduler",
			Handler:    _JobSchedulerService_ConfigureNodesMissingScheduler_Handler,
		},
		{
			MethodName: "StartNodesMissingScheduler",
			Handler:    _JobSchedulerService_StartNodesMissingScheduler_Handler,
		},
		{
			MethodName: "StopNodesMissingScheduler",
			Handler:    _JobSchedulerService_StopNodesMissingScheduler_Handler,
		},
		{
			MethodName: "DeleteMarkedNodes",
			Handler:    _JobSchedulerService_DeleteMarkedNodes_Handler,
		},
		{
			MethodName: "StartDeleteNodesScheduler",
			Handler:    _JobSchedulerService_StartDeleteNodesScheduler_Handler,
		},
		{
			MethodName: "StopDeleteNodesScheduler",
			Handler:    _JobSchedulerService_StopDeleteNodesScheduler_Handler,
		},
		{
			MethodName: "ConfigureDeleteNodesScheduler",
			Handler:    _JobSchedulerService_ConfigureDeleteNodesScheduler_Handler,
		},
		{
			MethodName: "MarkMissingNodesForDeletion",
			Handler:    _JobSchedulerService_MarkMissingNodesForDeletion_Handler,
		},
		{
			MethodName: "ConfigureMissingNodesForDeletionScheduler",
			Handler:    _JobSchedulerService_ConfigureMissingNodesForDeletionScheduler_Handler,
		},
		{
			MethodName: "StartMissingNodesForDeletionScheduler",
			Handler:    _JobSchedulerService_StartMissingNodesForDeletionScheduler_Handler,
		},
		{
			MethodName: "StopMissingNodesForDeletionScheduler",
			Handler:    _JobSchedulerService_StopMissingNodesForDeletionScheduler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interservice/ingest/job_scheduler.proto",
}
