// Code generated by MockGen. DO NOT EDIT.
// Source: ingest/chef.pb.go

// Package ingest is a generated GoMock package.
package ingest

import (
	request "github.com/chef/automate/api/external/ingest/request"
	response "github.com/chef/automate/api/external/ingest/response"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockChefIngesterClient is a mock of ChefIngesterClient interface
type MockChefIngesterClient struct {
	ctrl     *gomock.Controller
	recorder *MockChefIngesterClientMockRecorder
}

// MockChefIngesterClientMockRecorder is the mock recorder for MockChefIngesterClient
type MockChefIngesterClientMockRecorder struct {
	mock *MockChefIngesterClient
}

// NewMockChefIngesterClient creates a new mock instance
func NewMockChefIngesterClient(ctrl *gomock.Controller) *MockChefIngesterClient {
	mock := &MockChefIngesterClient{ctrl: ctrl}
	mock.recorder = &MockChefIngesterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChefIngesterClient) EXPECT() *MockChefIngesterClientMockRecorder {
	return m.recorder
}

// ProcessChefRun mocks base method
func (m *MockChefIngesterClient) ProcessChefRun(ctx context.Context, in *request.Run, opts ...grpc.CallOption) (*response.ProcessChefRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessChefRun", varargs...)
	ret0, _ := ret[0].(*response.ProcessChefRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessChefRun indicates an expected call of ProcessChefRun
func (mr *MockChefIngesterClientMockRecorder) ProcessChefRun(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessChefRun", reflect.TypeOf((*MockChefIngesterClient)(nil).ProcessChefRun), varargs...)
}

// ProcessChefAction mocks base method
func (m *MockChefIngesterClient) ProcessChefAction(ctx context.Context, in *request.Action, opts ...grpc.CallOption) (*response.ProcessChefActionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessChefAction", varargs...)
	ret0, _ := ret[0].(*response.ProcessChefActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessChefAction indicates an expected call of ProcessChefAction
func (mr *MockChefIngesterClientMockRecorder) ProcessChefAction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessChefAction", reflect.TypeOf((*MockChefIngesterClient)(nil).ProcessChefAction), varargs...)
}

// ProcessLivenessPing mocks base method
func (m *MockChefIngesterClient) ProcessLivenessPing(ctx context.Context, in *request.Liveness, opts ...grpc.CallOption) (*response.ProcessLivenessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessLivenessPing", varargs...)
	ret0, _ := ret[0].(*response.ProcessLivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessLivenessPing indicates an expected call of ProcessLivenessPing
func (mr *MockChefIngesterClientMockRecorder) ProcessLivenessPing(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLivenessPing", reflect.TypeOf((*MockChefIngesterClient)(nil).ProcessLivenessPing), varargs...)
}

// ProcessMultipleNodeDeletes mocks base method
func (m *MockChefIngesterClient) ProcessMultipleNodeDeletes(ctx context.Context, in *request.MultipleNodeDeleteRequest, opts ...grpc.CallOption) (*response.ProcessMultipleNodeDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessMultipleNodeDeletes", varargs...)
	ret0, _ := ret[0].(*response.ProcessMultipleNodeDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessMultipleNodeDeletes indicates an expected call of ProcessMultipleNodeDeletes
func (mr *MockChefIngesterClientMockRecorder) ProcessMultipleNodeDeletes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMultipleNodeDeletes", reflect.TypeOf((*MockChefIngesterClient)(nil).ProcessMultipleNodeDeletes), varargs...)
}

// ProcessNodeDelete mocks base method
func (m *MockChefIngesterClient) ProcessNodeDelete(ctx context.Context, in *request.Delete, opts ...grpc.CallOption) (*response.ProcessNodeDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessNodeDelete", varargs...)
	ret0, _ := ret[0].(*response.ProcessNodeDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessNodeDelete indicates an expected call of ProcessNodeDelete
func (mr *MockChefIngesterClientMockRecorder) ProcessNodeDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNodeDelete", reflect.TypeOf((*MockChefIngesterClient)(nil).ProcessNodeDelete), varargs...)
}

// GetVersion mocks base method
func (m *MockChefIngesterClient) GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*Version, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockChefIngesterClientMockRecorder) GetVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockChefIngesterClient)(nil).GetVersion), varargs...)
}

// MockChefIngesterServer is a mock of ChefIngesterServer interface
type MockChefIngesterServer struct {
	ctrl     *gomock.Controller
	recorder *MockChefIngesterServerMockRecorder
}

// MockChefIngesterServerMockRecorder is the mock recorder for MockChefIngesterServer
type MockChefIngesterServerMockRecorder struct {
	mock *MockChefIngesterServer
}

// NewMockChefIngesterServer creates a new mock instance
func NewMockChefIngesterServer(ctrl *gomock.Controller) *MockChefIngesterServer {
	mock := &MockChefIngesterServer{ctrl: ctrl}
	mock.recorder = &MockChefIngesterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChefIngesterServer) EXPECT() *MockChefIngesterServerMockRecorder {
	return m.recorder
}

// ProcessChefRun mocks base method
func (m *MockChefIngesterServer) ProcessChefRun(arg0 context.Context, arg1 *request.Run) (*response.ProcessChefRunResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessChefRun", arg0, arg1)
	ret0, _ := ret[0].(*response.ProcessChefRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessChefRun indicates an expected call of ProcessChefRun
func (mr *MockChefIngesterServerMockRecorder) ProcessChefRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessChefRun", reflect.TypeOf((*MockChefIngesterServer)(nil).ProcessChefRun), arg0, arg1)
}

// ProcessChefAction mocks base method
func (m *MockChefIngesterServer) ProcessChefAction(arg0 context.Context, arg1 *request.Action) (*response.ProcessChefActionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessChefAction", arg0, arg1)
	ret0, _ := ret[0].(*response.ProcessChefActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessChefAction indicates an expected call of ProcessChefAction
func (mr *MockChefIngesterServerMockRecorder) ProcessChefAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessChefAction", reflect.TypeOf((*MockChefIngesterServer)(nil).ProcessChefAction), arg0, arg1)
}

// ProcessLivenessPing mocks base method
func (m *MockChefIngesterServer) ProcessLivenessPing(arg0 context.Context, arg1 *request.Liveness) (*response.ProcessLivenessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLivenessPing", arg0, arg1)
	ret0, _ := ret[0].(*response.ProcessLivenessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessLivenessPing indicates an expected call of ProcessLivenessPing
func (mr *MockChefIngesterServerMockRecorder) ProcessLivenessPing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLivenessPing", reflect.TypeOf((*MockChefIngesterServer)(nil).ProcessLivenessPing), arg0, arg1)
}

// ProcessMultipleNodeDeletes mocks base method
func (m *MockChefIngesterServer) ProcessMultipleNodeDeletes(arg0 context.Context, arg1 *request.MultipleNodeDeleteRequest) (*response.ProcessMultipleNodeDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMultipleNodeDeletes", arg0, arg1)
	ret0, _ := ret[0].(*response.ProcessMultipleNodeDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessMultipleNodeDeletes indicates an expected call of ProcessMultipleNodeDeletes
func (mr *MockChefIngesterServerMockRecorder) ProcessMultipleNodeDeletes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMultipleNodeDeletes", reflect.TypeOf((*MockChefIngesterServer)(nil).ProcessMultipleNodeDeletes), arg0, arg1)
}

// ProcessNodeDelete mocks base method
func (m *MockChefIngesterServer) ProcessNodeDelete(arg0 context.Context, arg1 *request.Delete) (*response.ProcessNodeDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessNodeDelete", arg0, arg1)
	ret0, _ := ret[0].(*response.ProcessNodeDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessNodeDelete indicates an expected call of ProcessNodeDelete
func (mr *MockChefIngesterServerMockRecorder) ProcessNodeDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNodeDelete", reflect.TypeOf((*MockChefIngesterServer)(nil).ProcessNodeDelete), arg0, arg1)
}

// GetVersion mocks base method
func (m *MockChefIngesterServer) GetVersion(arg0 context.Context, arg1 *VersionRequest) (*Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0, arg1)
	ret0, _ := ret[0].(*Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockChefIngesterServerMockRecorder) GetVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockChefIngesterServer)(nil).GetVersion), arg0, arg1)
}
