// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.0
// source: interservice/ingest/automate_event.proto

package ingest

import (
	context "context"
	event "github.com/chef/automate/api/interservice/event"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProjectUpdateStatusReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectUpdateStatusReq) Reset() {
	*x = ProjectUpdateStatusReq{}
	mi := &file_interservice_ingest_automate_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectUpdateStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectUpdateStatusReq) ProtoMessage() {}

func (x *ProjectUpdateStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_automate_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectUpdateStatusReq.ProtoReflect.Descriptor instead.
func (*ProjectUpdateStatusReq) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_automate_event_proto_rawDescGZIP(), []int{0}
}

type ProjectUpdateStatusResp struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	State                 string                 `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty" toml:"state,omitempty" mapstructure:"state,omitempty"`
	EstimatedTimeComplete *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=estimated_time_complete,json=estimatedTimeComplete,proto3" json:"estimated_time_complete,omitempty" toml:"estimated_time_complete,omitempty" mapstructure:"estimated_time_complete,omitempty"`
	PercentageComplete    float32                `protobuf:"fixed32,3,opt,name=percentage_complete,json=percentageComplete,proto3" json:"percentage_complete,omitempty" toml:"percentage_complete,omitempty" mapstructure:"percentage_complete,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ProjectUpdateStatusResp) Reset() {
	*x = ProjectUpdateStatusResp{}
	mi := &file_interservice_ingest_automate_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectUpdateStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectUpdateStatusResp) ProtoMessage() {}

func (x *ProjectUpdateStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_ingest_automate_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectUpdateStatusResp.ProtoReflect.Descriptor instead.
func (*ProjectUpdateStatusResp) Descriptor() ([]byte, []int) {
	return file_interservice_ingest_automate_event_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectUpdateStatusResp) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ProjectUpdateStatusResp) GetEstimatedTimeComplete() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedTimeComplete
	}
	return nil
}

func (x *ProjectUpdateStatusResp) GetPercentageComplete() float32 {
	if x != nil {
		return x.PercentageComplete
	}
	return 0
}

var File_interservice_ingest_automate_event_proto protoreflect.FileDescriptor

const file_interservice_ingest_automate_event_proto_rawDesc = "" +
	"\n" +
	"(interservice/ingest/automate_event.proto\x12\x1bchef.automate.domain.ingest\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1einterservice/event/event.proto\"\x18\n" +
	"\x16ProjectUpdateStatusReq\"\xb4\x01\n" +
	"\x17ProjectUpdateStatusResp\x12\x14\n" +
	"\x05state\x18\x01 \x01(\tR\x05state\x12R\n" +
	"\x17estimated_time_complete\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x15estimatedTimeComplete\x12/\n" +
	"\x13percentage_complete\x18\x03 \x01(\x02R\x12percentageComplete2\x80\x02\n" +
	"\x13EventHandlerService\x12f\n" +
	"\vHandleEvent\x12(.chef.automate.domain.event.api.EventMsg\x1a-.chef.automate.domain.event.api.EventResponse\x12\x80\x01\n" +
	"\x13ProjectUpdateStatus\x123.chef.automate.domain.ingest.ProjectUpdateStatusReq\x1a4.chef.automate.domain.ingest.ProjectUpdateStatusRespB2Z0github.com/chef/automate/api/interservice/ingestb\x06proto3"

var (
	file_interservice_ingest_automate_event_proto_rawDescOnce sync.Once
	file_interservice_ingest_automate_event_proto_rawDescData []byte
)

func file_interservice_ingest_automate_event_proto_rawDescGZIP() []byte {
	file_interservice_ingest_automate_event_proto_rawDescOnce.Do(func() {
		file_interservice_ingest_automate_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_interservice_ingest_automate_event_proto_rawDesc), len(file_interservice_ingest_automate_event_proto_rawDesc)))
	})
	return file_interservice_ingest_automate_event_proto_rawDescData
}

var file_interservice_ingest_automate_event_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_interservice_ingest_automate_event_proto_goTypes = []any{
	(*ProjectUpdateStatusReq)(nil),  // 0: chef.automate.domain.ingest.ProjectUpdateStatusReq
	(*ProjectUpdateStatusResp)(nil), // 1: chef.automate.domain.ingest.ProjectUpdateStatusResp
	(*timestamppb.Timestamp)(nil),   // 2: google.protobuf.Timestamp
	(*event.EventMsg)(nil),          // 3: chef.automate.domain.event.api.EventMsg
	(*event.EventResponse)(nil),     // 4: chef.automate.domain.event.api.EventResponse
}
var file_interservice_ingest_automate_event_proto_depIdxs = []int32{
	2, // 0: chef.automate.domain.ingest.ProjectUpdateStatusResp.estimated_time_complete:type_name -> google.protobuf.Timestamp
	3, // 1: chef.automate.domain.ingest.EventHandlerService.HandleEvent:input_type -> chef.automate.domain.event.api.EventMsg
	0, // 2: chef.automate.domain.ingest.EventHandlerService.ProjectUpdateStatus:input_type -> chef.automate.domain.ingest.ProjectUpdateStatusReq
	4, // 3: chef.automate.domain.ingest.EventHandlerService.HandleEvent:output_type -> chef.automate.domain.event.api.EventResponse
	1, // 4: chef.automate.domain.ingest.EventHandlerService.ProjectUpdateStatus:output_type -> chef.automate.domain.ingest.ProjectUpdateStatusResp
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_interservice_ingest_automate_event_proto_init() }
func file_interservice_ingest_automate_event_proto_init() {
	if File_interservice_ingest_automate_event_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_interservice_ingest_automate_event_proto_rawDesc), len(file_interservice_ingest_automate_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_ingest_automate_event_proto_goTypes,
		DependencyIndexes: file_interservice_ingest_automate_event_proto_depIdxs,
		MessageInfos:      file_interservice_ingest_automate_event_proto_msgTypes,
	}.Build()
	File_interservice_ingest_automate_event_proto = out.File
	file_interservice_ingest_automate_event_proto_goTypes = nil
	file_interservice_ingest_automate_event_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventHandlerServiceClient is the client API for EventHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventHandlerServiceClient interface {
	HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error)
	ProjectUpdateStatus(ctx context.Context, in *ProjectUpdateStatusReq, opts ...grpc.CallOption) (*ProjectUpdateStatusResp, error)
}

type eventHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventHandlerServiceClient(cc grpc.ClientConnInterface) EventHandlerServiceClient {
	return &eventHandlerServiceClient{cc}
}

func (c *eventHandlerServiceClient) HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error) {
	out := new(event.EventResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.EventHandlerService/HandleEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerServiceClient) ProjectUpdateStatus(ctx context.Context, in *ProjectUpdateStatusReq, opts ...grpc.CallOption) (*ProjectUpdateStatusResp, error) {
	out := new(ProjectUpdateStatusResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.ingest.EventHandlerService/ProjectUpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventHandlerServiceServer is the server API for EventHandlerService service.
type EventHandlerServiceServer interface {
	HandleEvent(context.Context, *event.EventMsg) (*event.EventResponse, error)
	ProjectUpdateStatus(context.Context, *ProjectUpdateStatusReq) (*ProjectUpdateStatusResp, error)
}

// UnimplementedEventHandlerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventHandlerServiceServer struct {
}

func (*UnimplementedEventHandlerServiceServer) HandleEvent(context.Context, *event.EventMsg) (*event.EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleEvent not implemented")
}
func (*UnimplementedEventHandlerServiceServer) ProjectUpdateStatus(context.Context, *ProjectUpdateStatusReq) (*ProjectUpdateStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectUpdateStatus not implemented")
}

func RegisterEventHandlerServiceServer(s *grpc.Server, srv EventHandlerServiceServer) {
	s.RegisterService(&_EventHandlerService_serviceDesc, srv)
}

func _EventHandlerService_HandleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.EventMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServiceServer).HandleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.EventHandlerService/HandleEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServiceServer).HandleEvent(ctx, req.(*event.EventMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandlerService_ProjectUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectUpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServiceServer).ProjectUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.ingest.EventHandlerService/ProjectUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServiceServer).ProjectUpdateStatus(ctx, req.(*ProjectUpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventHandlerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.ingest.EventHandlerService",
	HandlerType: (*EventHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleEvent",
			Handler:    _EventHandlerService_HandleEvent_Handler,
		},
		{
			MethodName: "ProjectUpdateStatus",
			Handler:    _EventHandlerService_ProjectUpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interservice/ingest/automate_event.proto",
}
