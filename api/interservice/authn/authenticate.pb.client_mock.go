// Code generated by MockGen. DO NOT EDIT.
// Source: authn/authenticate.pb.go

// Package authn is a generated GoMock package.
package authn

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthenticationClient is a mock of AuthenticationClient interface
type MockAuthenticationClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationClientMockRecorder
}

// MockAuthenticationClientMockRecorder is the mock recorder for MockAuthenticationClient
type MockAuthenticationClientMockRecorder struct {
	mock *MockAuthenticationClient
}

// NewMockAuthenticationClient creates a new mock instance
func NewMockAuthenticationClient(ctrl *gomock.Controller) *MockAuthenticationClient {
	mock := &MockAuthenticationClient{ctrl: ctrl}
	mock.recorder = &MockAuthenticationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticationClient) EXPECT() *MockAuthenticationClientMockRecorder {
	return m.recorder
}

// Authenticate mocks base method
func (m *MockAuthenticationClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authenticate", varargs...)
	ret0, _ := ret[0].(*AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockAuthenticationClientMockRecorder) Authenticate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationClient)(nil).Authenticate), varargs...)
}

// MockAuthenticationServer is a mock of AuthenticationServer interface
type MockAuthenticationServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationServerMockRecorder
}

// MockAuthenticationServerMockRecorder is the mock recorder for MockAuthenticationServer
type MockAuthenticationServerMockRecorder struct {
	mock *MockAuthenticationServer
}

// NewMockAuthenticationServer creates a new mock instance
func NewMockAuthenticationServer(ctrl *gomock.Controller) *MockAuthenticationServer {
	mock := &MockAuthenticationServer{ctrl: ctrl}
	mock.recorder = &MockAuthenticationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticationServer) EXPECT() *MockAuthenticationServerMockRecorder {
	return m.recorder
}

// Authenticate mocks base method
func (m *MockAuthenticationServer) Authenticate(arg0 context.Context, arg1 *AuthenticateRequest) (*AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(*AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockAuthenticationServerMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticationServer)(nil).Authenticate), arg0, arg1)
}
