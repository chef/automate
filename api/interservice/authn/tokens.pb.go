// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.0
// source: interservice/authn/tokens.proto

package authn

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTokenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Active        bool                   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty" toml:"active,omitempty" mapstructure:"active,omitempty"`
	Projects      []string               `protobuf:"bytes,4,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTokenReq) Reset() {
	*x = CreateTokenReq{}
	mi := &file_interservice_authn_tokens_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenReq) ProtoMessage() {}

func (x *CreateTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authn_tokens_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenReq.ProtoReflect.Descriptor instead.
func (*CreateTokenReq) Descriptor() ([]byte, []int) {
	return file_interservice_authn_tokens_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTokenReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateTokenReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTokenReq) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CreateTokenReq) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type CreateTokenWithValueReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Active        bool                   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty" toml:"active,omitempty" mapstructure:"active,omitempty"`
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty" toml:"value,omitempty" mapstructure:"value,omitempty"`
	Projects      []string               `protobuf:"bytes,5,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTokenWithValueReq) Reset() {
	*x = CreateTokenWithValueReq{}
	mi := &file_interservice_authn_tokens_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTokenWithValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenWithValueReq) ProtoMessage() {}

func (x *CreateTokenWithValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authn_tokens_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenWithValueReq.ProtoReflect.Descriptor instead.
func (*CreateTokenWithValueReq) Descriptor() ([]byte, []int) {
	return file_interservice_authn_tokens_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTokenWithValueReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateTokenWithValueReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTokenWithValueReq) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CreateTokenWithValueReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateTokenWithValueReq) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type UpdateTokenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Active        bool                   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty" toml:"active,omitempty" mapstructure:"active,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Projects      []string               `protobuf:"bytes,4,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTokenReq) Reset() {
	*x = UpdateTokenReq{}
	mi := &file_interservice_authn_tokens_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenReq) ProtoMessage() {}

func (x *UpdateTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authn_tokens_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenReq.ProtoReflect.Descriptor instead.
func (*UpdateTokenReq) Descriptor() ([]byte, []int) {
	return file_interservice_authn_tokens_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTokenReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTokenReq) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *UpdateTokenReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTokenReq) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty" toml:"value,omitempty" mapstructure:"value,omitempty"`
	Active        bool                   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty" toml:"active,omitempty" mapstructure:"active,omitempty"`
	Created       string                 `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty" toml:"created,omitempty" mapstructure:"created,omitempty"`
	Updated       string                 `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty" toml:"updated,omitempty" mapstructure:"updated,omitempty"`
	Projects      []string               `protobuf:"bytes,7,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Token) Reset() {
	*x = Token{}
	mi := &file_interservice_authn_tokens_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authn_tokens_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_interservice_authn_tokens_proto_rawDescGZIP(), []int{3}
}

func (x *Token) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Token) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Token) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Token) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Token) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Token) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *Token) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type Tokens struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tokens        []*Token               `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty" toml:"tokens,omitempty" mapstructure:"tokens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tokens) Reset() {
	*x = Tokens{}
	mi := &file_interservice_authn_tokens_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tokens) ProtoMessage() {}

func (x *Tokens) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authn_tokens_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tokens.ProtoReflect.Descriptor instead.
func (*Tokens) Descriptor() ([]byte, []int) {
	return file_interservice_authn_tokens_proto_rawDescGZIP(), []int{4}
}

func (x *Tokens) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" toml:"value,omitempty" mapstructure:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_interservice_authn_tokens_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authn_tokens_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_interservice_authn_tokens_proto_rawDescGZIP(), []int{5}
}

func (x *Value) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetTokenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokenReq) Reset() {
	*x = GetTokenReq{}
	mi := &file_interservice_authn_tokens_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenReq) ProtoMessage() {}

func (x *GetTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authn_tokens_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenReq.ProtoReflect.Descriptor instead.
func (*GetTokenReq) Descriptor() ([]byte, []int) {
	return file_interservice_authn_tokens_proto_rawDescGZIP(), []int{6}
}

func (x *GetTokenReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTokensReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTokensReq) Reset() {
	*x = GetTokensReq{}
	mi := &file_interservice_authn_tokens_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTokensReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokensReq) ProtoMessage() {}

func (x *GetTokensReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authn_tokens_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokensReq.ProtoReflect.Descriptor instead.
func (*GetTokensReq) Descriptor() ([]byte, []int) {
	return file_interservice_authn_tokens_proto_rawDescGZIP(), []int{7}
}

type DeleteTokenReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTokenReq) Reset() {
	*x = DeleteTokenReq{}
	mi := &file_interservice_authn_tokens_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTokenReq) ProtoMessage() {}

func (x *DeleteTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authn_tokens_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTokenReq.ProtoReflect.Descriptor instead.
func (*DeleteTokenReq) Descriptor() ([]byte, []int) {
	return file_interservice_authn_tokens_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTokenReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTokenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTokenResp) Reset() {
	*x = DeleteTokenResp{}
	mi := &file_interservice_authn_tokens_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTokenResp) ProtoMessage() {}

func (x *DeleteTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_authn_tokens_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTokenResp.ProtoReflect.Descriptor instead.
func (*DeleteTokenResp) Descriptor() ([]byte, []int) {
	return file_interservice_authn_tokens_proto_rawDescGZIP(), []int{9}
}

var File_interservice_authn_tokens_proto protoreflect.FileDescriptor

const file_interservice_authn_tokens_proto_rawDesc = "" +
	"\n" +
	"\x1finterservice/authn/tokens.proto\x12\x1achef.automate.domain.authn\x1a\x1cgoogle/api/annotations.proto\x1a\x17validate/validate.proto\"\xa5\x01\n" +
	"\x0eCreateTokenReq\x12)\n" +
	"\x02id\x18\x01 \x01(\tB\x19\xfaB\x16r\x142\x12^[a-z0-9-_]{1,64}$R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06active\x18\x03 \x01(\bR\x06active\x12<\n" +
	"\bprojects\x18\x04 \x03(\tB \xfaB\x1d\x92\x01\x1a\x18\x01\"\x16r\x142\x12^[a-z0-9-_]{1,64}$R\bprojects\"\xa9\x01\n" +
	"\x17CreateTokenWithValueReq\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06active\x18\x03 \x01(\bR\x06active\x12\x14\n" +
	"\x05value\x18\x04 \x01(\tR\x05value\x12<\n" +
	"\bprojects\x18\x05 \x03(\tB \xfaB\x1d\x92\x01\x1a\x18\x01\"\x16r\x142\x12^[a-z0-9-_]{1,64}$R\bprojects\"\x8a\x01\n" +
	"\x0eUpdateTokenReq\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06active\x18\x02 \x01(\bR\x06active\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12<\n" +
	"\bprojects\x18\x04 \x03(\tB \xfaB\x1d\x92\x01\x1a\x18\x01\"\x16r\x142\x12^[a-z0-9-_]{1,64}$R\bprojects\"\xa9\x01\n" +
	"\x05Token\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x12\x16\n" +
	"\x06active\x18\x04 \x01(\bR\x06active\x12\x18\n" +
	"\acreated\x18\x05 \x01(\tR\acreated\x12\x18\n" +
	"\aupdated\x18\x06 \x01(\tR\aupdated\x12\x1a\n" +
	"\bprojects\x18\a \x03(\tR\bprojects\"C\n" +
	"\x06Tokens\x129\n" +
	"\x06tokens\x18\x01 \x03(\v2!.chef.automate.domain.authn.TokenR\x06tokens\"\x1d\n" +
	"\x05Value\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\x1d\n" +
	"\vGetTokenReq\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x0e\n" +
	"\fGetTokensReq\" \n" +
	"\x0eDeleteTokenReq\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x11\n" +
	"\x0fDeleteTokenResp2\xe6\x04\n" +
	"\x11TokensMgmtService\x12[\n" +
	"\tGetTokens\x12(.chef.automate.domain.authn.GetTokensReq\x1a\".chef.automate.domain.authn.Tokens\"\x00\x12^\n" +
	"\vCreateToken\x12*.chef.automate.domain.authn.CreateTokenReq\x1a!.chef.automate.domain.authn.Token\"\x00\x12p\n" +
	"\x14CreateTokenWithValue\x123.chef.automate.domain.authn.CreateTokenWithValueReq\x1a!.chef.automate.domain.authn.Token\"\x00\x12^\n" +
	"\vUpdateToken\x12*.chef.automate.domain.authn.UpdateTokenReq\x1a!.chef.automate.domain.authn.Token\"\x00\x12X\n" +
	"\bGetToken\x12'.chef.automate.domain.authn.GetTokenReq\x1a!.chef.automate.domain.authn.Token\"\x00\x12h\n" +
	"\vDeleteToken\x12*.chef.automate.domain.authn.DeleteTokenReq\x1a+.chef.automate.domain.authn.DeleteTokenResp\"\x00B1Z/github.com/chef/automate/api/interservice/authnb\x06proto3"

var (
	file_interservice_authn_tokens_proto_rawDescOnce sync.Once
	file_interservice_authn_tokens_proto_rawDescData []byte
)

func file_interservice_authn_tokens_proto_rawDescGZIP() []byte {
	file_interservice_authn_tokens_proto_rawDescOnce.Do(func() {
		file_interservice_authn_tokens_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_interservice_authn_tokens_proto_rawDesc), len(file_interservice_authn_tokens_proto_rawDesc)))
	})
	return file_interservice_authn_tokens_proto_rawDescData
}

var file_interservice_authn_tokens_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_interservice_authn_tokens_proto_goTypes = []any{
	(*CreateTokenReq)(nil),          // 0: chef.automate.domain.authn.CreateTokenReq
	(*CreateTokenWithValueReq)(nil), // 1: chef.automate.domain.authn.CreateTokenWithValueReq
	(*UpdateTokenReq)(nil),          // 2: chef.automate.domain.authn.UpdateTokenReq
	(*Token)(nil),                   // 3: chef.automate.domain.authn.Token
	(*Tokens)(nil),                  // 4: chef.automate.domain.authn.Tokens
	(*Value)(nil),                   // 5: chef.automate.domain.authn.Value
	(*GetTokenReq)(nil),             // 6: chef.automate.domain.authn.GetTokenReq
	(*GetTokensReq)(nil),            // 7: chef.automate.domain.authn.GetTokensReq
	(*DeleteTokenReq)(nil),          // 8: chef.automate.domain.authn.DeleteTokenReq
	(*DeleteTokenResp)(nil),         // 9: chef.automate.domain.authn.DeleteTokenResp
}
var file_interservice_authn_tokens_proto_depIdxs = []int32{
	3, // 0: chef.automate.domain.authn.Tokens.tokens:type_name -> chef.automate.domain.authn.Token
	7, // 1: chef.automate.domain.authn.TokensMgmtService.GetTokens:input_type -> chef.automate.domain.authn.GetTokensReq
	0, // 2: chef.automate.domain.authn.TokensMgmtService.CreateToken:input_type -> chef.automate.domain.authn.CreateTokenReq
	1, // 3: chef.automate.domain.authn.TokensMgmtService.CreateTokenWithValue:input_type -> chef.automate.domain.authn.CreateTokenWithValueReq
	2, // 4: chef.automate.domain.authn.TokensMgmtService.UpdateToken:input_type -> chef.automate.domain.authn.UpdateTokenReq
	6, // 5: chef.automate.domain.authn.TokensMgmtService.GetToken:input_type -> chef.automate.domain.authn.GetTokenReq
	8, // 6: chef.automate.domain.authn.TokensMgmtService.DeleteToken:input_type -> chef.automate.domain.authn.DeleteTokenReq
	4, // 7: chef.automate.domain.authn.TokensMgmtService.GetTokens:output_type -> chef.automate.domain.authn.Tokens
	3, // 8: chef.automate.domain.authn.TokensMgmtService.CreateToken:output_type -> chef.automate.domain.authn.Token
	3, // 9: chef.automate.domain.authn.TokensMgmtService.CreateTokenWithValue:output_type -> chef.automate.domain.authn.Token
	3, // 10: chef.automate.domain.authn.TokensMgmtService.UpdateToken:output_type -> chef.automate.domain.authn.Token
	3, // 11: chef.automate.domain.authn.TokensMgmtService.GetToken:output_type -> chef.automate.domain.authn.Token
	9, // 12: chef.automate.domain.authn.TokensMgmtService.DeleteToken:output_type -> chef.automate.domain.authn.DeleteTokenResp
	7, // [7:13] is the sub-list for method output_type
	1, // [1:7] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_interservice_authn_tokens_proto_init() }
func file_interservice_authn_tokens_proto_init() {
	if File_interservice_authn_tokens_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_interservice_authn_tokens_proto_rawDesc), len(file_interservice_authn_tokens_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_authn_tokens_proto_goTypes,
		DependencyIndexes: file_interservice_authn_tokens_proto_depIdxs,
		MessageInfos:      file_interservice_authn_tokens_proto_msgTypes,
	}.Build()
	File_interservice_authn_tokens_proto = out.File
	file_interservice_authn_tokens_proto_goTypes = nil
	file_interservice_authn_tokens_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TokensMgmtServiceClient is the client API for TokensMgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokensMgmtServiceClient interface {
	GetTokens(ctx context.Context, in *GetTokensReq, opts ...grpc.CallOption) (*Tokens, error)
	CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*Token, error)
	CreateTokenWithValue(ctx context.Context, in *CreateTokenWithValueReq, opts ...grpc.CallOption) (*Token, error)
	UpdateToken(ctx context.Context, in *UpdateTokenReq, opts ...grpc.CallOption) (*Token, error)
	GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*Token, error)
	DeleteToken(ctx context.Context, in *DeleteTokenReq, opts ...grpc.CallOption) (*DeleteTokenResp, error)
}

type tokensMgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokensMgmtServiceClient(cc grpc.ClientConnInterface) TokensMgmtServiceClient {
	return &tokensMgmtServiceClient{cc}
}

func (c *tokensMgmtServiceClient) GetTokens(ctx context.Context, in *GetTokensReq, opts ...grpc.CallOption) (*Tokens, error) {
	out := new(Tokens)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authn.TokensMgmtService/GetTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensMgmtServiceClient) CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authn.TokensMgmtService/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensMgmtServiceClient) CreateTokenWithValue(ctx context.Context, in *CreateTokenWithValueReq, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authn.TokensMgmtService/CreateTokenWithValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensMgmtServiceClient) UpdateToken(ctx context.Context, in *UpdateTokenReq, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authn.TokensMgmtService/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensMgmtServiceClient) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authn.TokensMgmtService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensMgmtServiceClient) DeleteToken(ctx context.Context, in *DeleteTokenReq, opts ...grpc.CallOption) (*DeleteTokenResp, error) {
	out := new(DeleteTokenResp)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.authn.TokensMgmtService/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokensMgmtServiceServer is the server API for TokensMgmtService service.
type TokensMgmtServiceServer interface {
	GetTokens(context.Context, *GetTokensReq) (*Tokens, error)
	CreateToken(context.Context, *CreateTokenReq) (*Token, error)
	CreateTokenWithValue(context.Context, *CreateTokenWithValueReq) (*Token, error)
	UpdateToken(context.Context, *UpdateTokenReq) (*Token, error)
	GetToken(context.Context, *GetTokenReq) (*Token, error)
	DeleteToken(context.Context, *DeleteTokenReq) (*DeleteTokenResp, error)
}

// UnimplementedTokensMgmtServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTokensMgmtServiceServer struct {
}

func (*UnimplementedTokensMgmtServiceServer) GetTokens(context.Context, *GetTokensReq) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (*UnimplementedTokensMgmtServiceServer) CreateToken(context.Context, *CreateTokenReq) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedTokensMgmtServiceServer) CreateTokenWithValue(context.Context, *CreateTokenWithValueReq) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenWithValue not implemented")
}
func (*UnimplementedTokensMgmtServiceServer) UpdateToken(context.Context, *UpdateTokenReq) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (*UnimplementedTokensMgmtServiceServer) GetToken(context.Context, *GetTokenReq) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedTokensMgmtServiceServer) DeleteToken(context.Context, *DeleteTokenReq) (*DeleteTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}

func RegisterTokensMgmtServiceServer(s *grpc.Server, srv TokensMgmtServiceServer) {
	s.RegisterService(&_TokensMgmtService_serviceDesc, srv)
}

func _TokensMgmtService_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServiceServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authn.TokensMgmtService/GetTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServiceServer).GetTokens(ctx, req.(*GetTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensMgmtService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authn.TokensMgmtService/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServiceServer).CreateToken(ctx, req.(*CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensMgmtService_CreateTokenWithValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenWithValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServiceServer).CreateTokenWithValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authn.TokensMgmtService/CreateTokenWithValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServiceServer).CreateTokenWithValue(ctx, req.(*CreateTokenWithValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensMgmtService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authn.TokensMgmtService/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServiceServer).UpdateToken(ctx, req.(*UpdateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensMgmtService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authn.TokensMgmtService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServiceServer).GetToken(ctx, req.(*GetTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensMgmtService_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServiceServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.authn.TokensMgmtService/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServiceServer).DeleteToken(ctx, req.(*DeleteTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokensMgmtService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.authn.TokensMgmtService",
	HandlerType: (*TokensMgmtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokens",
			Handler:    _TokensMgmtService_GetTokens_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _TokensMgmtService_CreateToken_Handler,
		},
		{
			MethodName: "CreateTokenWithValue",
			Handler:    _TokensMgmtService_CreateTokenWithValue_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _TokensMgmtService_UpdateToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _TokensMgmtService_GetToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _TokensMgmtService_DeleteToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interservice/authn/tokens.proto",
}
