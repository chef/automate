// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: interservice/nodemanager/nodes/nodes.proto

package nodes

import (
	context "context"
	common "github.com/chef/automate/api/interservice/compliance/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

// Enum value maps for Query_OrderType.
var (
	Query_OrderType_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	Query_OrderType_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x Query_OrderType) Enum() *Query_OrderType {
	p := new(Query_OrderType)
	*p = x
	return p
}

func (x Query_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_nodemanager_nodes_nodes_proto_enumTypes[0].Descriptor()
}

func (Query_OrderType) Type() protoreflect.EnumType {
	return &file_interservice_nodemanager_nodes_nodes_proto_enumTypes[0]
}

func (x Query_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_OrderType.Descriptor instead.
func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{5, 0}
}

type LastContactData_Status int32

const (
	LastContactData_UNKNOWN LastContactData_Status = 0
	LastContactData_PASSED  LastContactData_Status = 1
	LastContactData_FAILED  LastContactData_Status = 2
	LastContactData_SKIPPED LastContactData_Status = 3
)

// Enum value maps for LastContactData_Status.
var (
	LastContactData_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PASSED",
		2: "FAILED",
		3: "SKIPPED",
	}
	LastContactData_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"PASSED":  1,
		"FAILED":  2,
		"SKIPPED": 3,
	}
)

func (x LastContactData_Status) Enum() *LastContactData_Status {
	p := new(LastContactData_Status)
	*p = x
	return p
}

func (x LastContactData_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LastContactData_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_nodemanager_nodes_nodes_proto_enumTypes[1].Descriptor()
}

func (LastContactData_Status) Type() protoreflect.EnumType {
	return &file_interservice_nodemanager_nodes_nodes_proto_enumTypes[1]
}

func (x LastContactData_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LastContactData_Status.Descriptor instead.
func (LastContactData_Status) EnumDescriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{11, 0}
}

type NodeError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId          string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" toml:"node_id,omitempty" mapstructure:"node_id,omitempty"`
	ConnectionError string `protobuf:"bytes,2,opt,name=connection_error,json=connectionError,proto3" json:"connection_error,omitempty" toml:"connection_error,omitempty" mapstructure:"connection_error,omitempty"`
}

func (x *NodeError) Reset() {
	*x = NodeError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeError) ProtoMessage() {}

func (x *NodeError) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeError.ProtoReflect.Descriptor instead.
func (*NodeError) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{0}
}

func (x *NodeError) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeError) GetConnectionError() string {
	if x != nil {
		return x.ConnectionError
	}
	return ""
}

type NodeDetectJobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId          string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" toml:"node_id,omitempty" mapstructure:"node_id,omitempty"`
	PlatformName    string                 `protobuf:"bytes,2,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty" toml:"platform_name,omitempty" mapstructure:"platform_name,omitempty"`
	PlatformRelease string                 `protobuf:"bytes,3,opt,name=platform_release,json=platformRelease,proto3" json:"platform_release,omitempty" toml:"platform_release,omitempty" mapstructure:"platform_release,omitempty"`
	NodeStatus      string                 `protobuf:"bytes,4,opt,name=node_status,json=nodeStatus,proto3" json:"node_status,omitempty" toml:"node_status,omitempty" mapstructure:"node_status,omitempty"`
	JobEndTime      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=job_end_time,json=jobEndTime,proto3" json:"job_end_time,omitempty" toml:"job_end_time,omitempty" mapstructure:"job_end_time,omitempty"`
	JobId           string                 `protobuf:"bytes,6,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty" toml:"job_id,omitempty" mapstructure:"job_id,omitempty"`
	NodeState       string                 `protobuf:"bytes,7,opt,name=node_state,json=nodeState,proto3" json:"node_state,omitempty" toml:"node_state,omitempty" mapstructure:"node_state,omitempty"`
	JobType         string                 `protobuf:"bytes,8,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty" toml:"job_type,omitempty" mapstructure:"job_type,omitempty"`
	NodeName        string                 `protobuf:"bytes,9,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty" toml:"node_name,omitempty" mapstructure:"node_name,omitempty"`
	ManagerId       string                 `protobuf:"bytes,10,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty" toml:"manager_id,omitempty" mapstructure:"manager_id,omitempty"`
}

func (x *NodeDetectJobInfo) Reset() {
	*x = NodeDetectJobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetectJobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetectJobInfo) ProtoMessage() {}

func (x *NodeDetectJobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetectJobInfo.ProtoReflect.Descriptor instead.
func (*NodeDetectJobInfo) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{1}
}

func (x *NodeDetectJobInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeDetectJobInfo) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *NodeDetectJobInfo) GetPlatformRelease() string {
	if x != nil {
		return x.PlatformRelease
	}
	return ""
}

func (x *NodeDetectJobInfo) GetNodeStatus() string {
	if x != nil {
		return x.NodeStatus
	}
	return ""
}

func (x *NodeDetectJobInfo) GetJobEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JobEndTime
	}
	return nil
}

func (x *NodeDetectJobInfo) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *NodeDetectJobInfo) GetNodeState() string {
	if x != nil {
		return x.NodeState
	}
	return ""
}

func (x *NodeDetectJobInfo) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *NodeDetectJobInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeDetectJobInfo) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

type RerunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RerunResponse) Reset() {
	*x = RerunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunResponse) ProtoMessage() {}

func (x *RerunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunResponse.ProtoReflect.Descriptor instead.
func (*RerunResponse) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{2}
}

type Ids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty" toml:"ids,omitempty" mapstructure:"ids,omitempty"`
}

func (x *Ids) Reset() {
	*x = Ids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{3}
}

func (x *Ids) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{4}
}

func (x *Id) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*common.Filter `protobuf:"bytes,20,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
	Order   Query_OrderType  `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.domain.nodemanager.nodes.Query_OrderType" json:"order,omitempty" toml:"order,omitempty" mapstructure:"order,omitempty"`
	Sort    string           `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty" toml:"sort,omitempty" mapstructure:"sort,omitempty"`
	Page    int32            `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty" toml:"page,omitempty" mapstructure:"page,omitempty"`
	PerPage int32            `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty" toml:"per_page,omitempty" mapstructure:"per_page,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{5}
}

func (x *Query) GetFilters() []*common.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Query) GetOrder() Query_OrderType {
	if x != nil {
		return x.Order
	}
	return Query_ASC
}

func (x *Query) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *Query) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Query) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type TargetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secrets        []string       `protobuf:"bytes,20,rep,name=secrets,proto3" json:"secrets,omitempty" toml:"secrets,omitempty" mapstructure:"secrets,omitempty"`
	Format         string         `protobuf:"bytes,21,opt,name=format,proto3" json:"format,omitempty" toml:"format,omitempty" mapstructure:"format,omitempty"`
	Backend        string         `protobuf:"bytes,22,opt,name=backend,proto3" json:"backend,omitempty" toml:"backend,omitempty" mapstructure:"backend,omitempty"`
	Host           string         `protobuf:"bytes,23,opt,name=host,proto3" json:"host,omitempty" toml:"host,omitempty" mapstructure:"host,omitempty"`
	Port           int32          `protobuf:"varint,24,opt,name=port,proto3" json:"port,omitempty" toml:"port,omitempty" mapstructure:"port,omitempty"`
	Path           string         `protobuf:"bytes,25,opt,name=path,proto3" json:"path,omitempty" toml:"path,omitempty" mapstructure:"path,omitempty"`
	Sudo           bool           `protobuf:"varint,26,opt,name=sudo,proto3" json:"sudo,omitempty" toml:"sudo,omitempty" mapstructure:"sudo,omitempty"`
	Ssl            bool           `protobuf:"varint,27,opt,name=ssl,proto3" json:"ssl,omitempty" toml:"ssl,omitempty" mapstructure:"ssl,omitempty"`
	SelfSigned     bool           `protobuf:"varint,28,opt,name=self_signed,json=selfSigned,proto3" json:"self_signed,omitempty" toml:"self_signed,omitempty" mapstructure:"self_signed,omitempty"`
	User           string         `protobuf:"bytes,29,opt,name=user,proto3" json:"user,omitempty" toml:"user,omitempty" mapstructure:"user,omitempty"`
	Password       string         `protobuf:"bytes,30,opt,name=password,proto3" json:"password,omitempty" toml:"password,omitempty" mapstructure:"password,omitempty"`
	KeyFiles       []string       `protobuf:"bytes,31,rep,name=key_files,json=keyFiles,proto3" json:"key_files,omitempty" toml:"key_files,omitempty" mapstructure:"key_files,omitempty"`
	SudoPassword   string         `protobuf:"bytes,32,opt,name=sudo_password,json=sudoPassword,proto3" json:"sudo_password,omitempty" toml:"sudo_password,omitempty" mapstructure:"sudo_password,omitempty"`
	SudoOptions    string         `protobuf:"bytes,33,opt,name=sudo_options,json=sudoOptions,proto3" json:"sudo_options,omitempty" toml:"sudo_options,omitempty" mapstructure:"sudo_options,omitempty"`
	Region         string         `protobuf:"bytes,34,opt,name=region,proto3" json:"region,omitempty" toml:"region,omitempty" mapstructure:"region,omitempty"`
	SubscriptionId string         `protobuf:"bytes,35,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty" toml:"subscription_id,omitempty" mapstructure:"subscription_id,omitempty"`
	AwsUser        string         `protobuf:"bytes,36,opt,name=aws_user,json=awsUser,proto3" json:"aws_user,omitempty" toml:"aws_user,omitempty" mapstructure:"aws_user,omitempty"`
	AwsPassword    string         `protobuf:"bytes,37,opt,name=aws_password,json=awsPassword,proto3" json:"aws_password,omitempty" toml:"aws_password,omitempty" mapstructure:"aws_password,omitempty"`
	SecretsArr     []*NodeSecrets `protobuf:"bytes,38,rep,name=secrets_arr,json=secretsArr,proto3" json:"secrets_arr,omitempty" toml:"secrets_arr,omitempty" mapstructure:"secrets_arr,omitempty"`
	GcpCredsJson   string         `protobuf:"bytes,39,opt,name=gcp_creds_json,json=gcpCredsJson,proto3" json:"gcp_creds_json,omitempty" toml:"gcp_creds_json,omitempty" mapstructure:"gcp_creds_json,omitempty"`
	Hosts          []string       `protobuf:"bytes,40,rep,name=hosts,proto3" json:"hosts,omitempty" toml:"hosts,omitempty" mapstructure:"hosts,omitempty"`
}

func (x *TargetConfig) Reset() {
	*x = TargetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetConfig) ProtoMessage() {}

func (x *TargetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetConfig.ProtoReflect.Descriptor instead.
func (*TargetConfig) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{6}
}

func (x *TargetConfig) GetSecrets() []string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *TargetConfig) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *TargetConfig) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

func (x *TargetConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TargetConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TargetConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TargetConfig) GetSudo() bool {
	if x != nil {
		return x.Sudo
	}
	return false
}

func (x *TargetConfig) GetSsl() bool {
	if x != nil {
		return x.Ssl
	}
	return false
}

func (x *TargetConfig) GetSelfSigned() bool {
	if x != nil {
		return x.SelfSigned
	}
	return false
}

func (x *TargetConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TargetConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TargetConfig) GetKeyFiles() []string {
	if x != nil {
		return x.KeyFiles
	}
	return nil
}

func (x *TargetConfig) GetSudoPassword() string {
	if x != nil {
		return x.SudoPassword
	}
	return ""
}

func (x *TargetConfig) GetSudoOptions() string {
	if x != nil {
		return x.SudoOptions
	}
	return ""
}

func (x *TargetConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *TargetConfig) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *TargetConfig) GetAwsUser() string {
	if x != nil {
		return x.AwsUser
	}
	return ""
}

func (x *TargetConfig) GetAwsPassword() string {
	if x != nil {
		return x.AwsPassword
	}
	return ""
}

func (x *TargetConfig) GetSecretsArr() []*NodeSecrets {
	if x != nil {
		return x.SecretsArr
	}
	return nil
}

func (x *TargetConfig) GetGcpCredsJson() string {
	if x != nil {
		return x.GcpCredsJson
	}
	return ""
}

func (x *TargetConfig) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// TODO: there is clearly some repetition between these two msg types
// that needs to be addressed; it will involve some refactoring that i'm afraid
// will bloat the current change i am working on, so leaving that for another day
type NodeSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User              string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" toml:"user,omitempty" mapstructure:"user,omitempty"`
	Password          string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" toml:"password,omitempty" mapstructure:"password,omitempty"`
	KeyFiles          []string `protobuf:"bytes,3,rep,name=key_files,json=keyFiles,proto3" json:"key_files,omitempty" toml:"key_files,omitempty" mapstructure:"key_files,omitempty"`
	SudoPassword      string   `protobuf:"bytes,4,opt,name=sudo_password,json=sudoPassword,proto3" json:"sudo_password,omitempty" toml:"sudo_password,omitempty" mapstructure:"sudo_password,omitempty"`
	SudoOptions       string   `protobuf:"bytes,5,opt,name=sudo_options,json=sudoOptions,proto3" json:"sudo_options,omitempty" toml:"sudo_options,omitempty" mapstructure:"sudo_options,omitempty"`
	AwsUser           string   `protobuf:"bytes,6,opt,name=aws_user,json=awsUser,proto3" json:"aws_user,omitempty" toml:"aws_user,omitempty" mapstructure:"aws_user,omitempty"`
	AwsPassword       string   `protobuf:"bytes,7,opt,name=aws_password,json=awsPassword,proto3" json:"aws_password,omitempty" toml:"aws_password,omitempty" mapstructure:"aws_password,omitempty"`
	AzureClientId     string   `protobuf:"bytes,8,opt,name=azure_client_id,json=azureClientId,proto3" json:"azure_client_id,omitempty" toml:"azure_client_id,omitempty" mapstructure:"azure_client_id,omitempty"`
	AzureClientSecret string   `protobuf:"bytes,9,opt,name=azure_client_secret,json=azureClientSecret,proto3" json:"azure_client_secret,omitempty" toml:"azure_client_secret,omitempty" mapstructure:"azure_client_secret,omitempty"`
	AzureTenantId     string   `protobuf:"bytes,10,opt,name=azure_tenant_id,json=azureTenantId,proto3" json:"azure_tenant_id,omitempty" toml:"azure_tenant_id,omitempty" mapstructure:"azure_tenant_id,omitempty"`
}

func (x *NodeSecrets) Reset() {
	*x = NodeSecrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSecrets) ProtoMessage() {}

func (x *NodeSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSecrets.ProtoReflect.Descriptor instead.
func (*NodeSecrets) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{7}
}

func (x *NodeSecrets) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *NodeSecrets) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *NodeSecrets) GetKeyFiles() []string {
	if x != nil {
		return x.KeyFiles
	}
	return nil
}

func (x *NodeSecrets) GetSudoPassword() string {
	if x != nil {
		return x.SudoPassword
	}
	return ""
}

func (x *NodeSecrets) GetSudoOptions() string {
	if x != nil {
		return x.SudoOptions
	}
	return ""
}

func (x *NodeSecrets) GetAwsUser() string {
	if x != nil {
		return x.AwsUser
	}
	return ""
}

func (x *NodeSecrets) GetAwsPassword() string {
	if x != nil {
		return x.AwsPassword
	}
	return ""
}

func (x *NodeSecrets) GetAzureClientId() string {
	if x != nil {
		return x.AzureClientId
	}
	return ""
}

func (x *NodeSecrets) GetAzureClientSecret() string {
	if x != nil {
		return x.AzureClientSecret
	}
	return ""
}

func (x *NodeSecrets) GetAzureTenantId() string {
	if x != nil {
		return x.AzureTenantId
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Platform        string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty" toml:"platform,omitempty" mapstructure:"platform,omitempty"`
	PlatformVersion string                 `protobuf:"bytes,4,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty" toml:"platform_version,omitempty" mapstructure:"platform_version,omitempty"`
	Manager         string                 `protobuf:"bytes,5,opt,name=manager,proto3" json:"manager,omitempty" toml:"manager,omitempty" mapstructure:"manager,omitempty"`
	Tags            []*common.Kv           `protobuf:"bytes,20,rep,name=tags,proto3" json:"tags,omitempty" toml:"tags,omitempty" mapstructure:"tags,omitempty"`
	LastContact     *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=last_contact,json=lastContact,proto3" json:"last_contact,omitempty" toml:"last_contact,omitempty" mapstructure:"last_contact,omitempty"`
	Status          string                 `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	LastJob         *ResultsRow            `protobuf:"bytes,23,opt,name=last_job,json=lastJob,proto3" json:"last_job,omitempty" toml:"last_job,omitempty" mapstructure:"last_job,omitempty"`
	TargetConfig    *TargetConfig          `protobuf:"bytes,99,opt,name=target_config,json=targetConfig,proto3" json:"target_config,omitempty" toml:"target_config,omitempty" mapstructure:"target_config,omitempty"`
	ManagerIds      []string               `protobuf:"bytes,24,rep,name=manager_ids,json=managerIds,proto3" json:"manager_ids,omitempty" toml:"manager_ids,omitempty" mapstructure:"manager_ids,omitempty"`
	ConnectionError string                 `protobuf:"bytes,25,opt,name=connection_error,json=connectionError,proto3" json:"connection_error,omitempty" toml:"connection_error,omitempty" mapstructure:"connection_error,omitempty"`
	State           string                 `protobuf:"bytes,26,opt,name=state,proto3" json:"state,omitempty" toml:"state,omitempty" mapstructure:"state,omitempty"`
	NamePrefix      string                 `protobuf:"bytes,27,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty" toml:"name_prefix,omitempty" mapstructure:"name_prefix,omitempty"`
	Projects        []string               `protobuf:"bytes,28,rep,name=projects,proto3" json:"projects,omitempty" toml:"projects,omitempty" mapstructure:"projects,omitempty"`
	RunData         *LastContactData       `protobuf:"bytes,29,opt,name=run_data,json=runData,proto3" json:"run_data,omitempty" toml:"run_data,omitempty" mapstructure:"run_data,omitempty"`
	ScanData        *LastContactData       `protobuf:"bytes,30,opt,name=scan_data,json=scanData,proto3" json:"scan_data,omitempty" toml:"scan_data,omitempty" mapstructure:"scan_data,omitempty"`
	ProjectsData    []*ProjectsData        `protobuf:"bytes,31,rep,name=projects_data,json=projectsData,proto3" json:"projects_data,omitempty" toml:"projects_data,omitempty" mapstructure:"projects_data,omitempty"`
	CloudInfo       *CloudInfo             `protobuf:"bytes,32,opt,name=cloud_info,json=cloudInfo,proto3" json:"cloud_info,omitempty" toml:"cloud_info,omitempty" mapstructure:"cloud_info,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{8}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Node) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *Node) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

func (x *Node) GetTags() []*common.Kv {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Node) GetLastContact() *timestamppb.Timestamp {
	if x != nil {
		return x.LastContact
	}
	return nil
}

func (x *Node) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Node) GetLastJob() *ResultsRow {
	if x != nil {
		return x.LastJob
	}
	return nil
}

func (x *Node) GetTargetConfig() *TargetConfig {
	if x != nil {
		return x.TargetConfig
	}
	return nil
}

func (x *Node) GetManagerIds() []string {
	if x != nil {
		return x.ManagerIds
	}
	return nil
}

func (x *Node) GetConnectionError() string {
	if x != nil {
		return x.ConnectionError
	}
	return ""
}

func (x *Node) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Node) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

func (x *Node) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *Node) GetRunData() *LastContactData {
	if x != nil {
		return x.RunData
	}
	return nil
}

func (x *Node) GetScanData() *LastContactData {
	if x != nil {
		return x.ScanData
	}
	return nil
}

func (x *Node) GetProjectsData() []*ProjectsData {
	if x != nil {
		return x.ProjectsData
	}
	return nil
}

func (x *Node) GetCloudInfo() *CloudInfo {
	if x != nil {
		return x.CloudInfo
	}
	return nil
}

type CloudInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId        string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty" toml:"source_id,omitempty" mapstructure:"source_id,omitempty"`
	SourceRegion    string `protobuf:"bytes,2,opt,name=source_region,json=sourceRegion,proto3" json:"source_region,omitempty" toml:"source_region,omitempty" mapstructure:"source_region,omitempty"`
	SourceAccountId string `protobuf:"bytes,3,opt,name=source_account_id,json=sourceAccountId,proto3" json:"source_account_id,omitempty" toml:"source_account_id,omitempty" mapstructure:"source_account_id,omitempty"`
}

func (x *CloudInfo) Reset() {
	*x = CloudInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudInfo) ProtoMessage() {}

func (x *CloudInfo) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudInfo.ProtoReflect.Descriptor instead.
func (*CloudInfo) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{9}
}

func (x *CloudInfo) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *CloudInfo) GetSourceRegion() string {
	if x != nil {
		return x.SourceRegion
	}
	return ""
}

func (x *CloudInfo) GetSourceAccountId() string {
	if x != nil {
		return x.SourceAccountId
	}
	return ""
}

type ProjectsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" toml:"key,omitempty" mapstructure:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" toml:"values,omitempty" mapstructure:"values,omitempty"`
}

func (x *ProjectsData) Reset() {
	*x = ProjectsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectsData) ProtoMessage() {}

func (x *ProjectsData) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectsData.ProtoReflect.Descriptor instead.
func (*ProjectsData) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{10}
}

func (x *ProjectsData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ProjectsData) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type LastContactData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"` // run id or report id
	Status            LastContactData_Status `protobuf:"varint,2,opt,name=status,proto3,enum=chef.automate.domain.nodemanager.nodes.LastContactData_Status" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	PenultimateStatus LastContactData_Status `protobuf:"varint,3,opt,name=penultimate_status,json=penultimateStatus,proto3,enum=chef.automate.domain.nodemanager.nodes.LastContactData_Status" json:"penultimate_status,omitempty" toml:"penultimate_status,omitempty" mapstructure:"penultimate_status,omitempty"`
	EndTime           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
}

func (x *LastContactData) Reset() {
	*x = LastContactData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastContactData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastContactData) ProtoMessage() {}

func (x *LastContactData) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastContactData.ProtoReflect.Descriptor instead.
func (*LastContactData) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{11}
}

func (x *LastContactData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LastContactData) GetStatus() LastContactData_Status {
	if x != nil {
		return x.Status
	}
	return LastContactData_UNKNOWN
}

func (x *LastContactData) GetPenultimateStatus() LastContactData_Status {
	if x != nil {
		return x.PenultimateStatus
	}
	return LastContactData_UNKNOWN
}

func (x *LastContactData) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type Nodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes            []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" toml:"nodes,omitempty" mapstructure:"nodes,omitempty"`
	Total            int32   `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty" toml:"total,omitempty" mapstructure:"total,omitempty"`
	TotalUnreachable int32   `protobuf:"varint,21,opt,name=total_unreachable,json=totalUnreachable,proto3" json:"total_unreachable,omitempty" toml:"total_unreachable,omitempty" mapstructure:"total_unreachable,omitempty"`
	TotalReachable   int32   `protobuf:"varint,22,opt,name=total_reachable,json=totalReachable,proto3" json:"total_reachable,omitempty" toml:"total_reachable,omitempty" mapstructure:"total_reachable,omitempty"`
	TotalUnknown     int32   `protobuf:"varint,23,opt,name=total_unknown,json=totalUnknown,proto3" json:"total_unknown,omitempty" toml:"total_unknown,omitempty" mapstructure:"total_unknown,omitempty"`
}

func (x *Nodes) Reset() {
	*x = Nodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodes) ProtoMessage() {}

func (x *Nodes) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodes.ProtoReflect.Descriptor instead.
func (*Nodes) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{12}
}

func (x *Nodes) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Nodes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Nodes) GetTotalUnreachable() int32 {
	if x != nil {
		return x.TotalUnreachable
	}
	return 0
}

func (x *Nodes) GetTotalReachable() int32 {
	if x != nil {
		return x.TotalReachable
	}
	return 0
}

func (x *Nodes) GetTotalUnknown() int32 {
	if x != nil {
		return x.TotalUnknown
	}
	return 0
}

type ResultsRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId    string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" toml:"node_id,omitempty" mapstructure:"node_id,omitempty"`
	ReportId  string                 `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty" toml:"report_id,omitempty" mapstructure:"report_id,omitempty"`
	Status    string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Result    string                 `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty" toml:"result,omitempty" mapstructure:"result,omitempty"`
	JobId     string                 `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty" toml:"job_id,omitempty" mapstructure:"job_id,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" toml:"start_time,omitempty" mapstructure:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" toml:"end_time,omitempty" mapstructure:"end_time,omitempty"`
}

func (x *ResultsRow) Reset() {
	*x = ResultsRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultsRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsRow) ProtoMessage() {}

func (x *ResultsRow) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsRow.ProtoReflect.Descriptor instead.
func (*ResultsRow) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{13}
}

func (x *ResultsRow) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ResultsRow) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *ResultsRow) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ResultsRow) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ResultsRow) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ResultsRow) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ResultsRow) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type BulkDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty" toml:"names,omitempty" mapstructure:"names,omitempty"`
}

func (x *BulkDeleteResponse) Reset() {
	*x = BulkDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkDeleteResponse) ProtoMessage() {}

func (x *BulkDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_nodemanager_nodes_nodes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkDeleteResponse.ProtoReflect.Descriptor instead.
func (*BulkDeleteResponse) Descriptor() ([]byte, []int) {
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP(), []int{14}
}

func (x *BulkDeleteResponse) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

var File_interservice_nodemanager_nodes_nodes_proto protoreflect.FileDescriptor

var file_interservice_nodemanager_nodes_nodes_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a,
	0x09, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe8,
	0x02, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c,
	0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x72,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22,
	0x1e, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x22,
	0x83, 0x05, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x75, 0x64, 0x6f,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x75, 0x64, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x73, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x73, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x64, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x64, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x64, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x64, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x77, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x77, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x77, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x61,
	0x72, 0x72, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x41, 0x72, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x63, 0x70,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x67, 0x63, 0x70, 0x43, 0x72, 0x65, 0x64, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x64, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x64, 0x6f, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x64, 0x6f, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x75, 0x64, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x77,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x77,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x77, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc2, 0x07, 0x0a, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x76,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x6f, 0x77, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x59, 0x0a, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x09, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x59, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0a, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a,
	0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6d,
	0x0a, 0x12, 0x70, 0x65, 0x6e, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03,
	0x22, 0xdc, 0x01, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22,
	0xfb, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x6f, 0x77, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2a, 0x0a,
	0x12, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x9d, 0x08, 0x0a, 0x0c, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x1a, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x22, 0x00,
	0x12, 0x62, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x49, 0x64, 0x1a, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2d, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x00, 0x12, 0x79,
	0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x3a, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0a, 0x42, 0x75, 0x6c,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x49, 0x64, 0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0e,
	0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2b,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x3a, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interservice_nodemanager_nodes_nodes_proto_rawDescOnce sync.Once
	file_interservice_nodemanager_nodes_nodes_proto_rawDescData = file_interservice_nodemanager_nodes_nodes_proto_rawDesc
)

func file_interservice_nodemanager_nodes_nodes_proto_rawDescGZIP() []byte {
	file_interservice_nodemanager_nodes_nodes_proto_rawDescOnce.Do(func() {
		file_interservice_nodemanager_nodes_nodes_proto_rawDescData = protoimpl.X.CompressGZIP(file_interservice_nodemanager_nodes_nodes_proto_rawDescData)
	})
	return file_interservice_nodemanager_nodes_nodes_proto_rawDescData
}

var file_interservice_nodemanager_nodes_nodes_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_interservice_nodemanager_nodes_nodes_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_interservice_nodemanager_nodes_nodes_proto_goTypes = []interface{}{
	(Query_OrderType)(0),          // 0: chef.automate.domain.nodemanager.nodes.Query.OrderType
	(LastContactData_Status)(0),   // 1: chef.automate.domain.nodemanager.nodes.LastContactData.Status
	(*NodeError)(nil),             // 2: chef.automate.domain.nodemanager.nodes.NodeError
	(*NodeDetectJobInfo)(nil),     // 3: chef.automate.domain.nodemanager.nodes.NodeDetectJobInfo
	(*RerunResponse)(nil),         // 4: chef.automate.domain.nodemanager.nodes.RerunResponse
	(*Ids)(nil),                   // 5: chef.automate.domain.nodemanager.nodes.Ids
	(*Id)(nil),                    // 6: chef.automate.domain.nodemanager.nodes.Id
	(*Query)(nil),                 // 7: chef.automate.domain.nodemanager.nodes.Query
	(*TargetConfig)(nil),          // 8: chef.automate.domain.nodemanager.nodes.TargetConfig
	(*NodeSecrets)(nil),           // 9: chef.automate.domain.nodemanager.nodes.NodeSecrets
	(*Node)(nil),                  // 10: chef.automate.domain.nodemanager.nodes.Node
	(*CloudInfo)(nil),             // 11: chef.automate.domain.nodemanager.nodes.CloudInfo
	(*ProjectsData)(nil),          // 12: chef.automate.domain.nodemanager.nodes.ProjectsData
	(*LastContactData)(nil),       // 13: chef.automate.domain.nodemanager.nodes.LastContactData
	(*Nodes)(nil),                 // 14: chef.automate.domain.nodemanager.nodes.Nodes
	(*ResultsRow)(nil),            // 15: chef.automate.domain.nodemanager.nodes.ResultsRow
	(*BulkDeleteResponse)(nil),    // 16: chef.automate.domain.nodemanager.nodes.BulkDeleteResponse
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
	(*common.Filter)(nil),         // 18: chef.automate.domain.compliance.common.Filter
	(*common.Kv)(nil),             // 19: chef.automate.domain.compliance.common.Kv
	(*emptypb.Empty)(nil),         // 20: google.protobuf.Empty
}
var file_interservice_nodemanager_nodes_nodes_proto_depIdxs = []int32{
	17, // 0: chef.automate.domain.nodemanager.nodes.NodeDetectJobInfo.job_end_time:type_name -> google.protobuf.Timestamp
	18, // 1: chef.automate.domain.nodemanager.nodes.Query.filters:type_name -> chef.automate.domain.compliance.common.Filter
	0,  // 2: chef.automate.domain.nodemanager.nodes.Query.order:type_name -> chef.automate.domain.nodemanager.nodes.Query.OrderType
	9,  // 3: chef.automate.domain.nodemanager.nodes.TargetConfig.secrets_arr:type_name -> chef.automate.domain.nodemanager.nodes.NodeSecrets
	19, // 4: chef.automate.domain.nodemanager.nodes.Node.tags:type_name -> chef.automate.domain.compliance.common.Kv
	17, // 5: chef.automate.domain.nodemanager.nodes.Node.last_contact:type_name -> google.protobuf.Timestamp
	15, // 6: chef.automate.domain.nodemanager.nodes.Node.last_job:type_name -> chef.automate.domain.nodemanager.nodes.ResultsRow
	8,  // 7: chef.automate.domain.nodemanager.nodes.Node.target_config:type_name -> chef.automate.domain.nodemanager.nodes.TargetConfig
	13, // 8: chef.automate.domain.nodemanager.nodes.Node.run_data:type_name -> chef.automate.domain.nodemanager.nodes.LastContactData
	13, // 9: chef.automate.domain.nodemanager.nodes.Node.scan_data:type_name -> chef.automate.domain.nodemanager.nodes.LastContactData
	12, // 10: chef.automate.domain.nodemanager.nodes.Node.projects_data:type_name -> chef.automate.domain.nodemanager.nodes.ProjectsData
	11, // 11: chef.automate.domain.nodemanager.nodes.Node.cloud_info:type_name -> chef.automate.domain.nodemanager.nodes.CloudInfo
	1,  // 12: chef.automate.domain.nodemanager.nodes.LastContactData.status:type_name -> chef.automate.domain.nodemanager.nodes.LastContactData.Status
	1,  // 13: chef.automate.domain.nodemanager.nodes.LastContactData.penultimate_status:type_name -> chef.automate.domain.nodemanager.nodes.LastContactData.Status
	17, // 14: chef.automate.domain.nodemanager.nodes.LastContactData.end_time:type_name -> google.protobuf.Timestamp
	10, // 15: chef.automate.domain.nodemanager.nodes.Nodes.nodes:type_name -> chef.automate.domain.nodemanager.nodes.Node
	17, // 16: chef.automate.domain.nodemanager.nodes.ResultsRow.start_time:type_name -> google.protobuf.Timestamp
	17, // 17: chef.automate.domain.nodemanager.nodes.ResultsRow.end_time:type_name -> google.protobuf.Timestamp
	10, // 18: chef.automate.domain.nodemanager.nodes.NodesService.Create:input_type -> chef.automate.domain.nodemanager.nodes.Node
	6,  // 19: chef.automate.domain.nodemanager.nodes.NodesService.Read:input_type -> chef.automate.domain.nodemanager.nodes.Id
	10, // 20: chef.automate.domain.nodemanager.nodes.NodesService.Update:input_type -> chef.automate.domain.nodemanager.nodes.Node
	6,  // 21: chef.automate.domain.nodemanager.nodes.NodesService.Delete:input_type -> chef.automate.domain.nodemanager.nodes.Id
	7,  // 22: chef.automate.domain.nodemanager.nodes.NodesService.List:input_type -> chef.automate.domain.nodemanager.nodes.Query
	7,  // 23: chef.automate.domain.nodemanager.nodes.NodesService.BulkDelete:input_type -> chef.automate.domain.nodemanager.nodes.Query
	14, // 24: chef.automate.domain.nodemanager.nodes.NodesService.BulkCreate:input_type -> chef.automate.domain.nodemanager.nodes.Nodes
	3,  // 25: chef.automate.domain.nodemanager.nodes.NodesService.UpdateNodeDetectInfo:input_type -> chef.automate.domain.nodemanager.nodes.NodeDetectJobInfo
	2,  // 26: chef.automate.domain.nodemanager.nodes.NodesService.UpdateNodeConnectionError:input_type -> chef.automate.domain.nodemanager.nodes.NodeError
	5,  // 27: chef.automate.domain.nodemanager.nodes.NodesService.BulkDeleteById:input_type -> chef.automate.domain.nodemanager.nodes.Ids
	6,  // 28: chef.automate.domain.nodemanager.nodes.NodesService.Create:output_type -> chef.automate.domain.nodemanager.nodes.Id
	10, // 29: chef.automate.domain.nodemanager.nodes.NodesService.Read:output_type -> chef.automate.domain.nodemanager.nodes.Node
	20, // 30: chef.automate.domain.nodemanager.nodes.NodesService.Update:output_type -> google.protobuf.Empty
	20, // 31: chef.automate.domain.nodemanager.nodes.NodesService.Delete:output_type -> google.protobuf.Empty
	14, // 32: chef.automate.domain.nodemanager.nodes.NodesService.List:output_type -> chef.automate.domain.nodemanager.nodes.Nodes
	16, // 33: chef.automate.domain.nodemanager.nodes.NodesService.BulkDelete:output_type -> chef.automate.domain.nodemanager.nodes.BulkDeleteResponse
	5,  // 34: chef.automate.domain.nodemanager.nodes.NodesService.BulkCreate:output_type -> chef.automate.domain.nodemanager.nodes.Ids
	20, // 35: chef.automate.domain.nodemanager.nodes.NodesService.UpdateNodeDetectInfo:output_type -> google.protobuf.Empty
	20, // 36: chef.automate.domain.nodemanager.nodes.NodesService.UpdateNodeConnectionError:output_type -> google.protobuf.Empty
	16, // 37: chef.automate.domain.nodemanager.nodes.NodesService.BulkDeleteById:output_type -> chef.automate.domain.nodemanager.nodes.BulkDeleteResponse
	28, // [28:38] is the sub-list for method output_type
	18, // [18:28] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_interservice_nodemanager_nodes_nodes_proto_init() }
func file_interservice_nodemanager_nodes_nodes_proto_init() {
	if File_interservice_nodemanager_nodes_nodes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetectJobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSecrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastContactData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultsRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_nodemanager_nodes_nodes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_nodemanager_nodes_nodes_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_nodemanager_nodes_nodes_proto_goTypes,
		DependencyIndexes: file_interservice_nodemanager_nodes_nodes_proto_depIdxs,
		EnumInfos:         file_interservice_nodemanager_nodes_nodes_proto_enumTypes,
		MessageInfos:      file_interservice_nodemanager_nodes_nodes_proto_msgTypes,
	}.Build()
	File_interservice_nodemanager_nodes_nodes_proto = out.File
	file_interservice_nodemanager_nodes_nodes_proto_rawDesc = nil
	file_interservice_nodemanager_nodes_nodes_proto_goTypes = nil
	file_interservice_nodemanager_nodes_nodes_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodesServiceClient is the client API for NodesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodesServiceClient interface {
	Create(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Id, error)
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error)
	Update(ctx context.Context, in *Node, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Nodes, error)
	BulkDelete(ctx context.Context, in *Query, opts ...grpc.CallOption) (*BulkDeleteResponse, error)
	BulkCreate(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Ids, error)
	UpdateNodeDetectInfo(ctx context.Context, in *NodeDetectJobInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNodeConnectionError(ctx context.Context, in *NodeError, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BulkDeleteById(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*BulkDeleteResponse, error)
}

type nodesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodesServiceClient(cc grpc.ClientConnInterface) NodesServiceClient {
	return &nodesServiceClient{cc}
}

func (c *nodesServiceClient) Create(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.nodes.NodesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.nodes.NodesService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) Update(ctx context.Context, in *Node, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.nodes.NodesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.nodes.NodesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.nodes.NodesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) BulkDelete(ctx context.Context, in *Query, opts ...grpc.CallOption) (*BulkDeleteResponse, error) {
	out := new(BulkDeleteResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.nodes.NodesService/BulkDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) BulkCreate(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.nodes.NodesService/BulkCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) UpdateNodeDetectInfo(ctx context.Context, in *NodeDetectJobInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.nodes.NodesService/UpdateNodeDetectInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) UpdateNodeConnectionError(ctx context.Context, in *NodeError, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.nodes.NodesService/UpdateNodeConnectionError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesServiceClient) BulkDeleteById(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*BulkDeleteResponse, error) {
	out := new(BulkDeleteResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.nodes.NodesService/BulkDeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodesServiceServer is the server API for NodesService service.
type NodesServiceServer interface {
	Create(context.Context, *Node) (*Id, error)
	Read(context.Context, *Id) (*Node, error)
	Update(context.Context, *Node) (*emptypb.Empty, error)
	Delete(context.Context, *Id) (*emptypb.Empty, error)
	List(context.Context, *Query) (*Nodes, error)
	BulkDelete(context.Context, *Query) (*BulkDeleteResponse, error)
	BulkCreate(context.Context, *Nodes) (*Ids, error)
	UpdateNodeDetectInfo(context.Context, *NodeDetectJobInfo) (*emptypb.Empty, error)
	UpdateNodeConnectionError(context.Context, *NodeError) (*emptypb.Empty, error)
	BulkDeleteById(context.Context, *Ids) (*BulkDeleteResponse, error)
}

// UnimplementedNodesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodesServiceServer struct {
}

func (*UnimplementedNodesServiceServer) Create(context.Context, *Node) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedNodesServiceServer) Read(context.Context, *Id) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedNodesServiceServer) Update(context.Context, *Node) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedNodesServiceServer) Delete(context.Context, *Id) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedNodesServiceServer) List(context.Context, *Query) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedNodesServiceServer) BulkDelete(context.Context, *Query) (*BulkDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDelete not implemented")
}
func (*UnimplementedNodesServiceServer) BulkCreate(context.Context, *Nodes) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreate not implemented")
}
func (*UnimplementedNodesServiceServer) UpdateNodeDetectInfo(context.Context, *NodeDetectJobInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeDetectInfo not implemented")
}
func (*UnimplementedNodesServiceServer) UpdateNodeConnectionError(context.Context, *NodeError) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeConnectionError not implemented")
}
func (*UnimplementedNodesServiceServer) BulkDeleteById(context.Context, *Ids) (*BulkDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteById not implemented")
}

func RegisterNodesServiceServer(s *grpc.Server, srv NodesServiceServer) {
	s.RegisterService(&_NodesService_serviceDesc, srv)
}

func _NodesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.nodes.NodesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).Create(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.nodes.NodesService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.nodes.NodesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).Update(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.nodes.NodesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.nodes.NodesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).List(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_BulkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).BulkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.nodes.NodesService/BulkDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).BulkDelete(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_BulkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).BulkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.nodes.NodesService/BulkCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).BulkCreate(ctx, req.(*Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_UpdateNodeDetectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDetectJobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).UpdateNodeDetectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.nodes.NodesService/UpdateNodeDetectInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).UpdateNodeDetectInfo(ctx, req.(*NodeDetectJobInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_UpdateNodeConnectionError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeError)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).UpdateNodeConnectionError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.nodes.NodesService/UpdateNodeConnectionError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).UpdateNodeConnectionError(ctx, req.(*NodeError))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodesService_BulkDeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServiceServer).BulkDeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.nodes.NodesService/BulkDeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServiceServer).BulkDeleteById(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.nodemanager.nodes.NodesService",
	HandlerType: (*NodesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NodesService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NodesService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NodesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NodesService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NodesService_List_Handler,
		},
		{
			MethodName: "BulkDelete",
			Handler:    _NodesService_BulkDelete_Handler,
		},
		{
			MethodName: "BulkCreate",
			Handler:    _NodesService_BulkCreate_Handler,
		},
		{
			MethodName: "UpdateNodeDetectInfo",
			Handler:    _NodesService_UpdateNodeDetectInfo_Handler,
		},
		{
			MethodName: "UpdateNodeConnectionError",
			Handler:    _NodesService_UpdateNodeConnectionError_Handler,
		},
		{
			MethodName: "BulkDeleteById",
			Handler:    _NodesService_BulkDeleteById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interservice/nodemanager/nodes/nodes.proto",
}
