// -*- mode: protobuf; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*-

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: interservice/deployment/automate_deployment.proto

package deployment

import (
	context "context"
	deployment "github.com/chef/automate/api/config/deployment"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UpgradeStatusResponse_UpgradeState int32

const (
	// UNKNOWN indicates that we were not able to
	// determine what the upgrade state was because of
	// some error.
	UpgradeStatusResponse_UNKNOWN UpgradeStatusResponse_UpgradeState = 0
	// Note(ssd) 2018-02-07: Not handling this for now:
	//
	// PROMOTING indicates that we believe a new
	// version is currently being promoted into our channel.
	//
	// We assume that a promotion is happening if we detect a
	// deployed service version newer than the version we find in
	// the manifest. This can happen since we promote packages
	// one-at-a-time and then promote the manifest.
	//
	// See
	//
	//    A2ROOT/.expeditor/promote-services.sh
	//
	// for the current upgrade process.
	// PROMOTING = 3;
	//
	// UPGRADING indicates that an upgrade is likely
	// in progress.
	//
	// We assume an upgrade is in progress anytime we have
	// deployed versions that are older than what we see in the
	// manifest.
	UpgradeStatusResponse_UPGRADING UpgradeStatusResponse_UpgradeState = 1
	// IDLE indicates that an ongoing upgrade is unlikely.
	//
	// All currently deployed versions of services
	// match the versions currently deployed.
	UpgradeStatusResponse_IDLE UpgradeStatusResponse_UpgradeState = 2
)

// Enum value maps for UpgradeStatusResponse_UpgradeState.
var (
	UpgradeStatusResponse_UpgradeState_name = map[int32]string{
		0: "UNKNOWN",
		1: "UPGRADING",
		2: "IDLE",
	}
	UpgradeStatusResponse_UpgradeState_value = map[string]int32{
		"UNKNOWN":   0,
		"UPGRADING": 1,
		"IDLE":      2,
	}
)

func (x UpgradeStatusResponse_UpgradeState) Enum() *UpgradeStatusResponse_UpgradeState {
	p := new(UpgradeStatusResponse_UpgradeState)
	*p = x
	return p
}

func (x UpgradeStatusResponse_UpgradeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpgradeStatusResponse_UpgradeState) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_deployment_automate_deployment_proto_enumTypes[0].Descriptor()
}

func (UpgradeStatusResponse_UpgradeState) Type() protoreflect.EnumType {
	return &file_interservice_deployment_automate_deployment_proto_enumTypes[0]
}

func (x UpgradeStatusResponse_UpgradeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpgradeStatusResponse_UpgradeState.Descriptor instead.
func (UpgradeStatusResponse_UpgradeState) EnumDescriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{35, 0}
}

type DeployEvent_Status int32

const (
	DeployEvent_WAITING                  DeployEvent_Status = 0
	DeployEvent_RUNNING                  DeployEvent_Status = 1
	DeployEvent_COMPLETE_OK              DeployEvent_Status = 2
	DeployEvent_COMPLETE_FAIL            DeployEvent_Status = 3
	DeployEvent_SELF_UPGRADE_PENDING     DeployEvent_Status = 4
	DeployEvent_SELF_RECONFIGURE_PENDING DeployEvent_Status = 5
)

// Enum value maps for DeployEvent_Status.
var (
	DeployEvent_Status_name = map[int32]string{
		0: "WAITING",
		1: "RUNNING",
		2: "COMPLETE_OK",
		3: "COMPLETE_FAIL",
		4: "SELF_UPGRADE_PENDING",
		5: "SELF_RECONFIGURE_PENDING",
	}
	DeployEvent_Status_value = map[string]int32{
		"WAITING":                  0,
		"RUNNING":                  1,
		"COMPLETE_OK":              2,
		"COMPLETE_FAIL":            3,
		"SELF_UPGRADE_PENDING":     4,
		"SELF_RECONFIGURE_PENDING": 5,
	}
)

func (x DeployEvent_Status) Enum() *DeployEvent_Status {
	p := new(DeployEvent_Status)
	*p = x
	return p
}

func (x DeployEvent_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeployEvent_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_deployment_automate_deployment_proto_enumTypes[1].Descriptor()
}

func (DeployEvent_Status) Type() protoreflect.EnumType {
	return &file_interservice_deployment_automate_deployment_proto_enumTypes[1]
}

func (x DeployEvent_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeployEvent_Status.Descriptor instead.
func (DeployEvent_Status) EnumDescriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{43, 0}
}

type DeployEvent_PhaseID int32

const (
	DeployEvent_INIT_SERVICE         DeployEvent_PhaseID = 0
	DeployEvent_INSTALL_SERVICE      DeployEvent_PhaseID = 1
	DeployEvent_START_SERVICE        DeployEvent_PhaseID = 2
	DeployEvent_CHECK_SERVICE_HEALTH DeployEvent_PhaseID = 3
	DeployEvent_CREATE_ADMIN_USER    DeployEvent_PhaseID = 4
	DeployEvent_APPLY_LICENSE        DeployEvent_PhaseID = 5
	DeployEvent_UNLOAD_SERVICE       DeployEvent_PhaseID = 6
)

// Enum value maps for DeployEvent_PhaseID.
var (
	DeployEvent_PhaseID_name = map[int32]string{
		0: "INIT_SERVICE",
		1: "INSTALL_SERVICE",
		2: "START_SERVICE",
		3: "CHECK_SERVICE_HEALTH",
		4: "CREATE_ADMIN_USER",
		5: "APPLY_LICENSE",
		6: "UNLOAD_SERVICE",
	}
	DeployEvent_PhaseID_value = map[string]int32{
		"INIT_SERVICE":         0,
		"INSTALL_SERVICE":      1,
		"START_SERVICE":        2,
		"CHECK_SERVICE_HEALTH": 3,
		"CREATE_ADMIN_USER":    4,
		"APPLY_LICENSE":        5,
		"UNLOAD_SERVICE":       6,
	}
)

func (x DeployEvent_PhaseID) Enum() *DeployEvent_PhaseID {
	p := new(DeployEvent_PhaseID)
	*p = x
	return p
}

func (x DeployEvent_PhaseID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeployEvent_PhaseID) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_deployment_automate_deployment_proto_enumTypes[2].Descriptor()
}

func (DeployEvent_PhaseID) Type() protoreflect.EnumType {
	return &file_interservice_deployment_automate_deployment_proto_enumTypes[2]
}

func (x DeployEvent_PhaseID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeployEvent_PhaseID.Descriptor instead.
func (DeployEvent_PhaseID) EnumDescriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{43, 1}
}

type DeployEvent_Backup_Operation_Type int32

const (
	DeployEvent_Backup_Operation_BACKUP  DeployEvent_Backup_Operation_Type = 0
	DeployEvent_Backup_Operation_RESTORE DeployEvent_Backup_Operation_Type = 1
)

// Enum value maps for DeployEvent_Backup_Operation_Type.
var (
	DeployEvent_Backup_Operation_Type_name = map[int32]string{
		0: "BACKUP",
		1: "RESTORE",
	}
	DeployEvent_Backup_Operation_Type_value = map[string]int32{
		"BACKUP":  0,
		"RESTORE": 1,
	}
)

func (x DeployEvent_Backup_Operation_Type) Enum() *DeployEvent_Backup_Operation_Type {
	p := new(DeployEvent_Backup_Operation_Type)
	*p = x
	return p
}

func (x DeployEvent_Backup_Operation_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeployEvent_Backup_Operation_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_deployment_automate_deployment_proto_enumTypes[3].Descriptor()
}

func (DeployEvent_Backup_Operation_Type) Type() protoreflect.EnumType {
	return &file_interservice_deployment_automate_deployment_proto_enumTypes[3]
}

func (x DeployEvent_Backup_Operation_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeployEvent_Backup_Operation_Type.Descriptor instead.
func (DeployEvent_Backup_Operation_Type) EnumDescriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{43, 3, 0, 0}
}

type ServiceState_State int32

const (
	// CONNECTION_ERROR means we could not connect to the
	// habitat supervisor.
	ServiceState_CONNECTION_ERROR ServiceState_State = 0
	// DOWN means the process is down and thus we have no
	// health-check information from hab.
	ServiceState_DOWN ServiceState_State = 1
	// CRITICAL, OK, WARNING, UNKNOWN map directly to
	// Habitat health check return codes:
	//
	// https://www.habitat.sh/docs/reference/#health_check
	ServiceState_OK       ServiceState_State = 3
	ServiceState_WARNING  ServiceState_State = 4
	ServiceState_CRITICAL ServiceState_State = 2
	ServiceState_UNKNOWN  ServiceState_State = 5
)

// Enum value maps for ServiceState_State.
var (
	ServiceState_State_name = map[int32]string{
		0: "CONNECTION_ERROR",
		1: "DOWN",
		3: "OK",
		4: "WARNING",
		2: "CRITICAL",
		5: "UNKNOWN",
	}
	ServiceState_State_value = map[string]int32{
		"CONNECTION_ERROR": 0,
		"DOWN":             1,
		"OK":               3,
		"WARNING":          4,
		"CRITICAL":         2,
		"UNKNOWN":          5,
	}
)

func (x ServiceState_State) Enum() *ServiceState_State {
	p := new(ServiceState_State)
	*p = x
	return p
}

func (x ServiceState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_deployment_automate_deployment_proto_enumTypes[4].Descriptor()
}

func (ServiceState_State) Type() protoreflect.EnumType {
	return &file_interservice_deployment_automate_deployment_proto_enumTypes[4]
}

func (x ServiceState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceState_State.Descriptor instead.
func (ServiceState_State) EnumDescriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{55, 0}
}

type BackupTask_BackupState int32

const (
	BackupTask_IN_PROGRESS BackupTask_BackupState = 0
	BackupTask_COMPLETED   BackupTask_BackupState = 1
	BackupTask_FAILED      BackupTask_BackupState = 3
	BackupTask_DELETING    BackupTask_BackupState = 4
)

// Enum value maps for BackupTask_BackupState.
var (
	BackupTask_BackupState_name = map[int32]string{
		0: "IN_PROGRESS",
		1: "COMPLETED",
		3: "FAILED",
		4: "DELETING",
	}
	BackupTask_BackupState_value = map[string]int32{
		"IN_PROGRESS": 0,
		"COMPLETED":   1,
		"FAILED":      3,
		"DELETING":    4,
	}
)

func (x BackupTask_BackupState) Enum() *BackupTask_BackupState {
	p := new(BackupTask_BackupState)
	*p = x
	return p
}

func (x BackupTask_BackupState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupTask_BackupState) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_deployment_automate_deployment_proto_enumTypes[5].Descriptor()
}

func (BackupTask_BackupState) Type() protoreflect.EnumType {
	return &file_interservice_deployment_automate_deployment_proto_enumTypes[5]
}

func (x BackupTask_BackupState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupTask_BackupState.Descriptor instead.
func (BackupTask_BackupState) EnumDescriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{72, 0}
}

type BackupStatusResponse_OperationType int32

const (
	BackupStatusResponse_CREATE           BackupStatusResponse_OperationType = 0
	BackupStatusResponse_DELETE           BackupStatusResponse_OperationType = 1
	BackupStatusResponse_RESTORE          BackupStatusResponse_OperationType = 3
	BackupStatusResponse_LIST             BackupStatusResponse_OperationType = 4
	BackupStatusResponse_SHOW             BackupStatusResponse_OperationType = 5
	BackupStatusResponse_CANCEL           BackupStatusResponse_OperationType = 6
	BackupStatusResponse_IDLE             BackupStatusResponse_OperationType = 7
	BackupStatusResponse_VERIFY_INTEGRITY BackupStatusResponse_OperationType = 8
)

// Enum value maps for BackupStatusResponse_OperationType.
var (
	BackupStatusResponse_OperationType_name = map[int32]string{
		0: "CREATE",
		1: "DELETE",
		3: "RESTORE",
		4: "LIST",
		5: "SHOW",
		6: "CANCEL",
		7: "IDLE",
		8: "VERIFY_INTEGRITY",
	}
	BackupStatusResponse_OperationType_value = map[string]int32{
		"CREATE":           0,
		"DELETE":           1,
		"RESTORE":          3,
		"LIST":             4,
		"SHOW":             5,
		"CANCEL":           6,
		"IDLE":             7,
		"VERIFY_INTEGRITY": 8,
	}
)

func (x BackupStatusResponse_OperationType) Enum() *BackupStatusResponse_OperationType {
	p := new(BackupStatusResponse_OperationType)
	*p = x
	return p
}

func (x BackupStatusResponse_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupStatusResponse_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_deployment_automate_deployment_proto_enumTypes[6].Descriptor()
}

func (BackupStatusResponse_OperationType) Type() protoreflect.EnumType {
	return &file_interservice_deployment_automate_deployment_proto_enumTypes[6]
}

func (x BackupStatusResponse_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupStatusResponse_OperationType.Descriptor instead.
func (BackupStatusResponse_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{94, 0}
}

type A1UpgradeStatusResponse_MigrationStatus int32

const (
	A1UpgradeStatusResponse_UNKNOWN     A1UpgradeStatusResponse_MigrationStatus = 0
	A1UpgradeStatusResponse_IN_PROGRESS A1UpgradeStatusResponse_MigrationStatus = 1
	A1UpgradeStatusResponse_COMPLETE    A1UpgradeStatusResponse_MigrationStatus = 2
	A1UpgradeStatusResponse_FAILED      A1UpgradeStatusResponse_MigrationStatus = 3
)

// Enum value maps for A1UpgradeStatusResponse_MigrationStatus.
var (
	A1UpgradeStatusResponse_MigrationStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "IN_PROGRESS",
		2: "COMPLETE",
		3: "FAILED",
	}
	A1UpgradeStatusResponse_MigrationStatus_value = map[string]int32{
		"UNKNOWN":     0,
		"IN_PROGRESS": 1,
		"COMPLETE":    2,
		"FAILED":      3,
	}
)

func (x A1UpgradeStatusResponse_MigrationStatus) Enum() *A1UpgradeStatusResponse_MigrationStatus {
	p := new(A1UpgradeStatusResponse_MigrationStatus)
	*p = x
	return p
}

func (x A1UpgradeStatusResponse_MigrationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (A1UpgradeStatusResponse_MigrationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_interservice_deployment_automate_deployment_proto_enumTypes[7].Descriptor()
}

func (A1UpgradeStatusResponse_MigrationStatus) Type() protoreflect.EnumType {
	return &file_interservice_deployment_automate_deployment_proto_enumTypes[7]
}

func (x A1UpgradeStatusResponse_MigrationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use A1UpgradeStatusResponse_MigrationStatus.Descriptor instead.
func (A1UpgradeStatusResponse_MigrationStatus) EnumDescriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{103, 0}
}

type BootstrapBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BootstrapBundleRequest) Reset() {
	*x = BootstrapBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapBundleRequest) ProtoMessage() {}

func (x *BootstrapBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapBundleRequest.ProtoReflect.Descriptor instead.
func (*BootstrapBundleRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{0}
}

type BootstrapBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" toml:"data,omitempty" mapstructure:"data,omitempty"`
}

func (x *BootstrapBundleResponse) Reset() {
	*x = BootstrapBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapBundleResponse) ProtoMessage() {}

func (x *BootstrapBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapBundleResponse.ProtoReflect.Descriptor instead.
func (*BootstrapBundleResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{1}
}

func (x *BootstrapBundleResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCLIExecutableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty" toml:"platform,omitempty" mapstructure:"platform,omitempty"`
}

func (x *GetCLIExecutableRequest) Reset() {
	*x = GetCLIExecutableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCLIExecutableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCLIExecutableRequest) ProtoMessage() {}

func (x *GetCLIExecutableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCLIExecutableRequest.ProtoReflect.Descriptor instead.
func (*GetCLIExecutableRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{2}
}

func (x *GetCLIExecutableRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type GetCLIExecutableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty" toml:"data,omitempty" mapstructure:"data,omitempty"`
}

func (x *GetCLIExecutableResponse) Reset() {
	*x = GetCLIExecutableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCLIExecutableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCLIExecutableResponse) ProtoMessage() {}

func (x *GetCLIExecutableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCLIExecutableResponse.ProtoReflect.Descriptor instead.
func (*GetCLIExecutableResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{3}
}

func (x *GetCLIExecutableResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetCLIExecutableResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeInventoryRequest) Reset() {
	*x = NodeInventoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInventoryRequest) ProtoMessage() {}

func (x *NodeInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInventoryRequest.ProtoReflect.Descriptor instead.
func (*NodeInventoryRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{4}
}

type NodeInventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*InventoryNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" toml:"nodes,omitempty" mapstructure:"nodes,omitempty"`
}

func (x *NodeInventoryResponse) Reset() {
	*x = NodeInventoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInventoryResponse) ProtoMessage() {}

func (x *NodeInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInventoryResponse.ProtoReflect.Descriptor instead.
func (*NodeInventoryResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{5}
}

func (x *NodeInventoryResponse) GetNodes() []*InventoryNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type InfrastructureNodeDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" toml:"node_id,omitempty" mapstructure:"node_id,omitempty"`
}

func (x *InfrastructureNodeDeleteRequest) Reset() {
	*x = InfrastructureNodeDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfrastructureNodeDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfrastructureNodeDeleteRequest) ProtoMessage() {}

func (x *InfrastructureNodeDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfrastructureNodeDeleteRequest.ProtoReflect.Descriptor instead.
func (*InfrastructureNodeDeleteRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{6}
}

func (x *InfrastructureNodeDeleteRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type InfrastructureNodeDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InfrastructureNodeDeleteResponse) Reset() {
	*x = InfrastructureNodeDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfrastructureNodeDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfrastructureNodeDeleteResponse) ProtoMessage() {}

func (x *InfrastructureNodeDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfrastructureNodeDeleteResponse.ProtoReflect.Descriptor instead.
func (*InfrastructureNodeDeleteResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{7}
}

type InventoryNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Organization    string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty" toml:"organization,omitempty" mapstructure:"organization,omitempty"`
	Status          string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	PlatformFamily  string `protobuf:"bytes,4,opt,name=platform_family,json=platformFamily,proto3" json:"platform_family,omitempty" toml:"platform_family,omitempty" mapstructure:"platform_family,omitempty"`
	Platform        string `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty" toml:"platform,omitempty" mapstructure:"platform,omitempty"`
	PlatformVersion string `protobuf:"bytes,6,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty" toml:"platform_version,omitempty" mapstructure:"platform_version,omitempty"`
	Checkin         string `protobuf:"bytes,7,opt,name=checkin,proto3" json:"checkin,omitempty" toml:"checkin,omitempty" mapstructure:"checkin,omitempty"`
	ClientVersion   string `protobuf:"bytes,8,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty" toml:"client_version,omitempty" mapstructure:"client_version,omitempty"`
	Ec2InstanceId   string `protobuf:"bytes,9,opt,name=ec2_instance_id,json=ec2InstanceId,proto3" json:"ec2_instance_id,omitempty" toml:"ec2_instance_id,omitempty" mapstructure:"ec2_instance_id,omitempty"`
	Ec2InstanceType string `protobuf:"bytes,10,opt,name=ec2_instance_type,json=ec2InstanceType,proto3" json:"ec2_instance_type,omitempty" toml:"ec2_instance_type,omitempty" mapstructure:"ec2_instance_type,omitempty"`
}

func (x *InventoryNode) Reset() {
	*x = InventoryNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryNode) ProtoMessage() {}

func (x *InventoryNode) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryNode.ProtoReflect.Descriptor instead.
func (*InventoryNode) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{8}
}

func (x *InventoryNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InventoryNode) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *InventoryNode) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *InventoryNode) GetPlatformFamily() string {
	if x != nil {
		return x.PlatformFamily
	}
	return ""
}

func (x *InventoryNode) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *InventoryNode) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *InventoryNode) GetCheckin() string {
	if x != nil {
		return x.Checkin
	}
	return ""
}

func (x *InventoryNode) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *InventoryNode) GetEc2InstanceId() string {
	if x != nil {
		return x.Ec2InstanceId
	}
	return ""
}

func (x *InventoryNode) GetEc2InstanceType() string {
	if x != nil {
		return x.Ec2InstanceType
	}
	return ""
}

type UsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" toml:"start_time,omitempty" mapstructure:"start_time,omitempty"`
}

func (x *UsageRequest) Reset() {
	*x = UsageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageRequest) ProtoMessage() {}

func (x *UsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageRequest.ProtoReflect.Descriptor instead.
func (*UsageRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{9}
}

func (x *UsageRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type UsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeUsage `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" toml:"nodes,omitempty" mapstructure:"nodes,omitempty"`
}

func (x *UsageResponse) Reset() {
	*x = UsageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResponse) ProtoMessage() {}

func (x *UsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResponse.ProtoReflect.Descriptor instead.
func (*UsageResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{10}
}

func (x *UsageResponse) GetNodes() []*NodeUsage {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type NodeUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	LastSeen        string            `protobuf:"bytes,2,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty" toml:"last_seen,omitempty" mapstructure:"last_seen,omitempty"`
	LastCcrReceived string            `protobuf:"bytes,3,opt,name=last_ccr_received,json=lastCcrReceived,proto3" json:"last_ccr_received,omitempty" toml:"last_ccr_received,omitempty" mapstructure:"last_ccr_received,omitempty"`
	CheckinType     string            `protobuf:"bytes,4,opt,name=checkin_type,json=checkinType,proto3" json:"checkin_type,omitempty" toml:"checkin_type,omitempty" mapstructure:"checkin_type,omitempty"`
	Metadata        map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" toml:"metadata,omitempty" mapstructure:"metadata,omitempty"`
}

func (x *NodeUsage) Reset() {
	*x = NodeUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeUsage) ProtoMessage() {}

func (x *NodeUsage) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeUsage.ProtoReflect.Descriptor instead.
func (*NodeUsage) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{11}
}

func (x *NodeUsage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeUsage) GetLastSeen() string {
	if x != nil {
		return x.LastSeen
	}
	return ""
}

func (x *NodeUsage) GetLastCcrReceived() string {
	if x != nil {
		return x.LastCcrReceived
	}
	return ""
}

func (x *NodeUsage) GetCheckinType() string {
	if x != nil {
		return x.CheckinType
	}
	return ""
}

func (x *NodeUsage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GenerateAdminTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
}

func (x *GenerateAdminTokenRequest) Reset() {
	*x = GenerateAdminTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAdminTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAdminTokenRequest) ProtoMessage() {}

func (x *GenerateAdminTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAdminTokenRequest.ProtoReflect.Descriptor instead.
func (*GenerateAdminTokenRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{12}
}

func (x *GenerateAdminTokenRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GenerateAdminTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenValue string `protobuf:"bytes,1,opt,name=token_value,json=tokenValue,proto3" json:"token_value,omitempty" toml:"token_value,omitempty" mapstructure:"token_value,omitempty"`
	TokenId    string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty" toml:"token_id,omitempty" mapstructure:"token_id,omitempty"`
}

func (x *GenerateAdminTokenResponse) Reset() {
	*x = GenerateAdminTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAdminTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAdminTokenResponse) ProtoMessage() {}

func (x *GenerateAdminTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAdminTokenResponse.ProtoReflect.Descriptor instead.
func (*GenerateAdminTokenResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{13}
}

func (x *GenerateAdminTokenResponse) GetTokenValue() string {
	if x != nil {
		return x.TokenValue
	}
	return ""
}

func (x *GenerateAdminTokenResponse) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type NewDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config         *deployment.AutomateConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty" toml:"config,omitempty" mapstructure:"config,omitempty"`
	PackageOptions *PackageOptions            `protobuf:"bytes,2,opt,name=package_options,json=packageOptions,proto3" json:"package_options,omitempty" toml:"package_options,omitempty" mapstructure:"package_options,omitempty"`
}

func (x *NewDeploymentRequest) Reset() {
	*x = NewDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDeploymentRequest) ProtoMessage() {}

func (x *NewDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDeploymentRequest.ProtoReflect.Descriptor instead.
func (*NewDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{14}
}

func (x *NewDeploymentRequest) GetConfig() *deployment.AutomateConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *NewDeploymentRequest) GetPackageOptions() *PackageOptions {
	if x != nil {
		return x.PackageOptions
	}
	return nil
}

type ConfigureDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *deployment.AutomateConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty" toml:"config,omitempty" mapstructure:"config,omitempty"`
}

func (x *ConfigureDeploymentRequest) Reset() {
	*x = ConfigureDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureDeploymentRequest) ProtoMessage() {}

func (x *ConfigureDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureDeploymentRequest.ProtoReflect.Descriptor instead.
func (*ConfigureDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{15}
}

func (x *ConfigureDeploymentRequest) GetConfig() *deployment.AutomateConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigureDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId *DeploymentID              `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" toml:"deployment_id,omitempty" mapstructure:"deployment_id,omitempty"`
	Config       *deployment.AutomateConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty" toml:"config,omitempty" mapstructure:"config,omitempty"`
}

func (x *ConfigureDeploymentResponse) Reset() {
	*x = ConfigureDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureDeploymentResponse) ProtoMessage() {}

func (x *ConfigureDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureDeploymentResponse.ProtoReflect.Descriptor instead.
func (*ConfigureDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{16}
}

func (x *ConfigureDeploymentResponse) GetDeploymentId() *DeploymentID {
	if x != nil {
		return x.DeploymentId
	}
	return nil
}

func (x *ConfigureDeploymentResponse) GetConfig() *deployment.AutomateConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type DeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services            []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty" toml:"services,omitempty" mapstructure:"services,omitempty"`
	UsedBootstrapBundle bool     `protobuf:"varint,2,opt,name=used_bootstrap_bundle,json=usedBootstrapBundle,proto3" json:"used_bootstrap_bundle,omitempty" toml:"used_bootstrap_bundle,omitempty" mapstructure:"used_bootstrap_bundle,omitempty"`
}

func (x *DeployRequest) Reset() {
	*x = DeployRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployRequest) ProtoMessage() {}

func (x *DeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployRequest.ProtoReflect.Descriptor instead.
func (*DeployRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{17}
}

func (x *DeployRequest) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *DeployRequest) GetUsedBootstrapBundle() bool {
	if x != nil {
		return x.UsedBootstrapBundle
	}
	return false
}

type DeployResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" toml:"task_id,omitempty" mapstructure:"task_id,omitempty"`
}

func (x *DeployResponse) Reset() {
	*x = DeployResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployResponse) ProtoMessage() {}

func (x *DeployResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployResponse.ProtoReflect.Descriptor instead.
func (*DeployResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{18}
}

func (x *DeployResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DeployStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId *DeploymentID `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" toml:"deployment_id,omitempty" mapstructure:"deployment_id,omitempty"`
	TaskId       string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" toml:"task_id,omitempty" mapstructure:"task_id,omitempty"`
}

func (x *DeployStatusRequest) Reset() {
	*x = DeployStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployStatusRequest) ProtoMessage() {}

func (x *DeployStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployStatusRequest.ProtoReflect.Descriptor instead.
func (*DeployStatusRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{19}
}

func (x *DeployStatusRequest) GetDeploymentId() *DeploymentID {
	if x != nil {
		return x.DeploymentId
	}
	return nil
}

func (x *DeployStatusRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type RemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty" toml:"services,omitempty" mapstructure:"services,omitempty"`
}

func (x *RemoveRequest) Reset() {
	*x = RemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequest) ProtoMessage() {}

func (x *RemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequest.ProtoReflect.Descriptor instead.
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveRequest) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

type ManifestVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManifestVersionRequest) Reset() {
	*x = ManifestVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManifestVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestVersionRequest) ProtoMessage() {}

func (x *ManifestVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestVersionRequest.ProtoReflect.Descriptor instead.
func (*ManifestVersionRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{21}
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{22}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{23}
}

type DeployIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeployIDRequest) Reset() {
	*x = DeployIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployIDRequest) ProtoMessage() {}

func (x *DeployIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployIDRequest.ProtoReflect.Descriptor instead.
func (*DeployIDRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{24}
}

type RemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveResponse) Reset() {
	*x = RemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveResponse) ProtoMessage() {}

func (x *RemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveResponse.ProtoReflect.Descriptor instead.
func (*RemoveResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{25}
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{26}
}

type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{27}
}

type StopConvergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopConvergeRequest) Reset() {
	*x = StopConvergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopConvergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopConvergeRequest) ProtoMessage() {}

func (x *StopConvergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopConvergeRequest.ProtoReflect.Descriptor instead.
func (*StopConvergeRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{28}
}

type StopConvergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopConvergeResponse) Reset() {
	*x = StopConvergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopConvergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopConvergeResponse) ProtoMessage() {}

func (x *StopConvergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopConvergeResponse.ProtoReflect.Descriptor instead.
func (*StopConvergeResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{29}
}

type StartConvergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartConvergeRequest) Reset() {
	*x = StartConvergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartConvergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartConvergeRequest) ProtoMessage() {}

func (x *StartConvergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartConvergeRequest.ProtoReflect.Descriptor instead.
func (*StartConvergeRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{30}
}

type StartConvergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartConvergeResponse) Reset() {
	*x = StartConvergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartConvergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartConvergeResponse) ProtoMessage() {}

func (x *StartConvergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartConvergeResponse.ProtoReflect.Descriptor instead.
func (*StartConvergeResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{31}
}

type ServiceVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServiceVersionsRequest) Reset() {
	*x = ServiceVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceVersionsRequest) ProtoMessage() {}

func (x *ServiceVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceVersionsRequest.ProtoReflect.Descriptor instead.
func (*ServiceVersionsRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{32}
}

type SystemLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemLogsRequest) Reset() {
	*x = SystemLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemLogsRequest) ProtoMessage() {}

func (x *SystemLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemLogsRequest.ProtoReflect.Descriptor instead.
func (*SystemLogsRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{33}
}

type UpgradeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionsPath string `protobuf:"bytes,1,opt,name=versions_path,json=versionsPath,proto3" json:"versions_path,omitempty" toml:"versions_path,omitempty" mapstructure:"versions_path,omitempty"`
}

func (x *UpgradeStatusRequest) Reset() {
	*x = UpgradeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeStatusRequest) ProtoMessage() {}

func (x *UpgradeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeStatusRequest.ProtoReflect.Descriptor instead.
func (*UpgradeStatusRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{34}
}

func (x *UpgradeStatusRequest) GetVersionsPath() string {
	if x != nil {
		return x.VersionsPath
	}
	return ""
}

type UpgradeStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             UpgradeStatusResponse_UpgradeState `protobuf:"varint,1,opt,name=state,proto3,enum=chef.automate.domain.deployment.UpgradeStatusResponse_UpgradeState" json:"state,omitempty" toml:"state,omitempty" mapstructure:"state,omitempty"`
	RemainingServices []*UpgradingService                `protobuf:"bytes,4,rep,name=remaining_services,json=remainingServices,proto3" json:"remaining_services,omitempty" toml:"remaining_services,omitempty" mapstructure:"remaining_services,omitempty"`
	// latest_available_version is the version latest version
	// available in the configured channel for this deployment.
	LatestAvailableVersion string `protobuf:"bytes,3,opt,name=latest_available_version,json=latestAvailableVersion,proto3" json:"latest_available_version,omitempty" toml:"latest_available_version,omitempty" mapstructure:"latest_available_version,omitempty"`
	// desired_version is the version that we think we should be
	// upgrading to. This might be newer than the
	// latest_available_version if a user has requested a manual
	// upgrade to a newer version.
	DesiredVersion string `protobuf:"bytes,5,opt,name=desired_version,json=desiredVersion,proto3" json:"desired_version,omitempty" toml:"desired_version,omitempty" mapstructure:"desired_version,omitempty"`
	// current_version is the manifest in use by the deployment
	// right now.
	CurrentVersion string `protobuf:"bytes,6,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty" toml:"current_version,omitempty" mapstructure:"current_version,omitempty"`
	// is_airgapped is true if the deployment is in airgap mode
	IsAirgapped bool `protobuf:"varint,7,opt,name=is_airgapped,json=isAirgapped,proto3" json:"is_airgapped,omitempty" toml:"is_airgapped,omitempty" mapstructure:"is_airgapped,omitempty"`
	// is_converge_disable is true if converging has been disabled.
	// This will prevent things from upgrading
	IsConvergeDisable bool `protobuf:"varint,8,opt,name=is_converge_disable,json=isConvergeDisable,proto3" json:"is_converge_disable,omitempty" toml:"is_converge_disable,omitempty" mapstructure:"is_converge_disable,omitempty"`
	// is_converge_compatable is true in case the upgrade is minor/patch, and upgrading to major with --major flag
	// and is false, if the next upgrade is major and does not provided --major flag.
	IsConvergeCompatable bool `protobuf:"varint,9,opt,name=is_converge_compatable,json=isConvergeCompatable,proto3" json:"is_converge_compatable,omitempty" toml:"is_converge_compatable,omitempty" mapstructure:"is_converge_compatable,omitempty"`
}

func (x *UpgradeStatusResponse) Reset() {
	*x = UpgradeStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeStatusResponse) ProtoMessage() {}

func (x *UpgradeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeStatusResponse.ProtoReflect.Descriptor instead.
func (*UpgradeStatusResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{35}
}

func (x *UpgradeStatusResponse) GetState() UpgradeStatusResponse_UpgradeState {
	if x != nil {
		return x.State
	}
	return UpgradeStatusResponse_UNKNOWN
}

func (x *UpgradeStatusResponse) GetRemainingServices() []*UpgradingService {
	if x != nil {
		return x.RemainingServices
	}
	return nil
}

func (x *UpgradeStatusResponse) GetLatestAvailableVersion() string {
	if x != nil {
		return x.LatestAvailableVersion
	}
	return ""
}

func (x *UpgradeStatusResponse) GetDesiredVersion() string {
	if x != nil {
		return x.DesiredVersion
	}
	return ""
}

func (x *UpgradeStatusResponse) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

func (x *UpgradeStatusResponse) GetIsAirgapped() bool {
	if x != nil {
		return x.IsAirgapped
	}
	return false
}

func (x *UpgradeStatusResponse) GetIsConvergeDisable() bool {
	if x != nil {
		return x.IsConvergeDisable
	}
	return false
}

func (x *UpgradeStatusResponse) GetIsConvergeCompatable() bool {
	if x != nil {
		return x.IsConvergeCompatable
	}
	return false
}

type SetLogLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetLogLevelRequest) Reset() {
	*x = SetLogLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLogLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelRequest) ProtoMessage() {}

func (x *SetLogLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelRequest.ProtoReflect.Descriptor instead.
func (*SetLogLevelRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{36}
}

type SetLogLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetLogLevelResponse) Reset() {
	*x = SetLogLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLogLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelResponse) ProtoMessage() {}

func (x *SetLogLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelResponse.ProtoReflect.Descriptor instead.
func (*SetLogLevelResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{37}
}

type UpgradingService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *ServiceVersion `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty" toml:"target,omitempty" mapstructure:"target,omitempty"`
	Actual *ServiceVersion `protobuf:"bytes,2,opt,name=actual,proto3" json:"actual,omitempty" toml:"actual,omitempty" mapstructure:"actual,omitempty"`
}

func (x *UpgradingService) Reset() {
	*x = UpgradingService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradingService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradingService) ProtoMessage() {}

func (x *UpgradingService) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradingService.ProtoReflect.Descriptor instead.
func (*UpgradingService) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{38}
}

func (x *UpgradingService) GetTarget() *ServiceVersion {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *UpgradingService) GetActual() *ServiceVersion {
	if x != nil {
		return x.Actual
	}
	return nil
}

type PackageOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverrideOrigin string `protobuf:"bytes,1,opt,name=override_origin,json=overrideOrigin,proto3" json:"override_origin,omitempty" toml:"override_origin,omitempty" mapstructure:"override_origin,omitempty"`
	HartifactsPath string `protobuf:"bytes,2,opt,name=hartifacts_path,json=hartifactsPath,proto3" json:"hartifacts_path,omitempty" toml:"hartifacts_path,omitempty" mapstructure:"hartifacts_path,omitempty"`
}

func (x *PackageOptions) Reset() {
	*x = PackageOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageOptions) ProtoMessage() {}

func (x *PackageOptions) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageOptions.ProtoReflect.Descriptor instead.
func (*PackageOptions) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{39}
}

func (x *PackageOptions) GetOverrideOrigin() string {
	if x != nil {
		return x.OverrideOrigin
	}
	return ""
}

func (x *PackageOptions) GetHartifactsPath() string {
	if x != nil {
		return x.HartifactsPath
	}
	return ""
}

type ConfigureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty" toml:"service_name,omitempty" mapstructure:"service_name,omitempty"`
	ConfigToml  string `protobuf:"bytes,2,opt,name=config_toml,json=configToml,proto3" json:"config_toml,omitempty" toml:"config_toml,omitempty" mapstructure:"config_toml,omitempty"`
}

func (x *ConfigureRequest) Reset() {
	*x = ConfigureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureRequest) ProtoMessage() {}

func (x *ConfigureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureRequest.ProtoReflect.Descriptor instead.
func (*ConfigureRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{40}
}

func (x *ConfigureRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ConfigureRequest) GetConfigToml() string {
	if x != nil {
		return x.ConfigToml
	}
	return ""
}

type DeploymentID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" toml:"created_at,omitempty" mapstructure:"created_at,omitempty"`
	LastAction string                 `protobuf:"bytes,3,opt,name=last_action,json=lastAction,proto3" json:"last_action,omitempty" toml:"last_action,omitempty" mapstructure:"last_action,omitempty"`
}

func (x *DeploymentID) Reset() {
	*x = DeploymentID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentID) ProtoMessage() {}

func (x *DeploymentID) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentID.ProtoReflect.Descriptor instead.
func (*DeploymentID) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{41}
}

func (x *DeploymentID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeploymentID) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeploymentID) GetLastAction() string {
	if x != nil {
		return x.LastAction
	}
	return ""
}

type DeploymentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty" toml:"msg,omitempty" mapstructure:"msg,omitempty"`
}

func (x *DeploymentStatus) Reset() {
	*x = DeploymentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentStatus) ProtoMessage() {}

func (x *DeploymentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentStatus.ProtoReflect.Descriptor instead.
func (*DeploymentStatus) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{42}
}

func (x *DeploymentStatus) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DeployEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence     uint64                 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty" toml:"sequence,omitempty" mapstructure:"sequence,omitempty"`
	DeploymentId string                 `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" toml:"deployment_id,omitempty" mapstructure:"deployment_id,omitempty"`
	Time         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty" toml:"time,omitempty" mapstructure:"time,omitempty"`
	// Types that are assignable to Event:
	//	*DeployEvent_Deploy_
	//	*DeployEvent_Phase_
	//	*DeployEvent_PhaseStep_
	//	*DeployEvent_TaskComplete_
	//	*DeployEvent_Backup_
	Event isDeployEvent_Event `protobuf_oneof:"event"`
}

func (x *DeployEvent) Reset() {
	*x = DeployEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployEvent) ProtoMessage() {}

func (x *DeployEvent) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployEvent.ProtoReflect.Descriptor instead.
func (*DeployEvent) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{43}
}

func (x *DeployEvent) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *DeployEvent) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *DeployEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (m *DeployEvent) GetEvent() isDeployEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *DeployEvent) GetDeploy() *DeployEvent_Deploy {
	if x, ok := x.GetEvent().(*DeployEvent_Deploy_); ok {
		return x.Deploy
	}
	return nil
}

func (x *DeployEvent) GetPhase() *DeployEvent_Phase {
	if x, ok := x.GetEvent().(*DeployEvent_Phase_); ok {
		return x.Phase
	}
	return nil
}

func (x *DeployEvent) GetPhaseStep() *DeployEvent_PhaseStep {
	if x, ok := x.GetEvent().(*DeployEvent_PhaseStep_); ok {
		return x.PhaseStep
	}
	return nil
}

func (x *DeployEvent) GetTaskComplete() *DeployEvent_TaskComplete {
	if x, ok := x.GetEvent().(*DeployEvent_TaskComplete_); ok {
		return x.TaskComplete
	}
	return nil
}

func (x *DeployEvent) GetBackup() *DeployEvent_Backup {
	if x, ok := x.GetEvent().(*DeployEvent_Backup_); ok {
		return x.Backup
	}
	return nil
}

type isDeployEvent_Event interface {
	isDeployEvent_Event()
}

type DeployEvent_Deploy_ struct {
	Deploy *DeployEvent_Deploy `protobuf:"bytes,5,opt,name=deploy,proto3,oneof"`
}

type DeployEvent_Phase_ struct {
	Phase *DeployEvent_Phase `protobuf:"bytes,6,opt,name=phase,proto3,oneof"`
}

type DeployEvent_PhaseStep_ struct {
	PhaseStep *DeployEvent_PhaseStep `protobuf:"bytes,7,opt,name=phase_step,json=phaseStep,proto3,oneof"`
}

type DeployEvent_TaskComplete_ struct {
	TaskComplete *DeployEvent_TaskComplete `protobuf:"bytes,8,opt,name=task_complete,json=taskComplete,proto3,oneof"`
}

type DeployEvent_Backup_ struct {
	Backup *DeployEvent_Backup `protobuf:"bytes,9,opt,name=backup,proto3,oneof"`
}

func (*DeployEvent_Deploy_) isDeployEvent_Event() {}

func (*DeployEvent_Phase_) isDeployEvent_Event() {}

func (*DeployEvent_PhaseStep_) isDeployEvent_Event() {}

func (*DeployEvent_TaskComplete_) isDeployEvent_Event() {}

func (*DeployEvent_Backup_) isDeployEvent_Event() {}

type LogLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line string `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty" toml:"line,omitempty" mapstructure:"line,omitempty"`
}

func (x *LogLine) Reset() {
	*x = LogLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLine) ProtoMessage() {}

func (x *LogLine) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLine.ProtoReflect.Descriptor instead.
func (*LogLine) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{44}
}

func (x *LogLine) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

type SupportBundleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StagingDir string `protobuf:"bytes,1,opt,name=staging_dir,json=stagingDir,proto3" json:"staging_dir,omitempty" toml:"staging_dir,omitempty" mapstructure:"staging_dir,omitempty"`
}

func (x *SupportBundleConfig) Reset() {
	*x = SupportBundleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportBundleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportBundleConfig) ProtoMessage() {}

func (x *SupportBundleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportBundleConfig.ProtoReflect.Descriptor instead.
func (*SupportBundleConfig) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{45}
}

func (x *SupportBundleConfig) GetStagingDir() string {
	if x != nil {
		return x.StagingDir
	}
	return ""
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{46}
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStatus    *ServiceStatus            `protobuf:"bytes,1,opt,name=service_status,json=serviceStatus,proto3" json:"service_status,omitempty" toml:"service_status,omitempty" mapstructure:"service_status,omitempty"`
	DeploymentConfig *deployment.ConfigRequest `protobuf:"bytes,2,opt,name=deployment_config,json=deploymentConfig,proto3" json:"deployment_config,omitempty" toml:"deployment_config,omitempty" mapstructure:"deployment_config,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{47}
}

func (x *StatusResponse) GetServiceStatus() *ServiceStatus {
	if x != nil {
		return x.ServiceStatus
	}
	return nil
}

func (x *StatusResponse) GetDeploymentConfig() *deployment.ConfigRequest {
	if x != nil {
		return x.DeploymentConfig
	}
	return nil
}

type ServiceVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*ServiceVersion `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty" toml:"services,omitempty" mapstructure:"services,omitempty"`
}

func (x *ServiceVersionsResponse) Reset() {
	*x = ServiceVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceVersionsResponse) ProtoMessage() {}

func (x *ServiceVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceVersionsResponse.ProtoReflect.Descriptor instead.
func (*ServiceVersionsResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{48}
}

func (x *ServiceVersionsResponse) GetServices() []*ServiceVersion {
	if x != nil {
		return x.Services
	}
	return nil
}

type ServiceVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Origin  string `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty" toml:"origin,omitempty" mapstructure:"origin,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	Release string `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty" toml:"release,omitempty" mapstructure:"release,omitempty"`
}

func (x *ServiceVersion) Reset() {
	*x = ServiceVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceVersion) ProtoMessage() {}

func (x *ServiceVersion) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceVersion.ProtoReflect.Descriptor instead.
func (*ServiceVersion) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{49}
}

func (x *ServiceVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceVersion) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ServiceVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServiceVersion) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

type LicenseStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LicenseStatusRequest) Reset() {
	*x = LicenseStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseStatusRequest) ProtoMessage() {}

func (x *LicenseStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseStatusRequest.ProtoReflect.Descriptor instead.
func (*LicenseStatusRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{50}
}

type LicenseStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set            bool                   `protobuf:"varint,1,opt,name=set,proto3" json:"set,omitempty" toml:"set,omitempty" mapstructure:"set,omitempty"`
	LicenseId      string                 `protobuf:"bytes,2,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty" toml:"license_id,omitempty" mapstructure:"license_id,omitempty"`
	CustomerName   string                 `protobuf:"bytes,3,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty" toml:"customer_name,omitempty" mapstructure:"customer_name,omitempty"`
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty" toml:"expiration_date,omitempty" mapstructure:"expiration_date,omitempty"`
}

func (x *LicenseStatusResponse) Reset() {
	*x = LicenseStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseStatusResponse) ProtoMessage() {}

func (x *LicenseStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseStatusResponse.ProtoReflect.Descriptor instead.
func (*LicenseStatusResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{51}
}

func (x *LicenseStatusResponse) GetSet() bool {
	if x != nil {
		return x.Set
	}
	return false
}

func (x *LicenseStatusResponse) GetLicenseId() string {
	if x != nil {
		return x.LicenseId
	}
	return ""
}

func (x *LicenseStatusResponse) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *LicenseStatusResponse) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

type LicenseApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License string `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty" toml:"license,omitempty" mapstructure:"license,omitempty"`
	Force   bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty" toml:"force,omitempty" mapstructure:"force,omitempty"`
}

func (x *LicenseApplyRequest) Reset() {
	*x = LicenseApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseApplyRequest) ProtoMessage() {}

func (x *LicenseApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseApplyRequest.ProtoReflect.Descriptor instead.
func (*LicenseApplyRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{52}
}

func (x *LicenseApplyRequest) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *LicenseApplyRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type LicenseApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated   bool   `protobuf:"varint,1,opt,name=updated,proto3" json:"updated,omitempty" toml:"updated,omitempty" mapstructure:"updated,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" toml:"message,omitempty" mapstructure:"message,omitempty"`
	Duplicate bool   `protobuf:"varint,3,opt,name=duplicate,proto3" json:"duplicate,omitempty" toml:"duplicate,omitempty" mapstructure:"duplicate,omitempty"`
}

func (x *LicenseApplyResponse) Reset() {
	*x = LicenseApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseApplyResponse) ProtoMessage() {}

func (x *LicenseApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseApplyResponse.ProtoReflect.Descriptor instead.
func (*LicenseApplyResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{53}
}

func (x *LicenseApplyResponse) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

func (x *LicenseApplyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LicenseApplyResponse) GetDuplicate() bool {
	if x != nil {
		return x.Duplicate
	}
	return false
}

type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*ServiceState `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty" toml:"services,omitempty" mapstructure:"services,omitempty"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{54}
}

func (x *ServiceStatus) GetServices() []*ServiceState {
	if x != nil {
		return x.Services
	}
	return nil
}

type ServiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	State  ServiceState_State `protobuf:"varint,2,opt,name=state,proto3,enum=chef.automate.domain.deployment.ServiceState_State" json:"state,omitempty" toml:"state,omitempty" mapstructure:"state,omitempty"`
	Pid    uint64             `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty" toml:"pid,omitempty" mapstructure:"pid,omitempty"`
	Uptime uint64             `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty" toml:"uptime,omitempty" mapstructure:"uptime,omitempty"`
}

func (x *ServiceState) Reset() {
	*x = ServiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceState) ProtoMessage() {}

func (x *ServiceState) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceState.ProtoReflect.Descriptor instead.
func (*ServiceState) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{55}
}

func (x *ServiceState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceState) GetState() ServiceState_State {
	if x != nil {
		return x.State
	}
	return ServiceState_CONNECTION_ERROR
}

func (x *ServiceState) GetPid() uint64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ServiceState) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

type GatherLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// log_lines is the number of log lines we will collect from
	// the system log (journald). A log_size of 0 means collect
	// all logs.
	LogLines uint64 `protobuf:"varint,1,opt,name=log_lines,json=logLines,proto3" json:"log_lines,omitempty" toml:"log_lines,omitempty" mapstructure:"log_lines,omitempty"`
}

func (x *GatherLogsRequest) Reset() {
	*x = GatherLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherLogsRequest) ProtoMessage() {}

func (x *GatherLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherLogsRequest.ProtoReflect.Descriptor instead.
func (*GatherLogsRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{56}
}

func (x *GatherLogsRequest) GetLogLines() uint64 {
	if x != nil {
		return x.LogLines
	}
	return 0
}

type GatherLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleName     string `protobuf:"bytes,1,opt,name=bundle_name,json=bundleName,proto3" json:"bundle_name,omitempty" toml:"bundle_name,omitempty" mapstructure:"bundle_name,omitempty"`
	BundleChecksum string `protobuf:"bytes,2,opt,name=bundle_checksum,json=bundleChecksum,proto3" json:"bundle_checksum,omitempty" toml:"bundle_checksum,omitempty" mapstructure:"bundle_checksum,omitempty"`
	BundleSize     int64  `protobuf:"varint,3,opt,name=bundle_size,json=bundleSize,proto3" json:"bundle_size,omitempty" toml:"bundle_size,omitempty" mapstructure:"bundle_size,omitempty"`
}

func (x *GatherLogsResponse) Reset() {
	*x = GatherLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherLogsResponse) ProtoMessage() {}

func (x *GatherLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherLogsResponse.ProtoReflect.Descriptor instead.
func (*GatherLogsResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{57}
}

func (x *GatherLogsResponse) GetBundleName() string {
	if x != nil {
		return x.BundleName
	}
	return ""
}

func (x *GatherLogsResponse) GetBundleChecksum() string {
	if x != nil {
		return x.BundleChecksum
	}
	return ""
}

func (x *GatherLogsResponse) GetBundleSize() int64 {
	if x != nil {
		return x.BundleSize
	}
	return 0
}

type GatherLogsDownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleName string `protobuf:"bytes,1,opt,name=bundle_name,json=bundleName,proto3" json:"bundle_name,omitempty" toml:"bundle_name,omitempty" mapstructure:"bundle_name,omitempty"`
}

func (x *GatherLogsDownloadRequest) Reset() {
	*x = GatherLogsDownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherLogsDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherLogsDownloadRequest) ProtoMessage() {}

func (x *GatherLogsDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherLogsDownloadRequest.ProtoReflect.Descriptor instead.
func (*GatherLogsDownloadRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{58}
}

func (x *GatherLogsDownloadRequest) GetBundleName() string {
	if x != nil {
		return x.BundleName
	}
	return ""
}

type GatherLogsDownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" toml:"data,omitempty" mapstructure:"data,omitempty"`
}

func (x *GatherLogsDownloadResponse) Reset() {
	*x = GatherLogsDownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatherLogsDownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatherLogsDownloadResponse) ProtoMessage() {}

func (x *GatherLogsDownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatherLogsDownloadResponse.ProtoReflect.Descriptor instead.
func (*GatherLogsDownloadResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{59}
}

func (x *GatherLogsDownloadResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RestartServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartServicesRequest) Reset() {
	*x = RestartServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartServicesRequest) ProtoMessage() {}

func (x *RestartServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartServicesRequest.ProtoReflect.Descriptor instead.
func (*RestartServicesRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{60}
}

type RestartServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" toml:"task_id,omitempty" mapstructure:"task_id,omitempty"`
}

func (x *RestartServicesResponse) Reset() {
	*x = RestartServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartServicesResponse) ProtoMessage() {}

func (x *RestartServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartServicesResponse.ProtoReflect.Descriptor instead.
func (*RestartServicesResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{61}
}

func (x *RestartServicesResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// AutomateConfig Messages
type GetAutomateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAutomateConfigRequest) Reset() {
	*x = GetAutomateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAutomateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAutomateConfigRequest) ProtoMessage() {}

func (x *GetAutomateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAutomateConfigRequest.ProtoReflect.Descriptor instead.
func (*GetAutomateConfigRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{62}
}

type GetAutomateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *deployment.AutomateConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty" toml:"config,omitempty" mapstructure:"config,omitempty"`
	Hash   uint64                     `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty" toml:"hash,omitempty" mapstructure:"hash,omitempty"`
}

func (x *GetAutomateConfigResponse) Reset() {
	*x = GetAutomateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAutomateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAutomateConfigResponse) ProtoMessage() {}

func (x *GetAutomateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAutomateConfigResponse.ProtoReflect.Descriptor instead.
func (*GetAutomateConfigResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{63}
}

func (x *GetAutomateConfigResponse) GetConfig() *deployment.AutomateConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetAutomateConfigResponse) GetHash() uint64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type PatchAutomateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *deployment.AutomateConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty" toml:"config,omitempty" mapstructure:"config,omitempty"`
	Hash   uint64                     `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty" toml:"hash,omitempty" mapstructure:"hash,omitempty"`
}

func (x *PatchAutomateConfigRequest) Reset() {
	*x = PatchAutomateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAutomateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAutomateConfigRequest) ProtoMessage() {}

func (x *PatchAutomateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAutomateConfigRequest.ProtoReflect.Descriptor instead.
func (*PatchAutomateConfigRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{64}
}

func (x *PatchAutomateConfigRequest) GetConfig() *deployment.AutomateConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PatchAutomateConfigRequest) GetHash() uint64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type PatchAutomateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" toml:"task_id,omitempty" mapstructure:"task_id,omitempty"`
}

func (x *PatchAutomateConfigResponse) Reset() {
	*x = PatchAutomateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAutomateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAutomateConfigResponse) ProtoMessage() {}

func (x *PatchAutomateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAutomateConfigResponse.ProtoReflect.Descriptor instead.
func (*PatchAutomateConfigResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{65}
}

func (x *PatchAutomateConfigResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type SetAutomateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *deployment.AutomateConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty" toml:"config,omitempty" mapstructure:"config,omitempty"`
}

func (x *SetAutomateConfigRequest) Reset() {
	*x = SetAutomateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAutomateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAutomateConfigRequest) ProtoMessage() {}

func (x *SetAutomateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAutomateConfigRequest.ProtoReflect.Descriptor instead.
func (*SetAutomateConfigRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{66}
}

func (x *SetAutomateConfigRequest) GetConfig() *deployment.AutomateConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetAutomateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" toml:"task_id,omitempty" mapstructure:"task_id,omitempty"`
}

func (x *SetAutomateConfigResponse) Reset() {
	*x = SetAutomateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAutomateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAutomateConfigResponse) ProtoMessage() {}

func (x *SetAutomateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAutomateConfigResponse.ProtoReflect.Descriptor instead.
func (*SetAutomateConfigResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{67}
}

func (x *SetAutomateConfigResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type DumpDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DumpDBRequest) Reset() {
	*x = DumpDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpDBRequest) ProtoMessage() {}

func (x *DumpDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpDBRequest.ProtoReflect.Descriptor instead.
func (*DumpDBRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{68}
}

type DumpDBResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" toml:"data,omitempty" mapstructure:"data,omitempty"`
}

func (x *DumpDBResponse) Reset() {
	*x = DumpDBResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpDBResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpDBResponse) ProtoMessage() {}

func (x *DumpDBResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpDBResponse.ProtoReflect.Descriptor instead.
func (*DumpDBResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{69}
}

func (x *DumpDBResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ManifestVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildTimestamp string `protobuf:"bytes,1,opt,name=build_timestamp,json=buildTimestamp,proto3" json:"build_timestamp,omitempty" toml:"build_timestamp,omitempty" mapstructure:"build_timestamp,omitempty"`
	BuildSha       string `protobuf:"bytes,2,opt,name=build_sha,json=buildSha,proto3" json:"build_sha,omitempty" toml:"build_sha,omitempty" mapstructure:"build_sha,omitempty"`
	CliRelease     string `protobuf:"bytes,3,opt,name=cli_release,json=cliRelease,proto3" json:"cli_release,omitempty" toml:"cli_release,omitempty" mapstructure:"cli_release,omitempty"`
}

func (x *ManifestVersionResponse) Reset() {
	*x = ManifestVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManifestVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestVersionResponse) ProtoMessage() {}

func (x *ManifestVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestVersionResponse.ProtoReflect.Descriptor instead.
func (*ManifestVersionResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{70}
}

func (x *ManifestVersionResponse) GetBuildTimestamp() string {
	if x != nil {
		return x.BuildTimestamp
	}
	return ""
}

func (x *ManifestVersionResponse) GetBuildSha() string {
	if x != nil {
		return x.BuildSha
	}
	return ""
}

func (x *ManifestVersionResponse) GetCliRelease() string {
	if x != nil {
		return x.CliRelease
	}
	return ""
}

type DeployIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" toml:"deployment_id,omitempty" mapstructure:"deployment_id,omitempty"`
}

func (x *DeployIDResponse) Reset() {
	*x = DeployIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployIDResponse) ProtoMessage() {}

func (x *DeployIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployIDResponse.ProtoReflect.Descriptor instead.
func (*DeployIDResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{71}
}

func (x *DeployIDResponse) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

// Backup messages
type BackupTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	State BackupTask_BackupState `protobuf:"varint,2,opt,name=state,proto3,enum=chef.automate.domain.deployment.BackupTask_BackupState" json:"state,omitempty" toml:"state,omitempty" mapstructure:"state,omitempty"`
}

func (x *BackupTask) Reset() {
	*x = BackupTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupTask) ProtoMessage() {}

func (x *BackupTask) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupTask.ProtoReflect.Descriptor instead.
func (*BackupTask) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{72}
}

func (x *BackupTask) GetId() *timestamppb.Timestamp {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BackupTask) GetState() BackupTask_BackupState {
	if x != nil {
		return x.State
	}
	return BackupTask_IN_PROGRESS
}

type BackupDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Sha256        string `protobuf:"bytes,2,opt,name=sha256,proto3" json:"sha256,omitempty" toml:"sha256,omitempty" mapstructure:"sha256,omitempty"`
	ServerVersion string `protobuf:"bytes,3,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty" toml:"server_version,omitempty" mapstructure:"server_version,omitempty"`
	CliVersion    string `protobuf:"bytes,4,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty" toml:"cli_version,omitempty" mapstructure:"cli_version,omitempty"`
}

func (x *BackupDescription) Reset() {
	*x = BackupDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDescription) ProtoMessage() {}

func (x *BackupDescription) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDescription.ProtoReflect.Descriptor instead.
func (*BackupDescription) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{73}
}

func (x *BackupDescription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BackupDescription) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *BackupDescription) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *BackupDescription) GetCliVersion() string {
	if x != nil {
		return x.CliVersion
	}
	return ""
}

type S3BackupLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName   string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty" toml:"bucket_name,omitempty" mapstructure:"bucket_name,omitempty"`
	BasePath     string `protobuf:"bytes,2,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty" toml:"base_path,omitempty" mapstructure:"base_path,omitempty"`
	Endpoint     string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty" toml:"endpoint,omitempty" mapstructure:"endpoint,omitempty"`
	AccessKey    string `protobuf:"bytes,4,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty" toml:"access_key,omitempty" mapstructure:"access_key,omitempty"`
	SecretKey    string `protobuf:"bytes,5,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty" toml:"secret_key,omitempty" mapstructure:"secret_key,omitempty"`
	SessionToken string `protobuf:"bytes,6,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty" toml:"session_token,omitempty" mapstructure:"session_token,omitempty"`
}

func (x *S3BackupLocation) Reset() {
	*x = S3BackupLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3BackupLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3BackupLocation) ProtoMessage() {}

func (x *S3BackupLocation) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3BackupLocation.ProtoReflect.Descriptor instead.
func (*S3BackupLocation) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{74}
}

func (x *S3BackupLocation) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3BackupLocation) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

func (x *S3BackupLocation) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *S3BackupLocation) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *S3BackupLocation) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *S3BackupLocation) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

type GCSBackupLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName                   string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty" toml:"bucket_name,omitempty" mapstructure:"bucket_name,omitempty"`
	BasePath                     string `protobuf:"bytes,2,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty" toml:"base_path,omitempty" mapstructure:"base_path,omitempty"`
	GoogleApplicationCredentials string `protobuf:"bytes,3,opt,name=google_application_credentials,json=googleApplicationCredentials,proto3" json:"google_application_credentials,omitempty" toml:"google_application_credentials,omitempty" mapstructure:"google_application_credentials,omitempty"`
}

func (x *GCSBackupLocation) Reset() {
	*x = GCSBackupLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCSBackupLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSBackupLocation) ProtoMessage() {}

func (x *GCSBackupLocation) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSBackupLocation.ProtoReflect.Descriptor instead.
func (*GCSBackupLocation) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{75}
}

func (x *GCSBackupLocation) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *GCSBackupLocation) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

func (x *GCSBackupLocation) GetGoogleApplicationCredentials() string {
	if x != nil {
		return x.GoogleApplicationCredentials
	}
	return ""
}

type BackupRestoreTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Backup *BackupTask            `protobuf:"bytes,2,opt,name=backup,proto3" json:"backup,omitempty" toml:"backup,omitempty" mapstructure:"backup,omitempty"`
	// When this gets called the backup directory should exist in the deployment
	// config, however, it is whatever the backup directory was when the backup
	// was created. We need to support passing in the current backup directory
	// in case it's changed.
	BackupDir      string `protobuf:"bytes,3,opt,name=backup_dir,json=backupDir,proto3" json:"backup_dir,omitempty" toml:"backup_dir,omitempty" mapstructure:"backup_dir,omitempty"`
	OverrideOrigin string `protobuf:"bytes,4,opt,name=override_origin,json=overrideOrigin,proto3" json:"override_origin,omitempty" toml:"override_origin,omitempty" mapstructure:"override_origin,omitempty"`
	HartifactsPath string `protobuf:"bytes,5,opt,name=hartifacts_path,json=hartifactsPath,proto3" json:"hartifacts_path,omitempty" toml:"hartifacts_path,omitempty" mapstructure:"hartifacts_path,omitempty"`
	Channel        string `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty" toml:"channel,omitempty" mapstructure:"channel,omitempty"`
	// When we install packages we need to know whether we should rely on the
	// current manifest or upgrade to a new one.
	Upgrade bool `protobuf:"varint,6,opt,name=upgrade,proto3" json:"upgrade,omitempty" toml:"upgrade,omitempty" mapstructure:"upgrade,omitempty"`
	// If provided, the restore will install the manifest and packages from the
	// airgap artifact. upgrade will be ignored.
	Airgap bool `protobuf:"varint,8,opt,name=airgap,proto3" json:"airgap,omitempty" toml:"airgap,omitempty" mapstructure:"airgap,omitempty"`
	// If S3BackupLocation is provided, the backup will be restored from S3
	S3BackupLocation  *S3BackupLocation          `protobuf:"bytes,9,opt,name=s3_backup_location,json=s3BackupLocation,proto3" json:"s3_backup_location,omitempty" toml:"s3_backup_location,omitempty" mapstructure:"s3_backup_location,omitempty"`
	Sha256            string                     `protobuf:"bytes,10,opt,name=sha256,proto3" json:"sha256,omitempty" toml:"sha256,omitempty" mapstructure:"sha256,omitempty"`
	Manifest          *ReleaseManifest           `protobuf:"bytes,11,opt,name=manifest,proto3" json:"manifest,omitempty" toml:"manifest,omitempty" mapstructure:"manifest,omitempty"`
	PatchConfig       *deployment.AutomateConfig `protobuf:"bytes,12,opt,name=patch_config,json=patchConfig,proto3" json:"patch_config,omitempty" toml:"patch_config,omitempty" mapstructure:"patch_config,omitempty"`
	SetConfig         *deployment.AutomateConfig `protobuf:"bytes,13,opt,name=set_config,json=setConfig,proto3" json:"set_config,omitempty" toml:"set_config,omitempty" mapstructure:"set_config,omitempty"`
	GcsBackupLocation *GCSBackupLocation         `protobuf:"bytes,14,opt,name=gcs_backup_location,json=gcsBackupLocation,proto3" json:"gcs_backup_location,omitempty" toml:"gcs_backup_location,omitempty" mapstructure:"gcs_backup_location,omitempty"`
}

func (x *BackupRestoreTask) Reset() {
	*x = BackupRestoreTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRestoreTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRestoreTask) ProtoMessage() {}

func (x *BackupRestoreTask) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRestoreTask.ProtoReflect.Descriptor instead.
func (*BackupRestoreTask) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{76}
}

func (x *BackupRestoreTask) GetId() *timestamppb.Timestamp {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BackupRestoreTask) GetBackup() *BackupTask {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *BackupRestoreTask) GetBackupDir() string {
	if x != nil {
		return x.BackupDir
	}
	return ""
}

func (x *BackupRestoreTask) GetOverrideOrigin() string {
	if x != nil {
		return x.OverrideOrigin
	}
	return ""
}

func (x *BackupRestoreTask) GetHartifactsPath() string {
	if x != nil {
		return x.HartifactsPath
	}
	return ""
}

func (x *BackupRestoreTask) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *BackupRestoreTask) GetUpgrade() bool {
	if x != nil {
		return x.Upgrade
	}
	return false
}

func (x *BackupRestoreTask) GetAirgap() bool {
	if x != nil {
		return x.Airgap
	}
	return false
}

func (x *BackupRestoreTask) GetS3BackupLocation() *S3BackupLocation {
	if x != nil {
		return x.S3BackupLocation
	}
	return nil
}

func (x *BackupRestoreTask) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *BackupRestoreTask) GetManifest() *ReleaseManifest {
	if x != nil {
		return x.Manifest
	}
	return nil
}

func (x *BackupRestoreTask) GetPatchConfig() *deployment.AutomateConfig {
	if x != nil {
		return x.PatchConfig
	}
	return nil
}

func (x *BackupRestoreTask) GetSetConfig() *deployment.AutomateConfig {
	if x != nil {
		return x.SetConfig
	}
	return nil
}

func (x *BackupRestoreTask) GetGcsBackupLocation() *GCSBackupLocation {
	if x != nil {
		return x.GcsBackupLocation
	}
	return nil
}

type BackupDeleteTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Backups []*BackupTask          `protobuf:"bytes,2,rep,name=backups,proto3" json:"backups,omitempty" toml:"backups,omitempty" mapstructure:"backups,omitempty"`
}

func (x *BackupDeleteTask) Reset() {
	*x = BackupDeleteTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupDeleteTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDeleteTask) ProtoMessage() {}

func (x *BackupDeleteTask) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDeleteTask.ProtoReflect.Descriptor instead.
func (*BackupDeleteTask) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{77}
}

func (x *BackupDeleteTask) GetId() *timestamppb.Timestamp {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BackupDeleteTask) GetBackups() []*BackupTask {
	if x != nil {
		return x.Backups
	}
	return nil
}

type CreateBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateBackupRequest) Reset() {
	*x = CreateBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBackupRequest) ProtoMessage() {}

func (x *CreateBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBackupRequest.ProtoReflect.Descriptor instead.
func (*CreateBackupRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{78}
}

type CreateBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backup *BackupTask `protobuf:"bytes,1,opt,name=backup,proto3" json:"backup,omitempty" toml:"backup,omitempty" mapstructure:"backup,omitempty"`
}

func (x *CreateBackupResponse) Reset() {
	*x = CreateBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBackupResponse) ProtoMessage() {}

func (x *CreateBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBackupResponse.ProtoReflect.Descriptor instead.
func (*CreateBackupResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{79}
}

func (x *CreateBackupResponse) GetBackup() *BackupTask {
	if x != nil {
		return x.Backup
	}
	return nil
}

type ListBackupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBackupsRequest) Reset() {
	*x = ListBackupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBackupsRequest) ProtoMessage() {}

func (x *ListBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBackupsRequest.ProtoReflect.Descriptor instead.
func (*ListBackupsRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{80}
}

type ListBackupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backups []*BackupTask `protobuf:"bytes,2,rep,name=backups,proto3" json:"backups,omitempty" toml:"backups,omitempty" mapstructure:"backups,omitempty"`
}

func (x *ListBackupsResponse) Reset() {
	*x = ListBackupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBackupsResponse) ProtoMessage() {}

func (x *ListBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBackupsResponse.ProtoReflect.Descriptor instead.
func (*ListBackupsResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{81}
}

func (x *ListBackupsResponse) GetBackups() []*BackupTask {
	if x != nil {
		return x.Backups
	}
	return nil
}

type ShowBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backup *BackupTask `protobuf:"bytes,1,opt,name=backup,proto3" json:"backup,omitempty" toml:"backup,omitempty" mapstructure:"backup,omitempty"`
}

func (x *ShowBackupRequest) Reset() {
	*x = ShowBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBackupRequest) ProtoMessage() {}

func (x *ShowBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBackupRequest.ProtoReflect.Descriptor instead.
func (*ShowBackupRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{82}
}

func (x *ShowBackupRequest) GetBackup() *BackupTask {
	if x != nil {
		return x.Backup
	}
	return nil
}

type ShowBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        string             `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" toml:"data,omitempty" mapstructure:"data,omitempty"`
	Backup      *BackupTask        `protobuf:"bytes,2,opt,name=backup,proto3" json:"backup,omitempty" toml:"backup,omitempty" mapstructure:"backup,omitempty"`
	Description *BackupDescription `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" toml:"description,omitempty" mapstructure:"description,omitempty"`
}

func (x *ShowBackupResponse) Reset() {
	*x = ShowBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBackupResponse) ProtoMessage() {}

func (x *ShowBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBackupResponse.ProtoReflect.Descriptor instead.
func (*ShowBackupResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{83}
}

func (x *ShowBackupResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ShowBackupResponse) GetBackup() *BackupTask {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *ShowBackupResponse) GetDescription() *BackupDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

type DeleteBackupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backups []*BackupTask `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty" toml:"backups,omitempty" mapstructure:"backups,omitempty"`
}

func (x *DeleteBackupsRequest) Reset() {
	*x = DeleteBackupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackupsRequest) ProtoMessage() {}

func (x *DeleteBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackupsRequest.ProtoReflect.Descriptor instead.
func (*DeleteBackupsRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{84}
}

func (x *DeleteBackupsRequest) GetBackups() []*BackupTask {
	if x != nil {
		return x.Backups
	}
	return nil
}

type DeleteBackupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delete *BackupDeleteTask `protobuf:"bytes,1,opt,name=delete,proto3" json:"delete,omitempty" toml:"delete,omitempty" mapstructure:"delete,omitempty"`
}

func (x *DeleteBackupsResponse) Reset() {
	*x = DeleteBackupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBackupsResponse) ProtoMessage() {}

func (x *DeleteBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBackupsResponse.ProtoReflect.Descriptor instead.
func (*DeleteBackupsResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{85}
}

func (x *DeleteBackupsResponse) GetDelete() *BackupDeleteTask {
	if x != nil {
		return x.Delete
	}
	return nil
}

type BackupIntegrityShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BackupIntegrityShowRequest) Reset() {
	*x = BackupIntegrityShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupIntegrityShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupIntegrityShowRequest) ProtoMessage() {}

func (x *BackupIntegrityShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupIntegrityShowRequest.ProtoReflect.Descriptor instead.
func (*BackupIntegrityShowRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{86}
}

type BackupIntegrityShowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots []*SnapshotIntegrity `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty" toml:"snapshots,omitempty" mapstructure:"snapshots,omitempty"`
}

func (x *BackupIntegrityShowResponse) Reset() {
	*x = BackupIntegrityShowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupIntegrityShowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupIntegrityShowResponse) ProtoMessage() {}

func (x *BackupIntegrityShowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupIntegrityShowResponse.ProtoReflect.Descriptor instead.
func (*BackupIntegrityShowResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{87}
}

func (x *BackupIntegrityShowResponse) GetSnapshots() []*SnapshotIntegrity {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type SnapshotIntegrity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	LastVerified *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_verified,json=lastVerified,proto3" json:"last_verified,omitempty" toml:"last_verified,omitempty" mapstructure:"last_verified,omitempty"`
	Missing      []string               `protobuf:"bytes,3,rep,name=missing,proto3" json:"missing,omitempty" toml:"missing,omitempty" mapstructure:"missing,omitempty"`
	Corrupted    bool                   `protobuf:"varint,4,opt,name=corrupted,proto3" json:"corrupted,omitempty" toml:"corrupted,omitempty" mapstructure:"corrupted,omitempty"`
}

func (x *SnapshotIntegrity) Reset() {
	*x = SnapshotIntegrity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotIntegrity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotIntegrity) ProtoMessage() {}

func (x *SnapshotIntegrity) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotIntegrity.ProtoReflect.Descriptor instead.
func (*SnapshotIntegrity) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{88}
}

func (x *SnapshotIntegrity) GetId() *timestamppb.Timestamp {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SnapshotIntegrity) GetLastVerified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastVerified
	}
	return nil
}

func (x *SnapshotIntegrity) GetMissing() []string {
	if x != nil {
		return x.Missing
	}
	return nil
}

func (x *SnapshotIntegrity) GetCorrupted() bool {
	if x != nil {
		return x.Corrupted
	}
	return false
}

type ValidateBackupIntegrityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backups []*BackupTask `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty" toml:"backups,omitempty" mapstructure:"backups,omitempty"`
}

func (x *ValidateBackupIntegrityRequest) Reset() {
	*x = ValidateBackupIntegrityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateBackupIntegrityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateBackupIntegrityRequest) ProtoMessage() {}

func (x *ValidateBackupIntegrityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateBackupIntegrityRequest.ProtoReflect.Descriptor instead.
func (*ValidateBackupIntegrityRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{89}
}

func (x *ValidateBackupIntegrityRequest) GetBackups() []*BackupTask {
	if x != nil {
		return x.Backups
	}
	return nil
}

type ValidateBackupIntegrityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots []*SnapshotIntegrity `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty" toml:"snapshots,omitempty" mapstructure:"snapshots,omitempty"`
}

func (x *ValidateBackupIntegrityResponse) Reset() {
	*x = ValidateBackupIntegrityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateBackupIntegrityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateBackupIntegrityResponse) ProtoMessage() {}

func (x *ValidateBackupIntegrityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateBackupIntegrityResponse.ProtoReflect.Descriptor instead.
func (*ValidateBackupIntegrityResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{90}
}

func (x *ValidateBackupIntegrityResponse) GetSnapshots() []*SnapshotIntegrity {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type RestoreBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Restore *BackupRestoreTask `protobuf:"bytes,1,opt,name=restore,proto3" json:"restore,omitempty" toml:"restore,omitempty" mapstructure:"restore,omitempty"`
}

func (x *RestoreBackupRequest) Reset() {
	*x = RestoreBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreBackupRequest) ProtoMessage() {}

func (x *RestoreBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreBackupRequest.ProtoReflect.Descriptor instead.
func (*RestoreBackupRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{91}
}

func (x *RestoreBackupRequest) GetRestore() *BackupRestoreTask {
	if x != nil {
		return x.Restore
	}
	return nil
}

type RestoreBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Restore *BackupRestoreTask `protobuf:"bytes,1,opt,name=restore,proto3" json:"restore,omitempty" toml:"restore,omitempty" mapstructure:"restore,omitempty"`
}

func (x *RestoreBackupResponse) Reset() {
	*x = RestoreBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreBackupResponse) ProtoMessage() {}

func (x *RestoreBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreBackupResponse.ProtoReflect.Descriptor instead.
func (*RestoreBackupResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{92}
}

func (x *RestoreBackupResponse) GetRestore() *BackupRestoreTask {
	if x != nil {
		return x.Restore
	}
	return nil
}

type BackupStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BackupStatusRequest) Reset() {
	*x = BackupStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupStatusRequest) ProtoMessage() {}

func (x *BackupStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupStatusRequest.ProtoReflect.Descriptor instead.
func (*BackupStatusRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{93}
}

type BackupStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType  BackupStatusResponse_OperationType `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=chef.automate.domain.deployment.BackupStatusResponse_OperationType" json:"op_type,omitempty" toml:"op_type,omitempty" mapstructure:"op_type,omitempty"`
	TaskIds []string                           `protobuf:"bytes,2,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty" toml:"task_ids,omitempty" mapstructure:"task_ids,omitempty"`
}

func (x *BackupStatusResponse) Reset() {
	*x = BackupStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupStatusResponse) ProtoMessage() {}

func (x *BackupStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupStatusResponse.ProtoReflect.Descriptor instead.
func (*BackupStatusResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{94}
}

func (x *BackupStatusResponse) GetOpType() BackupStatusResponse_OperationType {
	if x != nil {
		return x.OpType
	}
	return BackupStatusResponse_CREATE
}

func (x *BackupStatusResponse) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type CancelBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelBackupRequest) Reset() {
	*x = CancelBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBackupRequest) ProtoMessage() {}

func (x *CancelBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBackupRequest.ProtoReflect.Descriptor instead.
func (*CancelBackupRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{95}
}

type CancelBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelBackupResponse) Reset() {
	*x = CancelBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBackupResponse) ProtoMessage() {}

func (x *CancelBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBackupResponse.ProtoReflect.Descriptor instead.
func (*CancelBackupResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{96}
}

type UpgradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty" toml:"version,omitempty" mapstructure:"version,omitempty"`
	IsMajorUpgrade bool   `protobuf:"varint,2,opt,name=is_major_upgrade,json=isMajorUpgrade,proto3" json:"is_major_upgrade,omitempty" toml:"is_major_upgrade,omitempty" mapstructure:"is_major_upgrade,omitempty"`
	VersionsPath   string `protobuf:"bytes,3,opt,name=versions_path,json=versionsPath,proto3" json:"versions_path,omitempty" toml:"versions_path,omitempty" mapstructure:"versions_path,omitempty"`
}

func (x *UpgradeRequest) Reset() {
	*x = UpgradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeRequest) ProtoMessage() {}

func (x *UpgradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeRequest.ProtoReflect.Descriptor instead.
func (*UpgradeRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{97}
}

func (x *UpgradeRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UpgradeRequest) GetIsMajorUpgrade() bool {
	if x != nil {
		return x.IsMajorUpgrade
	}
	return false
}

func (x *UpgradeRequest) GetVersionsPath() string {
	if x != nil {
		return x.VersionsPath
	}
	return ""
}

type UpgradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousVersion string `protobuf:"bytes,1,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty" toml:"previous_version,omitempty" mapstructure:"previous_version,omitempty"`
	NextVersion     string `protobuf:"bytes,2,opt,name=next_version,json=nextVersion,proto3" json:"next_version,omitempty" toml:"next_version,omitempty" mapstructure:"next_version,omitempty"`
	TaskId          string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty" toml:"task_id,omitempty" mapstructure:"task_id,omitempty"`
}

func (x *UpgradeResponse) Reset() {
	*x = UpgradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResponse) ProtoMessage() {}

func (x *UpgradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResponse.ProtoReflect.Descriptor instead.
func (*UpgradeResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{98}
}

func (x *UpgradeResponse) GetPreviousVersion() string {
	if x != nil {
		return x.PreviousVersion
	}
	return ""
}

func (x *UpgradeResponse) GetNextVersion() string {
	if x != nil {
		return x.NextVersion
	}
	return ""
}

func (x *UpgradeResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type ValidatedUpgradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentVersion string `protobuf:"bytes,1,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty" toml:"current_version,omitempty" mapstructure:"current_version,omitempty"`
	TargetVersion  string `protobuf:"bytes,2,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty" toml:"target_version,omitempty" mapstructure:"target_version,omitempty"`
	TargetMajor    string `protobuf:"bytes,3,opt,name=target_major,json=targetMajor,proto3" json:"target_major,omitempty" toml:"target_major,omitempty" mapstructure:"target_major,omitempty"`
}

func (x *ValidatedUpgradeResponse) Reset() {
	*x = ValidatedUpgradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatedUpgradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatedUpgradeResponse) ProtoMessage() {}

func (x *ValidatedUpgradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatedUpgradeResponse.ProtoReflect.Descriptor instead.
func (*ValidatedUpgradeResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{99}
}

func (x *ValidatedUpgradeResponse) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

func (x *ValidatedUpgradeResponse) GetTargetVersion() string {
	if x != nil {
		return x.TargetVersion
	}
	return ""
}

func (x *ValidatedUpgradeResponse) GetTargetMajor() string {
	if x != nil {
		return x.TargetMajor
	}
	return ""
}

type CurrentReleaseManifestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CurrentReleaseManifestRequest) Reset() {
	*x = CurrentReleaseManifestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentReleaseManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentReleaseManifestRequest) ProtoMessage() {}

func (x *CurrentReleaseManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentReleaseManifestRequest.ProtoReflect.Descriptor instead.
func (*CurrentReleaseManifestRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{100}
}

type ReleaseManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json []byte `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty" toml:"json,omitempty" mapstructure:"json,omitempty"`
}

func (x *ReleaseManifest) Reset() {
	*x = ReleaseManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseManifest) ProtoMessage() {}

func (x *ReleaseManifest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseManifest.ProtoReflect.Descriptor instead.
func (*ReleaseManifest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{101}
}

func (x *ReleaseManifest) GetJson() []byte {
	if x != nil {
		return x.Json
	}
	return nil
}

type A1UpgradeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *A1UpgradeStatusRequest) Reset() {
	*x = A1UpgradeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A1UpgradeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A1UpgradeStatusRequest) ProtoMessage() {}

func (x *A1UpgradeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A1UpgradeStatusRequest.ProtoReflect.Descriptor instead.
func (*A1UpgradeStatusRequest) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{102}
}

type A1UpgradeStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverallStatus   A1UpgradeStatusResponse_MigrationStatus           `protobuf:"varint,1,opt,name=overall_status,json=overallStatus,proto3,enum=chef.automate.domain.deployment.A1UpgradeStatusResponse_MigrationStatus" json:"overall_status,omitempty" toml:"overall_status,omitempty" mapstructure:"overall_status,omitempty"`
	ServiceStatuses []*A1UpgradeStatusResponse_ServiceMigrationStatus `protobuf:"bytes,2,rep,name=service_statuses,json=serviceStatuses,proto3" json:"service_statuses,omitempty" toml:"service_statuses,omitempty" mapstructure:"service_statuses,omitempty"`
}

func (x *A1UpgradeStatusResponse) Reset() {
	*x = A1UpgradeStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A1UpgradeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A1UpgradeStatusResponse) ProtoMessage() {}

func (x *A1UpgradeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A1UpgradeStatusResponse.ProtoReflect.Descriptor instead.
func (*A1UpgradeStatusResponse) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{103}
}

func (x *A1UpgradeStatusResponse) GetOverallStatus() A1UpgradeStatusResponse_MigrationStatus {
	if x != nil {
		return x.OverallStatus
	}
	return A1UpgradeStatusResponse_UNKNOWN
}

func (x *A1UpgradeStatusResponse) GetServiceStatuses() []*A1UpgradeStatusResponse_ServiceMigrationStatus {
	if x != nil {
		return x.ServiceStatuses
	}
	return nil
}

type DeployEvent_Deploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DeployEvent_Status `protobuf:"varint,1,opt,name=status,proto3,enum=chef.automate.domain.deployment.DeployEvent_Status" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
}

func (x *DeployEvent_Deploy) Reset() {
	*x = DeployEvent_Deploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployEvent_Deploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployEvent_Deploy) ProtoMessage() {}

func (x *DeployEvent_Deploy) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployEvent_Deploy.ProtoReflect.Descriptor instead.
func (*DeployEvent_Deploy) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{43, 0}
}

func (x *DeployEvent_Deploy) GetStatus() DeployEvent_Status {
	if x != nil {
		return x.Status
	}
	return DeployEvent_WAITING
}

type DeployEvent_Phase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseId DeployEvent_PhaseID `protobuf:"varint,1,opt,name=phase_id,json=phaseId,proto3,enum=chef.automate.domain.deployment.DeployEvent_PhaseID" json:"phase_id,omitempty" toml:"phase_id,omitempty" mapstructure:"phase_id,omitempty"`
	Status  DeployEvent_Status  `protobuf:"varint,2,opt,name=status,proto3,enum=chef.automate.domain.deployment.DeployEvent_Status" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
}

func (x *DeployEvent_Phase) Reset() {
	*x = DeployEvent_Phase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployEvent_Phase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployEvent_Phase) ProtoMessage() {}

func (x *DeployEvent_Phase) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployEvent_Phase.ProtoReflect.Descriptor instead.
func (*DeployEvent_Phase) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{43, 1}
}

func (x *DeployEvent_Phase) GetPhaseId() DeployEvent_PhaseID {
	if x != nil {
		return x.PhaseId
	}
	return DeployEvent_INIT_SERVICE
}

func (x *DeployEvent_Phase) GetStatus() DeployEvent_Status {
	if x != nil {
		return x.Status
	}
	return DeployEvent_WAITING
}

type DeployEvent_PhaseStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseId  DeployEvent_PhaseID `protobuf:"varint,1,opt,name=phase_id,json=phaseId,proto3,enum=chef.automate.domain.deployment.DeployEvent_PhaseID" json:"phase_id,omitempty" toml:"phase_id,omitempty" mapstructure:"phase_id,omitempty"`
	StepName string              `protobuf:"bytes,2,opt,name=step_name,json=stepName,proto3" json:"step_name,omitempty" toml:"step_name,omitempty" mapstructure:"step_name,omitempty"`
	Status   DeployEvent_Status  `protobuf:"varint,3,opt,name=status,proto3,enum=chef.automate.domain.deployment.DeployEvent_Status" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	// string description = 4;
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty" toml:"error,omitempty" mapstructure:"error,omitempty"`
}

func (x *DeployEvent_PhaseStep) Reset() {
	*x = DeployEvent_PhaseStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployEvent_PhaseStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployEvent_PhaseStep) ProtoMessage() {}

func (x *DeployEvent_PhaseStep) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployEvent_PhaseStep.ProtoReflect.Descriptor instead.
func (*DeployEvent_PhaseStep) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{43, 2}
}

func (x *DeployEvent_PhaseStep) GetPhaseId() DeployEvent_PhaseID {
	if x != nil {
		return x.PhaseId
	}
	return DeployEvent_INIT_SERVICE
}

func (x *DeployEvent_PhaseStep) GetStepName() string {
	if x != nil {
		return x.StepName
	}
	return ""
}

func (x *DeployEvent_PhaseStep) GetStatus() DeployEvent_Status {
	if x != nil {
		return x.Status
	}
	return DeployEvent_WAITING
}

func (x *DeployEvent_PhaseStep) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeployEvent_Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      DeployEvent_Status              `protobuf:"varint,1,opt,name=status,proto3,enum=chef.automate.domain.deployment.DeployEvent_Status" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Operations  []*DeployEvent_Backup_Operation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty" toml:"operations,omitempty" mapstructure:"operations,omitempty"`
	Description *BackupDescription              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" toml:"description,omitempty" mapstructure:"description,omitempty"`
}

func (x *DeployEvent_Backup) Reset() {
	*x = DeployEvent_Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployEvent_Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployEvent_Backup) ProtoMessage() {}

func (x *DeployEvent_Backup) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployEvent_Backup.ProtoReflect.Descriptor instead.
func (*DeployEvent_Backup) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{43, 3}
}

func (x *DeployEvent_Backup) GetStatus() DeployEvent_Status {
	if x != nil {
		return x.Status
	}
	return DeployEvent_WAITING
}

func (x *DeployEvent_Backup) GetOperations() []*DeployEvent_Backup_Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *DeployEvent_Backup) GetDescription() *BackupDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

// TaskComplete is used internally to manage event streams, it is not
// sent over the wire.
type DeployEvent_TaskComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeployEvent_TaskComplete) Reset() {
	*x = DeployEvent_TaskComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployEvent_TaskComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployEvent_TaskComplete) ProtoMessage() {}

func (x *DeployEvent_TaskComplete) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployEvent_TaskComplete.ProtoReflect.Descriptor instead.
func (*DeployEvent_TaskComplete) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{43, 4}
}

type DeployEvent_Backup_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        DeployEvent_Status                `protobuf:"varint,1,opt,name=status,proto3,enum=chef.automate.domain.deployment.DeployEvent_Status" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Name          string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	Error         string                            `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty" toml:"error,omitempty" mapstructure:"error,omitempty"`
	SyncProgress  float64                           `protobuf:"fixed64,5,opt,name=sync_progress,json=syncProgress,proto3" json:"sync_progress,omitempty" toml:"sync_progress,omitempty" mapstructure:"sync_progress,omitempty"`
	AsyncProgress float64                           `protobuf:"fixed64,6,opt,name=async_progress,json=asyncProgress,proto3" json:"async_progress,omitempty" toml:"async_progress,omitempty" mapstructure:"async_progress,omitempty"`
	Type          DeployEvent_Backup_Operation_Type `protobuf:"varint,7,opt,name=type,proto3,enum=chef.automate.domain.deployment.DeployEvent_Backup_Operation_Type" json:"type,omitempty" toml:"type,omitempty" mapstructure:"type,omitempty"`
}

func (x *DeployEvent_Backup_Operation) Reset() {
	*x = DeployEvent_Backup_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployEvent_Backup_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployEvent_Backup_Operation) ProtoMessage() {}

func (x *DeployEvent_Backup_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployEvent_Backup_Operation.ProtoReflect.Descriptor instead.
func (*DeployEvent_Backup_Operation) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{43, 3, 0}
}

func (x *DeployEvent_Backup_Operation) GetStatus() DeployEvent_Status {
	if x != nil {
		return x.Status
	}
	return DeployEvent_WAITING
}

func (x *DeployEvent_Backup_Operation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeployEvent_Backup_Operation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DeployEvent_Backup_Operation) GetSyncProgress() float64 {
	if x != nil {
		return x.SyncProgress
	}
	return 0
}

func (x *DeployEvent_Backup_Operation) GetAsyncProgress() float64 {
	if x != nil {
		return x.AsyncProgress
	}
	return 0
}

func (x *DeployEvent_Backup_Operation) GetType() DeployEvent_Backup_Operation_Type {
	if x != nil {
		return x.Type
	}
	return DeployEvent_Backup_Operation_BACKUP
}

type A1UpgradeStatusResponse_ServiceMigrationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string                                  `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty" toml:"service_name,omitempty" mapstructure:"service_name,omitempty"`
	Status      A1UpgradeStatusResponse_MigrationStatus `protobuf:"varint,2,opt,name=status,proto3,enum=chef.automate.domain.deployment.A1UpgradeStatusResponse_MigrationStatus" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	Progress    int32                                   `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty" toml:"progress,omitempty" mapstructure:"progress,omitempty"`
	// In the case of failed migration, contains an error
	// message. In the case of an in-progress migration,
	// may contain information about what the service is
	// doing.
	Info string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty" toml:"info,omitempty" mapstructure:"info,omitempty"`
}

func (x *A1UpgradeStatusResponse_ServiceMigrationStatus) Reset() {
	*x = A1UpgradeStatusResponse_ServiceMigrationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A1UpgradeStatusResponse_ServiceMigrationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A1UpgradeStatusResponse_ServiceMigrationStatus) ProtoMessage() {}

func (x *A1UpgradeStatusResponse_ServiceMigrationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_deployment_automate_deployment_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A1UpgradeStatusResponse_ServiceMigrationStatus.ProtoReflect.Descriptor instead.
func (*A1UpgradeStatusResponse_ServiceMigrationStatus) Descriptor() ([]byte, []int) {
	return file_interservice_deployment_automate_deployment_proto_rawDescGZIP(), []int{103, 0}
}

func (x *A1UpgradeStatusResponse_ServiceMigrationStatus) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *A1UpgradeStatusResponse_ServiceMigrationStatus) GetStatus() A1UpgradeStatusResponse_MigrationStatus {
	if x != nil {
		return x.Status
	}
	return A1UpgradeStatusResponse_UNKNOWN
}

func (x *A1UpgradeStatusResponse_ServiceMigrationStatus) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *A1UpgradeStatusResponse_ServiceMigrationStatus) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

var File_interservice_deployment_automate_deployment_proto protoreflect.FileDescriptor

var file_interservice_deployment_automate_deployment_proto_rawDesc = []byte{
	0x0a, 0x31, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x2d, 0x0a, 0x17, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x35, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x49,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x16, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x1f, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x63,
	0x32, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x63, 0x32, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x49,
	0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x9a, 0x02, 0x0a,
	0x09, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x63, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x63, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x65, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xba, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x5f, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x29, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x82, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x0c,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0d, 0x0a, 0x0b,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10,
	0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x18, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3b,
	0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x9f, 0x04, 0x0a, 0x15,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x60, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x69, 0x72, 0x67, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x69, 0x72, 0x67, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x34, 0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x22, 0x1a, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa4, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x47,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x22, 0x62, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x56, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x6f, 0x6d,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x6f, 0x6d, 0x6c, 0x22, 0x7a, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x24, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x95, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48, 0x00, 0x52, 0x06, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x65, 0x70, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x60, 0x0a, 0x0d, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x06,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x48, 0x00, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x1a, 0x55, 0x0a, 0x06, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0xa5, 0x01, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x09, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x52, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xda, 0x04, 0x0a, 0x06, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x5d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x54, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xcd, 0x02, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x1f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x43, 0x4b, 0x55,
	0x50, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0x0e, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x7e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x4c, 0x46,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x22, 0x9b, 0x01, 0x0a, 0x07, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x06, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x1d, 0x0a,
	0x07, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x36, 0x0a, 0x13,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x72, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x66, 0x0a, 0x17,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb2,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x45, 0x0a, 0x13, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x68, 0x0a, 0x14, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x05, 0x22, 0x30, 0x0a, 0x11, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x12, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3c, 0x0a, 0x19, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x32, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x78, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x79, 0x0a, 0x1a, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x36, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x63, 0x0a,
	0x18, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x34, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x44, 0x75, 0x6d, 0x70,
	0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x0e, 0x44, 0x75, 0x6d,
	0x70, 0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x80, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x68,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x68,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x22, 0x37, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x0a,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0x83,
	0x01, 0x0a, 0x11, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x10, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x47, 0x43, 0x53, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x22, 0x90, 0x06, 0x0a, 0x11, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x44, 0x69, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x69, 0x72, 0x67, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x69,
	0x72, 0x67, 0x61, 0x70, 0x12, 0x5f, 0x0a, 0x12, 0x73, 0x33, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x4c, 0x0a,
	0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x62, 0x0a, 0x13, 0x67, 0x63, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x43, 0x53, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x67, 0x63, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x22, 0x1b, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0x5b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x22, 0x58, 0x0a, 0x11, 0x53, 0x68, 0x6f,
	0x77, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x22, 0xc3, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x12, 0x54, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x22, 0x62, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x1b, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x11,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x72,
	0x75, 0x70, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x22,
	0x73, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x65, 0x0a, 0x15, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x22, 0x15, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x43, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x74, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x48,
	0x4f, 0x57, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x10, 0x08,
	0x22, 0x15, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x79, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x78, 0x0a, 0x0f, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16,
	0x41, 0x31, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa1, 0x04, 0x0a, 0x17, 0x41, 0x31, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x31, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x7a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x31, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a,
	0xcd, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x31, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x49, 0x0a, 0x0f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xbc, 0x2f, 0x0a, 0x0a, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x06, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0c, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01,
	0x12, 0x6a, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x90, 0x01, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84,
	0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x69, 0x6e, 0x65, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x0a, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a,
	0x12, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7b,
	0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x12, 0x34,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x12, 0x35, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0d, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6b, 0x0a, 0x06, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x42, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x75, 0x6d, 0x70,
	0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x75, 0x6d, 0x70,
	0x44, 0x42, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x84, 0x01, 0x0a,
	0x0f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12,
	0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0a, 0x53, 0x68,
	0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7e, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x12, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7b, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b,
	0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x34,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x13,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x68, 0x6f, 0x77, 0x12, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c,
	0x01, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a,
	0x07, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0e, 0x49,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2f, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0b, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x44, 0x12,
	0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x41, 0x31, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x31, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x31, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x0d, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x35, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x18, 0x49,
	0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x40, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x05,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x49, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x4c, 0x49, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x49, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x86, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interservice_deployment_automate_deployment_proto_rawDescOnce sync.Once
	file_interservice_deployment_automate_deployment_proto_rawDescData = file_interservice_deployment_automate_deployment_proto_rawDesc
)

func file_interservice_deployment_automate_deployment_proto_rawDescGZIP() []byte {
	file_interservice_deployment_automate_deployment_proto_rawDescOnce.Do(func() {
		file_interservice_deployment_automate_deployment_proto_rawDescData = protoimpl.X.CompressGZIP(file_interservice_deployment_automate_deployment_proto_rawDescData)
	})
	return file_interservice_deployment_automate_deployment_proto_rawDescData
}

var file_interservice_deployment_automate_deployment_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_interservice_deployment_automate_deployment_proto_msgTypes = make([]protoimpl.MessageInfo, 112)
var file_interservice_deployment_automate_deployment_proto_goTypes = []interface{}{
	(UpgradeStatusResponse_UpgradeState)(0),                // 0: chef.automate.domain.deployment.UpgradeStatusResponse.UpgradeState
	(DeployEvent_Status)(0),                                // 1: chef.automate.domain.deployment.DeployEvent.Status
	(DeployEvent_PhaseID)(0),                               // 2: chef.automate.domain.deployment.DeployEvent.PhaseID
	(DeployEvent_Backup_Operation_Type)(0),                 // 3: chef.automate.domain.deployment.DeployEvent.Backup.Operation.Type
	(ServiceState_State)(0),                                // 4: chef.automate.domain.deployment.ServiceState.State
	(BackupTask_BackupState)(0),                            // 5: chef.automate.domain.deployment.BackupTask.BackupState
	(BackupStatusResponse_OperationType)(0),                // 6: chef.automate.domain.deployment.BackupStatusResponse.OperationType
	(A1UpgradeStatusResponse_MigrationStatus)(0),           // 7: chef.automate.domain.deployment.A1UpgradeStatusResponse.MigrationStatus
	(*BootstrapBundleRequest)(nil),                         // 8: chef.automate.domain.deployment.BootstrapBundleRequest
	(*BootstrapBundleResponse)(nil),                        // 9: chef.automate.domain.deployment.BootstrapBundleResponse
	(*GetCLIExecutableRequest)(nil),                        // 10: chef.automate.domain.deployment.GetCLIExecutableRequest
	(*GetCLIExecutableResponse)(nil),                       // 11: chef.automate.domain.deployment.GetCLIExecutableResponse
	(*NodeInventoryRequest)(nil),                           // 12: chef.automate.domain.deployment.NodeInventoryRequest
	(*NodeInventoryResponse)(nil),                          // 13: chef.automate.domain.deployment.NodeInventoryResponse
	(*InfrastructureNodeDeleteRequest)(nil),                // 14: chef.automate.domain.deployment.InfrastructureNodeDeleteRequest
	(*InfrastructureNodeDeleteResponse)(nil),               // 15: chef.automate.domain.deployment.InfrastructureNodeDeleteResponse
	(*InventoryNode)(nil),                                  // 16: chef.automate.domain.deployment.InventoryNode
	(*UsageRequest)(nil),                                   // 17: chef.automate.domain.deployment.UsageRequest
	(*UsageResponse)(nil),                                  // 18: chef.automate.domain.deployment.UsageResponse
	(*NodeUsage)(nil),                                      // 19: chef.automate.domain.deployment.NodeUsage
	(*GenerateAdminTokenRequest)(nil),                      // 20: chef.automate.domain.deployment.GenerateAdminTokenRequest
	(*GenerateAdminTokenResponse)(nil),                     // 21: chef.automate.domain.deployment.GenerateAdminTokenResponse
	(*NewDeploymentRequest)(nil),                           // 22: chef.automate.domain.deployment.NewDeploymentRequest
	(*ConfigureDeploymentRequest)(nil),                     // 23: chef.automate.domain.deployment.ConfigureDeploymentRequest
	(*ConfigureDeploymentResponse)(nil),                    // 24: chef.automate.domain.deployment.ConfigureDeploymentResponse
	(*DeployRequest)(nil),                                  // 25: chef.automate.domain.deployment.DeployRequest
	(*DeployResponse)(nil),                                 // 26: chef.automate.domain.deployment.DeployResponse
	(*DeployStatusRequest)(nil),                            // 27: chef.automate.domain.deployment.DeployStatusRequest
	(*RemoveRequest)(nil),                                  // 28: chef.automate.domain.deployment.RemoveRequest
	(*ManifestVersionRequest)(nil),                         // 29: chef.automate.domain.deployment.ManifestVersionRequest
	(*PingRequest)(nil),                                    // 30: chef.automate.domain.deployment.PingRequest
	(*PingResponse)(nil),                                   // 31: chef.automate.domain.deployment.PingResponse
	(*DeployIDRequest)(nil),                                // 32: chef.automate.domain.deployment.DeployIDRequest
	(*RemoveResponse)(nil),                                 // 33: chef.automate.domain.deployment.RemoveResponse
	(*StopRequest)(nil),                                    // 34: chef.automate.domain.deployment.StopRequest
	(*StopResponse)(nil),                                   // 35: chef.automate.domain.deployment.StopResponse
	(*StopConvergeRequest)(nil),                            // 36: chef.automate.domain.deployment.StopConvergeRequest
	(*StopConvergeResponse)(nil),                           // 37: chef.automate.domain.deployment.StopConvergeResponse
	(*StartConvergeRequest)(nil),                           // 38: chef.automate.domain.deployment.StartConvergeRequest
	(*StartConvergeResponse)(nil),                          // 39: chef.automate.domain.deployment.StartConvergeResponse
	(*ServiceVersionsRequest)(nil),                         // 40: chef.automate.domain.deployment.ServiceVersionsRequest
	(*SystemLogsRequest)(nil),                              // 41: chef.automate.domain.deployment.SystemLogsRequest
	(*UpgradeStatusRequest)(nil),                           // 42: chef.automate.domain.deployment.UpgradeStatusRequest
	(*UpgradeStatusResponse)(nil),                          // 43: chef.automate.domain.deployment.UpgradeStatusResponse
	(*SetLogLevelRequest)(nil),                             // 44: chef.automate.domain.deployment.SetLogLevelRequest
	(*SetLogLevelResponse)(nil),                            // 45: chef.automate.domain.deployment.SetLogLevelResponse
	(*UpgradingService)(nil),                               // 46: chef.automate.domain.deployment.UpgradingService
	(*PackageOptions)(nil),                                 // 47: chef.automate.domain.deployment.PackageOptions
	(*ConfigureRequest)(nil),                               // 48: chef.automate.domain.deployment.ConfigureRequest
	(*DeploymentID)(nil),                                   // 49: chef.automate.domain.deployment.DeploymentID
	(*DeploymentStatus)(nil),                               // 50: chef.automate.domain.deployment.DeploymentStatus
	(*DeployEvent)(nil),                                    // 51: chef.automate.domain.deployment.DeployEvent
	(*LogLine)(nil),                                        // 52: chef.automate.domain.deployment.LogLine
	(*SupportBundleConfig)(nil),                            // 53: chef.automate.domain.deployment.SupportBundleConfig
	(*StatusRequest)(nil),                                  // 54: chef.automate.domain.deployment.StatusRequest
	(*StatusResponse)(nil),                                 // 55: chef.automate.domain.deployment.StatusResponse
	(*ServiceVersionsResponse)(nil),                        // 56: chef.automate.domain.deployment.ServiceVersionsResponse
	(*ServiceVersion)(nil),                                 // 57: chef.automate.domain.deployment.ServiceVersion
	(*LicenseStatusRequest)(nil),                           // 58: chef.automate.domain.deployment.LicenseStatusRequest
	(*LicenseStatusResponse)(nil),                          // 59: chef.automate.domain.deployment.LicenseStatusResponse
	(*LicenseApplyRequest)(nil),                            // 60: chef.automate.domain.deployment.LicenseApplyRequest
	(*LicenseApplyResponse)(nil),                           // 61: chef.automate.domain.deployment.LicenseApplyResponse
	(*ServiceStatus)(nil),                                  // 62: chef.automate.domain.deployment.ServiceStatus
	(*ServiceState)(nil),                                   // 63: chef.automate.domain.deployment.ServiceState
	(*GatherLogsRequest)(nil),                              // 64: chef.automate.domain.deployment.GatherLogsRequest
	(*GatherLogsResponse)(nil),                             // 65: chef.automate.domain.deployment.GatherLogsResponse
	(*GatherLogsDownloadRequest)(nil),                      // 66: chef.automate.domain.deployment.GatherLogsDownloadRequest
	(*GatherLogsDownloadResponse)(nil),                     // 67: chef.automate.domain.deployment.GatherLogsDownloadResponse
	(*RestartServicesRequest)(nil),                         // 68: chef.automate.domain.deployment.RestartServicesRequest
	(*RestartServicesResponse)(nil),                        // 69: chef.automate.domain.deployment.RestartServicesResponse
	(*GetAutomateConfigRequest)(nil),                       // 70: chef.automate.domain.deployment.GetAutomateConfigRequest
	(*GetAutomateConfigResponse)(nil),                      // 71: chef.automate.domain.deployment.GetAutomateConfigResponse
	(*PatchAutomateConfigRequest)(nil),                     // 72: chef.automate.domain.deployment.PatchAutomateConfigRequest
	(*PatchAutomateConfigResponse)(nil),                    // 73: chef.automate.domain.deployment.PatchAutomateConfigResponse
	(*SetAutomateConfigRequest)(nil),                       // 74: chef.automate.domain.deployment.SetAutomateConfigRequest
	(*SetAutomateConfigResponse)(nil),                      // 75: chef.automate.domain.deployment.SetAutomateConfigResponse
	(*DumpDBRequest)(nil),                                  // 76: chef.automate.domain.deployment.DumpDBRequest
	(*DumpDBResponse)(nil),                                 // 77: chef.automate.domain.deployment.DumpDBResponse
	(*ManifestVersionResponse)(nil),                        // 78: chef.automate.domain.deployment.ManifestVersionResponse
	(*DeployIDResponse)(nil),                               // 79: chef.automate.domain.deployment.DeployIDResponse
	(*BackupTask)(nil),                                     // 80: chef.automate.domain.deployment.BackupTask
	(*BackupDescription)(nil),                              // 81: chef.automate.domain.deployment.BackupDescription
	(*S3BackupLocation)(nil),                               // 82: chef.automate.domain.deployment.S3BackupLocation
	(*GCSBackupLocation)(nil),                              // 83: chef.automate.domain.deployment.GCSBackupLocation
	(*BackupRestoreTask)(nil),                              // 84: chef.automate.domain.deployment.BackupRestoreTask
	(*BackupDeleteTask)(nil),                               // 85: chef.automate.domain.deployment.BackupDeleteTask
	(*CreateBackupRequest)(nil),                            // 86: chef.automate.domain.deployment.CreateBackupRequest
	(*CreateBackupResponse)(nil),                           // 87: chef.automate.domain.deployment.CreateBackupResponse
	(*ListBackupsRequest)(nil),                             // 88: chef.automate.domain.deployment.ListBackupsRequest
	(*ListBackupsResponse)(nil),                            // 89: chef.automate.domain.deployment.ListBackupsResponse
	(*ShowBackupRequest)(nil),                              // 90: chef.automate.domain.deployment.ShowBackupRequest
	(*ShowBackupResponse)(nil),                             // 91: chef.automate.domain.deployment.ShowBackupResponse
	(*DeleteBackupsRequest)(nil),                           // 92: chef.automate.domain.deployment.DeleteBackupsRequest
	(*DeleteBackupsResponse)(nil),                          // 93: chef.automate.domain.deployment.DeleteBackupsResponse
	(*BackupIntegrityShowRequest)(nil),                     // 94: chef.automate.domain.deployment.BackupIntegrityShowRequest
	(*BackupIntegrityShowResponse)(nil),                    // 95: chef.automate.domain.deployment.BackupIntegrityShowResponse
	(*SnapshotIntegrity)(nil),                              // 96: chef.automate.domain.deployment.SnapshotIntegrity
	(*ValidateBackupIntegrityRequest)(nil),                 // 97: chef.automate.domain.deployment.ValidateBackupIntegrityRequest
	(*ValidateBackupIntegrityResponse)(nil),                // 98: chef.automate.domain.deployment.ValidateBackupIntegrityResponse
	(*RestoreBackupRequest)(nil),                           // 99: chef.automate.domain.deployment.RestoreBackupRequest
	(*RestoreBackupResponse)(nil),                          // 100: chef.automate.domain.deployment.RestoreBackupResponse
	(*BackupStatusRequest)(nil),                            // 101: chef.automate.domain.deployment.BackupStatusRequest
	(*BackupStatusResponse)(nil),                           // 102: chef.automate.domain.deployment.BackupStatusResponse
	(*CancelBackupRequest)(nil),                            // 103: chef.automate.domain.deployment.CancelBackupRequest
	(*CancelBackupResponse)(nil),                           // 104: chef.automate.domain.deployment.CancelBackupResponse
	(*UpgradeRequest)(nil),                                 // 105: chef.automate.domain.deployment.UpgradeRequest
	(*UpgradeResponse)(nil),                                // 106: chef.automate.domain.deployment.UpgradeResponse
	(*ValidatedUpgradeResponse)(nil),                       // 107: chef.automate.domain.deployment.ValidatedUpgradeResponse
	(*CurrentReleaseManifestRequest)(nil),                  // 108: chef.automate.domain.deployment.CurrentReleaseManifestRequest
	(*ReleaseManifest)(nil),                                // 109: chef.automate.domain.deployment.ReleaseManifest
	(*A1UpgradeStatusRequest)(nil),                         // 110: chef.automate.domain.deployment.A1UpgradeStatusRequest
	(*A1UpgradeStatusResponse)(nil),                        // 111: chef.automate.domain.deployment.A1UpgradeStatusResponse
	nil,                                                    // 112: chef.automate.domain.deployment.NodeUsage.MetadataEntry
	(*DeployEvent_Deploy)(nil),                             // 113: chef.automate.domain.deployment.DeployEvent.Deploy
	(*DeployEvent_Phase)(nil),                              // 114: chef.automate.domain.deployment.DeployEvent.Phase
	(*DeployEvent_PhaseStep)(nil),                          // 115: chef.automate.domain.deployment.DeployEvent.PhaseStep
	(*DeployEvent_Backup)(nil),                             // 116: chef.automate.domain.deployment.DeployEvent.Backup
	(*DeployEvent_TaskComplete)(nil),                       // 117: chef.automate.domain.deployment.DeployEvent.TaskComplete
	(*DeployEvent_Backup_Operation)(nil),                   // 118: chef.automate.domain.deployment.DeployEvent.Backup.Operation
	(*A1UpgradeStatusResponse_ServiceMigrationStatus)(nil), // 119: chef.automate.domain.deployment.A1UpgradeStatusResponse.ServiceMigrationStatus
	(*timestamppb.Timestamp)(nil),                          // 120: google.protobuf.Timestamp
	(*deployment.AutomateConfig)(nil),                      // 121: chef.automate.domain.deployment.AutomateConfig
	(*deployment.ConfigRequest)(nil),                       // 122: chef.automate.domain.deployment.ConfigRequest
}
var file_interservice_deployment_automate_deployment_proto_depIdxs = []int32{
	16,  // 0: chef.automate.domain.deployment.NodeInventoryResponse.nodes:type_name -> chef.automate.domain.deployment.InventoryNode
	120, // 1: chef.automate.domain.deployment.UsageRequest.start_time:type_name -> google.protobuf.Timestamp
	19,  // 2: chef.automate.domain.deployment.UsageResponse.nodes:type_name -> chef.automate.domain.deployment.NodeUsage
	112, // 3: chef.automate.domain.deployment.NodeUsage.metadata:type_name -> chef.automate.domain.deployment.NodeUsage.MetadataEntry
	121, // 4: chef.automate.domain.deployment.NewDeploymentRequest.config:type_name -> chef.automate.domain.deployment.AutomateConfig
	47,  // 5: chef.automate.domain.deployment.NewDeploymentRequest.package_options:type_name -> chef.automate.domain.deployment.PackageOptions
	121, // 6: chef.automate.domain.deployment.ConfigureDeploymentRequest.config:type_name -> chef.automate.domain.deployment.AutomateConfig
	49,  // 7: chef.automate.domain.deployment.ConfigureDeploymentResponse.deployment_id:type_name -> chef.automate.domain.deployment.DeploymentID
	121, // 8: chef.automate.domain.deployment.ConfigureDeploymentResponse.config:type_name -> chef.automate.domain.deployment.AutomateConfig
	49,  // 9: chef.automate.domain.deployment.DeployStatusRequest.deployment_id:type_name -> chef.automate.domain.deployment.DeploymentID
	0,   // 10: chef.automate.domain.deployment.UpgradeStatusResponse.state:type_name -> chef.automate.domain.deployment.UpgradeStatusResponse.UpgradeState
	46,  // 11: chef.automate.domain.deployment.UpgradeStatusResponse.remaining_services:type_name -> chef.automate.domain.deployment.UpgradingService
	57,  // 12: chef.automate.domain.deployment.UpgradingService.target:type_name -> chef.automate.domain.deployment.ServiceVersion
	57,  // 13: chef.automate.domain.deployment.UpgradingService.actual:type_name -> chef.automate.domain.deployment.ServiceVersion
	120, // 14: chef.automate.domain.deployment.DeploymentID.created_at:type_name -> google.protobuf.Timestamp
	120, // 15: chef.automate.domain.deployment.DeployEvent.time:type_name -> google.protobuf.Timestamp
	113, // 16: chef.automate.domain.deployment.DeployEvent.deploy:type_name -> chef.automate.domain.deployment.DeployEvent.Deploy
	114, // 17: chef.automate.domain.deployment.DeployEvent.phase:type_name -> chef.automate.domain.deployment.DeployEvent.Phase
	115, // 18: chef.automate.domain.deployment.DeployEvent.phase_step:type_name -> chef.automate.domain.deployment.DeployEvent.PhaseStep
	117, // 19: chef.automate.domain.deployment.DeployEvent.task_complete:type_name -> chef.automate.domain.deployment.DeployEvent.TaskComplete
	116, // 20: chef.automate.domain.deployment.DeployEvent.backup:type_name -> chef.automate.domain.deployment.DeployEvent.Backup
	62,  // 21: chef.automate.domain.deployment.StatusResponse.service_status:type_name -> chef.automate.domain.deployment.ServiceStatus
	122, // 22: chef.automate.domain.deployment.StatusResponse.deployment_config:type_name -> chef.automate.domain.deployment.ConfigRequest
	57,  // 23: chef.automate.domain.deployment.ServiceVersionsResponse.services:type_name -> chef.automate.domain.deployment.ServiceVersion
	120, // 24: chef.automate.domain.deployment.LicenseStatusResponse.expiration_date:type_name -> google.protobuf.Timestamp
	63,  // 25: chef.automate.domain.deployment.ServiceStatus.services:type_name -> chef.automate.domain.deployment.ServiceState
	4,   // 26: chef.automate.domain.deployment.ServiceState.state:type_name -> chef.automate.domain.deployment.ServiceState.State
	121, // 27: chef.automate.domain.deployment.GetAutomateConfigResponse.config:type_name -> chef.automate.domain.deployment.AutomateConfig
	121, // 28: chef.automate.domain.deployment.PatchAutomateConfigRequest.config:type_name -> chef.automate.domain.deployment.AutomateConfig
	121, // 29: chef.automate.domain.deployment.SetAutomateConfigRequest.config:type_name -> chef.automate.domain.deployment.AutomateConfig
	120, // 30: chef.automate.domain.deployment.BackupTask.id:type_name -> google.protobuf.Timestamp
	5,   // 31: chef.automate.domain.deployment.BackupTask.state:type_name -> chef.automate.domain.deployment.BackupTask.BackupState
	120, // 32: chef.automate.domain.deployment.BackupRestoreTask.id:type_name -> google.protobuf.Timestamp
	80,  // 33: chef.automate.domain.deployment.BackupRestoreTask.backup:type_name -> chef.automate.domain.deployment.BackupTask
	82,  // 34: chef.automate.domain.deployment.BackupRestoreTask.s3_backup_location:type_name -> chef.automate.domain.deployment.S3BackupLocation
	109, // 35: chef.automate.domain.deployment.BackupRestoreTask.manifest:type_name -> chef.automate.domain.deployment.ReleaseManifest
	121, // 36: chef.automate.domain.deployment.BackupRestoreTask.patch_config:type_name -> chef.automate.domain.deployment.AutomateConfig
	121, // 37: chef.automate.domain.deployment.BackupRestoreTask.set_config:type_name -> chef.automate.domain.deployment.AutomateConfig
	83,  // 38: chef.automate.domain.deployment.BackupRestoreTask.gcs_backup_location:type_name -> chef.automate.domain.deployment.GCSBackupLocation
	120, // 39: chef.automate.domain.deployment.BackupDeleteTask.id:type_name -> google.protobuf.Timestamp
	80,  // 40: chef.automate.domain.deployment.BackupDeleteTask.backups:type_name -> chef.automate.domain.deployment.BackupTask
	80,  // 41: chef.automate.domain.deployment.CreateBackupResponse.backup:type_name -> chef.automate.domain.deployment.BackupTask
	80,  // 42: chef.automate.domain.deployment.ListBackupsResponse.backups:type_name -> chef.automate.domain.deployment.BackupTask
	80,  // 43: chef.automate.domain.deployment.ShowBackupRequest.backup:type_name -> chef.automate.domain.deployment.BackupTask
	80,  // 44: chef.automate.domain.deployment.ShowBackupResponse.backup:type_name -> chef.automate.domain.deployment.BackupTask
	81,  // 45: chef.automate.domain.deployment.ShowBackupResponse.description:type_name -> chef.automate.domain.deployment.BackupDescription
	80,  // 46: chef.automate.domain.deployment.DeleteBackupsRequest.backups:type_name -> chef.automate.domain.deployment.BackupTask
	85,  // 47: chef.automate.domain.deployment.DeleteBackupsResponse.delete:type_name -> chef.automate.domain.deployment.BackupDeleteTask
	96,  // 48: chef.automate.domain.deployment.BackupIntegrityShowResponse.snapshots:type_name -> chef.automate.domain.deployment.SnapshotIntegrity
	120, // 49: chef.automate.domain.deployment.SnapshotIntegrity.id:type_name -> google.protobuf.Timestamp
	120, // 50: chef.automate.domain.deployment.SnapshotIntegrity.last_verified:type_name -> google.protobuf.Timestamp
	80,  // 51: chef.automate.domain.deployment.ValidateBackupIntegrityRequest.backups:type_name -> chef.automate.domain.deployment.BackupTask
	96,  // 52: chef.automate.domain.deployment.ValidateBackupIntegrityResponse.snapshots:type_name -> chef.automate.domain.deployment.SnapshotIntegrity
	84,  // 53: chef.automate.domain.deployment.RestoreBackupRequest.restore:type_name -> chef.automate.domain.deployment.BackupRestoreTask
	84,  // 54: chef.automate.domain.deployment.RestoreBackupResponse.restore:type_name -> chef.automate.domain.deployment.BackupRestoreTask
	6,   // 55: chef.automate.domain.deployment.BackupStatusResponse.op_type:type_name -> chef.automate.domain.deployment.BackupStatusResponse.OperationType
	7,   // 56: chef.automate.domain.deployment.A1UpgradeStatusResponse.overall_status:type_name -> chef.automate.domain.deployment.A1UpgradeStatusResponse.MigrationStatus
	119, // 57: chef.automate.domain.deployment.A1UpgradeStatusResponse.service_statuses:type_name -> chef.automate.domain.deployment.A1UpgradeStatusResponse.ServiceMigrationStatus
	1,   // 58: chef.automate.domain.deployment.DeployEvent.Deploy.status:type_name -> chef.automate.domain.deployment.DeployEvent.Status
	2,   // 59: chef.automate.domain.deployment.DeployEvent.Phase.phase_id:type_name -> chef.automate.domain.deployment.DeployEvent.PhaseID
	1,   // 60: chef.automate.domain.deployment.DeployEvent.Phase.status:type_name -> chef.automate.domain.deployment.DeployEvent.Status
	2,   // 61: chef.automate.domain.deployment.DeployEvent.PhaseStep.phase_id:type_name -> chef.automate.domain.deployment.DeployEvent.PhaseID
	1,   // 62: chef.automate.domain.deployment.DeployEvent.PhaseStep.status:type_name -> chef.automate.domain.deployment.DeployEvent.Status
	1,   // 63: chef.automate.domain.deployment.DeployEvent.Backup.status:type_name -> chef.automate.domain.deployment.DeployEvent.Status
	118, // 64: chef.automate.domain.deployment.DeployEvent.Backup.operations:type_name -> chef.automate.domain.deployment.DeployEvent.Backup.Operation
	81,  // 65: chef.automate.domain.deployment.DeployEvent.Backup.description:type_name -> chef.automate.domain.deployment.BackupDescription
	1,   // 66: chef.automate.domain.deployment.DeployEvent.Backup.Operation.status:type_name -> chef.automate.domain.deployment.DeployEvent.Status
	3,   // 67: chef.automate.domain.deployment.DeployEvent.Backup.Operation.type:type_name -> chef.automate.domain.deployment.DeployEvent.Backup.Operation.Type
	7,   // 68: chef.automate.domain.deployment.A1UpgradeStatusResponse.ServiceMigrationStatus.status:type_name -> chef.automate.domain.deployment.A1UpgradeStatusResponse.MigrationStatus
	25,  // 69: chef.automate.domain.deployment.Deployment.Deploy:input_type -> chef.automate.domain.deployment.DeployRequest
	25,  // 70: chef.automate.domain.deployment.Deployment.DeployDataServices:input_type -> chef.automate.domain.deployment.DeployRequest
	25,  // 71: chef.automate.domain.deployment.Deployment.DeploySome:input_type -> chef.automate.domain.deployment.DeployRequest
	27,  // 72: chef.automate.domain.deployment.Deployment.DeployStatus:input_type -> chef.automate.domain.deployment.DeployStatusRequest
	25,  // 73: chef.automate.domain.deployment.Deployment.Preload:input_type -> chef.automate.domain.deployment.DeployRequest
	28,  // 74: chef.automate.domain.deployment.Deployment.RemoveSome:input_type -> chef.automate.domain.deployment.RemoveRequest
	25,  // 75: chef.automate.domain.deployment.Deployment.StartNonDataServices:input_type -> chef.automate.domain.deployment.DeployRequest
	22,  // 76: chef.automate.domain.deployment.Deployment.NewDeployment:input_type -> chef.automate.domain.deployment.NewDeploymentRequest
	23,  // 77: chef.automate.domain.deployment.Deployment.ConfigureDeployment:input_type -> chef.automate.domain.deployment.ConfigureDeploymentRequest
	30,  // 78: chef.automate.domain.deployment.Deployment.Ping:input_type -> chef.automate.domain.deployment.PingRequest
	54,  // 79: chef.automate.domain.deployment.Deployment.Status:input_type -> chef.automate.domain.deployment.StatusRequest
	40,  // 80: chef.automate.domain.deployment.Deployment.ServiceVersions:input_type -> chef.automate.domain.deployment.ServiceVersionsRequest
	58,  // 81: chef.automate.domain.deployment.Deployment.LicenseStatus:input_type -> chef.automate.domain.deployment.LicenseStatusRequest
	60,  // 82: chef.automate.domain.deployment.Deployment.LicenseApply:input_type -> chef.automate.domain.deployment.LicenseApplyRequest
	34,  // 83: chef.automate.domain.deployment.Deployment.Stop:input_type -> chef.automate.domain.deployment.StopRequest
	41,  // 84: chef.automate.domain.deployment.Deployment.SystemLogs:input_type -> chef.automate.domain.deployment.SystemLogsRequest
	64,  // 85: chef.automate.domain.deployment.Deployment.GatherLogs:input_type -> chef.automate.domain.deployment.GatherLogsRequest
	66,  // 86: chef.automate.domain.deployment.Deployment.GatherLogsDownload:input_type -> chef.automate.domain.deployment.GatherLogsDownloadRequest
	36,  // 87: chef.automate.domain.deployment.Deployment.StopConverge:input_type -> chef.automate.domain.deployment.StopConvergeRequest
	38,  // 88: chef.automate.domain.deployment.Deployment.StartConverge:input_type -> chef.automate.domain.deployment.StartConvergeRequest
	42,  // 89: chef.automate.domain.deployment.Deployment.UpgradeStatus:input_type -> chef.automate.domain.deployment.UpgradeStatusRequest
	68,  // 90: chef.automate.domain.deployment.Deployment.RestartServices:input_type -> chef.automate.domain.deployment.RestartServicesRequest
	70,  // 91: chef.automate.domain.deployment.Deployment.GetAutomateConfig:input_type -> chef.automate.domain.deployment.GetAutomateConfigRequest
	72,  // 92: chef.automate.domain.deployment.Deployment.PatchAutomateConfig:input_type -> chef.automate.domain.deployment.PatchAutomateConfigRequest
	74,  // 93: chef.automate.domain.deployment.Deployment.SetAutomateConfig:input_type -> chef.automate.domain.deployment.SetAutomateConfigRequest
	76,  // 94: chef.automate.domain.deployment.Deployment.DumpDB:input_type -> chef.automate.domain.deployment.DumpDBRequest
	29,  // 95: chef.automate.domain.deployment.Deployment.ManifestVersion:input_type -> chef.automate.domain.deployment.ManifestVersionRequest
	86,  // 96: chef.automate.domain.deployment.Deployment.CreateBackup:input_type -> chef.automate.domain.deployment.CreateBackupRequest
	88,  // 97: chef.automate.domain.deployment.Deployment.ListBackups:input_type -> chef.automate.domain.deployment.ListBackupsRequest
	90,  // 98: chef.automate.domain.deployment.Deployment.ShowBackup:input_type -> chef.automate.domain.deployment.ShowBackupRequest
	92,  // 99: chef.automate.domain.deployment.Deployment.DeleteBackups:input_type -> chef.automate.domain.deployment.DeleteBackupsRequest
	99,  // 100: chef.automate.domain.deployment.Deployment.RestoreBackup:input_type -> chef.automate.domain.deployment.RestoreBackupRequest
	101, // 101: chef.automate.domain.deployment.Deployment.BackupStatus:input_type -> chef.automate.domain.deployment.BackupStatusRequest
	103, // 102: chef.automate.domain.deployment.Deployment.CancelBackup:input_type -> chef.automate.domain.deployment.CancelBackupRequest
	94,  // 103: chef.automate.domain.deployment.Deployment.BackupIntegrityShow:input_type -> chef.automate.domain.deployment.BackupIntegrityShowRequest
	97,  // 104: chef.automate.domain.deployment.Deployment.ValidateBackupIntegrity:input_type -> chef.automate.domain.deployment.ValidateBackupIntegrityRequest
	105, // 105: chef.automate.domain.deployment.Deployment.Upgrade:input_type -> chef.automate.domain.deployment.UpgradeRequest
	105, // 106: chef.automate.domain.deployment.Deployment.IsValidUpgrade:input_type -> chef.automate.domain.deployment.UpgradeRequest
	44,  // 107: chef.automate.domain.deployment.Deployment.SetLogLevel:input_type -> chef.automate.domain.deployment.SetLogLevelRequest
	20,  // 108: chef.automate.domain.deployment.Deployment.GenerateAdminToken:input_type -> chef.automate.domain.deployment.GenerateAdminTokenRequest
	32,  // 109: chef.automate.domain.deployment.Deployment.DeployID:input_type -> chef.automate.domain.deployment.DeployIDRequest
	108, // 110: chef.automate.domain.deployment.Deployment.CurrentReleaseManifest:input_type -> chef.automate.domain.deployment.CurrentReleaseManifestRequest
	110, // 111: chef.automate.domain.deployment.Deployment.A1UpgradeStatus:input_type -> chef.automate.domain.deployment.A1UpgradeStatusRequest
	12,  // 112: chef.automate.domain.deployment.Deployment.NodeInventory:input_type -> chef.automate.domain.deployment.NodeInventoryRequest
	14,  // 113: chef.automate.domain.deployment.Deployment.InfrastructureNodeDelete:input_type -> chef.automate.domain.deployment.InfrastructureNodeDeleteRequest
	17,  // 114: chef.automate.domain.deployment.Deployment.Usage:input_type -> chef.automate.domain.deployment.UsageRequest
	10,  // 115: chef.automate.domain.deployment.Deployment.GetCLIExecutable:input_type -> chef.automate.domain.deployment.GetCLIExecutableRequest
	8,   // 116: chef.automate.domain.deployment.Deployment.BootstrapBundle:input_type -> chef.automate.domain.deployment.BootstrapBundleRequest
	26,  // 117: chef.automate.domain.deployment.Deployment.Deploy:output_type -> chef.automate.domain.deployment.DeployResponse
	26,  // 118: chef.automate.domain.deployment.Deployment.DeployDataServices:output_type -> chef.automate.domain.deployment.DeployResponse
	26,  // 119: chef.automate.domain.deployment.Deployment.DeploySome:output_type -> chef.automate.domain.deployment.DeployResponse
	51,  // 120: chef.automate.domain.deployment.Deployment.DeployStatus:output_type -> chef.automate.domain.deployment.DeployEvent
	26,  // 121: chef.automate.domain.deployment.Deployment.Preload:output_type -> chef.automate.domain.deployment.DeployResponse
	33,  // 122: chef.automate.domain.deployment.Deployment.RemoveSome:output_type -> chef.automate.domain.deployment.RemoveResponse
	26,  // 123: chef.automate.domain.deployment.Deployment.StartNonDataServices:output_type -> chef.automate.domain.deployment.DeployResponse
	49,  // 124: chef.automate.domain.deployment.Deployment.NewDeployment:output_type -> chef.automate.domain.deployment.DeploymentID
	24,  // 125: chef.automate.domain.deployment.Deployment.ConfigureDeployment:output_type -> chef.automate.domain.deployment.ConfigureDeploymentResponse
	31,  // 126: chef.automate.domain.deployment.Deployment.Ping:output_type -> chef.automate.domain.deployment.PingResponse
	55,  // 127: chef.automate.domain.deployment.Deployment.Status:output_type -> chef.automate.domain.deployment.StatusResponse
	56,  // 128: chef.automate.domain.deployment.Deployment.ServiceVersions:output_type -> chef.automate.domain.deployment.ServiceVersionsResponse
	59,  // 129: chef.automate.domain.deployment.Deployment.LicenseStatus:output_type -> chef.automate.domain.deployment.LicenseStatusResponse
	61,  // 130: chef.automate.domain.deployment.Deployment.LicenseApply:output_type -> chef.automate.domain.deployment.LicenseApplyResponse
	35,  // 131: chef.automate.domain.deployment.Deployment.Stop:output_type -> chef.automate.domain.deployment.StopResponse
	52,  // 132: chef.automate.domain.deployment.Deployment.SystemLogs:output_type -> chef.automate.domain.deployment.LogLine
	65,  // 133: chef.automate.domain.deployment.Deployment.GatherLogs:output_type -> chef.automate.domain.deployment.GatherLogsResponse
	67,  // 134: chef.automate.domain.deployment.Deployment.GatherLogsDownload:output_type -> chef.automate.domain.deployment.GatherLogsDownloadResponse
	37,  // 135: chef.automate.domain.deployment.Deployment.StopConverge:output_type -> chef.automate.domain.deployment.StopConvergeResponse
	39,  // 136: chef.automate.domain.deployment.Deployment.StartConverge:output_type -> chef.automate.domain.deployment.StartConvergeResponse
	43,  // 137: chef.automate.domain.deployment.Deployment.UpgradeStatus:output_type -> chef.automate.domain.deployment.UpgradeStatusResponse
	69,  // 138: chef.automate.domain.deployment.Deployment.RestartServices:output_type -> chef.automate.domain.deployment.RestartServicesResponse
	71,  // 139: chef.automate.domain.deployment.Deployment.GetAutomateConfig:output_type -> chef.automate.domain.deployment.GetAutomateConfigResponse
	73,  // 140: chef.automate.domain.deployment.Deployment.PatchAutomateConfig:output_type -> chef.automate.domain.deployment.PatchAutomateConfigResponse
	75,  // 141: chef.automate.domain.deployment.Deployment.SetAutomateConfig:output_type -> chef.automate.domain.deployment.SetAutomateConfigResponse
	77,  // 142: chef.automate.domain.deployment.Deployment.DumpDB:output_type -> chef.automate.domain.deployment.DumpDBResponse
	78,  // 143: chef.automate.domain.deployment.Deployment.ManifestVersion:output_type -> chef.automate.domain.deployment.ManifestVersionResponse
	87,  // 144: chef.automate.domain.deployment.Deployment.CreateBackup:output_type -> chef.automate.domain.deployment.CreateBackupResponse
	89,  // 145: chef.automate.domain.deployment.Deployment.ListBackups:output_type -> chef.automate.domain.deployment.ListBackupsResponse
	91,  // 146: chef.automate.domain.deployment.Deployment.ShowBackup:output_type -> chef.automate.domain.deployment.ShowBackupResponse
	93,  // 147: chef.automate.domain.deployment.Deployment.DeleteBackups:output_type -> chef.automate.domain.deployment.DeleteBackupsResponse
	100, // 148: chef.automate.domain.deployment.Deployment.RestoreBackup:output_type -> chef.automate.domain.deployment.RestoreBackupResponse
	102, // 149: chef.automate.domain.deployment.Deployment.BackupStatus:output_type -> chef.automate.domain.deployment.BackupStatusResponse
	104, // 150: chef.automate.domain.deployment.Deployment.CancelBackup:output_type -> chef.automate.domain.deployment.CancelBackupResponse
	95,  // 151: chef.automate.domain.deployment.Deployment.BackupIntegrityShow:output_type -> chef.automate.domain.deployment.BackupIntegrityShowResponse
	98,  // 152: chef.automate.domain.deployment.Deployment.ValidateBackupIntegrity:output_type -> chef.automate.domain.deployment.ValidateBackupIntegrityResponse
	106, // 153: chef.automate.domain.deployment.Deployment.Upgrade:output_type -> chef.automate.domain.deployment.UpgradeResponse
	107, // 154: chef.automate.domain.deployment.Deployment.IsValidUpgrade:output_type -> chef.automate.domain.deployment.ValidatedUpgradeResponse
	45,  // 155: chef.automate.domain.deployment.Deployment.SetLogLevel:output_type -> chef.automate.domain.deployment.SetLogLevelResponse
	21,  // 156: chef.automate.domain.deployment.Deployment.GenerateAdminToken:output_type -> chef.automate.domain.deployment.GenerateAdminTokenResponse
	79,  // 157: chef.automate.domain.deployment.Deployment.DeployID:output_type -> chef.automate.domain.deployment.DeployIDResponse
	109, // 158: chef.automate.domain.deployment.Deployment.CurrentReleaseManifest:output_type -> chef.automate.domain.deployment.ReleaseManifest
	111, // 159: chef.automate.domain.deployment.Deployment.A1UpgradeStatus:output_type -> chef.automate.domain.deployment.A1UpgradeStatusResponse
	13,  // 160: chef.automate.domain.deployment.Deployment.NodeInventory:output_type -> chef.automate.domain.deployment.NodeInventoryResponse
	15,  // 161: chef.automate.domain.deployment.Deployment.InfrastructureNodeDelete:output_type -> chef.automate.domain.deployment.InfrastructureNodeDeleteResponse
	18,  // 162: chef.automate.domain.deployment.Deployment.Usage:output_type -> chef.automate.domain.deployment.UsageResponse
	11,  // 163: chef.automate.domain.deployment.Deployment.GetCLIExecutable:output_type -> chef.automate.domain.deployment.GetCLIExecutableResponse
	9,   // 164: chef.automate.domain.deployment.Deployment.BootstrapBundle:output_type -> chef.automate.domain.deployment.BootstrapBundleResponse
	117, // [117:165] is the sub-list for method output_type
	69,  // [69:117] is the sub-list for method input_type
	69,  // [69:69] is the sub-list for extension type_name
	69,  // [69:69] is the sub-list for extension extendee
	0,   // [0:69] is the sub-list for field type_name
}

func init() { file_interservice_deployment_automate_deployment_proto_init() }
func file_interservice_deployment_automate_deployment_proto_init() {
	if File_interservice_deployment_automate_deployment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interservice_deployment_automate_deployment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCLIExecutableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCLIExecutableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInventoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInventoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfrastructureNodeDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfrastructureNodeDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAdminTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAdminTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManifestVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopConvergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopConvergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartConvergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartConvergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLogLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLogLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradingService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportBundleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherLogsDownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatherLogsDownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAutomateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAutomateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAutomateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAutomateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAutomateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAutomateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpDBResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManifestVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3BackupLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCSBackupLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupRestoreTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupDeleteTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBackupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBackupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBackupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupIntegrityShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupIntegrityShowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotIntegrity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateBackupIntegrityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateBackupIntegrityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatedUpgradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentReleaseManifestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A1UpgradeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A1UpgradeStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployEvent_Deploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployEvent_Phase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployEvent_PhaseStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployEvent_Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployEvent_TaskComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployEvent_Backup_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_deployment_automate_deployment_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A1UpgradeStatusResponse_ServiceMigrationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_interservice_deployment_automate_deployment_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*DeployEvent_Deploy_)(nil),
		(*DeployEvent_Phase_)(nil),
		(*DeployEvent_PhaseStep_)(nil),
		(*DeployEvent_TaskComplete_)(nil),
		(*DeployEvent_Backup_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_deployment_automate_deployment_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   112,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_deployment_automate_deployment_proto_goTypes,
		DependencyIndexes: file_interservice_deployment_automate_deployment_proto_depIdxs,
		EnumInfos:         file_interservice_deployment_automate_deployment_proto_enumTypes,
		MessageInfos:      file_interservice_deployment_automate_deployment_proto_msgTypes,
	}.Build()
	File_interservice_deployment_automate_deployment_proto = out.File
	file_interservice_deployment_automate_deployment_proto_rawDesc = nil
	file_interservice_deployment_automate_deployment_proto_goTypes = nil
	file_interservice_deployment_automate_deployment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeploymentClient is the client API for Deployment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeploymentClient interface {
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	DeployDataServices(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	DeploySome(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	DeployStatus(ctx context.Context, in *DeployStatusRequest, opts ...grpc.CallOption) (Deployment_DeployStatusClient, error)
	Preload(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	RemoveSome(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	StartNonDataServices(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	NewDeployment(ctx context.Context, in *NewDeploymentRequest, opts ...grpc.CallOption) (*DeploymentID, error)
	ConfigureDeployment(ctx context.Context, in *ConfigureDeploymentRequest, opts ...grpc.CallOption) (*ConfigureDeploymentResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	ServiceVersions(ctx context.Context, in *ServiceVersionsRequest, opts ...grpc.CallOption) (*ServiceVersionsResponse, error)
	LicenseStatus(ctx context.Context, in *LicenseStatusRequest, opts ...grpc.CallOption) (*LicenseStatusResponse, error)
	LicenseApply(ctx context.Context, in *LicenseApplyRequest, opts ...grpc.CallOption) (*LicenseApplyResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	SystemLogs(ctx context.Context, in *SystemLogsRequest, opts ...grpc.CallOption) (Deployment_SystemLogsClient, error)
	GatherLogs(ctx context.Context, in *GatherLogsRequest, opts ...grpc.CallOption) (*GatherLogsResponse, error)
	GatherLogsDownload(ctx context.Context, in *GatherLogsDownloadRequest, opts ...grpc.CallOption) (Deployment_GatherLogsDownloadClient, error)
	StopConverge(ctx context.Context, in *StopConvergeRequest, opts ...grpc.CallOption) (*StopConvergeResponse, error)
	StartConverge(ctx context.Context, in *StartConvergeRequest, opts ...grpc.CallOption) (*StartConvergeResponse, error)
	UpgradeStatus(ctx context.Context, in *UpgradeStatusRequest, opts ...grpc.CallOption) (*UpgradeStatusResponse, error)
	RestartServices(ctx context.Context, in *RestartServicesRequest, opts ...grpc.CallOption) (*RestartServicesResponse, error)
	GetAutomateConfig(ctx context.Context, in *GetAutomateConfigRequest, opts ...grpc.CallOption) (*GetAutomateConfigResponse, error)
	PatchAutomateConfig(ctx context.Context, in *PatchAutomateConfigRequest, opts ...grpc.CallOption) (*PatchAutomateConfigResponse, error)
	SetAutomateConfig(ctx context.Context, in *SetAutomateConfigRequest, opts ...grpc.CallOption) (*SetAutomateConfigResponse, error)
	DumpDB(ctx context.Context, in *DumpDBRequest, opts ...grpc.CallOption) (Deployment_DumpDBClient, error)
	ManifestVersion(ctx context.Context, in *ManifestVersionRequest, opts ...grpc.CallOption) (*ManifestVersionResponse, error)
	CreateBackup(ctx context.Context, in *CreateBackupRequest, opts ...grpc.CallOption) (*CreateBackupResponse, error)
	ListBackups(ctx context.Context, in *ListBackupsRequest, opts ...grpc.CallOption) (*ListBackupsResponse, error)
	ShowBackup(ctx context.Context, in *ShowBackupRequest, opts ...grpc.CallOption) (*ShowBackupResponse, error)
	DeleteBackups(ctx context.Context, in *DeleteBackupsRequest, opts ...grpc.CallOption) (*DeleteBackupsResponse, error)
	RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*RestoreBackupResponse, error)
	BackupStatus(ctx context.Context, in *BackupStatusRequest, opts ...grpc.CallOption) (*BackupStatusResponse, error)
	CancelBackup(ctx context.Context, in *CancelBackupRequest, opts ...grpc.CallOption) (*CancelBackupResponse, error)
	BackupIntegrityShow(ctx context.Context, in *BackupIntegrityShowRequest, opts ...grpc.CallOption) (*BackupIntegrityShowResponse, error)
	ValidateBackupIntegrity(ctx context.Context, in *ValidateBackupIntegrityRequest, opts ...grpc.CallOption) (*ValidateBackupIntegrityResponse, error)
	Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error)
	IsValidUpgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*ValidatedUpgradeResponse, error)
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
	GenerateAdminToken(ctx context.Context, in *GenerateAdminTokenRequest, opts ...grpc.CallOption) (*GenerateAdminTokenResponse, error)
	DeployID(ctx context.Context, in *DeployIDRequest, opts ...grpc.CallOption) (*DeployIDResponse, error)
	CurrentReleaseManifest(ctx context.Context, in *CurrentReleaseManifestRequest, opts ...grpc.CallOption) (*ReleaseManifest, error)
	A1UpgradeStatus(ctx context.Context, in *A1UpgradeStatusRequest, opts ...grpc.CallOption) (Deployment_A1UpgradeStatusClient, error)
	NodeInventory(ctx context.Context, in *NodeInventoryRequest, opts ...grpc.CallOption) (*NodeInventoryResponse, error)
	InfrastructureNodeDelete(ctx context.Context, in *InfrastructureNodeDeleteRequest, opts ...grpc.CallOption) (*InfrastructureNodeDeleteResponse, error)
	Usage(ctx context.Context, in *UsageRequest, opts ...grpc.CallOption) (*UsageResponse, error)
	GetCLIExecutable(ctx context.Context, in *GetCLIExecutableRequest, opts ...grpc.CallOption) (Deployment_GetCLIExecutableClient, error)
	BootstrapBundle(ctx context.Context, in *BootstrapBundleRequest, opts ...grpc.CallOption) (Deployment_BootstrapBundleClient, error)
}

type deploymentClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentClient(cc grpc.ClientConnInterface) DeploymentClient {
	return &deploymentClient{cc}
}

func (c *deploymentClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) DeployDataServices(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/DeployDataServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) DeploySome(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/DeploySome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) DeployStatus(ctx context.Context, in *DeployStatusRequest, opts ...grpc.CallOption) (Deployment_DeployStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Deployment_serviceDesc.Streams[0], "/chef.automate.domain.deployment.Deployment/DeployStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentDeployStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployment_DeployStatusClient interface {
	Recv() (*DeployEvent, error)
	grpc.ClientStream
}

type deploymentDeployStatusClient struct {
	grpc.ClientStream
}

func (x *deploymentDeployStatusClient) Recv() (*DeployEvent, error) {
	m := new(DeployEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentClient) Preload(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/Preload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) RemoveSome(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/RemoveSome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) StartNonDataServices(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/StartNonDataServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) NewDeployment(ctx context.Context, in *NewDeploymentRequest, opts ...grpc.CallOption) (*DeploymentID, error) {
	out := new(DeploymentID)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/NewDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) ConfigureDeployment(ctx context.Context, in *ConfigureDeploymentRequest, opts ...grpc.CallOption) (*ConfigureDeploymentResponse, error) {
	out := new(ConfigureDeploymentResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/ConfigureDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) ServiceVersions(ctx context.Context, in *ServiceVersionsRequest, opts ...grpc.CallOption) (*ServiceVersionsResponse, error) {
	out := new(ServiceVersionsResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/ServiceVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) LicenseStatus(ctx context.Context, in *LicenseStatusRequest, opts ...grpc.CallOption) (*LicenseStatusResponse, error) {
	out := new(LicenseStatusResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/LicenseStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) LicenseApply(ctx context.Context, in *LicenseApplyRequest, opts ...grpc.CallOption) (*LicenseApplyResponse, error) {
	out := new(LicenseApplyResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/LicenseApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) SystemLogs(ctx context.Context, in *SystemLogsRequest, opts ...grpc.CallOption) (Deployment_SystemLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Deployment_serviceDesc.Streams[1], "/chef.automate.domain.deployment.Deployment/SystemLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentSystemLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployment_SystemLogsClient interface {
	Recv() (*LogLine, error)
	grpc.ClientStream
}

type deploymentSystemLogsClient struct {
	grpc.ClientStream
}

func (x *deploymentSystemLogsClient) Recv() (*LogLine, error) {
	m := new(LogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentClient) GatherLogs(ctx context.Context, in *GatherLogsRequest, opts ...grpc.CallOption) (*GatherLogsResponse, error) {
	out := new(GatherLogsResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/GatherLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) GatherLogsDownload(ctx context.Context, in *GatherLogsDownloadRequest, opts ...grpc.CallOption) (Deployment_GatherLogsDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Deployment_serviceDesc.Streams[2], "/chef.automate.domain.deployment.Deployment/GatherLogsDownload", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentGatherLogsDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployment_GatherLogsDownloadClient interface {
	Recv() (*GatherLogsDownloadResponse, error)
	grpc.ClientStream
}

type deploymentGatherLogsDownloadClient struct {
	grpc.ClientStream
}

func (x *deploymentGatherLogsDownloadClient) Recv() (*GatherLogsDownloadResponse, error) {
	m := new(GatherLogsDownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentClient) StopConverge(ctx context.Context, in *StopConvergeRequest, opts ...grpc.CallOption) (*StopConvergeResponse, error) {
	out := new(StopConvergeResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/StopConverge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) StartConverge(ctx context.Context, in *StartConvergeRequest, opts ...grpc.CallOption) (*StartConvergeResponse, error) {
	out := new(StartConvergeResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/StartConverge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) UpgradeStatus(ctx context.Context, in *UpgradeStatusRequest, opts ...grpc.CallOption) (*UpgradeStatusResponse, error) {
	out := new(UpgradeStatusResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/UpgradeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) RestartServices(ctx context.Context, in *RestartServicesRequest, opts ...grpc.CallOption) (*RestartServicesResponse, error) {
	out := new(RestartServicesResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/RestartServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) GetAutomateConfig(ctx context.Context, in *GetAutomateConfigRequest, opts ...grpc.CallOption) (*GetAutomateConfigResponse, error) {
	out := new(GetAutomateConfigResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/GetAutomateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) PatchAutomateConfig(ctx context.Context, in *PatchAutomateConfigRequest, opts ...grpc.CallOption) (*PatchAutomateConfigResponse, error) {
	out := new(PatchAutomateConfigResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/PatchAutomateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) SetAutomateConfig(ctx context.Context, in *SetAutomateConfigRequest, opts ...grpc.CallOption) (*SetAutomateConfigResponse, error) {
	out := new(SetAutomateConfigResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/SetAutomateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) DumpDB(ctx context.Context, in *DumpDBRequest, opts ...grpc.CallOption) (Deployment_DumpDBClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Deployment_serviceDesc.Streams[3], "/chef.automate.domain.deployment.Deployment/DumpDB", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentDumpDBClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployment_DumpDBClient interface {
	Recv() (*DumpDBResponse, error)
	grpc.ClientStream
}

type deploymentDumpDBClient struct {
	grpc.ClientStream
}

func (x *deploymentDumpDBClient) Recv() (*DumpDBResponse, error) {
	m := new(DumpDBResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentClient) ManifestVersion(ctx context.Context, in *ManifestVersionRequest, opts ...grpc.CallOption) (*ManifestVersionResponse, error) {
	out := new(ManifestVersionResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/ManifestVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) CreateBackup(ctx context.Context, in *CreateBackupRequest, opts ...grpc.CallOption) (*CreateBackupResponse, error) {
	out := new(CreateBackupResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/CreateBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) ListBackups(ctx context.Context, in *ListBackupsRequest, opts ...grpc.CallOption) (*ListBackupsResponse, error) {
	out := new(ListBackupsResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/ListBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) ShowBackup(ctx context.Context, in *ShowBackupRequest, opts ...grpc.CallOption) (*ShowBackupResponse, error) {
	out := new(ShowBackupResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/ShowBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) DeleteBackups(ctx context.Context, in *DeleteBackupsRequest, opts ...grpc.CallOption) (*DeleteBackupsResponse, error) {
	out := new(DeleteBackupsResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/DeleteBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*RestoreBackupResponse, error) {
	out := new(RestoreBackupResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/RestoreBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) BackupStatus(ctx context.Context, in *BackupStatusRequest, opts ...grpc.CallOption) (*BackupStatusResponse, error) {
	out := new(BackupStatusResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/BackupStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) CancelBackup(ctx context.Context, in *CancelBackupRequest, opts ...grpc.CallOption) (*CancelBackupResponse, error) {
	out := new(CancelBackupResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/CancelBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) BackupIntegrityShow(ctx context.Context, in *BackupIntegrityShowRequest, opts ...grpc.CallOption) (*BackupIntegrityShowResponse, error) {
	out := new(BackupIntegrityShowResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/BackupIntegrityShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) ValidateBackupIntegrity(ctx context.Context, in *ValidateBackupIntegrityRequest, opts ...grpc.CallOption) (*ValidateBackupIntegrityResponse, error) {
	out := new(ValidateBackupIntegrityResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/ValidateBackupIntegrity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*UpgradeResponse, error) {
	out := new(UpgradeResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/Upgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) IsValidUpgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (*ValidatedUpgradeResponse, error) {
	out := new(ValidatedUpgradeResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/IsValidUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) GenerateAdminToken(ctx context.Context, in *GenerateAdminTokenRequest, opts ...grpc.CallOption) (*GenerateAdminTokenResponse, error) {
	out := new(GenerateAdminTokenResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/GenerateAdminToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) DeployID(ctx context.Context, in *DeployIDRequest, opts ...grpc.CallOption) (*DeployIDResponse, error) {
	out := new(DeployIDResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/DeployID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) CurrentReleaseManifest(ctx context.Context, in *CurrentReleaseManifestRequest, opts ...grpc.CallOption) (*ReleaseManifest, error) {
	out := new(ReleaseManifest)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/CurrentReleaseManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) A1UpgradeStatus(ctx context.Context, in *A1UpgradeStatusRequest, opts ...grpc.CallOption) (Deployment_A1UpgradeStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Deployment_serviceDesc.Streams[4], "/chef.automate.domain.deployment.Deployment/A1UpgradeStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentA1UpgradeStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployment_A1UpgradeStatusClient interface {
	Recv() (*A1UpgradeStatusResponse, error)
	grpc.ClientStream
}

type deploymentA1UpgradeStatusClient struct {
	grpc.ClientStream
}

func (x *deploymentA1UpgradeStatusClient) Recv() (*A1UpgradeStatusResponse, error) {
	m := new(A1UpgradeStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentClient) NodeInventory(ctx context.Context, in *NodeInventoryRequest, opts ...grpc.CallOption) (*NodeInventoryResponse, error) {
	out := new(NodeInventoryResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/NodeInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) InfrastructureNodeDelete(ctx context.Context, in *InfrastructureNodeDeleteRequest, opts ...grpc.CallOption) (*InfrastructureNodeDeleteResponse, error) {
	out := new(InfrastructureNodeDeleteResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/InfrastructureNodeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) Usage(ctx context.Context, in *UsageRequest, opts ...grpc.CallOption) (*UsageResponse, error) {
	out := new(UsageResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.deployment.Deployment/Usage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) GetCLIExecutable(ctx context.Context, in *GetCLIExecutableRequest, opts ...grpc.CallOption) (Deployment_GetCLIExecutableClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Deployment_serviceDesc.Streams[5], "/chef.automate.domain.deployment.Deployment/GetCLIExecutable", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentGetCLIExecutableClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployment_GetCLIExecutableClient interface {
	Recv() (*GetCLIExecutableResponse, error)
	grpc.ClientStream
}

type deploymentGetCLIExecutableClient struct {
	grpc.ClientStream
}

func (x *deploymentGetCLIExecutableClient) Recv() (*GetCLIExecutableResponse, error) {
	m := new(GetCLIExecutableResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentClient) BootstrapBundle(ctx context.Context, in *BootstrapBundleRequest, opts ...grpc.CallOption) (Deployment_BootstrapBundleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Deployment_serviceDesc.Streams[6], "/chef.automate.domain.deployment.Deployment/BootstrapBundle", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentBootstrapBundleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployment_BootstrapBundleClient interface {
	Recv() (*BootstrapBundleResponse, error)
	grpc.ClientStream
}

type deploymentBootstrapBundleClient struct {
	grpc.ClientStream
}

func (x *deploymentBootstrapBundleClient) Recv() (*BootstrapBundleResponse, error) {
	m := new(BootstrapBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeploymentServer is the server API for Deployment service.
type DeploymentServer interface {
	Deploy(context.Context, *DeployRequest) (*DeployResponse, error)
	DeployDataServices(context.Context, *DeployRequest) (*DeployResponse, error)
	DeploySome(context.Context, *DeployRequest) (*DeployResponse, error)
	DeployStatus(*DeployStatusRequest, Deployment_DeployStatusServer) error
	Preload(context.Context, *DeployRequest) (*DeployResponse, error)
	RemoveSome(context.Context, *RemoveRequest) (*RemoveResponse, error)
	StartNonDataServices(context.Context, *DeployRequest) (*DeployResponse, error)
	NewDeployment(context.Context, *NewDeploymentRequest) (*DeploymentID, error)
	ConfigureDeployment(context.Context, *ConfigureDeploymentRequest) (*ConfigureDeploymentResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	ServiceVersions(context.Context, *ServiceVersionsRequest) (*ServiceVersionsResponse, error)
	LicenseStatus(context.Context, *LicenseStatusRequest) (*LicenseStatusResponse, error)
	LicenseApply(context.Context, *LicenseApplyRequest) (*LicenseApplyResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	SystemLogs(*SystemLogsRequest, Deployment_SystemLogsServer) error
	GatherLogs(context.Context, *GatherLogsRequest) (*GatherLogsResponse, error)
	GatherLogsDownload(*GatherLogsDownloadRequest, Deployment_GatherLogsDownloadServer) error
	StopConverge(context.Context, *StopConvergeRequest) (*StopConvergeResponse, error)
	StartConverge(context.Context, *StartConvergeRequest) (*StartConvergeResponse, error)
	UpgradeStatus(context.Context, *UpgradeStatusRequest) (*UpgradeStatusResponse, error)
	RestartServices(context.Context, *RestartServicesRequest) (*RestartServicesResponse, error)
	GetAutomateConfig(context.Context, *GetAutomateConfigRequest) (*GetAutomateConfigResponse, error)
	PatchAutomateConfig(context.Context, *PatchAutomateConfigRequest) (*PatchAutomateConfigResponse, error)
	SetAutomateConfig(context.Context, *SetAutomateConfigRequest) (*SetAutomateConfigResponse, error)
	DumpDB(*DumpDBRequest, Deployment_DumpDBServer) error
	ManifestVersion(context.Context, *ManifestVersionRequest) (*ManifestVersionResponse, error)
	CreateBackup(context.Context, *CreateBackupRequest) (*CreateBackupResponse, error)
	ListBackups(context.Context, *ListBackupsRequest) (*ListBackupsResponse, error)
	ShowBackup(context.Context, *ShowBackupRequest) (*ShowBackupResponse, error)
	DeleteBackups(context.Context, *DeleteBackupsRequest) (*DeleteBackupsResponse, error)
	RestoreBackup(context.Context, *RestoreBackupRequest) (*RestoreBackupResponse, error)
	BackupStatus(context.Context, *BackupStatusRequest) (*BackupStatusResponse, error)
	CancelBackup(context.Context, *CancelBackupRequest) (*CancelBackupResponse, error)
	BackupIntegrityShow(context.Context, *BackupIntegrityShowRequest) (*BackupIntegrityShowResponse, error)
	ValidateBackupIntegrity(context.Context, *ValidateBackupIntegrityRequest) (*ValidateBackupIntegrityResponse, error)
	Upgrade(context.Context, *UpgradeRequest) (*UpgradeResponse, error)
	IsValidUpgrade(context.Context, *UpgradeRequest) (*ValidatedUpgradeResponse, error)
	SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error)
	GenerateAdminToken(context.Context, *GenerateAdminTokenRequest) (*GenerateAdminTokenResponse, error)
	DeployID(context.Context, *DeployIDRequest) (*DeployIDResponse, error)
	CurrentReleaseManifest(context.Context, *CurrentReleaseManifestRequest) (*ReleaseManifest, error)
	A1UpgradeStatus(*A1UpgradeStatusRequest, Deployment_A1UpgradeStatusServer) error
	NodeInventory(context.Context, *NodeInventoryRequest) (*NodeInventoryResponse, error)
	InfrastructureNodeDelete(context.Context, *InfrastructureNodeDeleteRequest) (*InfrastructureNodeDeleteResponse, error)
	Usage(context.Context, *UsageRequest) (*UsageResponse, error)
	GetCLIExecutable(*GetCLIExecutableRequest, Deployment_GetCLIExecutableServer) error
	BootstrapBundle(*BootstrapBundleRequest, Deployment_BootstrapBundleServer) error
}

// UnimplementedDeploymentServer can be embedded to have forward compatible implementations.
type UnimplementedDeploymentServer struct {
}

func (*UnimplementedDeploymentServer) Deploy(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (*UnimplementedDeploymentServer) DeployDataServices(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployDataServices not implemented")
}
func (*UnimplementedDeploymentServer) DeploySome(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeploySome not implemented")
}
func (*UnimplementedDeploymentServer) DeployStatus(*DeployStatusRequest, Deployment_DeployStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method DeployStatus not implemented")
}
func (*UnimplementedDeploymentServer) Preload(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preload not implemented")
}
func (*UnimplementedDeploymentServer) RemoveSome(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSome not implemented")
}
func (*UnimplementedDeploymentServer) StartNonDataServices(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNonDataServices not implemented")
}
func (*UnimplementedDeploymentServer) NewDeployment(context.Context, *NewDeploymentRequest) (*DeploymentID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDeployment not implemented")
}
func (*UnimplementedDeploymentServer) ConfigureDeployment(context.Context, *ConfigureDeploymentRequest) (*ConfigureDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureDeployment not implemented")
}
func (*UnimplementedDeploymentServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedDeploymentServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedDeploymentServer) ServiceVersions(context.Context, *ServiceVersionsRequest) (*ServiceVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceVersions not implemented")
}
func (*UnimplementedDeploymentServer) LicenseStatus(context.Context, *LicenseStatusRequest) (*LicenseStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LicenseStatus not implemented")
}
func (*UnimplementedDeploymentServer) LicenseApply(context.Context, *LicenseApplyRequest) (*LicenseApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LicenseApply not implemented")
}
func (*UnimplementedDeploymentServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedDeploymentServer) SystemLogs(*SystemLogsRequest, Deployment_SystemLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method SystemLogs not implemented")
}
func (*UnimplementedDeploymentServer) GatherLogs(context.Context, *GatherLogsRequest) (*GatherLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatherLogs not implemented")
}
func (*UnimplementedDeploymentServer) GatherLogsDownload(*GatherLogsDownloadRequest, Deployment_GatherLogsDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method GatherLogsDownload not implemented")
}
func (*UnimplementedDeploymentServer) StopConverge(context.Context, *StopConvergeRequest) (*StopConvergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopConverge not implemented")
}
func (*UnimplementedDeploymentServer) StartConverge(context.Context, *StartConvergeRequest) (*StartConvergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConverge not implemented")
}
func (*UnimplementedDeploymentServer) UpgradeStatus(context.Context, *UpgradeStatusRequest) (*UpgradeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeStatus not implemented")
}
func (*UnimplementedDeploymentServer) RestartServices(context.Context, *RestartServicesRequest) (*RestartServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartServices not implemented")
}
func (*UnimplementedDeploymentServer) GetAutomateConfig(context.Context, *GetAutomateConfigRequest) (*GetAutomateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutomateConfig not implemented")
}
func (*UnimplementedDeploymentServer) PatchAutomateConfig(context.Context, *PatchAutomateConfigRequest) (*PatchAutomateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAutomateConfig not implemented")
}
func (*UnimplementedDeploymentServer) SetAutomateConfig(context.Context, *SetAutomateConfigRequest) (*SetAutomateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutomateConfig not implemented")
}
func (*UnimplementedDeploymentServer) DumpDB(*DumpDBRequest, Deployment_DumpDBServer) error {
	return status.Errorf(codes.Unimplemented, "method DumpDB not implemented")
}
func (*UnimplementedDeploymentServer) ManifestVersion(context.Context, *ManifestVersionRequest) (*ManifestVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManifestVersion not implemented")
}
func (*UnimplementedDeploymentServer) CreateBackup(context.Context, *CreateBackupRequest) (*CreateBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackup not implemented")
}
func (*UnimplementedDeploymentServer) ListBackups(context.Context, *ListBackupsRequest) (*ListBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackups not implemented")
}
func (*UnimplementedDeploymentServer) ShowBackup(context.Context, *ShowBackupRequest) (*ShowBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBackup not implemented")
}
func (*UnimplementedDeploymentServer) DeleteBackups(context.Context, *DeleteBackupsRequest) (*DeleteBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackups not implemented")
}
func (*UnimplementedDeploymentServer) RestoreBackup(context.Context, *RestoreBackupRequest) (*RestoreBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBackup not implemented")
}
func (*UnimplementedDeploymentServer) BackupStatus(context.Context, *BackupStatusRequest) (*BackupStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupStatus not implemented")
}
func (*UnimplementedDeploymentServer) CancelBackup(context.Context, *CancelBackupRequest) (*CancelBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBackup not implemented")
}
func (*UnimplementedDeploymentServer) BackupIntegrityShow(context.Context, *BackupIntegrityShowRequest) (*BackupIntegrityShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupIntegrityShow not implemented")
}
func (*UnimplementedDeploymentServer) ValidateBackupIntegrity(context.Context, *ValidateBackupIntegrityRequest) (*ValidateBackupIntegrityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBackupIntegrity not implemented")
}
func (*UnimplementedDeploymentServer) Upgrade(context.Context, *UpgradeRequest) (*UpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (*UnimplementedDeploymentServer) IsValidUpgrade(context.Context, *UpgradeRequest) (*ValidatedUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidUpgrade not implemented")
}
func (*UnimplementedDeploymentServer) SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (*UnimplementedDeploymentServer) GenerateAdminToken(context.Context, *GenerateAdminTokenRequest) (*GenerateAdminTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAdminToken not implemented")
}
func (*UnimplementedDeploymentServer) DeployID(context.Context, *DeployIDRequest) (*DeployIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployID not implemented")
}
func (*UnimplementedDeploymentServer) CurrentReleaseManifest(context.Context, *CurrentReleaseManifestRequest) (*ReleaseManifest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentReleaseManifest not implemented")
}
func (*UnimplementedDeploymentServer) A1UpgradeStatus(*A1UpgradeStatusRequest, Deployment_A1UpgradeStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method A1UpgradeStatus not implemented")
}
func (*UnimplementedDeploymentServer) NodeInventory(context.Context, *NodeInventoryRequest) (*NodeInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeInventory not implemented")
}
func (*UnimplementedDeploymentServer) InfrastructureNodeDelete(context.Context, *InfrastructureNodeDeleteRequest) (*InfrastructureNodeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfrastructureNodeDelete not implemented")
}
func (*UnimplementedDeploymentServer) Usage(context.Context, *UsageRequest) (*UsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Usage not implemented")
}
func (*UnimplementedDeploymentServer) GetCLIExecutable(*GetCLIExecutableRequest, Deployment_GetCLIExecutableServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCLIExecutable not implemented")
}
func (*UnimplementedDeploymentServer) BootstrapBundle(*BootstrapBundleRequest, Deployment_BootstrapBundleServer) error {
	return status.Errorf(codes.Unimplemented, "method BootstrapBundle not implemented")
}

func RegisterDeploymentServer(s *grpc.Server, srv DeploymentServer) {
	s.RegisterService(&_Deployment_serviceDesc, srv)
}

func _Deployment_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_DeployDataServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).DeployDataServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/DeployDataServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).DeployDataServices(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_DeploySome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).DeploySome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/DeploySome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).DeploySome(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_DeployStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentServer).DeployStatus(m, &deploymentDeployStatusServer{stream})
}

type Deployment_DeployStatusServer interface {
	Send(*DeployEvent) error
	grpc.ServerStream
}

type deploymentDeployStatusServer struct {
	grpc.ServerStream
}

func (x *deploymentDeployStatusServer) Send(m *DeployEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Deployment_Preload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).Preload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/Preload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).Preload(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_RemoveSome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).RemoveSome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/RemoveSome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).RemoveSome(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_StartNonDataServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).StartNonDataServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/StartNonDataServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).StartNonDataServices(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_NewDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).NewDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/NewDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).NewDeployment(ctx, req.(*NewDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_ConfigureDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ConfigureDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/ConfigureDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ConfigureDeployment(ctx, req.(*ConfigureDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_ServiceVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ServiceVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/ServiceVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ServiceVersions(ctx, req.(*ServiceVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_LicenseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).LicenseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/LicenseStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).LicenseStatus(ctx, req.(*LicenseStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_LicenseApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).LicenseApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/LicenseApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).LicenseApply(ctx, req.(*LicenseApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_SystemLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SystemLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentServer).SystemLogs(m, &deploymentSystemLogsServer{stream})
}

type Deployment_SystemLogsServer interface {
	Send(*LogLine) error
	grpc.ServerStream
}

type deploymentSystemLogsServer struct {
	grpc.ServerStream
}

func (x *deploymentSystemLogsServer) Send(m *LogLine) error {
	return x.ServerStream.SendMsg(m)
}

func _Deployment_GatherLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatherLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).GatherLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/GatherLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).GatherLogs(ctx, req.(*GatherLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_GatherLogsDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatherLogsDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentServer).GatherLogsDownload(m, &deploymentGatherLogsDownloadServer{stream})
}

type Deployment_GatherLogsDownloadServer interface {
	Send(*GatherLogsDownloadResponse) error
	grpc.ServerStream
}

type deploymentGatherLogsDownloadServer struct {
	grpc.ServerStream
}

func (x *deploymentGatherLogsDownloadServer) Send(m *GatherLogsDownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Deployment_StopConverge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopConvergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).StopConverge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/StopConverge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).StopConverge(ctx, req.(*StopConvergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_StartConverge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartConvergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).StartConverge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/StartConverge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).StartConverge(ctx, req.(*StartConvergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_UpgradeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).UpgradeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/UpgradeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).UpgradeStatus(ctx, req.(*UpgradeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_RestartServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).RestartServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/RestartServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).RestartServices(ctx, req.(*RestartServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_GetAutomateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutomateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).GetAutomateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/GetAutomateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).GetAutomateConfig(ctx, req.(*GetAutomateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_PatchAutomateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAutomateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).PatchAutomateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/PatchAutomateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).PatchAutomateConfig(ctx, req.(*PatchAutomateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_SetAutomateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutomateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).SetAutomateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/SetAutomateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).SetAutomateConfig(ctx, req.(*SetAutomateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_DumpDB_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DumpDBRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentServer).DumpDB(m, &deploymentDumpDBServer{stream})
}

type Deployment_DumpDBServer interface {
	Send(*DumpDBResponse) error
	grpc.ServerStream
}

type deploymentDumpDBServer struct {
	grpc.ServerStream
}

func (x *deploymentDumpDBServer) Send(m *DumpDBResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Deployment_ManifestVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ManifestVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/ManifestVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ManifestVersion(ctx, req.(*ManifestVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_CreateBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).CreateBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/CreateBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).CreateBackup(ctx, req.(*CreateBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_ListBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ListBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/ListBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ListBackups(ctx, req.(*ListBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_ShowBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ShowBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/ShowBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ShowBackup(ctx, req.(*ShowBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_DeleteBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).DeleteBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/DeleteBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).DeleteBackups(ctx, req.(*DeleteBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_RestoreBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).RestoreBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/RestoreBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).RestoreBackup(ctx, req.(*RestoreBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_BackupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).BackupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/BackupStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).BackupStatus(ctx, req.(*BackupStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_CancelBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).CancelBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/CancelBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).CancelBackup(ctx, req.(*CancelBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_BackupIntegrityShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupIntegrityShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).BackupIntegrityShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/BackupIntegrityShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).BackupIntegrityShow(ctx, req.(*BackupIntegrityShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_ValidateBackupIntegrity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateBackupIntegrityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ValidateBackupIntegrity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/ValidateBackupIntegrity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ValidateBackupIntegrity(ctx, req.(*ValidateBackupIntegrityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).Upgrade(ctx, req.(*UpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_IsValidUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).IsValidUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/IsValidUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).IsValidUpgrade(ctx, req.(*UpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_GenerateAdminToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAdminTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).GenerateAdminToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/GenerateAdminToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).GenerateAdminToken(ctx, req.(*GenerateAdminTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_DeployID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).DeployID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/DeployID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).DeployID(ctx, req.(*DeployIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_CurrentReleaseManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentReleaseManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).CurrentReleaseManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/CurrentReleaseManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).CurrentReleaseManifest(ctx, req.(*CurrentReleaseManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_A1UpgradeStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(A1UpgradeStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentServer).A1UpgradeStatus(m, &deploymentA1UpgradeStatusServer{stream})
}

type Deployment_A1UpgradeStatusServer interface {
	Send(*A1UpgradeStatusResponse) error
	grpc.ServerStream
}

type deploymentA1UpgradeStatusServer struct {
	grpc.ServerStream
}

func (x *deploymentA1UpgradeStatusServer) Send(m *A1UpgradeStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Deployment_NodeInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).NodeInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/NodeInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).NodeInventory(ctx, req.(*NodeInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_InfrastructureNodeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfrastructureNodeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).InfrastructureNodeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/InfrastructureNodeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).InfrastructureNodeDelete(ctx, req.(*InfrastructureNodeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_Usage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).Usage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.deployment.Deployment/Usage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).Usage(ctx, req.(*UsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_GetCLIExecutable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCLIExecutableRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentServer).GetCLIExecutable(m, &deploymentGetCLIExecutableServer{stream})
}

type Deployment_GetCLIExecutableServer interface {
	Send(*GetCLIExecutableResponse) error
	grpc.ServerStream
}

type deploymentGetCLIExecutableServer struct {
	grpc.ServerStream
}

func (x *deploymentGetCLIExecutableServer) Send(m *GetCLIExecutableResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Deployment_BootstrapBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BootstrapBundleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentServer).BootstrapBundle(m, &deploymentBootstrapBundleServer{stream})
}

type Deployment_BootstrapBundleServer interface {
	Send(*BootstrapBundleResponse) error
	grpc.ServerStream
}

type deploymentBootstrapBundleServer struct {
	grpc.ServerStream
}

func (x *deploymentBootstrapBundleServer) Send(m *BootstrapBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Deployment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.deployment.Deployment",
	HandlerType: (*DeploymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _Deployment_Deploy_Handler,
		},
		{
			MethodName: "DeployDataServices",
			Handler:    _Deployment_DeployDataServices_Handler,
		},
		{
			MethodName: "DeploySome",
			Handler:    _Deployment_DeploySome_Handler,
		},
		{
			MethodName: "Preload",
			Handler:    _Deployment_Preload_Handler,
		},
		{
			MethodName: "RemoveSome",
			Handler:    _Deployment_RemoveSome_Handler,
		},
		{
			MethodName: "StartNonDataServices",
			Handler:    _Deployment_StartNonDataServices_Handler,
		},
		{
			MethodName: "NewDeployment",
			Handler:    _Deployment_NewDeployment_Handler,
		},
		{
			MethodName: "ConfigureDeployment",
			Handler:    _Deployment_ConfigureDeployment_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Deployment_Ping_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Deployment_Status_Handler,
		},
		{
			MethodName: "ServiceVersions",
			Handler:    _Deployment_ServiceVersions_Handler,
		},
		{
			MethodName: "LicenseStatus",
			Handler:    _Deployment_LicenseStatus_Handler,
		},
		{
			MethodName: "LicenseApply",
			Handler:    _Deployment_LicenseApply_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Deployment_Stop_Handler,
		},
		{
			MethodName: "GatherLogs",
			Handler:    _Deployment_GatherLogs_Handler,
		},
		{
			MethodName: "StopConverge",
			Handler:    _Deployment_StopConverge_Handler,
		},
		{
			MethodName: "StartConverge",
			Handler:    _Deployment_StartConverge_Handler,
		},
		{
			MethodName: "UpgradeStatus",
			Handler:    _Deployment_UpgradeStatus_Handler,
		},
		{
			MethodName: "RestartServices",
			Handler:    _Deployment_RestartServices_Handler,
		},
		{
			MethodName: "GetAutomateConfig",
			Handler:    _Deployment_GetAutomateConfig_Handler,
		},
		{
			MethodName: "PatchAutomateConfig",
			Handler:    _Deployment_PatchAutomateConfig_Handler,
		},
		{
			MethodName: "SetAutomateConfig",
			Handler:    _Deployment_SetAutomateConfig_Handler,
		},
		{
			MethodName: "ManifestVersion",
			Handler:    _Deployment_ManifestVersion_Handler,
		},
		{
			MethodName: "CreateBackup",
			Handler:    _Deployment_CreateBackup_Handler,
		},
		{
			MethodName: "ListBackups",
			Handler:    _Deployment_ListBackups_Handler,
		},
		{
			MethodName: "ShowBackup",
			Handler:    _Deployment_ShowBackup_Handler,
		},
		{
			MethodName: "DeleteBackups",
			Handler:    _Deployment_DeleteBackups_Handler,
		},
		{
			MethodName: "RestoreBackup",
			Handler:    _Deployment_RestoreBackup_Handler,
		},
		{
			MethodName: "BackupStatus",
			Handler:    _Deployment_BackupStatus_Handler,
		},
		{
			MethodName: "CancelBackup",
			Handler:    _Deployment_CancelBackup_Handler,
		},
		{
			MethodName: "BackupIntegrityShow",
			Handler:    _Deployment_BackupIntegrityShow_Handler,
		},
		{
			MethodName: "ValidateBackupIntegrity",
			Handler:    _Deployment_ValidateBackupIntegrity_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _Deployment_Upgrade_Handler,
		},
		{
			MethodName: "IsValidUpgrade",
			Handler:    _Deployment_IsValidUpgrade_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _Deployment_SetLogLevel_Handler,
		},
		{
			MethodName: "GenerateAdminToken",
			Handler:    _Deployment_GenerateAdminToken_Handler,
		},
		{
			MethodName: "DeployID",
			Handler:    _Deployment_DeployID_Handler,
		},
		{
			MethodName: "CurrentReleaseManifest",
			Handler:    _Deployment_CurrentReleaseManifest_Handler,
		},
		{
			MethodName: "NodeInventory",
			Handler:    _Deployment_NodeInventory_Handler,
		},
		{
			MethodName: "InfrastructureNodeDelete",
			Handler:    _Deployment_InfrastructureNodeDelete_Handler,
		},
		{
			MethodName: "Usage",
			Handler:    _Deployment_Usage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeployStatus",
			Handler:       _Deployment_DeployStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SystemLogs",
			Handler:       _Deployment_SystemLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GatherLogsDownload",
			Handler:       _Deployment_GatherLogsDownload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DumpDB",
			Handler:       _Deployment_DumpDB_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "A1UpgradeStatus",
			Handler:       _Deployment_A1UpgradeStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCLIExecutable",
			Handler:       _Deployment_GetCLIExecutable_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BootstrapBundle",
			Handler:       _Deployment_BootstrapBundle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interservice/deployment/automate_deployment.proto",
}
