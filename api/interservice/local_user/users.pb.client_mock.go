// Code generated by MockGen. DO NOT EDIT.
// Source: local_user/users.pb.go

// Package local_user is a generated GoMock package.
package local_user

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockUsersMgmtServiceClient is a mock of UsersMgmtServiceClient interface
type MockUsersMgmtServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMgmtServiceClientMockRecorder
}

// MockUsersMgmtServiceClientMockRecorder is the mock recorder for MockUsersMgmtServiceClient
type MockUsersMgmtServiceClientMockRecorder struct {
	mock *MockUsersMgmtServiceClient
}

// NewMockUsersMgmtServiceClient creates a new mock instance
func NewMockUsersMgmtServiceClient(ctrl *gomock.Controller) *MockUsersMgmtServiceClient {
	mock := &MockUsersMgmtServiceClient{ctrl: ctrl}
	mock.recorder = &MockUsersMgmtServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersMgmtServiceClient) EXPECT() *MockUsersMgmtServiceClientMockRecorder {
	return m.recorder
}

// GetUsers mocks base method
func (m *MockUsersMgmtServiceClient) GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (*Users, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockUsersMgmtServiceClientMockRecorder) GetUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUsersMgmtServiceClient)(nil).GetUsers), varargs...)
}

// GetUser mocks base method
func (m *MockUsersMgmtServiceClient) GetUser(ctx context.Context, in *Email, opts ...grpc.CallOption) (*User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUsersMgmtServiceClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersMgmtServiceClient)(nil).GetUser), varargs...)
}

// CreateUser mocks base method
func (m *MockUsersMgmtServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUsersMgmtServiceClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersMgmtServiceClient)(nil).CreateUser), varargs...)
}

// DeleteUser mocks base method
func (m *MockUsersMgmtServiceClient) DeleteUser(ctx context.Context, in *Email, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*DeleteUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockUsersMgmtServiceClientMockRecorder) DeleteUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsersMgmtServiceClient)(nil).DeleteUser), varargs...)
}

// UpdateUser mocks base method
func (m *MockUsersMgmtServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUsersMgmtServiceClientMockRecorder) UpdateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsersMgmtServiceClient)(nil).UpdateUser), varargs...)
}

// UpdateSelf mocks base method
func (m *MockUsersMgmtServiceClient) UpdateSelf(ctx context.Context, in *UpdateSelfReq, opts ...grpc.CallOption) (*User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSelf", varargs...)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSelf indicates an expected call of UpdateSelf
func (mr *MockUsersMgmtServiceClientMockRecorder) UpdateSelf(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSelf", reflect.TypeOf((*MockUsersMgmtServiceClient)(nil).UpdateSelf), varargs...)
}

// MockUsersMgmtServiceServer is a mock of UsersMgmtServiceServer interface
type MockUsersMgmtServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMgmtServiceServerMockRecorder
}

// MockUsersMgmtServiceServerMockRecorder is the mock recorder for MockUsersMgmtServiceServer
type MockUsersMgmtServiceServerMockRecorder struct {
	mock *MockUsersMgmtServiceServer
}

// NewMockUsersMgmtServiceServer creates a new mock instance
func NewMockUsersMgmtServiceServer(ctrl *gomock.Controller) *MockUsersMgmtServiceServer {
	mock := &MockUsersMgmtServiceServer{ctrl: ctrl}
	mock.recorder = &MockUsersMgmtServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersMgmtServiceServer) EXPECT() *MockUsersMgmtServiceServerMockRecorder {
	return m.recorder
}

// GetUsers mocks base method
func (m *MockUsersMgmtServiceServer) GetUsers(arg0 context.Context, arg1 *GetUsersReq) (*Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockUsersMgmtServiceServerMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUsersMgmtServiceServer)(nil).GetUsers), arg0, arg1)
}

// GetUser mocks base method
func (m *MockUsersMgmtServiceServer) GetUser(arg0 context.Context, arg1 *Email) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUsersMgmtServiceServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersMgmtServiceServer)(nil).GetUser), arg0, arg1)
}

// CreateUser mocks base method
func (m *MockUsersMgmtServiceServer) CreateUser(arg0 context.Context, arg1 *CreateUserReq) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUsersMgmtServiceServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersMgmtServiceServer)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method
func (m *MockUsersMgmtServiceServer) DeleteUser(arg0 context.Context, arg1 *Email) (*DeleteUserResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*DeleteUserResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockUsersMgmtServiceServerMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsersMgmtServiceServer)(nil).DeleteUser), arg0, arg1)
}

// UpdateUser mocks base method
func (m *MockUsersMgmtServiceServer) UpdateUser(arg0 context.Context, arg1 *UpdateUserReq) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUsersMgmtServiceServerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsersMgmtServiceServer)(nil).UpdateUser), arg0, arg1)
}

// UpdateSelf mocks base method
func (m *MockUsersMgmtServiceServer) UpdateSelf(arg0 context.Context, arg1 *UpdateSelfReq) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSelf", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSelf indicates an expected call of UpdateSelf
func (mr *MockUsersMgmtServiceServerMockRecorder) UpdateSelf(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSelf", reflect.TypeOf((*MockUsersMgmtServiceServer)(nil).UpdateSelf), arg0, arg1)
}
