// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: interservice/event_feed/event_feed.proto

package event_feed

import (
	context "context"
	_ "github.com/chef/automate/api/external/common"
	query "github.com/chef/automate/api/external/common/query"
	_ "github.com/chef/automate/api/external/event_feed/request"
	_ "github.com/chef/automate/api/external/event_feed/response"
	event "github.com/chef/automate/api/interservice/event"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" toml:"user_id,omitempty" mapstructure:"user_id,omitempty"`
	Size    int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty" toml:"size,omitempty" mapstructure:"size,omitempty"`
	Start   int64    `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty" toml:"start,omitempty" mapstructure:"start,omitempty"`
	End     int64    `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty" toml:"end,omitempty" mapstructure:"end,omitempty"`
	Before  int64    `protobuf:"varint,6,opt,name=before,proto3" json:"before,omitempty" toml:"before,omitempty" mapstructure:"before,omitempty"`
	After   int64    `protobuf:"varint,7,opt,name=after,proto3" json:"after,omitempty" toml:"after,omitempty" mapstructure:"after,omitempty"`
	Sort    []string `protobuf:"bytes,8,rep,name=sort,proto3" json:"sort,omitempty" toml:"sort,omitempty" mapstructure:"sort,omitempty"`
	Filters []string `protobuf:"bytes,9,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
	Cursor  string   `protobuf:"bytes,10,opt,name=cursor,proto3" json:"cursor,omitempty" toml:"cursor,omitempty" mapstructure:"cursor,omitempty"`
}

func (x *FeedRequest) Reset() {
	*x = FeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedRequest) ProtoMessage() {}

func (x *FeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedRequest.ProtoReflect.Descriptor instead.
func (*FeedRequest) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{0}
}

func (x *FeedRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FeedRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FeedRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *FeedRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *FeedRequest) GetBefore() int64 {
	if x != nil {
		return x.Before
	}
	return 0
}

func (x *FeedRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *FeedRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *FeedRequest) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FeedRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type FeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedEntries  []*FeedEntry `protobuf:"bytes,1,rep,name=feed_entries,json=feedEntries,proto3" json:"feed_entries,omitempty" toml:"feed_entries,omitempty" mapstructure:"feed_entries,omitempty"`
	TotalEntries int64        `protobuf:"varint,2,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty" toml:"total_entries,omitempty" mapstructure:"total_entries,omitempty"`
}

func (x *FeedResponse) Reset() {
	*x = FeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedResponse) ProtoMessage() {}

func (x *FeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedResponse.ProtoReflect.Descriptor instead.
func (*FeedResponse) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{1}
}

func (x *FeedResponse) GetFeedEntries() []*FeedEntry {
	if x != nil {
		return x.FeedEntries
	}
	return nil
}

func (x *FeedResponse) GetTotalEntries() int64 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

type FeedEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	EventType            string                 `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty" toml:"event_type,omitempty" mapstructure:"event_type,omitempty"`
	FeedType             string                 `protobuf:"bytes,3,opt,name=feed_type,json=feedType,proto3" json:"feed_type,omitempty" toml:"feed_type,omitempty" mapstructure:"feed_type,omitempty"`
	Tags                 []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" toml:"tags,omitempty" mapstructure:"tags,omitempty"`
	SourceEventPublished *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=source_event_published,json=sourceEventPublished,proto3" json:"source_event_published,omitempty" toml:"source_event_published,omitempty" mapstructure:"source_event_published,omitempty"`
	Created              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty" toml:"created,omitempty" mapstructure:"created,omitempty"`
	Producer             *Producer              `protobuf:"bytes,7,opt,name=producer,proto3" json:"producer,omitempty" toml:"producer,omitempty" mapstructure:"producer,omitempty"`
	Actor                *Actor                 `protobuf:"bytes,8,opt,name=actor,proto3" json:"actor,omitempty" toml:"actor,omitempty" mapstructure:"actor,omitempty"`
	Verb                 string                 `protobuf:"bytes,9,opt,name=verb,proto3" json:"verb,omitempty" toml:"verb,omitempty" mapstructure:"verb,omitempty"`
	Object               *Object                `protobuf:"bytes,10,opt,name=object,proto3" json:"object,omitempty" toml:"object,omitempty" mapstructure:"object,omitempty"`
	Target               *Target                `protobuf:"bytes,11,opt,name=target,proto3" json:"target,omitempty" toml:"target,omitempty" mapstructure:"target,omitempty"`
	Parent               *Parent                `protobuf:"bytes,12,opt,name=parent,proto3" json:"parent,omitempty" toml:"parent,omitempty" mapstructure:"parent,omitempty"`
	// Event's Chef Organization
	ChefOrganization string `protobuf:"bytes,13,opt,name=chef_organization,json=chefOrganization,proto3" json:"chef_organization,omitempty" toml:"chef_organization,omitempty" mapstructure:"chef_organization,omitempty"`
	// Event's Chef Infra Server
	ChefInfraServer string `protobuf:"bytes,14,opt,name=chef_infra_server,json=chefInfraServer,proto3" json:"chef_infra_server,omitempty" toml:"chef_infra_server,omitempty" mapstructure:"chef_infra_server,omitempty"`
}

func (x *FeedEntry) Reset() {
	*x = FeedEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedEntry) ProtoMessage() {}

func (x *FeedEntry) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedEntry.ProtoReflect.Descriptor instead.
func (*FeedEntry) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{2}
}

func (x *FeedEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeedEntry) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *FeedEntry) GetFeedType() string {
	if x != nil {
		return x.FeedType
	}
	return ""
}

func (x *FeedEntry) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FeedEntry) GetSourceEventPublished() *timestamppb.Timestamp {
	if x != nil {
		return x.SourceEventPublished
	}
	return nil
}

func (x *FeedEntry) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *FeedEntry) GetProducer() *Producer {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *FeedEntry) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *FeedEntry) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *FeedEntry) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FeedEntry) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *FeedEntry) GetParent() *Parent {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *FeedEntry) GetChefOrganization() string {
	if x != nil {
		return x.ChefOrganization
	}
	return ""
}

func (x *FeedEntry) GetChefInfraServer() string {
	if x != nil {
		return x.ChefInfraServer
	}
	return ""
}

type Parent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
}

func (x *Parent) Reset() {
	*x = Parent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parent) ProtoMessage() {}

func (x *Parent) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parent.ProtoReflect.Descriptor instead.
func (*Parent) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{3}
}

func (x *Parent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Parent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Producer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	ObjectType string   `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty" toml:"object_type,omitempty" mapstructure:"object_type,omitempty"`
	PTags      []string `protobuf:"bytes,4,rep,name=p_tags,json=pTags,proto3" json:"p_tags,omitempty" toml:"p_tags,omitempty" mapstructure:"p_tags,omitempty"`
}

func (x *Producer) Reset() {
	*x = Producer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer) ProtoMessage() {}

func (x *Producer) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer.ProtoReflect.Descriptor instead.
func (*Producer) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{4}
}

func (x *Producer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Producer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Producer) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *Producer) GetPTags() []string {
	if x != nil {
		return x.PTags
	}
	return nil
}

type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	ObjectType string `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty" toml:"object_type,omitempty" mapstructure:"object_type,omitempty"`
}

func (x *Actor) Reset() {
	*x = Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{5}
}

func (x *Actor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Actor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Actor) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	ObjectType string `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty" toml:"object_type,omitempty" mapstructure:"object_type,omitempty"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{6}
}

func (x *Object) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Object) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Object) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty" mapstructure:"name,omitempty"`
	ObjectType string `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty" toml:"object_type,omitempty" mapstructure:"object_type,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{7}
}

func (x *Target) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Target) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Target) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

type FeedSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start         int64    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty" toml:"start,omitempty" mapstructure:"start,omitempty"`
	End           int64    `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty" toml:"end,omitempty" mapstructure:"end,omitempty"`
	Size          int32    `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty" toml:"size,omitempty" mapstructure:"size,omitempty"`
	From          int32    `protobuf:"varint,5,opt,name=from,proto3" json:"from,omitempty" toml:"from,omitempty" mapstructure:"from,omitempty"`
	StartAfter    string   `protobuf:"bytes,6,opt,name=start_after,json=startAfter,proto3" json:"start_after,omitempty" toml:"start_after,omitempty" mapstructure:"start_after,omitempty"`
	Filters       []string `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
	CountCategory string   `protobuf:"bytes,9,opt,name=count_category,json=countCategory,proto3" json:"count_category,omitempty" toml:"count_category,omitempty" mapstructure:"count_category,omitempty"`
}

func (x *FeedSummaryRequest) Reset() {
	*x = FeedSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedSummaryRequest) ProtoMessage() {}

func (x *FeedSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedSummaryRequest.ProtoReflect.Descriptor instead.
func (*FeedSummaryRequest) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{8}
}

func (x *FeedSummaryRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *FeedSummaryRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *FeedSummaryRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FeedSummaryRequest) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *FeedSummaryRequest) GetStartAfter() string {
	if x != nil {
		return x.StartAfter
	}
	return ""
}

func (x *FeedSummaryRequest) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FeedSummaryRequest) GetCountCategory() string {
	if x != nil {
		return x.CountCategory
	}
	return ""
}

type FeedSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalEntries int64         `protobuf:"varint,1,opt,name=total_entries,json=totalEntries,proto3" json:"total_entries,omitempty" toml:"total_entries,omitempty" mapstructure:"total_entries,omitempty"`
	EntryCounts  []*EntryCount `protobuf:"bytes,2,rep,name=entry_counts,json=entryCounts,proto3" json:"entry_counts,omitempty" toml:"entry_counts,omitempty" mapstructure:"entry_counts,omitempty"`
}

func (x *FeedSummaryResponse) Reset() {
	*x = FeedSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedSummaryResponse) ProtoMessage() {}

func (x *FeedSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedSummaryResponse.ProtoReflect.Descriptor instead.
func (*FeedSummaryResponse) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{9}
}

func (x *FeedSummaryResponse) GetTotalEntries() int64 {
	if x != nil {
		return x.TotalEntries
	}
	return 0
}

func (x *FeedSummaryResponse) GetEntryCounts() []*EntryCount {
	if x != nil {
		return x.EntryCounts
	}
	return nil
}

type EntryCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty" toml:"category,omitempty" mapstructure:"category,omitempty"`
	Count    int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty" toml:"count,omitempty" mapstructure:"count,omitempty"`
}

func (x *EntryCount) Reset() {
	*x = EntryCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryCount) ProtoMessage() {}

func (x *EntryCount) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryCount.ProtoReflect.Descriptor instead.
func (*EntryCount) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{10}
}

func (x *EntryCount) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EntryCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FeedTimelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    string   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty" toml:"start,omitempty" mapstructure:"start,omitempty"`
	End      string   `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty" toml:"end,omitempty" mapstructure:"end,omitempty"`
	Timezone string   `protobuf:"bytes,3,opt,name=timezone,proto3" json:"timezone,omitempty" toml:"timezone,omitempty" mapstructure:"timezone,omitempty"`
	Interval int32    `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty" toml:"interval,omitempty" mapstructure:"interval,omitempty"`
	Filters  []string `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty" toml:"filters,omitempty" mapstructure:"filters,omitempty"`
}

func (x *FeedTimelineRequest) Reset() {
	*x = FeedTimelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedTimelineRequest) ProtoMessage() {}

func (x *FeedTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedTimelineRequest.ProtoReflect.Descriptor instead.
func (*FeedTimelineRequest) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{11}
}

func (x *FeedTimelineRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *FeedTimelineRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *FeedTimelineRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *FeedTimelineRequest) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *FeedTimelineRequest) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

type FeedTimelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start       string        `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty" toml:"start,omitempty" mapstructure:"start,omitempty"`
	End         string        `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty" toml:"end,omitempty" mapstructure:"end,omitempty"`
	Interval    int32         `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty" toml:"interval,omitempty" mapstructure:"interval,omitempty"`
	ActionLines []*ActionLine `protobuf:"bytes,4,rep,name=action_lines,json=actionLines,proto3" json:"action_lines,omitempty" toml:"action_lines,omitempty" mapstructure:"action_lines,omitempty"`
}

func (x *FeedTimelineResponse) Reset() {
	*x = FeedTimelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedTimelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedTimelineResponse) ProtoMessage() {}

func (x *FeedTimelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedTimelineResponse.ProtoReflect.Descriptor instead.
func (*FeedTimelineResponse) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{12}
}

func (x *FeedTimelineResponse) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *FeedTimelineResponse) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *FeedTimelineResponse) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *FeedTimelineResponse) GetActionLines() []*ActionLine {
	if x != nil {
		return x.ActionLines
	}
	return nil
}

type ActionLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string      `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty" mapstructure:"action,omitempty"`
	Slots  []*Timeslot `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty" toml:"slots,omitempty" mapstructure:"slots,omitempty"`
}

func (x *ActionLine) Reset() {
	*x = ActionLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionLine) ProtoMessage() {}

func (x *ActionLine) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionLine.ProtoReflect.Descriptor instead.
func (*ActionLine) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{13}
}

func (x *ActionLine) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ActionLine) GetSlots() []*Timeslot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type Timeslot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counts []*EntryCount `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty" toml:"counts,omitempty" mapstructure:"counts,omitempty"`
}

func (x *Timeslot) Reset() {
	*x = Timeslot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timeslot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timeslot) ProtoMessage() {}

func (x *Timeslot) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timeslot.ProtoReflect.Descriptor instead.
func (*Timeslot) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{14}
}

func (x *Timeslot) GetCounts() []*EntryCount {
	if x != nil {
		return x.Counts
	}
	return nil
}

type EventExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exported reports in JSON or CSV.
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty" toml:"content,omitempty" mapstructure:"content,omitempty"`
}

func (x *EventExportResponse) Reset() {
	*x = EventExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventExportResponse) ProtoMessage() {}

func (x *EventExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventExportResponse.ProtoReflect.Descriptor instead.
func (*EventExportResponse) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{15}
}

func (x *EventExportResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type EventExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JSON or CSV
	OutputType string `protobuf:"bytes,1,opt,name=output_type,json=outputType,proto3" json:"output_type,omitempty" toml:"output_type,omitempty" mapstructure:"output_type,omitempty"`
	// Filters to be applied to the request.
	Filter []string `protobuf:"bytes,2,rep,name=filter,proto3" json:"filter,omitempty" toml:"filter,omitempty" mapstructure:"filter,omitempty"`
	// Earliest events to return.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty" toml:"start,omitempty" mapstructure:"start,omitempty"`
	// Latest events to return.
	End int64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty" toml:"end,omitempty" mapstructure:"end,omitempty"`
	// Order the results should be returned in.
	Order query.SortOrder `protobuf:"varint,5,opt,name=order,proto3,enum=chef.automate.api.common.query.SortOrder" json:"order,omitempty" toml:"order,omitempty" mapstructure:"order,omitempty"`
}

func (x *EventExportRequest) Reset() {
	*x = EventExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_event_feed_event_feed_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventExportRequest) ProtoMessage() {}

func (x *EventExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_event_feed_event_feed_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventExportRequest.ProtoReflect.Descriptor instead.
func (*EventExportRequest) Descriptor() ([]byte, []int) {
	return file_interservice_event_feed_event_feed_proto_rawDescGZIP(), []int{16}
}

func (x *EventExportRequest) GetOutputType() string {
	if x != nil {
		return x.OutputType
	}
	return ""
}

func (x *EventExportRequest) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EventExportRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *EventExportRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *EventExportRequest) GetOrder() query.SortOrder {
	if x != nil {
		return x.Order
	}
	return query.SortOrder_ASC
}

var File_interservice_event_feed_event_feed_proto protoreflect.FileDescriptor

var file_interservice_event_feed_event_feed_proto_rawDesc = []byte{
	0x0a, 0x28, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x1a,
	0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x01, 0x0a, 0x0b,
	0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68,
	0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x65, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xbc, 0x05,
	0x0a, 0x09, 0x46, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65,
	0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x76, 0x65, 0x72, 0x62, 0x12, 0x43, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x65, 0x66,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x43,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x66, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x68, 0x65, 0x66, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x65,
	0x66, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x54, 0x61,
	0x67, 0x73, 0x22, 0x4c, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x4d, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x4d, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc6,
	0x01, 0x0a, 0x12, 0x46, 0x65, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x46, 0x65, 0x65, 0x64,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x46, 0x65, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x46,
	0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x6c, 0x6f, 0x74, 0x52,
	0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x13, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a,
	0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x32, 0xfe, 0x04, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x65, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x37, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0b, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interservice_event_feed_event_feed_proto_rawDescOnce sync.Once
	file_interservice_event_feed_event_feed_proto_rawDescData = file_interservice_event_feed_event_feed_proto_rawDesc
)

func file_interservice_event_feed_event_feed_proto_rawDescGZIP() []byte {
	file_interservice_event_feed_event_feed_proto_rawDescOnce.Do(func() {
		file_interservice_event_feed_event_feed_proto_rawDescData = protoimpl.X.CompressGZIP(file_interservice_event_feed_event_feed_proto_rawDescData)
	})
	return file_interservice_event_feed_event_feed_proto_rawDescData
}

var file_interservice_event_feed_event_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_interservice_event_feed_event_feed_proto_goTypes = []interface{}{
	(*FeedRequest)(nil),           // 0: chef.automate.domain.event_feed.api.FeedRequest
	(*FeedResponse)(nil),          // 1: chef.automate.domain.event_feed.api.FeedResponse
	(*FeedEntry)(nil),             // 2: chef.automate.domain.event_feed.api.FeedEntry
	(*Parent)(nil),                // 3: chef.automate.domain.event_feed.api.Parent
	(*Producer)(nil),              // 4: chef.automate.domain.event_feed.api.Producer
	(*Actor)(nil),                 // 5: chef.automate.domain.event_feed.api.Actor
	(*Object)(nil),                // 6: chef.automate.domain.event_feed.api.Object
	(*Target)(nil),                // 7: chef.automate.domain.event_feed.api.Target
	(*FeedSummaryRequest)(nil),    // 8: chef.automate.domain.event_feed.api.FeedSummaryRequest
	(*FeedSummaryResponse)(nil),   // 9: chef.automate.domain.event_feed.api.FeedSummaryResponse
	(*EntryCount)(nil),            // 10: chef.automate.domain.event_feed.api.EntryCount
	(*FeedTimelineRequest)(nil),   // 11: chef.automate.domain.event_feed.api.FeedTimelineRequest
	(*FeedTimelineResponse)(nil),  // 12: chef.automate.domain.event_feed.api.FeedTimelineResponse
	(*ActionLine)(nil),            // 13: chef.automate.domain.event_feed.api.ActionLine
	(*Timeslot)(nil),              // 14: chef.automate.domain.event_feed.api.Timeslot
	(*EventExportResponse)(nil),   // 15: chef.automate.domain.event_feed.api.EventExportResponse
	(*EventExportRequest)(nil),    // 16: chef.automate.domain.event_feed.api.EventExportRequest
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
	(query.SortOrder)(0),          // 18: chef.automate.api.common.query.SortOrder
	(*event.EventMsg)(nil),        // 19: chef.automate.domain.event.api.EventMsg
	(*event.EventResponse)(nil),   // 20: chef.automate.domain.event.api.EventResponse
}
var file_interservice_event_feed_event_feed_proto_depIdxs = []int32{
	2,  // 0: chef.automate.domain.event_feed.api.FeedResponse.feed_entries:type_name -> chef.automate.domain.event_feed.api.FeedEntry
	17, // 1: chef.automate.domain.event_feed.api.FeedEntry.source_event_published:type_name -> google.protobuf.Timestamp
	17, // 2: chef.automate.domain.event_feed.api.FeedEntry.created:type_name -> google.protobuf.Timestamp
	4,  // 3: chef.automate.domain.event_feed.api.FeedEntry.producer:type_name -> chef.automate.domain.event_feed.api.Producer
	5,  // 4: chef.automate.domain.event_feed.api.FeedEntry.actor:type_name -> chef.automate.domain.event_feed.api.Actor
	6,  // 5: chef.automate.domain.event_feed.api.FeedEntry.object:type_name -> chef.automate.domain.event_feed.api.Object
	7,  // 6: chef.automate.domain.event_feed.api.FeedEntry.target:type_name -> chef.automate.domain.event_feed.api.Target
	3,  // 7: chef.automate.domain.event_feed.api.FeedEntry.parent:type_name -> chef.automate.domain.event_feed.api.Parent
	10, // 8: chef.automate.domain.event_feed.api.FeedSummaryResponse.entry_counts:type_name -> chef.automate.domain.event_feed.api.EntryCount
	13, // 9: chef.automate.domain.event_feed.api.FeedTimelineResponse.action_lines:type_name -> chef.automate.domain.event_feed.api.ActionLine
	14, // 10: chef.automate.domain.event_feed.api.ActionLine.slots:type_name -> chef.automate.domain.event_feed.api.Timeslot
	10, // 11: chef.automate.domain.event_feed.api.Timeslot.counts:type_name -> chef.automate.domain.event_feed.api.EntryCount
	18, // 12: chef.automate.domain.event_feed.api.EventExportRequest.order:type_name -> chef.automate.api.common.query.SortOrder
	0,  // 13: chef.automate.domain.event_feed.api.EventFeedService.GetFeed:input_type -> chef.automate.domain.event_feed.api.FeedRequest
	8,  // 14: chef.automate.domain.event_feed.api.EventFeedService.GetFeedSummary:input_type -> chef.automate.domain.event_feed.api.FeedSummaryRequest
	11, // 15: chef.automate.domain.event_feed.api.EventFeedService.GetFeedTimeline:input_type -> chef.automate.domain.event_feed.api.FeedTimelineRequest
	19, // 16: chef.automate.domain.event_feed.api.EventFeedService.HandleEvent:input_type -> chef.automate.domain.event.api.EventMsg
	16, // 17: chef.automate.domain.event_feed.api.EventFeedService.EventExport:input_type -> chef.automate.domain.event_feed.api.EventExportRequest
	1,  // 18: chef.automate.domain.event_feed.api.EventFeedService.GetFeed:output_type -> chef.automate.domain.event_feed.api.FeedResponse
	9,  // 19: chef.automate.domain.event_feed.api.EventFeedService.GetFeedSummary:output_type -> chef.automate.domain.event_feed.api.FeedSummaryResponse
	12, // 20: chef.automate.domain.event_feed.api.EventFeedService.GetFeedTimeline:output_type -> chef.automate.domain.event_feed.api.FeedTimelineResponse
	20, // 21: chef.automate.domain.event_feed.api.EventFeedService.HandleEvent:output_type -> chef.automate.domain.event.api.EventResponse
	15, // 22: chef.automate.domain.event_feed.api.EventFeedService.EventExport:output_type -> chef.automate.domain.event_feed.api.EventExportResponse
	18, // [18:23] is the sub-list for method output_type
	13, // [13:18] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_interservice_event_feed_event_feed_proto_init() }
func file_interservice_event_feed_event_feed_proto_init() {
	if File_interservice_event_feed_event_feed_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interservice_event_feed_event_feed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Producer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedTimelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedTimelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timeslot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_event_feed_event_feed_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_event_feed_event_feed_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_event_feed_event_feed_proto_goTypes,
		DependencyIndexes: file_interservice_event_feed_event_feed_proto_depIdxs,
		MessageInfos:      file_interservice_event_feed_event_feed_proto_msgTypes,
	}.Build()
	File_interservice_event_feed_event_feed_proto = out.File
	file_interservice_event_feed_event_feed_proto_rawDesc = nil
	file_interservice_event_feed_event_feed_proto_goTypes = nil
	file_interservice_event_feed_event_feed_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventFeedServiceClient is the client API for EventFeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventFeedServiceClient interface {
	GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error)
	GetFeedSummary(ctx context.Context, in *FeedSummaryRequest, opts ...grpc.CallOption) (*FeedSummaryResponse, error)
	GetFeedTimeline(ctx context.Context, in *FeedTimelineRequest, opts ...grpc.CallOption) (*FeedTimelineResponse, error)
	HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error)
	EventExport(ctx context.Context, in *EventExportRequest, opts ...grpc.CallOption) (EventFeedService_EventExportClient, error)
}

type eventFeedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventFeedServiceClient(cc grpc.ClientConnInterface) EventFeedServiceClient {
	return &eventFeedServiceClient{cc}
}

func (c *eventFeedServiceClient) GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error) {
	out := new(FeedResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.event_feed.api.EventFeedService/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventFeedServiceClient) GetFeedSummary(ctx context.Context, in *FeedSummaryRequest, opts ...grpc.CallOption) (*FeedSummaryResponse, error) {
	out := new(FeedSummaryResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.event_feed.api.EventFeedService/GetFeedSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventFeedServiceClient) GetFeedTimeline(ctx context.Context, in *FeedTimelineRequest, opts ...grpc.CallOption) (*FeedTimelineResponse, error) {
	out := new(FeedTimelineResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.event_feed.api.EventFeedService/GetFeedTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventFeedServiceClient) HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error) {
	out := new(event.EventResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.event_feed.api.EventFeedService/HandleEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventFeedServiceClient) EventExport(ctx context.Context, in *EventExportRequest, opts ...grpc.CallOption) (EventFeedService_EventExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventFeedService_serviceDesc.Streams[0], "/chef.automate.domain.event_feed.api.EventFeedService/EventExport", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventFeedServiceEventExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventFeedService_EventExportClient interface {
	Recv() (*EventExportResponse, error)
	grpc.ClientStream
}

type eventFeedServiceEventExportClient struct {
	grpc.ClientStream
}

func (x *eventFeedServiceEventExportClient) Recv() (*EventExportResponse, error) {
	m := new(EventExportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventFeedServiceServer is the server API for EventFeedService service.
type EventFeedServiceServer interface {
	GetFeed(context.Context, *FeedRequest) (*FeedResponse, error)
	GetFeedSummary(context.Context, *FeedSummaryRequest) (*FeedSummaryResponse, error)
	GetFeedTimeline(context.Context, *FeedTimelineRequest) (*FeedTimelineResponse, error)
	HandleEvent(context.Context, *event.EventMsg) (*event.EventResponse, error)
	EventExport(*EventExportRequest, EventFeedService_EventExportServer) error
}

// UnimplementedEventFeedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventFeedServiceServer struct {
}

func (*UnimplementedEventFeedServiceServer) GetFeed(context.Context, *FeedRequest) (*FeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (*UnimplementedEventFeedServiceServer) GetFeedSummary(context.Context, *FeedSummaryRequest) (*FeedSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedSummary not implemented")
}
func (*UnimplementedEventFeedServiceServer) GetFeedTimeline(context.Context, *FeedTimelineRequest) (*FeedTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedTimeline not implemented")
}
func (*UnimplementedEventFeedServiceServer) HandleEvent(context.Context, *event.EventMsg) (*event.EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleEvent not implemented")
}
func (*UnimplementedEventFeedServiceServer) EventExport(*EventExportRequest, EventFeedService_EventExportServer) error {
	return status.Errorf(codes.Unimplemented, "method EventExport not implemented")
}

func RegisterEventFeedServiceServer(s *grpc.Server, srv EventFeedServiceServer) {
	s.RegisterService(&_EventFeedService_serviceDesc, srv)
}

func _EventFeedService_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventFeedServiceServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.event_feed.api.EventFeedService/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventFeedServiceServer).GetFeed(ctx, req.(*FeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventFeedService_GetFeedSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventFeedServiceServer).GetFeedSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.event_feed.api.EventFeedService/GetFeedSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventFeedServiceServer).GetFeedSummary(ctx, req.(*FeedSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventFeedService_GetFeedTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventFeedServiceServer).GetFeedTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.event_feed.api.EventFeedService/GetFeedTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventFeedServiceServer).GetFeedTimeline(ctx, req.(*FeedTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventFeedService_HandleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.EventMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventFeedServiceServer).HandleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.event_feed.api.EventFeedService/HandleEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventFeedServiceServer).HandleEvent(ctx, req.(*event.EventMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventFeedService_EventExport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventExportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventFeedServiceServer).EventExport(m, &eventFeedServiceEventExportServer{stream})
}

type EventFeedService_EventExportServer interface {
	Send(*EventExportResponse) error
	grpc.ServerStream
}

type eventFeedServiceEventExportServer struct {
	grpc.ServerStream
}

func (x *eventFeedServiceEventExportServer) Send(m *EventExportResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventFeedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.event_feed.api.EventFeedService",
	HandlerType: (*EventFeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeed",
			Handler:    _EventFeedService_GetFeed_Handler,
		},
		{
			MethodName: "GetFeedSummary",
			Handler:    _EventFeedService_GetFeedSummary_Handler,
		},
		{
			MethodName: "GetFeedTimeline",
			Handler:    _EventFeedService_GetFeedTimeline_Handler,
		},
		{
			MethodName: "HandleEvent",
			Handler:    _EventFeedService_HandleEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventExport",
			Handler:       _EventFeedService_EventExport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interservice/event_feed/event_feed.proto",
}
