// Code generated by MockGen. DO NOT EDIT.
// Source: event_feed/event_feed.pb.go

// Package event_feed is a generated GoMock package.
package event_feed

import (
	context "context"
	event "github.com/chef/automate/api/interservice/event"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockEventFeedServiceClient is a mock of EventFeedServiceClient interface
type MockEventFeedServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventFeedServiceClientMockRecorder
}

// MockEventFeedServiceClientMockRecorder is the mock recorder for MockEventFeedServiceClient
type MockEventFeedServiceClientMockRecorder struct {
	mock *MockEventFeedServiceClient
}

// NewMockEventFeedServiceClient creates a new mock instance
func NewMockEventFeedServiceClient(ctrl *gomock.Controller) *MockEventFeedServiceClient {
	mock := &MockEventFeedServiceClient{ctrl: ctrl}
	mock.recorder = &MockEventFeedServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventFeedServiceClient) EXPECT() *MockEventFeedServiceClientMockRecorder {
	return m.recorder
}

// GetFeed mocks base method
func (m *MockEventFeedServiceClient) GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeed", varargs...)
	ret0, _ := ret[0].(*FeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed
func (mr *MockEventFeedServiceClientMockRecorder) GetFeed(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockEventFeedServiceClient)(nil).GetFeed), varargs...)
}

// GetFeedSummary mocks base method
func (m *MockEventFeedServiceClient) GetFeedSummary(ctx context.Context, in *FeedSummaryRequest, opts ...grpc.CallOption) (*FeedSummaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeedSummary", varargs...)
	ret0, _ := ret[0].(*FeedSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedSummary indicates an expected call of GetFeedSummary
func (mr *MockEventFeedServiceClientMockRecorder) GetFeedSummary(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedSummary", reflect.TypeOf((*MockEventFeedServiceClient)(nil).GetFeedSummary), varargs...)
}

// GetFeedTimeline mocks base method
func (m *MockEventFeedServiceClient) GetFeedTimeline(ctx context.Context, in *FeedTimelineRequest, opts ...grpc.CallOption) (*FeedTimelineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeedTimeline", varargs...)
	ret0, _ := ret[0].(*FeedTimelineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedTimeline indicates an expected call of GetFeedTimeline
func (mr *MockEventFeedServiceClientMockRecorder) GetFeedTimeline(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedTimeline", reflect.TypeOf((*MockEventFeedServiceClient)(nil).GetFeedTimeline), varargs...)
}

// HandleEvent mocks base method
func (m *MockEventFeedServiceClient) HandleEvent(ctx context.Context, in *event.EventMsg, opts ...grpc.CallOption) (*event.EventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleEvent", varargs...)
	ret0, _ := ret[0].(*event.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEvent indicates an expected call of HandleEvent
func (mr *MockEventFeedServiceClientMockRecorder) HandleEvent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockEventFeedServiceClient)(nil).HandleEvent), varargs...)
}

// MockEventFeedServiceServer is a mock of EventFeedServiceServer interface
type MockEventFeedServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEventFeedServiceServerMockRecorder
}

// MockEventFeedServiceServerMockRecorder is the mock recorder for MockEventFeedServiceServer
type MockEventFeedServiceServerMockRecorder struct {
	mock *MockEventFeedServiceServer
}

// NewMockEventFeedServiceServer creates a new mock instance
func NewMockEventFeedServiceServer(ctrl *gomock.Controller) *MockEventFeedServiceServer {
	mock := &MockEventFeedServiceServer{ctrl: ctrl}
	mock.recorder = &MockEventFeedServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventFeedServiceServer) EXPECT() *MockEventFeedServiceServerMockRecorder {
	return m.recorder
}

// GetFeed mocks base method
func (m *MockEventFeedServiceServer) GetFeed(arg0 context.Context, arg1 *FeedRequest) (*FeedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", arg0, arg1)
	ret0, _ := ret[0].(*FeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed
func (mr *MockEventFeedServiceServerMockRecorder) GetFeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockEventFeedServiceServer)(nil).GetFeed), arg0, arg1)
}

// GetFeedSummary mocks base method
func (m *MockEventFeedServiceServer) GetFeedSummary(arg0 context.Context, arg1 *FeedSummaryRequest) (*FeedSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedSummary", arg0, arg1)
	ret0, _ := ret[0].(*FeedSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedSummary indicates an expected call of GetFeedSummary
func (mr *MockEventFeedServiceServerMockRecorder) GetFeedSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedSummary", reflect.TypeOf((*MockEventFeedServiceServer)(nil).GetFeedSummary), arg0, arg1)
}

// GetFeedTimeline mocks base method
func (m *MockEventFeedServiceServer) GetFeedTimeline(arg0 context.Context, arg1 *FeedTimelineRequest) (*FeedTimelineResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedTimeline", arg0, arg1)
	ret0, _ := ret[0].(*FeedTimelineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedTimeline indicates an expected call of GetFeedTimeline
func (mr *MockEventFeedServiceServerMockRecorder) GetFeedTimeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedTimeline", reflect.TypeOf((*MockEventFeedServiceServer)(nil).GetFeedTimeline), arg0, arg1)
}

// HandleEvent mocks base method
func (m *MockEventFeedServiceServer) HandleEvent(arg0 context.Context, arg1 *event.EventMsg) (*event.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", arg0, arg1)
	ret0, _ := ret[0].(*event.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleEvent indicates an expected call of HandleEvent
func (mr *MockEventFeedServiceServerMockRecorder) HandleEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockEventFeedServiceServer)(nil).HandleEvent), arg0, arg1)
}
