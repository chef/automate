// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/interservice/cds/service/cds.proto

package service

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/api/external/cds/request"
	response "github.com/chef/automate/api/external/cds/response"
	common "github.com/chef/automate/api/external/common"
	version "github.com/chef/automate/api/external/common/version"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/interservice/cds/service/cds.proto", fileDescriptor_efed58aeb69669da)
}

var fileDescriptor_efed58aeb69669da = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x31, 0x4f, 0xfb, 0x30,
	0x10, 0xc5, 0xff, 0xff, 0x01, 0x06, 0xb3, 0x14, 0xb3, 0x79, 0x2c, 0x15, 0x52, 0x29, 0x75, 0xa0,
	0x30, 0x23, 0xa0, 0xad, 0x50, 0x24, 0x26, 0x90, 0x18, 0x58, 0x90, 0xd3, 0x5c, 0xa9, 0xa5, 0xd8,
	0x4e, 0xed, 0x4b, 0xa9, 0xc4, 0xb7, 0xe3, 0x93, 0xa1, 0x34, 0x0e, 0x4d, 0xd5, 0x54, 0x29, 0x53,
	0xe2, 0xd3, 0xef, 0xbd, 0xa7, 0x7b, 0xd2, 0x91, 0x33, 0x91, 0xca, 0x40, 0x6a, 0x04, 0xeb, 0xc0,
	0x2e, 0xe4, 0x04, 0x82, 0x49, 0xec, 0x82, 0xca, 0x3f, 0x4f, 0xad, 0x41, 0x43, 0xbb, 0x93, 0x19,
	0x4c, 0xb9, 0xc8, 0xd0, 0x28, 0x81, 0xc0, 0x63, 0xa3, 0x84, 0xd4, 0xab, 0xb7, 0x50, 0x08, 0xef,
	0x39, 0xe8, 0x45, 0xec, 0x34, 0xb7, 0x84, 0x25, 0x82, 0xd5, 0x22, 0x59, 0xd9, 0x59, 0x98, 0x67,
	0xe0, 0x30, 0xb0, 0xc6, 0x60, 0xe1, 0xc7, 0x3a, 0x35, 0x90, 0x4b, 0x8d, 0x76, 0x50, 0xa5, 0xda,
	0x9b, 0x94, 0x51, 0xca, 0xe8, 0x5f, 0xd0, 0x33, 0xdd, 0x3a, 0x66, 0x01, 0xd6, 0xc9, 0xf5, 0xb7,
	0x40, 0x07, 0xdf, 0x07, 0xe4, 0xe8, 0xde, 0xaf, 0x30, 0x8c, 0x1d, 0x9d, 0x13, 0xf2, 0x08, 0xf8,
	0x5a, 0x30, 0xf4, 0x86, 0x6f, 0xee, 0x28, 0x52, 0xc9, 0x0b, 0x3b, 0x5e, 0xda, 0x78, 0x34, 0xd4,
	0x53, 0xf3, 0x5c, 0xec, 0xc4, 0xfa, 0x7f, 0x52, 0x51, 0x45, 0x5a, 0x4f, 0xd2, 0xe1, 0xd0, 0x68,
	0x04, 0x8d, 0x21, 0x82, 0x72, 0xb4, 0x57, 0x67, 0x11, 0x3b, 0xee, 0x6b, 0xe3, 0x55, 0x98, 0x5d,
	0xec, 0x84, 0x7d, 0x2b, 0x1b, 0xd6, 0x5f, 0x84, 0x86, 0xda, 0xa1, 0x48, 0x92, 0xca, 0x98, 0x5e,
	0x35, 0x04, 0x6e, 0x4b, 0xd8, 0xa0, 0x29, 0xb6, 0x26, 0xc6, 0x91, 0x93, 0x91, 0xf9, 0xd4, 0x89,
	0x11, 0x71, 0x75, 0x3c, 0x68, 0x48, 0xaf, 0xd1, 0xb0, 0xce, 0xee, 0x96, 0xc7, 0xcb, 0xd4, 0x58,
	0x1c, 0x09, 0x14, 0xed, 0x7f, 0x97, 0xff, 0xe9, 0x9c, 0xb4, 0x42, 0xe7, 0xa5, 0x63, 0x2d, 0xa2,
	0x04, 0x62, 0xda, 0xdf, 0xaf, 0x60, 0x8f, 0x33, 0xbe, 0x67, 0xc5, 0xa5, 0x7d, 0x42, 0x8e, 0x5f,
	0xb2, 0x48, 0x49, 0x1c, 0x5a, 0x88, 0x41, 0xa3, 0x14, 0x89, 0xa3, 0xe7, 0x4d, 0x99, 0x6b, 0x96,
	0xf5, 0x1a, 0x03, 0xd7, 0xf0, 0xc3, 0xdd, 0xdb, 0xed, 0x87, 0xc4, 0x59, 0x16, 0xe5, 0x05, 0x04,
	0xb9, 0x30, 0x28, 0x85, 0xc1, 0xd6, 0x31, 0x57, 0x0f, 0xb4, 0xbc, 0xea, 0xe8, 0x70, 0x75, 0x0d,
	0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x2f, 0xbc, 0x00, 0xfc, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AutomateCdsClient is the client API for AutomateCds service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AutomateCdsClient interface {
	GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error)
	ListContentItems(ctx context.Context, in *request.ContentItems, opts ...grpc.CallOption) (*response.ContentItems, error)
	InstallContentItem(ctx context.Context, in *request.InstallContentItem, opts ...grpc.CallOption) (*response.InstallContentItem, error)
	DownloadContentItem(ctx context.Context, in *request.DownloadContentItem, opts ...grpc.CallOption) (AutomateCds_DownloadContentItemClient, error)
	IsContentEnabled(ctx context.Context, in *request.ContentEnabled, opts ...grpc.CallOption) (*response.ContentEnabled, error)
	SubmitCredentials(ctx context.Context, in *request.Credentials, opts ...grpc.CallOption) (*response.Credentials, error)
}

type automateCdsClient struct {
	cc grpc.ClientConnInterface
}

func NewAutomateCdsClient(cc grpc.ClientConnInterface) AutomateCdsClient {
	return &automateCdsClient{cc}
}

func (c *automateCdsClient) GetVersion(ctx context.Context, in *version.VersionInfoRequest, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.autoamte_cds.service.AutomateCds/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automateCdsClient) ListContentItems(ctx context.Context, in *request.ContentItems, opts ...grpc.CallOption) (*response.ContentItems, error) {
	out := new(response.ContentItems)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.autoamte_cds.service.AutomateCds/ListContentItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automateCdsClient) InstallContentItem(ctx context.Context, in *request.InstallContentItem, opts ...grpc.CallOption) (*response.InstallContentItem, error) {
	out := new(response.InstallContentItem)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.autoamte_cds.service.AutomateCds/InstallContentItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automateCdsClient) DownloadContentItem(ctx context.Context, in *request.DownloadContentItem, opts ...grpc.CallOption) (AutomateCds_DownloadContentItemClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AutomateCds_serviceDesc.Streams[0], "/chef.automate.domain.autoamte_cds.service.AutomateCds/DownloadContentItem", opts...)
	if err != nil {
		return nil, err
	}
	x := &automateCdsDownloadContentItemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AutomateCds_DownloadContentItemClient interface {
	Recv() (*common.ExportData, error)
	grpc.ClientStream
}

type automateCdsDownloadContentItemClient struct {
	grpc.ClientStream
}

func (x *automateCdsDownloadContentItemClient) Recv() (*common.ExportData, error) {
	m := new(common.ExportData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *automateCdsClient) IsContentEnabled(ctx context.Context, in *request.ContentEnabled, opts ...grpc.CallOption) (*response.ContentEnabled, error) {
	out := new(response.ContentEnabled)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.autoamte_cds.service.AutomateCds/IsContentEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automateCdsClient) SubmitCredentials(ctx context.Context, in *request.Credentials, opts ...grpc.CallOption) (*response.Credentials, error) {
	out := new(response.Credentials)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.autoamte_cds.service.AutomateCds/SubmitCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutomateCdsServer is the server API for AutomateCds service.
type AutomateCdsServer interface {
	GetVersion(context.Context, *version.VersionInfoRequest) (*version.VersionInfo, error)
	ListContentItems(context.Context, *request.ContentItems) (*response.ContentItems, error)
	InstallContentItem(context.Context, *request.InstallContentItem) (*response.InstallContentItem, error)
	DownloadContentItem(*request.DownloadContentItem, AutomateCds_DownloadContentItemServer) error
	IsContentEnabled(context.Context, *request.ContentEnabled) (*response.ContentEnabled, error)
	SubmitCredentials(context.Context, *request.Credentials) (*response.Credentials, error)
}

// UnimplementedAutomateCdsServer can be embedded to have forward compatible implementations.
type UnimplementedAutomateCdsServer struct {
}

func (*UnimplementedAutomateCdsServer) GetVersion(ctx context.Context, req *version.VersionInfoRequest) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedAutomateCdsServer) ListContentItems(ctx context.Context, req *request.ContentItems) (*response.ContentItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContentItems not implemented")
}
func (*UnimplementedAutomateCdsServer) InstallContentItem(ctx context.Context, req *request.InstallContentItem) (*response.InstallContentItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallContentItem not implemented")
}
func (*UnimplementedAutomateCdsServer) DownloadContentItem(req *request.DownloadContentItem, srv AutomateCds_DownloadContentItemServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadContentItem not implemented")
}
func (*UnimplementedAutomateCdsServer) IsContentEnabled(ctx context.Context, req *request.ContentEnabled) (*response.ContentEnabled, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsContentEnabled not implemented")
}
func (*UnimplementedAutomateCdsServer) SubmitCredentials(ctx context.Context, req *request.Credentials) (*response.Credentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCredentials not implemented")
}

func RegisterAutomateCdsServer(s *grpc.Server, srv AutomateCdsServer) {
	s.RegisterService(&_AutomateCds_serviceDesc, srv)
}

func _AutomateCds_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(version.VersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomateCdsServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.autoamte_cds.service.AutomateCds/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomateCdsServer).GetVersion(ctx, req.(*version.VersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomateCds_ListContentItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ContentItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomateCdsServer).ListContentItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.autoamte_cds.service.AutomateCds/ListContentItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomateCdsServer).ListContentItems(ctx, req.(*request.ContentItems))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomateCds_InstallContentItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.InstallContentItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomateCdsServer).InstallContentItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.autoamte_cds.service.AutomateCds/InstallContentItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomateCdsServer).InstallContentItem(ctx, req.(*request.InstallContentItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomateCds_DownloadContentItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(request.DownloadContentItem)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AutomateCdsServer).DownloadContentItem(m, &automateCdsDownloadContentItemServer{stream})
}

type AutomateCds_DownloadContentItemServer interface {
	Send(*common.ExportData) error
	grpc.ServerStream
}

type automateCdsDownloadContentItemServer struct {
	grpc.ServerStream
}

func (x *automateCdsDownloadContentItemServer) Send(m *common.ExportData) error {
	return x.ServerStream.SendMsg(m)
}

func _AutomateCds_IsContentEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ContentEnabled)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomateCdsServer).IsContentEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.autoamte_cds.service.AutomateCds/IsContentEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomateCdsServer).IsContentEnabled(ctx, req.(*request.ContentEnabled))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomateCds_SubmitCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomateCdsServer).SubmitCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.autoamte_cds.service.AutomateCds/SubmitCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomateCdsServer).SubmitCredentials(ctx, req.(*request.Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

var _AutomateCds_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.autoamte_cds.service.AutomateCds",
	HandlerType: (*AutomateCdsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _AutomateCds_GetVersion_Handler,
		},
		{
			MethodName: "ListContentItems",
			Handler:    _AutomateCds_ListContentItems_Handler,
		},
		{
			MethodName: "InstallContentItem",
			Handler:    _AutomateCds_InstallContentItem_Handler,
		},
		{
			MethodName: "IsContentEnabled",
			Handler:    _AutomateCds_IsContentEnabled_Handler,
		},
		{
			MethodName: "SubmitCredentials",
			Handler:    _AutomateCds_SubmitCredentials_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadContentItem",
			Handler:       _AutomateCds_DownloadContentItem_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/interservice/cds/service/cds.proto",
}
