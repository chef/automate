// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chef/automate/api/interservice/report_manager (interfaces: ReportManagerServiceClient,ReportManagerService_StoreReportClient,ReportManagerServiceServer,ReportManagerService_StoreReportServer)

// Package report_manager is a generated GoMock package.
package report_manager

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockReportManagerServiceClient is a mock of ReportManagerServiceClient interface
type MockReportManagerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockReportManagerServiceClientMockRecorder
}

// MockReportManagerServiceClientMockRecorder is the mock recorder for MockReportManagerServiceClient
type MockReportManagerServiceClientMockRecorder struct {
	mock *MockReportManagerServiceClient
}

// NewMockReportManagerServiceClient creates a new mock instance
func NewMockReportManagerServiceClient(ctrl *gomock.Controller) *MockReportManagerServiceClient {
	mock := &MockReportManagerServiceClient{ctrl: ctrl}
	mock.recorder = &MockReportManagerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportManagerServiceClient) EXPECT() *MockReportManagerServiceClientMockRecorder {
	return m.recorder
}

// GetAllRequestsStatus mocks base method
func (m *MockReportManagerServiceClient) GetAllRequestsStatus(arg0 context.Context, arg1 *AllStatusRequest, arg2 ...grpc.CallOption) (*AllStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllRequestsStatus", varargs...)
	ret0, _ := ret[0].(*AllStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRequestsStatus indicates an expected call of GetAllRequestsStatus
func (mr *MockReportManagerServiceClientMockRecorder) GetAllRequestsStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRequestsStatus", reflect.TypeOf((*MockReportManagerServiceClient)(nil).GetAllRequestsStatus), varargs...)
}

// GetPresignedURL mocks base method
func (m *MockReportManagerServiceClient) GetPresignedURL(arg0 context.Context, arg1 *GetPresignedURLRequest, arg2 ...grpc.CallOption) (*GetPresignedURLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPresignedURL", varargs...)
	ret0, _ := ret[0].(*GetPresignedURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURL indicates an expected call of GetPresignedURL
func (mr *MockReportManagerServiceClientMockRecorder) GetPresignedURL(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURL", reflect.TypeOf((*MockReportManagerServiceClient)(nil).GetPresignedURL), varargs...)
}

// PrepareCustomReport mocks base method
func (m *MockReportManagerServiceClient) PrepareCustomReport(arg0 context.Context, arg1 *CustomReportRequest, arg2 ...grpc.CallOption) (*CustomReportResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareCustomReport", varargs...)
	ret0, _ := ret[0].(*CustomReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareCustomReport indicates an expected call of PrepareCustomReport
func (mr *MockReportManagerServiceClientMockRecorder) PrepareCustomReport(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareCustomReport", reflect.TypeOf((*MockReportManagerServiceClient)(nil).PrepareCustomReport), varargs...)
}

// StoreReport mocks base method
func (m *MockReportManagerServiceClient) StoreReport(arg0 context.Context, arg1 ...grpc.CallOption) (ReportManagerService_StoreReportClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreReport", varargs...)
	ret0, _ := ret[0].(ReportManagerService_StoreReportClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreReport indicates an expected call of StoreReport
func (mr *MockReportManagerServiceClientMockRecorder) StoreReport(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReport", reflect.TypeOf((*MockReportManagerServiceClient)(nil).StoreReport), varargs...)
}

// MockReportManagerService_StoreReportClient is a mock of ReportManagerService_StoreReportClient interface
type MockReportManagerService_StoreReportClient struct {
	ctrl     *gomock.Controller
	recorder *MockReportManagerService_StoreReportClientMockRecorder
}

// MockReportManagerService_StoreReportClientMockRecorder is the mock recorder for MockReportManagerService_StoreReportClient
type MockReportManagerService_StoreReportClientMockRecorder struct {
	mock *MockReportManagerService_StoreReportClient
}

// NewMockReportManagerService_StoreReportClient creates a new mock instance
func NewMockReportManagerService_StoreReportClient(ctrl *gomock.Controller) *MockReportManagerService_StoreReportClient {
	mock := &MockReportManagerService_StoreReportClient{ctrl: ctrl}
	mock.recorder = &MockReportManagerService_StoreReportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportManagerService_StoreReportClient) EXPECT() *MockReportManagerService_StoreReportClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method
func (m *MockReportManagerService_StoreReportClient) CloseAndRecv() (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockReportManagerService_StoreReportClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockReportManagerService_StoreReportClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method
func (m *MockReportManagerService_StoreReportClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockReportManagerService_StoreReportClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockReportManagerService_StoreReportClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockReportManagerService_StoreReportClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockReportManagerService_StoreReportClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockReportManagerService_StoreReportClient)(nil).Context))
}

// Header mocks base method
func (m *MockReportManagerService_StoreReportClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockReportManagerService_StoreReportClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockReportManagerService_StoreReportClient)(nil).Header))
}

// RecvMsg mocks base method
func (m *MockReportManagerService_StoreReportClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockReportManagerService_StoreReportClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockReportManagerService_StoreReportClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockReportManagerService_StoreReportClient) Send(arg0 *StoreReportRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockReportManagerService_StoreReportClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockReportManagerService_StoreReportClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockReportManagerService_StoreReportClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockReportManagerService_StoreReportClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockReportManagerService_StoreReportClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockReportManagerService_StoreReportClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockReportManagerService_StoreReportClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockReportManagerService_StoreReportClient)(nil).Trailer))
}

// MockReportManagerServiceServer is a mock of ReportManagerServiceServer interface
type MockReportManagerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockReportManagerServiceServerMockRecorder
}

// MockReportManagerServiceServerMockRecorder is the mock recorder for MockReportManagerServiceServer
type MockReportManagerServiceServerMockRecorder struct {
	mock *MockReportManagerServiceServer
}

// NewMockReportManagerServiceServer creates a new mock instance
func NewMockReportManagerServiceServer(ctrl *gomock.Controller) *MockReportManagerServiceServer {
	mock := &MockReportManagerServiceServer{ctrl: ctrl}
	mock.recorder = &MockReportManagerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportManagerServiceServer) EXPECT() *MockReportManagerServiceServerMockRecorder {
	return m.recorder
}

// GetAllRequestsStatus mocks base method
func (m *MockReportManagerServiceServer) GetAllRequestsStatus(arg0 context.Context, arg1 *AllStatusRequest) (*AllStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRequestsStatus", arg0, arg1)
	ret0, _ := ret[0].(*AllStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRequestsStatus indicates an expected call of GetAllRequestsStatus
func (mr *MockReportManagerServiceServerMockRecorder) GetAllRequestsStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRequestsStatus", reflect.TypeOf((*MockReportManagerServiceServer)(nil).GetAllRequestsStatus), arg0, arg1)
}

// GetPresignedURL mocks base method
func (m *MockReportManagerServiceServer) GetPresignedURL(arg0 context.Context, arg1 *GetPresignedURLRequest) (*GetPresignedURLResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedURL", arg0, arg1)
	ret0, _ := ret[0].(*GetPresignedURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedURL indicates an expected call of GetPresignedURL
func (mr *MockReportManagerServiceServerMockRecorder) GetPresignedURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedURL", reflect.TypeOf((*MockReportManagerServiceServer)(nil).GetPresignedURL), arg0, arg1)
}

// PrepareCustomReport mocks base method
func (m *MockReportManagerServiceServer) PrepareCustomReport(arg0 context.Context, arg1 *CustomReportRequest) (*CustomReportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareCustomReport", arg0, arg1)
	ret0, _ := ret[0].(*CustomReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareCustomReport indicates an expected call of PrepareCustomReport
func (mr *MockReportManagerServiceServerMockRecorder) PrepareCustomReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareCustomReport", reflect.TypeOf((*MockReportManagerServiceServer)(nil).PrepareCustomReport), arg0, arg1)
}

// StoreReport mocks base method
func (m *MockReportManagerServiceServer) StoreReport(arg0 ReportManagerService_StoreReportServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreReport", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreReport indicates an expected call of StoreReport
func (mr *MockReportManagerServiceServerMockRecorder) StoreReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReport", reflect.TypeOf((*MockReportManagerServiceServer)(nil).StoreReport), arg0)
}

// MockReportManagerService_StoreReportServer is a mock of ReportManagerService_StoreReportServer interface
type MockReportManagerService_StoreReportServer struct {
	ctrl     *gomock.Controller
	recorder *MockReportManagerService_StoreReportServerMockRecorder
}

// MockReportManagerService_StoreReportServerMockRecorder is the mock recorder for MockReportManagerService_StoreReportServer
type MockReportManagerService_StoreReportServerMockRecorder struct {
	mock *MockReportManagerService_StoreReportServer
}

// NewMockReportManagerService_StoreReportServer creates a new mock instance
func NewMockReportManagerService_StoreReportServer(ctrl *gomock.Controller) *MockReportManagerService_StoreReportServer {
	mock := &MockReportManagerService_StoreReportServer{ctrl: ctrl}
	mock.recorder = &MockReportManagerService_StoreReportServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportManagerService_StoreReportServer) EXPECT() *MockReportManagerService_StoreReportServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockReportManagerService_StoreReportServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockReportManagerService_StoreReportServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockReportManagerService_StoreReportServer)(nil).Context))
}

// Recv mocks base method
func (m *MockReportManagerService_StoreReportServer) Recv() (*StoreReportRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*StoreReportRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockReportManagerService_StoreReportServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockReportManagerService_StoreReportServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockReportManagerService_StoreReportServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockReportManagerService_StoreReportServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockReportManagerService_StoreReportServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockReportManagerService_StoreReportServer) SendAndClose(arg0 *emptypb.Empty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockReportManagerService_StoreReportServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockReportManagerService_StoreReportServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockReportManagerService_StoreReportServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockReportManagerService_StoreReportServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockReportManagerService_StoreReportServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockReportManagerService_StoreReportServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockReportManagerService_StoreReportServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockReportManagerService_StoreReportServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockReportManagerService_StoreReportServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockReportManagerService_StoreReportServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockReportManagerService_StoreReportServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockReportManagerService_StoreReportServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockReportManagerService_StoreReportServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockReportManagerService_StoreReportServer)(nil).SetTrailer), arg0)
}
