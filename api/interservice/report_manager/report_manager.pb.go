// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: interservice/report_manager/report_manager.proto

package report_manager

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StoreReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty" toml:"content,omitempty" mapstructure:"content,omitempty"`
}

func (x *StoreReportRequest) Reset() {
	*x = StoreReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_report_manager_report_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreReportRequest) ProtoMessage() {}

func (x *StoreReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_report_manager_report_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreReportRequest.ProtoReflect.Descriptor instead.
func (*StoreReportRequest) Descriptor() ([]byte, []int) {
	return file_interservice_report_manager_report_manager_proto_rawDescGZIP(), []int{0}
}

func (x *StoreReportRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type CustomReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestorId string           `protobuf:"bytes,1,opt,name=requestor_id,json=requestorId,proto3" json:"requestor_id,omitempty" toml:"requestor_id,omitempty" mapstructure:"requestor_id,omitempty"`
	ReportType  string           `protobuf:"bytes,2,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty" toml:"report_type,omitempty" mapstructure:"report_type,omitempty"`
	Reports     []*ReportRequest `protobuf:"bytes,3,rep,name=reports,proto3" json:"reports,omitempty" toml:"reports,omitempty" mapstructure:"reports,omitempty"`
}

func (x *CustomReportRequest) Reset() {
	*x = CustomReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_report_manager_report_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomReportRequest) ProtoMessage() {}

func (x *CustomReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_report_manager_report_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomReportRequest.ProtoReflect.Descriptor instead.
func (*CustomReportRequest) Descriptor() ([]byte, []int) {
	return file_interservice_report_manager_report_manager_proto_rawDescGZIP(), []int{1}
}

func (x *CustomReportRequest) GetRequestorId() string {
	if x != nil {
		return x.RequestorId
	}
	return ""
}

func (x *CustomReportRequest) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *CustomReportRequest) GetReports() []*ReportRequest {
	if x != nil {
		return x.Reports
	}
	return nil
}

type ReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId string     `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty" toml:"report_id,omitempty" mapstructure:"report_id,omitempty"`
	Profiles []*Profile `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty" toml:"profiles,omitempty" mapstructure:"profiles,omitempty"`
}

func (x *ReportRequest) Reset() {
	*x = ReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_report_manager_report_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRequest) ProtoMessage() {}

func (x *ReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_report_manager_report_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRequest.ProtoReflect.Descriptor instead.
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return file_interservice_report_manager_report_manager_proto_rawDescGZIP(), []int{2}
}

func (x *ReportRequest) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *ReportRequest) GetProfiles() []*Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileId string   `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty" toml:"profile_id,omitempty" mapstructure:"profile_id,omitempty"`
	Controls  []string `protobuf:"bytes,2,rep,name=controls,proto3" json:"controls,omitempty" toml:"controls,omitempty" mapstructure:"controls,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_report_manager_report_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_report_manager_report_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_interservice_report_manager_report_manager_proto_rawDescGZIP(), []int{3}
}

func (x *Profile) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *Profile) GetControls() []string {
	if x != nil {
		return x.Controls
	}
	return nil
}

type CustomReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcknowledgementId string `protobuf:"bytes,1,opt,name=acknowledgement_id,json=acknowledgementId,proto3" json:"acknowledgement_id,omitempty" toml:"acknowledgement_id,omitempty" mapstructure:"acknowledgement_id,omitempty"`
}

func (x *CustomReportResponse) Reset() {
	*x = CustomReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_report_manager_report_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomReportResponse) ProtoMessage() {}

func (x *CustomReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_report_manager_report_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomReportResponse.ProtoReflect.Descriptor instead.
func (*CustomReportResponse) Descriptor() ([]byte, []int) {
	return file_interservice_report_manager_report_manager_proto_rawDescGZIP(), []int{4}
}

func (x *CustomReportResponse) GetAcknowledgementId() string {
	if x != nil {
		return x.AcknowledgementId
	}
	return ""
}

type AllStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestorId string `protobuf:"bytes,1,opt,name=requestor_id,json=requestorId,proto3" json:"requestor_id,omitempty" toml:"requestor_id,omitempty" mapstructure:"requestor_id,omitempty"`
}

func (x *AllStatusRequest) Reset() {
	*x = AllStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_report_manager_report_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllStatusRequest) ProtoMessage() {}

func (x *AllStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_report_manager_report_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllStatusRequest.ProtoReflect.Descriptor instead.
func (*AllStatusRequest) Descriptor() ([]byte, []int) {
	return file_interservice_report_manager_report_manager_proto_rawDescGZIP(), []int{5}
}

func (x *AllStatusRequest) GetRequestorId() string {
	if x != nil {
		return x.RequestorId
	}
	return ""
}

type AllStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StatusResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" toml:"data,omitempty" mapstructure:"data,omitempty"`
}

func (x *AllStatusResponse) Reset() {
	*x = AllStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_report_manager_report_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllStatusResponse) ProtoMessage() {}

func (x *AllStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_report_manager_report_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllStatusResponse.ProtoReflect.Descriptor instead.
func (*AllStatusResponse) Descriptor() ([]byte, []int) {
	return file_interservice_report_manager_report_manager_proto_rawDescGZIP(), []int{6}
}

func (x *AllStatusResponse) GetData() []*StatusResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcknowledgementId string               `protobuf:"bytes,1,opt,name=acknowledgement_id,json=acknowledgementId,proto3" json:"acknowledgement_id,omitempty" toml:"acknowledgement_id,omitempty" mapstructure:"acknowledgement_id,omitempty"`
	Status            string               `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" toml:"status,omitempty" mapstructure:"status,omitempty"`
	ReportSize        int64                `protobuf:"varint,3,opt,name=report_size,json=reportSize,proto3" json:"report_size,omitempty" toml:"report_size,omitempty" mapstructure:"report_size,omitempty"`
	ErrMessage        string               `protobuf:"bytes,4,opt,name=err_message,json=errMessage,proto3" json:"err_message,omitempty" toml:"err_message,omitempty" mapstructure:"err_message,omitempty"`
	CreatedAt         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" toml:"created_at,omitempty" mapstructure:"created_at,omitempty"`
	EndedAt           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty" toml:"ended_at,omitempty" mapstructure:"ended_at,omitempty"`
	Duration          string               `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty" toml:"duration,omitempty" mapstructure:"duration,omitempty"`
	ReportType        string               `protobuf:"bytes,8,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty" toml:"report_type,omitempty" mapstructure:"report_type,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_report_manager_report_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_report_manager_report_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_interservice_report_manager_report_manager_proto_rawDescGZIP(), []int{7}
}

func (x *StatusResponse) GetAcknowledgementId() string {
	if x != nil {
		return x.AcknowledgementId
	}
	return ""
}

func (x *StatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StatusResponse) GetReportSize() int64 {
	if x != nil {
		return x.ReportSize
	}
	return 0
}

func (x *StatusResponse) GetErrMessage() string {
	if x != nil {
		return x.ErrMessage
	}
	return ""
}

func (x *StatusResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *StatusResponse) GetEndedAt() *timestamp.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *StatusResponse) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *StatusResponse) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

type GetPresignedURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty" mapstructure:"id,omitempty"`
	RequestorId string `protobuf:"bytes,2,opt,name=requestor_id,json=requestorId,proto3" json:"requestor_id,omitempty" toml:"requestor_id,omitempty" mapstructure:"requestor_id,omitempty"`
}

func (x *GetPresignedURLRequest) Reset() {
	*x = GetPresignedURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_report_manager_report_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedURLRequest) ProtoMessage() {}

func (x *GetPresignedURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_report_manager_report_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedURLRequest.ProtoReflect.Descriptor instead.
func (*GetPresignedURLRequest) Descriptor() ([]byte, []int) {
	return file_interservice_report_manager_report_manager_proto_rawDescGZIP(), []int{8}
}

func (x *GetPresignedURLRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPresignedURLRequest) GetRequestorId() string {
	if x != nil {
		return x.RequestorId
	}
	return ""
}

type GetPresignedURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" toml:"url,omitempty" mapstructure:"url,omitempty"`
	ReportType string `protobuf:"bytes,2,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty" toml:"report_type,omitempty" mapstructure:"report_type,omitempty"`
	ReportSize int64  `protobuf:"varint,3,opt,name=report_size,json=reportSize,proto3" json:"report_size,omitempty" toml:"report_size,omitempty" mapstructure:"report_size,omitempty"`
}

func (x *GetPresignedURLResponse) Reset() {
	*x = GetPresignedURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interservice_report_manager_report_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedURLResponse) ProtoMessage() {}

func (x *GetPresignedURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interservice_report_manager_report_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedURLResponse.ProtoReflect.Descriptor instead.
func (*GetPresignedURLResponse) Descriptor() ([]byte, []int) {
	return file_interservice_report_manager_report_manager_proto_rawDescGZIP(), []int{9}
}

func (x *GetPresignedURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetPresignedURLResponse) GetReportType() string {
	if x != nil {
		return x.ReportType
	}
	return ""
}

func (x *GetPresignedURLResponse) GetReportSize() int64 {
	if x != nil {
		return x.ReportSize
	}
	return 0
}

var File_interservice_report_manager_report_manager_proto protoreflect.FileDescriptor

var file_interservice_report_manager_report_manager_proto_rawDesc = []byte{
	0x0a, 0x30, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x2b, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a,
	0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xaf, 0x01,
	0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x68, 0x65,
	0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22,
	0x7e, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x44, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x22, 0x45, 0x0a, 0x14, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x10,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc8, 0x02, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x22, 0x6d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x32, 0xdc, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x41, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x2e,
	0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63,
	0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55,
	0x52, 0x4c, 0x12, 0x43, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63, 0x68, 0x65, 0x66, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68,
	0x65, 0x66, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_interservice_report_manager_report_manager_proto_rawDescOnce sync.Once
	file_interservice_report_manager_report_manager_proto_rawDescData = file_interservice_report_manager_report_manager_proto_rawDesc
)

func file_interservice_report_manager_report_manager_proto_rawDescGZIP() []byte {
	file_interservice_report_manager_report_manager_proto_rawDescOnce.Do(func() {
		file_interservice_report_manager_report_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_interservice_report_manager_report_manager_proto_rawDescData)
	})
	return file_interservice_report_manager_report_manager_proto_rawDescData
}

var file_interservice_report_manager_report_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_interservice_report_manager_report_manager_proto_goTypes = []interface{}{
	(*StoreReportRequest)(nil),      // 0: chef.automate.domain.report_manager.service.StoreReportRequest
	(*CustomReportRequest)(nil),     // 1: chef.automate.domain.report_manager.service.CustomReportRequest
	(*ReportRequest)(nil),           // 2: chef.automate.domain.report_manager.service.ReportRequest
	(*Profile)(nil),                 // 3: chef.automate.domain.report_manager.service.Profile
	(*CustomReportResponse)(nil),    // 4: chef.automate.domain.report_manager.service.CustomReportResponse
	(*AllStatusRequest)(nil),        // 5: chef.automate.domain.report_manager.service.AllStatusRequest
	(*AllStatusResponse)(nil),       // 6: chef.automate.domain.report_manager.service.AllStatusResponse
	(*StatusResponse)(nil),          // 7: chef.automate.domain.report_manager.service.StatusResponse
	(*GetPresignedURLRequest)(nil),  // 8: chef.automate.domain.report_manager.service.GetPresignedURLRequest
	(*GetPresignedURLResponse)(nil), // 9: chef.automate.domain.report_manager.service.GetPresignedURLResponse
	(*timestamp.Timestamp)(nil),     // 10: google.protobuf.Timestamp
	(*empty.Empty)(nil),             // 11: google.protobuf.Empty
}
var file_interservice_report_manager_report_manager_proto_depIdxs = []int32{
	2,  // 0: chef.automate.domain.report_manager.service.CustomReportRequest.reports:type_name -> chef.automate.domain.report_manager.service.ReportRequest
	3,  // 1: chef.automate.domain.report_manager.service.ReportRequest.profiles:type_name -> chef.automate.domain.report_manager.service.Profile
	7,  // 2: chef.automate.domain.report_manager.service.AllStatusResponse.data:type_name -> chef.automate.domain.report_manager.service.StatusResponse
	10, // 3: chef.automate.domain.report_manager.service.StatusResponse.created_at:type_name -> google.protobuf.Timestamp
	10, // 4: chef.automate.domain.report_manager.service.StatusResponse.ended_at:type_name -> google.protobuf.Timestamp
	0,  // 5: chef.automate.domain.report_manager.service.ReportManagerService.StoreReport:input_type -> chef.automate.domain.report_manager.service.StoreReportRequest
	1,  // 6: chef.automate.domain.report_manager.service.ReportManagerService.PrepareCustomReport:input_type -> chef.automate.domain.report_manager.service.CustomReportRequest
	5,  // 7: chef.automate.domain.report_manager.service.ReportManagerService.GetAllRequestsStatus:input_type -> chef.automate.domain.report_manager.service.AllStatusRequest
	8,  // 8: chef.automate.domain.report_manager.service.ReportManagerService.GetPresignedURL:input_type -> chef.automate.domain.report_manager.service.GetPresignedURLRequest
	11, // 9: chef.automate.domain.report_manager.service.ReportManagerService.StoreReport:output_type -> google.protobuf.Empty
	4,  // 10: chef.automate.domain.report_manager.service.ReportManagerService.PrepareCustomReport:output_type -> chef.automate.domain.report_manager.service.CustomReportResponse
	6,  // 11: chef.automate.domain.report_manager.service.ReportManagerService.GetAllRequestsStatus:output_type -> chef.automate.domain.report_manager.service.AllStatusResponse
	9,  // 12: chef.automate.domain.report_manager.service.ReportManagerService.GetPresignedURL:output_type -> chef.automate.domain.report_manager.service.GetPresignedURLResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_interservice_report_manager_report_manager_proto_init() }
func file_interservice_report_manager_report_manager_proto_init() {
	if File_interservice_report_manager_report_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interservice_report_manager_report_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_report_manager_report_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_report_manager_report_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_report_manager_report_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_report_manager_report_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_report_manager_report_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_report_manager_report_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_report_manager_report_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_report_manager_report_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresignedURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interservice_report_manager_report_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresignedURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interservice_report_manager_report_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interservice_report_manager_report_manager_proto_goTypes,
		DependencyIndexes: file_interservice_report_manager_report_manager_proto_depIdxs,
		MessageInfos:      file_interservice_report_manager_report_manager_proto_msgTypes,
	}.Build()
	File_interservice_report_manager_report_manager_proto = out.File
	file_interservice_report_manager_report_manager_proto_rawDesc = nil
	file_interservice_report_manager_report_manager_proto_goTypes = nil
	file_interservice_report_manager_report_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportManagerServiceClient is the client API for ReportManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportManagerServiceClient interface {
	StoreReport(ctx context.Context, opts ...grpc.CallOption) (ReportManagerService_StoreReportClient, error)
	PrepareCustomReport(ctx context.Context, in *CustomReportRequest, opts ...grpc.CallOption) (*CustomReportResponse, error)
	GetAllRequestsStatus(ctx context.Context, in *AllStatusRequest, opts ...grpc.CallOption) (*AllStatusResponse, error)
	GetPresignedURL(ctx context.Context, in *GetPresignedURLRequest, opts ...grpc.CallOption) (*GetPresignedURLResponse, error)
}

type reportManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportManagerServiceClient(cc grpc.ClientConnInterface) ReportManagerServiceClient {
	return &reportManagerServiceClient{cc}
}

func (c *reportManagerServiceClient) StoreReport(ctx context.Context, opts ...grpc.CallOption) (ReportManagerService_StoreReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReportManagerService_serviceDesc.Streams[0], "/chef.automate.domain.report_manager.service.ReportManagerService/StoreReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportManagerServiceStoreReportClient{stream}
	return x, nil
}

type ReportManagerService_StoreReportClient interface {
	Send(*StoreReportRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type reportManagerServiceStoreReportClient struct {
	grpc.ClientStream
}

func (x *reportManagerServiceStoreReportClient) Send(m *StoreReportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reportManagerServiceStoreReportClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportManagerServiceClient) PrepareCustomReport(ctx context.Context, in *CustomReportRequest, opts ...grpc.CallOption) (*CustomReportResponse, error) {
	out := new(CustomReportResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.report_manager.service.ReportManagerService/PrepareCustomReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportManagerServiceClient) GetAllRequestsStatus(ctx context.Context, in *AllStatusRequest, opts ...grpc.CallOption) (*AllStatusResponse, error) {
	out := new(AllStatusResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.report_manager.service.ReportManagerService/GetAllRequestsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportManagerServiceClient) GetPresignedURL(ctx context.Context, in *GetPresignedURLRequest, opts ...grpc.CallOption) (*GetPresignedURLResponse, error) {
	out := new(GetPresignedURLResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.report_manager.service.ReportManagerService/GetPresignedURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportManagerServiceServer is the server API for ReportManagerService service.
type ReportManagerServiceServer interface {
	StoreReport(ReportManagerService_StoreReportServer) error
	PrepareCustomReport(context.Context, *CustomReportRequest) (*CustomReportResponse, error)
	GetAllRequestsStatus(context.Context, *AllStatusRequest) (*AllStatusResponse, error)
	GetPresignedURL(context.Context, *GetPresignedURLRequest) (*GetPresignedURLResponse, error)
}

// UnimplementedReportManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportManagerServiceServer struct {
}

func (*UnimplementedReportManagerServiceServer) StoreReport(ReportManagerService_StoreReportServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreReport not implemented")
}
func (*UnimplementedReportManagerServiceServer) PrepareCustomReport(context.Context, *CustomReportRequest) (*CustomReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareCustomReport not implemented")
}
func (*UnimplementedReportManagerServiceServer) GetAllRequestsStatus(context.Context, *AllStatusRequest) (*AllStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRequestsStatus not implemented")
}
func (*UnimplementedReportManagerServiceServer) GetPresignedURL(context.Context, *GetPresignedURLRequest) (*GetPresignedURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresignedURL not implemented")
}

func RegisterReportManagerServiceServer(s *grpc.Server, srv ReportManagerServiceServer) {
	s.RegisterService(&_ReportManagerService_serviceDesc, srv)
}

func _ReportManagerService_StoreReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReportManagerServiceServer).StoreReport(&reportManagerServiceStoreReportServer{stream})
}

type ReportManagerService_StoreReportServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*StoreReportRequest, error)
	grpc.ServerStream
}

type reportManagerServiceStoreReportServer struct {
	grpc.ServerStream
}

func (x *reportManagerServiceStoreReportServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reportManagerServiceStoreReportServer) Recv() (*StoreReportRequest, error) {
	m := new(StoreReportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReportManagerService_PrepareCustomReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportManagerServiceServer).PrepareCustomReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.report_manager.service.ReportManagerService/PrepareCustomReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportManagerServiceServer).PrepareCustomReport(ctx, req.(*CustomReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportManagerService_GetAllRequestsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportManagerServiceServer).GetAllRequestsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.report_manager.service.ReportManagerService/GetAllRequestsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportManagerServiceServer).GetAllRequestsStatus(ctx, req.(*AllStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportManagerService_GetPresignedURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPresignedURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportManagerServiceServer).GetPresignedURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.report_manager.service.ReportManagerService/GetPresignedURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportManagerServiceServer).GetPresignedURL(ctx, req.(*GetPresignedURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.report_manager.service.ReportManagerService",
	HandlerType: (*ReportManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareCustomReport",
			Handler:    _ReportManagerService_PrepareCustomReport_Handler,
		},
		{
			MethodName: "GetAllRequestsStatus",
			Handler:    _ReportManagerService_GetAllRequestsStatus_Handler,
		},
		{
			MethodName: "GetPresignedURL",
			Handler:    _ReportManagerService_GetPresignedURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreReport",
			Handler:       _ReportManagerService_StoreReport_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "interservice/report_manager/report_manager.proto",
}
