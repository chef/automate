#!/bin/bash
#
# Helper methods specific for the compliance-service

# Run Integration tests for the feeds service
document "feed_integration" <<DOC
  Runs the integration tests for the feeds service
DOC
function feed_integration() {
  go_test -v "github.com/chef/automate/components/compliance-service/feed/integration_test"
}

document "send_ingest_report_compliance" <<DOC
  Send an inspec report through to ingest.
DOC
function send_ingest_report_compliance() {
  go_test "github.com/chef/automate/components/compliance-service/examples/ingest/test"
}

document "compliance_unit_tests" <<DOC
  Runs the unit tests for the compliance-service

  The reason the compliance service can not use the 'go_component_unit' it needs to remove the
  'examples' folder.
DOC
function compliance_unit_tests() {
  mapfile -t packages < <(go list -f '{{ .Dir }}' /src/components/compliance-service/... | grep -v examples)
  go_test "${packages[@]}"
}

document "compliance_integration" <<DOC
  Runs the integration tests for the compliance_integration.
DOC
function compliance_integration() {
  # Go based integration tests
  go_test -v "github.com/chef/automate/components/compliance-service/integration_test"
}

document "go_update_compliance_service" <<DOC
  Go update will generate a new compliance-service binary (go_build) and force load it (reload_binary).

  The compliance-service can not use the generic 'go_update_component' function because it need a specific build function
DOC
function go_update_compliance_service() {
  check_if_deployinate_started || return 1
  local component="compliance-service"
  go_build_component $component
  reload_component_binary $component
}

document "auto_go_update_compliance_service" <<DOC
  Watch for file changes in a component and on change build and update the service.

  The compliance-service can not use the generic 'auto_go_update_component' function because it need a specific build function
DOC
function auto_go_update_compliance_service() {
  local component="compliance-service"

  install_if_missing core/inotify-tools inotifywait
  log_line "Starting file watch for $component"
  while inotifywait -r /src/components/$component; do
        log_line "File change in $component"

        go_update_compliance_service
  done
}

document "compliance_configure_purge" <<DOC
  Configures the purge workflow
DOC
function compliance_configure_purge() {
  chef-automate dev grpcurl compliance-service -- chef.automate.infra.data_lifecycle.api.Purge.Configure -d "
  {
    \"enabled\":true,
    \"recurrence\":\"FREQ=DAILY;DTSTART=20190820T221315Z;INTERVAL=1\",
    \"policy_update\": {
      \"es\": [
        {
          \"policy_name\":\"compliance-scans\",
          \"older_than_days\":\"${1}\"
        },
        {
          \"policy_name\":\"compliance-reports\",
          \"older_than_days\":\"${1}\"
        }
      ]
    }
  }"
}

document "load_compliance_reports" <<DOC
  Loads compliance report.
DOC
function load_compliance_reports() {
    generate_chef_run_example | jq '.entity_uuid = "34cbbb4c-c502-4971-b193-00e987b4678c"' | jq '.node_name = "debian(2)-zeta-linux(f)-apache(p)-failed"' | send_chef_data_raw
    generate_chef_run_failure_example | jq '.entity_uuid = "9b9f4e51-b049-4b10-9555-10578916e149"' | jq '.node_name = "centos-beta"' | send_chef_data_raw
    generate_chef_run_example | jq '.entity_uuid = "9b9f4e51-b049-4b10-9555-10578916e112"' | jq '.node_name = "redhat(2)-alpha-nginx(f)-apache(f)-failed"' | send_chef_data_raw
    generate_chef_run_failure_example | jq '.entity_uuid = "9b9f4e51-b049-4b10-9555-10578916e111"' | jq '.node_name = "redhat(2)-alpha-nginx(f)-apache(s)-failed"' | send_chef_data_raw
    generate_chef_run_example | jq '.entity_uuid = "9b9f4e51-b049-4b10-9555-10578916e222"' | jq '.node_name = "RedHat(2)-beta-nginx(f)-apache(s)-failed"' | send_chef_data_raw
    generate_chef_run_failure_example | jq '.entity_uuid = "a0ddd774-cbbb-49be-8730-49c92f3fc2a0"' | jq '.node_name = "windows(1)-zeta-apache(s)-skipped"' | send_chef_data_raw
    generate_chef_run_example | jq '.entity_uuid = "9b9f4e51-b049-4b10-9555-10578916e149"' | jq '.node_name = "centos-beta"' | send_chef_data_raw
    generate_chef_run_failure_example | jq '.entity_uuid = "9b9f4e51-b049-4b10-9555-10578916e666"' | jq '.node_name = "ubuntu(1)-alpha-myprofile(s)-skipped"' | send_chef_data_raw
    generate_chef_run_failure_example | jq '.entity_uuid = "34cbbb55-c502-4971-2222-999999999999"' | jq '.node_name = "osx(1)-omega-pro2(w)-waived"' | send_chef_data_raw
    generate_chef_run_failure_example | jq '.entity_uuid = "34cbbb4c-c502-4971-1111-888888888888"' | jq '.node_name = "osx(2)-omega-pro1(f)-pro2(w)-failed"' | send_chef_data_raw
    pushd components/compliance-service/test_data/audit_reports &> /dev/null
    ./send_to_data_collector.sh https://a2-dev.test "$(get_admin_token)"
    popd &> /dev/null
}

document "load_scan_jobs" <<DOC
  Loads scan jobs.
DOC
function load_scan_jobs() {
  FILE=./dev/secrets-env.sh
  if [ ! -e "$FILE" ]; then
    echo "secrets file not found; pls run the get_secrets script"
  else
    # shellcheck disable=SC1091
    source dev/secrets-env.sh
    pushd dev-docs/adding-data &> /dev/null
    install_if_missing core/go go
    go run add_scanjobs.go
    popd &> /dev/null
  fi
}