#!/bin/bash
#
# Copyright:: Copyright 2017 Chef Software, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Automate UI Logs used by 'start_automate_ui_background'
export UI_LOG_FILE=/tmp/automate-ui.log

document "start_automate_ui_background" <<DOC
  Start the Automate UI in the background.

  To show the logs run the command:
    # ui_logs

  To stop the Automate UI run the command:
    # stop_automate_ui
DOC
function start_automate_ui_background {
  _verify_if_automate_ui_running && return 0
  _verify_devproxy_config || return 1

  log_line "Launching the $(green automate-ui) in the background."
  start_automate_ui background >> $UI_LOG_FILE 2>&1 &
  log_line "Run '$(yellow ui_logs)' to see how the automate-ui builds."
  log_line "You can stop the automate ui with the helper method '$(yellow stop_automate_ui)'."
}

document "ui_logs" <<DOC
  Display the UI logs stored at '$UI_LOG_FILE'.
DOC
function ui_logs {
  tail -20f $UI_LOG_FILE
}

document "start_automate_ui" <<DOC
  Start the Automate UI.
DOC
function start_automate_ui {
  _verify_if_automate_ui_running && return 0
  _verify_devproxy_config || return 1

  if [[ "$1" != "background" ]]; then
    warn "This helper method will take over your terminal, if you want to avoid it"
    warn "you can execute the function '$(green start_automate_ui_background)' instead."
    warn "Press [enter] to continue. (Ctrl+C to abort)"
    read -r
  fi

  _prepare_automate_ui
  ( cd /src/components/automate-ui || return 1
    log_line "Building $(green automate-ui) application (npm run serve:hab)"
    npm run serve:hab
  )
}

document "stop_automate_ui" <<DOC
  Stops the running Automate UI process.
DOC
function stop_automate_ui {
  install_if_missing core/busybox-static pgrep;
  local UI_PID
  UI_PID=$(pgrep npm);
  if [ ! -z "$UI_PID" ]; then
    log_line "Stopping automate-ui PID '$(red "$UI_PID")'"
    kill "$UI_PID"

    # When we kill the automate-ui sometimes there are a few
    # processes left from the angular-cli, this is making sure
    # we free the 4200 port.
    install_if_missing core/busybox-static fuser;
    fuser 4200/tcp -k
  else
    log_line "The automate-ui is not running. Start it with '$(green start_automate_ui)'"
  fi;
}

document "build_chef_ui_library" <<DOC
  Builds the chef-ui-library.
DOC
function build_chef_ui_library {
  _prepare_chef_ui_library
  ( cd /src/components/chef-ui-library || return 1
    log_line "Building $(green chef-ui-library) application (npm run build)"
    npm run build
  )
}

document "start_chef_ui_library" <<DOC
  Starts the chef-ui-library for development. (http://localhost:3334)
DOC
function start_chef_ui_library {
  _prepare_chef_ui_library
  ( cd /src/components/chef-ui-library || return 1
    build_chef_ui_library_docs
    log_line "Starting the $(green chef-ui-library) in the background."
    stencil build --dev --watch --serve --no-open --port 3334 >> $UI_LOG_FILE 2>&1 &
    log_line "Run '$(yellow ui_logs)' to see how the chef-ui-library builds."
  )
}

document "build_chef_ui_library_docs" <<DOC
  Build the chef-ui-library docs.
DOC
function build_chef_ui_library_docs {
  ( cd /src/components/chef-ui-library || return 1
    log_line "Building the $(green chef-ui-library) docs."
    npm run docs >> $UI_LOG_FILE 2>&1 &
  )
}

document "automate_ui_lint" <<DOC
  Executes the lint tests for the automate-ui.
DOC
function automate_ui_lint() {
  ( cd /src/components/automate-ui || return 1
    log_line "Running lint-typescript test (npm run lint)"
    npm run lint || return 1
    log_line "Running lint-sass test (npm run lint:sass)"
    npm run lint:sass || return 1
    log_line "Running lint-html test (npm run lint:html)"
    npm run lint:html || return 1
  )
}

document "chef_ui_library_lint" <<DOC
  Executes the lint tests for the chef-ui-library.
DOC
function chef_ui_library_lint() {
  ( cd /src/components/chef-ui-library || return 1
    log_line "Running lint-typescript test (npm run lint)"
    npm run lint || return 1
  )
}

document "automate_ui_reload_chef_ui_library" <<DOC
  Reload the chef-ui-library into the automate-ui.

  This function is useful when you update something inside the chef-ui-library
  and you want to apply the modifications into the automate-ui.

  NOTE: You have to first build the automate-ui at least once with the helper
        method 'start_automate_ui' or 'start_automate_ui_background'
DOC
function automate_ui_reload_chef_ui_library(){
  build_chef_ui_library
  # This function is running what we defined in the package.json as the 'install' command
  # "install": "npm run clean-ui-lib && scripts/build_chef_ui_lib && npm run copy-ui-lib",
  ( cd /src/components/automate-ui || return 1
    npm run clean-ui-lib
    npm run copy-ui-lib
  )
}

#
# Internal Functions (Not exposed to users)
#

# (Internal) Prepare chef-ui-library to be either build or run
function _prepare_chef_ui_library(){
  pushd /src/components/chef-ui-library >/dev/null || return 1
    _install_nodejs_from_nvmrc
    log_line "Installing npm modules for chef-ui-library (npm install)"
    npm install
    _verify_stencil_cli_from_node_modules chef-ui-library 
    _maybe_rebuild_node_sass
  popd >/dev/null || return 1
}

# (Internal) Verify if there is an npm start already running
function _verify_if_automate_ui_running() {
  install_if_missing core/busybox-static pgrep
  local UI_PID
  UI_PID=$(pgrep npm)
  if [ ! -z "$UI_PID" ]; then
    warn "The $(red automate-ui) is already running with PID '$(red "$UI_PID")'"
    warn "Stop the process with '$(green stop_automate_ui)' retry.'"
    return 0
  fi
  return 1
}

# (Internal) Verify the DEVPROXY_URL is set to 'localhost' and that you have at least built one automate-ui-devproxy package
function _verify_devproxy_config() {
  local msg="(HELP) Try running the following commands:"
  msg="$msg\\n\\n\\t# export DEVPROXY_URL=localhost"
  msg="$msg\\n\\t# build components/automate-ui-devproxy/\\n"

  if [ "$DEVPROXY_URL" != "localhost" ]; then
    error "Most likely you are trying to do development in the $(yellow automate-ui from within the studio)."
    error "The configuration of the $(red \$DEVPROXY_URL) variable is incorrect. (currently set to: $(red "$DEVPROXY_URL"))"
    error "Make sure you have it set to '$(green localhost)', then build an '$(green automate-ui-devproxy)' package and retry this function.\\n"
    log_line "$msg"
    return 1
  fi

  # We are searching for 'automate-ui' packages because the automate-ui-devproxy plan builds a mocked ui package
  if ! ls -1 "/src/results/$HAB_ORIGIN-automate-ui-"* >/dev/null 2>&1; then
    error "Most likely you are trying to do development in the $(yellow "automate-ui from within the studio")."
    error "There are $(red "no 'automate-ui' packages inside your results/ folder")."
    error "Please build at least one and retry this function.\\n"
    log_line "$msg"
    return 1
  fi
  return 0
}

# (Internal) Verify that stencil is accessible
function _verify_stencil_cli_from_node_modules() {
  local component
  component=${1:-chef-ui-library}
  if [ -z "$(stencil -v 2>/dev/null)" ]; then
    # Add @stencil/core/bin to the PATH so we can run stencil
    # stencil is coming from the npm install above
    # TODO @afiune should this be a separate npm commend to install stencil instead?
    # => npm install @bigcommerce/stencil-cli
    local NODE_MODULE_PATH="/src/components/$component/node_modules"
    export PATH="$PATH:$NODE_MODULE_PATH/.bin"
    export PATH="$PATH:$NODE_MODULE_PATH/@stencil/core/bin"
    export PATH="$PATH:$NODE_MODULE_PATH/typedoc/bin"
    # typedoc cmd by default is not executable! :sadpanda:
    chmod a+x "/src/components/$component/node_modules/typedoc/bin/typedoc"
  fi;
  log_line "Using Stencil $(stencil -v)"
}

# (Internal) Rebuild node-sass module if we can find it inside the node_modules/ dir
function _maybe_rebuild_node_sass {
  if [ -d "node_modules/node-sass" ]; then
      log_line "Rebuilding node-sass module at location: $(pwd)"
      npm rebuild node-sass
  fi
}

# (Internal) Install nodejs from the .nvmrc file.
# If it can't find that file this function will fail.
function _install_nodejs_from_nvmrc() {
  if [ ! -z "$(node -v 2>/dev/null)" ]; then
    log_line "Using NodeJS $(node -v)"
    return 0
  fi

  local NODE_VERSION
  NODE_VERSION=$(cat .nvmrc 2>/dev/null)
  if [ -z "$NODE_VERSION" ]; then
    warn "Unknown NodeJS version to install. $(pwd)/.nvmrc not found."
    return 2
  fi

  log_line "Installing NodeJS (v.$NODE_VERSION)"
  OPTS="-b" install "core/node10/$NODE_VERSION" >/dev/null

  install_if_missing core/git git;
  install_if_missing core/coreutils env;

  # TODO @afiune how to detect the binlink directory
  local HAB_BINLINK_DIR
  mkdir -p /usr/bin
  if [ -f /hab/bin/env ]; then
    HAB_BINLINK_DIR=/hab/bin
  else
    HAB_BINLINK_DIR=/bin
  fi

  ln -sf ${HAB_BINLINK_DIR}/env /usr/bin/env 2>/dev/null;
}

# (Internal) Prepare automate-ui to be either build or run
function _prepare_automate_ui(){
  pushd /src/components/automate-ui >/dev/null || return 1
    _install_nodejs_from_nvmrc
    log_line "Installing npm modules for automate-ui (npm install)"
    npm install
    automate_ui_reload_chef_ui_library
    _verify_ng_from_node_modules automate-ui
    _maybe_rebuild_node_sass
  popd >/dev/null || return 1
}

# (Internal) Verify that ng is accessible
function _verify_ng_from_node_modules() {
    local component
   component=${1:-automate-ui}
    if [ -z "$(ng -v 2>/dev/null)" ]; then
      # Add @angular/cli/bin to the PATH so we can run ng commands
      # ng is coming from the npm install above
      local NODE_MODULE_PATH="/src/components/$component/node_modules"
      export PATH="$PATH:$NODE_MODULE_PATH/@angular/cli/bin"
      export PATH="$PATH:$NODE_MODULE_PATH/tslint/bin"
      # ng cmd by default is not executable! :sadpanda:
      chmod a+x "/src/components/$component/node_modules/@angular/cli/bin/ng"
      # htmlhint cmd by default is not executable! :sadpanda:
      chmod a+x "/src/components/$component/node_modules/htmlhint/bin/htmlhint"
    fi;
}
