#!/bin/bash
#
# Helper methods specific for the automate-gateway

# TODO (tc) These tests should be run against the same deployed environment as
# the inspec tests in CI.
#
# TODO: These tests should live somewhere else but for now
# this is verifying at least that we can send messages
# through the ingest pipeline as well as the legacy endpoint.
#
# Run Integration tests for automate-gateway.
document "gateway_integration" <<DOC
  Runs the integration tests for automate-gateway
DOC
function gateway_integration() {
  set -o pipefail # don't let the jq-pipe ruin the return 1
  install_if_missing core/jq-static jq

  check_if_deployinate_started || return 1
  # The main tests here is to send a ChefRun Message and a
  # Inspec Message through the legacy endpoint, so we need
  # the relevant services up and running:
  wait_or_fail_for_port_to_listen "$GATEWAY_PORT"
  # Make sure that the gateway is accepting requests
  wait_for_success gateway_get /gateway/version || return 1
  log_line "The automate-gateway version"
  gateway_version || return 1

  local viewer_token
  viewer_token="$(get_api_token_with_policy viewer-access)"

  log_line "Sending 30 Chef Action Messages"
  for _ in {1..30}; do
    # shellcheck disable=SC2119
    send_chef_action_example || return 1
  done
  log_line "List Cfgmgmt Nodes (Empty)"
  gateway_get /cfgmgmt/nodes "$viewer_token" | jq || return 1
  log_line "Sending a Chef Run Message"
  # shellcheck disable=SC2119
  send_chef_run_example || return 1
  log_line "Sending an Inspec Message through the Legacy endpoint"
  send_inspec_example legacy || return 1
  log_line "List Cfgmgmt Nodes (Displays the ingested node)"
  # wait for 5 secs to index the node
  sleep 5 && gateway_get /cfgmgmt/nodes "$viewer_token" | jq || return 1
  log_line "List Event Feed (Displays the ingested actions)"
  gateway_get '/eventfeed?collapse=true&page_size=1000' "$viewer_token" | jq || return 1

  set +o pipefail # reset
}

document "get_service_versions" <<DOC
  Get all the service versions running in automate
DOC
function get_service_versions() {
  curl -f --insecure -H "api-token: $(get_api_token)" "${GATEWAY_URL}/deployment/service_versions"
}

document "gateway_version" <<DOC
  Display the automate-gateway service version.

  Runs:
  => curl $GATEWAY_URL/version
DOC
function gateway_version() {
  install_if_missing core/jq-static jq

  log_line "Gateway"
  gateway_get /gateway/version | jq .

  log_line "Ingest"
  gateway_get /ingest/version | jq .

  log_line "ConfigMgmt"
  gateway_get /cfgmgmt/version | jq .

  log_line "Compliance"
  gateway_get /compliance/reporting/version | jq .
}

document "gateway_get" <<DOC
  Sends a Gateway GET Request to the $GATEWAY_URL URL and the provided endpoint

  Example: Send a GET Request to $GATEWAY_URL/version
  ---------------------------------------------------
  # gateway_get "/version"

  Example: Send a GET Request to $GATEWAY_URL/version using a specific token
  --------------------------------------------------------------------------
  # gateway_get "/version" "$token"
DOC
function gateway_get() {
  install_if_missing core/curl curl >/dev/null 2>&1
  # use admin token only if not provided as second argument
  local api_token="${2:-$(get_admin_token)}"
  curl -fsS --insecure -H "api-token: ${api_token}" "${GATEWAY_URL}${1}"
}

document "send_chef_action_example" <<DOC
  Sends a Chef Action example to the chef action rest endpoint.

  Example: Send a random Chef Action example:
  --------------------------------------------------------
  # send_chef_action_example

  Example: Send a Chef Action example with specific type and task:
  --------------------------------------------------------
  # send_chef_action_example cookbook create
DOC
# shellcheck disable=SC2120
function send_chef_action_example() {
  install_if_missing core/curl curl
  install_if_missing core/jq-static jq

  local event_types=(cookbook bag client node policyfile role scanjobs profile)
  local event_type=${event_types[$((RANDOM % 8))]}
  local event_tasks=(update create delete)
  local event_task=${event_tasks[$((RANDOM % 3))]}
  if [[ "$1" != "" ]]; then
    event_type=$1
  fi
  if [[ "$2" != "" ]]; then
    event_task=$2
  fi
  local endpoint="/events/data-collector"
  local examples_path="/src/components/ingest-service/examples"
  local tmp_action_json
  local rfc_time
  rfc_time=$(date --rfc-3339=seconds  -d "$((RANDOM % 144)) hour ago" | sed 's/ /T/' | sed 's/\+.*/Z/')

  # Update the 'recorded_at' time from the ChefAction Example; and set entity_type and task
  tmp_action_json="$(jq --arg event_task "$event_task" --arg rfc_time "$rfc_time" --arg event_type "$event_type" \
    '.task = $event_task | .recorded_at = $rfc_time | .entity_type = $event_type' < $examples_path/chef_action.json)"

  # note: this needs to be fed in via stdin, as passing it in as --data "$tmp_action_json"
  # will exceed argmax
  curl -f --insecure -H "api-token: $(get_api_token)" \
    --data "@-" "${GATEWAY_URL}${endpoint}" <<< "$tmp_action_json"
}

document "generate_chef_run_example" <<DOC
  Generates a unique Chef run report by updating the example document with new
  UUIDS.

  Example: Generate the document and pretty print:
  ------------------------------------------------
  generate_chef_run_example | jq .

  Example: Generate the document and send to automate:
  ----------------------------------------------------
  generate_chef_run_example | send_chef_data_raw
DOC
function generate_chef_run_example() {
  local node_name="insights.success.$((RANDOM % 100))"
  local examples_json_path=${JSON_FILE:-/src/components/ingest-service/examples/converge-success-report.json}
  uniqify_chef_run_report "$node_name" < "$examples_json_path"
}

document "send_chef_run_example" <<DOC
  Send the example chef run message to the chef run rest endpoint.

  Options: by default the message is send directly to the gateway chef/run endpoint
    legacy - send the message directly to the gateway legacy endpoint
    lb - send the message through the load balancer

  By default the components/ingest-service/examples/converge-success-report.json is send.
  To send a different JSON message use the JSON_FILE variable.

  Example: Send a Chef Run with looping roles:
  --------------------------------------------------------
  # JSON_FILE="/src/components/ingest-service/examples/looping_roles_ccr.json" send_chef_run_example

  Example: Send a Chef Run example to the legacy endpoint:
  --------------------------------------------------------
  # send_chef_run_example legacy

  Example: Send a Chef Run example to the load balancer endpoint:
  --------------------------------------------------------
  # send_chef_run_example lb
DOC
# shellcheck disable=SC2120
function send_chef_run_example() {
  generate_chef_run_example | send_chef_data_raw "$1"
}

document "generate_chef_run_start_example" <<DOC
  Returns a chef run start document from the examples.
DOC
function generate_chef_run_start_example() {
  cat /src/components/ingest-service/examples/chef_client_run_start.json
}

document "send_chef_run_start_example" <<DOC
  Send the example chef run start message to the chef run rest endpoint.

  Arguments: by default the message is send directly to the gateway chef/run endpoint
    legacy - send the message directly to the gateway legacy endpoint
    lb - send the message through the load balancer

  Example: Send a Chef Run start to the legacy endpoint:
  --------------------------------------------------------
  # send_chef_run_start_example legacy

  Example: Send a Chef Run start to the load balancer endpoint:
  --------------------------------------------------------
  # send_chef_run_start_example lb
DOC
function send_chef_run_start_example() {
  generate_chef_run_start_example | send_chef_data_raw "$1"
}

# shellcheck disable=SC2154
document "generate_chef_run_failure_example" <<DOC
  Generate a unique chef run failure report by updating the example with new
  UUIDs and times/dates. You can send it automate directly or modify it as you
  wish.

  Example: Send a Chef Run example to the new ingest endpoint:
  --------------------------------------------------------
  # generate_chef_run_failure_example | send_chef_data_raw

  Example: Generate run data and modify it
  --------------------------------------------------------
  # generate_chef_run_failure_example | jq --arg error_message "example error1" '.error.message = $error_message'

  Example: Generate run data, modify it, and send it to ingest
  --------------------------------------------------------
  generate_chef_run_failure_example | jq --arg error_message "example error1" '.error.message = $error_message' | send_chef_data_raw
DOC
# shellcheck disable=SC2120
function generate_chef_run_failure_example() {
  local node_name="node_failed_$((RANDOM % 100))"
  local examples_path="/src/components/ingest-service/examples"
  uniqify_chef_run_report "$node_name" < $examples_path/converge-failure-report.json
}

document "send_chef_run_failure_example" <<DOC
  Send the example chef run converge failure message to the chef run rest endpoint.

  Example: Send a Chef Run example to the legacy endpoint:
  --------------------------------------------------------
  # send_chef_run_failure_example legacy
DOC
function send_chef_run_failure_example() {
  generate_chef_run_failure_example| send_chef_data_raw "$1"
}

document "generate_chef_liveness_example" <<DOC
  Prints the example chef liveness message to stdout
DOC
function generate_chef_liveness_example() {
  cat "/src/components/ingest-service/examples/liveness_ping.json"
}

document "send_chef_liveness_example" <<DOC
  Send the example chef liveness message to the chef run rest endpoint.

  Example: Send a Chef liveness example to the legacy endpoint:
  --------------------------------------------------------
  # send_chef_liveness_example legacy
DOC
function send_chef_liveness_example() {
  generate_chef_liveness_example | send_chef_data_raw "$1"
}

document "send_chef_data_raw" <<DOC
  Send data from stdin to the given endpoint.

  One optional argument can be given to send the data via different paths:
  * 'send_chef_data_raw legacy': send to automate-gateway's events/data-collector endpoint
  * 'send_chef_data_raw lb': send to automate-load-balancer (nginx) data-collector/v0 endpoint
  * 'send_chef_data_raw SOME/PATH': send to automate-gateway at the given path
  * 'send_chef_data_raw' (default): send to new ingest/events/chef/run endpoint

  Example: Send a Chef Run failure example to the new ingest endpoint:
  --------------------------------------------------------
  # generate_chef_run_failure_example | send_chef_data_raw

  Example: Same but via the load balancer
  --------------------------------------------------------
  # generate_chef_run_failure_example | send_chef_data_raw lb
DOC
function send_chef_data_raw() {
  install_if_missing core/curl curl

  local endpoint=$1
  local token=$2
  if [[ "$1" == "legacy" ]]; then
    endpoint="${GATEWAY_URL}/events/data-collector"
  elif [[ "$1" == "lb" ]]; then
    endpoint="https://localhost/data-collector/v0"
  elif [[ "$1x" == "x" ]]; then
    endpoint="${GATEWAY_URL}/ingest/events/chef/run"
  else
    endpoint="$1"
  fi

  if [[ "$2x" == "x" ]]; then
    token=$(get_api_token)
  else
    token=$2
  fi

  curl -f --insecure -H "api-token: ${token}" \
  --data "@-" "${endpoint}"
}

function uniqify_chef_run_report() {
  install_if_missing core/jq-static jq

  local node_name="$1"

  local run_uuid
  run_uuid=$(uuidgen)
  local node_uuid
  node_uuid=$(uuidgen)

  local rfc_time
  rfc_time=$(date +%FT%TZ -d "$((RANDOM % 144)) hour ago")

  local examples_path="/src/components/ingest-service/examples"

  # Update the IDs, names, and dates
  jq --arg rfc_time "$rfc_time" \
     --arg run_uuid "$run_uuid" \
     --arg node_name "$node_name" \
     --arg node_uuid "$node_uuid" \
     '.end_time = $rfc_time | .start_time = $rfc_time | .entity_uuid = $node_uuid | .id = $run_uuid | .run_id = $run_uuid | .node_name = $node_name'
}

document "delete_multiple_nodes" <<DOC
  Delete multiple nodes

  Example: Send a multiple delete commands:
  --------------------------------------------------------
  # delete_multiple_nodes 0271e125-97dd-498a-b026-8448ee60aafe 9c139ad0-89a5-44bc-942c-d7f248b155ba
DOC
function delete_multiple_nodes() {
  install_if_missing core/curl curl
  install_if_missing core/jo jo

  endpoint="/ingest/events/chef/node-multiple-deletes"

  jo "node_ids=$(jo -a "$@")" \
    | curl -X POST -f --insecure -H "api-token: $(get_api_token)" \
    --data "@-" "${GATEWAY_URL}${endpoint}"
}

document "send_inspec_example" <<DOC
  Send the example inspec message to the inspec rest endpoint.
DOC
function send_inspec_example() {
  install_if_missing core/curl curl

  local endpoint="/events/data-collector"
  local examples_json_path=${JSON_FILE:-/src/components/compliance-service/ingest/examples/compliance-success-tiny-report.json}

  local uuid
  local report_uuid
  local rfc_time
  uuid=$(uuidgen)
  report_uuid=$(uuidgen)
  rfc_time=$(date +%FT%TZ -d "$((RANDOM % 144)) hour ago")

  tmp_inspec_json="$(jq --arg id "$uuid" --arg report_uuid "$report_uuid" --arg rfc_time "$rfc_time" '.node_uuid = $id | .report_uuid = $report_uuid | .end_time = $rfc_time' <"$examples_json_path")"

  echo "$tmp_inspec_json" | curl -f --insecure -H "api-token: $(get_admin_token)" \
       --data "@-" "${GATEWAY_URL}${endpoint}"
}

document "send_inspec_failure_example" <<DOC
  Send the example failure inspec message to the inspec rest endpoint.
DOC
function send_inspec_failure_example() {
  install_if_missing core/curl curl

  local examples_path="/src/components/compliance-service/ingest/examples"
  local endpoint="/events/data-collector"
  local uuid
  uuid=$(uuidgen)

  # Update the 'report_uuid'
  tmp_report_json="$(jq --arg uuid "$uuid" '.report_uuid = $uuid' <$examples_path/compliance-failure-big-report.json)"
  curl -f --insecure -H "api-token: $(get_api_token)" \
    --data "@-" "${GATEWAY_URL}${endpoint}" <<< "$tmp_report_json"
}

document "debug_automate_gateway" <<DOC
  Attaches a remote debugger to automate-gateway
DOC
function debug_automate_gateway() {
  check_if_deployinate_started || return 1
  debug_go_service automate-gateway
}

document "gateway_list_secrets" <<DOC
  List the secrets stored in the secrets service
DOC
function gateway_list_secrets() {
  install_if_missing core/curl curl
  install_if_missing core/jq-static jq

  endpoint="/secrets/search"

  curl -X POST -f --insecure -H "api-token: $(get_admin_token)" "${GATEWAY_URL}${endpoint}" | jq
}

document "gateway_create_secret" <<DOC
  create a secret in the secrets service

  arg 1 - username optional
  art 2 - password optional
DOC
function gateway_create_secret() {
  local username=${1:-"default"}
  local password=${2:-"super_secret"}

  install_if_missing core/curl curl
  install_if_missing core/jq-static jq

  endpoint="/secrets"

  # shellcheck disable=SC2086
  echo '{"name": "bob", "type": "service_now", "data": [{"key": "username", "value": "'$username'"}, {"key": "password", "value": "'$password'"}] }' |\
    curl -X POST -f --insecure -H "api-token: $(get_admin_token)" \
    --data "@-" "${GATEWAY_URL}${endpoint}" | jq
}

document "gateway_delete_secret" <<DOC
  Delete one secret with the given ID

  arg 1 - ID required
DOC
function gateway_delete_secret() {
  [[ "$1" == "" ]] && error "Missing ID argument; try 'describe ${FUNCNAME[0]}'" && return 1

  install_if_missing core/curl curl
  local id=$1

  endpoint="/secrets/id/$id"

  # shellcheck disable=SC2086
  echo '{"id": "'$id'"}' |\
    curl -X DELETE -f --insecure -H "api-token: $(get_admin_token)" \
    --data "@-" "${GATEWAY_URL}${endpoint}"
}

document "gateway_read_secret" <<DOC
  Read one secret with the given ID

  arg 1 - ID required
DOC
function gateway_read_secret() {
  [[ "$1" == "" ]] && error "Missing ID argument; try 'describe ${FUNCNAME[0]}'" && return 1
  local id=$1

  install_if_missing core/curl curl
  install_if_missing core/jq-static jq

  endpoint="/secrets/id/$id"

  # shellcheck disable=SC2086
  echo '{"id": "'$id'"}' |\
    curl -X GET -f --insecure -H "api-token: $(get_admin_token)" \
    --data "@-" "${GATEWAY_URL}${endpoint}" | jq
}

document "gateway_update_secret" <<DOC
  Update the username and password for one secret with the given ID

  arg 1 - ID required
  arg 2 - username optional
  art 3 - password optional
DOC
function gateway_update_secret() {
  [[ "$1" == "" ]] && error "Missing ID argument; try 'describe ${FUNCNAME[0]}'" && return 1
  local id=$1
  local username=${2:-"default"}
  local password=${3:-"super_secret"}

  endpoint="/secrets/id/$id"

  # shellcheck disable=SC2086
  echo '{"id": "'$id'", "name": "bob", "type": "service_now", "data": [{"key": "username", "value": "'$username'"}, {"key": "password", "value": "'$password'"}] }' |\
    curl -X PATCH -f --insecure -H "api-token: $(get_admin_token)" \
    --data "@-" ${GATEWAY_URL}${endpoint} | jq
}

document "gateway_delete_notification_rule" <<DOC
  Delete a notification with the given ID

  arg 1 - ID required
DOC
function gateway_delete_notification_rule() {
  [[ "$1" == "" ]] && error "Missing ID argument; try 'describe ${FUNCNAME[0]}'" && return 1
  local id=$1

  install_if_missing core/curl curl
  install_if_missing core/jq-static jq

  endpoint="/notifications/rules/$id"

  # shellcheck disable=SC2086
  echo '{"id": "'$id'"}' |\
    curl -X DELETE -f --insecure -H "api-token: $(get_admin_token)" \
    --data "@-" ${GATEWAY_URL}${endpoint} | jq
}

document "gateway_create_notification_rule" <<DOC
  Create a notification rule
DOC
function gateway_create_notification_rule() {
  install_if_missing core/curl curl
  install_if_missing core/jq-static jq

  endpoint="/notifications/rules"

  # shellcheck disable=SC2154,SC2086
  echo '{"rule": { "name": "'$name'", "event": "CCRFailure", "SlackAlert": { "url": "http://localhost:55565"} }}' |\
    curl -X POST -f --insecure -H "api-token: $(get_admin_token)" \
    --data "@-" "${GATEWAY_URL}${endpoint}" | jq
}

document "gateway_get_notification_rule" <<DOC
  Get a notification rule with the given ID

  arg 1 - ID required
DOC
function gateway_get_notification_rule() {
  [[ "$1" == "" ]] && error "Missing ID argument; try 'describe ${FUNCNAME[0]}'" && return 1
  local id=$1

  install_if_missing core/curl curl
  install_if_missing core/jq-static jq

  endpoint="/notifications/rules/$id"

  # shellcheck disable=SC2086
  echo '{"id": "'$id'"}' |\
    curl -X GET -f --insecure -H "api-token: $(get_admin_token)" \
    --data "@-" "${GATEWAY_URL}${endpoint}" | jq
}


document "gateway_notification_validate_connection" <<DOC
  Validate a target for a notification rule

  arg 1 - URL required
DOC
function gateway_notification_validate_connection() {
  [[ "$1" == "" ]] && error "Missing ID argument; try 'describe ${FUNCNAME[0]}'" && return 1
  local url=$1

  install_if_missing core/curl curl

  endpoint="/notifications/webhook"

  # There are three cases for testing a url: with a secret ID, with a username:password, no creds needed
  # message='{"url": "'$url'", "secret_id": {"id": "kdfkdfj"}}'
  message='{"url": "'$url'", "username_password": {"username": "bob", "password": "super_secret"}}'
  # message='{"url": "'$url'", "none": {}}'

  curl -f --insecure -H "api-token: $(get_admin_token)" --data "${message}" "${GATEWAY_URL}${endpoint}"
}

document "gateway_grpcurl_list_services" <<DOC
  Display the list of RPC services inside the automate-gateway.

  @(arg:1) Optional: An RPC service to inspec

  Example: Inspect the JobScheduler service
  -----------------------------
  gateway_grpcurl_list_services chef.automate.api.ingest.JobScheduler
DOC
function gateway_grpcurl_list_services() {
  grpcurl -insecure "$GATEWAY_HOST:$GATEWAY_PORT" list "$1"
}

document "gateway_grpcurl_get" <<DOC
  Make a grpcurl GET request to the provided GRPC function, using an admin
  token.

  @(arg:1) Required: A GRPC function

  Example: Get the status of the JobScheduler
  -----------------------------
  gateway_grpcurl_get chef.automate.api.ingest.JobScheduler.GetStatusJobScheduler

  NOTE: Run 'gateway_grpcurl_list_services' to inspect the RPC services.
DOC
function gateway_grpcurl_get() {
  grpcurl -insecure -rpc-header "api-token: $(get_admin_token)" \
	  -cert /hab/svc/automate-gateway/config/service.crt \
	  -key /hab/svc/automate-gateway/config/service.key "$GATEWAY_HOST:$GATEWAY_PORT" "$1"
}

document "get_api_token" <<DOC
  This will idempotently generate an API token that has enough access for data ingestion.

  Note: if using IAM v2, this token will NOT be an admin token; but one that is a member
  of the default ingest-access policy.
DOC
function get_api_token() {
  check_if_deployinate_started || return 1
  if [ -f /tmp/api_token ]; then
    cat /tmp/api_token
  else
    date +%s | xargs -I % chef-automate iam token create admin-token-% --admin >/tmp/api_token
    # shellcheck disable=SC2181
    if [ $? -ne 0 ]; then
      get_api_token_with_policy ingest-access >/tmp/api_token || return 1
    fi
    cat /tmp/api_token
  fi
}

document "get_api_token_with_policy" <<DOC
  This will idempotently generate an API token that is a member of the policy
  passed as an argument.

  Example: get a token with editor-access
  ----------------------------------------------------
  # get_api_token_with_policy editor-access

DOC
function get_api_token_with_policy() {
  check_if_deployinate_started || return 1

  local policy_id=${1:?"usage: get_api_token_with_policy POLICY_ID"}
  local token_id="api-token-id-${policy_id}"
  local token_file="/tmp/api_token_${policy_id}"

  if [ -f "$token_file" ]; then
    cat "$token_file"
  else
    # create standard api token
    chef-automate iam token create "$token_id" --id "$token_id" >"$token_file" || return 1
    # and add it to policy
    curl -fsS --insecure -H "api-token: $(get_admin_token)" \
      --data "$(jq -nc --arg token "$token_id"  '{ members: [ "token:\($token)" ]}')" \
      "${GATEWAY_URL}/apis/iam/v2/policies/${policy_id}/members:add" >/dev/null
    cat "$token_file"
  fi
}

document "remove_legacy_v1_policies" <<DOC
  This will idempotently remove any migrated v1 policies you might have.
DOC
function remove_legacy_v1_policies() {
  install_if_missing core/jq-static jq

  for id in $(gateway_get /apis/iam/v2/policies |\
                jq -rc '.policies[] | select(.name | startswith("[Legacy]")) | .id'); do
    echo "Deleting legacy policy $id..."
    curl -fsS --insecure -H "api-token: $(get_admin_token)" -XDELETE "${GATEWAY_URL}/apis/iam/v2/policies/$id"
  done
}
