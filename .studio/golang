#!/bin/bash
#
# This file is meant to have all the helper methods that
# Go components will use like the config_mgmt/ingest/etc

# Run Unit tests
document "go_component_unit" <<DOC
  Runs unit testing for the specified component

  Example: Run the unit tests for the config-mgmt-service
  ----------------------------------------------------
  $ go_component_unit config-mgmt-service

  By default, the output will only show failures.
  You can optionally turn on verbose mode to see output from all tests
  but, depending on the component, it will be much harder to find failures
  mixed in with a large stream of output.

  Example: Run the unit tests for the authz-service with verbosity enabled
  ----------------------------------------------------
  $ go_component_unit -v config-mgmt-service

  The command provides tab-completion, so if you type this...

  $ go_component_unit<space><tab><tab>

  ... it will list all available components--except for "api",
  the one pseudo-component that you can also test.

  Finally, invoke the command with no arguments to see a concise usage message.
DOC
function go_component_unit() {
  install_if_missing "$(desired_golang_ident)" go

  VERBOSE_TESTS=
  if [[ "$1" == "-v" ]]; then
      VERBOSE_TESTS=$1
      shift
  fi
  if [[ "$1" == "" ]]; then
    echo "usage: go_component_unit [ -v ] <component-name> | api"
    return 1
  fi

  local packages
  local spec
  log_line "Running '${YELLOW}$1${NC}' unit tests"
  if [[ "$1" == "api" ]]; then
    spec=./api/...
  else
    spec=./components/$1/...
  fi
  mapfile -t packages < <(go list -f '{{ .Dir }}' "${spec}" | grep -v integration)
  go_test "${packages[@]}"
}
complete -F _component_auto_complete go_component_unit

# TODO: (@afiune) Document the use of go_test and maybe put in ci-studio-common
function go_test() {
  install_if_missing "$(desired_golang_ident)" go
  install_if_missing core/git git

  log_line "Executing Go test"
  # The default behavior is to run the package at the root of the
  # repository which is just as if we run: 'go test -cover'
  go test "$@" -cover "${VERBOSE_TESTS}"
}

document "go_build_pkg" <<DOC
  Build one or more go packages within the automate codebase

  Examples:

      go_build_pkg components/automate-deployment/cmd/automate-ctl
      go_build_pkg components/automate-deployment/pkg/server
DOC
function go_build_pkg() {
  install_if_missing "$(desired_golang_ident)" go

  if [[ "$1" == "" ]]; then
      error "Missing package path; try 'describe ${FUNCNAME[0]}'"
      return 1
  fi

  local pkg_path="github.com/chef/automate/$1"
  log_line " go_build $pkg_path"
  go_build "$pkg_path"
}

document "go_build" <<DOC
  A go vendor aware wrapped for go build
DOC
function go_build() {
  install_if_missing "$(desired_golang_ident)" go
  mkdir -p "${GOBIN}"

  go install "${1}"
}

document "go_build_component" <<DOC
  A wrapper around the go_build to build a specific component.
DOC
function go_build_component() {
  [[ "$1" == "" ]] && error "Missing component name argument; try 'describe ${FUNCNAME[0]}'" && return 1
  verify_component "$1" || return $?
  local component=$1

  go_build "./components/${component}/cmd/${component}/..."
}
# Adding auto tab complete
complete -F _component_auto_complete go_build_component

document "reload_component_binary" <<DOC
  Reloads the component binary from the '/src' directory. (Build a binary with 'go_build')

  This helper will force load a binary located at '$GOBIN/\$component' into your already installed
  habitat package. If no package have been installed, it will try to install one.
DOC
function reload_component_binary() {
  [ "x$1" == "x" ] && error "Missing component name argument; try 'describe ${FUNCNAME[0]}'" && return 1
  verify_component $1 || return $?
  local component=$1

  component_path=$(hab pkg path $HAB_ORIGIN/$component 2> /dev/null)
  if [[ $? -ne 0 ]]; then
    component_path=$(hab pkg path chef/$component 2> /dev/null)
    if [[ $? -ne 0 ]]; then
      error "Could not find $component deployed under either your origin ($HAB_ORIGIN) or chef origin."
      error "Deploy Automate and try again."
      return 1
    fi
  fi

  [ ! -f "$GOBIN/${component}" ] && go_build_component "$component"

  # TODO: (@afiune) This is a bit too extreme but what we are trying to avoid is to
  # be polling to the depot for newer packages, since we disable that functionality
  # we have to force load the binary like this. Maybe I'll revisit this latter.
  log_line " Reloading $component binary"
  # we need to unlink the old one so that the new one my be updated and then relinked
  unlink "${component_path}/bin/${component}"
  kill_running_service "$component"
  cp "$GOBIN/${component}" "${component_path}/bin/${component}"
  if [[ $? != 0 ]]; then
    error "There was a problem trying to reload the $component binary."
    error "Run 'go_build_component $component' and try again."
    error "Or run 'go_update_component $component' to build and reload the binary."
    return 1
  fi

  return 0
}

# Adding auto tab complete
complete -F _component_auto_complete reload_component_binary

document "go_update_component" <<DOC
  Go update will generate a new binary (go_build) and force load it (reload_binary).
DOC
function go_update_component() {
  [ "x$1" == "x" ] && error "Missing component name argument; try 'describe ${FUNCNAME[0]}'" && return 1
  verify_component $1 || return $?
  local component=$1

  hab pkg path $HAB_ORIGIN/$component 2>/dev/null 1>&2 || hab pkg path chef/$component 2>/dev/null 1>&2
  if [ $? -eq 0 ]; then
    go_build_component $component
    reload_component_binary $component
  else
    error "You must first deploy Automate."
    return 1
  fi
}
# Adding auto tab complete
complete -F _component_auto_complete go_update_component

document "kill_running_service" <<DOC
  kill a running component. This can be used to restart a component

  Example:
      kill_running_service ingest-service
DOC
function kill_running_service() {
  [[ "$1" == "" ]] && error "Missing component name argument" && return 1
  verify_component $1 || return $?
  local component=$1
  SERVICE_PID=$(grep_component_pid $component)
  if [[ -n ${SERVICE_PID} ]]; then
    kill $SERVICE_PID
  fi
}
# Adding auto tab complete
complete -F _component_auto_complete kill_running_service

# Helper function to search for the PID of the service
function grep_component_pid {
  [[ "$1" == "" ]] && error "Missing component name argument" && return 1;
  install_if_missing core/busybox-static pgrep >/dev/null
  pgrep $1
}

document "auto_go_update_component" <<DOC
  Watch for file changes in a component and on change build and update the service.
DOC
function auto_go_update_component() {
  [ "x$1" == "x" ] && error "Missing component name argument; try 'describe ${FUNCNAME[0]}'" && return 1
  verify_component $1 || return $?
  local component=$1

  install_if_missing core/inotify-tools inotifywait
  log_line "Starting file watch for $component"

  # shellcheck disable=SC2034  # Unused variables left for readability
  inotifywait -m -r /src/components/$component -e create -e moved_to -e close_write |
    while read -r path action file; do
        if [[ "$file" =~ .*go$ ]]; then
          log_line "File: $file change in $component"
          go_update_component "$component"
          log_line "Finished update"
        fi
    done
}
# Adding auto tab complete
complete -F _component_auto_complete auto_go_update_component

document "go_component_static_tests" <<DOC
  Runs the static tests for a component
DOC
function go_component_static_tests() {
  [ "x$1" == "x" ] && error "Missing component name argument; try 'describe ${FUNCNAME[0]}'" && return 1
  verify_component $1 || return $?
  local component=$1

  log_line "Installing gofmt"
  install_if_missing "$(desired_golang_ident)" gofmt

  log_line "Testing $component go files"
  unformatted=$(gofmt -l components/$component)
  if [ -z "$unformatted" ]
  then
    log_line "Success!! $component"
    return 0
  fi

  echo >&2 "Failure: Go files must be formatted with gofmt. Please run:"
  for fn in $unformatted; do
    echo >&2 "  gofmt -w $PWD/$fn"
  done

  return 1
}
# Adding auto tab complete
complete -F _component_auto_complete go_component_static_tests

document "go_component_lint" <<DOC
  Runs the golangci linter for a component
DOC
function go_component_lint() {
  [ "x$1" == "x" ] && error "Missing component name argument; try 'describe ${FUNCNAME[0]}'" && return 1
  verify_component $1 || return $?
  local component=$1
  install_golangci && run_golangci components/$component/...
}

complete -F _component_auto_complete go_component_lint

function install_golangci() {
    if [[ -z $GOLANGCILINTVERSION ]]; then
        error "GOLANGCILINTVERSION must be set"
        return 1
    fi
    (
        local lint_bin="./cache/golangci-lint-${GOLANGCILINTVERSION}-linux-amd64/golangci-lint"
        local lint_tarball="./cache/golangci-lint-${GOLANGCILINTVERSION}-linux-amd64.tar.gz"
        if [[ ! -f  "$lint_bin" ]]; then
            log_line "Unpacking golang-ci ${GOLANGCILINTVERSION}"
            if [[ ! -f "$lint_tarball" ]]; then
                error "Could not find $lint_tarball, did you vendor this version of golangci-lint?"
                return 1
            fi
            tar zxf "$lint_tarball" -C cache/
            touch "$lint_bin"
        fi
    )
}

function run_golangci() {
    if [[ -z $GOLANGCILINTVERSION ]]; then
        error "GOLANGCILINTVERSION must be set"
        return 1
    fi

    (
        local pkg=$1
        log_line "Running golang-ci ${GOLANGCILINTVERSION} on $pkg"
        "./cache/golangci-lint-${GOLANGCILINTVERSION}-linux-amd64/golangci-lint" run "$pkg"
    )
}

document "go_component_make" <<DOC
  Runs the given make target(s) for the given component
DOC
function go_component_make() {
  [[ "$1" == "" ]] && error "Missing component name argument" && return 1

  install_if_missing "$(desired_golang_ident)" go

  local component_relpath=$1
  local component_path="/src/$component_relpath"
  shift
  pushd "$component_path" > /dev/null || (echo "invalid component; cannot cd to $component_path" && return 1)
  echo "in $component_path"
  echo "make $*"
  make "$@"
  local return_code=$?
  popd > /dev/null || return 1
  return $return_code
}
