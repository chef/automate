#!/bin/bash
#
# Helper methods specific for the event-feed-service

# Run Integration tests for the feeds service
document "event_feed_integration" <<DOC
  Runs the integration tests for the event feeds service
DOC
function event_feed_integration() {
  go_test "github.com/chef/automate/components/event-feed-service/pkg/integration_test"
}

document "event_feed_list" <<DOC
  List events in the feed
DOC
function event_feed_list() {
  chef-automate dev grpcurl event-feed-service -- chef.automate.domain.event_feed.api.EventFeedService.GetFeed -d '{"Size": 100}'
}

document "event_feed_add_event" <<DOC
  Add an example event
DOC
function event_feed_add_event() {
  generate_random_chef_server_event | send_event
}

document "send_event" <<DOC
  Send a piped in json to the event feed service
DOC
function send_event() {
  chef-automate dev grpcurl event-feed-service -- chef.automate.domain.event_feed.api.EventFeedService.HandleEvent -d @
}

document "generate_event_example" <<DOC
  Generate a exmaple event
DOC
function generate_event_example() {
    echo '{
      "EventID": "f7b3ffa0-3f17-4bf3-8a01-8a15e17f6eeb", 
      "Published": "2019-06-28T15:17:21Z", 
      "Producer": { 
        "ID": "", 
        "ProducerName": "ProducerName", 
        "ProducerType": "ProducerType", 
        "Tags": []
      }, 
      "Type": { 
        "Name": "event type"
      }, 
      "Actor": {
        "ID":"actor ID", 
        "ObjectType": "actor ObjectType", 
        "DisplayName": "actor DisplayName"
      }, 
      "Object": {
        "ID":"object ID", 
        "DisplayName": 
        "object display name", 
        "ObjectType": "object ObjectType"
      }, 
      "Target": {
        "ID": "target ID", 
        "ObjectType": "target ObjectType", 
        "DisplayName": "target DisplayName"
      }
    }'
}

document "generate_random_chef_server_event" <<DOC
  Add an example chef_server event
DOC
function generate_random_chef_server_event() {
  local uuid
  uuid=$(uuidgen)

  json="$(generate_random_event_example | jq --arg uuid "$uuid" \
    '.Producer.ID = "environment" |
     .Producer.ProducerName = "Environment" |
     .Producer.ProducerType = "chef_server" |
     .Actor.ObjectType = "User" |
     .Actor.DisplayName = "krasnow" |
     .Object.ObjectType = "environment" |
     .Object.DisplayName = "acceptance-chef-products-automate-master" |
     .Object.ID = $uuid |
     .Projects = ["project9"] |
     .data.chef_organization = "1st Ranger Battalion" |
     .data.chef_infra_server = "chef.example.com"')"

  echo $json
}

document "generate_random_event_example" <<DOC
  Add an example event with random ID and time from the last 144 hours.
DOC
function generate_random_event_example() {
  local uuid
  uuid=$(uuidgen)
  local rfc_time
  rfc_time=$(date +%FT%TZ -d "$((RANDOM % 144)) hour ago")
  local verbs=(create delete update)
  local verb=${verbs[$((RANDOM % 3))]}

  generate_event_example | jq \
  --arg uuid "$uuid" \
  --arg rfc_time "$rfc_time" \
  --arg verb "$verb" \
  '.EventID = $uuid | 
  .Verb = $verb | 
  .Published = $rfc_time'
}

document "event_feed_summary" <<DOC
  Event feed summary
DOC
function event_feed_summary() {
  chef-automate dev grpcurl event-feed-service -- chef.automate.domain.event_feed.api.EventFeedService.GetFeedSummary -d \
    '{"CountCategory": "entity_type"}'
}

document "event_feed_timeline" <<DOC
  Event feed timeline
DOC
function event_feed_timeline() {
  chef-automate dev grpcurl event-feed-service -- chef.automate.domain.event_feed.api.EventFeedService.GetFeedTimeline -d \
    '{"Timezone": "UTC", "Interval": 24, "Start": "2019-06-25", "End": "2019-06-28"}'
}

document "event_feed_configure_purge" <<DOC
  Configures the purge workflow
DOC
function event_feed_configure_purge() {
  chef-automate dev grpcurl event-feed-service -- chef.automate.infra.data_lifecycle.api.Purge.Configure -d "
  {
    \"enabled\":true,
    \"recurrence\":\"FREQ=DAILY;DTSTART=20190820T221315Z;INTERVAL=1\",
    \"policy_update\": {
      \"es\": [
        {
          \"policy_name\":\"feed\",
          \"older_than_days\":\"${1}\"
        }
      ]
    }
  }"
}
