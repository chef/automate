#!/bin/bash
#
# This file is meant to have wrapper functions for all our dev tooling,
# the main idea is to create functions that will install the binary if it
# doesn't already exist. Then call the underlying binary. (a wrapper :smile:)

document "grpcurl" <<DOC
  Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers

  Example: List the GRPC functions for the config-mgmt-service
  ----------------------------------------------------
  $ grpcurl --insecure -cert dev/certs/config-mgmt-service.crt -key dev/certs/config-mgmt-service.key localhost:1234 list service.CfgMgmt

  For more documentation go to: https://github.com/fullstorydev/grpcurl#grpcurl
DOC
function grpcurl() {
  local TOOL_BIN
  TOOL_BIN=$(type -P grpcurl);
  if [[ "x${TOOL_BIN}" == "x" ]]; then
    install_if_missing core/grpcurl grpcurl;
    TOOL_BIN=$(type -P grpcurl);
  fi;
  $TOOL_BIN "$@"
}

function ps() {
  install_if_missing core/procps-ng ps;
  TOOL_BIN=$(type -P ps);
  $TOOL_BIN "$@"
}

document "channel_contains_commit" <<DOC
  Given a "commit-ish" git identifier, it shows which channels (dev, acceptance, current) the commit is present in.
DOC
function channel_contains_commit() {
    commit=$1

    install_if_missing core/jq-static jq
    install_if_missing core/curl curl
    install_if_missing core/git git

    dev=$(curl https://packages.chef.io/manifests/dev/automate/latest.json 2>/dev/null | jq -r '.git_sha')
    current=$(curl https://packages.chef.io/manifests/current/automate/latest.json 2>/dev/null | jq -r '.git_sha')
    acceptance=$(curl https://packages.chef.io/manifests/acceptance/automate/latest.json 2>/dev/null | jq -r '.git_sha')

    if git merge-base --is-ancestor "$commit" "$dev"; then
        echo -e '       dev: \033[0;32m✓\033[0m'
    else
        echo -e '       dev: \033[0;91m✗\033[0m'
    fi

    if git merge-base --is-ancestor "$commit" "$acceptance"; then
        echo -e 'acceptance: \033[0;32m✓\033[0m'
    else
        echo -e 'acceptance: \033[0;91m✗\033[0m'
    fi

    if git merge-base --is-ancestor "$commit" "$current"; then
        echo -e '   current: \033[0;32m✓\033[0m'
    else
        echo -e '   current: \033[0;91m✗\033[0m'
    fi
}


document "get_release_diff_url" <<DOC
  Provides the latest github URL for commits that are in acceptance but not released.

  Here is an example URL https://github.com/chef/automate/compare/4ede7d8bdc20eb84bc803f0de5f8c5ac67709905...dda2a1c5116857ed4d9774e1b11879a6dd3aa596
DOC
function get_release_diff_url()
{
    install_if_missing core/jq-static jq
    install_if_missing core/curl curl
    current=$(curl https://packages.chef.io/manifests/current/automate/latest.json 2>/dev/null | jq -r '.git_sha')
    acceptance=$(curl https://packages.chef.io/manifests/acceptance/automate/latest.json 2>/dev/null | jq -r '.git_sha')

    echo "https://github.com/chef/automate/compare/$current...$acceptance"
}

document "generate_bldr_config" <<DOC
  Generate an updated bldr config.
DOC
function generate_bldr_config()
{
  (
    echo "Generating updated bldr config. It takes a couple of minutes. It is very slow on Docker for Mac"
    go run /src/tools/bldr-config-gen/main.go
  )
}

document "install_benchstat" <<DOC
  Install benchstat tool. Used to compare statistics about benchmarks.
DOC
function install_benchstat() {
  install_go_tool golang.org/x/perf/cmd/benchstat
}

document "install_gomock" <<DOC
  Install gomock tool. Used for creating mocks for client-side unit tests.
DOC
function install_gomock() {
  local go_mock_tools=(
    github.com/golang/mock/gomock
    github.com/golang/mock/mockgen
  )
  install_go_tool "${go_mock_tools[@]}"
}

document "install_go_tool" <<DOC
  Install the specified go tool(s).
  @(arg:*) The array of packages you wish to install.
  The default behavior is to install go tools with 'go install -v -mod=vendor'

  To attempt to build the binary statically set GO_BIN_STATIC=true

  To install tools using not included in the vendor you'll either need to
  include them and revendor or unset GO_LDFLAGS so that we don't use the
  module vendor directory when installing the binary to the GOBIN directory.
DOC
function install_go_tool() {
  install_if_missing "$(desired_golang_ident)" go

  local go_cmd="go install -v"

  # Add static linked flags if needed
  if [[ $GO_STATIC_BIN == true ]]; then
    go_static_linked_envs
    go_cmd+=" $GO_ARGS"
  fi

  for tool in "$@"; do
    go_tool=$(basename "$tool")
    if [[ ! -f "${GOBIN}/${go_tool}" ]]; then
      eval "$go_cmd $tool"
    fi
  done
}

document "revendor" <<DOC
  Revendor the go modules vendor directory
DOC
function revendor() {
  install_if_missing "$(desired_golang_ident)" go
  install_if_missing core/make make

  pushd /src || return 1
    make revendor
  popd || return 1
  setup_gobin
}
