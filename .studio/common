#!/bin/bash
#
# This file is the place we will put all the common functionality that
# two or more components share/require (ex. install elasticsearch)

document "run_studio_repo_health_checks" <<DOC
  Run repo health checks that are implemented in the .studio helpers
DOC

function run_studio_repo_health_checks() {
  echo "Checking for packages missing required metadata"
  verify_components_have_platform_config || return 1
}


function mockgen_debug() {
    echo "mockgen $*"
    mockgen "$@"
}

function compile_client_mocks() {
  install_gomock
  (
    set -e
    pushd /src/api/interservice || return 1
      mockgen_debug -source event/event.pb.go -destination event/event.pb.client_mock.go -package event -self_package github.com/chef/automate/api/interservice/event
      mockgen_debug -source authz/project.pb.go -destination authz/project.pb.client_mock.go -package authz -self_package github.com/chef/automate/api/interservice/authz
      mockgen_debug -source authz/authz.pb.go -destination authz/authz.pb.client_mock.go -package authz -self_package github.com/chef/automate/api/interservice/authz
      mockgen_debug -source authn/authenticate.pb.go -destination authn/authenticate.pb.client_mock.go -package authn -self_package github.com/chef/automate/api/interservice/authn
      mockgen_debug -source compliance/ingest/ingest/compliance.pb.go -destination compliance/ingest/ingest/compliance.pb.client_mock.go -package ingest -self_package github.com/chef/automate/api/interservice/compliance/ingest/ingest
      # NOTE(ssd) 2020-02-17: Use "reflect-mode" for cfgmgmt and event_feed because of
      # an issue with source-mode's ability to parse interfaces from the
      # grpc package. Details here:
      #
      # https://github.com/golang/mock/issues/156#issuecomment-586213812
      #
      mockgen_debug -destination event_feed/event_feed.pb.client_mock.go -package event_feed -self_package github.com/chef/automate/api/interservice/event_feed github.com/chef/automate/api/interservice/event_feed EventFeedServiceClient,EventFeedService_EventExportClient,EventFeedServiceServer,EventFeedService_EventExportServer
      mockgen_debug -destination cfgmgmt/service/cfgmgmt.pb.client_mock.go \
        -package service \
        -self_package \
        github.com/chef/automate/api/interservice/cfgmgmt/service \
        github.com/chef/automate/api/interservice/cfgmgmt/service \
        CfgMgmtServiceClient,CfgMgmtService_NodeExportClient,CfgMgmtService_ReportExportClient,CfgMgmtServiceServer,CfgMgmtService_NodeExportServer,CfgMgmtService_ReportExportServer
      mockgen_debug -source ingest/chef.pb.go -destination ingest/chef.pb.client_mock.go -package ingest -self_package github.com/chef/automate/api/interservice/ingest
      mockgen_debug -source nodemanager/manager/manager.pb.go -destination nodemanager/manager/manager.pb.client_mock.go -package manager -self_package github.com/chef/automate/api/interservice/nodemanager/manager
      mockgen_debug -source nodemanager/nodes/nodes.pb.go -destination nodemanager/nodes/nodes.pb.client_mock.go -package nodes -self_package github.com/chef/automate/api/interservice/nodemanager/nodes
    popd || return 1

    pushd /src/components/automate-gateway/gateway_mocks || return 1
      make
    popd || return 1

    # NOTE(ssd) 2020-03-23: The secrets-service only has external protobuf definitions
    pushd /src/api/external || return 1
      mockgen_debug -source secrets/secrets.pb.go -destination secrets/secrets.pb.client_mock.go -package secrets -self_package github.com/chef/automate/api/external/secrets
    popd || return 1
  )
}

document "verify_products_generation" <<DOC
  Verify that all products.meta and package.meta files have been compiled
DOC
function verify_products_generation() {
  install_if_missing core/git git

  deployment_generate || return $?

  git add .
  git diff --staged --exit-code --ignore-submodules=all
  result=$?

  if [ $result != 0 ]; then
    echo "Run 'deployment_generate' to fix this problem"
    return $result
  fi
}

document "link_component_bin" <<DOC
  Link binaries from COMPONENT/cmd/* to /hab/bin
DOC
function link_component_bin() {
  if [[ -z $1 ]]; then
      error "Missing component name argument to ${FUNCNAME[0]}"
      return 1
  fi
  local component=$1
  local component_dir=$component
  if [[ $component == "deployment-service" ]]; then
      component_dir="automate-deployment"
  fi
  for d in "components/$component_dir/cmd"/*/; do
    local cmd_bin
    cmd_bin=$(basename "$d")
    hab pkg binlink --force "$HAB_ORIGIN/$component" "$cmd_bin"
  done
  return 0
}

function desired_golang_ident() {
    echo "core/go/$(cat /src/GOLANG_VERSION)"
}

function verify_components_have_platform_config() {
  for component in components/*; do
    verify_component_has_platform_config "$component" || return 1
  done
}

function verify_component_has_platform_config() {
  if [[ -z $1 ]]; then
      error "Missing component name argument to ${FUNCNAME[0]}"
      return 1
  fi

  install_if_missing core/jq-static jq

  local component_dir=$1
  local component_name; component_name="\"$(basename "$component_dir")\""

  local hab_hooks; hab_hooks="$component_dir/habitat/hooks"

  if [[ ! -d "$hab_hooks" ]]; then
    echo "SKIP: $component_name has no hab hooks, platform config not needed"
    return 0
  fi

  if ! grep -q pg-helper "$hab_hooks"/*; then
    echo "SKIP: $component_name doesn't use pg-helper, platform config not needed"
    return 0
  fi


  local package_meta; package_meta="$component_dir"/package.meta

  if [[ ! -f "$package_meta" ]]; then
    error "$component_name uses \`pg-helper\`, but doesn't have a package metadata file"
    error "Create the $package_meta file and rebuild the generated files in automate-deployment"
    error "for more information, consult the ProductMetadata documentation: https://godoc.org/github.com/chef/automate/lib/product"
    return 1
  fi

  if jq '.uses_platform_scaffolding | type' "$package_meta" | grep -q null; then
    error "$component_name uses \`pg-helper\` in habitat hooks but doesn't specify \`uses_platform_scaffolding\` in package.meta"
    error "Set \"uses_platform_scaffolding\" to \`true\` or \`false\` in $package_meta"
    error "for more information, consult the ProductMetadata documentation: https://godoc.org/github.com/chef/automate/lib/product"
    return 1
  fi

  echo "OK:   $component_name platform config integration looks correct"
  return 0
}

function start_sup() {
  hab svc status 2>/dev/null 1>&2
  [[ $? == 0 ]] && return
  mkdir -p /hab/sup/default

  log_line "Launching the Habitat Supervisor in the background..."
  # We can change sec to ns when everyone is using gnu date
  (hab sup run "$@" | while read -r line; do echo "[$(date -u -Isec)]" "$line"; done > /hab/sup/default/sup.log) &
  while ! hab svc status >/dev/null 2>&1; do
    sleep 1
  done
}

# Verify if a service is up. (no need to add to 'describe')
#
# @(arg:1) PKG_IDENT A Habitat package identifier (ex: core/redis)
#
# Example: hab_svc_up afiune/config-mgmt-service
function hab_svc_up() {
  hab sup status $1 2>/dev/null | tail -1 | awk '{print $3}' | grep -q up
}

document "wait_for_svc_to_stop" <<DOC
  Helper function to wait for a Habitat service (hab svc) to be stopped by the Habitat Supervisor.

  @(arg:1) PKG_IDENT A Habitat package identifier (ex: core/redis)
  @(arg:2) Number of seconds to wait before returning 1. (default: 30 seconds)

  Example: Stop the automate-gateway service and wait for it to be down
  ---------------------------------------------------------------------
  hab stop afiune/automate-gateway
  wait_for_svc_to_stop afiune/automate-gateway
DOC
function wait_for_svc_to_stop() {
  local SECONDS_WAITING=${2:-30}
  local COUNTER=0
  hab stop $1
  while hab_svc_up $1; do
    echo -n ".";
    [ $COUNTER -ge $SECONDS_WAITING ] && return 1
    COUNTER=$((COUNTER+1))
    sleep 1;
  done;
}

document "build" <<EOF
  Simple wrapper around /hab/bin/build
EOF
function build() {
  local hab_build

  # Support for hab v.0.63.0
  if [ -f /bin/build ]; then
    hab_build=/bin/build
  fi

  # Support prior hab versions
  if [ -f /hab/bin/build ]; then
    hab_build=/hab/bin/build
  fi

  if [ -z "$hab_build" ]; then
    exit_with "Hab build binary not found. Verify the 'build' wrapper inside the studio." 22
  else
    HAB_FEAT_IGNORE_LOCAL=true HAB_BLDR_CHANNEL=${HAB_BLDR_CHANNEL:-dev} $hab_build "$@"
  fi
}

document "rebuild" <<EOF
  Simple wrapper around build that will attempt
  to build with NO_INSTALL_DEPS speeding up the
  build time
EOF
function rebuild() {
  output=$(set -o pipefail; NO_INSTALL_DEPS=1 build "$@" | tee /dev/stderr)
  err=$?
  if [[ $err != 0 ]]
  then
    echo $output | grep "Resolving '.*' failed" > /dev/null
    if [[ $? == 0 ]]
    then
      build "$@"
      err=$?
    fi
  fi

  if [[ $err == 0 ]]
  then
      chef-automate upgrade run
      err=$?
  fi

  return $err
}

function verify_component() {
  if [[ "$1" == "deployment-service" || "$1" == "api" || "$1" == "config" ]]; then
    return 0
  fi
  if [[ ! -d /src/components/$1 ]]; then
    error "Component '$1' not found.\\n"
    display_available_components
    return 1
  fi
  return 0
}

function display_available_components() {
  log_line "Available components:"
  ls -1 /src/components | awk '{print "* "$1}'
}

function display_valid_protobuf_targets() {
  log_line "Valid targets:"
  echo "  * api"
  echo "  * config"
  ls -1 /src/components/*/scripts/grpc.sh | awk -F/ '{ print "  * "$4 }'
}

document "generate_dev_root_ca" <<DOC
Create the key, certificate, and revocation list for the Automate root CA used in dev. These
files live in dev/certs.

Note
----
The files generated by this function are not to be used for any purpose other than testing in
the dev environment. Private keys are checked into git.

DOC
function generate_dev_root_ca() {
    install_if_missing core/certstrap certstrap
    go run /src/tools/dev-cert-gen/main.go --regen-ca
}

document "generate_dev_service_cert" <<DOC
Create a certificate and key pair for a service. Use this function when creating a new
service that will use mutual tls for grpc. These files live in dev/certs.

Note
----
The files generated by this function are not to be used for any purpose other than testing in
the dev environment. Private keys are checked into git.

Example:
----------------
generate_dev_service_cert foo-service
DOC
function generate_dev_service_cert() {
    install_if_missing core/certstrap certstrap
    go run /src/tools/dev-cert-gen/main.go "$@"
}

_component_auto_complete()
{
    local cur opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    opts="api config license"
    opts="$opts $(ls /src/components/ | cut -d/ -f4 | tr "\\n" " ")"

    if [[ ${cur} == * ]]; then
        COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
        return 0
    fi
}

# Quick helper around service_running to print a message if the service is NOT running
function check_service_running_or_exit() {
  if ! service_running "$1"; then
    error "The component '$1' must be already running."
    return 1
  fi
}

document "service_running" <<DOC
  Check if either HAB_ORIGIN/\$1 or chef/\$1 service is up
DOC
service_running() {
  local service=${1:?"service_running SERVICENAME"}
  # Check for our own origin
  hab_svc_up "$HAB_ORIGIN/$service"
  local local_pkg=$?
  # Check if we have packages installed from the Depot (HAB_ORIGIN:chef)
  hab_svc_up "chef/$service"
  local depot_pkg=$?

  [ $local_pkg -eq 0 ] || [ $depot_pkg -eq 0 ] && return 0
  return 1
}

document "build_all_changed_components" <<DOC
  build all the changed components

  arguments: if none will build all modified components else a list of components to build only if they were modified.

  Example:
  ----------------
  build_all_changed_components automate-gateway automate-deployment
DOC
function build_all_changed_components() {
  local whitelist=$*

  install_if_missing core/git git
  install_if_missing core/ruby ruby
  hab pkg binlink core/ruby gem
  gem install toml
  hab pkg install core/coreutils >/dev/null
  mkdir -p /usr/bin
  ln -sv "$(hab pkg path core/coreutils)/bin/env" /usr/bin/env 2>/dev/null

  pushd /src >/dev/null
    for component in $(./scripts/changed_components.rb)
    do
      if [[ -n "$whitelist" ]]; then
        if [[ "$whitelist" == *"$(basename "$component")"* ]]; then
          log_line "Building $component"
          if ! build "$component"; then
            popd
            return 1
          fi
        fi
      else
        log_line "Building $component"
        if ! build "$component"; then
          popd
          return 1
        fi
      fi
    done
  popd >/dev/null
}

document "enable_desktop" <<DOC
  Enable the Desktop view
DOC
function enable_desktop() {
  check_if_deployinate_started || return 1
  printf "[deployment.v1.svc]\n products = [\"desktop\"]\n" > /tmp/enable_desktop_patch.toml
  chef-automate config patch /tmp/enable_desktop_patch.toml
}
