#!/bin/bash
# shellcheck disable=SC2154

document "start_applications_service" <<DOC
  Start the applications-service
DOC
function start_applications_service() {
  start_deployment_service
  chef-automate dev deploy-some --with-deps "$(app_service_origin)/applications-service"
}

document "start_applications_service_deps" <<DOC
  Start the applications service's deps so integration tests can run
DOC
function start_applications_service_deps() {
  start_deployment_service
  chef-automate dev deploy-some --with-deps "$(app_service_origin)/applications-service"
  chef-automate dev remove-some "$(app_service_origin)/applications-service"
}


document "applications_list_services" <<DOC
  List all the applications-service services
DOC
function applications_list_services() {
  install_if_missing core/grpcurl grpcurl
  chef-automate dev grpcurl applications-service -- list "$1"
}

document "applications_grpcurl" <<DOC
  Sends a grpcurl request to the applications-service
DOC
function applications_grpcurl() {
  install_if_missing core/grpcurl grpcurl
  chef-automate dev grpcurl applications-service -- "$@"
}

function applications_get_service_groups() {
  applications_grpcurl chef.automate.api.applications.ApplicationsService.GetServiceGroups
}
function applications_get_service_groups_ok() {
  applications_grpcurl \
      chef.automate.api.applications.ApplicationsService.GetServiceGroups \
      -d '{
        "filters":[
          {"type":"STATUS", "text":"OK"}
        ]
      }'
}
function applications_get_service_groups_warning() {
  applications_grpcurl \
      chef.automate.api.applications.ApplicationsService.GetServiceGroups \
      -d '{
        "filters":[
          {"type":"STATUS", "text":"WARNING"}
        ]
      }'
}
function applications_get_service_groups_critical() {
  applications_grpcurl \
      chef.automate.api.applications.ApplicationsService.GetServiceGroups \
      -d '{
        "filters":[
          {"type":"STATUS", "text":"CRITICAL"}
        ]
      }'
}
function applications_get_service_groups_unknown() {
  applications_grpcurl \
      chef.automate.api.applications.ApplicationsService.GetServiceGroups \
      -d '{
        "filters":[
          {"type":"STATUS", "text":"UNKNOWN"}
        ]
      }'
}

# Run benchmarks for the applications-service
document "applications_benchmarks" <<DOC
  Runs benchmarks for the applications-service.
DOC
function applications_benchmarks() {
  check_if_deployinate_started || return 1

  (
    install_if_missing core/git git

    local tmp_txt=/tmp/new.txt
    local results_txt=/src/benchmarks/applications-service/txt/new.txt
    local results_html=/src/benchmarks/applications-service/html/new.html

    log_line "Running applications-service benchmark. (temporarily stored at $(yellow $tmp_txt))"
    log_line "$(yellow "This might take a while...")"
    cd components/applications-service || return 1
    A2_SVC_NAME="applications-service" A2_SVC_PATH="/hab/svc/applications-service" go_test \
      ./... \
      -bench=Benchmark \
      -benchmem \
      -count=5 2>&1 | tee $tmp_txt

    log_line "Saving benchmark results at $(green $results_txt)"
    grep Benchmark $tmp_txt > $results_txt
    rm $tmp_txt

    # TODO @afiune When we save this files in the historical repo or somewhere else
    # we will be able to compare master vs our new changes (PRs)

    log_line "Using benchstat tool to compute the results. ('benchstat new.txt')"
    install_benchstat
    benchstat $results_txt

    log_line "Generating HTML of the results at $(green $results_html)"
    benchstat -html $results_txt > $results_html

    rename_benchmark_files "$@"
  )
}

# This function assumes you have a new.txt and new.html files generated
# @afiune maybe we can make this function flexible for other components
function rename_benchmark_files() {
  local results_txt=/src/benchmarks/applications-service/txt/new.txt
  local results_html=/src/benchmarks/applications-service/html/new.html
  local name

  # check if files does exist
  if [[ ! -f $results_txt || ! -f $results_html ]]; then
    log_error "Benchmark files not found. Run '$(yellow applications_benchmark)'."
    return 1
  fi

  log_line "Renaming the generated benchmark files: \\n
              $(yellow TXT:)  $results_txt
              $(yellow HTML:) $results_html \\n"

  if [ -z "$1" ]; then
    log_line "Enter the new name based on the pull request opened. \\n
              $(yellow Example:) For the following PR https://github.com/chef/automate/pull/510
                       The suggested name would be '$(green PR_510)'\\n"
    echo -en "              $(yellow "New name:") "
    read -r name
  else
    name=$1
  fi


  new_results_txt=/src/benchmarks/applications-service/txt/${name}.txt
  new_results_html=/src/benchmarks/applications-service/html/${name}.html
  mv "$results_txt" "$new_results_txt"
  mv "$results_html" "$new_results_html"

  log_line "New benchmark files: \\n
              $(yellow TXT:)  $new_results_txt
              $(yellow HTML:) $new_results_html \\n"
}

# Run Integration tests for the applications-service
document "applications_integration" <<DOC
  Runs the integration tests for the applications-service.
DOC
function applications_integration() {
  check_if_deployinate_started || return 1

  # Go based integration tests
  A2_SVC_NAME="applications-service" A2_SVC_PATH="/hab/svc/applications-service" go_test \
	  "github.com/chef/automate/components/applications-service/integration_test" \
	  -bench=. -benchmem -v
}

document "applications_publish_raw_message" <<DOC
  Publish a raw message to the Internal NATS Server (event-service)

  Example: Publish a hello world message
  --------------------------------------
  # applications_publish_raw_message "Hello World!"
DOC
function applications_publish_raw_message() {
  local message
  message="${1-dummy-ping-message}"

  install_if_missing "$(app_service_origin)/applications-service" applications-publisher
  applications-publisher --internal-nats --port 10140 --raw-message "$message"
}

document "applications_publish_raw_message_via_gw" <<DOC
  Publish a raw message to the External NATS Server (event-gateway)

  Example: Publish a hello world message
  --------------------------------------
  # applications_publish_raw_message_via_gw "Hello World!"
DOC
function applications_publish_raw_message_via_gw() {
  install_if_missing "$(app_service_origin)/applications-service" applications-publisher

  if ! get_admin_token; then
    log_error "cannot publish application message without admin token"
    return 1
  fi

  local message
  message="${1-dummy-ping-message}"
  applications-publisher --auth-token "$(get_admin_token)" --raw-message "$message"
}

document "applications_publish_supervisor_message_via_gw" <<DOC
  Publish a supervisor message to the External NATS Server (event-gateway)

  Example 1: Publish a default supervisor message
  --------------------------------------
  # applications_publish_supervisor_message_via_gw

  Example 2: Publish a custom supervisor message
  --------------------------------------
  # applications_publish_supervisor_message_via_gw --name foo --group bar --health 2
DOC
function applications_publish_supervisor_message_via_gw() {
  install_if_missing "$(app_service_origin)/applications-service" applications-publisher

  if ! get_admin_token; then
    log_error "cannot publish application message without admin token"
    return 1
  fi

  applications-publisher --auth-token "$(get_admin_token)" "$@"
}

document "applications_publish_supervisor_message" <<DOC
  Publish a supervisor message to the Internal NATS Server (event-service)

  Example 1: Publish a default supervisor message
  --------------------------------------
  # applications_publish_supervisor_message

  Example 2: Publish a custom supervisor message
  --------------------------------------
  # applications_publish_supervisor_message --name foo --group bar --health 2
DOC
function applications_publish_supervisor_message() {
  install_if_missing "$(app_service_origin)/applications-service" applications-publisher
  applications-publisher --internal-nats --port 10140 "$@"
}

# TODO: Delete when slice 1 is done
document "applications_populate_database" <<DOC
  Populates the database by publishing messages to power the mockups.
DOC
function applications_populate_database() {
  install_if_missing core/util-linux uuidgen

  for _ in $(seq 1 12); do
    applications_publish_supervisor_message --name nginx --group "default"\
      --origin custom --version "1.0.1" --release "20190115184823" --health 2\
      --sup-id "$(uuidgen)" --site "testsite" --channel "stable" \
      --application "bldr-cache" --environment "qa"
  done

  for _ in $(seq 1 11); do
    applications_publish_supervisor_message --name "billing-svc" --group "default"\
      --origin custom --version "1.3.4" --release "20190115182382" --health 2\
      --sup-id "$(uuidgen)" --site "testsite" --channel "stable" \
      --application "billing-backend" --environment "qa"
  done

  # 40 Critical
  for _ in $(seq 1 40); do
    applications_publish_supervisor_message --name nginx --group default \
      --origin custom --version "2.0.0" --release "20190115189976" --health 2\
      --sup-id "$(uuidgen)" --site "testsite" --channel "unstable"
  done
  # 10 OK
  for _ in $(seq 41 50); do
    applications_publish_supervisor_message --name nginx --group dev\
      --origin custom --version "2.0.0" --release "20190115189976" --health 0\
      --sup-id "$(uuidgen)" --site "testsite" --channel "unstable"
  done

  # 40 Critical
  for _ in $(seq 1 40); do
    applications_publish_supervisor_message --name redis --group default\
      --origin custom --version "1.0.1" --release "20190115189830" --health 2\
      --sup-id "$(uuidgen)" --site "default" --channel "stable"
  done
  # 10 OK
  for _ in $(seq 41 50); do
    applications_publish_supervisor_message --name redis --group default \
      --origin custom --version "1.0.1" --release "20190115189830" --health 0\
      --sup-id "$(uuidgen)" --site "default" --channel "stable"
  done

  # Sample-app
  for _ in $(seq 1 3); do
    applications_publish_supervisor_message --name "sample-app" --group "default"\
      --origin custom --version "0.0.1" --release "20190115184890" --health 0\
      --sup-id "$(uuidgen)" --site "default" --channel "stable"
  done
  for _ in $(seq 4 5); do
    applications_publish_supervisor_message --name "sample-app" --group "default"\
      --origin custom --version "0.0.1" --release "20190115184890" --health 1\
      --sup-id "$(uuidgen)" --site "default" --channel "stable"
  done

  for _ in $(seq 1 4); do
    applications_publish_supervisor_message --name "sample-app" --group "test"\
      --origin custom --version "0.0.1" --release "20190115184823" --health 0\
      --sup-id "$(uuidgen)" --site "testsite" --channel "stable"
  done
  applications_publish_supervisor_message --name "sample-app" --group "test"\
    --origin custom --version "0.0.1" --release "20190115184823" --health 1\
    --sup-id "$(uuidgen)" --site "testsite" --channel "stable"

  # Acceptance Unknown
  applications_publish_supervisor_message --name "sample-app" --group "default"\
    --origin custom --version "0.0.1" --health 3 --sup-id "$(uuidgen)" \
    --application "sample-app" --environment "acceptance"

  for _ in $(seq 1 120); do
    applications_publish_supervisor_message --name "mobile-api-frontend" --group "default"\
      --origin custom --version "2.3" --release "20190115184823" --health 0\
      --sup-id "$(uuidgen)" \
      --site "jp" --application "mobile-app-api" --environment "production"
  done

  for _ in $(seq 121 130); do
    applications_publish_supervisor_message --name "mobile-api-frontend" --group "default"\
      --origin custom --version "1.9.2" --release "20190115181111" --health 0\
      --sup-id "$(uuidgen)" \
      --site "us-west-1" --application "mobile-app-api" --environment "production"
  done

  applications_publish_supervisor_message --name "mobile-api-photos" --group "default"\
    --origin custom --version "2.0.5" --release "20190115181118" --health 0\
    --sup-id "$(uuidgen)" \
    --site "us-west-1" --application "mobile-app-api" --environment "production"

  applications_publish_supervisor_message --name "mobile-api-database" --group "default"\
    --origin custom --version "2.0.8" --release "20190115181199" --health 0\
    --sup-id "$(uuidgen)" \
    --site "us-west-1" --application "mobile-app-api" --environment "production"

  applications_publish_supervisor_message --name "mobile-api-auth" --group "default"\
    --origin custom --version "2.0.8" --release "20190115181192" --health 0\
    --sup-id "$(uuidgen)" \
    --site "us-west-1" --application "mobile-app-api" --environment "production"

  applications_publish_supervisor_message --name "mobile-api-frontend" --group "default"\
    --origin custom --version "1.9.2" --release "20190115181111" --health 0\
    --sup-id "$(uuidgen)" \
    --site "us-west-1" --application "mobile-app-api" --environment "qa"

  applications_publish_supervisor_message --name "mobile-api-photos" --group "default"\
    --origin custom --version "2.0.5" --release "20190115181118" --health 0\
    --sup-id "$(uuidgen)" \
    --site "us-west-1" --application "mobile-app-api" --environment "qa"

  applications_publish_supervisor_message --name "mobile-api-database" --group "default"\
    --origin custom --version "2.0.8" --release "20190115181199" --health 0\
    --sup-id "$(uuidgen)" \
    --site "us-west-1" --application "mobile-app-api" --environment "qa"

  applications_publish_supervisor_message --name "mobile-api-auth" --group "default"\
    --origin custom --version "2.0.8" --release "20190115181192" --health 2\
    --sup-id "$(uuidgen)" \
    --site "us-west-1" --application "mobile-app-api" --environment "qa"

  ##
  # Service groups with a larger set of health statuses. This excercises some
  # filtering cases, such as whether a service group with 1 service in critical
  # and 1 warning shows up when filtering for warning.
  for health_code in $(seq 0 3); do
    applications_publish_supervisor_message --name "pos-terminal" --group "default" \
      --origin custom --version "2.3.4" --release "20190115181111" --health "$health_code" \
      --sup-id "$(uuidgen)" \
      --application "pos" --environment "production-us-east" --site "ny-123"
  done

  for health_code in 0 1 3 ; do
    applications_publish_supervisor_message --name "pos-terminal" --group "us-east-2" \
      --origin custom --version "2.3.4" --release "20190115181111" --health "$health_code" \
      --sup-id "$(uuidgen)" \
      --application "pos" --environment "production-us-east" --site "ny-789"
  done

  # We have a custom visual treatment when application, environment, or channel
  # are blank. Create one of each
  applications_publish_supervisor_message --name "blank-app" --group "default"\
    --origin custom --version "0.0.1" --release "20190115184890" --health 1\
    --sup-id "$(uuidgen)" --site "default" --channel "stable" \
    --application ""

  applications_publish_supervisor_message --name "blank-env" --group "default"\
    --origin custom --version "0.0.1" --release "20190115184890" --health 1\
    --sup-id "$(uuidgen)" --site "default" --channel "stable" \
    --environment ""

  applications_publish_supervisor_message --name "blank-channel" --group "default"\
    --origin custom --version "0.0.1" --release "20190115184890" --health 1\
    --sup-id "$(uuidgen)" --site "default" --channel ""

  ##
  # Make enough service groups to force pagination. We need at least 26 groups
  # to force pagination to happen. We also don't want to have to remember to
  # update this part of the code if we modify the stuff above. So we just make
  # 26 here and pagination will always happen.
  for i in $(seq 26); do
    applications_publish_supervisor_message --name "example$i" --group "default"\
      --origin mycorp --version "0.0.1" --health 0 --sup-id "$(uuidgen)" \
      --application "microservice-app" --environment "qa" --site "cloud-oregon"
  done
}

function app_service_origin() {
  if [[ -d "/hab/pkgs/${HAB_ORIGIN}/applications-service" ]]; then
    echo "$HAB_ORIGIN"
  else
    echo "chef"
  fi
}
