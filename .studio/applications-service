#!/bin/bash
# shellcheck disable=SC2154

document "start_applications_service" <<DOC
  Build and start the local applications-service
DOC
function start_applications_service() {
  build components/applications-service
  start_deployment_service
  chef-automate dev deploy-some --with-deps "$(app_service_origin)/applications-service"
}

document "applications_list_services" <<DOC
  List all the applications-service services
DOC
function applications_list_services() {
  install_if_missing core/grpcurl grpcurl
  chef-automate dev grpcurl applications-service -- list "$1"
}

document "applications_grpcurl" <<DOC
  Sends a grpcurl request to the applications-service
DOC
function applications_grpcurl() {
  install_if_missing core/grpcurl grpcurl
  chef-automate dev grpcurl applications-service -- "$@"
}

function applications_get_service_groups() {
  applications_grpcurl chef.automate.api.applications.ApplicationsService.GetServiceGroups
}
function applications_get_service_groups_ok() {
  applications_grpcurl \
      chef.automate.api.applications.ApplicationsService.GetServiceGroups \
      -d '{
        "filters":[
          {"type":"STATUS", "text":"OK"}
        ]
      }'
}
function applications_get_service_groups_warning() {
  applications_grpcurl \
      chef.automate.api.applications.ApplicationsService.GetServiceGroups \
      -d '{
        "filters":[
          {"type":"STATUS", "text":"WARNING"}
        ]
      }'
}
function applications_get_service_groups_critical() {
  applications_grpcurl \
      chef.automate.api.applications.ApplicationsService.GetServiceGroups \
      -d '{
        "filters":[
          {"type":"STATUS", "text":"CRITICAL"}
        ]
      }'
}
function applications_get_service_groups_unknown() {
  applications_grpcurl \
      chef.automate.api.applications.ApplicationsService.GetServiceGroups \
      -d '{
        "filters":[
          {"type":"STATUS", "text":"UNKNOWN"}
        ]
      }'
}

# Run Integration tests for the applications-service
document "applications_integration" <<DOC
  Runs the integration tests for the applications-service.
DOC
function applications_integration() {
  check_if_deployinate_started || return 1

  # Go based integration tests
  A2_SVC_NAME="applications-service" A2_SVC_PATH="/hab/svc/applications-service" go_test "github.com/chef/automate/components/applications-service/integration_test" -v
}

document "applications_publish_raw_message" <<DOC
  Publish a raw message to the Internal NATS Server (event-service)

  Example: Publish a hello world message
  --------------------------------------
  # applications_publish_raw_message "Hello World!"
DOC
function applications_publish_raw_message() {
  local message
  message="${1-dummy-ping-message}"

  install_if_missing "$(app_service_origin)/applications-service" applications-publisher
  applications-publisher --internal-nats --port 10140 --raw-message "$message"
}

document "applications_publish_raw_message_via_gw" <<DOC
  Publish a raw message to the External NATS Server (event-gateway)

  Example: Publish a hello world message
  --------------------------------------
  # applications_publish_raw_message_via_gw "Hello World!"
DOC
function applications_publish_raw_message_via_gw() {
  install_if_missing "$(app_service_origin)/applications-service" applications-publisher

  if ! get_admin_token; then
    log_error "cannot publish application message without admin token"
    return 1
  fi

  local message
  message="${1-dummy-ping-message}"
  applications-publisher --auth-token "$(get_admin_token)" --raw-message "$message"
}

document "applications_publish_supervisor_message_via_gw" <<DOC
  Publish a supervisor message to the External NATS Server (event-gateway)

  Example 1: Publish a default supervisor message
  --------------------------------------
  # applications_publish_supervisor_message_via_gw

  Example 2: Publish a custom supervisor message
  --------------------------------------
  # applications_publish_supervisor_message_via_gw --name foo --group bar --health 2
DOC
function applications_publish_supervisor_message_via_gw() {
  install_if_missing "$(app_service_origin)/applications-service" applications-publisher

  if ! get_admin_token; then
    log_error "cannot publish application message without admin token"
    return 1
  fi

  applications-publisher --auth-token "$(get_admin_token)" "$@"
}

document "applications_publish_supervisor_message" <<DOC
  Publish a supervisor message to the Internal NATS Server (event-service)

  Example 1: Publish a default supervisor message
  --------------------------------------
  # applications_publish_supervisor_message

  Example 2: Publish a custom supervisor message
  --------------------------------------
  # applications_publish_supervisor_message --name foo --group bar --health 2
DOC
function applications_publish_supervisor_message() {
  install_if_missing "$(app_service_origin)/applications-service" applications-publisher
  applications-publisher --internal-nats --port 10140 "$@"
}

# TODO: Delete when slice 1 is done
document "applications_populate_database" <<DOC
  Populates the database by publishing messages to power the mockups.
DOC
function applications_populate_database() {
  install_if_missing core/util-linux uuidgen

  for i in $(seq 1 12); do
    applications_publish_supervisor_message --name nginx --group "kansas-prod"\
      --origin custom --version "1.0.1" --release "20190115184823" --health 2\
      --sup-id "$(uuidgen)" --site "testsite" --channel "stable"
  done

  for i in $(seq 1 11); do
    applications_publish_supervisor_message --name "billing-svc" --group "kansas-prod"\
      --origin custom --version "1.3.4" --release "20190115182382" --health 2\
      --sup-id "$(uuidgen)" --site "testsite" --channel "stable"
  done

  # 40 Critical
  for i in $(seq 1 40); do
    applications_publish_supervisor_message --name nginx --group dev\
      --origin custom --version "2.0.0" --release "20190115189976" --health 2\
      --sup-id "$(uuidgen)" --site "testsite" --channel "unstable"
  done
  # 10 OK
  for i in $(seq 41 50); do
    applications_publish_supervisor_message --name nginx --group dev\
      --origin custom --version "2.0.0" --release "20190115189976" --health 0\
      --sup-id "$(uuidgen)" --site "testsite" --channel "unstable"
  done

  # 40 Critical
  for i in $(seq 1 40); do
    applications_publish_supervisor_message --name redis --group default\
      --origin custom --version "1.0.1" --release "20190115189830" --health 2\
      --sup-id "$(uuidgen)" --site "default" --channel "stable"
  done
  # 10 OK
  for i in $(seq 41 50); do
    applications_publish_supervisor_message --name redis --group default\
      --origin custom --version "1.0.1" --release "20190115189830" --health 0\
      --sup-id "$(uuidgen)" --site "default" --channel "stable"
  done

  # Sample-app
  for i in $(seq 1 3); do
    applications_publish_supervisor_message --name "sample-app" --group "default"\
      --origin custom --version "0.0.1" --release "20190115184890" --health 0\
      --sup-id "$(uuidgen)" --site "default" --channel "stable"
  done
  for i in $(seq 4 5); do
    applications_publish_supervisor_message --name "sample-app" --group "default"\
      --origin custom --version "0.0.1" --release "20190115184890" --health 1\
      --sup-id "$(uuidgen)" --site "default" --channel "stable"
  done

  for i in $(seq 1 4); do
    applications_publish_supervisor_message --name "sample-app" --group "test"\
      --origin custom --version "0.0.1" --release "20190115184823" --health 0\
      --sup-id "$(uuidgen)" --site "testsite" --channel "stable"
  done
  applications_publish_supervisor_message --name "sample-app" --group "test"\
    --origin custom --version "0.0.1" --release "20190115184823" --health 1\
    --sup-id "$(uuidgen)" --site "testsite" --channel "stable"

  # Acceptance Unknown
  applications_publish_supervisor_message --name "sample-app" --group "acceptance"\
    --origin custom --version "0.0.1" --health 3 --status 2 --sup-id "$(uuidgen)"

  # postgres.japan-prod
  for i in $(seq 1 120); do
    applications_publish_supervisor_message --name "postgres" --group "japan-prod"\
      --origin custom --version "2.3" --release "20190115184823" --health 0\
      --sup-id "$(uuidgen)"
  done

  # postgres.us-west1-prod (different supervisors than the postgres db above)
  for i in $(seq 121 130); do
    applications_publish_supervisor_message --name "postgres" --group "us-west1-prod"\
      --origin custom --version "1.9.2" --release "20190115181111" --health 0\
      --sup-id "$(uuidgen)"
  done
}

function app_service_origin() {
  if [[ -d "/hab/pkgs/${HAB_ORIGIN}/applications-service" ]]; then
    echo "$HAB_ORIGIN"
  else
    echo "chef"
  fi
}

