#!/bin/bash
#
# Helper methods specific for the secrets-service

document "secrets_integration" <<DOC
  Runs the integration tests for the secrets-service

  automate-postgresql and secrets-service should be running before this is started

  1.) start_deployment_service
  2.) chef-automate dev deploy-some chef/secrets-service --with-deps
  3.) secrets_integration
  or
  1.) start_all_services
  2.) secrets_integration

  Below is an example of running a single test
  1.) egw
  2.) go_test -v github.com/chef/automate/components/secrets-service/integration_test -run TestListSecretOrder
DOC
function secrets_integration() {
  go_test "github.com/chef/automate/components/secrets-service/integration_test"
}

document "secrets_list_secrets" <<DOC
  List all the secrets
DOC
function secrets_list_services() {
  grpcurl --insecure \
    -cert /hab/svc/secrets-service/config/service.crt \
    -key /hab/svc/secrets-service/config/service.key \
    localhost:10131 list chef.automate.api.secrets.SecretsService
}

document "secrets_list_secrets" <<DOC
  List all the secrets
DOC
function secrets_list_secrets() {
  grpcurl --insecure \
    -cert /hab/svc/secrets-service/config/service.crt \
    -key /hab/svc/secrets-service/config/service.key \
    localhost:10131 chef.automate.api.secrets.SecretsService.List
}

document "secrets_create_secret" <<DOC
  Create an ssh secret with the passed in username and password

  arg 1 - username optional
  art 2 - password optional
DOC
function secrets_create_secret() {
  local username=${1:-"default"}
  local password=${2:-"super_secret"}

  echo '{"name": "bob", "type": "service_now", "data": [{"key": "username", "value": "'$username'"}, {"key": "password", "value": "'$password'"}] }' | grpcurl --insecure \
    -cert /hab/svc/secrets-service/config/service.crt \
    -key /hab/svc/secrets-service/config/service.key \
     -d @ localhost:10131 \
     chef.automate.api.secrets.SecretsService.Create
}

document "secrets_update_secret" <<DOC
  Update the username and password for one secret with the given ID

  arg 1 - ID required
  arg 2 - username optional
  art 3 - password optional
DOC
function secrets_update_secret() {
  [[ "$1" == "" ]] && error "Missing ID argument; try 'describe ${FUNCNAME[0]}'" && return 1
  local username=${2:-"default"}
  local password=${3:-"super_secret"}

  echo '{"id": "'$1'", "name": "bob", "type": "service_now", "data": [{"key": "username", "value": "'$username'"}, {"key": "password", "value": "'$password'"}] }' | grpcurl --insecure \
    -cert /hab/svc/secrets-service/config/service.crt \
    -key /hab/svc/secrets-service/config/service.key \
     -d @ localhost:10131 \
     chef.automate.api.secrets.SecretsService.Update
}

document "secrets_delete_secret" <<DOC
  Delete one secret with the given ID

  arg 1 - ID required
DOC
function secrets_delete_secret() {
  [[ "$1" == "" ]] && error "Missing ID argument; try 'describe ${FUNCNAME[0]}'" && return 1

  echo '{"id": "'$1'"}' | grpcurl --insecure \
    -cert /hab/svc/secrets-service/config/service.crt \
    -key /hab/svc/secrets-service/config/service.key \
     -d @ localhost:10131 \
     chef.automate.api.secrets.SecretsService.Delete
}

document "secrets_read_secret" <<DOC
  Read one secret with the given ID

  arg 1 - ID required
DOC
function secrets_read_secret() {
  [[ "$1" == "" ]] && error "Missing ID argument; try 'describe ${FUNCNAME[0]}'" && return 1

  echo '{"id": "'$1'"}' | grpcurl --insecure \
    -cert /hab/svc/secrets-service/config/service.crt \
    -key /hab/svc/secrets-service/config/service.key \
     -d @ localhost:10131 \
     chef.automate.api.secrets.SecretsService.Read
}

document "secrets_psql" <<DOC
  Enter psql with the secrets-service database
DOC
function secrets_psql() {
  chef-automate dev psql secrets_service
}

document "secrets_list_secrets_from_db" <<DOC
  Read all secrets directly from the database
DOC
function secrets_list_secrets_from_db() {
  local DBNAME
  DBNAME=$(grep -w database /src/components/secrets-service/habitat/default.toml | cut -f2 -d\")
  install_if_missing core/postgresql psql
  psql "$DBNAME" -c 'SELECT * FROM s_secrets'
}

############## ############## ############## ##############
#Â Migration helper methods
#
# There are two ways to test the migration, the first one consist by starting only
# the database, restoring the A1 DB and starting the secrets-service.
#
# 1) Start the deployment service:
#    => start_deployment_service
#
# 2) Start postgresql:
#    => chef-automate dev deploy-some chef/automate-postgresql
#
# 3) Restore A1 data:
#    => secrets_reload_A1_data
# 3.1) Or; Restore A2 data:
#    => secrets_reload_A2_data
#
# 4) Start the secrets-service
#    => chef-automate dev deploy-some chef/secrets-service --with-deps
#
# The second one is by starting the secrets-service with its dependencies and then
# running the helper method:
#    => start_deployment_service
#    => chef-automate dev deploy-some chef/secrets-service --with-deps
#  To test A1 migration:
#    => secrets_test_A1_migration
#  To test A2 migration:
#    => secrets_test_A2_migration
#
document "secrets_reload_A1_data" <<DOC
  Reload the A1 Data for the secrets-service (requires: postgresql)
DOC
function secrets_reload_A1_data() {
  local DBNAME=delivery
  local DUMP_DIR=/tmp
  local DUMP_NAME=a1-pg-dump.sql
  local DUMP_PATH=${DUMP_DIR}/${DUMP_NAME}
  local SECRETS_KEY_PATH="/hab/svc/secrets-service/data/secrets_key"

  check_service_running_or_exit automate-postgresql || return 1

  if [[ ! -f $DUMP_PATH ]]; then
    install_if_missing core/gzip gunzip
    cp /src/components/compliance-service/generator/a1-data/${DUMP_NAME}.gz $DUMP_DIR
    gunzip ${DUMP_PATH}.gz
  fi

  # The A1 secret_key is being migrated from the deployment-service at:
  # => https://github.com/chef/automate/blob/dc2e9abeaf09ad3577e922d0e8afec9f6713cc4e/components/automate-deployment/pkg/client/deployer.go#L1433
  #
  # So here we are just writing it to the secrets-service data file as they are doing it
  if [[ ! -f $SECRETS_KEY_PATH ]]; then
    mkdir -p "$(dirname "${SECRETS_KEY_PATH}")"
    echo "f6326e5a27876d9d39815c64979611a7" > $SECRETS_KEY_PATH
  fi

  postgresql_load_env
  install_if_missing core/postgresql psql
  psql -c "DROP DATABASE IF EXISTS ${DBNAME}"
  psql -c "CREATE DATABASE ${DBNAME}"
  psql ${DBNAME} -f ${DUMP_PATH}
  psql ${DBNAME} -c '\dt'
}

document "secrets_test_A1_migration" <<DOC
  Test the A1 secrets-service migration process (requires: secrets-service)
DOC
function secrets_test_A1_migration() {
  local COMPONENT=secrets-service
  local DBNAME
  DBNAME=$(grep -w database /src/components/${COMPONENT}/habitat/default.toml | cut -f2 -d\")
  local PKG_IDENT
  PKG_IDENT=$(hab sup status 2>/dev/null | grep ${COMPONENT} | awk -F/ '{print $1"/"$2}')

  # Verify that the secrets-service is already running
  check_service_running_or_exit secrets-service || return 1

  log_line "Reloading A1 Data (DB & Key)"
  secrets_reload_A1_data

  log_line "Current data loaded into the system"
  secrets_list_secrets

  log_line "Stopping and starting the ${COMPONENT} for migration testing"
  hab svc stop $PKG_IDENT
  psql -c "DROP DATABASE IF EXISTS ${DBNAME}"
  rm /hab/svc/${COMPONENT}/data/secrets_key
  hab svc start $PKG_IDENT

  # Wait for the secrets-service to come online
  wait_for_svc_to_load $PKG_IDENT

  log_line "New data loaded into the system"
  secrets_list_secrets
}

document "secrets_test_A2_migration" <<DOC
  Test the A2 secrets-service migration process (requires: secrets-service)
DOC
function secrets_test_A2_migration() {
  local COMPONENT=secrets-service
  local DBNAME
  DBNAME=$(grep -w database /src/components/${COMPONENT}/habitat/default.toml | cut -f2 -d\")
  local PKG_IDENT
  PKG_IDENT=$(hab sup status 2>/dev/null | grep ${COMPONENT} | awk -F/ '{print $1"/"$2}')

  # Verify that the secrets-service is already running
  check_service_running_or_exit secrets-service || return 1

  log_line "Reloading A2 Data (DB & Key)"
  secrets_reload_A2_data

  log_line "Current data loaded into the system"
  secrets_list_secrets

  log_line "Stopping and starting the ${COMPONENT} for migration testing"
  hab svc stop $PKG_IDENT
  psql -c "DROP DATABASE IF EXISTS ${DBNAME}"
  rm /hab/svc/${COMPONENT}/data/secrets_key
  hab svc start $PKG_IDENT

  # Wait for the secrets-service to come online
  wait_for_svc_to_load $PKG_IDENT

  log_line "New data loaded into the system"
  secrets_list_secrets
}

document "secrets_reload_A2_data" <<DOC
  Reload the A2 Data for the secrets-service (requires: postgresql)
DOC
function secrets_reload_A2_data() {
  local COMPONENT=secrets-service
  local DBNAME=chef_compliance_service
  local DUMP_PATH="/src/components/${COMPONENT}/test/data/a2-secrets.dump"
  local A2_COMPLIANCE_SECRETS_KEY_PATH="/hab/svc/compliance-service/data/secrets_key"

  # Verify that postgresql is already running
  check_service_running_or_exit automate-postgresql || return 1

  if [[ ! -f $A2_COMPLIANCE_SECRETS_KEY_PATH ]]; then
    mkdir -p "$(dirname "${A2_COMPLIANCE_SECRETS_KEY_PATH}")"
    ln -s "/src/components/${COMPONENT}/test/data/secrets_key" $A2_COMPLIANCE_SECRETS_KEY_PATH
  fi

  postgresql_load_env
  install_if_missing core/postgresql psql
  psql -c "DROP DATABASE IF EXISTS ${DBNAME}"
  psql -c "CREATE DATABASE ${DBNAME}"
  install_if_missing core/postgresql pg_restore;
  pg_restore -d ${DBNAME} --no-owner ${DUMP_PATH}
  psql ${DBNAME} -c '\dt'
}
