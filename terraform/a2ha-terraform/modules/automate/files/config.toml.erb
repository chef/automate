# Chef Automate config.toml
#  This file is managed by terraform and chef-backend-ctl, do not modify by hand

[global.v1]
  fqdn = "<%= overrides[:automate_fqdn] %>"

  [global.v1.external.opensearch]
<% if overrides[:setup_managed_services] == true && overrides[:setup_self_managed_services] == false-%>
  enable = true
  nodes = ["https://<%= services[:opensearch][:managed_opensearch_domain_url] %>"]
  [global.v1.external.opensearch.auth]
    scheme = "aws_os"
    [global.v1.external.opensearch.auth.aws_os]
      username = "<%= services[:opensearch][:managed_opensearch_username] -%>"
      password = "<%= services[:opensearch][:managed_opensearch_user_password] -%>"
      access_key = "<%= services[:opensearch][:os_snapshot_user_access_key_id] -%>"
      secret_key = "<%= services[:opensearch][:os_snapshot_user_access_key_secret] -%>"
  [global.v1.external.opensearch.ssl]
    server_name = "<%= services[:opensearch][:managed_opensearch_domain_url] -%>"
    root_cert = """<%= services[:opensearch][:managed_opensearch_certificate] -%>"""
<% elsif svc_configs[:opensearch] && overrides[:setup_managed_services] == false -%>
    enable = true
    nodes = <%= services[:opensearch][:ips].map { |ip| "https://#{ip}:#{services[:opensearch][:svc_port]}" } %>
    [global.v1.external.opensearch.auth]
      scheme = "basic_auth"
      [global.v1.external.opensearch.auth.basic_auth]
        username = "<%= svc_configs[:opensearch]['opensearch_auth']['admin_username'] -%>"
        password = "<%= svc_configs[:opensearch]['opensearch_auth']['admin_password'] -%>"
    [global.v1.external.opensearch.ssl]
    <% if overrides[:opensearch_custom_certs_enabled] == true -%>
      server_name = ""
      root_cert = """<%= overrides[:opensearch_root_ca] -%>"""
    <% else %>
      server_name = "<%= cn(svc_configs[:opensearch]['tls']['ssl_cert']) -%>"
      root_cert = """<%= svc_configs[:opensearch]['tls']['rootCA'] -%>"""
    <% end %>
<% elsif overrides[:setup_managed_services] == true && overrides[:setup_self_managed_services] == true -%> 
    enable = true
    nodes = ["https://<%= services[:opensearch][:managed_opensearch_domain_url] %>"]
    [global.v1.external.opensearch.auth]
      scheme = "basic_auth"
      [global.v1.external.opensearch.auth.basic_auth]
        username = "<%= services[:opensearch][:managed_opensearch_username] -%>"
        password = "<%= services[:opensearch][:managed_opensearch_user_password] -%>"
    [global.v1.external.opensearch.ssl]
      server_name = "<%= services[:opensearch][:managed_opensearch_domain_name] -%>"
      root_cert = """<%= services[:opensearch][:opensearch_root_cert] -%>"""
<% else %>
    enable = false
<% end %>

  [global.v1.external.postgresql]
  <% if services[:postgresql][:setup_managed_services] ==true && overrides[:setup_self_managed_services] == false -%>
    enable = true
    nodes = ["<%= services[:postgresql][:managed_rds_instance_url] %>"]

  [global.v1.external.postgresql.ssl]
    enable = <%= services[:postgresql][:ssl] %>
    root_cert = """<%= services[:postgresql][:managed_rds_certificate] -%>"""

  [global.v1.external.postgresql.auth]
    scheme = "password"

  [global.v1.external.postgresql.auth.password.superuser]
    username = "<%= services[:postgresql][:managed_rds_superuser_username] -%>"
    password = "<%= services[:postgresql][:managed_rds_superuser_password] -%>"

  [global.v1.external.postgresql.auth.password.dbuser]
    username = "<%= services[:postgresql][:managed_rds_dbuser_username] -%>"
    password = "<%= services[:postgresql][:managed_rds_dbuser_password] -%>"

  [global.v1.external.postgresql.backup]
    enable = true
<% elsif svc_configs[:postgresql] && services[:postgresql][:setup_managed_services] ==false -%>
    enable = true
    nodes = <%= services[:postgresql][:ips].map { |ip| "#{ip}:#{services[:postgresql][:svc_port]}" } %>

  [global.v1.external.postgresql.ssl]
    enable = <%= services[:postgresql][:ssl] %>
  <% if overrides[:postgresql_custom_certs_enabled] == true -%>
    root_cert = """<%= overrides[:postgresql_root_ca] -%>"""
  <% else %>
    root_cert = """<%= svc_configs[:postgresql]['ssl']['issuer_cert'] -%>"""
  <% end %>

  [global.v1.external.postgresql.auth]
    scheme = "password"

  [global.v1.external.postgresql.auth.password.superuser]
    username = "<%= svc_configs[:postgresql]['superuser']['name'] -%>"
    password = "<%= svc_configs[:postgresql]['superuser']['password'] -%>"

  [global.v1.external.postgresql.auth.password.dbuser]
    username = "<%= svc_configs[:postgresql]['superuser']['name'] -%>"
    password = "<%= svc_configs[:postgresql]['superuser']['password'] -%>"

  [global.v1.external.postgresql.backup]
    enable = true
<% elsif services[:postgresql][:setup_managed_services] == true && overrides[:setup_self_managed_services] == true -%>
    enable = true
    nodes = ["<%= services[:postgresql][:managed_rds_instance_url] %>"]

  [global.v1.external.postgresql.ssl]
    enable = <%= services[:postgresql][:ssl] %>
    root_cert = """<%= services[:postgresql][:postgresql_root_cert] -%>"""

  [global.v1.external.postgresql.auth]
    scheme = "password"

  [global.v1.external.postgresql.auth.password.superuser]
    username = "<%= services[:postgresql][:managed_rds_superuser_username] -%>"
    password = "<%= services[:postgresql][:managed_rds_superuser_password] -%>"

  [global.v1.external.postgresql.auth.password.dbuser]
    username = "<%= services[:postgresql][:managed_rds_dbuser_username] -%>"
    password = "<%= services[:postgresql][:managed_rds_dbuser_password] -%>"

<% else %>
    enable = false
<% end %>

<% if overrides[:automate_role] == "chef_api" -%>
  [global.v1.external.automate]
    enable = true
    node = "https://<%= overrides[:automate_fqdn] %>"
  
  [cs_nginx.v1.sys.ngx.main]
    worker_processes = 2  

  [global.v1.external.automate.auth]
    token = "<%= overrides[:automate_dc_token] %>"

  <% if overrides[:automate_root_ca] -%>
    [cs_nginx.v1.sys.ngx.http]
      ssl_verify_depth = 6
    [global.v1.external.automate.ssl]
      server_name = "<%= overrides[:automate_fqdn] %>"
      root_cert = """<%= overrides[:automate_root_ca] %>"""
  <% end %>
<% else %>
  [auth_n.v1.sys.service]
    a1_data_collector_token = "<%= overrides[:automate_dc_token] %>"
<% end %>

# Deployment service configuration.
[deployment.v1]
  [deployment.v1.svc]
<% if overrides[:automate_role] == "chef_api" -%>
    # Deploy only chef-server product
    products = ["chef-server"]
<% else %>
    products = ["automate", "chef-server"]
<% end %>
    # Habitat channel to install hartifact from.
    # Can be 'dev', 'current', or 'acceptance'
    channel = "<%= overrides[:channel] -%>"
    upgrade_strategy = "<%= overrides[:upgrade_strategy] -%>"
    deployment_type = "local"

<% if overrides[:automate_role] == "chef_api" && overrides[:chef_server_custom_certs_enabled] == true -%>
[load_balancer]
  [load_balancer.v1.sys]
    [[load_balancer.v1.sys.frontend_tls]]
    key = """<%= overrides[:chef_server_private_key] %>"""
    cert = """<%= overrides[:chef_server_public_key] %>"""
<% elsif overrides[:automate_role] != "chef_api" && overrides[:automate_custom_certs_enabled] == true -%>
[load_balancer]
  [load_balancer.v1.sys]
    [[load_balancer.v1.sys.frontend_tls]]
    cert = """<%= overrides[:automate_public_key] %>"""
    key = """<%= overrides[:automate_private_key] %>"""
<% elsif tls_cert -%>
[load_balancer]
  [load_balancer.v1.sys]
    [[load_balancer.v1.sys.frontend_tls]]
    cert = """<%= tls_cert %>"""
    key = """<%= tls_key %>"""
<% end %>

<% if overrides[:teams_port] != 10128 %>
[teams.v1.sys.service]
  port = <%= overrides[:teams_port] %>
<% end %>

<% if overrides[:backup_config_s3] == "true" -%>
[global.v1.external.opensearch.backup]
  enable = true
  location = "s3"

[global.v1.external.opensearch.backup.s3]

  # bucket (required): The name of the bucket
  bucket = "<%= overrides[:bucket_name] %>"

  # base_path (optional):  The path within the bucket where backups should be stored
  # If base_path is not set, backups will be stored at the root of the bucket.
  base_path = "elasticsearch"

  # name of an s3 client configuration you create in your elasticsearch.yml
  # see https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-client.html
  # for full documentation on how to configure client settings on your
  # Elasticsearch nodes
  client = "default"

[global.v1.external.opensearch.backup.s3.settings]
  region = "<%= overrides[:aws_region] %>"
  role_arn = "<%= services[:opensearch][:aws_os_snapshot_role_arn] %>"
  ## The meaning of these settings is documented in the S3 Repository Plugin
  ## documentation. See the following links:
  ## https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html

  ## Backup repo settings
  # compress = false
  # server_side_encryption = false
  # buffer_size = "100mb"
  # canned_acl = "private"
  # storage_class = "standard"
  ## Snapshot settings
  # max_snapshot_bytes_per_sec = "40mb"
  # max_restore_bytes_per_sec = "40mb"
  # chunk_size = "null"
  ## S3 client settings
  # read_timeout = "50s"
  # max_retries = 3
  # use_throttle_retries = true
  # protocol = "https"

[global.v1.backups]
  location = "s3"

<% if overrides[:infra] == "existing_infra" -%>
[global.v1.backups.s3.credentials]
        access_key = "<%= overrides[:access_key] %>"
        secret_key = "<%= overrides[:secret_key] %>"
<% end %>
[global.v1.backups.s3.bucket]
  # name (required): The name of the bucket
  name = "<%= overrides[:bucket_name] %>"

  # endpoint (required): The endpoint for the region the bucket lives in.
  endpoint = "<%= overrides[:s3_endpoint] %>"

  # base_path (optional):  The path within the bucket where backups should be stored
  # If base_path is not set, backups will be stored at the root of the bucket.
  base_path = "automate"
<% end %>

<% if overrides[:backup_config_efs] == "true" -%>
[global.v1.external.opensearch.backup]
  enable = true
  location = "fs"

[global.v1.external.opensearch.backup.fs]
  # The `path.repo` setting you've configured on your Elasticsearch nodes must be
  # a parent directory of the setting you configure here:
  path = "<%= overrides[:nfs_mount_path] %>/opensearch"

[global.v1.backups.filesystem]
  path = "<%= overrides[:nfs_mount_path] %>/backups"
<% end %>

<% if overrides[:automate_config_file] %>
<%= File.read(overrides[:automate_config_file]) %> 
<% end %>

[erchef.v1.sys.api]
  s3_url_ttl = 28800

[erchef.v1.sys.depsolver]
  pool_queue_timeout= 0
  pool_queue_max= 50

[erchef.v1.sys.sql]
  pool_max_size= 20
  pool_queue_max= 20  

[erchef.v1.sys.keygen]
  cache_size=10
