  server {
    listen 127.0.0.1:{{cfg.service.port}};

    server_tokens off;

    access_log {{cfg.log.access_log_location}} opscode;

    ssl on;
    ssl_certificate {{pkg.svc_config_path}}/service.crt;
    ssl_certificate_key {{pkg.svc_config_path}}/service.key;
    ssl_client_certificate {{pkg.svc_config_path}}/root_ca.crt;
    ssl_verify_client on;
    ssl_verify_depth {{ cfg.ngx.http.ssl_verify_depth }};

    ssl_dhparam {{pkg.svc_data_path}}/dhparams.pem;
    ssl_protocols {{cfg.ngx.http.ssl_protocols}};
    ssl_ciphers {{cfg.ngx.http.ssl_ciphers}};
    ssl_session_timeout 5m;
    ssl_prefer_server_ciphers on;

    root {{pkg.path}}/static/html;

    client_body_buffer_size {{ cfg.ngx.http.client_body_buffer_size }};
    client_max_body_size {{cfg.ngx.http.client_max_body_size}};

    proxy_set_header Host $http_host; # http_host preserves port # if present
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_set_header X-Forwarded-Proto https;

    # Remove any `Connection: close` stuff that would interfere with persistent
    # connections between Chef Server LB and upstream
    proxy_set_header Connection "";

    # Use HTTP version that is sensible for persistent connections
    proxy_http_version 1.1;

    proxy_pass_request_headers on;
    proxy_connect_timeout   {{cfg.ngx.http.proxy_connect_timeout}};
    proxy_send_timeout      300;
    proxy_read_timeout      300;
    proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/root_ca.crt;
    proxy_ssl_verify        on;
    proxy_ssl_verify_depth {{ cfg.ngx.http.ssl_verify_depth }};


    error_page 404 =404 /404.html;
    error_page 503 =503 /503.json;

    # Whitelist the docs necessary to serve up error pages and friendly
    # html to non-chef clients hitting this host.
    location ~ "^/[0-9]{3,3}\.(json|html)|favicon.ico|index.html$" {
    }
    location "/css/" {
    }
    location "/images/" {
    }

    location /version {
      types { }
      default_type text/plain;
      alias {{pkg.svc_config_path}}/version-manifest.txt;
    }

    location ~ "^/organizations/([^/]+)/validate" {
      allow 127.0.0.1;
      allow ::1;
      deny all;
      proxy_pass https://automate-cs-oc-erchef;

      proxy_ssl_certificate         {{pkg.svc_config_path}}/service.crt;
      proxy_ssl_certificate_key     {{pkg.svc_config_path}}/service.key;
      proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/root_ca.crt;
      proxy_ssl_protocols           TLSv1.2 TLSv1.3;
      proxy_ssl_verify              on;
      proxy_ssl_session_reuse       on;
    }

{{#if cfg.external_automate.enable}}
    set_by_lua_block $data_collector_token {
        return "{{cfg.external_automate.token}}";
    }

    location ~ "^/organizations/([^/]+)/data-collector$" {
      set $request_org $1;
      access_by_lua_block { validator.validate("POST") }
      proxy_set_header x-data-collector-token $data_collector_token;
      proxy_set_header x-data-collector-auth "version=1.0";
      rewrite ^ /data-collector/v0/ break;

      {{~#if cfg.external_automate.root_cert }}
      proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/external_automate_root_ca.crt;
      {{/if}}

      {{~#if cfg.external_automate.server_name }}
      proxy_ssl_name {{ cfg.external_automate.server_name }};
      {{/if}}

      {{~#if cfg.external_automate.ssl_upstream }}
      proxy_pass https://external-automate;
      {{else}}
      proxy_pass http://external-automate;
      {{/if}}
    }

    # Compliance endpoint to forward profiles calls to the Automate API:
    #   /organizations/ORG/owners/OWNER/compliance[/PROFILE]
    # Supports the legacy(chef-gate) URLs as well:
    #   /compliance/organizations/ORG/owners/OWNER/compliance[/PROFILE]
    location ~ (?:/compliance)?/organizations/([^/]+)/owners/([^/]+)/compliance(.*) {
      set $request_org $1;
      access_by_lua_block { validator.validate("GET") }
      proxy_set_header x-data-collector-token $data_collector_token;
      proxy_set_header x-data-collector-auth "version=1.0";
      rewrite ^(?:/compliance)?/organizations/([^/]+)/owners/([^/]+)/compliance(.*) /api/v0/compliance/profiles/$2$3 break;

      {{~#if cfg.external_automate.root_cert }}
      proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/external_automate_root_ca.crt;
      {{/if}}

      {{~#if cfg.external_automate.server_name }}
      proxy_ssl_name {{ cfg.external_automate.server_name }};
      {{/if}}

      {{~#if cfg.external_automate.ssl_upstream }}
      proxy_pass https://external-automate;
      {{else}}
      proxy_pass http://external-automate;
      {{/if}}
  }
{{else}}

    location ~ "^/organizations/([^/]+)/data-collector$" {
      set $request_org $1;
      access_by_lua_block { validator.validate("POST") }

      rewrite ^ /api/v0/events/data-collector break;

      proxy_ssl_certificate         {{pkg.svc_config_path}}/service.crt;
      proxy_ssl_certificate_key     {{pkg.svc_config_path}}/service.key;
      proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/root_ca.crt;
      proxy_ssl_protocols           TLSv1.2 TLSv1.3;
      proxy_ssl_verify              on;
      proxy_ssl_session_reuse       on;

      proxy_pass https://automate-gateway;

    }

    # Proxy authorized chef-client inspec profile requests to A2
    #   /compliance/organizations/ORG/owners/OWNER/compliance/PROFILE/tar
    #   /compliance/organizations/ORG/owners/OWNER/compliance/PROFILE/[version/VERSION]/tar
    #   /organizations/ORG/owners/OWNER/compliance/PROFILE/tar
    #   /organizations/ORG/owners/OWNER/compliance/PROFILE/[version/VERSION]/tar
    location ~ (?:/compliance)?/organizations/([^/]+)/owners/([^/]+)/compliance(.*) {
      set $request_org $1;
      access_by_lua_block { validator.validate("GET") }
      rewrite ^(?:/compliance)?/organizations/([^/]+)/owners/([^/]+)/compliance(.*) /api/v0/compliance/profiles/$2$3 break;

      proxy_ssl_certificate         {{pkg.svc_config_path}}/service.crt;
      proxy_ssl_certificate_key     {{pkg.svc_config_path}}/service.key;
      proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/root_ca.crt;
      proxy_ssl_protocols           TLSv1.2 TLSv1.3;
      proxy_ssl_verify              on;
      proxy_ssl_session_reuse       on;

      proxy_pass https://automate-gateway;
    }

{{/if }}

    location ~ "^/organizations/([^/]+)/required_recipe$" {
      {{#if cfg.required_recipe.enabled ~}}

      set $request_org $1;
      access_by_lua_block { validator.validate("GET") }
      types { }
      default_type text/plain;
      add_header Content-MD5 {{cfg.required_recipe.content_md5}};
      alias {{pkg.svc_var_path}}/required_recipe;
      {{else}}
      # This endpoint is unique because it is defined via nginx and is not
      # handled by an upstream like oc_erchef. In order to make responses
      # consistent between Chef server and chef-zero we'll always enable
      # the location but explicitly return a 404 when the feature is disabled,
      # rather than leave it undefined. If we were to leave it undefined any
      # non-signed requests would be routed to the main index page and return
      # a 200 instead of 404.
      return 404;
      {{/if}}
    }

    location ~ "^/bookshelf/organization-.+" {
      proxy_pass https://automate-cs-bookshelf;

      proxy_ssl_certificate         {{pkg.svc_config_path}}/service.crt;
      proxy_ssl_certificate_key     {{pkg.svc_config_path}}/service.key;
      proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/root_ca.crt;
      proxy_ssl_protocols           TLSv1.2 TLSv1.3;
      proxy_ssl_verify              on;
      proxy_ssl_session_reuse       on;
    }

    # erchef status endpoint
    location ~ "^/_status/?$" {
      types { }
      default_type application/json;
      proxy_pass https://automate-cs-oc-erchef;

      proxy_ssl_certificate         {{pkg.svc_config_path}}/service.crt;
      proxy_ssl_certificate_key     {{pkg.svc_config_path}}/service.key;
      proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/root_ca.crt;
      proxy_ssl_protocols           TLSv1.2 TLSv1.3;
      proxy_ssl_verify              on;
      proxy_ssl_session_reuse       on;
    }

    # erchef stats endpoint
    location ~ "^/_stats/?$" {
      auth_basic "Chef Server Admin Stats";
      # HABITAT: CHECK maybe store in ring
      auth_basic_user_file {{pkg.svc_config_path}}/stats_htpasswd;
      types { }
      default_type application/json;
      proxy_pass https://automate-cs-oc-erchef;

      proxy_ssl_certificate         {{pkg.svc_config_path}}/service.crt;
      proxy_ssl_certificate_key     {{pkg.svc_config_path}}/service.key;
      proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/root_ca.crt;
      proxy_ssl_protocols           TLSv1.2 TLSv1.3;
      proxy_ssl_verify              on;
      proxy_ssl_session_reuse       on;
    }

    # This variable is set to an empty string here so it can be used in
    # dispatch.lua later on. An add-on can set this variable to be used as an
    # upstream if we determine the request was not intended to go to the API.
    set $add_on_override_upstream "";

    # Include external routes for addons
    # HABITAT: NO ADDONS YET
    #    include /var/opt/opscode/nginx/etc/addon.d/*_external.conf;

    # oc-id
    include {{pkg.svc_config_path}}/oc-id-external.conf;

    location /_route/ {
      default_type 'application/json';
      content_by_lua_file '{{pkg.svc_config_path}}/dispatch_route.lua';
    }

    location / {
      satisfy any;

      set $mode "api";
      set $upstream "";
      rewrite_by_lua_file '{{pkg.svc_config_path}}/dispatch.lua';
      proxy_pass https://$upstream;
      proxy_redirect https://$upstream /;

      proxy_ssl_certificate         {{pkg.svc_config_path}}/service.crt;
      proxy_ssl_certificate_key     {{pkg.svc_config_path}}/service.key;
      proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/root_ca.crt;
      proxy_ssl_protocols           TLSv1.2 TLSv1.3;
      proxy_ssl_verify              on;
      proxy_ssl_session_reuse       on;
    }
  }
