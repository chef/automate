worker_processes {{cfg.ngx.main.worker_processes}};
error_log stderr {{cfg.log.level}};
# Enviroment variables that we wish to access while running must be declared here,
# otherwise they will not be available.
# env REDIS_PASSWORD; # Not used in habitat chef server
env DATA_COLLECTOR_TOKEN;
daemon off;

events {
  worker_connections {{cfg.ngx.events.worker_connections}};
}

http {
  log_format opscode '$remote_addr - $remote_user [$time_local]  '
                    '"$request" $status "$request_time" $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$upstream_addr" "$upstream_status" "$upstream_response_time" "$http_x_chef_version" "$http_x_ops_sign" "$http_x_ops_userid" "$http_x_ops_timestamp" "$http_x_ops_content_hash" $request_length';

  server_names_hash_bucket_size {{cfg.ngx.http.server_names_hash_bucket_size}};

  sendfile {{cfg.ngx.http.sendfile}};
  tcp_nopush {{cfg.ngx.http.tcp_nopush}};
  tcp_nodelay {{cfg.ngx.http.tcp_nodelay}};

  keepalive_timeout {{cfg.ngx.http.keepalive_timeout}};

  gzip {{cfg.ngx.http.gzip}};
  gzip_http_version {{cfg.ngx.http.gzip_http_version}};
  gzip_comp_level {{cfg.ngx.http.gzip_comp_level}};
  gzip_proxied {{cfg.ngx.http.gzip_proxied}};
  gzip_types {{cfg.ngx.http.gzip_types}};

  include {{pkg.svc_config_path}}/mime.types;

  ## TODO Maybe put this back into a subdir
  lua_package_path "{{pkg.svc_config_path}}/?.lua;$prefix/?.lua;;";
  lua_shared_dict maint_data 1m;
  lua_shared_dict banned_ips 1m;

  # Preload some shared modules globally
  init_by_lua '
--    redis = require("resty/redis") # Not used in habitat chef server
    config = require("config")
    routes = require("routes")
    resolver = require("resolver")
    route_checks = require("route_checks")
    validator = require("validator")

-- Habitat doesnt support redis based dark launch and ban for now
--   config.set_maint_refresh_interval(600)
--   config.set_ban_refresh_interval(600)
--   config.set_default_org(false)
  ';

  # Listen for local requests to the stub_status module.
  server {
    listen 127.0.0.1:{{cfg.service.status_port}};
    location /nginx_status {
      stub_status on;
      access_log off;
      allow 127.0.0.1;
      deny all;
    }
  }

  upstream automate-cs-oc-erchef {
{{~#eachAlive bind.automate-cs-oc-erchef.members as |member|}}
   server {{ member.sys.ip}}:{{member.cfg.http-port}};
{{~/eachAlive}}
    keepalive 8;
  }

  upstream opscode_solr4 {
{{~#eachAlive bind.automate-es-gateway.members as |member|}}
    server 127.0.0.1:{{member.cfg.http-port}};
{{~/eachAlive}}
    keepalive 8;
  }

  upstream automate-cs-bookshelf {
{{~#eachAlive bind.automate-cs-bookshelf.members as |member|}}
    server {{member.sys.ip}}:{{member.cfg.http-port}};
{{~/eachAlive}}
    keepalive 8;
  }

{{#if cfg.external_automate.enable}}
  upstream external-automate {
    server {{cfg.external_automate.endpoint}};
    keepalive 8;
  }
{{else}}
  upstream automate-gateway {
{{#eachAlive bind.automate-gateway.members as |member|}}
    server {{member.sys.ip}}:{{member.cfg.port}};
{{else}}
     server 127.0.0.1:65535; # force 502
{{/eachAlive ~}}
    keepalive 8;
  }
{{/if}}

  # Include upstream definitions for addons
  # TODO HABITAT plugins not yet
  #  include /var/opt/opscode/nginx/etc/addon.d/*_upstreams.conf;

  fastcgi_temp_path "{{pkg.svc_data_path}}/tmp/fastcgi";
  client_body_temp_path "{{pkg.svc_data_path}}/tmp/client_body";
  uwsgi_temp_path "{{pkg.svc_data_path}}/tmp/uwsgi";
  scgi_temp_path "{{pkg.svc_data_path}}/tmp/scgi";
  proxy_temp_path {{pkg.svc_data_path}}/cache-tmp;

  # Chef HTTPS API
  include {{pkg.svc_config_path}}/chef_https.conf;
}
