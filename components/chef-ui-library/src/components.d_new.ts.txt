/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DocEntity } from "./entities/docs/doc.entity";
export namespace Components {
    interface ChefAlert {
        /**
          * The alert type (either 'success' or 'error')
         */
        "type": string;
    }
    interface ChefAside {
    }
    interface ChefBadge {
        /**
          * The ID of the element to attach the tooltip
         */
        "id": string;
        /**
          * Indicate badge has no data
         */
        "noData": boolean;
        /**
          * Text to be displayed within tooltips
         */
        "tooltip": string;
    }
    interface ChefBanner {
        /**
          * The text of the chef-button. If nothing is passed, there will not be a button.
         */
        "buttonText": string;
        /**
          * The type of header to show. Can be one of 'warn' or 'info'.
         */
        "type": string;
    }
    interface ChefButton {
        /**
          * Indicate button as potentially dangerous
         */
        "caution": boolean;
        /**
          * Indicate button as disabled
         */
        "disabled": boolean;
        /**
          * Name for form to submit
         */
        "form": string;
        /**
          * Create a primary button
         */
        "primary": boolean;
        /**
          * Create a secondary button
         */
        "secondary": boolean;
        /**
          * Target for links
         */
        "target": string;
        /**
          * Create a tertiary button
         */
        "tertiary": boolean;
        /**
          * The button type (either 'button', 'submit', or 'reset')
         */
        "type": 'submit' | 'reset' | 'button';
        /**
          * Url for links that look like buttons
         */
        "url": string;
    }
    interface ChefCard {
    }
    interface ChefCheckbox {
        "checked": boolean;
        "disabled": boolean;
        "indeterminate": boolean;
    }
    interface ChefClickOutside {
        /**
          * Class name to omit. Any click event targets that are on or within an element that has this class name will not dispatch a `clickOutside` event.
         */
        "omit": string;
    }
    interface ChefClipboard {
        "copy": (value: string) => Promise<boolean>;
        /**
          * An optional icon that is displayed by default. To suppress the icon pass in the empty string.
         */
        "icon": string;
        /**
          * An optional label that is empty by default. When present, it appears to the right of the icon (if the icon is present).
         */
        "label": string;
        /**
          * An optional attribute that creates a plain div instead of a chef-button as the carrier when set to true.
         */
        "plain": boolean;
        /**
          * The text to be copied to the clipboard.
         */
        "value": string;
    }
    interface ChefColors {
    }
    interface ChefCombobox {
    }
    interface ChefDataPoint {
        /**
          * Some charts support special secondary data points.
         */
        "secondary": boolean;
        /**
          * The value assigned to the data point.
         */
        "value": number;
    }
    interface ChefDesignDocs {
        "docType": string;
        "match": any;
    }
    interface ChefDropdown {
        "visible": boolean;
    }
    interface ChefExample {
        /**
          * The example code to be presented.
         */
        "code": string;
    }
    interface ChefExpander {
        "close": () => Promise<void>;
        "open": () => Promise<void>;
        /**
          * Indicates that the expander is opened.
         */
        "opened": boolean;
        "toggle": () => Promise<void>;
    }
    interface ChefHeader {
    }
    interface ChefHeaderNav {
    }
    interface ChefHeading {
    }
    interface ChefIcon {
    }
    interface ChefInput {
        /**
          * Enable or disable autocomplete for input (defaults to "off").
         */
        "autocomplete": string;
        /**
          * Indicate input as disabled
         */
        "disabled": boolean;
        /**
          * The placeholder text for the input.
         */
        "placeholder": string;
        /**
          * The type of input to use
         */
        "type": string;
        /**
          * The value contained within the input.
         */
        "value": string;
    }
    interface ChefInputKeyValue {
        /**
          * The placeholder text for the input.
         */
        "placeholder": string;
        /**
          * The value contained within the input.
         */
        "value": string;
    }
    interface ChefLayout {
    }
    interface ChefLibraryApp {
    }
    interface ChefLoadingSpinner {
        /**
          * Fixed styling (default is false and displays inline)
         */
        "fixed": boolean;
        /**
          * Width/height of the spinner
         */
        "size": string;
    }
    interface ChefLogo {
        "company": string;
    }
    interface ChefMain {
    }
    interface ChefMarkdown {
        /**
          * The markdown text to be parsed.
         */
        "text": string;
    }
    interface ChefModal {
        /**
          * The modal's title. The modal's `aria-labelledby` attribute is set to this value. This should be a unique id, and should match the `id` attribute of the contained element (e.g. `h2`) that actually displays the title of the modal.
         */
        "label": string;
        /**
          * Prevents the modal from being closed when true.
         */
        "locked": boolean;
        /**
          * Displays or hides the modal.
         */
        "visible": boolean;
    }
    interface ChefOption {
        "getContent": () => Promise<string>;
        "getWidth": () => Promise<number>;
        /**
          * Used to identify different options. This is set automatically so you shouldn't have to change it.
         */
        "optionId": string;
        /**
          * Specifies whether or not this option is selected.
         */
        "selected": boolean;
        /**
          * The value that will be returned when the option is selected.
         */
        "value": string;
    }
    interface ChefPage {
        /**
          * Text for cancel button
         */
        "cancelBtnText": string;
        /**
          * Text for confirm button
         */
        "confirmBtnText": string;
        /**
          * Indicate confirm is loading
         */
        "confirmLoading": boolean;
        /**
          * Disable confirm buttom
         */
        "disableConfirm": boolean;
        /**
          * Text for error message
         */
        "errorMessage": string;
        /**
          * Text for page heading
         */
        "heading": string;
        /**
          * Indicate page is loading
         */
        "pageLoading": boolean;
        /**
          * Show secondary button
         */
        "secondaryBtnShow": boolean;
        /**
          * Text for secondary button
         */
        "secondaryBtnText": string;
        /**
          * Text for page subheading
         */
        "subheading": string;
    }
    interface ChefPageHeader {
    }
    interface ChefPaginator {
        /**
          * The current page to highlight. This is the param that you will update on a page change.
         */
        "currentPage": string;
        /**
          * The total number of pages to show in the paginator
         */
        "pageCount": string;
    }
    interface ChefPhatRadio {
        /**
          * An optional property that when true allows users to deselect an option by selecting a currently selected option
         */
        "deselectable": boolean;
        /**
          * The value of the currently toggled option.
         */
        "value": string;
    }
    interface ChefPill {
    }
    interface ChefProgressBar {
        /**
          * Optional text to display at the start of the progress bar.
         */
        "prefixText": string;
        /**
          * Optional text to display at the end of the progress bar.
         */
        "suffixText": string;
        /**
          * The current progress value.
         */
        "value": number;
        /**
          * The maximum progress value.
         */
        "valueMax": number;
        /**
          * The minimum progress value.
         */
        "valueMin": number;
    }
    interface ChefRadialChart {
        /**
          * The width of the gap (in degrees) to apply between chart segments.
         */
        "gapSize": number;
        /**
          * Optionally set an id. This is automatically set to a unique ID if left blank.
         */
        "id": string;
        /**
          * Optionally hide tooltips. They are shown by default.
         */
        "tooltips": boolean;
        "updateDataPoints": () => Promise<void>;
    }
    interface ChefRadio {
        /**
          * The value of the currently toggled option.
         */
        "value": string;
    }
    interface ChefReadMe {
    }
    interface ChefScrollTop {
    }
    interface ChefScrollfader {
    }
    interface ChefSelect {
        /**
          * Disable your select menu by setting this to true
         */
        "disabled": boolean;
        /**
          * The selected value
         */
        "value": string;
    }
    interface ChefSeparator {
    }
    interface ChefSidePanel {
        /**
          * Boolean to show/hide the side panel
         */
        "visible": boolean;
    }
    interface ChefSnippet {
        /**
          * The code snippet to be highlighted.
         */
        "code": string;
        /**
          * The language the code snippet is written in. See the "Description" for active languages and http://prismjs.com/#languages-list for a list of all available languages.
         */
        "lang": string;
    }
    interface ChefSortToggle {
        /**
          * Indicates whether sort button is displayed as `asc` ↑, `desc` ↓, or `none` ↕.
         */
        "order": 'asc' | 'desc' | 'none';
        /**
          * Optionally assign a column sort name.
         */
        "sort": string;
        /**
          * Toggles order `prop` between `asc` ↑, `desc` ↓, or `none` ↕.
         */
        "toggle": () => Promise<void>;
    }
    interface ChefStatusFilterGroup {
        /**
          * The value of the currently toggled option.
         */
        "value": string;
    }
    interface ChefStep {
        /**
          * Indicates that the step is disabled.
         */
        "disabled": boolean;
        /**
          * Indicates that the step is selected.
         */
        "selected": boolean;
    }
    interface ChefStepper {
    }
    interface ChefSubheading {
    }
    interface ChefTabSelector {
        /**
          * The value of the currently selected tab.
         */
        "value": string;
    }
    interface ChefToggle {
        /**
          * The value of the currently toggled option.
         */
        "value": string;
    }
    interface ChefToolbar {
    }
    interface ChefTooltip {
        /**
          * The delay before the tooltip is displayed in milliseconds.
         */
        "delay": number;
        /**
          * If set the tooltip will follow the mouse when it is over the targetted element.
         */
        "follow": boolean;
        /**
          * The ID of the element to attach the tooltip
         */
        "for": string;
        /**
          * If set the tooltip will allow the mouse cursor to interact with its content.
         */
        "interactable": boolean;
        /**
          * The x and y offset of the tooltip in pixels.
         */
        "offset": string;
        /**
          * The position of the tooltip in relation to the mouse/element. Can be one of `top`, `left`, `right` or `bottom`.
         */
        "position": 'top' | 'left' | 'right' | 'bottom';
    }
    interface ChefTrapFocus {
        /**
          * Class name to omit
         */
        "trap": boolean;
    }
    interface ChefTypography {
    }
    interface ChefUiDoc {
        "doc": DocEntity;
    }
    interface ChefUiDocs {
        "docType": string;
        "match": any;
    }
}
declare global {
    interface HTMLChefAlertElement extends Components.ChefAlert, HTMLStencilElement {
    }
    var HTMLChefAlertElement: {
        prototype: HTMLChefAlertElement;
        new (): HTMLChefAlertElement;
    };
    interface HTMLChefAsideElement extends Components.ChefAside, HTMLStencilElement {
    }
    var HTMLChefAsideElement: {
        prototype: HTMLChefAsideElement;
        new (): HTMLChefAsideElement;
    };
    interface HTMLChefBadgeElement extends Components.ChefBadge, HTMLStencilElement {
    }
    var HTMLChefBadgeElement: {
        prototype: HTMLChefBadgeElement;
        new (): HTMLChefBadgeElement;
    };
    interface HTMLChefBannerElement extends Components.ChefBanner, HTMLStencilElement {
    }
    var HTMLChefBannerElement: {
        prototype: HTMLChefBannerElement;
        new (): HTMLChefBannerElement;
    };
    interface HTMLChefButtonElement extends Components.ChefButton, HTMLStencilElement {
    }
    var HTMLChefButtonElement: {
        prototype: HTMLChefButtonElement;
        new (): HTMLChefButtonElement;
    };
    interface HTMLChefCardElement extends Components.ChefCard, HTMLStencilElement {
    }
    var HTMLChefCardElement: {
        prototype: HTMLChefCardElement;
        new (): HTMLChefCardElement;
    };
    interface HTMLChefCheckboxElement extends Components.ChefCheckbox, HTMLStencilElement {
    }
    var HTMLChefCheckboxElement: {
        prototype: HTMLChefCheckboxElement;
        new (): HTMLChefCheckboxElement;
    };
    interface HTMLChefClickOutsideElement extends Components.ChefClickOutside, HTMLStencilElement {
    }
    var HTMLChefClickOutsideElement: {
        prototype: HTMLChefClickOutsideElement;
        new (): HTMLChefClickOutsideElement;
    };
    interface HTMLChefClipboardElement extends Components.ChefClipboard, HTMLStencilElement {
    }
    var HTMLChefClipboardElement: {
        prototype: HTMLChefClipboardElement;
        new (): HTMLChefClipboardElement;
    };
    interface HTMLChefColorsElement extends Components.ChefColors, HTMLStencilElement {
    }
    var HTMLChefColorsElement: {
        prototype: HTMLChefColorsElement;
        new (): HTMLChefColorsElement;
    };
    interface HTMLChefComboboxElement extends Components.ChefCombobox, HTMLStencilElement {
    }
    var HTMLChefComboboxElement: {
        prototype: HTMLChefComboboxElement;
        new (): HTMLChefComboboxElement;
    };
    interface HTMLChefDataPointElement extends Components.ChefDataPoint, HTMLStencilElement {
    }
    var HTMLChefDataPointElement: {
        prototype: HTMLChefDataPointElement;
        new (): HTMLChefDataPointElement;
    };
    interface HTMLChefDesignDocsElement extends Components.ChefDesignDocs, HTMLStencilElement {
    }
    var HTMLChefDesignDocsElement: {
        prototype: HTMLChefDesignDocsElement;
        new (): HTMLChefDesignDocsElement;
    };
    interface HTMLChefDropdownElement extends Components.ChefDropdown, HTMLStencilElement {
    }
    var HTMLChefDropdownElement: {
        prototype: HTMLChefDropdownElement;
        new (): HTMLChefDropdownElement;
    };
    interface HTMLChefExampleElement extends Components.ChefExample, HTMLStencilElement {
    }
    var HTMLChefExampleElement: {
        prototype: HTMLChefExampleElement;
        new (): HTMLChefExampleElement;
    };
    interface HTMLChefExpanderElement extends Components.ChefExpander, HTMLStencilElement {
    }
    var HTMLChefExpanderElement: {
        prototype: HTMLChefExpanderElement;
        new (): HTMLChefExpanderElement;
    };
    interface HTMLChefHeaderElement extends Components.ChefHeader, HTMLStencilElement {
    }
    var HTMLChefHeaderElement: {
        prototype: HTMLChefHeaderElement;
        new (): HTMLChefHeaderElement;
    };
    interface HTMLChefHeaderNavElement extends Components.ChefHeaderNav, HTMLStencilElement {
    }
    var HTMLChefHeaderNavElement: {
        prototype: HTMLChefHeaderNavElement;
        new (): HTMLChefHeaderNavElement;
    };
    interface HTMLChefHeadingElement extends Components.ChefHeading, HTMLStencilElement {
    }
    var HTMLChefHeadingElement: {
        prototype: HTMLChefHeadingElement;
        new (): HTMLChefHeadingElement;
    };
    interface HTMLChefIconElement extends Components.ChefIcon, HTMLStencilElement {
    }
    var HTMLChefIconElement: {
        prototype: HTMLChefIconElement;
        new (): HTMLChefIconElement;
    };
    interface HTMLChefInputElement extends Components.ChefInput, HTMLStencilElement {
    }
    var HTMLChefInputElement: {
        prototype: HTMLChefInputElement;
        new (): HTMLChefInputElement;
    };
    interface HTMLChefInputKeyValueElement extends Components.ChefInputKeyValue, HTMLStencilElement {
    }
    var HTMLChefInputKeyValueElement: {
        prototype: HTMLChefInputKeyValueElement;
        new (): HTMLChefInputKeyValueElement;
    };
    interface HTMLChefLayoutElement extends Components.ChefLayout, HTMLStencilElement {
    }
    var HTMLChefLayoutElement: {
        prototype: HTMLChefLayoutElement;
        new (): HTMLChefLayoutElement;
    };
    interface HTMLChefLibraryAppElement extends Components.ChefLibraryApp, HTMLStencilElement {
    }
    var HTMLChefLibraryAppElement: {
        prototype: HTMLChefLibraryAppElement;
        new (): HTMLChefLibraryAppElement;
    };
    interface HTMLChefLoadingSpinnerElement extends Components.ChefLoadingSpinner, HTMLStencilElement {
    }
    var HTMLChefLoadingSpinnerElement: {
        prototype: HTMLChefLoadingSpinnerElement;
        new (): HTMLChefLoadingSpinnerElement;
    };
    interface HTMLChefLogoElement extends Components.ChefLogo, HTMLStencilElement {
    }
    var HTMLChefLogoElement: {
        prototype: HTMLChefLogoElement;
        new (): HTMLChefLogoElement;
    };
    interface HTMLChefMainElement extends Components.ChefMain, HTMLStencilElement {
    }
    var HTMLChefMainElement: {
        prototype: HTMLChefMainElement;
        new (): HTMLChefMainElement;
    };
    interface HTMLChefMarkdownElement extends Components.ChefMarkdown, HTMLStencilElement {
    }
    var HTMLChefMarkdownElement: {
        prototype: HTMLChefMarkdownElement;
        new (): HTMLChefMarkdownElement;
    };
    interface HTMLChefModalElement extends Components.ChefModal, HTMLStencilElement {
    }
    var HTMLChefModalElement: {
        prototype: HTMLChefModalElement;
        new (): HTMLChefModalElement;
    };
    interface HTMLChefOptionElement extends Components.ChefOption, HTMLStencilElement {
    }
    var HTMLChefOptionElement: {
        prototype: HTMLChefOptionElement;
        new (): HTMLChefOptionElement;
    };
    interface HTMLChefPageElement extends Components.ChefPage, HTMLStencilElement {
    }
    var HTMLChefPageElement: {
        prototype: HTMLChefPageElement;
        new (): HTMLChefPageElement;
    };
    interface HTMLChefPageHeaderElement extends Components.ChefPageHeader, HTMLStencilElement {
    }
    var HTMLChefPageHeaderElement: {
        prototype: HTMLChefPageHeaderElement;
        new (): HTMLChefPageHeaderElement;
    };
    interface HTMLChefPaginatorElement extends Components.ChefPaginator, HTMLStencilElement {
    }
    var HTMLChefPaginatorElement: {
        prototype: HTMLChefPaginatorElement;
        new (): HTMLChefPaginatorElement;
    };
    interface HTMLChefPhatRadioElement extends Components.ChefPhatRadio, HTMLStencilElement {
    }
    var HTMLChefPhatRadioElement: {
        prototype: HTMLChefPhatRadioElement;
        new (): HTMLChefPhatRadioElement;
    };
    interface HTMLChefPillElement extends Components.ChefPill, HTMLStencilElement {
    }
    var HTMLChefPillElement: {
        prototype: HTMLChefPillElement;
        new (): HTMLChefPillElement;
    };
    interface HTMLChefProgressBarElement extends Components.ChefProgressBar, HTMLStencilElement {
    }
    var HTMLChefProgressBarElement: {
        prototype: HTMLChefProgressBarElement;
        new (): HTMLChefProgressBarElement;
    };
    interface HTMLChefRadialChartElement extends Components.ChefRadialChart, HTMLStencilElement {
    }
    var HTMLChefRadialChartElement: {
        prototype: HTMLChefRadialChartElement;
        new (): HTMLChefRadialChartElement;
    };
    interface HTMLChefRadioElement extends Components.ChefRadio, HTMLStencilElement {
    }
    var HTMLChefRadioElement: {
        prototype: HTMLChefRadioElement;
        new (): HTMLChefRadioElement;
    };
    interface HTMLChefReadMeElement extends Components.ChefReadMe, HTMLStencilElement {
    }
    var HTMLChefReadMeElement: {
        prototype: HTMLChefReadMeElement;
        new (): HTMLChefReadMeElement;
    };
    interface HTMLChefScrollTopElement extends Components.ChefScrollTop, HTMLStencilElement {
    }
    var HTMLChefScrollTopElement: {
        prototype: HTMLChefScrollTopElement;
        new (): HTMLChefScrollTopElement;
    };
    interface HTMLChefScrollfaderElement extends Components.ChefScrollfader, HTMLStencilElement {
    }
    var HTMLChefScrollfaderElement: {
        prototype: HTMLChefScrollfaderElement;
        new (): HTMLChefScrollfaderElement;
    };
    interface HTMLChefSelectElement extends Components.ChefSelect, HTMLStencilElement {
    }
    var HTMLChefSelectElement: {
        prototype: HTMLChefSelectElement;
        new (): HTMLChefSelectElement;
    };
    interface HTMLChefSeparatorElement extends Components.ChefSeparator, HTMLStencilElement {
    }
    var HTMLChefSeparatorElement: {
        prototype: HTMLChefSeparatorElement;
        new (): HTMLChefSeparatorElement;
    };
    interface HTMLChefSidePanelElement extends Components.ChefSidePanel, HTMLStencilElement {
    }
    var HTMLChefSidePanelElement: {
        prototype: HTMLChefSidePanelElement;
        new (): HTMLChefSidePanelElement;
    };
    interface HTMLChefSnippetElement extends Components.ChefSnippet, HTMLStencilElement {
    }
    var HTMLChefSnippetElement: {
        prototype: HTMLChefSnippetElement;
        new (): HTMLChefSnippetElement;
    };
    interface HTMLChefSortToggleElement extends Components.ChefSortToggle, HTMLStencilElement {
    }
    var HTMLChefSortToggleElement: {
        prototype: HTMLChefSortToggleElement;
        new (): HTMLChefSortToggleElement;
    };
    interface HTMLChefStatusFilterGroupElement extends Components.ChefStatusFilterGroup, HTMLStencilElement {
    }
    var HTMLChefStatusFilterGroupElement: {
        prototype: HTMLChefStatusFilterGroupElement;
        new (): HTMLChefStatusFilterGroupElement;
    };
    interface HTMLChefStepElement extends Components.ChefStep, HTMLStencilElement {
    }
    var HTMLChefStepElement: {
        prototype: HTMLChefStepElement;
        new (): HTMLChefStepElement;
    };
    interface HTMLChefStepperElement extends Components.ChefStepper, HTMLStencilElement {
    }
    var HTMLChefStepperElement: {
        prototype: HTMLChefStepperElement;
        new (): HTMLChefStepperElement;
    };
    interface HTMLChefSubheadingElement extends Components.ChefSubheading, HTMLStencilElement {
    }
    var HTMLChefSubheadingElement: {
        prototype: HTMLChefSubheadingElement;
        new (): HTMLChefSubheadingElement;
    };
    interface HTMLChefTabSelectorElement extends Components.ChefTabSelector, HTMLStencilElement {
    }
    var HTMLChefTabSelectorElement: {
        prototype: HTMLChefTabSelectorElement;
        new (): HTMLChefTabSelectorElement;
    };
    interface HTMLChefToggleElement extends Components.ChefToggle, HTMLStencilElement {
    }
    var HTMLChefToggleElement: {
        prototype: HTMLChefToggleElement;
        new (): HTMLChefToggleElement;
    };
    interface HTMLChefToolbarElement extends Components.ChefToolbar, HTMLStencilElement {
    }
    var HTMLChefToolbarElement: {
        prototype: HTMLChefToolbarElement;
        new (): HTMLChefToolbarElement;
    };
    interface HTMLChefTooltipElement extends Components.ChefTooltip, HTMLStencilElement {
    }
    var HTMLChefTooltipElement: {
        prototype: HTMLChefTooltipElement;
        new (): HTMLChefTooltipElement;
    };
    interface HTMLChefTrapFocusElement extends Components.ChefTrapFocus, HTMLStencilElement {
    }
    var HTMLChefTrapFocusElement: {
        prototype: HTMLChefTrapFocusElement;
        new (): HTMLChefTrapFocusElement;
    };
    interface HTMLChefTypographyElement extends Components.ChefTypography, HTMLStencilElement {
    }
    var HTMLChefTypographyElement: {
        prototype: HTMLChefTypographyElement;
        new (): HTMLChefTypographyElement;
    };
    interface HTMLChefUiDocElement extends Components.ChefUiDoc, HTMLStencilElement {
    }
    var HTMLChefUiDocElement: {
        prototype: HTMLChefUiDocElement;
        new (): HTMLChefUiDocElement;
    };
    interface HTMLChefUiDocsElement extends Components.ChefUiDocs, HTMLStencilElement {
    }
    var HTMLChefUiDocsElement: {
        prototype: HTMLChefUiDocsElement;
        new (): HTMLChefUiDocsElement;
    };
    interface HTMLElementTagNameMap {
        "chef-alert": HTMLChefAlertElement;
        "chef-aside": HTMLChefAsideElement;
        "chef-badge": HTMLChefBadgeElement;
        "chef-banner": HTMLChefBannerElement;
        "chef-button": HTMLChefButtonElement;
        "chef-card": HTMLChefCardElement;
        "chef-checkbox": HTMLChefCheckboxElement;
        "chef-click-outside": HTMLChefClickOutsideElement;
        "chef-clipboard": HTMLChefClipboardElement;
        "chef-colors": HTMLChefColorsElement;
        "chef-combobox": HTMLChefComboboxElement;
        "chef-data-point": HTMLChefDataPointElement;
        "chef-design-docs": HTMLChefDesignDocsElement;
        "chef-dropdown": HTMLChefDropdownElement;
        "chef-example": HTMLChefExampleElement;
        "chef-expander": HTMLChefExpanderElement;
        "chef-header": HTMLChefHeaderElement;
        "chef-header-nav": HTMLChefHeaderNavElement;
        "chef-heading": HTMLChefHeadingElement;
        "chef-icon": HTMLChefIconElement;
        "chef-input": HTMLChefInputElement;
        "chef-input-key-value": HTMLChefInputKeyValueElement;
        "chef-layout": HTMLChefLayoutElement;
        "chef-library-app": HTMLChefLibraryAppElement;
        "chef-loading-spinner": HTMLChefLoadingSpinnerElement;
        "chef-logo": HTMLChefLogoElement;
        "chef-main": HTMLChefMainElement;
        "chef-markdown": HTMLChefMarkdownElement;
        "chef-modal": HTMLChefModalElement;
        "chef-option": HTMLChefOptionElement;
        "chef-page": HTMLChefPageElement;
        "chef-page-header": HTMLChefPageHeaderElement;
        "chef-paginator": HTMLChefPaginatorElement;
        "chef-phat-radio": HTMLChefPhatRadioElement;
        "chef-pill": HTMLChefPillElement;
        "chef-progress-bar": HTMLChefProgressBarElement;
        "chef-radial-chart": HTMLChefRadialChartElement;
        "chef-radio": HTMLChefRadioElement;
        "chef-read-me": HTMLChefReadMeElement;
        "chef-scroll-top": HTMLChefScrollTopElement;
        "chef-scrollfader": HTMLChefScrollfaderElement;
        "chef-select": HTMLChefSelectElement;
        "chef-separator": HTMLChefSeparatorElement;
        "chef-side-panel": HTMLChefSidePanelElement;
        "chef-snippet": HTMLChefSnippetElement;
        "chef-sort-toggle": HTMLChefSortToggleElement;
        "chef-status-filter-group": HTMLChefStatusFilterGroupElement;
        "chef-step": HTMLChefStepElement;
        "chef-stepper": HTMLChefStepperElement;
        "chef-subheading": HTMLChefSubheadingElement;
        "chef-tab-selector": HTMLChefTabSelectorElement;
        "chef-toggle": HTMLChefToggleElement;
        "chef-toolbar": HTMLChefToolbarElement;
        "chef-tooltip": HTMLChefTooltipElement;
        "chef-trap-focus": HTMLChefTrapFocusElement;
        "chef-typography": HTMLChefTypographyElement;
        "chef-ui-doc": HTMLChefUiDocElement;
        "chef-ui-docs": HTMLChefUiDocsElement;
    }
}
declare namespace LocalJSX {
    interface ChefAlert {
        /**
          * The alert type (either 'success' or 'error')
         */
        "type"?: string;
    }
    interface ChefAside {
    }
    interface ChefBadge {
        /**
          * The ID of the element to attach the tooltip
         */
        "id"?: string;
        /**
          * Indicate badge has no data
         */
        "noData"?: boolean;
        /**
          * Text to be displayed within tooltips
         */
        "tooltip"?: string;
    }
    interface ChefBanner {
        /**
          * The text of the chef-button. If nothing is passed, there will not be a button.
         */
        "buttonText"?: string;
        "onButtonClicked"?: (event: CustomEvent<any>) => void;
        /**
          * The type of header to show. Can be one of 'warn' or 'info'.
         */
        "type"?: string;
    }
    interface ChefButton {
        /**
          * Indicate button as potentially dangerous
         */
        "caution"?: boolean;
        /**
          * Indicate button as disabled
         */
        "disabled"?: boolean;
        /**
          * Name for form to submit
         */
        "form"?: string;
        /**
          * Create a primary button
         */
        "primary"?: boolean;
        /**
          * Create a secondary button
         */
        "secondary"?: boolean;
        /**
          * Target for links
         */
        "target"?: string;
        /**
          * Create a tertiary button
         */
        "tertiary"?: boolean;
        /**
          * The button type (either 'button', 'submit', or 'reset')
         */
        "type"?: 'submit' | 'reset' | 'button';
        /**
          * Url for links that look like buttons
         */
        "url"?: string;
    }
    interface ChefCard {
    }
    interface ChefCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "indeterminate"?: boolean;
        "onChange"?: (event: CustomEvent<any>) => void;
    }
    interface ChefClickOutside {
        /**
          * Class name to omit. Any click event targets that are on or within an element that has this class name will not dispatch a `clickOutside` event.
         */
        "omit"?: string;
        /**
          * Expression to run when a user clicks outside of the element
         */
        "onClickOutside"?: (event: CustomEvent<any>) => void;
    }
    interface ChefClipboard {
        /**
          * An optional icon that is displayed by default. To suppress the icon pass in the empty string.
         */
        "icon"?: string;
        /**
          * An optional label that is empty by default. When present, it appears to the right of the icon (if the icon is present).
         */
        "label"?: string;
        /**
          * An optional attribute that creates a plain div instead of a chef-button as the carrier when set to true.
         */
        "plain"?: boolean;
        /**
          * The text to be copied to the clipboard.
         */
        "value"?: string;
    }
    interface ChefColors {
    }
    interface ChefCombobox {
        "onChange"?: (event: CustomEvent<any>) => void;
    }
    interface ChefDataPoint {
        "onUpdated"?: (event: CustomEvent<any>) => void;
        /**
          * Some charts support special secondary data points.
         */
        "secondary"?: boolean;
        /**
          * The value assigned to the data point.
         */
        "value"?: number;
    }
    interface ChefDesignDocs {
        "docType"?: string;
        "match"?: any;
    }
    interface ChefDropdown {
        "visible"?: boolean;
    }
    interface ChefExample {
        /**
          * The example code to be presented.
         */
        "code"?: string;
    }
    interface ChefExpander {
        /**
          * Indicates that the expander is opened.
         */
        "opened"?: boolean;
    }
    interface ChefHeader {
    }
    interface ChefHeaderNav {
    }
    interface ChefHeading {
    }
    interface ChefIcon {
    }
    interface ChefInput {
        /**
          * Enable or disable autocomplete for input (defaults to "off").
         */
        "autocomplete"?: string;
        /**
          * Indicate input as disabled
         */
        "disabled"?: boolean;
        /**
          * The placeholder text for the input.
         */
        "placeholder"?: string;
        /**
          * The type of input to use
         */
        "type"?: string;
        /**
          * The value contained within the input.
         */
        "value"?: string;
    }
    interface ChefInputKeyValue {
        /**
          * The placeholder text for the input.
         */
        "placeholder"?: string;
        /**
          * The value contained within the input.
         */
        "value"?: string;
    }
    interface ChefLayout {
    }
    interface ChefLibraryApp {
    }
    interface ChefLoadingSpinner {
        /**
          * Fixed styling (default is false and displays inline)
         */
        "fixed"?: boolean;
        /**
          * Width/height of the spinner
         */
        "size"?: string;
    }
    interface ChefLogo {
        "company"?: string;
    }
    interface ChefMain {
    }
    interface ChefMarkdown {
        /**
          * The markdown text to be parsed.
         */
        "text"?: string;
    }
    interface ChefModal {
        /**
          * The modal's title. The modal's `aria-labelledby` attribute is set to this value. This should be a unique id, and should match the `id` attribute of the contained element (e.g. `h2`) that actually displays the title of the modal.
         */
        "label"?: string;
        /**
          * Prevents the modal from being closed when true.
         */
        "locked"?: boolean;
        /**
          * Emitted when the modal closes.
         */
        "onCloseModal"?: (event: CustomEvent<any>) => void;
        /**
          * Displays or hides the modal.
         */
        "visible"?: boolean;
    }
    interface ChefOption {
        /**
          * Used to identify different options. This is set automatically so you shouldn't have to change it.
         */
        "optionId"?: string;
        /**
          * Specifies whether or not this option is selected.
         */
        "selected"?: boolean;
        /**
          * The value that will be returned when the option is selected.
         */
        "value"?: string;
    }
    interface ChefPage {
        /**
          * Text for cancel button
         */
        "cancelBtnText"?: string;
        /**
          * Text for confirm button
         */
        "confirmBtnText"?: string;
        /**
          * Indicate confirm is loading
         */
        "confirmLoading"?: boolean;
        /**
          * Disable confirm buttom
         */
        "disableConfirm"?: boolean;
        /**
          * Text for error message
         */
        "errorMessage"?: string;
        /**
          * Text for page heading
         */
        "heading"?: string;
        "onClose"?: (event: CustomEvent<any>) => void;
        "onConfirm"?: (event: CustomEvent<any>) => void;
        "onSecondaryConfirm"?: (event: CustomEvent<any>) => void;
        /**
          * Indicate page is loading
         */
        "pageLoading"?: boolean;
        /**
          * Show secondary button
         */
        "secondaryBtnShow"?: boolean;
        /**
          * Text for secondary button
         */
        "secondaryBtnText"?: string;
        /**
          * Text for page subheading
         */
        "subheading"?: string;
    }
    interface ChefPageHeader {
    }
    interface ChefPaginator {
        /**
          * The current page to highlight. This is the param that you will update on a page change.
         */
        "currentPage"?: string;
        /**
          * The total number of pages to show in the paginator
         */
        "pageCount"?: string;
    }
    interface ChefPhatRadio {
        /**
          * An optional property that when true allows users to deselect an option by selecting a currently selected option
         */
        "deselectable"?: boolean;
        "onChange"?: (event: CustomEvent<any>) => void;
        "onInput"?: (event: CustomEvent<any>) => void;
        /**
          * The value of the currently toggled option.
         */
        "value"?: string;
    }
    interface ChefPill {
    }
    interface ChefProgressBar {
        /**
          * Optional text to display at the start of the progress bar.
         */
        "prefixText"?: string;
        /**
          * Optional text to display at the end of the progress bar.
         */
        "suffixText"?: string;
        /**
          * The current progress value.
         */
        "value"?: number;
        /**
          * The maximum progress value.
         */
        "valueMax"?: number;
        /**
          * The minimum progress value.
         */
        "valueMin"?: number;
    }
    interface ChefRadialChart {
        /**
          * The width of the gap (in degrees) to apply between chart segments.
         */
        "gapSize"?: number;
        /**
          * Optionally set an id. This is automatically set to a unique ID if left blank.
         */
        "id"?: string;
        /**
          * Optionally hide tooltips. They are shown by default.
         */
        "tooltips"?: boolean;
    }
    interface ChefRadio {
        "onChange"?: (event: CustomEvent<any>) => void;
        "onInput"?: (event: CustomEvent<any>) => void;
        /**
          * The value of the currently toggled option.
         */
        "value"?: string;
    }
    interface ChefReadMe {
    }
    interface ChefScrollTop {
    }
    interface ChefScrollfader {
    }
    interface ChefSelect {
        /**
          * Disable your select menu by setting this to true
         */
        "disabled"?: boolean;
        /**
          * Emitted when the value of the molecule changes.
         */
        "onChange"?: (event: CustomEvent<any>) => void;
        /**
          * The selected value
         */
        "value"?: string;
    }
    interface ChefSeparator {
    }
    interface ChefSidePanel {
        /**
          * Boolean to show/hide the side panel
         */
        "visible"?: boolean;
    }
    interface ChefSnippet {
        /**
          * The code snippet to be highlighted.
         */
        "code"?: string;
        /**
          * The language the code snippet is written in. See the "Description" for active languages and http://prismjs.com/#languages-list for a list of all available languages.
         */
        "lang"?: string;
    }
    interface ChefSortToggle {
        /**
          * `sort-toggled` event is emitted whenever the `order` prop is changed.  Detail: `{ order: 'asc' | 'desc' | 'none', sort: string }`
         */
        "onSort-toggled"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates whether sort button is displayed as `asc` ↑, `desc` ↓, or `none` ↕.
         */
        "order"?: 'asc' | 'desc' | 'none';
        /**
          * Optionally assign a column sort name.
         */
        "sort"?: string;
    }
    interface ChefStatusFilterGroup {
        "onChange"?: (event: CustomEvent<any>) => void;
        "onInput"?: (event: CustomEvent<any>) => void;
        /**
          * The value of the currently toggled option.
         */
        "value"?: string;
    }
    interface ChefStep {
        /**
          * Indicates that the step is disabled.
         */
        "disabled"?: boolean;
        /**
          * Indicates that the step is selected.
         */
        "selected"?: boolean;
    }
    interface ChefStepper {
    }
    interface ChefSubheading {
    }
    interface ChefTabSelector {
        "onChange"?: (event: CustomEvent<any>) => void;
        "onInput"?: (event: CustomEvent<any>) => void;
        /**
          * The value of the currently selected tab.
         */
        "value"?: string;
    }
    interface ChefToggle {
        "onChange"?: (event: CustomEvent<any>) => void;
        "onInput"?: (event: CustomEvent<any>) => void;
        /**
          * The value of the currently toggled option.
         */
        "value"?: string;
    }
    interface ChefToolbar {
    }
    interface ChefTooltip {
        /**
          * The delay before the tooltip is displayed in milliseconds.
         */
        "delay"?: number;
        /**
          * If set the tooltip will follow the mouse when it is over the targetted element.
         */
        "follow"?: boolean;
        /**
          * The ID of the element to attach the tooltip
         */
        "for"?: string;
        /**
          * If set the tooltip will allow the mouse cursor to interact with its content.
         */
        "interactable"?: boolean;
        /**
          * The x and y offset of the tooltip in pixels.
         */
        "offset"?: string;
        /**
          * The position of the tooltip in relation to the mouse/element. Can be one of `top`, `left`, `right` or `bottom`.
         */
        "position"?: 'top' | 'left' | 'right' | 'bottom';
    }
    interface ChefTrapFocus {
        /**
          * Class name to omit
         */
        "trap"?: boolean;
    }
    interface ChefTypography {
    }
    interface ChefUiDoc {
        "doc"?: DocEntity;
    }
    interface ChefUiDocs {
        "docType"?: string;
        "match"?: any;
    }
    interface IntrinsicElements {
        "chef-alert": ChefAlert;
        "chef-aside": ChefAside;
        "chef-badge": ChefBadge;
        "chef-banner": ChefBanner;
        "chef-button": ChefButton;
        "chef-card": ChefCard;
        "chef-checkbox": ChefCheckbox;
        "chef-click-outside": ChefClickOutside;
        "chef-clipboard": ChefClipboard;
        "chef-colors": ChefColors;
        "chef-combobox": ChefCombobox;
        "chef-data-point": ChefDataPoint;
        "chef-design-docs": ChefDesignDocs;
        "chef-dropdown": ChefDropdown;
        "chef-example": ChefExample;
        "chef-expander": ChefExpander;
        "chef-header": ChefHeader;
        "chef-header-nav": ChefHeaderNav;
        "chef-heading": ChefHeading;
        "chef-icon": ChefIcon;
        "chef-input": ChefInput;
        "chef-input-key-value": ChefInputKeyValue;
        "chef-layout": ChefLayout;
        "chef-library-app": ChefLibraryApp;
        "chef-loading-spinner": ChefLoadingSpinner;
        "chef-logo": ChefLogo;
        "chef-main": ChefMain;
        "chef-markdown": ChefMarkdown;
        "chef-modal": ChefModal;
        "chef-option": ChefOption;
        "chef-page": ChefPage;
        "chef-page-header": ChefPageHeader;
        "chef-paginator": ChefPaginator;
        "chef-phat-radio": ChefPhatRadio;
        "chef-pill": ChefPill;
        "chef-progress-bar": ChefProgressBar;
        "chef-radial-chart": ChefRadialChart;
        "chef-radio": ChefRadio;
        "chef-read-me": ChefReadMe;
        "chef-scroll-top": ChefScrollTop;
        "chef-scrollfader": ChefScrollfader;
        "chef-select": ChefSelect;
        "chef-separator": ChefSeparator;
        "chef-side-panel": ChefSidePanel;
        "chef-snippet": ChefSnippet;
        "chef-sort-toggle": ChefSortToggle;
        "chef-status-filter-group": ChefStatusFilterGroup;
        "chef-step": ChefStep;
        "chef-stepper": ChefStepper;
        "chef-subheading": ChefSubheading;
        "chef-tab-selector": ChefTabSelector;
        "chef-toggle": ChefToggle;
        "chef-toolbar": ChefToolbar;
        "chef-tooltip": ChefTooltip;
        "chef-trap-focus": ChefTrapFocus;
        "chef-typography": ChefTypography;
        "chef-ui-doc": ChefUiDoc;
        "chef-ui-docs": ChefUiDocs;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "chef-alert": LocalJSX.ChefAlert & JSXBase.HTMLAttributes<HTMLChefAlertElement>;
            "chef-aside": LocalJSX.ChefAside & JSXBase.HTMLAttributes<HTMLChefAsideElement>;
            "chef-badge": LocalJSX.ChefBadge & JSXBase.HTMLAttributes<HTMLChefBadgeElement>;
            "chef-banner": LocalJSX.ChefBanner & JSXBase.HTMLAttributes<HTMLChefBannerElement>;
            "chef-button": LocalJSX.ChefButton & JSXBase.HTMLAttributes<HTMLChefButtonElement>;
            "chef-card": LocalJSX.ChefCard & JSXBase.HTMLAttributes<HTMLChefCardElement>;
            "chef-checkbox": LocalJSX.ChefCheckbox & JSXBase.HTMLAttributes<HTMLChefCheckboxElement>;
            "chef-click-outside": LocalJSX.ChefClickOutside & JSXBase.HTMLAttributes<HTMLChefClickOutsideElement>;
            "chef-clipboard": LocalJSX.ChefClipboard & JSXBase.HTMLAttributes<HTMLChefClipboardElement>;
            "chef-colors": LocalJSX.ChefColors & JSXBase.HTMLAttributes<HTMLChefColorsElement>;
            "chef-combobox": LocalJSX.ChefCombobox & JSXBase.HTMLAttributes<HTMLChefComboboxElement>;
            "chef-data-point": LocalJSX.ChefDataPoint & JSXBase.HTMLAttributes<HTMLChefDataPointElement>;
            "chef-design-docs": LocalJSX.ChefDesignDocs & JSXBase.HTMLAttributes<HTMLChefDesignDocsElement>;
            "chef-dropdown": LocalJSX.ChefDropdown & JSXBase.HTMLAttributes<HTMLChefDropdownElement>;
            "chef-example": LocalJSX.ChefExample & JSXBase.HTMLAttributes<HTMLChefExampleElement>;
            "chef-expander": LocalJSX.ChefExpander & JSXBase.HTMLAttributes<HTMLChefExpanderElement>;
            "chef-header": LocalJSX.ChefHeader & JSXBase.HTMLAttributes<HTMLChefHeaderElement>;
            "chef-header-nav": LocalJSX.ChefHeaderNav & JSXBase.HTMLAttributes<HTMLChefHeaderNavElement>;
            "chef-heading": LocalJSX.ChefHeading & JSXBase.HTMLAttributes<HTMLChefHeadingElement>;
            "chef-icon": LocalJSX.ChefIcon & JSXBase.HTMLAttributes<HTMLChefIconElement>;
            "chef-input": LocalJSX.ChefInput & JSXBase.HTMLAttributes<HTMLChefInputElement>;
            "chef-input-key-value": LocalJSX.ChefInputKeyValue & JSXBase.HTMLAttributes<HTMLChefInputKeyValueElement>;
            "chef-layout": LocalJSX.ChefLayout & JSXBase.HTMLAttributes<HTMLChefLayoutElement>;
            "chef-library-app": LocalJSX.ChefLibraryApp & JSXBase.HTMLAttributes<HTMLChefLibraryAppElement>;
            "chef-loading-spinner": LocalJSX.ChefLoadingSpinner & JSXBase.HTMLAttributes<HTMLChefLoadingSpinnerElement>;
            "chef-logo": LocalJSX.ChefLogo & JSXBase.HTMLAttributes<HTMLChefLogoElement>;
            "chef-main": LocalJSX.ChefMain & JSXBase.HTMLAttributes<HTMLChefMainElement>;
            "chef-markdown": LocalJSX.ChefMarkdown & JSXBase.HTMLAttributes<HTMLChefMarkdownElement>;
            "chef-modal": LocalJSX.ChefModal & JSXBase.HTMLAttributes<HTMLChefModalElement>;
            "chef-option": LocalJSX.ChefOption & JSXBase.HTMLAttributes<HTMLChefOptionElement>;
            "chef-page": LocalJSX.ChefPage & JSXBase.HTMLAttributes<HTMLChefPageElement>;
            "chef-page-header": LocalJSX.ChefPageHeader & JSXBase.HTMLAttributes<HTMLChefPageHeaderElement>;
            "chef-paginator": LocalJSX.ChefPaginator & JSXBase.HTMLAttributes<HTMLChefPaginatorElement>;
            "chef-phat-radio": LocalJSX.ChefPhatRadio & JSXBase.HTMLAttributes<HTMLChefPhatRadioElement>;
            "chef-pill": LocalJSX.ChefPill & JSXBase.HTMLAttributes<HTMLChefPillElement>;
            "chef-progress-bar": LocalJSX.ChefProgressBar & JSXBase.HTMLAttributes<HTMLChefProgressBarElement>;
            "chef-radial-chart": LocalJSX.ChefRadialChart & JSXBase.HTMLAttributes<HTMLChefRadialChartElement>;
            "chef-radio": LocalJSX.ChefRadio & JSXBase.HTMLAttributes<HTMLChefRadioElement>;
            "chef-read-me": LocalJSX.ChefReadMe & JSXBase.HTMLAttributes<HTMLChefReadMeElement>;
            "chef-scroll-top": LocalJSX.ChefScrollTop & JSXBase.HTMLAttributes<HTMLChefScrollTopElement>;
            "chef-scrollfader": LocalJSX.ChefScrollfader & JSXBase.HTMLAttributes<HTMLChefScrollfaderElement>;
            "chef-select": LocalJSX.ChefSelect & JSXBase.HTMLAttributes<HTMLChefSelectElement>;
            "chef-separator": LocalJSX.ChefSeparator & JSXBase.HTMLAttributes<HTMLChefSeparatorElement>;
            "chef-side-panel": LocalJSX.ChefSidePanel & JSXBase.HTMLAttributes<HTMLChefSidePanelElement>;
            "chef-snippet": LocalJSX.ChefSnippet & JSXBase.HTMLAttributes<HTMLChefSnippetElement>;
            "chef-sort-toggle": LocalJSX.ChefSortToggle & JSXBase.HTMLAttributes<HTMLChefSortToggleElement>;
            "chef-status-filter-group": LocalJSX.ChefStatusFilterGroup & JSXBase.HTMLAttributes<HTMLChefStatusFilterGroupElement>;
            "chef-step": LocalJSX.ChefStep & JSXBase.HTMLAttributes<HTMLChefStepElement>;
            "chef-stepper": LocalJSX.ChefStepper & JSXBase.HTMLAttributes<HTMLChefStepperElement>;
            "chef-subheading": LocalJSX.ChefSubheading & JSXBase.HTMLAttributes<HTMLChefSubheadingElement>;
            "chef-tab-selector": LocalJSX.ChefTabSelector & JSXBase.HTMLAttributes<HTMLChefTabSelectorElement>;
            "chef-toggle": LocalJSX.ChefToggle & JSXBase.HTMLAttributes<HTMLChefToggleElement>;
            "chef-toolbar": LocalJSX.ChefToolbar & JSXBase.HTMLAttributes<HTMLChefToolbarElement>;
            "chef-tooltip": LocalJSX.ChefTooltip & JSXBase.HTMLAttributes<HTMLChefTooltipElement>;
            "chef-trap-focus": LocalJSX.ChefTrapFocus & JSXBase.HTMLAttributes<HTMLChefTrapFocusElement>;
            "chef-typography": LocalJSX.ChefTypography & JSXBase.HTMLAttributes<HTMLChefTypographyElement>;
            "chef-ui-doc": LocalJSX.ChefUiDoc & JSXBase.HTMLAttributes<HTMLChefUiDocElement>;
            "chef-ui-docs": LocalJSX.ChefUiDocs & JSXBase.HTMLAttributes<HTMLChefUiDocsElement>;
        }
    }
}
