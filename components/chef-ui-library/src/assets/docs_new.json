{
	"id": 0,
	"name": "chef-ui-library",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 18,
			"name": "atoms/chef-alert/chef-alert",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 19,
					"name": "ChefAlert",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Description"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-alert type='success'>It's a success!</chef-alert>\n```"
									}
								]
							},
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Description"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-alert type='error'>Oh, no!</chef-alert>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 22,
							"name": "type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The alert type (either 'success' or 'error')"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-alert/chef-alert.tsx",
									"line": 24,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-alert/chef-alert.tsx#L24"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								22
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-alert/chef-alert.tsx",
							"line": 20,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-alert/chef-alert.tsx#L20"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						19
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-alert/chef-alert.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-alert/chef-alert.tsx#L1"
				}
			]
		},
		{
			"id": 28,
			"name": "atoms/chef-badge/chef-badge",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 29,
					"name": "ChefBadge",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "code",
										"text": "`<chef-badge>`"
									},
									{
										"kind": "text",
										"text": " is used to Badges are generally used to provide context or emphasis on a\ncharacteristic of another object in the interface, e.g., the channel name for a Habitat\npackage. They are generally actionless. But when there are more descriptions needed to\nhelp explain the context, a hover state with tooltip can be added.\n\nSemantic colors can be applied to indicate: general, primary, critical, warning, and success."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-badge>general</chef-badge>\n<chef-badge primary>primary</chef-badge>\n<chef-badge critical>critical</chef-badge>\n<chef-badge warning>warning</chef-badge>\n<chef-badge success>success</chef-badge>\n\n<chef-separator></chef-separator>\n\n<chef-badge no-data>general</chef-badge>\n<chef-badge no-data primary>primary</chef-badge>\n<chef-badge no-data critical>critical</chef-badge>\n<chef-badge no-data warning>warning</chef-badge>\n<chef-badge no-data success>success</chef-badge>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-badge id=\"general-tooltip\" tooltip=\"Tooltip\">general</chef-badge>\n<chef-badge primary id=\"primary-tooltip\" tooltip=\"Tooltip\">primary</chef-badge>\n<chef-badge critical id=\"critical-tooltip\" tooltip=\"Tooltip\">critical</chef-badge>\n<chef-badge warning id=\"warning-tooltip\" tooltip=\"Tooltip\">warning</chef-badge>\n<chef-badge success id=\"success-tooltip\" tooltip=\"Tooltip\">success</chef-badge>\n\n<chef-separator></chef-separator>\n\n<chef-badge no-data id=\"general-2-tooltip\" tooltip=\"Tooltip\">general</chef-badge>\n<chef-badge no-data primary id=\"primary-2-tooltip\" tooltip=\"Tooltip\">primary</chef-badge>\n<chef-badge no-data critical id=\"critical-2-tooltip\" tooltip=\"Tooltip\">critical</chef-badge>\n<chef-badge no-data warning id=\"warning-2-tooltip\" tooltip=\"Tooltip\">warning</chef-badge>\n<chef-badge no-data success id=\"success-2-tooltip\" tooltip=\"Tooltip\">success</chef-badge>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 33,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The ID of the element to attach the tooltip"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-badge/chef-badge.tsx",
									"line": 56,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-badge/chef-badge.tsx#L56"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 32,
							"name": "noData",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicate badge has no data"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-badge/chef-badge.tsx",
									"line": 51,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-badge/chef-badge.tsx#L51"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 34,
							"name": "tooltip",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Text to be displayed within tooltips"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-badge/chef-badge.tsx",
									"line": 61,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-badge/chef-badge.tsx#L61"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								33,
								32,
								34
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-badge/chef-badge.tsx",
							"line": 46,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-badge/chef-badge.tsx#L46"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						29
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-badge/chef-badge.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-badge/chef-badge.tsx#L1"
				}
			]
		},
		{
			"id": 37,
			"name": "atoms/chef-button/chef-button",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 38,
					"name": "ChefButton",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "code",
										"text": "`<chef-button>`"
									},
									{
										"kind": "text",
										"text": " is used to display buttons. It has three style variants:\n\n- "
									},
									{
										"kind": "code",
										"text": "`primary`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`secondary`"
									},
									{
										"kind": "text",
										"text": "\n- "
									},
									{
										"kind": "code",
										"text": "`tertiary`"
									},
									{
										"kind": "text",
										"text": "\n\nAdding "
									},
									{
										"kind": "code",
										"text": "`caution`"
									},
									{
										"kind": "text",
										"text": " will modify these style variants to their cautious version."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button primary>\n  Primary\n</chef-button>\n<chef-button primary>\n  <chef-icon>alarm</chef-icon>\n</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button primary>Button Text</chef-button>\n<chef-button primary disabled>Button Text</chef-button>\n<chef-button primary caution>Button Text</chef-button>\n<chef-button primary caution disabled>Button Text</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button secondary>Button Text</chef-button>\n<chef-button secondary disabled>Button Text</chef-button>\n<chef-button secondary caution>Button Text</chef-button>\n<chef-button secondary caution disabled>Button Text</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button tertiary>Button Text</chef-button>\n<chef-button tertiary disabled>Button Text</chef-button>\n<chef-button tertiary caution>Button Text</chef-button>\n<chef-button tertiary caution disabled>Button Text</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button primary>\n  <chef-icon>add</chef-icon>\n</chef-button>\n<chef-button primary disabled>\n  <chef-icon>add</chef-icon>\n</chef-button>\n<chef-button primary caution>\n  <chef-icon>remove</chef-icon>\n</chef-button>\n<chef-button primary caution disabled>\n  <chef-icon>remove</chef-icon>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button secondary>\n  <chef-icon>add</chef-icon>\n</chef-button>\n<chef-button secondary disabled>\n  <chef-icon>add</chef-icon>\n</chef-button>\n<chef-button secondary caution>\n  <chef-icon>remove</chef-icon>\n</chef-button>\n<chef-button secondary caution disabled>\n  <chef-icon>remove</chef-icon>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button tertiary>\n  <chef-icon>add</chef-icon>\n</chef-button>\n<chef-button tertiary disabled>\n  <chef-icon>add</chef-icon>\n</chef-button>\n<chef-button tertiary caution>\n  <chef-icon>remove</chef-icon>\n</chef-button>\n<chef-button tertiary caution disabled>\n  <chef-icon>remove</chef-icon>\n</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button primary>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button primary disabled>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button primary caution>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button primary caution disabled>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button secondary>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button secondary disabled>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button secondary caution>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button secondary caution disabled>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button tertiary>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button tertiary disabled>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button tertiary caution>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button tertiary caution disabled>\n  <chef-icon>close</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button primary>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n<chef-button primary disabled>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n<chef-button primary caution>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n<chef-button primary caution disabled>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button secondary>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n<chef-button secondary disabled>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n<chef-button secondary caution>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n<chef-button secondary caution disabled>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button tertiary>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n<chef-button tertiary disabled>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n<chef-button tertiary caution>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n<chef-button tertiary caution disabled>\n  <span>Button Text</span>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button primary>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n<chef-button primary disabled>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n<chef-button primary caution>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n<chef-button primary caution disabled>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button secondary>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n<chef-button secondary disabled>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n<chef-button secondary caution>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n<chef-button secondary caution disabled>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button tertiary>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n<chef-button tertiary disabled>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n<chef-button tertiary caution>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n<chef-button tertiary caution disabled>\n  <chef-icon>bookmark</chef-icon>\n  <span>Button Text</span>\n  <chef-icon>close</chef-icon>\n</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button primary>\n  <chef-icon>save</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button primary disabled>\n  <chef-loading-spinner></chef-loading-spinner>\n  <span>Button Text</span>\n</chef-button>\n<chef-button primary caution>\n  <chef-icon>delete</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button primary caution disabled>\n  <chef-loading-spinner></chef-loading-spinner>\n  <span>Button Text</span>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button secondary>\n  <chef-icon>save</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button secondary disabled>\n  <chef-loading-spinner></chef-loading-spinner>\n  <span>Button Text</span>\n</chef-button>\n<chef-button secondary caution>\n  <chef-icon>delete</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button secondary caution disabled>\n  <chef-loading-spinner></chef-loading-spinner>\n  <span>Button Text</span>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button tertiary>\n  <chef-icon>save</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button tertiary disabled>\n  <chef-loading-spinner></chef-loading-spinner>\n  <span>Button Text</span>\n</chef-button>\n<chef-button tertiary caution>\n  <chef-icon>delete</chef-icon>\n  <span>Button Text</span>\n</chef-button>\n<chef-button tertiary caution disabled>\n  <chef-loading-spinner></chef-loading-spinner>\n  <span>Button Text</span>\n</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button secondary disabled>\n  <chef-icon>chevron_left</chef-icon>\n</chef-button>\n<chef-button primary>1</chef-button>\n<chef-button secondary>2</chef-button>\n<chef-button secondary>3</chef-button>\n<chef-button secondary>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button secondary>\n  <chef-icon>chevron_left</chef-icon>\n</chef-button>\n<chef-button secondary>1</chef-button>\n<chef-button primary>2</chef-button>\n<chef-button secondary>3</chef-button>\n<chef-button secondary>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n\n<chef-separator></chef-separator>\n\n<chef-button secondary>\n  <chef-icon>chevron_left</chef-icon>\n</chef-button>\n<chef-button secondary>1</chef-button>\n<chef-button secondary>2</chef-button>\n<chef-button primary>3</chef-button>\n<chef-button secondary disabled>\n  <chef-icon>chevron_right</chef-icon>\n</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button type=\"reset\" tertiary>Cancel</chef-button>\n<chef-button type=\"button\" secondary>Save Draft</chef-button>\n<chef-button type=\"submit\" primary>Submit</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button url=\"/\" primary>Link!</chef-button>\n<chef-button url=\"/\" target=\"_blank\" secondary>Link in a new tab!</chef-button>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 46,
							"name": "caution",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicate button as potentially dangerous"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-button/chef-button.tsx",
									"line": 399,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L399"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 47,
							"name": "disabled",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicate button as disabled"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-button/chef-button.tsx",
									"line": 404,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L404"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 42,
							"name": "form",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Name for form to submit"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-button/chef-button.tsx",
									"line": 379,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L379"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 43,
							"name": "primary",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a primary button"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-button/chef-button.tsx",
									"line": 384,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L384"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 44,
							"name": "secondary",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a secondary button"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-button/chef-button.tsx",
									"line": 389,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L389"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 49,
							"name": "target",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Target for links"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-button/chef-button.tsx",
									"line": 414,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L414"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 45,
							"name": "tertiary",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create a tertiary button"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-button/chef-button.tsx",
									"line": 394,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L394"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 41,
							"name": "type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The button type (either 'button', 'submit', or 'reset')"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-button/chef-button.tsx",
									"line": 374,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L374"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "submit"
									},
									{
										"type": "literal",
										"value": "reset"
									},
									{
										"type": "literal",
										"value": "button"
									}
								]
							},
							"defaultValue": "'button'"
						},
						{
							"id": 48,
							"name": "url",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Url for links that look like buttons"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-button/chef-button.tsx",
									"line": 409,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L409"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								46,
								47,
								42,
								43,
								44,
								49,
								45,
								41,
								48
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-button/chef-button.tsx",
							"line": 369,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L369"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						38
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-button/chef-button.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-button/chef-button.tsx#L1"
				}
			]
		},
		{
			"id": 52,
			"name": "atoms/chef-card/chef-card",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 53,
					"name": "ChefCard",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Simple atom to wrap content in chef styled \"card\". Provides a slot named 'label' to provide\na label for the card. Labels can be one or multiple elements and can be styled as necessary."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-card>\n  <span style='display:block; padding: 1em 0;' slot='label'>This is the card's label</span>\n  <p>Once upon a midnight dreary, while I pondered, weak and weary. Over many a\n     quaint and curious volume of forgotten lore. While I nodded, nearly napping,\n     suddenly there came a tapping. As of some one gently rapping, rapping at my\n     chamber door. 'Tis some visiter, I muttered, tapping at my chamber door. Only\n     this, and nothing more. Ah, distinctly I remember it was in the bleak December.\n     And each separate dying ember wrought its ghost upon the floor. Eagerly I wished\n     the morrow;—vainly I had sought to borrow. From my books surcease of\n     sorrow—sorrow for the lost Lenore. For the rare and radiant maiden whom the\n     angels name Lenore. Nameless here for evermore. And the silken sad uncertain\n     rustling of each purple curtain Thrilled me, filled me with fantastic terrors</p>\n</chef-card>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/atoms/chef-card/chef-card.tsx",
							"line": 27,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-card/chef-card.tsx#L27"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						53
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-card/chef-card.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-card/chef-card.tsx#L1"
				}
			]
		},
		{
			"id": 58,
			"name": "atoms/chef-checkbox/chef-checkbox",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 59,
					"name": "ChefCheckbox",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "code",
										"text": "`<chef-checkbox>`"
									},
									{
										"kind": "text",
										"text": " is used to display checkbox inputs. Clicking the checkbox,\nor pressing "
									},
									{
										"kind": "code",
										"text": "`space`"
									},
									{
										"kind": "text",
										"text": " while the checkbox is focused, will toggle the "
									},
									{
										"kind": "code",
										"text": "`checked`"
									},
									{
										"kind": "text",
										"text": "\nproperty. A "
									},
									{
										"kind": "code",
										"text": "`change`"
									},
									{
										"kind": "text",
										"text": " event emits when the "
									},
									{
										"kind": "code",
										"text": "`checked`"
									},
									{
										"kind": "text",
										"text": " property is toggled."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div class=\"form-field\">\n  <chef-checkbox>Label Text</chef-checkbox>\n</div>\n<div class=\"form-field\">\n  <chef-checkbox checked>Label Text</chef-checkbox>\n</div>\n<div class=\"form-field\">\n  <chef-checkbox disabled>Label Text</chef-checkbox>\n</div>\n<div class=\"form-field\">\n  <chef-checkbox indeterminate>Label Text</chef-checkbox>\n</div>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/atoms/chef-checkbox/chef-checkbox.tsx",
							"line": 29,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-checkbox/chef-checkbox.tsx#L29"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						59
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-checkbox/chef-checkbox.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-checkbox/chef-checkbox.tsx#L1"
				}
			]
		},
		{
			"id": 83,
			"name": "atoms/chef-click-outside/chef-click-outside",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 84,
					"name": "ChefClickOutside",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "A wrapper element that fires an event when a user clicks outside of the wrapper. This can be used\nwithin modals/dialogs for closing the element when a user clicks outside of it, for example.\n\nThe 'omit' property allows you to prevent the 'clickOutside' event from being dispatched if a\nuser clicks on or within an element that contains the provided class name. This is useful if you\nwant to use "
									},
									{
										"kind": "code",
										"text": "`chef-click-outside`"
									},
									{
										"kind": "text",
										"text": " within a modal but you don't want the event to fire when the\nuser clicks on the button to open the modal."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-click-outside id=\"wrapper\" omit=\"omitted\">\n  <chef-markdown id=\"content\" text=\"# Click outside of me.\"></chef-markdown>\n</chef-click-outside>\n<chef-button class=\"omitted\" primary>An omitted click target</chef-button>\n<chef-button class=\"omitted\" primary>Another omitted click target</chef-button>\n\n<script>\n  const wrapper = document.getElementById('wrapper');\n  const content = document.getElementById('content');\n  wrapper.addEventListener('clickOutside', () => {\n    content.text = '# Thanks!';\n    setTimeout(() => content.text = '# Click outside of me.', 1000);\n  });\n</script>\n\n<style>\n  #wrapper { display: block; background: var(--chef-white); }\n  #content { padding: 1em; border: 1px solid; border-color: var(--chef-grey); }\n  .omitted { margin: 1em 1em 0 0; }\n</style>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 88,
							"name": "clickOutside",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Expression to run when a user clicks outside of the element"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-click-outside/chef-click-outside.tsx",
									"line": 45,
									"character": 11,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-click-outside/chef-click-outside.tsx#L45"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@stencil/core/internal/stencil-public-runtime.d.ts",
									"qualifiedName": "EventEmitter"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "EventEmitter",
								"package": "@stencil/core"
							}
						},
						{
							"id": 89,
							"name": "omit",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Class name to omit. Any click event targets that are on or within an element that has this\nclass name will not dispatch a "
									},
									{
										"kind": "code",
										"text": "`clickOutside`"
									},
									{
										"kind": "text",
										"text": " event."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-click-outside/chef-click-outside.tsx",
									"line": 51,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-click-outside/chef-click-outside.tsx#L51"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								88,
								89
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-click-outside/chef-click-outside.tsx",
							"line": 38,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-click-outside/chef-click-outside.tsx#L38"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						84
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-click-outside/chef-click-outside.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-click-outside/chef-click-outside.tsx#L1"
				}
			]
		},
		{
			"id": 95,
			"name": "atoms/chef-clipboard/chef-clipboard",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 96,
					"name": "ChefClipboard",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-clipboard>`"
									},
									{
										"kind": "text",
										"text": " atom is used to copy content into the user's clipboard."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-input id=\"input\" value=\"text to copy\"></chef-input>\n<chef-clipboard id=\"clipboard\" value=\"text to copy\"></chef-clipboard>\n<script>\n  const input = document.getElementById('input');\n  const clipboard = document.getElementById('clipboard');\n  input.addEventListener('input', e => clipboard.value = e.target.value);\n</script>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-table>\n  <chef-tr>\n    <chef-td>\n      <chef-clipboard value=\"Linux Baseline\"></chef-clipboard> Linux Baseline\n    </chef-td>\n    <chef-td>\n      <chef-clipboard value=\"owner/linux-baseline\"></chef-clipboard> owner/linux-baseline\n    </chef-td>\n    <chef-td>\n      <chef-clipboard value=\"Linux Baseline\" label=\"With Label and Icon\"></chef-clipboard>\n    </chef-td>\n    <chef-td>\n      <chef-clipboard value=\"owner/linux-baseline\" label=\"Without Icon\" icon=\"\"></chef-clipboard>\n    </chef-td>\n  </chef-tr>\n</chef-table>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 100,
							"name": "icon",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An optional icon that is displayed by default. To suppress the icon pass in the empty string."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
									"line": 53,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-clipboard/chef-clipboard.tsx#L53"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'content_copy'"
						},
						{
							"id": 101,
							"name": "label",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An optional label that is empty by default. When present, it appears to the right of the icon (if the icon is present)."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
									"line": 58,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-clipboard/chef-clipboard.tsx#L58"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						},
						{
							"id": 102,
							"name": "plain",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An optional attribute that creates a plain div instead of a chef-button as the carrier when set to true."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
									"line": 63,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-clipboard/chef-clipboard.tsx#L63"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 99,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The text to be copied to the clipboard."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
									"line": 48,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-clipboard/chef-clipboard.tsx#L48"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								100,
								101,
								102,
								99
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
							"line": 44,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-clipboard/chef-clipboard.tsx#L44"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						96
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-clipboard/chef-clipboard.tsx#L1"
				}
			]
		},
		{
			"id": 119,
			"name": "atoms/chef-dropdown/chef-dropdown",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 120,
					"name": "ChefDropdown",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Generic dropdown atom. This is a basic atom to be used for constructing\nthings like drop down menus and select boxes. This atom makes no assumptions\nabout how it's content is styled. It's up to the developer to style content\nappropriately."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button id='drop-toggle' primary>Click Me!</chef-button>\n<chef-dropdown id='drop'>\n  <p>Some content to go in my dropdown</p>\n  <p>Some content to go in my dropdown</p>\n  <p>Some content to go in my dropdown</p>\n  <p>Some content to go in my dropdown</p>\n  <p>Some content to go in my dropdown</p>\n  <p>Some content to go in my dropdown</p>\n  <p>Some content to go in my dropdown</p>\n  <p>Some content to go in my dropdown</p>\n  <p>Some content to go in my dropdown</p>\n</chef-dropdown>\n\n<script>\n  const toggle = document.getElementById('drop-toggle');\n  const dropdown = document.getElementById('drop');\n  toggle.addEventListener('click', e => dropdown.visible = !dropdown.visible);\n</script>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/atoms/chef-dropdown/chef-dropdown.tsx",
							"line": 34,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-dropdown/chef-dropdown.tsx#L34"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						120
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-dropdown/chef-dropdown.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-dropdown/chef-dropdown.tsx#L1"
				}
			]
		},
		{
			"id": 126,
			"name": "atoms/chef-heading/chef-heading",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 127,
					"name": "ChefHeading",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Child component for chef-page-header that displays the heading. Only text and inline\nelements should be nested in this component."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-page-header>\n  <chef-heading>Some Heading Text</chef-heading>\n  <chef-subheading>Some subheading text that goes below the heading.</chef-subheading>\n</chef-page-header>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/atoms/chef-heading/chef-heading.tsx",
							"line": 19,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-heading/chef-heading.tsx#L19"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						127
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-heading/chef-heading.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-heading/chef-heading.tsx#L1"
				}
			]
		},
		{
			"id": 132,
			"name": "atoms/chef-icon/chef-icon",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 133,
					"name": "ChefIcon",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Display a material icon."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-icon style='font-size: 5em'>accessibility</chef-icon>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-icon style='font-size: 5em; color: red;'>alarm</chef-icon>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/atoms/chef-icon/chef-icon.tsx",
							"line": 17,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-icon/chef-icon.tsx#L17"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						133
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-icon/chef-icon.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-icon/chef-icon.tsx#L1"
				}
			]
		},
		{
			"id": 163,
			"name": "atoms/chef-input-key-value/chef-input-key-value",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 164,
					"name": "ChefInputKeyValue",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "code",
										"text": "`chef-input-key-value`"
									},
									{
										"kind": "text",
										"text": " is the internal molecule used to implement the key-value\ntype for "
									},
									{
										"kind": "code",
										"text": "`chef-input`"
									},
									{
										"kind": "text",
										"text": ". For this reason it really shouldn't be used on its own.\nUse "
									},
									{
										"kind": "code",
										"text": "`<chef-input type='key-value'></chef-input>`"
									},
									{
										"kind": "text",
										"text": " instead. See [chef-input](./chef-input)\nfor more info."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-input type='key-value' value='foobar:bizbang'></chef-input>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 168,
							"name": "placeholder",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The placeholder text for the input."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-input-key-value/chef-input-key-value.tsx",
									"line": 27,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input-key-value/chef-input-key-value.tsx#L27"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						},
						{
							"id": 167,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value contained within the input."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-input-key-value/chef-input-key-value.tsx",
									"line": 22,
									"character": 27,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input-key-value/chef-input-key-value.tsx#L22"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								168,
								167
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-input-key-value/chef-input-key-value.tsx",
							"line": 17,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input-key-value/chef-input-key-value.tsx#L17"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						164
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-input-key-value/chef-input-key-value.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input-key-value/chef-input-key-value.tsx#L1"
				}
			]
		},
		{
			"id": 138,
			"name": "atoms/chef-input/chef-input",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 139,
					"name": "ChefInput",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "An atom for defining inputs with chef specific styling. The input type\nis supplied via the type prop and in most cases just passed down to the\ninternal input. So any type valid on a standard input should be valid\nfor chef-input. There are also some additional custom types that can\nprovide some added functionality. Currently the only additional type\nprovided is "
									},
									{
										"kind": "code",
										"text": "`key-value`"
									},
									{
										"kind": "text",
										"text": ". The key/value can be provided via the value\nattribute as a ':' delimited string, 'key:value'.\n\nThe underlying <input> element has autocomplete set to \"off\"."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-input placeholder='Enter value...'></chef-input>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-input disabled placeholder='Cannot change value'></chef-input>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-input value='foobar' placeholder='Enter value...'></chef-input>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-input type='key-value' placeholder='Enter value...'></chef-input>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-input placeholder='Enter value...' autocomplete=\"on\"></chef-input>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-input type='key-value' value='foobar:bizbang' placeholder='Enter value...'></chef-input>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 146,
							"name": "autocomplete",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Enable or disable autocomplete for input (defaults to \"off\")."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-input/chef-input.tsx",
									"line": 62,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input/chef-input.tsx#L62"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'off'"
						},
						{
							"id": 145,
							"name": "disabled",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicate input as disabled"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-input/chef-input.tsx",
									"line": 57,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input/chef-input.tsx#L57"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 144,
							"name": "placeholder",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The placeholder text for the input."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-input/chef-input.tsx",
									"line": 52,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input/chef-input.tsx#L52"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						},
						{
							"id": 143,
							"name": "type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of input to use"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-input/chef-input.tsx",
									"line": 47,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input/chef-input.tsx#L47"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'text'"
						},
						{
							"id": 142,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value contained within the input."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-input/chef-input.tsx",
									"line": 42,
									"character": 27,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input/chef-input.tsx#L42"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								146,
								145,
								144,
								143,
								142
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-input/chef-input.tsx",
							"line": 37,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input/chef-input.tsx#L37"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						139
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-input/chef-input.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-input/chef-input.tsx#L1"
				}
			]
		},
		{
			"id": 183,
			"name": "atoms/chef-loading-spinner/chef-loading-spinner",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 184,
					"name": "ChefLoadingSpinner",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "A simple loading spinner for all your loading UI needs."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-loading-spinner size='300'></chef-loading-spinner>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 188,
							"name": "fixed",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Fixed styling (default is false and displays inline)"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-loading-spinner/chef-loading-spinner.tsx",
									"line": 24,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-loading-spinner/chef-loading-spinner.tsx#L24"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 187,
							"name": "size",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Width/height of the spinner"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-loading-spinner/chef-loading-spinner.tsx",
									"line": 19,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-loading-spinner/chef-loading-spinner.tsx#L19"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'16'"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								188,
								187
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-loading-spinner/chef-loading-spinner.tsx",
							"line": 14,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-loading-spinner/chef-loading-spinner.tsx#L14"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						184
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-loading-spinner/chef-loading-spinner.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-loading-spinner/chef-loading-spinner.tsx#L1"
				}
			]
		},
		{
			"id": 203,
			"name": "atoms/chef-markdown/chef-markdown",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 204,
					"name": "ChefMarkdown",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-markdown>`"
									},
									{
										"kind": "text",
										"text": " atom is used to parse and display markdown text."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-markdown text=\"# Heading with a [link](#to-nothing)\"></chef-markdown>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<textarea id='md-editor' placeholder='Type some markdown...'></textarea>\n<chef-markdown id='md-display'></chef-markdown>\n\n<style>\n #md-editor { width: 100%; min-height: 10em; }\n</style>\n\n<script>\n  const editor = document.getElementById('md-editor');\n  const display = document.getElementById('md-display');\n  editor.addEventListener('input', e => display.text = e.target.value);\n</script>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 207,
							"name": "text",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The markdown text to be parsed."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-markdown/chef-markdown.tsx",
									"line": 43,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-markdown/chef-markdown.tsx#L43"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								207
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-markdown/chef-markdown.tsx",
							"line": 39,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-markdown/chef-markdown.tsx#L39"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						204
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-markdown/chef-markdown.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-markdown/chef-markdown.tsx#L1"
				}
			]
		},
		{
			"id": 213,
			"name": "atoms/chef-option/chef-option",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 214,
					"name": "ChefOption",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-option>`"
									},
									{
										"kind": "text",
										"text": " atom is used to specify options for the ["
									},
									{
										"kind": "code",
										"text": "`<chef-select>`"
									},
									{
										"kind": "text",
										"text": "](/molecules/chef-select),\n["
									},
									{
										"kind": "code",
										"text": "`<chef-toggle>`"
									},
									{
										"kind": "text",
										"text": "](/molecules/chef-toggle), ["
									},
									{
										"kind": "code",
										"text": "`<chef-radio>`"
									},
									{
										"kind": "text",
										"text": "](/molecules/chef-radio), and\n["
									},
									{
										"kind": "code",
										"text": "`<chef-phat-radio>`"
									},
									{
										"kind": "text",
										"text": "](/molecules/chef-phat-radio) molecules."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style='width: 200px'>\n  <chef-select>\n    <chef-option>select something</chef-option>\n    <chef-option value='opt1'>Option 1</chef-option>\n    <chef-option value='opt2'>Option 2</chef-option>\n    <chef-option value='opt3'>Option 3</chef-option>\n  </chef-select>\n</div>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style='width: 200px'>\n  <chef-select>\n    <chef-option>select something</chef-option>\n    <chef-option value='opt1'>Option 1</chef-option>\n    <chef-option value='opt2' selected>Option 2</chef-option>\n    <chef-option value='opt3'>Option 3</chef-option>\n  </chef-select>\n</div>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style='width: 200px'>\n  <chef-select value='opt3'>\n    <chef-option>select something</chef-option>\n    <chef-option value='opt1' icon='assignment_ind'>Option 1</chef-option>\n    <chef-option value='opt2' icon='chrome_reader_mode'>Option 2</chef-option>\n    <chef-option value='opt3' icon='business_center'>Option 3</chef-option>\n  </chef-select>\n</div>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-toggle>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-toggle>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-toggle value='opt2'>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-toggle>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-toggle>\n  <chef-option value='opt1'><chef-icon>thumb_up</chef-icon></chef-option>\n  <chef-option value='opt2'><chef-icon>thumb_down</chef-icon></chef-option>\n</chef-toggle>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<script>\n  const toggle = document.querySelector('#ex1toggle');\n  toggle.addEventListener('toggle', (event) => alert(event.target.value));\n</script>\n\n<chef-toggle id='ex1toggle'>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-toggle>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-radio>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-radio>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-phat-radio>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-phat-radio>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 219,
							"name": "optionId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Used to identify different options.\nThis is set automatically so you shouldn't have to change it."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-option/chef-option.tsx",
									"line": 113,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-option/chef-option.tsx#L113"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 218,
							"name": "selected",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Specifies whether or not this option is selected."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-option/chef-option.tsx",
									"line": 107,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-option/chef-option.tsx#L107"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 217,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value that will be returned when the option is selected."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-option/chef-option.tsx",
									"line": 6,
									"character": 2,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-option/chef-option.tsx#L6"
								},
								{
									"fileName": "src/atoms/chef-option/chef-option.tsx",
									"line": 102,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-option/chef-option.tsx#L102"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								219,
								218,
								217
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-option/chef-option.tsx",
							"line": 5,
							"character": 17,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-option/chef-option.tsx#L5"
						},
						{
							"fileName": "src/atoms/chef-option/chef-option.tsx",
							"line": 97,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-option/chef-option.tsx#L97"
						}
					],
					"signatures": [
						{
							"id": 230,
							"name": "ChefOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "src/atoms/chef-option/chef-option.tsx",
									"line": 7,
									"character": 2,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-option/chef-option.tsx#L7"
								}
							],
							"parameters": [
								{
									"id": 231,
									"name": "getId",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 232,
							"name": "ChefOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "src/atoms/chef-option/chef-option.tsx",
									"line": 8,
									"character": 2,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-option/chef-option.tsx#L8"
								}
							],
							"parameters": [
								{
									"id": 233,
									"name": "getContents",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 234,
							"name": "ChefOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "src/atoms/chef-option/chef-option.tsx",
									"line": 9,
									"character": 2,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-option/chef-option.tsx#L9"
								}
							],
							"parameters": [
								{
									"id": 235,
									"name": "getValue",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
								"qualifiedName": "HTMLElement"
							},
							"name": "HTMLElement",
							"package": "typescript"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						214
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-option/chef-option.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-option/chef-option.tsx#L1"
				}
			]
		},
		{
			"id": 236,
			"name": "atoms/chef-pill/chef-pill",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 237,
					"name": "ChefPill",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Displays text in pill form. Used for tagging things and whatnot.\nYou can set the background color and text color with css when using\nthe atom directly. When the atom is part of another molecule there\nare two css variables provided.\n--pill-background-color\n--pill-text-color"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-pill>Some Pill Text</chef-pill>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-pill style=\"background-color: blue; color: white\">Some Pill Text</chef-pill>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style=\"--pill-background-color: black; --pill-text-color: white\">\n  <chef-input type='key-value' value='foobar:bizbang'></chef-input>\n</div>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/atoms/chef-pill/chef-pill.tsx",
							"line": 27,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-pill/chef-pill.tsx#L27"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						237
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-pill/chef-pill.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-pill/chef-pill.tsx#L1"
				}
			]
		},
		{
			"id": 242,
			"name": "atoms/chef-progress-bar/chef-progress-bar",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 243,
					"name": "ChefProgressBar",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-progress-bar>`"
									},
									{
										"kind": "text",
										"text": " atom is used to display progress status information."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-progress-bar value=\"10\"></chef-progress-bar>\n<chef-progress-bar value=\"50\"></chef-progress-bar>\n<chef-progress-bar value=\"90\"></chef-progress-bar>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-progress-bar value=\"0.1\" value-min=\"0\" value-max=\"1\"></chef-progress-bar>\n<chef-progress-bar value=\"0.5\" value-min=\"0\" value-max=\"1\"></chef-progress-bar>\n<chef-progress-bar value=\"0.9\" value-min=\"0\" value-max=\"1\"></chef-progress-bar>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-progress-bar value=\"10\" prefix-text=\"10%\"></chef-progress-bar>\n<chef-progress-bar value=\"50\" prefix-text=\"50%\"></chef-progress-bar>\n<chef-progress-bar value=\"90\" prefix-text=\"90%\"></chef-progress-bar>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-progress-bar value=\"10\" suffix-text=\"10%\"></chef-progress-bar>\n<chef-progress-bar value=\"50\" suffix-text=\"50%\"></chef-progress-bar>\n<chef-progress-bar value=\"90\" suffix-text=\"90%\"></chef-progress-bar>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-progress-bar value=\"10\" prefix-text=\"10% Complete\" suffix-text=\"90% Remaining\"></chef-progress-bar>\n<chef-progress-bar value=\"50\" prefix-text=\"50% Complete\" suffix-text=\"50% Remaining\"></chef-progress-bar>\n<chef-progress-bar value=\"90\" prefix-text=\"90% Complete\" suffix-text=\"10% Remaining\"></chef-progress-bar>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-progress-bar value=\"10\" prefix-text=\"10% complete\" suffix-text=\"01:00:00 until finished\"></chef-progress-bar>\n<chef-progress-bar value=\"50\" prefix-text=\"50% complete\" suffix-text=\"00:30:00 until finished\"></chef-progress-bar>\n<chef-progress-bar value=\"90\" prefix-text=\"90% complete\" suffix-text=\"00:01:00 until finished\"></chef-progress-bar>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-progress-bar value=\"0\" value-max=\"150\" prefix-text=\"Upload starting\" suffix-text=\"0 of 150 uploaded\"></chef-progress-bar>\n<chef-progress-bar value=\"75\" value-max=\"150\" prefix-text=\"Upload in progress\" suffix-text=\"75 of 150 uploaded\"></chef-progress-bar>\n<chef-progress-bar value=\"150\" value-max=\"150\"  prefix-text=\"Upload completed\" suffix-text=\"150 of 150 uploaded\"></chef-progress-bar>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 249,
							"name": "prefixText",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional text to display at the start of the progress bar."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
									"line": 65,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-progress-bar/chef-progress-bar.tsx#L65"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						},
						{
							"id": 250,
							"name": "suffixText",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optional text to display at the end of the progress bar."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
									"line": 70,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-progress-bar/chef-progress-bar.tsx#L70"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						},
						{
							"id": 246,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The current progress value."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
									"line": 50,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-progress-bar/chef-progress-bar.tsx#L50"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 248,
							"name": "valueMax",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The maximum progress value."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
									"line": 60,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-progress-bar/chef-progress-bar.tsx#L60"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "100"
						},
						{
							"id": 247,
							"name": "valueMin",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The minimum progress value."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
									"line": 55,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-progress-bar/chef-progress-bar.tsx#L55"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								249,
								250,
								246,
								248,
								247
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
							"line": 46,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-progress-bar/chef-progress-bar.tsx#L46"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						243
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-progress-bar/chef-progress-bar.tsx#L1"
				}
			]
		},
		{
			"id": 263,
			"name": "atoms/chef-scrollfader/chef-scrollfader",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 264,
					"name": "ChefScrollfader",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Scrollfader behavior. The element contained within the scrollfader will remain invisible until the page is scrolled to the scrollfader. The element will then fade in. This is generally used for elements that will have a fixed position on the page, otherwise they would never be visible.\n\nNote: IE11 Support is dependent on a polyfill."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style='height: 2000px'>\n  <h1>Scroll to see the scrollfader in action</h1>\n  <chef-scrollfader>\n    <h2 style='position: fixed;'>I should fade in when the document is scrolled</h2>\n  </chef-scrollfader>\n</div>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/atoms/chef-scrollfader/chef-scrollfader.tsx",
							"line": 22,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-scrollfader/chef-scrollfader.tsx#L22"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						264
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-scrollfader/chef-scrollfader.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-scrollfader/chef-scrollfader.tsx#L1"
				}
			]
		},
		{
			"id": 272,
			"name": "atoms/chef-snippet/chef-snippet",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 273,
					"name": "ChefSnippet",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-snippet>`"
									},
									{
										"kind": "text",
										"text": " atom is used to display syntax-highlighted code blocks.\n\nAs of 2018.10.25 the default supported languages are:\n\n -  markup (and aliases xml, html mathml, and svg)\n -  javascript (and alias js)\n -  css\n -  clike (read this one as \"like the C language\")\n\nAutomate is configured to use these additional languages as well:\n\n -  json\n -  ruby"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-snippet code=\"<h1>Highlight me</h1>\"></chef-snippet>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<details style=\"margin:1em;cursor:pointer;\">\n  <summary>Example Snippet</summary>\n  <chef-snippet code=\"const el = document.querySelector('h1');\" lang=\"js\"></chef-snippet>\n</details>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 276,
							"name": "code",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The code snippet to be highlighted."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-snippet/chef-snippet.tsx",
									"line": 46,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-snippet/chef-snippet.tsx#L46"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						},
						{
							"id": 277,
							"name": "lang",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The language the code snippet is written in.\nSee the \"Description\" for active languages and http://prismjs.com/#languages-list for\na list of all available languages."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-snippet/chef-snippet.tsx",
									"line": 53,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-snippet/chef-snippet.tsx#L53"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'html'"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								276,
								277
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-snippet/chef-snippet.tsx",
							"line": 42,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-snippet/chef-snippet.tsx#L42"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						273
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-snippet/chef-snippet.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-snippet/chef-snippet.tsx#L1"
				}
			]
		},
		{
			"id": 284,
			"name": "atoms/chef-sort-toggle/chef-sort-toggle",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 285,
					"name": "ChefSortToggle",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-sort-toggle>`"
									},
									{
										"kind": "text",
										"text": " atom is used to display a sort button."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-sort-toggle order='none'></chef-sort-toggle>\n<chef-sort-toggle order='asc'></chef-sort-toggle>\n<chef-sort-toggle order='desc'></chef-sort-toggle>\n<chef-sort-toggle></chef-sort-toggle>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-table class='table'>\n  <chef-tr>\n    <chef-th>\n      Name\n      <chef-sort-toggle sort=\"name\"></chef-sort-toggle>\n    </chef-th>\n    <chef-th>\n      Date Created\n      <chef-sort-toggle sort=\"date\" order='asc'></chef-sort-toggle>\n    </chef-th>\n    <chef-th>\n      Status\n      <chef-sort-toggle sort=\"status\" order='desc'></chef-sort-toggle>\n    </chef-th>\n  </chef-tr>\n</chef-table>\n<chef-snippet class='snippet' lang='js'></chef-snippet>\n\n<style>\n  .table { margin: 1em; }\n</style>\n\n<script>\n  const table = document.querySelector('.table');\n  const snippet = document.querySelector('.snippet');\n  table.addEventListener('sort-toggled', event => {\n    snippet.code = JSON.stringify(event.detail, null, 2);\n  });\n</script>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 288,
							"name": "order",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicates whether sort button is displayed as "
									},
									{
										"kind": "code",
										"text": "`asc`"
									},
									{
										"kind": "text",
										"text": " ↑, "
									},
									{
										"kind": "code",
										"text": "`desc`"
									},
									{
										"kind": "text",
										"text": " ↓, or "
									},
									{
										"kind": "code",
										"text": "`none`"
									},
									{
										"kind": "text",
										"text": " ↕."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
									"line": 53,
									"character": 48,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-sort-toggle/chef-sort-toggle.tsx#L53"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "asc"
									},
									{
										"type": "literal",
										"value": "desc"
									},
									{
										"type": "literal",
										"value": "none"
									}
								]
							},
							"defaultValue": "'none'"
						},
						{
							"id": 289,
							"name": "sort",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optionally assign a column sort name."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
									"line": 58,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-sort-toggle/chef-sort-toggle.tsx#L58"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						},
						{
							"id": 290,
							"name": "sortToggled",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "`sort-toggled`"
									},
									{
										"kind": "text",
										"text": " event is emitted whenever the "
									},
									{
										"kind": "code",
										"text": "`order`"
									},
									{
										"kind": "text",
										"text": " prop is changed.\n\nDetail: "
									},
									{
										"kind": "code",
										"text": "`{ order: 'asc' | 'desc' | 'none', sort: string }`"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
									"line": 65,
									"character": 55,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-sort-toggle/chef-sort-toggle.tsx#L65"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@stencil/core/internal/stencil-public-runtime.d.ts",
									"qualifiedName": "EventEmitter"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "EventEmitter",
								"package": "@stencil/core"
							}
						},
						{
							"id": 291,
							"name": "toggle",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
									"line": 71,
									"character": 8,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-sort-toggle/chef-sort-toggle.tsx#L71"
								}
							],
							"signatures": [
								{
									"id": 292,
									"name": "toggle",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Toggles order "
											},
											{
												"kind": "code",
												"text": "`prop`"
											},
											{
												"kind": "text",
												"text": " between "
											},
											{
												"kind": "code",
												"text": "`asc`"
											},
											{
												"kind": "text",
												"text": " ↑, "
											},
											{
												"kind": "code",
												"text": "`desc`"
											},
											{
												"kind": "text",
												"text": " ↓, or "
											},
											{
												"kind": "code",
												"text": "`none`"
											},
											{
												"kind": "text",
												"text": " ↕."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
											"line": 71,
											"character": 8,
											"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-sort-toggle/chef-sort-toggle.tsx#L71"
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								288,
								289,
								290
							]
						},
						{
							"title": "Methods",
							"children": [
								291
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
							"line": 48,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-sort-toggle/chef-sort-toggle.tsx#L48"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						285
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-sort-toggle/chef-sort-toggle.tsx#L1"
				}
			]
		},
		{
			"id": 297,
			"name": "atoms/chef-step/chef-step",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 298,
					"name": "ChefStep",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-step>`"
									},
									{
										"kind": "text",
										"text": " atom is used to define a step within a\n["
									},
									{
										"kind": "code",
										"text": "`<chef-stepper>`"
									},
									{
										"kind": "text",
										"text": "](/molecules/chef-stepper) molecule."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-stepper>\n  <chef-step>Add nodes</chef-step>\n  <chef-step>Add credentials</chef-step>\n  <chef-step selected>Preview nodes</chef-step>\n  <chef-step disabled>Add profiles</chef-step>\n  <chef-step disabled>Add scheduler</chef-step>\n</chef-stepper>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-stepper>\n  <chef-step>\n    <chef-icon>check</chef-icon>\n    <a href=\"\">Add nodes</a>\n  </chef-step>\n  <chef-step>\n    <chef-icon>check</chef-icon>\n    <a href=\"\">Add credentials</a>\n  </chef-step>\n  <chef-step selected>\n    <a href=\"\">Preview nodes</a>\n  </chef-step>\n  <chef-step disabled>\n    <a href=\"\">Add profiles</a>\n  </chef-step>\n  <chef-step disabled>\n    <a href=\"\">Add scheduler</a>\n  </chef-step>\n</chef-stepper>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 301,
							"name": "disabled",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicates that the step is disabled."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-step/chef-step.tsx",
									"line": 47,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-step/chef-step.tsx#L47"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 302,
							"name": "selected",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicates that the step is selected."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-step/chef-step.tsx",
									"line": 52,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-step/chef-step.tsx#L52"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								301,
								302
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-step/chef-step.tsx",
							"line": 42,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-step/chef-step.tsx#L42"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						298
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-step/chef-step.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-step/chef-step.tsx#L1"
				}
			]
		},
		{
			"id": 305,
			"name": "atoms/chef-subheading/chef-subheading",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 306,
					"name": "ChefSubheading",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Child component for chef-page-header that displays the sub-heading (the text below the heading).\nOnly text and inline elements should be nested inside of this element."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-page-header>\n  <chef-heading>Some Heading Text</chef-heading>\n  <chef-subheading>Some subheading text that goes below the heading.</chef-subheading>\n</chef-page-header>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/atoms/chef-subheading/chef-subheading.tsx",
							"line": 19,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-subheading/chef-subheading.tsx#L19"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						306
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-subheading/chef-subheading.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-subheading/chef-subheading.tsx#L1"
				}
			]
		},
		{
			"id": 311,
			"name": "atoms/chef-tooltip/chef-tooltip",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 312,
					"name": "ChefTooltip",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "chef-tooltip provides a way to create simple tooltips for elements.\nYou can change the background color of the tooltip with the --tooltip-color css variable."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip for='fancy-button'>Fancy Button Tooltip</chef-tooltip>\n<chef-button primary id='fancy-button'>A Button</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip for='another-button' delay=1000>A Tooltip with a longer delay</chef-tooltip>\n<chef-button primary id='another-button'>Another Button</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip for='not-a-button'>A tooltip for something other than a button</chef-tooltip>\n<div style='padding: 1em;' id='not-a-button'>This is not a button. But it has a tooltip.</div>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip for='complex-tooltip'>\n  <div style='padding: 1em;'>\n    <span style='color: red;'>Tooltips can even contain markup and styling</span>\n  </div>\n</chef-tooltip>\n<chef-button primary id='complex-tooltip'>Yet another button</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip style='--tooltip-color: lightblue;' for='fancy-background'>A Tooltip Of A Different Color</chef-tooltip>\n<chef-button primary id='fancy-background'>Colored Tooltips!</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip follow for='following-tooltip'>Tooltip that follows</chef-tooltip>\n<p id='following-tooltip'>\n   once upon a midnight dreary, while i pondered, weak and weary. over many a\n   quaint and curious volume of forgotten lore. while i nodded, nearly napping,\n   suddenly there came a tapping. as of some one gently rapping, rapping at my\n   chamber door. 'tis some visiter, i muttered, tapping at my chamber door. only\n   this, and nothing more. ah, distinctly i remember it was in the bleak december.\n   and each separate dying ember wrought its ghost upon the floor. eagerly i wished\n   the morrow;—vainly i had sought to borrow. from my books surcease of\n   sorrow—sorrow for the lost lenore. for the rare and radiant maiden whom the\n   angels name lenore. nameless here for evermore. and the silken sad uncertain\n   rustling of each purple curtain thrilled me, filled me with fantastic terrors\n</p>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip offset='-50 0' for='offset-tooltip'>offset tooltip</chef-tooltip>\n<chef-button primary id='offset-tooltip'>Button</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip position='left' for='left-tooltip'>Left</chef-tooltip>\n<chef-button primary id='left-tooltip'>Left</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip position='right' for='right-tooltip'>Right</chef-tooltip>\n<chef-button primary id='right-tooltip'>Right</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip position='bottom' for='bottom-tooltip'>Bottom</chef-tooltip>\n<chef-button primary id='bottom-tooltip'>Bottom</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip offset='0 -50' position='left' for='offset-position'>Left offset</chef-tooltip>\n<chef-button primary id='offset-position'>Left offset</chef-button>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip follow for='following-left' position='left'>Tooltip that follows</chef-tooltip>\n<p id='following-left'>\n   once upon a midnight dreary, while i pondered, weak and weary. over many a\n   quaint and curious volume of forgotten lore. while i nodded, nearly napping,\n   suddenly there came a tapping. as of some one gently rapping, rapping at my\n   chamber door. 'tis some visiter, i muttered, tapping at my chamber door. only\n   this, and nothing more. ah, distinctly i remember it was in the bleak december.\n   and each separate dying ember wrought its ghost upon the floor. eagerly i wished\n   the morrow;—vainly i had sought to borrow. from my books surcease of\n   sorrow—sorrow for the lost lenore. for the rare and radiant maiden whom the\n   angels name lenore. nameless here for evermore. and the silken sad uncertain\n   rustling of each purple curtain thrilled me, filled me with fantastic terrors\n</p>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tooltip interactable for='interactable-example'>\n  The contents of this tooltip can be interacted with.\n</chef-tooltip>\n<chef-button primary id='interactable-example'>Interactable Tooltip</chef-button>\n<p>\n  By default, tooltip content can't be interacted with because the tooltip will hide\n  after leaving the tooltip target. Applying an <code>interactable</code> attribute\n  will prevent the tooltip from hiding while the mouse cursor is within the tooltip.\n</p>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 316,
							"name": "delay",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The delay before the tooltip is displayed in milliseconds."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
									"line": 108,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-tooltip/chef-tooltip.tsx#L108"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "100"
						},
						{
							"id": 319,
							"name": "follow",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If set the tooltip will follow the mouse when it is over the targetted element."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
									"line": 124,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-tooltip/chef-tooltip.tsx#L124"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 315,
							"name": "for",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The ID of the element to attach the tooltip"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
									"line": 103,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-tooltip/chef-tooltip.tsx#L103"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 320,
							"name": "interactable",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If set the tooltip will allow the mouse cursor to interact with its content."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
									"line": 129,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-tooltip/chef-tooltip.tsx#L129"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 318,
							"name": "offset",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The x and y offset of the tooltip in pixels."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
									"line": 119,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-tooltip/chef-tooltip.tsx#L119"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'0 0'"
						},
						{
							"id": 317,
							"name": "position",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The position of the tooltip in relation to the mouse/element.\nCan be one of "
									},
									{
										"kind": "code",
										"text": "`top`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`left`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`right`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`bottom`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
									"line": 114,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-tooltip/chef-tooltip.tsx#L114"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "top"
									},
									{
										"type": "literal",
										"value": "left"
									},
									{
										"type": "literal",
										"value": "right"
									},
									{
										"type": "literal",
										"value": "bottom"
									}
								]
							},
							"defaultValue": "'top'"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								316,
								319,
								315,
								320,
								318,
								317
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
							"line": 98,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-tooltip/chef-tooltip.tsx#L98"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						312
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-tooltip/chef-tooltip.tsx#L1"
				}
			]
		},
		{
			"id": 341,
			"name": "atoms/chef-trap-focus/chef-trap-focus",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 342,
					"name": "ChefTrapFocus",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "A wrapper element that traps focus inside of the element. Very useful for accessibility purposes."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-trap-focus>\n <input type=\"text\"/>\n <p>Some non-focus-able text</p>\n <p tabindex=\"0\">Some focus-able text</p>\n <input type=\"text\"/>\n <button>Button</button>\n</chef-trap-focus>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 346,
							"name": "trap",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Class name to omit"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/atoms/chef-trap-focus/chef-trap-focus.tsx",
									"line": 29,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-trap-focus/chef-trap-focus.tsx#L29"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								346
							]
						}
					],
					"sources": [
						{
							"fileName": "src/atoms/chef-trap-focus/chef-trap-focus.tsx",
							"line": 22,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-trap-focus/chef-trap-focus.tsx#L22"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						342
					]
				}
			],
			"sources": [
				{
					"fileName": "src/atoms/chef-trap-focus/chef-trap-focus.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/atoms/chef-trap-focus/chef-trap-focus.tsx#L1"
				}
			]
		},
		{
			"id": 351,
			"name": "charts/chef-data-point/chef-data-point",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 352,
					"name": "ChefDataPoint",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "chef-data-point is used in conjunction with various charts to specify data points."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<style>\n  chef-radial-chart .failed, chef-radial-chart .critical {\n    color: var(--chef-critical);\n  }\n chef-radial-chart .warning, chef-radial-chart .warning {\n    color: var(--chef-primary);\n  }\n  chef-radial-chart .success, chef-radial-chart .major {\n    color: var(--chef-ok);\n  }\n  chef-radial-chart .skipped, chef-radial-chart .minor {\n    color: var(--chef-unknown);\n  }\n</style>\n<chef-radial-chart style=\"width: 220px; height: 220px;\">\n  <span slot=\"innerText\">Text for the center of the chart</span>\n\n  <chef-data-point value=\"4\" class=\"failed\">4 Failed</chef-data-point>\n  <chef-data-point value=\"3\" class=\"warning\">3 Failed</chef-data-point>\n  <chef-data-point value=\"2\" class=\"success\">2 Successful</chef-data-point>\n  <chef-data-point value=\"1\" class=\"skipped\">1 Skipped</chef-data-point>\n\n  <chef-data-point value=\"4\" secondary class=\"critical\">Critical</chef-data-point>\n  <chef-data-point value=\"3\" secondary class=\"warning\">Warning</chef-data-point>\n  <chef-data-point value=\"2\" secondary class=\"major\">Major</chef-data-point>\n  <chef-data-point value=\"1\" secondary class=\"minor\">Minor</chef-data-point>\n</chef-radial-chart>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 356,
							"name": "secondary",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Some charts support special secondary data points."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/charts/chef-data-point/chef-data-point.tsx",
									"line": 49,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/charts/chef-data-point/chef-data-point.tsx#L49"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 355,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value assigned to the data point."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/charts/chef-data-point/chef-data-point.tsx",
									"line": 44,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/charts/chef-data-point/chef-data-point.tsx#L44"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								356,
								355
							]
						}
					],
					"sources": [
						{
							"fileName": "src/charts/chef-data-point/chef-data-point.tsx",
							"line": 39,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/charts/chef-data-point/chef-data-point.tsx#L39"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						352
					]
				}
			],
			"sources": [
				{
					"fileName": "src/charts/chef-data-point/chef-data-point.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/charts/chef-data-point/chef-data-point.tsx#L1"
				}
			]
		},
		{
			"id": 362,
			"name": "charts/chef-radial-chart/chef-radial-chart",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 363,
					"name": "ChefRadialChart",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "chef-radial-chart is used to create radial charts. Data points are specified using\nchef-data-point. Colors and various styling can be done through css by setting a\nclass on chef-data-point. Secondary data points are displayed as an outer ring\naround the primary chart. There is also a slot, innerText, provided to add text\nto the center of the radial.\nModifying data points after render will not automatically trigger a re-render. After\nmodifying your data points call the "
									},
									{
										"kind": "code",
										"text": "`updateDataPoints()`"
									},
									{
										"kind": "text",
										"text": " method on the component to\ntrigger a re-render."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<style>\n  chef-radial-chart .failed, chef-radial-chart .critical {\n    color: var(--chef-critical);\n  }\n  chef-radial-chart .warning, chef-radial-chart .warning {\n    color: var(--chef-warning);\n  }\n  chef-radial-chart .success, chef-radial-chart .major {\n    color: var(--chef-ok);\n  }\n  chef-radial-chart .skipped, chef-radial-chart .minor {\n    color: var(--chef-unknown);\n  }\n</style>\n<chef-radial-chart style=\"width: 220px; height: 220px;\">\n  <span slot=\"innerText\">Text for the center of the chart</span>\n\n  <chef-data-point value=\"4\" class=\"failed\">4 Failed</chef-data-point>\n  <chef-data-point value=\"3\" class=\"warning\">3 Warning</chef-data-point>\n  <chef-data-point value=\"2\" class=\"success\">2 Successful</chef-data-point>\n  <chef-data-point value=\"1\" class=\"skipped\">1 Skipped</chef-data-point>\n\n  <chef-data-point value=\"4\" secondary class=\"critical\">Critical</chef-data-point>\n  <chef-data-point value=\"3\" secondary class=\"warning\">Warning</chef-data-point>\n  <chef-data-point value=\"2\" secondary class=\"major\">Major</chef-data-point>\n  <chef-data-point value=\"1\" secondary class=\"minor\">Minor</chef-data-point>\n</chef-radial-chart>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<style>\n  chef-radial-chart .failed, chef-radial-chart .critical {\n    color: var(--chef-critical);\n  }\n  chef-radial-chart .warning, chef-radial-chart .warning {\n    color: var(--chef-warning);\n  }\n  chef-radial-chart .success, chef-radial-chart .major {\n    color: var(--chef-ok);\n  }\n  chef-radial-chart .skipped, chef-radial-chart .minor {\n    color: var(--chef-unknown);\n  }\n</style>\n<chef-radial-chart gap-size=\"5\" style=\"width: 220px; height: 220px;\">\n  <span slot=\"innerText\">Text for the center of the chart</span>\n\n  <chef-data-point value=\"\" class=\"failed\">4 Failed</chef-data-point>\n  <chef-data-point value=\"\" class=\"warning\">3 Warning</chef-data-point>\n  <chef-data-point value=\"2\" class=\"success\">2 Successful</chef-data-point>\n  <chef-data-point value=\"1\" class=\"skipped\">1 Skipped</chef-data-point>\n</chef-radial-chart>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 367,
							"name": "gapSize",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The width of the gap (in degrees) to apply between chart segments."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/charts/chef-radial-chart/chef-radial-chart.tsx",
									"line": 92,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/charts/chef-radial-chart/chef-radial-chart.tsx#L92"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "2"
						},
						{
							"id": 366,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optionally set an id. This is automatically set to a unique ID if left blank."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/charts/chef-radial-chart/chef-radial-chart.tsx",
									"line": 87,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/charts/chef-radial-chart/chef-radial-chart.tsx#L87"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 368,
							"name": "tooltips",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Optionally hide tooltips. They are shown by default."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/charts/chef-radial-chart/chef-radial-chart.tsx",
									"line": 97,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/charts/chef-radial-chart/chef-radial-chart.tsx#L97"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								367,
								366,
								368
							]
						}
					],
					"sources": [
						{
							"fileName": "src/charts/chef-radial-chart/chef-radial-chart.tsx",
							"line": 82,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/charts/chef-radial-chart/chef-radial-chart.tsx#L82"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						363
					]
				}
			],
			"sources": [
				{
					"fileName": "src/charts/chef-radial-chart/chef-radial-chart.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/charts/chef-radial-chart/chef-radial-chart.tsx#L1"
				}
			]
		},
		{
			"id": 864,
			"name": "design/chef-colors/chef-colors",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 865,
					"name": "ChefColors",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Chef colors"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/design/chef-colors/chef-colors.tsx",
							"line": 12,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/design/chef-colors/chef-colors.tsx#L12"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						865
					]
				}
			],
			"sources": [
				{
					"fileName": "src/design/chef-colors/chef-colors.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/design/chef-colors/chef-colors.tsx#L1"
				}
			]
		},
		{
			"id": 904,
			"name": "entities/docs/doc.helpers",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 912,
					"name": "filterTags",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "src/entities/docs/doc.helpers.ts",
							"line": 33,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L33"
						}
					],
					"signatures": [
						{
							"id": 913,
							"name": "filterTags",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "A list containing the text for each matching tag."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "src/entities/docs/doc.helpers.ts",
									"line": 33,
									"character": 25,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L33"
								}
							],
							"parameters": [
								{
									"id": 914,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tag name to search for."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 915,
									"name": "json",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The json object to search through."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					]
				},
				{
					"id": 908,
					"name": "findTag",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "src/entities/docs/doc.helpers.ts",
							"line": 23,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L23"
						}
					],
					"signatures": [
						{
							"id": 909,
							"name": "findTag",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The text for the first matching tag."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "src/entities/docs/doc.helpers.ts",
									"line": 23,
									"character": 22,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L23"
								}
							],
							"parameters": [
								{
									"id": 910,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The tag name to search for."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 911,
									"name": "json",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The json object to search through."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 916,
					"name": "getComponentMetaData",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "src/entities/docs/doc.helpers.ts",
							"line": 50,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L50"
						}
					],
					"signatures": [
						{
							"id": 917,
							"name": "getComponentMetaData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object containing the components metadata."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "src/entities/docs/doc.helpers.ts",
									"line": 50,
									"character": 35,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L50"
								}
							],
							"parameters": [
								{
									"id": 918,
									"name": "json",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The json object to extract metadata from."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 919,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 922,
											"name": "shadow",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/entities/docs/doc.helpers.ts",
													"line": 50,
													"character": 85,
													"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L50"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 921,
											"name": "styleUrl",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/entities/docs/doc.helpers.ts",
													"line": 50,
													"character": 67,
													"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L50"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 920,
											"name": "tag",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"sources": [
												{
													"fileName": "src/entities/docs/doc.helpers.ts",
													"line": 50,
													"character": 54,
													"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L50"
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												922,
												921,
												920
											]
										}
									],
									"sources": [
										{
											"fileName": "src/entities/docs/doc.helpers.ts",
											"line": 50,
											"character": 53,
											"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L50"
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 923,
					"name": "getType",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "src/entities/docs/doc.helpers.ts",
							"line": 79,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L79"
						}
					],
					"signatures": [
						{
							"id": 924,
							"name": "getType",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of the component is derived from it's parent directory.\nIt can be one of 'atoms', 'molecules', 'charts' or 'templates'."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The string representing the component type."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "src/entities/docs/doc.helpers.ts",
									"line": 79,
									"character": 22,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L79"
								}
							],
							"parameters": [
								{
									"id": 925,
									"name": "json",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The json object to extract the type from."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"children": [
						912,
						908,
						916,
						923
					]
				}
			],
			"sources": [
				{
					"fileName": "src/entities/docs/doc.helpers.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/entities/docs/doc.helpers.ts#L1"
				}
			]
		},
		{
			"id": 960,
			"name": "internal/chef-example/chef-example",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 961,
					"name": "ChefExample",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-example>`"
									},
									{
										"kind": "text",
										"text": " molecule is used to display syntax-highlighted example code alongside their\nrendered output."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-example code=\"<h1>Highlight me</h1>\"></chef-example>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 965,
							"name": "code",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The example code to be presented."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/internal/chef-example/chef-example.tsx",
									"line": 22,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/internal/chef-example/chef-example.tsx#L22"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								965
							]
						}
					],
					"sources": [
						{
							"fileName": "src/internal/chef-example/chef-example.tsx",
							"line": 15,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/internal/chef-example/chef-example.tsx#L15"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						961
					]
				}
			],
			"sources": [
				{
					"fileName": "src/internal/chef-example/chef-example.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/internal/chef-example/chef-example.tsx#L1"
				}
			]
		},
		{
			"id": 986,
			"name": "molecules/chef-banner/chef-banner",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 987,
					"name": "ChefBanner",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Displays a header bar with the specified content and a button to take corrective action (if passed)."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-banner type=\"warn\">This is a warning without a button!</chef-banner>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-banner type=\"warn\" button-text=\"Click me\">\n   This is a warning with a button!&nbsp<a href=\"https://www.chef.io/contact-us/\" target=\"_blank\">Contact support for help</a>.\n</chef-banner>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-banner type=\"info\" button-text=\"Click me\">This is just info.</chef-banner>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-banner>This is also an info message.</chef-banner>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 991,
							"name": "buttonText",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The text of the chef-button. If nothing is passed, there will not be a button."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-banner/chef-banner.tsx",
									"line": 35,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-banner/chef-banner.tsx#L35"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 990,
							"name": "type",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The type of header to show. Can be one of 'warn' or 'info'."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-banner/chef-banner.tsx",
									"line": 30,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-banner/chef-banner.tsx#L30"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'info'"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								991,
								990
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-banner/chef-banner.tsx",
							"line": 25,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-banner/chef-banner.tsx#L25"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						987
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-banner/chef-banner.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-banner/chef-banner.tsx#L1"
				}
			]
		},
		{
			"id": 999,
			"name": "molecules/chef-combobox/chef-combobox",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1000,
					"name": "ChefCombobox",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The combobox is used to layout combination chef-select and chef-input fields.\nThe combobox can support one or more chef-inputs. Additional elements are layed\nout via css grids."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-combobox>\n  <chef-select>\n    <chef-option>Select Something</chef-option>\n    <chef-option value='opt1'>Option 1</chef-option>\n    <chef-option value='opt2'>Option 2</chef-option>\n    <chef-option value='opt3'>Option 3</chef-option>\n    <chef-option value='opt4'>Option 4</chef-option>\n  </chef-select>\n  <chef-input></chef-input>\n</chef-combobox>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-combobox>\n  <chef-select>\n    <chef-option>Select Something</chef-option>\n    <chef-option value='opt1'>Option 1</chef-option>\n    <chef-option value='opt2'>Option 2</chef-option>\n    <chef-option value='opt3'>Option 3</chef-option>\n    <chef-option value='opt4'>Option 4</chef-option>\n  </chef-select>\n  <chef-input></chef-input>\n  <chef-input></chef-input>\n  <chef-input></chef-input>\n  <chef-input></chef-input>\n</chef-combobox>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-combobox>\n  <chef-select>\n    <chef-option>Select Something</chef-option>\n    <chef-option value='opt1'>Option 1</chef-option>\n    <chef-option value='opt2'>Option 2</chef-option>\n    <chef-option value='opt3'>Option 3</chef-option>\n    <chef-option value='opt4'>Option 4</chef-option>\n  </chef-select>\n\n  <chef-input></chef-input>\n  <chef-button secondary caution><chef-icon>delete</chef-icon></chef-button>\n\n  <chef-input></chef-input>\n  <chef-button secondary caution><chef-icon>delete</chef-icon></chef-button>\n\n  <chef-input></chef-input>\n  <chef-button secondary caution><chef-icon>delete</chef-icon></chef-button>\n\n  <chef-input></chef-input>\n  <chef-button secondary caution><chef-icon>delete</chef-icon></chef-button>\n\n</chef-combobox>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/molecules/chef-combobox/chef-combobox.tsx",
							"line": 64,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-combobox/chef-combobox.tsx#L64"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1000
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-combobox/chef-combobox.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-combobox/chef-combobox.tsx#L1"
				}
			]
		},
		{
			"id": 1013,
			"name": "molecules/chef-expander/chef-expander",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1014,
					"name": "ChefExpander",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-expander>`"
									},
									{
										"kind": "text",
										"text": " molecule is used to expand/collapse content."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-expander>\n  <h1>Some collapsed content</h1>\n</chef-expander>\n<chef-expander opened>\n  <h1>Some expanded content</h1>\n</chef-expander>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button secondary id='open-btn'>Open</chef-button>\n<chef-button secondary id='close-btn'>Close</chef-button>\n<chef-button secondary id='toggle-btn'>Toggle</chef-button>\n<chef-expander id='expander'>\n  <h1>Some content</h1>\n</chef-expander>\n\n<style>\n chef-button,\n chef-expander[opened] { margin: 1em; }\n</style>\n\n<script>\n  const openBtn = document.getElementById('open-btn');\n  const closeBtn = document.getElementById('close-btn');\n  const toggleBtn = document.getElementById('toggle-btn');\n  const expander = document.getElementById('expander');\n\n  openBtn.addEventListener('click', e => expander.open());\n  closeBtn.addEventListener('click', e => expander.close());\n  toggleBtn.addEventListener('click', e => expander.toggle());\n</script>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1017,
							"name": "opened",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicates that the expander is opened."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-expander/chef-expander.tsx",
									"line": 48,
									"character": 48,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-expander/chef-expander.tsx#L48"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1017
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-expander/chef-expander.tsx",
							"line": 43,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-expander/chef-expander.tsx#L43"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1014
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-expander/chef-expander.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-expander/chef-expander.tsx#L1"
				}
			]
		},
		{
			"id": 1026,
			"name": "molecules/chef-modal/chef-modal",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1027,
					"name": "ChefModal",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Displays a modal that may be closed if it is unlocked. It cannot be closed if\n"
									},
									{
										"kind": "code",
										"text": "`locked`"
									},
									{
										"kind": "text",
										"text": " is set to true.\n\nAn unlocked modal can be closed by clicking the exit button in the top right\ncorner, by clicking outside the modal, or by pressing "
									},
									{
										"kind": "code",
										"text": "`<escape>`"
									},
									{
										"kind": "text",
										"text": ".\nThe "
									},
									{
										"kind": "code",
										"text": "`visible`"
									},
									{
										"kind": "text",
										"text": " property is set to "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " by default.\n\nWhen you want to trigger the modal to display, set the "
									},
									{
										"kind": "code",
										"text": "`visible`"
									},
									{
										"kind": "text",
										"text": " property\nto "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": ". It works best if you bind a variable on the parent Angular component\nto the modal's "
									},
									{
										"kind": "code",
										"text": "`visible`"
									},
									{
										"kind": "text",
										"text": " property.\n\n"
									},
									{
										"kind": "code",
										"text": "```html\n<chef-modal [visible]=\"modalVisibleVar\">\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe parent component should also include "
									},
									{
										"kind": "code",
										"text": "`openModal`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`closeModal`"
									},
									{
										"kind": "text",
										"text": " handler functions.\n\nThe modal always appears centered on the screen. The height automatically\nadjusts to fit its content. The width defaults to 700 pixels but can be adjusted\nby setting the following rule in the Angular parent component's css:\n\n"
									},
									{
										"kind": "code",
										"text": "```css\nchef-modal {\n   --modal-width: 500px;\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nFor accessibility purposes, the element containing the rendered title of the modal\n(typically an "
									},
									{
										"kind": "code",
										"text": "`h2`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`h3`"
									},
									{
										"kind": "text",
										"text": ") must be given a unique ID, and that same ID\nshould be used for the modal's "
									},
									{
										"kind": "code",
										"text": "`label`"
									},
									{
										"kind": "text",
										"text": " property, as shown.\nThat "
									},
									{
										"kind": "code",
										"text": "`label`"
									},
									{
										"kind": "text",
										"text": " value is also set as the modal's "
									},
									{
										"kind": "code",
										"text": "`aria-labelledby`"
									},
									{
										"kind": "text",
										"text": " attribute.\n\n"
									},
									{
										"kind": "code",
										"text": "```html\n<chef-modal label=\"unique-id\">\n   <h2 id=\"unique-id\"> TITLE OF MODAL </h2>\n```"
									},
									{
										"kind": "text",
										"text": "\n\nUsing custom autofocus\nBy default, autofocus will apply to the modal itself on locked modals\nand to the close button on unlocked modals.  We can customize where\nthe autofocus goes first, by adding the attribute \"firstFocus\" to the\ndesired element.  Currently this works with all standard HTML input elements as\nwell as our custom chef-button element."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-modal locked=\"false\" label=\"unique-id\">\n<span id=\"unique-id\" slot=\"title\"> Hey! </span>\n<p>\n  Since the modal is strictly a display component, it can only be opened or\n  closed via external events.\n</p>\n<p>\n  To turn on this modal, go to the `Elements` pane of `Dev Tools` and select\n  the `chef-modal` element.\n</p>\n<p> Switch to the `Console` pane and type `$0.visible = true`. </p>\n<p> Type `$0.visible = false` to turn off the modal again.</p>\n</chef-modal>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-modal label=\"with-custom-focus\" label=\"example-id\">\n   <h2 slot=\"title\" id=\"example-id\"> Using custom autofocus </h2>\n   <label>this input will be focused upon opening</label>\n   <input type=\"text\" firstFocus/>\n</chef-modal>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1033,
							"name": "closeModal",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Emitted when the modal closes."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-modal/chef-modal.tsx",
									"line": 108,
									"character": 11,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-modal/chef-modal.tsx#L108"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@stencil/core/internal/stencil-public-runtime.d.ts",
									"qualifiedName": "EventEmitter"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "EventEmitter",
								"package": "@stencil/core"
							}
						},
						{
							"id": 1034,
							"name": "el",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The html element of the modal."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-modal/chef-modal.tsx",
									"line": 113,
									"character": 13,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-modal/chef-modal.tsx#L113"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "HTMLElement"
								},
								"name": "HTMLElement",
								"package": "typescript"
							}
						},
						{
							"id": 1032,
							"name": "label",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The modal's title.\nThe modal's "
									},
									{
										"kind": "code",
										"text": "`aria-labelledby`"
									},
									{
										"kind": "text",
										"text": " attribute is set to this value.\nThis should be a unique id, and should match the "
									},
									{
										"kind": "code",
										"text": "`id`"
									},
									{
										"kind": "text",
										"text": " attribute of the contained element\n(e.g. "
									},
									{
										"kind": "code",
										"text": "`h2`"
									},
									{
										"kind": "text",
										"text": ") that actually displays the title of the modal."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-modal/chef-modal.tsx",
									"line": 103,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-modal/chef-modal.tsx#L103"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1030,
							"name": "locked",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Prevents the modal from being closed when true."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-modal/chef-modal.tsx",
									"line": 91,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-modal/chef-modal.tsx#L91"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 1035,
							"name": "prevFocusedElement",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The last element to be focused before the modal opened."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-modal/chef-modal.tsx",
									"line": 118,
									"character": 11,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-modal/chef-modal.tsx#L118"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "HTMLElement"
								},
								"name": "HTMLElement",
								"package": "typescript"
							}
						},
						{
							"id": 1031,
							"name": "visible",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Displays or hides the modal."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-modal/chef-modal.tsx",
									"line": 95,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-modal/chef-modal.tsx#L95"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1033,
								1034,
								1032,
								1030,
								1035,
								1031
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-modal/chef-modal.tsx",
							"line": 86,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-modal/chef-modal.tsx#L86"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1027
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-modal/chef-modal.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-modal/chef-modal.tsx#L1"
				}
			]
		},
		{
			"id": 1051,
			"name": "molecules/chef-page-header/chef-page-header",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1052,
					"name": "ChefPageHeader",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Header for most pages of the Automate UI. Note that only text and inline elements should be nested\ninside of the chef-heading and chef-subheading elements; if you want to nest block level elements\nin the header, put them below the chef-heading and chef-subheading (as shown in the last example)."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-page-header>\n  <chef-heading>Some Heading Text</chef-heading>\n  <chef-subheading>Some subheading text that goes below the heading.</chef-subheading>\n</chef-page-header>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-page-header>\n  <chef-heading>Heading</chef-heading>\n  <chef-subheading>\n   If you want to have <a href=\"#\">custom html and whatnot</a> in your text underneath\n   the header you can add it like this.\n  </chef-subheading>\n</chef-page-header>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-page-header>\n  <chef-heading>Heading</chef-heading>\n  <chef-subheading>If you need to add buttons, use the header-buttons slot.</chef-subheading>\n  <div slot=\"header-buttons\">\n    <chef-button primary>Do a thing</chef-button>\n  </div>\n</chef-page-header>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<style>\n .box-with-stuff {\n   padding: 10px;\n   margin-top: 10px;\n   background: #648FFF;\n   color: #FFF;\n   border-radius: 4px;\n }\n</style>\n\n<chef-page-header>\n  <chef-heading>Heading</chef-heading>\n  <chef-subheading>\n    If you need to add some block level elements underneath the subheading, add it below.\n  </chef-subheading>\n  <div class=\"box-with-stuff\">\n    A box with some stuff.\n  </div>\n</chef-page-header>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/molecules/chef-page-header/chef-page-header.tsx",
							"line": 59,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-page-header/chef-page-header.tsx#L59"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1052
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-page-header/chef-page-header.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-page-header/chef-page-header.tsx#L1"
				}
			]
		},
		{
			"id": 1060,
			"name": "molecules/chef-paginator/chef-paginator",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1061,
					"name": "ChefPaginator",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Adds pagination. The paginator functions by adding a query string in the form of 'page=<page number>' to the current pages url. To implement just subscribe to url changes and update your view accordingly. Anything passed as a child to the paginator will be rendered beside the paginator."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-paginator page-count='20' current-page='5'>\n</chef-paginator>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-paginator page-count='20' current-page='5'>\n  Some text to render with my fancy paginator\n</chef-paginator>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-paginator page-count='20' current-page='5'>\n  <strong>Maybe something bolder?</strong>\n</chef-paginator>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style='height: 2000px'>\n  <chef-scrollfader>\n    <chef-paginator style='position: fixed; top: 50%; left: 40%;' page-count='20' current-page='5'>\n      In combo with the chef-scrollfader.\n    </chef-paginator>\n  </chef-scrollfader>\n</div>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1065,
							"name": "currentPage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The current page to highlight. This is the param that you will update on a page change."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-paginator/chef-paginator.tsx",
									"line": 50,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-paginator/chef-paginator.tsx#L50"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'1'"
						},
						{
							"id": 1064,
							"name": "pageCount",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The total number of pages to show in the paginator"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-paginator/chef-paginator.tsx",
									"line": 46,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-paginator/chef-paginator.tsx#L46"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'1'"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1065,
								1064
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-paginator/chef-paginator.tsx",
							"line": 41,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-paginator/chef-paginator.tsx#L41"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1061
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-paginator/chef-paginator.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-paginator/chef-paginator.tsx#L1"
				}
			]
		},
		{
			"id": 1106,
			"name": "molecules/chef-phat-radio/chef-phat-radio",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1107,
					"name": "ChefPhatRadio",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "A toggle button. Uses the chef-option atom to define it's different states."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-phat-radio>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-phat-radio>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-phat-radio deselectable value=\"opt2\">\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-phat-radio>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1111,
							"name": "deselectable",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An optional property that when true allows users to deselect an option by selecting a currently selected option"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-phat-radio/chef-phat-radio.tsx",
									"line": 36,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-phat-radio/chef-phat-radio.tsx#L36"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 1110,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value of the currently toggled option."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-phat-radio/chef-phat-radio.tsx",
									"line": 31,
									"character": 27,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-phat-radio/chef-phat-radio.tsx#L31"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1111,
								1110
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-phat-radio/chef-phat-radio.tsx",
							"line": 26,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-phat-radio/chef-phat-radio.tsx#L26"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1107
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-phat-radio/chef-phat-radio.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-phat-radio/chef-phat-radio.tsx#L1"
				}
			]
		},
		{
			"id": 1133,
			"name": "molecules/chef-radio/chef-radio",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1134,
					"name": "ChefRadio",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "A toggle button. Uses the chef-option atom to define it's different states."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-radio>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-radio>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1137,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value of the currently toggled option."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-radio/chef-radio.tsx",
									"line": 24,
									"character": 27,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-radio/chef-radio.tsx#L24"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1137
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-radio/chef-radio.tsx",
							"line": 19,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-radio/chef-radio.tsx#L19"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1134
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-radio/chef-radio.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-radio/chef-radio.tsx#L1"
				}
			]
		},
		{
			"id": 1153,
			"name": "molecules/chef-scroll-top/chef-scroll-top",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1154,
					"name": "ChefScrollTop",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Button that scrolls the user to the top of the page. The button is positioned\nto be displayed after the user scrolls the equivalent of one viewport height."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style=\"height: 3000px\">\n Scroll to see the button and try it out!\n <chef-scroll-top></chef-scroll-top>\n</div>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/molecules/chef-scroll-top/chef-scroll-top.tsx",
							"line": 20,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-scroll-top/chef-scroll-top.tsx#L20"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1154
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-scroll-top/chef-scroll-top.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-scroll-top/chef-scroll-top.tsx#L1"
				}
			]
		},
		{
			"id": 1162,
			"name": "molecules/chef-select/chef-select",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1163,
					"name": "ChefSelect",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-select>`"
									},
									{
										"kind": "text",
										"text": " molecule defines a custom select molecule. The select molecule\nwill fill the width of it's container."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style='width: 200px'>\n  <chef-select>\n    <chef-option>select something</chef-option>\n    <chef-option value='opt1'>Option 1</chef-option>\n    <chef-option value='opt2'>Option 2</chef-option>\n    <chef-option value='opt3'>Option 3</chef-option>\n  </chef-select>\n</div>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style='width: 200px'>\n  <chef-select>\n    <chef-option>select something</chef-option>\n    <chef-option value='opt1'>Option 1</chef-option>\n    <chef-option value='opt2' selected>Option 2</chef-option>\n    <chef-option value='opt3'>Option 3</chef-option>\n  </chef-select>\n</div>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style='width: 200px'>\n  <chef-select value='opt3'>\n    <chef-option>select something</chef-option>\n    <chef-option value='opt1'>Option 1</chef-option>\n    <chef-option value='opt2'>Option 2</chef-option>\n    <chef-option value='opt3'>Option 3</chef-option>\n  </chef-select>\n</div>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style='width: 200px'>\n  <chef-select value='opt3' change='alert(\"Value Changed!\")'>\n    <chef-option>select something</chef-option>\n    <chef-option value='opt1'>Option 1</chef-option>\n    <chef-option value='opt2'>Option 2</chef-option>\n    <chef-option value='opt3'>Option 3</chef-option>\n  </chef-select>\n</div>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<div style='width: 200px'>\n  <chef-select disabled='true'>\n    <chef-option>select something</chef-option>\n    <chef-option value='opt1'>Option 1</chef-option>\n    <chef-option value='opt2'>Option 2</chef-option>\n    <chef-option value='opt3'>Option 3</chef-option>\n  </chef-select>\n</div>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1175,
							"name": "change",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Emitted when the value of the molecule changes."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-select/chef-select.tsx",
									"line": 101,
									"character": 11,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-select/chef-select.tsx#L101"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@stencil/core/internal/stencil-public-runtime.d.ts",
									"qualifiedName": "EventEmitter"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "EventEmitter",
								"package": "@stencil/core"
							}
						},
						{
							"id": 1167,
							"name": "disabled",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Disable your select menu by setting this to true"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-select/chef-select.tsx",
									"line": 88,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-select/chef-select.tsx#L88"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 1166,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The selected value"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-select/chef-select.tsx",
									"line": 83,
									"character": 27,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-select/chef-select.tsx#L83"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1175,
								1167,
								1166
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-select/chef-select.tsx",
							"line": 78,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-select/chef-select.tsx#L78"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1163
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-select/chef-select.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-select/chef-select.tsx#L1"
				}
			]
		},
		{
			"id": 1216,
			"name": "molecules/chef-separator/chef-separator",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1217,
					"name": "ChefSeparator",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-separator>`"
									},
									{
										"kind": "text",
										"text": " molecule is used to separate sections of content."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-separator></chef-separator>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-separator>\n  <chef-pill>10 of 48</chef-pill>\n</chef-separator>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-separator>\n  <chef-pill>\n    <chef-loading-spinner size='14'></chef-loading-spinner>\n    Loading...\n  </chef-pill>\n</chef-separator>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-separator>\n  <chef-button id='load-btn'>Load more</chef-button>\n</chef-separator>\n\n<script>\n  const loadBtn = document.getElementById('load-btn');\n  loadBtn.addEventListener('click', e => alert('load more'));\n</script>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-separator>\n  <chef-pill id='expand-pill'>\n    Scan Jobs <chef-pill>12</chef-pill>\n  </chef-pill>\n  <chef-button id='expand-btn'>\n    <chef-icon>add</chef-icon>\n  </chef-button>\n</chef-separator>\n<chef-expander id='expander'>\n  <h2>Some content</h2>\n</chef-expander>\n\n<style>\n  #expand-pill { background: var(--chef-lightest-grey); }\n  #expand-btn {\n    background: var(--chef-lightest-grey); position: absolute; right: 0; margin: 0;\n  }\n</style>\n\n<script>\n  const expandBtn = document.getElementById('expand-btn');\n  const expander = document.getElementById('expander');\n  expandBtn.addEventListener('click', () => expander.toggle());\n</script>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/molecules/chef-separator/chef-separator.tsx",
							"line": 63,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-separator/chef-separator.tsx#L63"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1217
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-separator/chef-separator.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-separator/chef-separator.tsx#L1"
				}
			]
		},
		{
			"id": 1222,
			"name": "molecules/chef-side-panel/chef-side-panel",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1223,
					"name": "ChefSidePanel",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Slide out panel from the right. This is a very simple atom - it accepts one property\nto determine whether it should be shown or hidden as well as comes with the default\nstyling of positioning the close button in the top right corner. For the button to be\nstyled properly, make sure to put label=\"close\" attribute on your button."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-button id='open-button' class='open-button' primary>\n  Open, sesame!\n</chef-button>\n<chef-side-panel visible='true' id='side-panel'>\n <chef-button label=\"close\" id='close-button' secondary>\n   <chef-icon>close</chef-icon>\n </chef-button>\n More side panel content!\n</chef-side-panel>\n\n<script>\n  const panel = document.getElementById('side-panel');\n  const closeBtn = document.getElementById('close-button');\n  const openBtn = document.getElementById('open-button');\n\n  closeBtn.addEventListener('click', e => panel.setAttribute('visible', 'false'));\n  openBtn.addEventListener('click', e => panel.setAttribute('visible', 'true'));\n\n  function clickOutside() {\n    panel.setAttribute('visible', 'false')\n  }\n</script>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1226,
							"name": "visible",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Boolean to show/hide the side panel"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-side-panel/chef-side-panel.tsx",
									"line": 45,
									"character": 10,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-side-panel/chef-side-panel.tsx#L45"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1226
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-side-panel/chef-side-panel.tsx",
							"line": 40,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-side-panel/chef-side-panel.tsx#L40"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1223
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-side-panel/chef-side-panel.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-side-panel/chef-side-panel.tsx#L1"
				}
			]
		},
		{
			"id": 1236,
			"name": "molecules/chef-status-filter-group/chef-status-filter-group",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1237,
					"name": "ChefStatusFilterGroup",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "A group of status filters. Uses the chef-option atom to render the status filters."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-status-filter-group id=\"filters-example\">\n  <chef-option class=\"filter general\" value=\"general\">\n    <chef-icon class=\"filter-icon\">group_work</chef-icon>\n    <div class=\"filter-label\">Total</div>\n    <div class=\"filter-total\">30</div>\n  </chef-option>\n  <chef-option class=\"filter critical\" value='critical'>\n    <chef-icon class=\"filter-icon\">warning</chef-icon>\n    <div class=\"filter-label\">Critical</div>\n    <div class=\"filter-total\">10</div>\n  </chef-option>\n  <chef-option class=\"filter warning\" value='warning'>\n    <chef-icon class=\"filter-icon\">error</chef-icon>\n    <div class=\"filter-label\">Warning</div>\n    <div class=\"filter-total\">5</div>\n  </chef-option>\n  <chef-option class=\"filter success\" value='success'>\n    <chef-icon class=\"filter-icon\">check_circle</chef-icon>\n    <div class=\"filter-label\">OK</div>\n    <div class=\"filter-total\">5</div>\n  </chef-option>\n  <chef-option class=\"filter disconnected\" value='disconnected'>\n    <chef-icon class=\"filter-icon\"></chef-icon>\n    <div class=\"filter-label\">Disconnected</div>\n    <div class=\"filter-total\">8</div>\n  </chef-option>\n  <chef-option class=\"filter connected\" value='connected'>\n    <chef-icon class=\"filter-icon\">link</chef-icon>\n    <div class=\"filter-label\">Connected</div>\n    <div class=\"filter-total\">22</div>\n  </chef-option>\n  <chef-option class=\"filter unknown\" value='unknown'>\n    <chef-icon class=\"filter-icon\">help</chef-icon>\n    <div class=\"filter-label\">Unknown</div>\n    <div class=\"filter-total\">10</div>\n  </chef-option>\n</chef-status-filter-group>\n\n<chef-button id=\"lean-toggle\" primary>Toggle lean attribute</chef-button>\n\n<script>\n  const button = document.getElementById('lean-toggle');\n  const filters = document.getElementById('filters-example');\n  button.addEventListener('click', () => filters.toggleAttribute('lean'));\n</script>\n\n<style>\n  #lean-toggle { margin-left: 0; }\n</style>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1240,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value of the currently toggled option."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-status-filter-group/chef-status-filter-group.tsx",
									"line": 68,
									"character": 27,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-status-filter-group/chef-status-filter-group.tsx#L68"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1240
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-status-filter-group/chef-status-filter-group.tsx",
							"line": 63,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-status-filter-group/chef-status-filter-group.tsx#L63"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1237
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-status-filter-group/chef-status-filter-group.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-status-filter-group/chef-status-filter-group.tsx#L1"
				}
			]
		},
		{
			"id": 1259,
			"name": "molecules/chef-stepper/chef-stepper",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1260,
					"name": "ChefStepper",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "The "
									},
									{
										"kind": "code",
										"text": "`<chef-stepper>`"
									},
									{
										"kind": "text",
										"text": " molecule is used to display a list of\n["
									},
									{
										"kind": "code",
										"text": "`<chef-step>`"
									},
									{
										"kind": "text",
										"text": "](/atoms/chef-step) atoms."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-stepper>\n  <chef-step selected>Add nodes</chef-step>\n  <chef-step disabled>Add credentials</chef-step>\n  <chef-step disabled>Preview nodes</chef-step>\n  <chef-step disabled>Add profiles</chef-step>\n  <chef-step disabled>Add scheduler</chef-step>\n</chef-stepper>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-stepper>\n  <chef-step>Add nodes</chef-step>\n  <chef-step>Add credentials</chef-step>\n  <chef-step selected>Preview nodes</chef-step>\n  <chef-step disabled>Add profiles</chef-step>\n  <chef-step disabled>Add scheduler</chef-step>\n</chef-stepper>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-stepper>\n  <chef-step>Add nodes</chef-step>\n  <chef-step>Add credentials</chef-step>\n  <chef-step>Preview nodes</chef-step>\n  <chef-step>Add profiles</chef-step>\n  <chef-step selected>Add scheduler</chef-step>\n</chef-stepper>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-stepper>\n  <chef-step>Add nodes</chef-step>\n  <chef-step>Add credentials</chef-step>\n  <chef-step selected>Preview nodes</chef-step>\n  <chef-step>Add profiles</chef-step>\n  <chef-step>Add scheduler</chef-step>\n</chef-stepper>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/molecules/chef-stepper/chef-stepper.tsx",
							"line": 48,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-stepper/chef-stepper.tsx#L48"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1260
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-stepper/chef-stepper.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-stepper/chef-stepper.tsx#L1"
				}
			]
		},
		{
			"id": 1265,
			"name": "molecules/chef-tab-selector/chef-tab-selector",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1266,
					"name": "ChefTabSelector",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "A selection of tabs. Uses the chef-option atom to define its different states."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tab-selector>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-tab-selector>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tab-selector value='opt2'>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-tab-selector>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-tab-selector>\n  <chef-option value='opt1'><chef-icon>thumb_up</chef-icon></chef-option>\n  <chef-option value='opt2'><chef-icon>thumb_down</chef-icon></chef-option>\n</chef-tab-selector>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<script>\n  const toggle = document.querySelector('#ex1toggle');\n  toggle.addEventListener('change', (event) => alert(event.target.value));\n</script>\n\n<chef-tab-selector id='ex1toggle'>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-tab-selector>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1269,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value of the currently selected tab."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-tab-selector/chef-tab-selector.tsx",
									"line": 49,
									"character": 27,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-tab-selector/chef-tab-selector.tsx#L49"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1269
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-tab-selector/chef-tab-selector.tsx",
							"line": 44,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-tab-selector/chef-tab-selector.tsx#L44"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1266
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-tab-selector/chef-tab-selector.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-tab-selector/chef-tab-selector.tsx#L1"
				}
			]
		},
		{
			"id": 1285,
			"name": "molecules/chef-toggle/chef-toggle",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1286,
					"name": "ChefToggle",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "A toggle button. Uses the chef-option atom to define it's different states."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-toggle>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-toggle>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-toggle value='opt2'>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-toggle>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-toggle>\n  <chef-option value='opt1'><chef-icon>thumb_up</chef-icon></chef-option>\n  <chef-option value='opt2'><chef-icon>thumb_down</chef-icon></chef-option>\n</chef-toggle>\n```"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<script>\n  const toggle = document.querySelector('#ex1toggle');\n  toggle.addEventListener('change', (event) => alert(event.target.value));\n</script>\n\n<chef-toggle id='ex1toggle'>\n  <chef-option value='opt1'>Option 1</chef-option>\n  <chef-option value='opt2'>Option 2</chef-option>\n  <chef-option value='opt3'>Option 3</chef-option>\n</chef-toggle>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1289,
							"name": "value",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The value of the currently toggled option."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/molecules/chef-toggle/chef-toggle.tsx",
									"line": 49,
									"character": 27,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-toggle/chef-toggle.tsx#L49"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "''"
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1289
							]
						}
					],
					"sources": [
						{
							"fileName": "src/molecules/chef-toggle/chef-toggle.tsx",
							"line": 44,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-toggle/chef-toggle.tsx#L44"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1286
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-toggle/chef-toggle.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-toggle/chef-toggle.tsx#L1"
				}
			]
		},
		{
			"id": 1305,
			"name": "molecules/chef-toolbar/chef-toolbar",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1306,
					"name": "ChefToolbar",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "A container for buttons for above tables"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-toolbar>\n <chef-button>A button</chef-button>\n</chef-toolbar>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/molecules/chef-toolbar/chef-toolbar.tsx",
							"line": 17,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-toolbar/chef-toolbar.tsx#L17"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1306
					]
				}
			],
			"sources": [
				{
					"fileName": "src/molecules/chef-toolbar/chef-toolbar.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/molecules/chef-toolbar/chef-toolbar.tsx#L1"
				}
			]
		},
		{
			"id": 1382,
			"name": "templates/chef-aside/chef-aside",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1383,
					"name": "ChefAside",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Belongs within <chef-layout>: Defines content aside from the page content ex: sidebar"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-aside>Sidebar Markup Goes Here</chef-aside>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/templates/chef-aside/chef-aside.tsx",
							"line": 15,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-aside/chef-aside.tsx#L15"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1383
					]
				}
			],
			"sources": [
				{
					"fileName": "src/templates/chef-aside/chef-aside.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-aside/chef-aside.tsx#L1"
				}
			]
		},
		{
			"id": 1388,
			"name": "templates/chef-header/chef-header",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1389,
					"name": "ChefHeader",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Belongs within <chef-layout>: Specifies the  header for the application, that contains the main navigation."
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-header>Main Navigation Goes HERE</chef-header>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/templates/chef-header/chef-header.tsx",
							"line": 15,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-header/chef-header.tsx#L15"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1389
					]
				}
			],
			"sources": [
				{
					"fileName": "src/templates/chef-header/chef-header.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-header/chef-header.tsx#L1"
				}
			]
		},
		{
			"id": 1394,
			"name": "templates/chef-layout/chef-layout",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1395,
					"name": "ChefLayout",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Layout container for <chef-header>, <chef-aside> and <chef-main>"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-layout>\n   <chef-header style=\"border:1px dotted black;\">HEADER</chef-header>\n   <chef-aside style=\"border:1px dotted black;\">ASIDE</chef-aside>\n   <chef-main style=\"border:1px dotted black;\">MAIN</chef-main>\n</chef-layout>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/templates/chef-layout/chef-layout.tsx",
							"line": 19,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-layout/chef-layout.tsx#L19"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1395
					]
				}
			],
			"sources": [
				{
					"fileName": "src/templates/chef-layout/chef-layout.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-layout/chef-layout.tsx#L1"
				}
			]
		},
		{
			"id": 1400,
			"name": "templates/chef-main/chef-main",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1401,
					"name": "ChefMain",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Belongs within <chef-layout>: Specifies the main content of a document"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-main> Main Part of Page goes here </chef-main>\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/templates/chef-main/chef-main.tsx",
							"line": 15,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-main/chef-main.tsx#L15"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1401
					]
				}
			],
			"sources": [
				{
					"fileName": "src/templates/chef-main/chef-main.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-main/chef-main.tsx#L1"
				}
			]
		},
		{
			"id": 1406,
			"name": "templates/chef-page/chef-page",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1407,
					"name": "ChefPage",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@description",
								"content": [
									{
										"kind": "text",
										"text": "Template to wrap content in chef styled \"page\". Provides a slot for page content.\n\nEvents: confirm, cancel and secondaryConfirm"
									}
								]
							},
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\n<chef-page\n class=\"example-page-width\"\n heading=\"Add Members to Administrator\"\n subheading=\"Automate only displays local users and local teams. For other types of members add a member expression.\"\n secondary-btn-text=\"Add Member Expression\"\n secondary-btn-show=\"true\"\n confirm-btn-text=\"Add Member\"\n disable-confirm=\"true\"\n cancel-btn-text=\"Cancel\"\n>\n <chef-table>\n   <chef-thead>\n      <chef-tr>\n        <chef-th class=\"checkbox-row\"></chef-th>\n        <chef-th>ID</chef-th>\n        <chef-th>Type</chef-th>\n      </chef-tr>\n   </chef-thead>\n   <chef-tbody>\n     <chef-tr>\n       <chef-td>\n        <chef-checkbox></chef-checkbox>\n       </chef-td>\n       <chef-td>1</chef-td>\n       <chef-td>apple</chef-td>\n     </chef-tr>\n   </chef-tbody>\n </chef-table>\n</chef-page>\n```"
									}
								]
							}
						]
					},
					"children": [
						{
							"id": 1416,
							"name": "cancelBtnText",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Text for cancel button"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/templates/chef-page/chef-page.tsx",
									"line": 79,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L79"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'Cancel'"
						},
						{
							"id": 1415,
							"name": "confirmBtnText",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Text for confirm button"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/templates/chef-page/chef-page.tsx",
									"line": 74,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L74"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'Confirm'"
						},
						{
							"id": 1417,
							"name": "confirmLoading",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicate confirm is loading"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/templates/chef-page/chef-page.tsx",
									"line": 84,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L84"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 1419,
							"name": "disableConfirm",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Disable confirm buttom"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/templates/chef-page/chef-page.tsx",
									"line": 94,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L94"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 1412,
							"name": "errorMessage",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Text for error message"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/templates/chef-page/chef-page.tsx",
									"line": 59,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L59"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1410,
							"name": "heading",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Text for page heading"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/templates/chef-page/chef-page.tsx",
									"line": 49,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L49"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1418,
							"name": "pageLoading",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Indicate page is loading"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/templates/chef-page/chef-page.tsx",
									"line": 89,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L89"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 1414,
							"name": "secondaryBtnShow",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Show secondary button"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/templates/chef-page/chef-page.tsx",
									"line": 69,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L69"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 1413,
							"name": "secondaryBtnText",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Text for secondary button"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/templates/chef-page/chef-page.tsx",
									"line": 64,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L64"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1411,
							"name": "subheading",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Text for page subheading"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/templates/chef-page/chef-page.tsx",
									"line": 54,
									"character": 33,
									"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L54"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								1416,
								1415,
								1417,
								1419,
								1412,
								1410,
								1418,
								1414,
								1413,
								1411
							]
						}
					],
					"sources": [
						{
							"fileName": "src/templates/chef-page/chef-page.tsx",
							"line": 44,
							"character": 13,
							"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L44"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						1407
					]
				}
			],
			"sources": [
				{
					"fileName": "src/templates/chef-page/chef-page.tsx",
					"line": 1,
					"character": 0,
					"url": "https://github.com/chef/automate/blob/95abdeb3ec76211ed557f98f30ebd5a27679cd38/components/chef-ui-library/src/templates/chef-page/chef-page.tsx#L1"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				18,
				28,
				37,
				52,
				58,
				83,
				95,
				119,
				126,
				132,
				163,
				138,
				183,
				203,
				213,
				236,
				242,
				263,
				272,
				284,
				297,
				305,
				311,
				341,
				351,
				362,
				864,
				904,
				960,
				986,
				999,
				1013,
				1026,
				1051,
				1060,
				1106,
				1133,
				1153,
				1162,
				1216,
				1222,
				1236,
				1259,
				1265,
				1285,
				1305,
				1382,
				1388,
				1394,
				1400,
				1406
			]
		}
	],
	"packageName": "chef-ui-library",
	"readme": [
		{
			"kind": "text",
			"text": "# Chef UI Library\n\nUser Interface (UI) Design patterns are recurring solutions that solve common design problems. The Chef UI Library aims to have the standard patterns used in the Chef UI available for use within Engineering so we can spend more time providing delight for our customers in other areas.\n\nStencil is a simple compiler for generating Web Components. Web Components is an emerging standard that is designed to make it easy to create reusable UI patterns using APIs that are native to the browser.\nOne clear advantage of this is that the components we make here have no ties to a single library or frontend framework.\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\n\n### Installing\n\nA step by step series of examples that tell you have to get a development env running\n\n### Running just the Stencil Library\n\nTo ensure you're using the correct version of node, install [NVM](https://github.com/creationix/nvm)\nand run "
		},
		{
			"kind": "code",
			"text": "`nvm use`"
		},
		{
			"kind": "text",
			"text": " from "
		},
		{
			"kind": "code",
			"text": "`/chef-ui-library`"
		},
		{
			"kind": "text",
			"text": ". It will direct you to install the correct version if necessary.\n\nNavigate to "
		},
		{
			"kind": "code",
			"text": "`/chef-ui-library`"
		},
		{
			"kind": "text",
			"text": " and run "
		},
		{
			"kind": "code",
			"text": "`npm install`"
		},
		{
			"kind": "text",
			"text": "\n\n"
		},
		{
			"kind": "code",
			"text": "```bash\nnpm install\n```"
		},
		{
			"kind": "text",
			"text": "\n\nthen run "
		},
		{
			"kind": "code",
			"text": "`npm start`"
		},
		{
			"kind": "text",
			"text": " to run a live-reload server at "
		},
		{
			"kind": "code",
			"text": "`http://localhost:3333`"
		},
		{
			"kind": "text",
			"text": "\n\n"
		},
		{
			"kind": "code",
			"text": "```bash\nnpm start\n```"
		},
		{
			"kind": "text",
			"text": "\n\n## Developing inside the Habitat Studio\n\nEnter the habitat studio "
		},
		{
			"kind": "code",
			"text": "`hab studio enter`"
		},
		{
			"kind": "text",
			"text": " and then, run the helper method "
		},
		{
			"kind": "code",
			"text": "`start_chef_ui_library`"
		},
		{
			"kind": "text",
			"text": ".\nThis will start the live-reload server at "
		},
		{
			"kind": "code",
			"text": "`http://localhost:3334`"
		},
		{
			"kind": "text",
			"text": " (Note that this is a different port\nfrom the default used for local development outside the studio) that will watch for any modification\nto the chef-ui-library. Run "
		},
		{
			"kind": "code",
			"text": "`ui_logs`"
		},
		{
			"kind": "text",
			"text": " to see how the chef-ui-library builds.\n\n## Developing against Automate UI and the Hab Studio\n\nPlease see the extensive \"getting started\" docs for developing against the\n[habitat dev env](../../dev-docs/ui-development.md) alongside a local instance of Automate UI.\n\n### Re-Generating Documentation\n\nDocumentation that describes the atoms and molecules present within the UI library is generated from javadoc style comments using TypeDoc. Technically TypeDoc generates some json metadata that is then read by an internal Stencil component to display said atoms and molecules in the development environment.\nThat metadata is automatically generated when "
		},
		{
			"kind": "code",
			"text": "`npm start`"
		},
		{
			"kind": "text",
			"text": " is run. Atoms and molecules are automatically updated when their code is updated, but the documentation generation can be expensive and is therefore done on demand.\nIf you update any internal docs then you need to either restart the development server or run "
		},
		{
			"kind": "code",
			"text": "`npm run docs`"
		},
		{
			"kind": "text",
			"text": " to regenerate the necessary metadata.\n\n### Running and Developing patterns within Automate UI\n\n* Section coming soon\n\n### The Sandbox\n\nYou will note the sandbox.html file in the src directory. This was added to help make prototyping easier. When developing your new atom, molecule or template use the sandbox as a place to test your work. DO NOT commit any of your scratch work to the repo.\nTo make it easier not to forget that; run "
		},
		{
			"kind": "code",
			"text": "`git update-index --assume-unchanged src/sandbox.html`"
		},
		{
			"kind": "text",
			"text": " from the root of the library.\nThis command tells git to ignore any changes to the file. To undo the command and make git aware of changes to the sandbox; run "
		},
		{
			"kind": "code",
			"text": "`git update-index --no-assume-unchanged src/sandbox.html`"
		},
		{
			"kind": "text",
			"text": ".\n\nThe sandbox can be viewed at [http://localhost:3333/sandbox.html](http://localhost:3333/sandbox.html)\n\n## Running the tests\n\n### Lint Tests\n\n* Sass: "
		},
		{
			"kind": "code",
			"text": "`npm run lint.sass`"
		},
		{
			"kind": "text",
			"text": "\n* Typescript: "
		},
		{
			"kind": "code",
			"text": "`npm run lint.ts`"
		},
		{
			"kind": "text",
			"text": "\n\n### Unit Tests\n\nStencil comes with **Jest** built-in - read more about it at [Testing Section of the Stencil Site](https://stenciljs.com/docs/getting-started).\n\n* Run once: "
		},
		{
			"kind": "code",
			"text": "`npm test`"
		},
		{
			"kind": "text",
			"text": "\n* Re-run every time you save a file: "
		},
		{
			"kind": "code",
			"text": "`npm run test.watch`"
		},
		{
			"kind": "text",
			"text": "\n\n## Built With\n\n* [StencilJS](https://stenciljs.com/docs/intro) - component compiler\n* [Jest and the Stencil](https://stenciljs.com/docs/testing) - unit testing framework\n* [NPM](https://www.npmjs.com/) - package manager"
		}
	],
	"symbolIdMap": {
		"18": {
			"sourceFileName": "src/atoms/chef-alert/chef-alert.tsx",
			"qualifiedName": ""
		},
		"19": {
			"sourceFileName": "src/atoms/chef-alert/chef-alert.tsx",
			"qualifiedName": "ChefAlert"
		},
		"22": {
			"sourceFileName": "src/atoms/chef-alert/chef-alert.tsx",
			"qualifiedName": "ChefAlert.type"
		},
		"28": {
			"sourceFileName": "src/atoms/chef-badge/chef-badge.tsx",
			"qualifiedName": ""
		},
		"29": {
			"sourceFileName": "src/atoms/chef-badge/chef-badge.tsx",
			"qualifiedName": "ChefBadge"
		},
		"32": {
			"sourceFileName": "src/atoms/chef-badge/chef-badge.tsx",
			"qualifiedName": "ChefBadge.noData"
		},
		"33": {
			"sourceFileName": "src/atoms/chef-badge/chef-badge.tsx",
			"qualifiedName": "ChefBadge.id"
		},
		"34": {
			"sourceFileName": "src/atoms/chef-badge/chef-badge.tsx",
			"qualifiedName": "ChefBadge.tooltip"
		},
		"37": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": ""
		},
		"38": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": "ChefButton"
		},
		"41": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": "ChefButton.type"
		},
		"42": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": "ChefButton.form"
		},
		"43": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": "ChefButton.primary"
		},
		"44": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": "ChefButton.secondary"
		},
		"45": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": "ChefButton.tertiary"
		},
		"46": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": "ChefButton.caution"
		},
		"47": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": "ChefButton.disabled"
		},
		"48": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": "ChefButton.url"
		},
		"49": {
			"sourceFileName": "src/atoms/chef-button/chef-button.tsx",
			"qualifiedName": "ChefButton.target"
		},
		"52": {
			"sourceFileName": "src/atoms/chef-card/chef-card.tsx",
			"qualifiedName": ""
		},
		"53": {
			"sourceFileName": "src/atoms/chef-card/chef-card.tsx",
			"qualifiedName": "ChefCard"
		},
		"58": {
			"sourceFileName": "src/atoms/chef-checkbox/chef-checkbox.tsx",
			"qualifiedName": ""
		},
		"59": {
			"sourceFileName": "src/atoms/chef-checkbox/chef-checkbox.tsx",
			"qualifiedName": "ChefCheckbox"
		},
		"83": {
			"sourceFileName": "src/atoms/chef-click-outside/chef-click-outside.tsx",
			"qualifiedName": ""
		},
		"84": {
			"sourceFileName": "src/atoms/chef-click-outside/chef-click-outside.tsx",
			"qualifiedName": "ChefClickOutside"
		},
		"88": {
			"sourceFileName": "src/atoms/chef-click-outside/chef-click-outside.tsx",
			"qualifiedName": "ChefClickOutside.clickOutside"
		},
		"89": {
			"sourceFileName": "src/atoms/chef-click-outside/chef-click-outside.tsx",
			"qualifiedName": "ChefClickOutside.omit"
		},
		"95": {
			"sourceFileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
			"qualifiedName": ""
		},
		"96": {
			"sourceFileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
			"qualifiedName": "ChefClipboard"
		},
		"99": {
			"sourceFileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
			"qualifiedName": "ChefClipboard.value"
		},
		"100": {
			"sourceFileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
			"qualifiedName": "ChefClipboard.icon"
		},
		"101": {
			"sourceFileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
			"qualifiedName": "ChefClipboard.label"
		},
		"102": {
			"sourceFileName": "src/atoms/chef-clipboard/chef-clipboard.tsx",
			"qualifiedName": "ChefClipboard.plain"
		},
		"119": {
			"sourceFileName": "src/atoms/chef-dropdown/chef-dropdown.tsx",
			"qualifiedName": ""
		},
		"120": {
			"sourceFileName": "src/atoms/chef-dropdown/chef-dropdown.tsx",
			"qualifiedName": "ChefDropdown"
		},
		"126": {
			"sourceFileName": "src/atoms/chef-heading/chef-heading.tsx",
			"qualifiedName": ""
		},
		"127": {
			"sourceFileName": "src/atoms/chef-heading/chef-heading.tsx",
			"qualifiedName": "ChefHeading"
		},
		"132": {
			"sourceFileName": "src/atoms/chef-icon/chef-icon.tsx",
			"qualifiedName": ""
		},
		"133": {
			"sourceFileName": "src/atoms/chef-icon/chef-icon.tsx",
			"qualifiedName": "ChefIcon"
		},
		"138": {
			"sourceFileName": "src/atoms/chef-input/chef-input.tsx",
			"qualifiedName": ""
		},
		"139": {
			"sourceFileName": "src/atoms/chef-input/chef-input.tsx",
			"qualifiedName": "ChefInput"
		},
		"142": {
			"sourceFileName": "src/atoms/chef-input/chef-input.tsx",
			"qualifiedName": "ChefInput.value"
		},
		"143": {
			"sourceFileName": "src/atoms/chef-input/chef-input.tsx",
			"qualifiedName": "ChefInput.type"
		},
		"144": {
			"sourceFileName": "src/atoms/chef-input/chef-input.tsx",
			"qualifiedName": "ChefInput.placeholder"
		},
		"145": {
			"sourceFileName": "src/atoms/chef-input/chef-input.tsx",
			"qualifiedName": "ChefInput.disabled"
		},
		"146": {
			"sourceFileName": "src/atoms/chef-input/chef-input.tsx",
			"qualifiedName": "ChefInput.autocomplete"
		},
		"163": {
			"sourceFileName": "src/atoms/chef-input-key-value/chef-input-key-value.tsx",
			"qualifiedName": ""
		},
		"164": {
			"sourceFileName": "src/atoms/chef-input-key-value/chef-input-key-value.tsx",
			"qualifiedName": "ChefInputKeyValue"
		},
		"167": {
			"sourceFileName": "src/atoms/chef-input-key-value/chef-input-key-value.tsx",
			"qualifiedName": "ChefInputKeyValue.value"
		},
		"168": {
			"sourceFileName": "src/atoms/chef-input-key-value/chef-input-key-value.tsx",
			"qualifiedName": "ChefInputKeyValue.placeholder"
		},
		"183": {
			"sourceFileName": "src/atoms/chef-loading-spinner/chef-loading-spinner.tsx",
			"qualifiedName": ""
		},
		"184": {
			"sourceFileName": "src/atoms/chef-loading-spinner/chef-loading-spinner.tsx",
			"qualifiedName": "ChefLoadingSpinner"
		},
		"187": {
			"sourceFileName": "src/atoms/chef-loading-spinner/chef-loading-spinner.tsx",
			"qualifiedName": "ChefLoadingSpinner.size"
		},
		"188": {
			"sourceFileName": "src/atoms/chef-loading-spinner/chef-loading-spinner.tsx",
			"qualifiedName": "ChefLoadingSpinner.fixed"
		},
		"203": {
			"sourceFileName": "src/atoms/chef-markdown/chef-markdown.tsx",
			"qualifiedName": ""
		},
		"204": {
			"sourceFileName": "src/atoms/chef-markdown/chef-markdown.tsx",
			"qualifiedName": "ChefMarkdown"
		},
		"207": {
			"sourceFileName": "src/atoms/chef-markdown/chef-markdown.tsx",
			"qualifiedName": "ChefMarkdown.text"
		},
		"213": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": ""
		},
		"214": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": "ChefOption"
		},
		"217": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": "ChefOption.value"
		},
		"218": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": "ChefOption.selected"
		},
		"219": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": "ChefOption.optionId"
		},
		"230": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": "ChefOption"
		},
		"231": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": "getId"
		},
		"232": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": "ChefOption"
		},
		"233": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": "getContents"
		},
		"234": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": "ChefOption"
		},
		"235": {
			"sourceFileName": "src/atoms/chef-option/chef-option.tsx",
			"qualifiedName": "getValue"
		},
		"236": {
			"sourceFileName": "src/atoms/chef-pill/chef-pill.tsx",
			"qualifiedName": ""
		},
		"237": {
			"sourceFileName": "src/atoms/chef-pill/chef-pill.tsx",
			"qualifiedName": "ChefPill"
		},
		"242": {
			"sourceFileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
			"qualifiedName": ""
		},
		"243": {
			"sourceFileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
			"qualifiedName": "ChefProgressBar"
		},
		"246": {
			"sourceFileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
			"qualifiedName": "ChefProgressBar.value"
		},
		"247": {
			"sourceFileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
			"qualifiedName": "ChefProgressBar.valueMin"
		},
		"248": {
			"sourceFileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
			"qualifiedName": "ChefProgressBar.valueMax"
		},
		"249": {
			"sourceFileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
			"qualifiedName": "ChefProgressBar.prefixText"
		},
		"250": {
			"sourceFileName": "src/atoms/chef-progress-bar/chef-progress-bar.tsx",
			"qualifiedName": "ChefProgressBar.suffixText"
		},
		"263": {
			"sourceFileName": "src/atoms/chef-scrollfader/chef-scrollfader.tsx",
			"qualifiedName": ""
		},
		"264": {
			"sourceFileName": "src/atoms/chef-scrollfader/chef-scrollfader.tsx",
			"qualifiedName": "ChefScrollfader"
		},
		"272": {
			"sourceFileName": "src/atoms/chef-snippet/chef-snippet.tsx",
			"qualifiedName": ""
		},
		"273": {
			"sourceFileName": "src/atoms/chef-snippet/chef-snippet.tsx",
			"qualifiedName": "ChefSnippet"
		},
		"276": {
			"sourceFileName": "src/atoms/chef-snippet/chef-snippet.tsx",
			"qualifiedName": "ChefSnippet.code"
		},
		"277": {
			"sourceFileName": "src/atoms/chef-snippet/chef-snippet.tsx",
			"qualifiedName": "ChefSnippet.lang"
		},
		"284": {
			"sourceFileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
			"qualifiedName": ""
		},
		"285": {
			"sourceFileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
			"qualifiedName": "ChefSortToggle"
		},
		"288": {
			"sourceFileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
			"qualifiedName": "ChefSortToggle.order"
		},
		"289": {
			"sourceFileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
			"qualifiedName": "ChefSortToggle.sort"
		},
		"290": {
			"sourceFileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
			"qualifiedName": "ChefSortToggle.sortToggled"
		},
		"291": {
			"sourceFileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
			"qualifiedName": "ChefSortToggle.toggle"
		},
		"292": {
			"sourceFileName": "src/atoms/chef-sort-toggle/chef-sort-toggle.tsx",
			"qualifiedName": "ChefSortToggle.toggle"
		},
		"297": {
			"sourceFileName": "src/atoms/chef-step/chef-step.tsx",
			"qualifiedName": ""
		},
		"298": {
			"sourceFileName": "src/atoms/chef-step/chef-step.tsx",
			"qualifiedName": "ChefStep"
		},
		"301": {
			"sourceFileName": "src/atoms/chef-step/chef-step.tsx",
			"qualifiedName": "ChefStep.disabled"
		},
		"302": {
			"sourceFileName": "src/atoms/chef-step/chef-step.tsx",
			"qualifiedName": "ChefStep.selected"
		},
		"305": {
			"sourceFileName": "src/atoms/chef-subheading/chef-subheading.tsx",
			"qualifiedName": ""
		},
		"306": {
			"sourceFileName": "src/atoms/chef-subheading/chef-subheading.tsx",
			"qualifiedName": "ChefSubheading"
		},
		"311": {
			"sourceFileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
			"qualifiedName": ""
		},
		"312": {
			"sourceFileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
			"qualifiedName": "ChefTooltip"
		},
		"315": {
			"sourceFileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
			"qualifiedName": "ChefTooltip.for"
		},
		"316": {
			"sourceFileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
			"qualifiedName": "ChefTooltip.delay"
		},
		"317": {
			"sourceFileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
			"qualifiedName": "ChefTooltip.position"
		},
		"318": {
			"sourceFileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
			"qualifiedName": "ChefTooltip.offset"
		},
		"319": {
			"sourceFileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
			"qualifiedName": "ChefTooltip.follow"
		},
		"320": {
			"sourceFileName": "src/atoms/chef-tooltip/chef-tooltip.tsx",
			"qualifiedName": "ChefTooltip.interactable"
		},
		"341": {
			"sourceFileName": "src/atoms/chef-trap-focus/chef-trap-focus.tsx",
			"qualifiedName": ""
		},
		"342": {
			"sourceFileName": "src/atoms/chef-trap-focus/chef-trap-focus.tsx",
			"qualifiedName": "ChefTrapFocus"
		},
		"346": {
			"sourceFileName": "src/atoms/chef-trap-focus/chef-trap-focus.tsx",
			"qualifiedName": "ChefTrapFocus.trap"
		},
		"351": {
			"sourceFileName": "src/charts/chef-data-point/chef-data-point.tsx",
			"qualifiedName": ""
		},
		"352": {
			"sourceFileName": "src/charts/chef-data-point/chef-data-point.tsx",
			"qualifiedName": "ChefDataPoint"
		},
		"355": {
			"sourceFileName": "src/charts/chef-data-point/chef-data-point.tsx",
			"qualifiedName": "ChefDataPoint.value"
		},
		"356": {
			"sourceFileName": "src/charts/chef-data-point/chef-data-point.tsx",
			"qualifiedName": "ChefDataPoint.secondary"
		},
		"362": {
			"sourceFileName": "src/charts/chef-radial-chart/chef-radial-chart.tsx",
			"qualifiedName": ""
		},
		"363": {
			"sourceFileName": "src/charts/chef-radial-chart/chef-radial-chart.tsx",
			"qualifiedName": "ChefRadialChart"
		},
		"366": {
			"sourceFileName": "src/charts/chef-radial-chart/chef-radial-chart.tsx",
			"qualifiedName": "ChefRadialChart.id"
		},
		"367": {
			"sourceFileName": "src/charts/chef-radial-chart/chef-radial-chart.tsx",
			"qualifiedName": "ChefRadialChart.gapSize"
		},
		"368": {
			"sourceFileName": "src/charts/chef-radial-chart/chef-radial-chart.tsx",
			"qualifiedName": "ChefRadialChart.tooltips"
		},
		"864": {
			"sourceFileName": "src/design/chef-colors/chef-colors.tsx",
			"qualifiedName": ""
		},
		"865": {
			"sourceFileName": "src/design/chef-colors/chef-colors.tsx",
			"qualifiedName": "ChefColors"
		},
		"904": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": ""
		},
		"908": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "findTag"
		},
		"909": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "findTag"
		},
		"910": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "name"
		},
		"911": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "json"
		},
		"912": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "filterTags"
		},
		"913": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "filterTags"
		},
		"914": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "name"
		},
		"915": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "json"
		},
		"916": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "getComponentMetaData"
		},
		"917": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "getComponentMetaData"
		},
		"918": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "json"
		},
		"919": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "__type"
		},
		"920": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "__type.tag"
		},
		"921": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "__type.styleUrl"
		},
		"922": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "__type.shadow"
		},
		"923": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "getType"
		},
		"924": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "getType"
		},
		"925": {
			"sourceFileName": "src/entities/docs/doc.helpers.ts",
			"qualifiedName": "json"
		},
		"960": {
			"sourceFileName": "src/internal/chef-example/chef-example.tsx",
			"qualifiedName": ""
		},
		"961": {
			"sourceFileName": "src/internal/chef-example/chef-example.tsx",
			"qualifiedName": "ChefExample"
		},
		"965": {
			"sourceFileName": "src/internal/chef-example/chef-example.tsx",
			"qualifiedName": "ChefExample.code"
		},
		"986": {
			"sourceFileName": "src/molecules/chef-banner/chef-banner.tsx",
			"qualifiedName": ""
		},
		"987": {
			"sourceFileName": "src/molecules/chef-banner/chef-banner.tsx",
			"qualifiedName": "ChefBanner"
		},
		"990": {
			"sourceFileName": "src/molecules/chef-banner/chef-banner.tsx",
			"qualifiedName": "ChefBanner.type"
		},
		"991": {
			"sourceFileName": "src/molecules/chef-banner/chef-banner.tsx",
			"qualifiedName": "ChefBanner.buttonText"
		},
		"999": {
			"sourceFileName": "src/molecules/chef-combobox/chef-combobox.tsx",
			"qualifiedName": ""
		},
		"1000": {
			"sourceFileName": "src/molecules/chef-combobox/chef-combobox.tsx",
			"qualifiedName": "ChefCombobox"
		},
		"1013": {
			"sourceFileName": "src/molecules/chef-expander/chef-expander.tsx",
			"qualifiedName": ""
		},
		"1014": {
			"sourceFileName": "src/molecules/chef-expander/chef-expander.tsx",
			"qualifiedName": "ChefExpander"
		},
		"1017": {
			"sourceFileName": "src/molecules/chef-expander/chef-expander.tsx",
			"qualifiedName": "ChefExpander.opened"
		},
		"1026": {
			"sourceFileName": "src/molecules/chef-modal/chef-modal.tsx",
			"qualifiedName": ""
		},
		"1027": {
			"sourceFileName": "src/molecules/chef-modal/chef-modal.tsx",
			"qualifiedName": "ChefModal"
		},
		"1030": {
			"sourceFileName": "src/molecules/chef-modal/chef-modal.tsx",
			"qualifiedName": "ChefModal.locked"
		},
		"1031": {
			"sourceFileName": "src/molecules/chef-modal/chef-modal.tsx",
			"qualifiedName": "ChefModal.visible"
		},
		"1032": {
			"sourceFileName": "src/molecules/chef-modal/chef-modal.tsx",
			"qualifiedName": "ChefModal.label"
		},
		"1033": {
			"sourceFileName": "src/molecules/chef-modal/chef-modal.tsx",
			"qualifiedName": "ChefModal.closeModal"
		},
		"1034": {
			"sourceFileName": "src/molecules/chef-modal/chef-modal.tsx",
			"qualifiedName": "ChefModal.el"
		},
		"1035": {
			"sourceFileName": "src/molecules/chef-modal/chef-modal.tsx",
			"qualifiedName": "ChefModal.prevFocusedElement"
		},
		"1051": {
			"sourceFileName": "src/molecules/chef-page-header/chef-page-header.tsx",
			"qualifiedName": ""
		},
		"1052": {
			"sourceFileName": "src/molecules/chef-page-header/chef-page-header.tsx",
			"qualifiedName": "ChefPageHeader"
		},
		"1060": {
			"sourceFileName": "src/molecules/chef-paginator/chef-paginator.tsx",
			"qualifiedName": ""
		},
		"1061": {
			"sourceFileName": "src/molecules/chef-paginator/chef-paginator.tsx",
			"qualifiedName": "ChefPaginator"
		},
		"1064": {
			"sourceFileName": "src/molecules/chef-paginator/chef-paginator.tsx",
			"qualifiedName": "ChefPaginator.pageCount"
		},
		"1065": {
			"sourceFileName": "src/molecules/chef-paginator/chef-paginator.tsx",
			"qualifiedName": "ChefPaginator.currentPage"
		},
		"1106": {
			"sourceFileName": "src/molecules/chef-phat-radio/chef-phat-radio.tsx",
			"qualifiedName": ""
		},
		"1107": {
			"sourceFileName": "src/molecules/chef-phat-radio/chef-phat-radio.tsx",
			"qualifiedName": "ChefPhatRadio"
		},
		"1110": {
			"sourceFileName": "src/molecules/chef-phat-radio/chef-phat-radio.tsx",
			"qualifiedName": "ChefPhatRadio.value"
		},
		"1111": {
			"sourceFileName": "src/molecules/chef-phat-radio/chef-phat-radio.tsx",
			"qualifiedName": "ChefPhatRadio.deselectable"
		},
		"1133": {
			"sourceFileName": "src/molecules/chef-radio/chef-radio.tsx",
			"qualifiedName": ""
		},
		"1134": {
			"sourceFileName": "src/molecules/chef-radio/chef-radio.tsx",
			"qualifiedName": "ChefRadio"
		},
		"1137": {
			"sourceFileName": "src/molecules/chef-radio/chef-radio.tsx",
			"qualifiedName": "ChefRadio.value"
		},
		"1153": {
			"sourceFileName": "src/molecules/chef-scroll-top/chef-scroll-top.tsx",
			"qualifiedName": ""
		},
		"1154": {
			"sourceFileName": "src/molecules/chef-scroll-top/chef-scroll-top.tsx",
			"qualifiedName": "ChefScrollTop"
		},
		"1162": {
			"sourceFileName": "src/molecules/chef-select/chef-select.tsx",
			"qualifiedName": ""
		},
		"1163": {
			"sourceFileName": "src/molecules/chef-select/chef-select.tsx",
			"qualifiedName": "ChefSelect"
		},
		"1166": {
			"sourceFileName": "src/molecules/chef-select/chef-select.tsx",
			"qualifiedName": "ChefSelect.value"
		},
		"1167": {
			"sourceFileName": "src/molecules/chef-select/chef-select.tsx",
			"qualifiedName": "ChefSelect.disabled"
		},
		"1175": {
			"sourceFileName": "src/molecules/chef-select/chef-select.tsx",
			"qualifiedName": "ChefSelect.change"
		},
		"1216": {
			"sourceFileName": "src/molecules/chef-separator/chef-separator.tsx",
			"qualifiedName": ""
		},
		"1217": {
			"sourceFileName": "src/molecules/chef-separator/chef-separator.tsx",
			"qualifiedName": "ChefSeparator"
		},
		"1222": {
			"sourceFileName": "src/molecules/chef-side-panel/chef-side-panel.tsx",
			"qualifiedName": ""
		},
		"1223": {
			"sourceFileName": "src/molecules/chef-side-panel/chef-side-panel.tsx",
			"qualifiedName": "ChefSidePanel"
		},
		"1226": {
			"sourceFileName": "src/molecules/chef-side-panel/chef-side-panel.tsx",
			"qualifiedName": "ChefSidePanel.visible"
		},
		"1236": {
			"sourceFileName": "src/molecules/chef-status-filter-group/chef-status-filter-group.tsx",
			"qualifiedName": ""
		},
		"1237": {
			"sourceFileName": "src/molecules/chef-status-filter-group/chef-status-filter-group.tsx",
			"qualifiedName": "ChefStatusFilterGroup"
		},
		"1240": {
			"sourceFileName": "src/molecules/chef-status-filter-group/chef-status-filter-group.tsx",
			"qualifiedName": "ChefStatusFilterGroup.value"
		},
		"1259": {
			"sourceFileName": "src/molecules/chef-stepper/chef-stepper.tsx",
			"qualifiedName": ""
		},
		"1260": {
			"sourceFileName": "src/molecules/chef-stepper/chef-stepper.tsx",
			"qualifiedName": "ChefStepper"
		},
		"1265": {
			"sourceFileName": "src/molecules/chef-tab-selector/chef-tab-selector.tsx",
			"qualifiedName": ""
		},
		"1266": {
			"sourceFileName": "src/molecules/chef-tab-selector/chef-tab-selector.tsx",
			"qualifiedName": "ChefTabSelector"
		},
		"1269": {
			"sourceFileName": "src/molecules/chef-tab-selector/chef-tab-selector.tsx",
			"qualifiedName": "ChefTabSelector.value"
		},
		"1285": {
			"sourceFileName": "src/molecules/chef-toggle/chef-toggle.tsx",
			"qualifiedName": ""
		},
		"1286": {
			"sourceFileName": "src/molecules/chef-toggle/chef-toggle.tsx",
			"qualifiedName": "ChefToggle"
		},
		"1289": {
			"sourceFileName": "src/molecules/chef-toggle/chef-toggle.tsx",
			"qualifiedName": "ChefToggle.value"
		},
		"1305": {
			"sourceFileName": "src/molecules/chef-toolbar/chef-toolbar.tsx",
			"qualifiedName": ""
		},
		"1306": {
			"sourceFileName": "src/molecules/chef-toolbar/chef-toolbar.tsx",
			"qualifiedName": "ChefToolbar"
		},
		"1382": {
			"sourceFileName": "src/templates/chef-aside/chef-aside.tsx",
			"qualifiedName": ""
		},
		"1383": {
			"sourceFileName": "src/templates/chef-aside/chef-aside.tsx",
			"qualifiedName": "ChefAside"
		},
		"1388": {
			"sourceFileName": "src/templates/chef-header/chef-header.tsx",
			"qualifiedName": ""
		},
		"1389": {
			"sourceFileName": "src/templates/chef-header/chef-header.tsx",
			"qualifiedName": "ChefHeader"
		},
		"1394": {
			"sourceFileName": "src/templates/chef-layout/chef-layout.tsx",
			"qualifiedName": ""
		},
		"1395": {
			"sourceFileName": "src/templates/chef-layout/chef-layout.tsx",
			"qualifiedName": "ChefLayout"
		},
		"1400": {
			"sourceFileName": "src/templates/chef-main/chef-main.tsx",
			"qualifiedName": ""
		},
		"1401": {
			"sourceFileName": "src/templates/chef-main/chef-main.tsx",
			"qualifiedName": "ChefMain"
		},
		"1406": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": ""
		},
		"1407": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage"
		},
		"1410": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage.heading"
		},
		"1411": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage.subheading"
		},
		"1412": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage.errorMessage"
		},
		"1413": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage.secondaryBtnText"
		},
		"1414": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage.secondaryBtnShow"
		},
		"1415": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage.confirmBtnText"
		},
		"1416": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage.cancelBtnText"
		},
		"1417": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage.confirmLoading"
		},
		"1418": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage.pageLoading"
		},
		"1419": {
			"sourceFileName": "src/templates/chef-page/chef-page.tsx",
			"qualifiedName": "ChefPage.disableConfirm"
		}
	}
}