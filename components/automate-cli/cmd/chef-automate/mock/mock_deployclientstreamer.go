// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chef/automate/api/interservice/deployment (interfaces: DeployClientStreamer)

// Package mock_deployment is a generated GoMock package.
package mock

import (
	context "context"
	"errors"
	reflect "reflect"
	"time"

	deployment "github.com/chef/automate/api/interservice/deployment"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// MockDeployClientStreamer is a mock of DeployClientStreamer interface.
type MockDeployClientStreamer struct {
	ctrl     *gomock.Controller
	returnError bool
	errorMock error
	licenseStatusFunc func(arg0 context.Context, arg1 *deployment.LicenseStatusRequest, arg2 ...grpc.CallOption) (*deployment.LicenseStatusResponse, error)
	recorder *MockDeployClientStreamerMockRecorder
}

// MockDeployClientStreamerMockRecorder is the mock recorder for MockDeployClientStreamer.
type MockDeployClientStreamerMockRecorder struct {
	mock *MockDeployClientStreamer
}

// NewMockDeployClientStreamer creates a new mock instance.
func NewMockDeployClientStreamer(ctrl *gomock.Controller) *MockDeployClientStreamer {
	mock := &MockDeployClientStreamer{ctrl: ctrl}
	mock.recorder = &MockDeployClientStreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeployClientStreamer) EXPECT() *MockDeployClientStreamerMockRecorder {
	return m.recorder
}

// SetReturnError sets the value to be returned by LicenseStatus to an error.
func (m *MockDeployClientStreamer) SetReturnError(returnError bool, err error) {
	m.returnError = returnError
	m.errorMock = err
}


// A1UpgradeStatus mocks base method.
func (m *MockDeployClientStreamer) A1UpgradeStatus(arg0 context.Context, arg1 *deployment.A1UpgradeStatusRequest, arg2 ...grpc.CallOption) (deployment.Deployment_A1UpgradeStatusClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "A1UpgradeStatus", varargs...)
	ret0, _ := ret[0].(deployment.Deployment_A1UpgradeStatusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// A1UpgradeStatus indicates an expected call of A1UpgradeStatus.
func (mr *MockDeployClientStreamerMockRecorder) A1UpgradeStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "A1UpgradeStatus", reflect.TypeOf((*MockDeployClientStreamer)(nil).A1UpgradeStatus), varargs...)
}

// BackupIntegrityShow mocks base method.
func (m *MockDeployClientStreamer) BackupIntegrityShow(arg0 context.Context, arg1 *deployment.BackupIntegrityShowRequest, arg2 ...grpc.CallOption) (*deployment.BackupIntegrityShowResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BackupIntegrityShow", varargs...)
	ret0, _ := ret[0].(*deployment.BackupIntegrityShowResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupIntegrityShow indicates an expected call of BackupIntegrityShow.
func (mr *MockDeployClientStreamerMockRecorder) BackupIntegrityShow(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupIntegrityShow", reflect.TypeOf((*MockDeployClientStreamer)(nil).BackupIntegrityShow), varargs...)
}

// BackupStatus mocks base method.
func (m *MockDeployClientStreamer) BackupStatus(arg0 context.Context, arg1 *deployment.BackupStatusRequest, arg2 ...grpc.CallOption) (*deployment.BackupStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BackupStatus", varargs...)
	ret0, _ := ret[0].(*deployment.BackupStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupStatus indicates an expected call of BackupStatus.
func (mr *MockDeployClientStreamerMockRecorder) BackupStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupStatus", reflect.TypeOf((*MockDeployClientStreamer)(nil).BackupStatus), varargs...)
}

// BootstrapBundle mocks base method.
func (m *MockDeployClientStreamer) BootstrapBundle(arg0 context.Context, arg1 *deployment.BootstrapBundleRequest, arg2 ...grpc.CallOption) (deployment.Deployment_BootstrapBundleClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BootstrapBundle", varargs...)
	ret0, _ := ret[0].(deployment.Deployment_BootstrapBundleClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BootstrapBundle indicates an expected call of BootstrapBundle.
func (mr *MockDeployClientStreamerMockRecorder) BootstrapBundle(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootstrapBundle", reflect.TypeOf((*MockDeployClientStreamer)(nil).BootstrapBundle), varargs...)
}

// CancelBackup mocks base method.
func (m *MockDeployClientStreamer) CancelBackup(arg0 context.Context, arg1 *deployment.CancelBackupRequest, arg2 ...grpc.CallOption) (*deployment.CancelBackupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelBackup", varargs...)
	ret0, _ := ret[0].(*deployment.CancelBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBackup indicates an expected call of CancelBackup.
func (mr *MockDeployClientStreamerMockRecorder) CancelBackup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBackup", reflect.TypeOf((*MockDeployClientStreamer)(nil).CancelBackup), varargs...)
}

// Close mocks base method.
func (m *MockDeployClientStreamer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDeployClientStreamerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDeployClientStreamer)(nil).Close))
}

// ConfigureDeployment mocks base method.
func (m *MockDeployClientStreamer) ConfigureDeployment(arg0 context.Context, arg1 *deployment.ConfigureDeploymentRequest, arg2 ...grpc.CallOption) (*deployment.ConfigureDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigureDeployment", varargs...)
	ret0, _ := ret[0].(*deployment.ConfigureDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureDeployment indicates an expected call of ConfigureDeployment.
func (mr *MockDeployClientStreamerMockRecorder) ConfigureDeployment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureDeployment", reflect.TypeOf((*MockDeployClientStreamer)(nil).ConfigureDeployment), varargs...)
}

// ControlIndexUpgradeStatus mocks base method.
func (m *MockDeployClientStreamer) ControlIndexUpgradeStatus(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*deployment.ControlIndexUpgradeStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ControlIndexUpgradeStatus", varargs...)
	ret0, _ := ret[0].(*deployment.ControlIndexUpgradeStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControlIndexUpgradeStatus indicates an expected call of ControlIndexUpgradeStatus.
func (mr *MockDeployClientStreamerMockRecorder) ControlIndexUpgradeStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlIndexUpgradeStatus", reflect.TypeOf((*MockDeployClientStreamer)(nil).ControlIndexUpgradeStatus), varargs...)
}

// CreateBackup mocks base method.
func (m *MockDeployClientStreamer) CreateBackup(arg0 context.Context, arg1 *deployment.CreateBackupRequest, arg2 ...grpc.CallOption) (*deployment.CreateBackupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackup", varargs...)
	ret0, _ := ret[0].(*deployment.CreateBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockDeployClientStreamerMockRecorder) CreateBackup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockDeployClientStreamer)(nil).CreateBackup), varargs...)
}

// CurrentReleaseManifest mocks base method.
func (m *MockDeployClientStreamer) CurrentReleaseManifest(arg0 context.Context, arg1 *deployment.CurrentReleaseManifestRequest, arg2 ...grpc.CallOption) (*deployment.ReleaseManifest, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CurrentReleaseManifest", varargs...)
	ret0, _ := ret[0].(*deployment.ReleaseManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentReleaseManifest indicates an expected call of CurrentReleaseManifest.
func (mr *MockDeployClientStreamerMockRecorder) CurrentReleaseManifest(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentReleaseManifest", reflect.TypeOf((*MockDeployClientStreamer)(nil).CurrentReleaseManifest), varargs...)
}

// DeleteBackups mocks base method.
func (m *MockDeployClientStreamer) DeleteBackups(arg0 context.Context, arg1 *deployment.DeleteBackupsRequest, arg2 ...grpc.CallOption) (*deployment.DeleteBackupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackups", varargs...)
	ret0, _ := ret[0].(*deployment.DeleteBackupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackups indicates an expected call of DeleteBackups.
func (mr *MockDeployClientStreamerMockRecorder) DeleteBackups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackups", reflect.TypeOf((*MockDeployClientStreamer)(nil).DeleteBackups), varargs...)
}

// Deploy mocks base method.
func (m *MockDeployClientStreamer) Deploy(arg0 context.Context, arg1 *deployment.DeployRequest, arg2 ...grpc.CallOption) (*deployment.DeployResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deploy", varargs...)
	ret0, _ := ret[0].(*deployment.DeployResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy.
func (mr *MockDeployClientStreamerMockRecorder) Deploy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockDeployClientStreamer)(nil).Deploy), varargs...)
}

// DeployDataServices mocks base method.
func (m *MockDeployClientStreamer) DeployDataServices(arg0 context.Context, arg1 *deployment.DeployRequest, arg2 ...grpc.CallOption) (*deployment.DeployResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployDataServices", varargs...)
	ret0, _ := ret[0].(*deployment.DeployResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployDataServices indicates an expected call of DeployDataServices.
func (mr *MockDeployClientStreamerMockRecorder) DeployDataServices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployDataServices", reflect.TypeOf((*MockDeployClientStreamer)(nil).DeployDataServices), varargs...)
}

// DeployID mocks base method.
func (m *MockDeployClientStreamer) DeployID(arg0 context.Context, arg1 *deployment.DeployIDRequest, arg2 ...grpc.CallOption) (*deployment.DeployIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployID", varargs...)
	ret0, _ := ret[0].(*deployment.DeployIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployID indicates an expected call of DeployID.
func (mr *MockDeployClientStreamerMockRecorder) DeployID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployID", reflect.TypeOf((*MockDeployClientStreamer)(nil).DeployID), varargs...)
}

// DeploySome mocks base method.
func (m *MockDeployClientStreamer) DeploySome(arg0 context.Context, arg1 *deployment.DeployRequest, arg2 ...grpc.CallOption) (*deployment.DeployResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeploySome", varargs...)
	ret0, _ := ret[0].(*deployment.DeployResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploySome indicates an expected call of DeploySome.
func (mr *MockDeployClientStreamerMockRecorder) DeploySome(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploySome", reflect.TypeOf((*MockDeployClientStreamer)(nil).DeploySome), varargs...)
}

// DeployStatus mocks base method.
func (m *MockDeployClientStreamer) DeployStatus(arg0 context.Context, arg1 *deployment.DeployStatusRequest, arg2 ...grpc.CallOption) (deployment.Deployment_DeployStatusClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeployStatus", varargs...)
	ret0, _ := ret[0].(deployment.Deployment_DeployStatusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployStatus indicates an expected call of DeployStatus.
func (mr *MockDeployClientStreamerMockRecorder) DeployStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployStatus", reflect.TypeOf((*MockDeployClientStreamer)(nil).DeployStatus), varargs...)
}

// DumpDB mocks base method.
func (m *MockDeployClientStreamer) DumpDB(arg0 context.Context, arg1 *deployment.DumpDBRequest, arg2 ...grpc.CallOption) (deployment.Deployment_DumpDBClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DumpDB", varargs...)
	ret0, _ := ret[0].(deployment.Deployment_DumpDBClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpDB indicates an expected call of DumpDB.
func (mr *MockDeployClientStreamerMockRecorder) DumpDB(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpDB", reflect.TypeOf((*MockDeployClientStreamer)(nil).DumpDB), varargs...)
}

// GatherLogs mocks base method.
func (m *MockDeployClientStreamer) GatherLogs(arg0 context.Context, arg1 *deployment.GatherLogsRequest, arg2 ...grpc.CallOption) (*deployment.GatherLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GatherLogs", varargs...)
	ret0, _ := ret[0].(*deployment.GatherLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GatherLogs indicates an expected call of GatherLogs.
func (mr *MockDeployClientStreamerMockRecorder) GatherLogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatherLogs", reflect.TypeOf((*MockDeployClientStreamer)(nil).GatherLogs), varargs...)
}

// GatherLogsDownload mocks base method.
func (m *MockDeployClientStreamer) GatherLogsDownload(arg0 context.Context, arg1 *deployment.GatherLogsDownloadRequest, arg2 ...grpc.CallOption) (deployment.Deployment_GatherLogsDownloadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GatherLogsDownload", varargs...)
	ret0, _ := ret[0].(deployment.Deployment_GatherLogsDownloadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GatherLogsDownload indicates an expected call of GatherLogsDownload.
func (mr *MockDeployClientStreamerMockRecorder) GatherLogsDownload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatherLogsDownload", reflect.TypeOf((*MockDeployClientStreamer)(nil).GatherLogsDownload), varargs...)
}

// GenerateAdminToken mocks base method.
func (m *MockDeployClientStreamer) GenerateAdminToken(arg0 context.Context, arg1 *deployment.GenerateAdminTokenRequest, arg2 ...grpc.CallOption) (*deployment.GenerateAdminTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateAdminToken", varargs...)
	ret0, _ := ret[0].(*deployment.GenerateAdminTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAdminToken indicates an expected call of GenerateAdminToken.
func (mr *MockDeployClientStreamerMockRecorder) GenerateAdminToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAdminToken", reflect.TypeOf((*MockDeployClientStreamer)(nil).GenerateAdminToken), varargs...)
}

// GetAutomateConfig mocks base method.
func (m *MockDeployClientStreamer) GetAutomateConfig(arg0 context.Context, arg1 *deployment.GetAutomateConfigRequest, arg2 ...grpc.CallOption) (*deployment.GetAutomateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAutomateConfig", varargs...)
	ret0, _ := ret[0].(*deployment.GetAutomateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomateConfig indicates an expected call of GetAutomateConfig.
func (mr *MockDeployClientStreamerMockRecorder) GetAutomateConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomateConfig", reflect.TypeOf((*MockDeployClientStreamer)(nil).GetAutomateConfig), varargs...)
}

// GetCLIExecutable mocks base method.
func (m *MockDeployClientStreamer) GetCLIExecutable(arg0 context.Context, arg1 *deployment.GetCLIExecutableRequest, arg2 ...grpc.CallOption) (deployment.Deployment_GetCLIExecutableClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCLIExecutable", varargs...)
	ret0, _ := ret[0].(deployment.Deployment_GetCLIExecutableClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCLIExecutable indicates an expected call of GetCLIExecutable.
func (mr *MockDeployClientStreamerMockRecorder) GetCLIExecutable(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCLIExecutable", reflect.TypeOf((*MockDeployClientStreamer)(nil).GetCLIExecutable), varargs...)
}

// InfrastructureNodeDelete mocks base method.
func (m *MockDeployClientStreamer) InfrastructureNodeDelete(arg0 context.Context, arg1 *deployment.InfrastructureNodeDeleteRequest, arg2 ...grpc.CallOption) (*deployment.InfrastructureNodeDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InfrastructureNodeDelete", varargs...)
	ret0, _ := ret[0].(*deployment.InfrastructureNodeDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InfrastructureNodeDelete indicates an expected call of InfrastructureNodeDelete.
func (mr *MockDeployClientStreamerMockRecorder) InfrastructureNodeDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfrastructureNodeDelete", reflect.TypeOf((*MockDeployClientStreamer)(nil).InfrastructureNodeDelete), varargs...)
}

// IsValidUpgrade mocks base method.
func (m *MockDeployClientStreamer) IsValidUpgrade(arg0 context.Context, arg1 *deployment.UpgradeRequest, arg2 ...grpc.CallOption) (*deployment.ValidatedUpgradeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsValidUpgrade", varargs...)
	ret0, _ := ret[0].(*deployment.ValidatedUpgradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidUpgrade indicates an expected call of IsValidUpgrade.
func (mr *MockDeployClientStreamerMockRecorder) IsValidUpgrade(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidUpgrade", reflect.TypeOf((*MockDeployClientStreamer)(nil).IsValidUpgrade), varargs...)
}

// LicenseApply mocks base method.
func (m *MockDeployClientStreamer) LicenseApply(arg0 context.Context, arg1 *deployment.LicenseApplyRequest, arg2 ...grpc.CallOption) (*deployment.LicenseApplyResponse, error) {
	if m.returnError && m.errorMock !=nil{
		return &deployment.LicenseApplyResponse{
			Updated: true,
			Message: "dup",
			Duplicate: true,
		}, nil
	} 
	
	if m.returnError && m.errorMock == nil{
		return nil, errors.New("error occurred!") 
	}

	return &deployment.LicenseApplyResponse{
		Updated: true,
			Message: "dup",
			Duplicate: true,
	}, nil
}

// LicenseApply indicates an expected call of LicenseApply.
func (mr *MockDeployClientStreamerMockRecorder) LicenseApply(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LicenseApply", reflect.TypeOf((*MockDeployClientStreamer)(nil).LicenseApply), varargs...)
}

// LicenseStatus mocks base method.
func (m *MockDeployClientStreamer) LicenseStatus(arg0 context.Context, arg1 *deployment.LicenseStatusRequest, arg2 ...grpc.CallOption) (*deployment.LicenseStatusResponse, error) {
	if m.returnError && m.errorMock !=nil{
		return &deployment.LicenseStatusResponse{
			Set: true,
			ExpirationDate: timestamppb.New(time.Now().Add(-24 * time.Hour)),
		}, nil
	} 
	
	if m.returnError && m.errorMock == nil{
		return nil, errors.New("error occurred!") 
	}

	return &deployment.LicenseStatusResponse{
		Set: true,
		ExpirationDate: timestamppb.New(time.Now().Add(time.Hour+24)),
	}, nil
}

// LicenseStatus indicates an expected call of LicenseStatus.
func (mr *MockDeployClientStreamerMockRecorder) LicenseStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	// mr.mock.ctrl.T.Helper()
	mr.mock.returnError = true
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LicenseStatus", reflect.TypeOf((*MockDeployClientStreamer)(nil).LicenseStatus), varargs...)
}

// ListBackups mocks base method.
func (m *MockDeployClientStreamer) ListBackups(arg0 context.Context, arg1 *deployment.ListBackupsRequest, arg2 ...grpc.CallOption) (*deployment.ListBackupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackups", varargs...)
	ret0, _ := ret[0].(*deployment.ListBackupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockDeployClientStreamerMockRecorder) ListBackups(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockDeployClientStreamer)(nil).ListBackups), varargs...)
}

// ManifestVersion mocks base method.
func (m *MockDeployClientStreamer) ManifestVersion(arg0 context.Context, arg1 *deployment.ManifestVersionRequest, arg2 ...grpc.CallOption) (*deployment.ManifestVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ManifestVersion", varargs...)
	ret0, _ := ret[0].(*deployment.ManifestVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManifestVersion indicates an expected call of ManifestVersion.
func (mr *MockDeployClientStreamerMockRecorder) ManifestVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManifestVersion", reflect.TypeOf((*MockDeployClientStreamer)(nil).ManifestVersion), varargs...)
}

// NewDeployment mocks base method.
func (m *MockDeployClientStreamer) NewDeployment(arg0 context.Context, arg1 *deployment.NewDeploymentRequest, arg2 ...grpc.CallOption) (*deployment.DeploymentID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewDeployment", varargs...)
	ret0, _ := ret[0].(*deployment.DeploymentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDeployment indicates an expected call of NewDeployment.
func (mr *MockDeployClientStreamerMockRecorder) NewDeployment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeployment", reflect.TypeOf((*MockDeployClientStreamer)(nil).NewDeployment), varargs...)
}

// NodeInventory mocks base method.
func (m *MockDeployClientStreamer) NodeInventory(arg0 context.Context, arg1 *deployment.NodeInventoryRequest, arg2 ...grpc.CallOption) (*deployment.NodeInventoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeInventory", varargs...)
	ret0, _ := ret[0].(*deployment.NodeInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeInventory indicates an expected call of NodeInventory.
func (mr *MockDeployClientStreamerMockRecorder) NodeInventory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeInventory", reflect.TypeOf((*MockDeployClientStreamer)(nil).NodeInventory), varargs...)
}

// PatchAutomateConfig mocks base method.
func (m *MockDeployClientStreamer) PatchAutomateConfig(arg0 context.Context, arg1 *deployment.PatchAutomateConfigRequest, arg2 ...grpc.CallOption) (*deployment.PatchAutomateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchAutomateConfig", varargs...)
	ret0, _ := ret[0].(*deployment.PatchAutomateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchAutomateConfig indicates an expected call of PatchAutomateConfig.
func (mr *MockDeployClientStreamerMockRecorder) PatchAutomateConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchAutomateConfig", reflect.TypeOf((*MockDeployClientStreamer)(nil).PatchAutomateConfig), varargs...)
}

// Ping mocks base method.
func (m *MockDeployClientStreamer) Ping(arg0 context.Context, arg1 *deployment.PingRequest, arg2 ...grpc.CallOption) (*deployment.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*deployment.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockDeployClientStreamerMockRecorder) Ping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDeployClientStreamer)(nil).Ping), varargs...)
}

// Preload mocks base method.
func (m *MockDeployClientStreamer) Preload(arg0 context.Context, arg1 *deployment.DeployRequest, arg2 ...grpc.CallOption) (*deployment.DeployResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(*deployment.DeployResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preload indicates an expected call of Preload.
func (mr *MockDeployClientStreamerMockRecorder) Preload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockDeployClientStreamer)(nil).Preload), varargs...)
}

// RemoveSome mocks base method.
func (m *MockDeployClientStreamer) RemoveSome(arg0 context.Context, arg1 *deployment.RemoveRequest, arg2 ...grpc.CallOption) (*deployment.RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSome", varargs...)
	ret0, _ := ret[0].(*deployment.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSome indicates an expected call of RemoveSome.
func (mr *MockDeployClientStreamerMockRecorder) RemoveSome(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSome", reflect.TypeOf((*MockDeployClientStreamer)(nil).RemoveSome), varargs...)
}

// RestartServices mocks base method.
func (m *MockDeployClientStreamer) RestartServices(arg0 context.Context, arg1 *deployment.RestartServicesRequest, arg2 ...grpc.CallOption) (*deployment.RestartServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartServices", varargs...)
	ret0, _ := ret[0].(*deployment.RestartServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartServices indicates an expected call of RestartServices.
func (mr *MockDeployClientStreamerMockRecorder) RestartServices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartServices", reflect.TypeOf((*MockDeployClientStreamer)(nil).RestartServices), varargs...)
}

// RestoreBackup mocks base method.
func (m *MockDeployClientStreamer) RestoreBackup(arg0 context.Context, arg1 *deployment.RestoreBackupRequest, arg2 ...grpc.CallOption) (*deployment.RestoreBackupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreBackup", varargs...)
	ret0, _ := ret[0].(*deployment.RestoreBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreBackup indicates an expected call of RestoreBackup.
func (mr *MockDeployClientStreamerMockRecorder) RestoreBackup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreBackup", reflect.TypeOf((*MockDeployClientStreamer)(nil).RestoreBackup), varargs...)
}

// ServiceVersions mocks base method.
func (m *MockDeployClientStreamer) ServiceVersions(arg0 context.Context, arg1 *deployment.ServiceVersionsRequest, arg2 ...grpc.CallOption) (*deployment.ServiceVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServiceVersions", varargs...)
	ret0, _ := ret[0].(*deployment.ServiceVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceVersions indicates an expected call of ServiceVersions.
func (mr *MockDeployClientStreamerMockRecorder) ServiceVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceVersions", reflect.TypeOf((*MockDeployClientStreamer)(nil).ServiceVersions), varargs...)
}

// SetAutomateConfig mocks base method.
func (m *MockDeployClientStreamer) SetAutomateConfig(arg0 context.Context, arg1 *deployment.SetAutomateConfigRequest, arg2 ...grpc.CallOption) (*deployment.SetAutomateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAutomateConfig", varargs...)
	ret0, _ := ret[0].(*deployment.SetAutomateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAutomateConfig indicates an expected call of SetAutomateConfig.
func (mr *MockDeployClientStreamerMockRecorder) SetAutomateConfig(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutomateConfig", reflect.TypeOf((*MockDeployClientStreamer)(nil).SetAutomateConfig), varargs...)
}

// SetLogLevel mocks base method.
func (m *MockDeployClientStreamer) SetLogLevel(arg0 context.Context, arg1 *deployment.SetLogLevelRequest, arg2 ...grpc.CallOption) (*deployment.SetLogLevelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLogLevel", varargs...)
	ret0, _ := ret[0].(*deployment.SetLogLevelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockDeployClientStreamerMockRecorder) SetLogLevel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockDeployClientStreamer)(nil).SetLogLevel), varargs...)
}

// ShowBackup mocks base method.
func (m *MockDeployClientStreamer) ShowBackup(arg0 context.Context, arg1 *deployment.ShowBackupRequest, arg2 ...grpc.CallOption) (*deployment.ShowBackupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShowBackup", varargs...)
	ret0, _ := ret[0].(*deployment.ShowBackupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowBackup indicates an expected call of ShowBackup.
func (mr *MockDeployClientStreamerMockRecorder) ShowBackup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowBackup", reflect.TypeOf((*MockDeployClientStreamer)(nil).ShowBackup), varargs...)
}

// StartConverge mocks base method.
func (m *MockDeployClientStreamer) StartConverge(arg0 context.Context, arg1 *deployment.StartConvergeRequest, arg2 ...grpc.CallOption) (*deployment.StartConvergeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartConverge", varargs...)
	ret0, _ := ret[0].(*deployment.StartConvergeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartConverge indicates an expected call of StartConverge.
func (mr *MockDeployClientStreamerMockRecorder) StartConverge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConverge", reflect.TypeOf((*MockDeployClientStreamer)(nil).StartConverge), varargs...)
}

// StartNonDataServices mocks base method.
func (m *MockDeployClientStreamer) StartNonDataServices(arg0 context.Context, arg1 *deployment.DeployRequest, arg2 ...grpc.CallOption) (*deployment.DeployResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartNonDataServices", varargs...)
	ret0, _ := ret[0].(*deployment.DeployResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartNonDataServices indicates an expected call of StartNonDataServices.
func (mr *MockDeployClientStreamerMockRecorder) StartNonDataServices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNonDataServices", reflect.TypeOf((*MockDeployClientStreamer)(nil).StartNonDataServices), varargs...)
}

// Status mocks base method.
func (m *MockDeployClientStreamer) Status(arg0 context.Context, arg1 *deployment.StatusRequest, arg2 ...grpc.CallOption) (*deployment.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*deployment.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockDeployClientStreamerMockRecorder) Status(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDeployClientStreamer)(nil).Status), varargs...)
}

// Stop mocks base method.
func (m *MockDeployClientStreamer) Stop(arg0 context.Context, arg1 *deployment.StopRequest, arg2 ...grpc.CallOption) (*deployment.StopResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(*deployment.StopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockDeployClientStreamerMockRecorder) Stop(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDeployClientStreamer)(nil).Stop), varargs...)
}

// StopConverge mocks base method.
func (m *MockDeployClientStreamer) StopConverge(arg0 context.Context, arg1 *deployment.StopConvergeRequest, arg2 ...grpc.CallOption) (*deployment.StopConvergeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopConverge", varargs...)
	ret0, _ := ret[0].(*deployment.StopConvergeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopConverge indicates an expected call of StopConverge.
func (mr *MockDeployClientStreamerMockRecorder) StopConverge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopConverge", reflect.TypeOf((*MockDeployClientStreamer)(nil).StopConverge), varargs...)
}

// StreamDeployEvents mocks base method.
func (m *MockDeployClientStreamer) StreamDeployEvents(arg0 string, arg1 *deployment.DeploymentID, arg2 deployment.DeployEventHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamDeployEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamDeployEvents indicates an expected call of StreamDeployEvents.
func (mr *MockDeployClientStreamerMockRecorder) StreamDeployEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamDeployEvents", reflect.TypeOf((*MockDeployClientStreamer)(nil).StreamDeployEvents), arg0, arg1, arg2)
}

// SystemLogs mocks base method.
func (m *MockDeployClientStreamer) SystemLogs(arg0 context.Context, arg1 *deployment.SystemLogsRequest, arg2 ...grpc.CallOption) (deployment.Deployment_SystemLogsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SystemLogs", varargs...)
	ret0, _ := ret[0].(deployment.Deployment_SystemLogsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemLogs indicates an expected call of SystemLogs.
func (mr *MockDeployClientStreamerMockRecorder) SystemLogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemLogs", reflect.TypeOf((*MockDeployClientStreamer)(nil).SystemLogs), varargs...)
}

// Upgrade mocks base method.
func (m *MockDeployClientStreamer) Upgrade(arg0 context.Context, arg1 *deployment.UpgradeRequest, arg2 ...grpc.CallOption) (*deployment.UpgradeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upgrade", varargs...)
	ret0, _ := ret[0].(*deployment.UpgradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockDeployClientStreamerMockRecorder) Upgrade(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockDeployClientStreamer)(nil).Upgrade), varargs...)
}

// UpgradeStatus mocks base method.
func (m *MockDeployClientStreamer) UpgradeStatus(arg0 context.Context, arg1 *deployment.UpgradeStatusRequest, arg2 ...grpc.CallOption) (*deployment.UpgradeStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeStatus", varargs...)
	ret0, _ := ret[0].(*deployment.UpgradeStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeStatus indicates an expected call of UpgradeStatus.
func (mr *MockDeployClientStreamerMockRecorder) UpgradeStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeStatus", reflect.TypeOf((*MockDeployClientStreamer)(nil).UpgradeStatus), varargs...)
}

// Usage mocks base method.
func (m *MockDeployClientStreamer) Usage(arg0 context.Context, arg1 *deployment.UsageRequest, arg2 ...grpc.CallOption) (*deployment.UsageResponse, error) {
	if m.returnError {
		return nil, errors.New("some error message")
	} else {
		return &deployment.UsageResponse{
			Nodes: []*deployment.NodeUsage{
				{
				
					Id        :   "false", 
					LastSeen :"false", 
					LastCcrReceived   :   "false", 
					CheckinType    : "false", 
					Metadata : map[string]string{}, 
				},
			},
		}, nil
	}
}

// Usage indicates an expected call of Usage.
func (mr *MockDeployClientStreamerMockRecorder) Usage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	// mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usage", reflect.TypeOf((*MockDeployClientStreamer)(nil).Usage), varargs...)
}

// ValidateBackupIntegrity mocks base method.
func (m *MockDeployClientStreamer) ValidateBackupIntegrity(arg0 context.Context, arg1 *deployment.ValidateBackupIntegrityRequest, arg2 ...grpc.CallOption) (*deployment.ValidateBackupIntegrityResponse, error) {
	if m.returnError {
		return nil, errors.New("some error message")
	} else {
		return &deployment.ValidateBackupIntegrityResponse{
			Snapshots: []*deployment.SnapshotIntegrity{
				{
				
					Id           :timestamppb.New(time.Now()),
					LastVerified :timestamppb.New(time.Now()),
					Missing      :[]string{"hello"},
					Corrupted    : false, 
				},
			},
		}, nil
	}
}

// ValidateBackupIntegrity indicates an expected call of ValidateBackupIntegrity.
func (mr *MockDeployClientStreamerMockRecorder) ValidateBackupIntegrity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBackupIntegrity", reflect.TypeOf((*MockDeployClientStreamer)(nil).ValidateBackupIntegrity), varargs...)
}
