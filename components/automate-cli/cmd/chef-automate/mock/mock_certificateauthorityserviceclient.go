// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chef/automate/api/interservice/deployment (interfaces: CertificateAuthorityServiceClient)

// Package mock_deployment is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	deployment "github.com/chef/automate/api/interservice/deployment"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCertificateAuthorityServiceClient is a mock of CertificateAuthorityServiceClient interface.
type MockCertificateAuthorityServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateAuthorityServiceClientMockRecorder
}

// MockCertificateAuthorityServiceClientMockRecorder is the mock recorder for MockCertificateAuthorityServiceClient.
type MockCertificateAuthorityServiceClientMockRecorder struct {
	mock *MockCertificateAuthorityServiceClient
}

// NewMockCertificateAuthorityServiceClient creates a new mock instance.
func NewMockCertificateAuthorityServiceClient(ctrl *gomock.Controller) *MockCertificateAuthorityServiceClient {
	mock := &MockCertificateAuthorityServiceClient{ctrl: ctrl}
	mock.recorder = &MockCertificateAuthorityServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateAuthorityServiceClient) EXPECT() *MockCertificateAuthorityServiceClientMockRecorder {
	return m.recorder
}

// GetRootCert mocks base method.
func (m *MockCertificateAuthorityServiceClient) GetRootCert(arg0 context.Context, arg1 *deployment.RootCertRequest, arg2 ...grpc.CallOption) (*deployment.RootCertResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRootCert", varargs...)
	ret0, _ := ret[0].(*deployment.RootCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootCert indicates an expected call of GetRootCert.
func (mr *MockCertificateAuthorityServiceClientMockRecorder) GetRootCert(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCert", reflect.TypeOf((*MockCertificateAuthorityServiceClient)(nil).GetRootCert), varargs...)
}

// RegenerateRoot mocks base method.
func (m *MockCertificateAuthorityServiceClient) RegenerateRoot(arg0 context.Context, arg1 *deployment.RegenerateRootRequest, arg2 ...grpc.CallOption) (*deployment.RegenerateRootResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegenerateRoot", varargs...)
	ret0, _ := ret[0].(*deployment.RegenerateRootResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateRoot indicates an expected call of RegenerateRoot.
func (mr *MockCertificateAuthorityServiceClientMockRecorder) RegenerateRoot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateRoot", reflect.TypeOf((*MockCertificateAuthorityServiceClient)(nil).RegenerateRoot), varargs...)
}
