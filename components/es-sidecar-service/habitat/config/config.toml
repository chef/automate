host = "127.0.0.1"
port = "{{cfg.service.port}}"
log_level = "{{cfg.log.level}}"

# Listen to what our gossip protocol whispers
#
# We have modified our plan to have a hard dependency to
# elasticsearch, that will ensure that we will always start
# our service with the required bindings
#
# Elasticsearch
{{~#eachAlive bind.automate-es-gateway.members as |gwmember|}}
  {{~#if @last}}
elasticsearch_url = "http://127.0.0.1:{{gwmember.cfg.http-port}}"
  {{~/if}}
{{~/eachAlive}}

[backups]
{{~#eachAlive bind.automate-elasticsearch.members as |member|}}
  {{~#if @last}}
    {{~#if member.cfg.deprecated_external_es}}
  backend = "fs"
    {{else}}
      {{~#if cfg.backups.backend}}
  backend = "{{cfg.backups.backend}}"
      {{~/if}}
    {{~/if}}
  {{~/if}}
{{~/eachAlive}}
{{~#if cfg.backups.verify_repo}}
  verify_repo = true
{{~else}}
  verify_repo = false
{{~/if}}

{{~#if cfg.backups.fs.root_location}}
[backups.fs]
  root_location = "{{cfg.backups.fs.root_location}}"
  {{~#if cfg.backups.fs.max_snapshot_bytes_per_sec}}
  max_snapshot_bytes_per_sec = "{{cfg.backups.fs.max_snapshot_bytes_per_sec}}"
  {{~/if}}
  {{~#if cfg.backups.fs.max_restore_bytes_per_sec}}
  max_restore_bytes_per_sec = "{{cfg.backups.fs.max_restore_bytes_per_sec}}"
  {{~/if}}
{{~/if}}


{{~#if cfg.backups.s3.bucket}}
[backups.s3]
  name = "{{cfg.backups.s3.bucket}}"
  {{~#if cfg.backups.s3.client_name}}
  client = "{{cfg.backups.s3.client}}"
  {{~/if}}
  {{~#if cfg.backups.s3.base_path}}
  base_path = "{{cfg.backups.s3.base_path}}"
  {{~/if}}
  {{~#if cfg.backups.s3.es.compress}}
  compress = {{cfg.backups.s3.es.compress}}
  {{~/if}}
  {{~#if cfg.backups.s3.es.server_side_encryption}}
  server_side_encryption = "{{cfg.backups.s3.es.server_side_encryption}}"
  {{~/if}}
  {{~#if cfg.backups.s3.es.buffer_size}}
  buffer_size = "{{cfg.backups.s3.es.buffer_size}}"
  {{~/if}}
  {{~#if cfg.backups.s3.es.canned_acl}}
  canned_acl = "{{cfg.backups.s3.es.canned_acl}}"
  {{~/if}}
  {{~#if cfg.backups.s3.es.storage_class}}
  storage_class = "{{cfg.backups.s3.es.storage_class}}"
  {{~/if}}
  {{~#if cfg.backups.s3.es.max_snapshot_bytes_per_sec}}
  max_snapshot_bytes_per_sec = "{{cfg.backups.s3.es.max_snapshot_bytes_per_sec}}"
  {{~/if}}
  {{~#if cfg.backups.s3.es.max_restore_bytes_per_sec}}
  max_restore_bytes_per_sec = "{{cfg.backups.s3.es.max_restore_bytes_per_sec}}"
  {{~/if}}
  {{~#if cfg.backups.s3.es.chunk_size}}
  chunk_size = "{{cfg.backups.s3.es.chunk_size}}"
  {{~/if}}
  {{~#if cfg.backups.s3.es.region}}
  region = "{{cfg.backups.s3.es.region}}"
  {{~/if}}
  {{~#if cfg.backups.s3.es.role_arn}}
  role_arn = "{{cfg.backups.s3.es.role_arn}}"
  {{~/if}}

  {{~#if cfg.backups.s3.enable_aws_auth}}
[backups.s3.aws_auth]
enable = true
    {{~#if cfg.backups.s3.es.region}}
region = "{{cfg.backups.s3.es.region}}"
    {{~/if}}
    {{~#if cfg.backups.s3.aws_auth.access_key}}
access_key = "{{cfg.backups.s3.aws_auth.access_key}}"
    {{~/if}}
    {{~#if cfg.backups.s3.aws_auth.secret_key}}
secret_key = "{{cfg.backups.s3.aws_auth.secret_key}}"
    {{~/if}}
    {{~#if cfg.backups.s3.es_url}}
es_url = "{{cfg.backups.s3.es_url}}"
    {{~/if}}

  {{~/if}}
{{~/if}}

{{~#if cfg.backups.gcs.bucket}}
[backups.gcs]
  name = "{{cfg.backups.gcs.bucket}}"
  {{~#if cfg.backups.gcs.client_name}}
  client = "{{cfg.backups.gcs.client}}"
  {{~/if}}
  {{~#if cfg.backups.gcs.base_path}}
  base_path = "{{cfg.backups.gcs.base_path}}"
  {{~/if}}
  {{~#if cfg.backups.gcs.es.compress}}
  compress = {{cfg.backups.gcs.es.compress}}
  {{~/if}}
  {{~#if cfg.backups.gcs.es.application_name}}
  server_side_encryption = "{{cfg.backups.gcs.es.application_name}}"
  {{~/if}}
  {{~#if cfg.backups.gcs.es.max_snapshot_bytes_per_sec}}
  max_snapshot_bytes_per_sec = "{{cfg.backups.gcs.es.max_snapshot_bytes_per_sec}}"
  {{~/if}}
  {{~#if cfg.backups.gcs.es.max_restore_bytes_per_sec}}
  max_restore_bytes_per_sec = "{{cfg.backups.gcs.es.max_restore_bytes_per_sec}}"
  {{~/if}}
  {{~#if cfg.backups.gcs.es.chunk_size}}
  chunk_size = "{{cfg.backups.gcs.es.chunk_size}}"
  {{~/if}}
{{~/if}}

[tls]
  cert_path = "{{pkg.svc_config_path}}/service.crt"
  key_path = "{{pkg.svc_config_path}}/service.key"
  root_ca_path ="{{pkg.svc_config_path}}/root_ca.crt"
