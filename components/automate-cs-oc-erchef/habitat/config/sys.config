%% -*- mode: erlang -*-
%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=eruby.erlang et
[
    {kernel, [{inet_dist_use_interface, {127,0,0,1}}]},
    {sasl, [
        {sasl_error_logger, {file, "{{pkg.svc_var_path}}/logs/sasl-error.log"} },
        {errlog_type, error}
    ]},

    {lager, [
        {handlers, [
            {lager_console_backend, [
                {level, {{cfg.log.level}}},
                {formatter, lager_default_formatter},
                {formatter_config, [ "[", severity, "] ", message, "\n"]}
            ]}
        ]},

        %% Whether to write a crash log, and where.
        %% Commented/omitted/undefined means no crash logger.
        {crash_log, "{{pkg.svc_var_path}}/logs/crash.log"},

        %% Maximum size in bytes of events in the crash log - defaults to 65536
        {crash_log_msg_size, 65536},

        %% Maximum size of the crash log in bytes, before its rotated, set
        %% to 0 to disable rotation - default is 0
        {crash_log_size, {{cfg.log.rotation_max_bytes}}},

        %% What time to rotate the crash log - default is no time
        %% rotation. See the lager README for a description of this format:
        %% https://github.com/basho/lager/blob/master/README.org
        {crash_log_date, "$D0"},

        %% Number of rotated crash logs to keep, 0 means keep only the
        %% current one - default is 0
        {crash_log_count, {{cfg.log.rotation_max_files}}},

        %% Whether to redirect error_logger messages into lager - defaults to true
        {error_logger_redirect, true},

        %% Bump up the "high-water mark" (default 50), which is the
        %% number of messages per second allowed to come from
        %% error_logger.
        {error_logger_hwm, {{cfg.log.max_error_logs_per_second}}}
    ]},
    {chef_secrets, [
        {provider, chef_secrets_fd}
    ]},
    {darklaunch, [
        {config, "{{pkg.svc_data_path}}/dark_launch_features.json"},
        {reload_time, 10000}
    ]},
    {oc_chef_wm, [
        {ip_mode, [{{cfg.ip_mode}}]},
        {api_version, "12.0.0"},
        {server_flavor, "cs"},

        {default_orgname, undefined},

        {ip, "127.0.0.1"},
        {port, {{cfg.network.port}} },
        {ssl, true},
        {ssl_opts, [
                    {cacertfile, "{{pkg.svc_config_path}}/root_ca.crt"},
                    {certfile, "{{pkg.svc_config_path}}/service.crt"},
                    {keyfile, "{{pkg.svc_config_path}}/service.key"},
                    {verify, verify_peer},
                    {versions, ['tlsv1.2']},
                    {ciphers, [{ecdhe_rsa,aes_128_gcm,null,sha256},
                               {ecdhe_rsa,aes_256_gcm,null,sha384},
                               {ecdhe_ecdsa,aes_128_gcm,null,sha256},
                               {ecdhe_ecdsa,aes_256_gcm,null,sha384},
                               {dhe_rsa,aes_128_gcm,null,sha256},
                               {dhe_rsa,aes_256_gcm,null,sha384}]},
                    {eccs, [secp256r1,brainpoolP256r1,secp256k1,brainpoolP384r1,
                            secp384r1,brainpoolP512r1,sect571r1,sect571k1,secp521r1,
                            sect409k1,sect409r1,sect283k1,sect283r1,sect239k1,sect233k1,
                            sect233r1]},
                    {honor_cipher_order, true},
                    {fail_if_no_peer_cert, true} ]},
        {reqid_header_name, "X-Request-Id"},
        {auth_skew, {{cfg.api.auth_skew}} },
        %% currently only used by the search endpoint to bound
        %% how many nodes are deserialized at a time in
        %% preparing a response.
        {bulk_fetch_batch_size, {{cfg.api.bulk_fetch_batch_size}}},
        {superusers, [<<"pivotal">>]},
        %% metrics config
        {root_metric_key, "chefAPI"},

        {authz_timeout, {{cfg.authz.timeout}}},
        {authz_fanout, {{cfg.authz.fanout}}},

        {reindex_batch_size, {{cfg.index.reindex_batch_size}}},

        {enable_actions, false},
        {actions_fqdn, <<"{{cfg.api.actions_fqdn}}">>},
        {ldap, []},
        {node_license, 999999},
        {upgrade_url, <<"http://www.chef.io/contact/on-premises-simple">>},
        {max_request_size, {{cfg.api.max_request_size}}},
        {server_version, ""},
        {health_ping_timeout, 400},
        {health_ping_modules, [
{{#if cfg.data_collector.enabled }}
            data_collector,
{{/if }}
            oc_chef_authz,
            chef_sql,
            chef_elasticsearch
        ]},
        {base_resource_url, {{cfg.api.base_resource_url}}},
        {strict_search_result_acls, {{cfg.api.strict_search_result_acls}}}
    ]},

    {chef_authn, [
        {secrets_module, {chef_secrets, get, [{default, [<<"chef-server">>, <<"webui_pub_key">>]}]}},
        {keygen_cache_workers, {{cfg.keygen.cache_size}}},
        {keygen_cache_size, {{cfg.keygen.cache_size}}},
        {keygen_start_size, {{cfg.keygen.start_size}}},
        {keygen_timeout, {{cfg.keygen.timeout}}},
        {keygen_size, 2048}
    ]},

    {oc_chef_authz, [
{{#eachAlive bind.automate-cs-oc-bifrost.members as |member|~}}
{{#if @last}}
        {authz_root_url, "https://127.0.0.1:{{member.cfg.http-port}}"},
        {authz_service, [
            {root_url, "https://127.0.0.1:{{member.cfg.http-port}}"},
            %% TODO(ssd) 2018-07-24: Determine how this is different from
            %% authz_timeout in the oc_chef_wm configuration above
            {timeout, {{cfg.authz.timeout}}},
            {init_count, {{cfg.authz.pool_init_size}}},
            {max_count, {{cfg.authz.pool_max_size}}},
            {queue_max, {{cfg.authz.pool_queue_max}}},
            {cull_interval, {1, min}},
            {max_age, {70, sec}},
            {max_connection_duration, {70, sec}},
            {retry_on_conn_closed, true},
            {ibrowse_options, [
                                {connect_timeout, 5000},
                                {ssl_options, [
                                                {cacertfile, "{{pkg.svc_config_path}}/root_ca.crt"},
                                                {certfile, "{{pkg.svc_config_path}}/service.crt"},
                                                {keyfile, "{{pkg.svc_config_path}}/service.key"},
                                                {server_name_indication, "automate-cs-oc-bifrost"},
                                                {verify, verify_peer}
                                ]}
            ]}
        ]},
{{/if~}}
{{/eachAlive}}
        {cleanup_batch_size, 0}
    ]},

    {chef_db, [
        {bulk_fetch_batch_size, {{cfg.api.bulk_fetch_batch_size}}}
    ]},

    {chef_index, [
        {ip_mode, [{{cfg.ip_mode}}]},
        {search_provider, elasticsearch},
        {search_queue_mode, batch},
        {solr_elasticsearch_major_version, 5},
        {search_batch_max_size, {{cfg.index.batch_size}}},
        {search_batch_max_wait, {{cfg.index.batch_max_wait}}},
        {reindex_sleep_min_ms, {{cfg.index.reindex_sleep_min_ms}}},
        {reindex_sleep_max_ms, {{cfg.index.reindex_sleep_max_ms}}},
        {reindex_item_retries, {{cfg.index.reindex_item_retries}}},
        {solr_service, [
{{#eachAlive bind.automate-es-gateway.members as |member| ~}}
    {{#if @last ~}}
        {root_url, "http://127.0.0.1:{{member.cfg.http-port}}"},
    {{/if ~}}
{{/eachAlive }}
            {timeout, {{cfg.index.timeout}}},
            {init_count, {{cfg.index.pool_init_size}}},
            {max_count, {{cfg.index.pool_max_size}}},
            {queue_max, {{cfg.index.pool_queue_max}}},
            {cull_interval, {1, min}},
            {max_age, {70, sec}},
            {max_connection_duration, {70,sec}},
            {retry_on_conn_closed, true},
            {ibrowse_options, [{connect_timeout, 10000}]}
        ]}
    ]},
    {chef_objects, [
{{#eachAlive bind.automate-cs-bookshelf.members as |member| ~}}
    {{#if @last }}
        {s3_url, "https://127.0.0.1:{{member.cfg.http-port}}"},
    {{/if ~}}
{{/eachAlive }}
        %% These need to change if we want to be able to configure
        %% external s3 as our "bookshelf"
        {s3_external_url, {{cfg.api.base_resource_url}}},
        {s3_platform_bucket_name, "bookshelf"},
        {s3_url_ttl, 28800},
        {s3_url_expiry_window_size, {100, percent}},
        {s3_parallel_ops_timeout, 5000},
        {s3_parallel_ops_fanout, 10},
        {s3_ssl_opts, [
                       {cacertfile, "{{pkg.svc_config_path}}/root_ca.crt"},
                       {certfile, "{{pkg.svc_config_path}}/service.crt"},
                       {keyfile, "{{pkg.svc_config_path}}/service.key"},
                       {server_name_indication, "automate-cs-bookshelf"},
                       {verify, verify_peer}
                      ]},
        {depsolver_timeout, {{cfg.depsolver.timeout}}},
        {depsolver_pooler_timeout, {{cfg.depsolver.pool_queue_timeout}}},
        {cbv_cache_enabled, {{cfg.api.cbv_cache_enabled}}},
        {cbv_cache_item_ttl, {{cfg.api.cbv_cache_item_ttl}}}
    ]},
{{#if cfg.data_collector.enabled }}
    {data_collector, [
{{#if cfg.external_automate.enable}}
        {root_url,                "{{cfg.external_automate.node}}/data-collector/v0/"},
        {ibrowse_options,         [
                                   {connect_timeout, 10000},
                                   {ssl_options, [
                                                  {{#if cfg.external_automate.ssl.root_cert}}
                                                  {cacertfile, "{{pkg.svc_config_path}}/external_automate_root_ca.crt"},
                                                  {depth, 32},
                                                  {verify, verify_ca}
                                                  {{/if ~}}
                                                 ]}
                                  ]},

{{else}}
{{#eachAlive bind.automate-gateway.members as |member| ~}}
    {{#if @last ~}}
        {root_url,                "https://127.0.0.1:{{member.cfg.port}}/api/v0/events/data-collector"},
        {ibrowse_options,         [
                                   {connect_timeout, 10000},
                                   {ssl_options, [
                                                  {cacertfile, "{{pkg.svc_config_path}}/root_ca.crt"},
                                                  {certfile, "{{pkg.svc_config_path}}/service.crt"},
                                                  {keyfile, "{{pkg.svc_config_path}}/service.key"},
                                                  {server_name_indication, "automate-gateway"},
                                                  {verify, verify_peer}
                                                 ]}
                                  ]},
    {{/if ~}}
{{/eachAlive ~}}
{{/if ~}}
        {timeout,                 {{cfg.data_collector.timeout}}},
        {init_count,              {{cfg.data_collector.pool_init_size}}},
        {max_count,               {{cfg.data_collector.pool_max_size}}},
        {queue_max,               {{cfg.data_collector.pool_queue_max}}},
        {cull_interval,           {1, min}},
        {max_age,                 {70, sec}},
        {retry_on_conn_closed, true},
        {max_connection_duration, {70,sec}}
    ]},
{{/if }}
    {stats_hero, [
        {udp_socket_pool_size, 20},
        {protocol, statsd},
        {estatsd_host, "127.0.0.1"},
        {estatsd_port, 9466}
    ]},

    {opscoderl_httpc, [
        {pooler_timeout, {{cfg.authz.pool_queue_timeout}}}
    ]},

    {sqerl, [
        {db_driver_mod, sqerl_pgsql_client},
        {ip_mode, [{{cfg.ip_mode}}]},
        %% {config_cb, {chef_secrets_sqerl, config, [{<<"opscode_erchef">>, <<"sql_password">>}]}},
        {db_name, "{{cfg.sql.db_name}}"},
        {idle_check, 10000},
        {pooler_timeout, {{cfg.sql.pool_queue_timeout}}},
        {db_timeout, {{cfg.sql.timeout}}},
        {prepared_statements, {oc_chef_sql, statements, [pgsql]}},
        {column_transforms, [
            {<<"created_at">>, {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}},
            {<<"updated_at">>, {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}}
        ]}
    ]},

    {webmachine, [
        {log_handlers, [
            {oc_wm_request_logger, [
                {file, "{{pkg.svc_var_path}}/logs/requests.log"},
                {file_size, {{cfg.log.rotation_max_megabytes}}},  %% Size in MB
                {files, {{cfg.log.rotation_max_files}}},
                {annotations, [req_id, org_name, msg, darklaunch, perf_stats, user, req_api_version]}
            ]}
        ]}
    ]},

    {ibrowse, [
        {default_max_sessions, 256},
        {default_max_pipeline_size, 1}
    ]},

    {pooler, [
        {pools, [
            [{name, sqerl},
             {max_count, {{cfg.sql.pool_max_size}}},
             {init_count, {{cfg.sql.pool_init_size}}},
             {queue_max, {{cfg.sql.pool_queue_max}}},
             {start_mfa, {sqerl_client, start_link, []}}
            ],
            [{name, chef_depsolver},
             {max_count, {{cfg.depsolver.pool_max_size}}},
             {init_count, {{cfg.depsolver.pool_init_size}}},
             {queue_max, {{cfg.depsolver.pool_queue_max}}},
             {start_mfa, {chef_depsolver_worker, start_link, []}}
            ]
        ]},
        {metrics_module, folsom_metrics}
    ]},
    {ssl, [
        {session_cb, noop_session_cache}
    ]},

    "{{pkg.svc_var_path}}/etc/sqerl.config"
].
