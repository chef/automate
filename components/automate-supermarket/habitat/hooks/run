
#!{{pkgPathFor "core/bash"}}/bin/bash -e
set -e

# Required to allow common name feild in certificate. Feature soon to deprecated by 1.17
export GODEBUG=x509ignoreCN=0
$(hab pkg path "chef/mlsa")/bin/accept {{cfg.mlsa.accept}}
mkdir -p {{pkg.svc_var_path}}/logs

export HOME={{pkg.svc_var_path}}
export RELX_CONFIG_PATH="{{pkg.svc_config_path}}/sys.config"
export RUNNER_LOG_DIR="{{pkg.svc_var_path}}/logs"
export DBNAME="{{cfg.sql.db_name}}"

supermarket_path=$(hab pkg path chef/supermarket)
HOME="{{ pkg.svc_data_path }}"
export HOME
. '{{ pkg.svc_config_path }}/app_env.sh'

mkdir -pv '{{ pkg.svc_var_path }}/log'
mkdir -pv '{{ pkg.svc_var_path }}/tmp'
mkdir -pv '{{ pkg.svc_var_path }}/public/system'
echo "Supermarket path "
echo $supermarket_path

{{ #if cfg.app.log_directory ~}}
log_symlink="$supermarket_path/app/log"
if [ -h "${log_symlink}" ]; then
  rm -f "${log_symlink}"
  ln -sv '{{ cfg.app.log_directory }}' "${log_symlink}"
fi
{{~ /if }}

{{ #if cfg.app.var_directory ~}}
var_symlink="$supermarket_path/app/public/system"
if [ -h "${var_symlink}" ]; then
  rm -f "${var_symlink}"
  ln -sv '{{ cfg.app.var_directory }}' "${var_symlink}"
fi
{{~ /if }}

env_file="$supermarket_path/app/.env.{{ cfg.rails_env }}"
if [ -f "${env_file}" ]; then
  rm -f "${env_file}"
fi
ln -sv "{{ pkg.svc_config_path }}/app_env.sh" "${env_file}"

# Check that the 'SECRET_KEY_BASE' environment variable is non-empty
if [ -z "${SECRET_KEY_BASE:-}" ]; then
  >&2 echo "Required environment variable SECRET_KEY_BASE is not set."
  >&2 echo "Set this package's config setting 'secret_key_base' to a"
  >&2 echo "non-empty value. You can run 'rails secret' in development"
  >&2 echo "to generate a random key string."
  >&2 echo ""
  >&2 echo "Aborting..."
  exit 5
fi


PGUSER='{{ cfg.db.user }}'
PGPASSWORD='{{ cfg.db.password }}'
PGPORT='{{ cfg.db.port }}'
export PGUSER PGPASSWORD PGPORT

mkdir -p "{{pkg.svc_var_path}}/etc"
render-template sqerl.config "{{pkg.svc_var_path}}/etc/sqerl.config"

echo " ### GOING TO set db ### "
pg-helper rename-if-exists supermarket "$DBNAME"
echo "## going to ensuer ###"
pg-helper ensure-service-database "$DBNAME"
echo "## Create extenssion ### "
pg-helper create-extension "$DBNAME" "uuid-ossp"
echo " ## PG USER ### "
pg-helper alter-user $PGUSER with PASSWORD $PGPASSWORD
pg-helper fix-permissions "$DBNAME"

echo "### Done with setting up DB ###"
secrets-helper generate supermarket.access_key_id 16 --if-not-exists
secrets-helper generate supermarket.secret_access_key 16 --if-not-exists

exec secrets-helper exec --secret supermarket.access_key_id --secret supermarket.secret_access_key -- supermarket foreground

pushd $supermarket_path/app &>/dev/null || exit 1
  if psql --command '' &>/dev/null; then
    echo 'Database Exists'
    cd $supermarket_path
    bundle exec rails db:migrate
  else
    cd "$supermarket_path/app"
    pwd
    echo 'Database does not exist'
    _bundle exec rails db:create
    _bundle exec rails db:schema:load
    _bundle exec rails db:migrate
    _bundle exec rails db:seed
  fi

  {{ #each cfg.db.extensions as |extension| ~}}
  psql --quiet --command 'CREATE EXTENSION IF NOT EXISTS {{ extension }}'
  {{ /each }}
popd &>/dev/null || exit 1

# Confirm an initial database connection
if ! $supermarket_path/libexec/is_db_connected; then
  >&2 echo ""
  >&2 echo "A database connection is required for this app to properly boot."
  >&2 echo "Is the database not running or are the database connection"
  >&2 echo "credentials incorrect?"
  >&2 echo ""
{{ ~#if bind.database }}
  >&2 echo "This app started with a database bind and will discovery the"
  >&2 echo "hostname and port number in the Habitat ring."
  >&2 echo ""
  >&2 echo "There are 3 remaining config settings which must be set correctly:"
{{ else }}
  >&2 echo "This app started without a database bind meaning that the"
  >&2 echo "database is assumed to be running outside of a Habitat ring."
  >&2 echo "Therefore, you must provide all the database connection values."
  >&2 echo ""
  >&2 echo "There are 5 config settings which must be set correctly:"
{{ ~/if }}
  >&2 echo ""
{{ ~#unless bind.database }}
  >&2 echo " * db.host      - The database hostname or IP address (Current: {{#if cfg.db.host}}{{cfg.db.host}}{{else}}<unset>{{/if}})"
  >&2 echo " * db.port      - The database listen port number (Current: {{#if cfg.db.port}}{{cfg.db.port}}{{else}}5432{{/if}})"
{{ ~/unless }}
  >&2 echo " * db.adapter   - The database adapter (Current: {{#if cfg.db.adapter}}{{cfg.db.adapter}}{{else}}postgresql{{/if}})"
  >&2 echo " * db.user      - The database username (Current: {{#if cfg.db.user}}{{cfg.db.user}}{{else}}<unset>{{/if}})"
  >&2 echo " * db.password  - The database password (Current: {{#if cfg.db.password}}<set>{{else}}<unset>{{/if}})"
  >&2 echo " * db.name      - The database name (Current: {{#if cfg.db.name}}{{cfg.db.name}}{{else}}<unset>{{/if}})"
  >&2 echo ""
  >&2 echo "Aborting..."
  exit 15
fi

exec 2>&1
supermarket_path=$(hab pkg path chef/supermarket)

HOME="{{ pkg.svc_data_path }}"
export HOME

if [ -f "{{ pkg.svc_config_path }}/app_env.sh" ]; then
  . "{{ pkg.svc_config_path }}/app_env.sh"
else
  >&2 echo "No app env file found: '{{ pkg.svc_config_path }}app_env.sh'"
  >&2 echo "Have you not started this service (chef/supermarket) before?"
  >&2 echo ""
  >&2 echo "Aborting..."
  exit 1
fi

chown -R "{{ cfg.app.user }}":"{{ cfg.app.group }}" {{ pkg.svc_path }}

cd $supermarket_path/app


_bundle() {
  scaffolding_app_prefix="$(hab pkg path chef/supermarket)/app"
  cd $scaffolding_app_prefix
  bundler_prefix="$(hab pkg path core/bundler)"
  echo " *** SETTING ENV *** "
  env \
    -u RUBYOPT \
    -u GEMRC \
    GEM_HOME="$bundler_prefix" \
    GEM_PATH="$bundler_prefix" \
    "$(hab pkg path core/ruby27)/bin/ruby" "$bundler_prefix/bin/bundle.real" ${*:-}
}


exec chpst \
    -U {{ cfg.app.user }}:{{ cfg.app.group }} \
    -u {{ cfg.app.user }}:{{ cfg.app.group }} \
    _bundle exec unicorn -E {{ cfg.rails_env }} -c {{ pkg.svc_config_path }}/unicorn.rb $supermarket_path/app/config.ru 2>&1

