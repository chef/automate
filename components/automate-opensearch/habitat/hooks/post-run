#!{{pkgPathFor "core/bash"}}/bin/bash

exec 2>&1

# Executing opensearch securityadmin
echo "Executing opensearch securityadmin"
hab pkg exec core/bash {{pkg.path}}/os/plugins/opensearch-security/tools/securityadmin.sh -cd {{pkg.svc_config_path}}/securityconfig -icl -key {{pkg.svc_config_path}}/admin-key.pem -cert {{pkg.svc_config_path}}/admin.pem -cacert {{pkg.svc_config_path}}/root-ca.pem -nhnv -h "localhost" -p {{cfg.transport.port}}
echo "Done !!!! Executing opensearch securityadmin"

source {{pkg.svc_config_path}}/health_check

{{#if svc.me.cfg.http-host ~}}
HOST="{{svc.me.sys.ip}}"

{{else}}
HOST="127.0.0.1"

{{/if ~}}

{{! Handlebars doesn't allow else-if style statements so we have to handle
    two exit early cases before rendering the post hook if either of those
    conditions are not met
~}}

{{#if cfg.disable ~}}
# OpenSearch has been disabled via config, exit early.
touch ${POST_RUN_SENTINEL}
exit 0

{{/if ~}}

{{#if cfg.deprecated.external_os ~}}
# We're using the deprecated external OpenSearch proxy node, exit early.
touch ${POST_RUN_SENTINEL}
exit 0

{{/if ~}}

# OpenSearch >= 6 doesn't allow configuring index settings in the opensearch.yml.
# We're using this hook to configure the default index settings after the service
# has initialized enough to service queries.

# The hab post-run hook is fired immediately after the run hook, therefore it's
# unlikely that opensearch is healthy the first time the post-run hook is
# invoked. We call the health-check wait_until_healthy function which waits until
# OpenSearch returns green or yellow, and only after the service is healthy
# do we attempt to configure it. If the service isn't healthy after our timeout
# we'll exit 1 after which hab will fire off the hook again. We intentionally
# fail and exit the hook frequently so that we don't end up with a hook
# that that can run forever due to an existing bug where hab doesn't reap hooks
# when services are unloaded:  https://github.com/habitat-sh/habitat/issues/7494

if [[ $(wait_until_healthy 5) -ne 0 ]]; then
  echo "Timed out waiting for OpenSearch to become healthy"
  exit 1 # always exit 0 in post-run or it'll retry the hook
fi

echo "Configuring index settings"

# Getting all indices 
indices=$(curl -k -XGET https://${HOST}:{{cfg.network.port}}/_cat/indices -u "admin:admin" | awk '{print $3}' | awk '!/^(\.)/' | awk '!/security/')
echo -e "list of indices\n$indices"

# Looping over each index individually and patching "number_of_replica" from config (toml)
for index in $indices;do
echo -e " snapshot status for $index\n"
curl -X PUT \
  "https://${HOST}:{{cfg.network.port}}/$index/_settings?pretty=" \
  -k -u admin:admin \
  -H 'content-type: application/json' \
  -d '{
      "index" : {
        "number_of_replicas" : "{{cfg.index.number_of_replicas}}",
        "refresh_interval": "{{cfg.index.refresh_interval}}"
      }
    }'
done

# Getting all templates
templates=$(curl -XGET https://${HOST}:{{cfg.network.port}}/_cat/templates -k -u 'admin:admin'| awk '{print $1}')
echo -e "list of templates\n$templates"

# Looping over each template individually and patching "number_of_replica" from config (toml)
for template in $templates;do
echo -e " snapshot status for $template\n"
index_patterns=$(curl -XGET https://${HOST}:{{cfg.network.port}}/_template/"$template"?pretty -u 'admin:admin' --insecure | jq  ".[\"${template}\"].index_patterns")
echo -e "Index Pattern: $index_patterns"
echo -e " snapshot status for $template\n"
curl --location --request PUT "https://${HOST}:{{cfg.network.port}}/_template/$template" --header 'content-type: application/json' -k -u admin:admin \
-d '{
    "settings" : {
      "index" : {
        "number_of_replicas" : "{{cfg.index.number_of_replicas}}",
        "refresh_interval" : "{{cfg.index.refresh_interval}}"
      }
    }
}'

done

# The health-check hook will return an error unless we touch sentinel file to
# signal to the health check that this hook has completed successfully.
touch ${POST_RUN_SENTINEL}
exit 0
