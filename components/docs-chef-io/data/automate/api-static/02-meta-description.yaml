info:
  description: |
    # Authentication
    The Chef Automate API typically uses an API token passed in the header of your API request.

    To create admin token can and set it as an environment variable use the following command:

    ```
    export TOKEN=`chef-automate iam token create <TOKEN-NAME> --admin`
    ```

    An admin token has unlimited access the entire Chef Automate API.

    Pass the token as part of the API call. For example:

    ```
    curl -s -H "api-token: $TOKEN" https://automate.example.com/apis/iam/v2/policies -v
    ```

    To create api tokens with limited permissions, use your admin token to create a standard token. You can then write a policy that exactly defines the API access for the standard token.

    In this example, the `curl` command creates the new token and the `export` command saves it as an environment variable with the name "TOKEN2".

    ```
    curl -s -H "api-token: $TOKEN" -d '{"name":"New Token", "id":"new-token"}' https://automate.example.com/apis/iam/v2/tokens
      {
        "token": {
          "id": "new-token",
          "name": "New Token",
          "value": "bww8EEpr39_eYMnQ2zybtrP9uzk=",
          "active": true,
          "created_at": "2020-02-26T19:36:07Z",
          "updated_at": "2020-02-26T19:36:07Z",
          "projects": []
        }
      }

    export TOKEN2=bww8EEpr39_eYMnQ2zybtrP9uzk=
    ```

    The Chef Automate documentation covers policies, authentication, and authorization in greater detail.
    * **[API Tokens](https://automate.chef.io/docs/api-tokens/)** explains authentication in Chef Automate.
    * **[Authorization Overview](https://automate.chef.io/docs/iam-v2-overview)** explains authorization in Chef Automate.

    # Status Codes

    | Status Code | Name                  | Description                          | Remark                                                                                                                                                                                                                                                      |
    |-------------|-----------------------|--------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | 200         | OK                    | Correct Id, Auth token and JSON body | The API worked as expected.                                                                                                                                                                                                                                  |
    | 400         | Bad Request           | Wrong JSON body                      | The JSON body contains a key or value missing, sometimes when there is no JSON request passed.  In some APIs like `IAM Project Rules`, the API request body validation is given the highest preference. And will return this error even before the Auth token validation. |
    | 401         | Unauthorized          | Wrong Auth token                     | Wrong or no auth token provided.                                                                                                                                                                                                                             |
    | 403         | Forbidden             | Unauthorized access to Resources     | Unauthorised Resource ID is passed to the API.  The error is returned in case of no Auth token is passed for some APIs like `Node Export` and `ReportExport`.                                                                                                  |
    | 404         | Not Found             | Wrong Id in URL                      | Wrong or no Id while creating, updating, retrieving, or deleting resources.                                                                                                                                                                                   |
    | 409         | Conflict              | Existing id                          | Existing resource id provided while creating resources.                                                                                                                                                                                                      |
    | 405         | Method Not Allowed    | Server does support the method       | Server knows the request, but unfortunately, the target resource does not have a method to serve the request.                                                                                                                                                                  |
    | 500         | Internal Server Error | Server encountered error             | Generic status code returned while processing an invalid request or server logics.                                                                                                                                                                           |
    | 503         | Service Unavailable   | Server is down or unable to serve    | Generic status code returned when the server gets too busy or into an unserviceable state.  This can be because of overwhelming requests like calling `Bulk Delete Nodes by Filter` without JSON body.                                                         |
