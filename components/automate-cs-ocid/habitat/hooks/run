#!{{pkgPathFor "core/bash"}}/bin/bash -e

exec 2>&1

{{pkgPathFor "chef/mlsa"}}/bin/accept {{cfg.mlsa.accept}}
cd {{pkgPathFor "chef/oc_id"}}/oc_id

export RAILS_ENV="{{cfg.rails_env}}"
export RACK_ENV="{{cfg.rack_env}}"

export DATABASE_URL="{{cfg.DATABASE_URL}}"

export OCID_CONFIG_FOLDER_PATH="{{pkgPathFor "chef/oc_id"}}/oc_id/config"

# Set webui key from erchef component
source "{{pkg.svc_config_path}}/scripts/set_webui_key.sh"

# Setup environment specific configurations for integration with erchef
source "{{pkg.svc_config_path}}/scripts/set_env_vars.sh"

# Registering oauth applications
export OAUTH_APPLICATIONS_JSON='{{toJson cfg.ocid.oauth_applications}}'
bundle exec bin/rake oauth_application:register

# Saving registered oauth application details in a file
export REGISTERED_OAUTH_APPS_FILE_PATH="{{pkg.svc_config_path}}/registered_oauth_applications.yaml"
bundle exec bin/rake oauth_application:save_registered_app_details_to_file

# NOTE: Please keep this statement just before running
# any environment specific command e.g. starting rails server.
# The running server will follow the configurations that are
# exported from this JSON file. So if this file is getting updated
# pls make sure export happens after the file is updated.
export CHEF_SECRETS_DATA=$(cat config/private-chef-secrets.json)

bundle exec bin/rake db:create
bundle exec bin/rake db:migrate
bundle exec bin/thin start -p 9090 --ssl --ssl-key-file {{pkg.svc_config_path}}/service.key --ssl-cert-file {{pkg.svc_config_path}}/service.crt

secrets-helper generate oc_id.superuser_id 32 --if-not-exists
