#!{{pkgPathFor "core/bash"}}/bin/bash -e

exec 2>&1

{{pkgPathFor "chef/mlsa"}}/bin/accept {{cfg.mlsa.accept}}
cd {{pkgPathFor "chef/oc_id"}}/oc_id

export RAILS_ENV="{{cfg.rails_env}}"
export RACK_ENV="{{cfg.rack_env}}"
export CHEF_SECRETS_DATA=$(cat config/private-chef-secrets.json)

export DATABASE_URL="{{cfg.DATABASE_URL}}"

# Registering oauth application
if [[ ! -z "{{cfg.ocid.oauth_application.name}}" ]]; then
  echo "----Registering oauth_application----"
  bundle exec bin/rake 'oauth_application:register[{{cfg.ocid.oauth_application.name}}, {{cfg.ocid.oauth_application.redirect_uri}}]'
  echo "----[DONE] Registering oauth_application----"
fi

# Dumping registered oauth application details in a file
echo "----Dumping the registered app details in a file----"
bundle exec bin/rake oauth_application:save_registered_app_details_to_file
echo "----[DONE] Dumping the registered app details in a file----"

# Setting webui key in ocid to communicate with erchef
WEBUI_SRC_PATH="/hab/svc/automate-cs-oc-erchef/data/webui_priv.pem"
WEBUI_KEY=`sed ':a;N;$!ba;s/\n/\\n/g' $WEBUI_SRC_PATH`
PRIVATE_CHEF_SECRETS_PATH="{{pkgPathFor "chef/oc_id"}}/oc_id/config/private-chef-secrets.json"
ruby /hab/svc/automate-cs-ocid/config/tasks/set_webui_key.rb "$WEBUI_KEY" "$PRIVATE_CHEF_SECRETS_PATH"

bundle exec bin/rake db:create
bundle exec bin/rake db:migrate
bundle exec bin/thin start -p 9090 --ssl --ssl-key-file {{pkg.svc_config_path}}/service.key --ssl-cert-file {{pkg.svc_config_path}}/service.crt

secrets-helper generate oc_id.superuser_id 32 --if-not-exists
