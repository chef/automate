#!{{pkgPathFor "core/bash"}}/bin/bash -e

exec 2>&1

{{pkgPathFor "chef/mlsa"}}/bin/accept {{cfg.mlsa.accept}}

# Copying this file into oc_id application directory so that this file
# can be executed as a rake task in the later stage of the application lifecycle.
cp "{{pkg.svc_config_path}}/tasks/oauth_application.rake" $(hab pkg path "chef/oc_id")/oc_id/lib/tasks

cd {{pkgPathFor "chef/oc_id"}}/oc_id

# Suspecting that the bundle path is not getting set correctly due to which .bundle is getting created in the root directory
# bundle config path "vendor/bundle"

export RAILS_ENV="{{cfg.rails_env}}"
export RACK_ENV="{{cfg.rack_env}}"

export HOME={{pkg.svc_var_path}}
export DBNAME="{{cfg.sql.db_name}}"

mkdir -p "{{pkg.svc_var_path}}/etc"
render-template pg.env "{{pkg.svc_var_path}}/etc/pg.env"
if [ ! -f /hab/.skip_migration ]; then
  pg-helper rename-if-exists oc_id "$DBNAME"
  pg-helper ensure-service-database "$DBNAME"
  pg-helper create-extension "$DBNAME" "uuid-ossp"
  pg-helper fix-permissions "$DBNAME"
fi

source "{{pkg.svc_var_path}}/etc/pg.env"

export OCID_PKG_CONFIG_FOLDER_PATH="{{pkgPathFor "chef/oc_id"}}/oc_id/config"

# Setting the secret_key_base for OCID rails application
source "{{pkg.svc_config_path}}/scripts/set_secret_key_base.sh"

# Set webui key from erchef component
source "{{pkg.svc_config_path}}/scripts/set_webui_key.sh"

# Setup environment specific configurations for integration with erchef
source "{{pkg.svc_config_path}}/scripts/set_env_vars.sh"

# NOTE: Please keep this statement just before running
# any environment specific command e.g. starting rails server, running rake tasks etc.
# The running server will follow the configurations that are
# exported from this JSON file. So if this file is getting updated
# pls make sure export happens after the file is updated.
export CHEF_SECRETS_DATA=$(cat config/private-chef-secrets.json)

bundle exec bin/rake db:migrate

# Registering oauth applications
export OAUTH_APPS_CONFIG_JSON='{{toJson cfg.ocid.oauth_application_config}}'
bundle exec bin/rake oauth_application:register
# Saving registered oauth application details in a file
export REGISTERED_OAUTH_APPS_FILE_PATH="{{pkg.svc_config_path}}/registered_oauth_applications.yaml"
bundle exec bin/rake oauth_application:save_registered_app_details_to_file

bundle exec bin/unicorn -p "{{cfg.network.port}}"

secrets-helper generate oc_id.superuser_id 32 --if-not-exists
