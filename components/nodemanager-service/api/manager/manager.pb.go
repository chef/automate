// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/nodemanager-service/api/manager/manager.proto

package manager

import (
	context "context"
	fmt "fmt"
	common "github.com/chef/automate/components/compliance-service/api/common"
	nodes "github.com/chef/automate/components/nodemanager-service/api/nodes"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NodeState_State int32

const (
	NodeState_RUNNING    NodeState_State = 0
	NodeState_STOPPED    NodeState_State = 1
	NodeState_TERMINATED NodeState_State = 2
)

var NodeState_State_name = map[int32]string{
	0: "RUNNING",
	1: "STOPPED",
	2: "TERMINATED",
}

var NodeState_State_value = map[string]int32{
	"RUNNING":    0,
	"STOPPED":    1,
	"TERMINATED": 2,
}

func (x NodeState_State) String() string {
	return proto.EnumName(NodeState_State_name, int32(x))
}

func (NodeState_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{4, 0}
}

type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

var Query_OrderType_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var Query_OrderType_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x Query_OrderType) String() string {
	return proto.EnumName(Query_OrderType_name, int32(x))
}

func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{5, 0}
}

type Id struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{0}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Ids struct {
	Ids                  []*Id    `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ids) Reset()         { *m = Ids{} }
func (m *Ids) String() string { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()    {}
func (*Ids) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{1}
}

func (m *Ids) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ids.Unmarshal(m, b)
}
func (m *Ids) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ids.Marshal(b, m, deterministic)
}
func (m *Ids) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ids.Merge(m, src)
}
func (m *Ids) XXX_Size() int {
	return xxx_messageInfo_Ids.Size(m)
}
func (m *Ids) XXX_DiscardUnknown() {
	xxx_messageInfo_Ids.DiscardUnknown(m)
}

var xxx_messageInfo_Ids proto.InternalMessageInfo

func (m *Ids) GetIds() []*Id {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ChangeNodeStateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeNodeStateResponse) Reset()         { *m = ChangeNodeStateResponse{} }
func (m *ChangeNodeStateResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeNodeStateResponse) ProtoMessage()    {}
func (*ChangeNodeStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{2}
}

func (m *ChangeNodeStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeNodeStateResponse.Unmarshal(m, b)
}
func (m *ChangeNodeStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeNodeStateResponse.Marshal(b, m, deterministic)
}
func (m *ChangeNodeStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeNodeStateResponse.Merge(m, src)
}
func (m *ChangeNodeStateResponse) XXX_Size() int {
	return xxx_messageInfo_ChangeNodeStateResponse.Size(m)
}
func (m *ChangeNodeStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeNodeStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeNodeStateResponse proto.InternalMessageInfo

type ProcessNodeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessNodeResponse) Reset()         { *m = ProcessNodeResponse{} }
func (m *ProcessNodeResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessNodeResponse) ProtoMessage()    {}
func (*ProcessNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{3}
}

func (m *ProcessNodeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessNodeResponse.Unmarshal(m, b)
}
func (m *ProcessNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessNodeResponse.Marshal(b, m, deterministic)
}
func (m *ProcessNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessNodeResponse.Merge(m, src)
}
func (m *ProcessNodeResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessNodeResponse.Size(m)
}
func (m *ProcessNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessNodeResponse proto.InternalMessageInfo

type NodeState struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State                NodeState_State `protobuf:"varint,2,opt,name=state,proto3,enum=chef.automate.domain.nodemanager.api.manager.NodeState_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NodeState) Reset()         { *m = NodeState{} }
func (m *NodeState) String() string { return proto.CompactTextString(m) }
func (*NodeState) ProtoMessage()    {}
func (*NodeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{4}
}

func (m *NodeState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeState.Unmarshal(m, b)
}
func (m *NodeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeState.Marshal(b, m, deterministic)
}
func (m *NodeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeState.Merge(m, src)
}
func (m *NodeState) XXX_Size() int {
	return xxx_messageInfo_NodeState.Size(m)
}
func (m *NodeState) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeState.DiscardUnknown(m)
}

var xxx_messageInfo_NodeState proto.InternalMessageInfo

func (m *NodeState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeState) GetState() NodeState_State {
	if m != nil {
		return m.State
	}
	return NodeState_RUNNING
}

type Query struct {
	FilterMap            []*common.Filter `protobuf:"bytes,25,rep,name=filter_map,json=filterMap,proto3" json:"filter_map,omitempty"`
	Order                Query_OrderType  `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.domain.nodemanager.api.manager.Query_OrderType" json:"order,omitempty"`
	Sort                 string           `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty"`
	Page                 int32            `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`
	PerPage              int32            `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{5}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetFilterMap() []*common.Filter {
	if m != nil {
		return m.FilterMap
	}
	return nil
}

func (m *Query) GetOrder() Query_OrderType {
	if m != nil {
		return m.Order
	}
	return Query_ASC
}

func (m *Query) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *Query) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Query) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type NodeMetadata struct {
	Uuid                 string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PlatformName         string                 `protobuf:"bytes,3,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`
	PlatformRelease      string                 `protobuf:"bytes,4,opt,name=platform_release,json=platformRelease,proto3" json:"platform_release,omitempty"`
	JobUuid              string                 `protobuf:"bytes,5,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	LastContact          *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=last_contact,json=lastContact,proto3" json:"last_contact,omitempty"`
	SourceId             string                 `protobuf:"bytes,7,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	SourceRegion         string                 `protobuf:"bytes,8,opt,name=source_region,json=sourceRegion,proto3" json:"source_region,omitempty"`
	SourceAccountId      string                 `protobuf:"bytes,9,opt,name=source_account_id,json=sourceAccountId,proto3" json:"source_account_id,omitempty"`
	Tags                 []*common.Kv           `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	RunData              *nodes.LastContactData `protobuf:"bytes,11,opt,name=run_data,json=runData,proto3" json:"run_data,omitempty"`
	ScanData             *nodes.LastContactData `protobuf:"bytes,12,opt,name=scan_data,json=scanData,proto3" json:"scan_data,omitempty"`
	ProjectsData         []*nodes.ProjectsData  `protobuf:"bytes,13,rep,name=projects_data,json=projectsData,proto3" json:"projects_data,omitempty"`
	Projects             []string               `protobuf:"bytes,14,rep,name=projects,proto3" json:"projects,omitempty"`
	ManagerId            string                 `protobuf:"bytes,15,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *NodeMetadata) Reset()         { *m = NodeMetadata{} }
func (m *NodeMetadata) String() string { return proto.CompactTextString(m) }
func (*NodeMetadata) ProtoMessage()    {}
func (*NodeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{6}
}

func (m *NodeMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMetadata.Unmarshal(m, b)
}
func (m *NodeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMetadata.Marshal(b, m, deterministic)
}
func (m *NodeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMetadata.Merge(m, src)
}
func (m *NodeMetadata) XXX_Size() int {
	return xxx_messageInfo_NodeMetadata.Size(m)
}
func (m *NodeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMetadata proto.InternalMessageInfo

func (m *NodeMetadata) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *NodeMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeMetadata) GetPlatformName() string {
	if m != nil {
		return m.PlatformName
	}
	return ""
}

func (m *NodeMetadata) GetPlatformRelease() string {
	if m != nil {
		return m.PlatformRelease
	}
	return ""
}

func (m *NodeMetadata) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *NodeMetadata) GetLastContact() *timestamp.Timestamp {
	if m != nil {
		return m.LastContact
	}
	return nil
}

func (m *NodeMetadata) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *NodeMetadata) GetSourceRegion() string {
	if m != nil {
		return m.SourceRegion
	}
	return ""
}

func (m *NodeMetadata) GetSourceAccountId() string {
	if m != nil {
		return m.SourceAccountId
	}
	return ""
}

func (m *NodeMetadata) GetTags() []*common.Kv {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *NodeMetadata) GetRunData() *nodes.LastContactData {
	if m != nil {
		return m.RunData
	}
	return nil
}

func (m *NodeMetadata) GetScanData() *nodes.LastContactData {
	if m != nil {
		return m.ScanData
	}
	return nil
}

func (m *NodeMetadata) GetProjectsData() []*nodes.ProjectsData {
	if m != nil {
		return m.ProjectsData
	}
	return nil
}

func (m *NodeMetadata) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *NodeMetadata) GetManagerId() string {
	if m != nil {
		return m.ManagerId
	}
	return ""
}

type Fields struct {
	Fields               []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fields) Reset()         { *m = Fields{} }
func (m *Fields) String() string { return proto.CompactTextString(m) }
func (*Fields) ProtoMessage()    {}
func (*Fields) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{7}
}

func (m *Fields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fields.Unmarshal(m, b)
}
func (m *Fields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fields.Marshal(b, m, deterministic)
}
func (m *Fields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fields.Merge(m, src)
}
func (m *Fields) XXX_Size() int {
	return xxx_messageInfo_Fields.Size(m)
}
func (m *Fields) XXX_DiscardUnknown() {
	xxx_messageInfo_Fields.DiscardUnknown(m)
}

var xxx_messageInfo_Fields proto.InternalMessageInfo

func (m *Fields) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type FieldQuery struct {
	Query                *Query   `protobuf:"bytes,20,opt,name=query,proto3" json:"query,omitempty"`
	Field                string   `protobuf:"bytes,21,opt,name=field,proto3" json:"field,omitempty"`
	NodeManagerId        string   `protobuf:"bytes,22,opt,name=node_manager_id,json=nodeManagerId,proto3" json:"node_manager_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldQuery) Reset()         { *m = FieldQuery{} }
func (m *FieldQuery) String() string { return proto.CompactTextString(m) }
func (*FieldQuery) ProtoMessage()    {}
func (*FieldQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{8}
}

func (m *FieldQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldQuery.Unmarshal(m, b)
}
func (m *FieldQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldQuery.Marshal(b, m, deterministic)
}
func (m *FieldQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldQuery.Merge(m, src)
}
func (m *FieldQuery) XXX_Size() int {
	return xxx_messageInfo_FieldQuery.Size(m)
}
func (m *FieldQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FieldQuery proto.InternalMessageInfo

func (m *FieldQuery) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *FieldQuery) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *FieldQuery) GetNodeManagerId() string {
	if m != nil {
		return m.NodeManagerId
	}
	return ""
}

type Nodes struct {
	Nodes                []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Total                int32    `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{9}
}

func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nodes.Unmarshal(m, b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return xxx_messageInfo_Nodes.Size(m)
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Nodes) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type NodeQuery struct {
	Query                *Query   `protobuf:"bytes,20,opt,name=query,proto3" json:"query,omitempty"`
	NodeManagerId        string   `protobuf:"bytes,21,opt,name=node_manager_id,json=nodeManagerId,proto3" json:"node_manager_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeQuery) Reset()         { *m = NodeQuery{} }
func (m *NodeQuery) String() string { return proto.CompactTextString(m) }
func (*NodeQuery) ProtoMessage()    {}
func (*NodeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{10}
}

func (m *NodeQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeQuery.Unmarshal(m, b)
}
func (m *NodeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeQuery.Marshal(b, m, deterministic)
}
func (m *NodeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeQuery.Merge(m, src)
}
func (m *NodeQuery) XXX_Size() int {
	return xxx_messageInfo_NodeQuery.Size(m)
}
func (m *NodeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_NodeQuery proto.InternalMessageInfo

func (m *NodeQuery) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *NodeQuery) GetNodeManagerId() string {
	if m != nil {
		return m.NodeManagerId
	}
	return ""
}

type Credentials struct {
	Credentials          string   `protobuf:"bytes,20,opt,name=credentials,proto3" json:"credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Credentials) Reset()         { *m = Credentials{} }
func (m *Credentials) String() string { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()    {}
func (*Credentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{11}
}

func (m *Credentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Credentials.Unmarshal(m, b)
}
func (m *Credentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Credentials.Marshal(b, m, deterministic)
}
func (m *Credentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credentials.Merge(m, src)
}
func (m *Credentials) XXX_Size() int {
	return xxx_messageInfo_Credentials.Size(m)
}
func (m *Credentials) XXX_DiscardUnknown() {
	xxx_messageInfo_Credentials.DiscardUnknown(m)
}

var xxx_messageInfo_Credentials proto.InternalMessageInfo

func (m *Credentials) GetCredentials() string {
	if m != nil {
		return m.Credentials
	}
	return ""
}

type NodeManager struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	CredentialId         string               `protobuf:"bytes,20,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	InstanceCredentials  []*CredentialsByTags `protobuf:"bytes,21,rep,name=instance_credentials,json=instanceCredentials,proto3" json:"instance_credentials,omitempty"`
	Status               string               `protobuf:"bytes,22,opt,name=status,proto3" json:"status,omitempty"`
	AccountId            string               `protobuf:"bytes,24,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	DateAdded            *timestamp.Timestamp `protobuf:"bytes,25,opt,name=date_added,json=dateAdded,proto3" json:"date_added,omitempty"`
	CredentialData       []*common.Kv         `protobuf:"bytes,26,rep,name=credential_data,json=credentialData,proto3" json:"credential_data,omitempty"`
	AccountAlias         string               `protobuf:"bytes,27,opt,name=account_alias,json=accountAlias,proto3" json:"account_alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NodeManager) Reset()         { *m = NodeManager{} }
func (m *NodeManager) String() string { return proto.CompactTextString(m) }
func (*NodeManager) ProtoMessage()    {}
func (*NodeManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{12}
}

func (m *NodeManager) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeManager.Unmarshal(m, b)
}
func (m *NodeManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeManager.Marshal(b, m, deterministic)
}
func (m *NodeManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeManager.Merge(m, src)
}
func (m *NodeManager) XXX_Size() int {
	return xxx_messageInfo_NodeManager.Size(m)
}
func (m *NodeManager) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeManager.DiscardUnknown(m)
}

var xxx_messageInfo_NodeManager proto.InternalMessageInfo

func (m *NodeManager) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeManager) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeManager) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NodeManager) GetCredentialId() string {
	if m != nil {
		return m.CredentialId
	}
	return ""
}

func (m *NodeManager) GetInstanceCredentials() []*CredentialsByTags {
	if m != nil {
		return m.InstanceCredentials
	}
	return nil
}

func (m *NodeManager) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NodeManager) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *NodeManager) GetDateAdded() *timestamp.Timestamp {
	if m != nil {
		return m.DateAdded
	}
	return nil
}

func (m *NodeManager) GetCredentialData() []*common.Kv {
	if m != nil {
		return m.CredentialData
	}
	return nil
}

func (m *NodeManager) GetAccountAlias() string {
	if m != nil {
		return m.AccountAlias
	}
	return ""
}

type CredentialsByTags struct {
	TagKey               string   `protobuf:"bytes,20,opt,name=tag_key,json=tagKey,proto3" json:"tag_key,omitempty"`
	TagValue             string   `protobuf:"bytes,21,opt,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
	CredentialIds        []string `protobuf:"bytes,22,rep,name=credential_ids,json=credentialIds,proto3" json:"credential_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CredentialsByTags) Reset()         { *m = CredentialsByTags{} }
func (m *CredentialsByTags) String() string { return proto.CompactTextString(m) }
func (*CredentialsByTags) ProtoMessage()    {}
func (*CredentialsByTags) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{13}
}

func (m *CredentialsByTags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CredentialsByTags.Unmarshal(m, b)
}
func (m *CredentialsByTags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CredentialsByTags.Marshal(b, m, deterministic)
}
func (m *CredentialsByTags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialsByTags.Merge(m, src)
}
func (m *CredentialsByTags) XXX_Size() int {
	return xxx_messageInfo_CredentialsByTags.Size(m)
}
func (m *CredentialsByTags) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialsByTags.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialsByTags proto.InternalMessageInfo

func (m *CredentialsByTags) GetTagKey() string {
	if m != nil {
		return m.TagKey
	}
	return ""
}

func (m *CredentialsByTags) GetTagValue() string {
	if m != nil {
		return m.TagValue
	}
	return ""
}

func (m *CredentialsByTags) GetCredentialIds() []string {
	if m != nil {
		return m.CredentialIds
	}
	return nil
}

type NodeManagers struct {
	Managers             []*NodeManager `protobuf:"bytes,1,rep,name=managers,proto3" json:"managers,omitempty"`
	Total                int32          `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NodeManagers) Reset()         { *m = NodeManagers{} }
func (m *NodeManagers) String() string { return proto.CompactTextString(m) }
func (*NodeManagers) ProtoMessage()    {}
func (*NodeManagers) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{14}
}

func (m *NodeManagers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeManagers.Unmarshal(m, b)
}
func (m *NodeManagers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeManagers.Marshal(b, m, deterministic)
}
func (m *NodeManagers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeManagers.Merge(m, src)
}
func (m *NodeManagers) XXX_Size() int {
	return xxx_messageInfo_NodeManagers.Size(m)
}
func (m *NodeManagers) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeManagers.DiscardUnknown(m)
}

var xxx_messageInfo_NodeManagers proto.InternalMessageInfo

func (m *NodeManagers) GetManagers() []*NodeManager {
	if m != nil {
		return m.Managers
	}
	return nil
}

func (m *NodeManagers) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ManagerNodes struct {
	Nodes                []*ManagerNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ManagerNodes) Reset()         { *m = ManagerNodes{} }
func (m *ManagerNodes) String() string { return proto.CompactTextString(m) }
func (*ManagerNodes) ProtoMessage()    {}
func (*ManagerNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{15}
}

func (m *ManagerNodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagerNodes.Unmarshal(m, b)
}
func (m *ManagerNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagerNodes.Marshal(b, m, deterministic)
}
func (m *ManagerNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerNodes.Merge(m, src)
}
func (m *ManagerNodes) XXX_Size() int {
	return xxx_messageInfo_ManagerNodes.Size(m)
}
func (m *ManagerNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerNodes.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerNodes proto.InternalMessageInfo

func (m *ManagerNodes) GetNodes() []*ManagerNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type ManagerNode struct {
	Id       string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Host     string       `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	PublicIp string       `protobuf:"bytes,3,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	Tags     []*common.Kv `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Platform string       `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	// should all these be tags??
	Region               string   `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Ssm                  string   `protobuf:"bytes,8,opt,name=ssm,proto3" json:"ssm,omitempty"`
	Uuid                 string   `protobuf:"bytes,9,opt,name=uuid,proto3" json:"uuid,omitempty"`
	MachineIdentifier    string   `protobuf:"bytes,10,opt,name=machine_identifier,json=machineIdentifier,proto3" json:"machine_identifier,omitempty"`
	Group                string   `protobuf:"bytes,11,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagerNode) Reset()         { *m = ManagerNode{} }
func (m *ManagerNode) String() string { return proto.CompactTextString(m) }
func (*ManagerNode) ProtoMessage()    {}
func (*ManagerNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_b77d80fda56e35f2, []int{16}
}

func (m *ManagerNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagerNode.Unmarshal(m, b)
}
func (m *ManagerNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagerNode.Marshal(b, m, deterministic)
}
func (m *ManagerNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerNode.Merge(m, src)
}
func (m *ManagerNode) XXX_Size() int {
	return xxx_messageInfo_ManagerNode.Size(m)
}
func (m *ManagerNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerNode.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerNode proto.InternalMessageInfo

func (m *ManagerNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ManagerNode) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ManagerNode) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *ManagerNode) GetTags() []*common.Kv {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ManagerNode) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ManagerNode) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ManagerNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ManagerNode) GetSsm() string {
	if m != nil {
		return m.Ssm
	}
	return ""
}

func (m *ManagerNode) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ManagerNode) GetMachineIdentifier() string {
	if m != nil {
		return m.MachineIdentifier
	}
	return ""
}

func (m *ManagerNode) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func init() {
	proto.RegisterEnum("chef.automate.domain.nodemanager.api.manager.NodeState_State", NodeState_State_name, NodeState_State_value)
	proto.RegisterEnum("chef.automate.domain.nodemanager.api.manager.Query_OrderType", Query_OrderType_name, Query_OrderType_value)
	proto.RegisterType((*Id)(nil), "chef.automate.domain.nodemanager.api.manager.Id")
	proto.RegisterType((*Ids)(nil), "chef.automate.domain.nodemanager.api.manager.Ids")
	proto.RegisterType((*ChangeNodeStateResponse)(nil), "chef.automate.domain.nodemanager.api.manager.ChangeNodeStateResponse")
	proto.RegisterType((*ProcessNodeResponse)(nil), "chef.automate.domain.nodemanager.api.manager.ProcessNodeResponse")
	proto.RegisterType((*NodeState)(nil), "chef.automate.domain.nodemanager.api.manager.NodeState")
	proto.RegisterType((*Query)(nil), "chef.automate.domain.nodemanager.api.manager.Query")
	proto.RegisterType((*NodeMetadata)(nil), "chef.automate.domain.nodemanager.api.manager.NodeMetadata")
	proto.RegisterType((*Fields)(nil), "chef.automate.domain.nodemanager.api.manager.Fields")
	proto.RegisterType((*FieldQuery)(nil), "chef.automate.domain.nodemanager.api.manager.FieldQuery")
	proto.RegisterType((*Nodes)(nil), "chef.automate.domain.nodemanager.api.manager.Nodes")
	proto.RegisterType((*NodeQuery)(nil), "chef.automate.domain.nodemanager.api.manager.NodeQuery")
	proto.RegisterType((*Credentials)(nil), "chef.automate.domain.nodemanager.api.manager.Credentials")
	proto.RegisterType((*NodeManager)(nil), "chef.automate.domain.nodemanager.api.manager.NodeManager")
	proto.RegisterType((*CredentialsByTags)(nil), "chef.automate.domain.nodemanager.api.manager.CredentialsByTags")
	proto.RegisterType((*NodeManagers)(nil), "chef.automate.domain.nodemanager.api.manager.NodeManagers")
	proto.RegisterType((*ManagerNodes)(nil), "chef.automate.domain.nodemanager.api.manager.ManagerNodes")
	proto.RegisterType((*ManagerNode)(nil), "chef.automate.domain.nodemanager.api.manager.ManagerNode")
}

func init() {
	proto.RegisterFile("components/nodemanager-service/api/manager/manager.proto", fileDescriptor_b77d80fda56e35f2)
}

var fileDescriptor_b77d80fda56e35f2 = []byte{
	// 1548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5f, 0x6f, 0x1b, 0xc7,
	0x11, 0x27, 0xc5, 0xff, 0x43, 0x89, 0xa2, 0xd7, 0x92, 0x7c, 0xa2, 0xeb, 0x96, 0x38, 0xa3, 0x85,
	0x5a, 0xd4, 0xa4, 0x2d, 0xb9, 0xa8, 0xed, 0xc2, 0x28, 0x24, 0x4a, 0x36, 0x08, 0x5b, 0xb2, 0x7c,
	0xa4, 0xec, 0xa2, 0x88, 0x43, 0xac, 0xee, 0x56, 0xd4, 0xd9, 0xe4, 0xed, 0xe5, 0x76, 0x69, 0x98,
	0x09, 0x92, 0xa7, 0xbc, 0x05, 0xc8, 0x43, 0x82, 0x7c, 0x82, 0x7c, 0x96, 0xbc, 0xe6, 0x23, 0xe4,
	0x8b, 0xe4, 0x25, 0x98, 0xdd, 0x25, 0x79, 0xb2, 0x65, 0xc4, 0x47, 0x2b, 0x4f, 0xdc, 0x99, 0x9d,
	0xfd, 0xed, 0xfc, 0xdf, 0xe1, 0xc1, 0x1d, 0x97, 0x0f, 0x43, 0x1e, 0xb0, 0x40, 0x8a, 0x66, 0xc0,
	0x3d, 0x36, 0xa4, 0x01, 0xed, 0xb3, 0xe8, 0x86, 0x60, 0xd1, 0x6b, 0xdf, 0x65, 0x4d, 0x1a, 0xfa,
	0x4d, 0xc3, 0x9b, 0xfc, 0x36, 0xc2, 0x88, 0x4b, 0x4e, 0xfe, 0xe9, 0x9e, 0xb2, 0x93, 0x06, 0x1d,
	0x49, 0x3e, 0xa4, 0x92, 0x35, 0x3c, 0x3e, 0xa4, 0x7e, 0xd0, 0x88, 0x61, 0x34, 0x68, 0xe8, 0x37,
	0xcc, 0xba, 0xf6, 0xa7, 0x3e, 0xe7, 0xfd, 0x81, 0xc6, 0xa3, 0x41, 0xc0, 0x25, 0x95, 0x3e, 0x0f,
	0x84, 0xc6, 0xaa, 0x5d, 0x35, 0xbb, 0x8a, 0x3a, 0x1e, 0x9d, 0x34, 0xd9, 0x30, 0x94, 0x63, 0xb3,
	0xf9, 0x97, 0xb7, 0x37, 0xa5, 0x3f, 0x64, 0x42, 0xd2, 0x61, 0x68, 0x04, 0xfe, 0x15, 0xb3, 0x01,
	0x97, 0x03, 0x9f, 0x06, 0x2e, 0x3b, 0x63, 0x82, 0xcb, 0x87, 0x43, 0x1e, 0x98, 0x1f, 0x73, 0xec,
	0xf6, 0x07, 0x98, 0x8e, 0x7c, 0xbd, 0x6b, 0x54, 0xb5, 0x57, 0x60, 0xa1, 0xed, 0x91, 0x0a, 0x2c,
	0xf8, 0x9e, 0x95, 0xae, 0xa7, 0x37, 0x4a, 0xce, 0x82, 0xef, 0xd9, 0x6d, 0xc8, 0xb4, 0x3d, 0x41,
	0x76, 0x20, 0xe3, 0x7b, 0xc2, 0x4a, 0xd7, 0x33, 0x1b, 0xe5, 0xcd, 0x9b, 0x8d, 0x24, 0x1e, 0x6a,
	0xb4, 0x3d, 0x07, 0x0f, 0xdb, 0xeb, 0x70, 0xa5, 0x75, 0x4a, 0x83, 0x3e, 0x3b, 0xe0, 0x1e, 0xeb,
	0x48, 0x2a, 0x99, 0xc3, 0x44, 0xc8, 0x03, 0xc1, 0xec, 0x55, 0xb8, 0x7c, 0x18, 0x71, 0x97, 0x09,
	0x81, 0x7b, 0x53, 0xf6, 0x8f, 0x69, 0x28, 0x4d, 0x85, 0xdf, 0x56, 0x8d, 0x74, 0x20, 0x27, 0x70,
	0xc3, 0x5a, 0xa8, 0xa7, 0x37, 0x2a, 0x9b, 0xf7, 0x93, 0x69, 0x35, 0xc5, 0x6d, 0x68, 0x55, 0x34,
	0x96, 0x7d, 0x0b, 0x72, 0xfa, 0xb6, 0x32, 0x14, 0x9c, 0xa3, 0x83, 0x83, 0xf6, 0xc1, 0xc3, 0x6a,
	0x0a, 0x89, 0x4e, 0xf7, 0xc9, 0xe1, 0xe1, 0xde, 0x6e, 0x35, 0x4d, 0x2a, 0x00, 0xdd, 0x3d, 0x67,
	0xbf, 0x7d, 0xb0, 0xdd, 0xdd, 0xdb, 0xad, 0x2e, 0xd8, 0xdf, 0x2d, 0x40, 0xee, 0xe9, 0x88, 0x45,
	0x63, 0xf2, 0x14, 0xe0, 0xc4, 0x1f, 0x48, 0x16, 0xf5, 0x86, 0x34, 0xb4, 0xd6, 0x95, 0xb3, 0x36,
	0xcf, 0x57, 0x6b, 0x16, 0x4e, 0xa5, 0x95, 0x89, 0xdf, 0x03, 0x75, 0xda, 0x29, 0x69, 0x94, 0x7d,
	0x1a, 0xa2, 0x91, 0x3c, 0xf2, 0x58, 0x64, 0xad, 0xce, 0x63, 0xa4, 0x52, 0xab, 0xf1, 0x04, 0x01,
	0xba, 0xe3, 0x90, 0x39, 0x1a, 0x8b, 0x10, 0xc8, 0x0a, 0x1e, 0x49, 0x6b, 0x4d, 0xf9, 0x52, 0xad,
	0x91, 0x17, 0xd2, 0x3e, 0xb3, 0xae, 0xd4, 0xd3, 0x1b, 0x39, 0x47, 0xad, 0xc9, 0x3a, 0x14, 0x43,
	0x16, 0xf5, 0x14, 0xdf, 0x52, 0xfc, 0x42, 0xc8, 0xa2, 0x43, 0xda, 0x67, 0xf6, 0x9f, 0xa1, 0x34,
	0x85, 0x25, 0x05, 0xc8, 0x6c, 0x77, 0x5a, 0xd5, 0x14, 0x29, 0x42, 0x76, 0x77, 0xaf, 0xd3, 0xaa,
	0xa6, 0xed, 0x5f, 0x72, 0xb0, 0x88, 0x2e, 0xde, 0x67, 0x92, 0x7a, 0x54, 0x52, 0xc4, 0x1f, 0x8d,
	0xa6, 0xf1, 0x53, 0x6b, 0xe4, 0x05, 0x74, 0xa8, 0x03, 0x58, 0x72, 0xd4, 0x9a, 0x5c, 0x87, 0xa5,
	0x70, 0x40, 0xe5, 0x09, 0x8f, 0x86, 0x3d, 0xb5, 0x99, 0x51, 0x9b, 0x8b, 0x13, 0xe6, 0x01, 0x0a,
	0xfd, 0x1d, 0xaa, 0x53, 0xa1, 0x88, 0x0d, 0x18, 0x15, 0xcc, 0xca, 0x2a, 0xb9, 0xe5, 0x09, 0xdf,
	0xd1, 0x6c, 0xb4, 0xe1, 0x25, 0x3f, 0xee, 0xa9, 0xbb, 0x73, 0x4a, 0xa4, 0xf0, 0x92, 0x1f, 0x1f,
	0xe1, 0xf5, 0xf7, 0x61, 0x71, 0x40, 0x85, 0xec, 0xb9, 0x3c, 0x90, 0xd4, 0x95, 0x56, 0xbe, 0x9e,
	0xde, 0x28, 0x6f, 0xd6, 0x1a, 0xba, 0x2c, 0x1b, 0x93, 0xb2, 0x6c, 0x74, 0x27, 0x65, 0xe9, 0x94,
	0x51, 0xbe, 0xa5, 0xc5, 0xc9, 0x55, 0x28, 0x09, 0x3e, 0x8a, 0x5c, 0xd6, 0xf3, 0x3d, 0xab, 0xa0,
	0xa0, 0x8b, 0x9a, 0xd1, 0xf6, 0xd0, 0x0c, 0xb3, 0x19, 0xb1, 0xbe, 0xcf, 0x03, 0xab, 0xa8, 0xcd,
	0xd0, 0x4c, 0x47, 0xf1, 0xc8, 0x3f, 0xe0, 0x92, 0x11, 0xa2, 0xae, 0xcb, 0x47, 0x81, 0x44, 0xa4,
	0x92, 0xb6, 0x43, 0x6f, 0x6c, 0x6b, 0x7e, 0xdb, 0x23, 0x3b, 0x90, 0x95, 0xb4, 0x2f, 0x2c, 0x50,
	0x59, 0xd5, 0x48, 0x92, 0x55, 0x8f, 0x5e, 0x3b, 0xea, 0x2c, 0x79, 0x06, 0xc5, 0x68, 0x14, 0xf4,
	0x30, 0x1e, 0x56, 0x59, 0x19, 0xfb, 0x9f, 0x0f, 0xcb, 0x27, 0xdd, 0x27, 0x1e, 0xcf, 0x8c, 0xdf,
	0xa5, 0x92, 0x3a, 0x85, 0x68, 0x14, 0xe0, 0x82, 0xfc, 0x0f, 0x4a, 0xc2, 0xa5, 0x06, 0x78, 0xf1,
	0xe3, 0x81, 0x8b, 0x88, 0xa6, 0x90, 0x5f, 0xc0, 0x52, 0x18, 0xf1, 0x97, 0xcc, 0x95, 0x42, 0xa3,
	0x2f, 0x29, 0xf3, 0xef, 0x24, 0x41, 0x3f, 0x34, 0x00, 0x0a, 0x7a, 0x31, 0x8c, 0x51, 0xa4, 0x06,
	0xc5, 0x09, 0x6d, 0x55, 0xea, 0x19, 0x8c, 0xe0, 0x84, 0x26, 0xd7, 0x00, 0x0c, 0x16, 0x46, 0x65,
	0x59, 0x45, 0xa5, 0x64, 0x38, 0x6d, 0xcf, 0xae, 0x43, 0xfe, 0x81, 0xcf, 0x06, 0x9e, 0x20, 0x6b,
	0x90, 0x3f, 0x51, 0x2b, 0xd5, 0x1e, 0x4b, 0x8e, 0xa1, 0xec, 0x1f, 0xd2, 0x00, 0x4a, 0x44, 0x37,
	0x87, 0x36, 0xe4, 0x3e, 0xc3, 0x85, 0xb5, 0xa2, 0x1c, 0xb4, 0x35, 0x47, 0x25, 0x3b, 0x1a, 0x81,
	0xac, 0x40, 0x4e, 0xdd, 0xa1, 0x9a, 0x42, 0xc9, 0xd1, 0x04, 0xf9, 0x1b, 0x2c, 0xe3, 0xe9, 0x5e,
	0x4c, 0x6b, 0x5d, 0xe0, 0x4b, 0xc8, 0xde, 0x9f, 0x6a, 0xbe, 0x05, 0x39, 0xac, 0x4c, 0x81, 0x30,
	0xca, 0x43, 0x46, 0x6f, 0x4d, 0x20, 0x57, 0x72, 0x49, 0x07, 0x4a, 0xcf, 0x9c, 0xa3, 0x09, 0xfb,
	0x2b, 0xdd, 0x89, 0x2f, 0xdc, 0x94, 0x73, 0x94, 0x5e, 0x3d, 0x4f, 0xe9, 0x26, 0x94, 0x5b, 0x11,
	0xf3, 0x58, 0x20, 0x7d, 0x3a, 0x10, 0xa4, 0x0e, 0x65, 0x77, 0x46, 0x2a, 0x3d, 0x4a, 0x4e, 0x9c,
	0x65, 0xff, 0x9c, 0x81, 0xf2, 0xc1, 0x0c, 0xe2, 0x9d, 0xd7, 0xe3, 0xbc, 0xde, 0x43, 0x20, 0x2b,
	0xc7, 0xe1, 0xa4, 0xe5, 0xa8, 0x35, 0x16, 0xf2, 0x0c, 0x16, 0xd5, 0xd3, 0x77, 0x2d, 0xce, 0x98,
	0x6d, 0x8f, 0x44, 0xb0, 0xe2, 0x07, 0x42, 0x62, 0xe1, 0xf5, 0xe2, 0x7a, 0xad, 0xaa, 0x6c, 0xfd,
	0x6f, 0x32, 0xff, 0xc4, 0xec, 0xdc, 0x19, 0x77, 0x69, 0x5f, 0x38, 0x97, 0x27, 0xe0, 0x71, 0x17,
	0xac, 0x41, 0x1e, 0x9f, 0xac, 0x91, 0x30, 0x51, 0x36, 0x14, 0xe6, 0x6d, 0xac, 0x9b, 0x58, 0x3a,
	0x6f, 0xe9, 0xb4, 0x8f, 0xdc, 0x05, 0xf0, 0xa8, 0x64, 0x3d, 0xea, 0x79, 0xcc, 0xb3, 0xd6, 0x7f,
	0xb7, 0xe5, 0x95, 0x50, 0x7a, 0x1b, 0x85, 0xc9, 0x73, 0x58, 0x8e, 0xb9, 0x42, 0x95, 0x63, 0x6d,
	0xae, 0x6e, 0x54, 0x99, 0xc1, 0xa8, 0x32, 0xbc, 0x0e, 0x4b, 0x13, 0x95, 0xe9, 0xc0, 0xa7, 0xc2,
	0xba, 0xaa, 0x7d, 0x6c, 0x98, 0xdb, 0xc8, 0xb3, 0x43, 0xb8, 0xf4, 0x8e, 0x67, 0xc8, 0x15, 0x28,
	0x48, 0xda, 0xef, 0xbd, 0x62, 0x63, 0x13, 0x97, 0xbc, 0xa4, 0xfd, 0x47, 0x6c, 0x8c, 0xcd, 0x19,
	0x37, 0x5e, 0xd3, 0xc1, 0x88, 0x99, 0x8c, 0x2a, 0x4a, 0xda, 0x7f, 0x86, 0x34, 0xf9, 0x2b, 0x54,
	0xce, 0xc4, 0x14, 0x5d, 0x88, 0x15, 0xb0, 0x14, 0x0f, 0xaa, 0xb0, 0xbf, 0x30, 0x4f, 0x98, 0x8e,
	0x8b, 0x20, 0x47, 0x50, 0x34, 0x31, 0x9a, 0x4c, 0x42, 0x77, 0x93, 0xcf, 0x1c, 0x06, 0xcd, 0x99,
	0x42, 0xbd, 0xa7, 0xe0, 0x7a, 0xb0, 0x68, 0x44, 0x75, 0xb1, 0x3e, 0x89, 0x17, 0x6b, 0xe2, 0x9b,
	0x63, 0x50, 0xa6, 0xce, 0xed, 0x9f, 0x16, 0xa0, 0x1c, 0x63, 0x9f, 0x57, 0x20, 0xa7, 0x5c, 0xc8,
	0x49, 0x81, 0xe0, 0x1a, 0xbd, 0x1a, 0x8e, 0x8e, 0x07, 0xbe, 0xdb, 0xf3, 0x43, 0x53, 0x25, 0x45,
	0xcd, 0x68, 0x87, 0xd3, 0x17, 0x2a, 0xfb, 0x11, 0x2f, 0x14, 0x36, 0x64, 0xf3, 0x80, 0x9b, 0xd7,
	0x7a, 0x4a, 0x63, 0xc2, 0x9b, 0xb7, 0x34, 0xaf, 0x43, 0xad, 0xa9, 0x69, 0x25, 0x17, 0x62, 0x95,
	0x5c, 0x85, 0x8c, 0x10, 0x43, 0xf3, 0xe8, 0xe2, 0x72, 0x3a, 0x7f, 0x94, 0x62, 0xf3, 0xc7, 0x0d,
	0x20, 0x43, 0xea, 0x9e, 0xfa, 0x01, 0x3e, 0xe1, 0x18, 0xf7, 0x13, 0x9f, 0x45, 0x16, 0x28, 0x89,
	0x4b, 0x66, 0xa7, 0x3d, 0xdd, 0xc0, 0x40, 0xf5, 0x23, 0x3e, 0x0a, 0xd5, 0xdb, 0x59, 0x72, 0x34,
	0xb1, 0xf9, 0x6b, 0x05, 0x48, 0x2c, 0xb0, 0x1d, 0x3d, 0x64, 0x93, 0x37, 0x90, 0x6f, 0x45, 0x0c,
	0x27, 0xc9, 0xf9, 0x93, 0xa4, 0x76, 0x2b, 0xe9, 0xa4, 0x2d, 0xec, 0x14, 0x19, 0x41, 0xd6, 0x61,
	0xd4, 0x23, 0x89, 0xc7, 0xf4, 0xda, 0xfc, 0x9a, 0xda, 0x29, 0xf2, 0x02, 0xf2, 0x47, 0xa1, 0xf7,
	0x91, 0x06, 0xaf, 0xbd, 0xd3, 0x89, 0xf6, 0xf0, 0x0f, 0x93, 0x9d, 0x22, 0x5d, 0xc8, 0xef, 0xb2,
	0x01, 0x93, 0x6c, 0x0e, 0xbb, 0xde, 0x8f, 0xfa, 0x06, 0x96, 0x35, 0xea, 0x73, 0x5f, 0x9e, 0xea,
	0x42, 0x4b, 0x0e, 0x3f, 0x57, 0x94, 0x4e, 0xa1, 0x76, 0xf6, 0x66, 0xf5, 0xb7, 0xa3, 0x23, 0x79,
	0x18, 0x32, 0xef, 0x42, 0x6d, 0x7c, 0x05, 0xd7, 0xce, 0xb9, 0xa9, 0xcb, 0xa2, 0xa1, 0x1f, 0x50,
	0x79, 0xc1, 0x97, 0x8d, 0x21, 0xfb, 0xd8, 0x17, 0x92, 0xcc, 0x33, 0x13, 0xd4, 0xee, 0xcd, 0x9d,
	0x38, 0xe8, 0xd1, 0x4f, 0xa1, 0xd0, 0xe2, 0x41, 0xc0, 0x5c, 0xf9, 0xc7, 0x64, 0xe0, 0x27, 0x50,
	0x31, 0xf8, 0x93, 0x99, 0xe2, 0x22, 0x1d, 0xf7, 0x75, 0x1a, 0xaa, 0x1d, 0x46, 0x23, 0x57, 0x85,
	0xc8, 0x8c, 0x96, 0x77, 0x92, 0x5d, 0x30, 0x9b, 0x36, 0x6b, 0xb7, 0xe7, 0x38, 0x89, 0x4e, 0xfc,
	0x12, 0xca, 0x33, 0x2d, 0x04, 0xf9, 0x77, 0x72, 0x47, 0xea, 0xfb, 0xb7, 0x92, 0x1f, 0xc4, 0xeb,
	0xbf, 0x4d, 0x43, 0x39, 0xf6, 0x25, 0x80, 0xcc, 0x93, 0x11, 0xe6, 0x1f, 0x67, 0x6d, 0x3b, 0xd9,
	0xd9, 0xf3, 0x3e, 0x40, 0xa4, 0xc8, 0xf7, 0x69, 0x58, 0x7e, 0xeb, 0xab, 0xc5, 0x3c, 0x4e, 0x51,
	0x07, 0x6b, 0x7b, 0x09, 0x07, 0xc1, 0xf7, 0x7c, 0x2d, 0x49, 0x91, 0xcf, 0x81, 0x3c, 0x64, 0x12,
	0x77, 0xb0, 0xa6, 0x3b, 0xcc, 0x8d, 0x98, 0x9c, 0xa7, 0x73, 0xdd, 0x4c, 0xf2, 0x3f, 0x0a, 0xaf,
	0xb3, 0x53, 0xe4, 0x9b, 0x34, 0x10, 0x9d, 0x22, 0x67, 0xe6, 0x93, 0xb9, 0x33, 0xe5, 0xde, 0xdc,
	0x93, 0x8c, 0xb0, 0x53, 0x3b, 0x7b, 0xff, 0x6f, 0xf5, 0x7d, 0x79, 0x3a, 0x3a, 0xc6, 0x51, 0xa2,
	0x89, 0x48, 0xcd, 0x09, 0x52, 0xf3, 0xc3, 0xbf, 0x00, 0x1e, 0xe7, 0x55, 0x3d, 0x6e, 0xfd, 0x16,
	0x00, 0x00, 0xff, 0xff, 0x1a, 0x4f, 0x21, 0xbf, 0x36, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeManagerServiceClient is the client API for NodeManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeManagerServiceClient interface {
	Create(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*Ids, error)
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NodeManager, error)
	Update(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteWithNodes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error)
	DeleteWithNodeStateStopped(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteWithNodeStateTerminated(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*NodeManagers, error)
	Connect(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*empty.Empty, error)
	ConnectManager(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	SearchNodeFields(ctx context.Context, in *FieldQuery, opts ...grpc.CallOption) (*Fields, error)
	SearchNodes(ctx context.Context, in *NodeQuery, opts ...grpc.CallOption) (*Nodes, error)
	ProcessNode(ctx context.Context, in *NodeMetadata, opts ...grpc.CallOption) (*ProcessNodeResponse, error)
	ChangeNodeState(ctx context.Context, in *NodeState, opts ...grpc.CallOption) (*ChangeNodeStateResponse, error)
	GetNodeWithSecrets(ctx context.Context, in *Id, opts ...grpc.CallOption) (*nodes.Node, error)
	SearchManagerNodes(ctx context.Context, in *NodeQuery, opts ...grpc.CallOption) (*ManagerNodes, error)
}

type nodeManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeManagerServiceClient(cc *grpc.ClientConn) NodeManagerServiceClient {
	return &nodeManagerServiceClient{cc}
}

func (c *nodeManagerServiceClient) Create(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*NodeManager, error) {
	out := new(NodeManager)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Update(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) DeleteWithNodes(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Ids, error) {
	out := new(Ids)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/DeleteWithNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) DeleteWithNodeStateStopped(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/DeleteWithNodeStateStopped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) DeleteWithNodeStateTerminated(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/DeleteWithNodeStateTerminated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*NodeManagers, error) {
	out := new(NodeManagers)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) Connect(ctx context.Context, in *NodeManager, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) ConnectManager(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/ConnectManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) SearchNodeFields(ctx context.Context, in *FieldQuery, opts ...grpc.CallOption) (*Fields, error) {
	out := new(Fields)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/SearchNodeFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) SearchNodes(ctx context.Context, in *NodeQuery, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/SearchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) ProcessNode(ctx context.Context, in *NodeMetadata, opts ...grpc.CallOption) (*ProcessNodeResponse, error) {
	out := new(ProcessNodeResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/ProcessNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) ChangeNodeState(ctx context.Context, in *NodeState, opts ...grpc.CallOption) (*ChangeNodeStateResponse, error) {
	out := new(ChangeNodeStateResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/ChangeNodeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) GetNodeWithSecrets(ctx context.Context, in *Id, opts ...grpc.CallOption) (*nodes.Node, error) {
	out := new(nodes.Node)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/GetNodeWithSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerServiceClient) SearchManagerNodes(ctx context.Context, in *NodeQuery, opts ...grpc.CallOption) (*ManagerNodes, error) {
	out := new(ManagerNodes)
	err := c.cc.Invoke(ctx, "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/SearchManagerNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeManagerServiceServer is the server API for NodeManagerService service.
type NodeManagerServiceServer interface {
	Create(context.Context, *NodeManager) (*Ids, error)
	Read(context.Context, *Id) (*NodeManager, error)
	Update(context.Context, *NodeManager) (*empty.Empty, error)
	Delete(context.Context, *Id) (*empty.Empty, error)
	DeleteWithNodes(context.Context, *Id) (*Ids, error)
	DeleteWithNodeStateStopped(context.Context, *Id) (*empty.Empty, error)
	DeleteWithNodeStateTerminated(context.Context, *Id) (*empty.Empty, error)
	List(context.Context, *Query) (*NodeManagers, error)
	Connect(context.Context, *NodeManager) (*empty.Empty, error)
	ConnectManager(context.Context, *Id) (*empty.Empty, error)
	SearchNodeFields(context.Context, *FieldQuery) (*Fields, error)
	SearchNodes(context.Context, *NodeQuery) (*Nodes, error)
	ProcessNode(context.Context, *NodeMetadata) (*ProcessNodeResponse, error)
	ChangeNodeState(context.Context, *NodeState) (*ChangeNodeStateResponse, error)
	GetNodeWithSecrets(context.Context, *Id) (*nodes.Node, error)
	SearchManagerNodes(context.Context, *NodeQuery) (*ManagerNodes, error)
}

// UnimplementedNodeManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeManagerServiceServer struct {
}

func (*UnimplementedNodeManagerServiceServer) Create(ctx context.Context, req *NodeManager) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Read(ctx context.Context, req *Id) (*NodeManager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Update(ctx context.Context, req *NodeManager) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Delete(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedNodeManagerServiceServer) DeleteWithNodes(ctx context.Context, req *Id) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithNodes not implemented")
}
func (*UnimplementedNodeManagerServiceServer) DeleteWithNodeStateStopped(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithNodeStateStopped not implemented")
}
func (*UnimplementedNodeManagerServiceServer) DeleteWithNodeStateTerminated(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithNodeStateTerminated not implemented")
}
func (*UnimplementedNodeManagerServiceServer) List(ctx context.Context, req *Query) (*NodeManagers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedNodeManagerServiceServer) Connect(ctx context.Context, req *NodeManager) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedNodeManagerServiceServer) ConnectManager(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectManager not implemented")
}
func (*UnimplementedNodeManagerServiceServer) SearchNodeFields(ctx context.Context, req *FieldQuery) (*Fields, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodeFields not implemented")
}
func (*UnimplementedNodeManagerServiceServer) SearchNodes(ctx context.Context, req *NodeQuery) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNodes not implemented")
}
func (*UnimplementedNodeManagerServiceServer) ProcessNode(ctx context.Context, req *NodeMetadata) (*ProcessNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessNode not implemented")
}
func (*UnimplementedNodeManagerServiceServer) ChangeNodeState(ctx context.Context, req *NodeState) (*ChangeNodeStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNodeState not implemented")
}
func (*UnimplementedNodeManagerServiceServer) GetNodeWithSecrets(ctx context.Context, req *Id) (*nodes.Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeWithSecrets not implemented")
}
func (*UnimplementedNodeManagerServiceServer) SearchManagerNodes(ctx context.Context, req *NodeQuery) (*ManagerNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchManagerNodes not implemented")
}

func RegisterNodeManagerServiceServer(s *grpc.Server, srv NodeManagerServiceServer) {
	s.RegisterService(&_NodeManagerService_serviceDesc, srv)
}

func _NodeManagerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Create(ctx, req.(*NodeManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Update(ctx, req.(*NodeManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_DeleteWithNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).DeleteWithNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/DeleteWithNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).DeleteWithNodes(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_DeleteWithNodeStateStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/DeleteWithNodeStateStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateStopped(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_DeleteWithNodeStateTerminated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateTerminated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/DeleteWithNodeStateTerminated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).DeleteWithNodeStateTerminated(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).List(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).Connect(ctx, req.(*NodeManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_ConnectManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).ConnectManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/ConnectManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).ConnectManager(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_SearchNodeFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).SearchNodeFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/SearchNodeFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).SearchNodeFields(ctx, req.(*FieldQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_SearchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).SearchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/SearchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).SearchNodes(ctx, req.(*NodeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_ProcessNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).ProcessNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/ProcessNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).ProcessNode(ctx, req.(*NodeMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_ChangeNodeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).ChangeNodeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/ChangeNodeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).ChangeNodeState(ctx, req.(*NodeState))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_GetNodeWithSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).GetNodeWithSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/GetNodeWithSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).GetNodeWithSecrets(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManagerService_SearchManagerNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServiceServer).SearchManagerNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.domain.nodemanager.api.manager.NodeManagerService/SearchManagerNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServiceServer).SearchManagerNodes(ctx, req.(*NodeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.domain.nodemanager.api.manager.NodeManagerService",
	HandlerType: (*NodeManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NodeManagerService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _NodeManagerService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NodeManagerService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NodeManagerService_Delete_Handler,
		},
		{
			MethodName: "DeleteWithNodes",
			Handler:    _NodeManagerService_DeleteWithNodes_Handler,
		},
		{
			MethodName: "DeleteWithNodeStateStopped",
			Handler:    _NodeManagerService_DeleteWithNodeStateStopped_Handler,
		},
		{
			MethodName: "DeleteWithNodeStateTerminated",
			Handler:    _NodeManagerService_DeleteWithNodeStateTerminated_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NodeManagerService_List_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _NodeManagerService_Connect_Handler,
		},
		{
			MethodName: "ConnectManager",
			Handler:    _NodeManagerService_ConnectManager_Handler,
		},
		{
			MethodName: "SearchNodeFields",
			Handler:    _NodeManagerService_SearchNodeFields_Handler,
		},
		{
			MethodName: "SearchNodes",
			Handler:    _NodeManagerService_SearchNodes_Handler,
		},
		{
			MethodName: "ProcessNode",
			Handler:    _NodeManagerService_ProcessNode_Handler,
		},
		{
			MethodName: "ChangeNodeState",
			Handler:    _NodeManagerService_ChangeNodeState_Handler,
		},
		{
			MethodName: "GetNodeWithSecrets",
			Handler:    _NodeManagerService_GetNodeWithSecrets_Handler,
		},
		{
			MethodName: "SearchManagerNodes",
			Handler:    _NodeManagerService_SearchManagerNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/nodemanager-service/api/manager/manager.proto",
}
