#!/usr/bin/env ruby
# Usage: automate-cluster-ctl secrets [COMMAND] [OPTIONS]
# Summary: Manage secrets for the Autoamte Cluster
# Built-in help

$LOAD_PATH.unshift File.join(ENV["_CLUSTER_CTL_ROOT"], "lib")

require 'cluster/command'
require 'cluster/secrets'
require 'base64'
require 'fileutils'

module SecretHelpers
  def secrets_key_file
    File.expand_path(AutomateCluster::Config.secrets_key_file)
  end

  def secrets_store_file
    File.expand_path(AutomateCluster::Config.secrets_store_file)
  end

  def secret_store
    AutomateCluster::Secrets.instance
  end
end

class AutomateClusterSecretsShow < AutomateCluster::Command
  include SecretHelpers

  option ['-n', '--list-names'], :flag, 'Show list of names in the secret store'
  parameter "[NAME]", "Name of secret to show", attribute_name: :name
  def execute
    if list_names?
      puts secret_store.names.join(", ")
      return
    end

    puts secret_store[name]
  rescue AutomateCluster::SecretsError => e
    AutomateCluster.logger.error e.message, cmd: 'secrets show'
    exit 1
  end
end

class AutomateClusterSecretsSet < AutomateCluster::SubCommand
  include SecretHelpers

  option ['-m', '--multi-line'], :flag, 'Enable multiline input'
  option ['-f', '--file'], 'FILE', 'Load value from file'

  parameter "NAME", "Name of secret to save", attribute_name: :name
  parameter "PASSWORD", "Password secret to save", attribute_name: :pass

  def execute
    secret_store[name] = pass
    secret_store.save(secrets_store_file)
  rescue AutomateCluster::SecretsError => e
    AutomateCluster.logger.error e.message, cmd: 'secrets set'
    exit 1
  end

  def get_value
    if file
      File.read(file)
    elsif multi_line?
      prompt.multiline("Enter secret:").join('')
    else
      prompt.mask('Enter secret:')
    end
  end
end

class AutomateClusterSecretsDelete < AutomateCluster::SubCommand
  include SecretHelpers

  parameter "NAME", "Name of secret to save", attribute_name: :name

  def execute
    secret_store.delete(name)
    AutomateCluster.logger.info "Removed #{name} from secrets"

    secret_store.save(secrets_store_file)
  rescue AutomateCluster::SecretsError => e
    AutomateCluster.logger.error e.message, cmd: 'secrets delete'
    exit 1
  end
end

class AutomateClusterSecretsInit < AutomateCluster::SubCommand
  include SecretHelpers

  def execute
    rotate_existing = false

    if File.exist?(secrets_store_file)
      AutomateCluster.logger.warn "An existing secrets store was found, existing secrets will be rotated using a new key"
        rotate_existing = true
    end

    if rotate_existing
      key = secret_store.rotate!
      FileUtils.mv(secrets_key_file, "#{secrets_key_file}.backup") if File.exist?(secrets_key_file)

      show_update_info
    else
      key = AutomateCluster::Secrets.generate_key
      FileUtils.mkdir_p(File.dirname(secrets_key_file))
      show_init_help(key)
    end

    File.open(secrets_key_file, 'w') { |fp| fp << key }
    FileUtils.chmod(0600, secrets_key_file)

    secret_store.save(secrets_store_file)

    show_help_info
  end

  def show_help_info
    puts <<~EOF
For more help on how to use the manage secrets run #{term.green("chef-automate secrets --help")}
    EOF
  end

  def show_update_info
    puts <<~EOF

#{term.green("The #{secrets_key_file} and #{secrets_store_file} has been updated using the new key")}
    EOF
  end

  def show_init_help(key)

    puts <<~EOF

#{term.green("Generating a new secrets key, please keep this secure!")}

Secret Key:
#{'-'*40}
#{key}

The new secrets key has been saved in #{secrets_key_file}
    EOF
  end
end

class AutomateClusterSecrets < AutomateCluster::Command
  subcommand "init", "Generate a new secrets key used to encrypt the secret store.", AutomateClusterSecretsInit
  subcommand "set",    "Add a new secrets: for more info use 'secrets set --help'", AutomateClusterSecretsSet
  subcommand "show",   "Show existing secrets: for more info use 'secrets show --help'", AutomateClusterSecretsShow
  subcommand "delete", "Delete existing secrets: for more info use 'secrets delete --help'", AutomateClusterSecretsDelete
end

AutomateClusterSecrets.run
