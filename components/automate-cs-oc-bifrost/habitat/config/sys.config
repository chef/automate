%% -*- mode: erlang -*-
%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*- %% ex: ts=4 sw=4 ft=erlang et
%%
%% oc_bifrost sys.config file
%%
%% Automatically generated by Chef
%%
[
 {kernel, [{start_pg2, true},
           {inet_dist_use_interface, {127,0,0,1}}
          ]},
 {sasl, [
         {sasl_error_logger, {file, "{{pkg.svc_var_path}}/logs/sasl-error.log"}},
         {errlog_type, error}
        ]},
 {chef_secrets, [
                 {provider, chef_secrets_fd}
                ]},
 {lager, [
          %% What handlers to install with what arguments
          %% The defaults for the logfiles are to rotate the files when
          %% they reach 10Mb or at midnight, whichever comes first, and keep
          %% the last 5 rotations. See the lager README for a description of
          %% the time rotation format:
          %% https://github.com/basho/lager/blob/master/README.md#internal-log-rotation
          %%
          %% If you wish to disable rotation, you can either set the size to 0
          %% and the rotation time to "", or instead specify a 2-tuple that only
          %% consists of {Logfile, Level}.
          {handlers, [
                {lager_console_backend, [
                    {level, {{cfg.log.level}}},
                    {formatter, lager_default_formatter},
                    {formatter_config, [ "[", severity, "] ", message, "\n"]}
            ]}
          ]},

          %% Whether to write a crash log, and where.
          %% Commented/omitted/undefined means no crash logger.
          {crash_log, "{{pkg.svc_var_path}}/logs/crash.log"},

          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},

          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, {{cfg.log.rotation_max_bytes}}},

          %% What time to rotate the crash log - default is no time
          %% rotation. See the lager README for a description of this format:
          %% https://github.com/basho/lager/blob/master/README.org
          {crash_log_date, "$D0"},

          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, {{cfg.log.rotation_max_files}}},

          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true},

          %% Bump up the "high-water mark" (default 50), which is the
          %% number of messages per second allowed to come from
          %% error_logger.  This is the same as used by
          %% opscode-chef-mover, FWIW.
          {error_logger_hwm, {{cfg.log.max_error_logs_per_second}}}
        ]},
 {webmachine, [
          {log_handlers, [
               {oc_wm_request_logger, [
                       {file, "{{pkg.svc_var_path}}/logs/crash.log"},
                       {file_size, {{cfg.log.rotation_max_megabytes}}},  %% Size in MB
                       {files, {{cfg.log.rotation_max_files}}},
                         {annotations, [requestor_id, created_authz_id, perf_stats, msg]}
                       ]
          }]}]
 },
 {sqerl, [
          {db_driver_mod, sqerl_pgsql_client},
          {ip_mode, [{{cfg.ip_mode}}]},
          {db_name, "{{cfg.sql.db_name}}"},
          {idle_check, 10000},
          {pooler_timeout, {{cfg.sql.pool_queue_timeout}}},
          {db_timeout, {{cfg.sql.timeout}} },
          {prepared_statements, {bifrost_db, statements, []}},
          {column_transforms, []}
         ]},
 {stats_hero, [
                {udp_socket_pool_size, 20},
                {protocol, statsd},
                {estatsd_host, "127.0.0.1"},
                {estatsd_port, 9466}
              ]},
 {pooler, [
           {pools, [
                     [{name, sqerl},
                       {max_count, {{cfg.sql.pool_max_size}}},
                       {init_count, {{cfg.sql.pool_init_size}}},
                       {queue_max, {{cfg.sql.pool_queue_max}}},
                       {start_mfa, {sqerl_client, start_link, []}}]
                   ]}
          ]},
 {bifrost, [
             {ip, "127.0.0.1"},
             {port, {{cfg.network.port}} },
             {root_metric_key, "bifrost"},
             {enable_extended_perf_log, true},
             {ssl, true},
             {ssl_opts, [
                         {cacertfile, "{{pkg.svc_config_path}}/root_ca.crt"},
                         {certfile, "{{pkg.svc_config_path}}/service.crt"},
                         {keyfile, "{{pkg.svc_config_path}}/service.key"},
                         {verify, verify_peer},
                         {versions, ['tlsv1.2']},
                         {ciphers, [{ecdhe_rsa,aes_128_gcm,null,sha256},
                                    {ecdhe_rsa,aes_256_gcm,null,sha384},
                                    {ecdhe_ecdsa,aes_128_gcm,null,sha256},
                                    {ecdhe_ecdsa,aes_256_gcm,null,sha384},
                                    {dhe_rsa,aes_128_gcm,null,sha256},
                                    {dhe_rsa,aes_256_gcm,null,sha384}]},
                         {eccs, [secp256r1,brainpoolP256r1,secp256k1,brainpoolP384r1,
                                 secp384r1,brainpoolP512r1,sect571r1,sect571k1,secp521r1,
                                 sect409k1,sect409r1,sect283k1,sect283r1,sect239k1,sect233k1,
                                 sect233r1]},
                         {honor_cipher_order, true},
                         {fail_if_no_peer_cert, true}
                        ]}
           ]},
  "{{pkg.svc_var_path}}/etc/sqerl.config"
].
