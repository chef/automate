#!{{pkgPathFor "core/bash"}}/bin/bash

exec 2>&1

# Required to allow common name feild in certificate. Feature soon to deprecated by 1.17
export GODEBUG=x509ignoreCN=0

chmod 0600 "{{pkg.svc_config_path}}/secrets"
source "{{pkg.svc_config_path}}/secrets"

# Minio requires TLS certs to be in a 'certs' subdirectory of the config-dir.
# hab doesn't render nested `config` templates so we need to leave them in
# root config dir and link to them from the certs dir.
mkdir -p "{{pkg.svc_var_path}}/config/certs/CAs"
if ! [[ -L "{{pkg.svc_var_path}}/config/certs/private.key" ]]; then
  ln -s "{{pkg.svc_config_path}}/private.key" "{{pkg.svc_var_path}}/config/certs/private.key"
fi
if ! [[ -L "{{pkg.svc_var_path}}/config/certs/public.crt" ]]; then
  ln -s "{{pkg.svc_config_path}}/public.crt" "{{pkg.svc_var_path}}/config/certs/public.crt"
fi
if ! [[ -L "{{pkg.svc_var_path}}/config/certs/CAs/public.crt" ]]; then
  ln -s "{{pkg.svc_config_path}}/public.crt" "{{pkg.svc_var_path}}/config/certs/CAs/public.crt"
fi


{{#if cfg.gateway.backup.s3.ssl.root_cert}}
ln -fs "{{pkg.svc_config_path}}/custom_s3.crt" "{{pkg.svc_var_path}}/config/certs/CAs/custom_s3.crt"
{{/if}}

CURRENT_ACCESS_KEY=""
CURRENT_SECRET_KEY=""
{{#if cfg.gateway.backup.filesystem.path}}
# minio uses the access and secret key to encrypt its config. We do
# not need this. We work around this by storing those values in our
# tmp directory that gets put in the folder.
# Then, when we start up the backup gateway, we can check for that
# file. If it exists, we tell backup-gateway that it should use those
# values.
# If we were not to do this, then it would be impossible to have 2
# automates looking at a shared network drive.
MINIO_CREDS_FILE="{{cfg.gateway.backup.filesystem.path}}/.tmp/.creds"
if [[ -e "${MINIO_CREDS_FILE}" ]]; then
  CURRENT_ACCESS_KEY=$(cut -f1 -d ':' < "${MINIO_CREDS_FILE}")
  CURRENT_SECRET_KEY=$(cut -f2 -d ':' < "${MINIO_CREDS_FILE}")
fi
{{/if}}

if [[ -z "${CURRENT_SECRET_KEY}" ]]; then
  secrets-helper generate backup-gateway.access_key 64 --if-not-exists
  secrets-helper generate backup-gateway.secret_key 64 --if-not-exists
else
  echo -n "${CURRENT_ACCESS_KEY}" | secrets-helper insert backup-gateway.access_key
  echo -n "${CURRENT_SECRET_KEY}" | secrets-helper insert backup-gateway.secret_key
fi

MINIO_ACCESS_KEY="$(secrets-helper show backup-gateway.access_key)"
export MINIO_ACCESS_KEY
MINIO_SECRET_KEY="$(secrets-helper show backup-gateway.secret_key)"
export MINIO_SECRET_KEY
export MINIO_BROWSER=off
export SSL_CERT_FILE={{pkgPathFor "core/cacerts"}}/ssl/cert.pem
export SSL_CERT_DIR={{pkgPathFor "core/cacerts"}}/ssl/certs

{{#if cfg.gateway.backup.s3.bucket.name~}}
exec minio gateway s3 {{cfg.gateway.backup.s3.bucket.endpoint}} \
  --config-dir "{{pkg.svc_var_path}}/config" \
  --address "127.0.0.1:{{cfg.service.port}}" \
  --quiet

{{else}}
  {{#if cfg.gateway.backup.gcs.bucket.name~}}
exec minio gateway gcs "{{cfg.gateway.backup.gcs.bucket.project_id}}" \
  --config-dir "{{pkg.svc_var_path}}/config" \
  --address "127.0.0.1:{{cfg.service.port}}" \
  --quiet
  {{else}}

# Symlink the "backups" bucket to the backup filesystem path
ln -sTnf "{{cfg.gateway.backup.filesystem.path}}" "{{pkg.svc_data_path}}/backups"
if [ -w "{{cfg.gateway.backup.filesystem.path}}" ]; then
  # Make sure the "backups" bucket and the minioMetaBucket (.minio.sys) are on the
  # same device so that minio can rename files from minioMetaBucket/tmp to the
  # to "backups" bucket.
  mkdir -p "{{cfg.gateway.backup.filesystem.path}}/.tmp"
  # Clean up the old .minio.sys if it exists
  [[ ! -L "{{pkg.svc_data_path}}/.minio.sys" ]] && rm -rf "{{pkg.svc_data_path}}/.minio.sys"
  ln -sTnf "{{cfg.gateway.backup.filesystem.path}}/.tmp" "{{pkg.svc_data_path}}/.minio.sys"
  if [[ ! -e "${MINIO_CREDS_FILE}" ]]; then
    touch "${MINIO_CREDS_FILE}"
    chmod 600 "${MINIO_CREDS_FILE}"
    echo -n "${MINIO_ACCESS_KEY}:${MINIO_SECRET_KEY}" > "${MINIO_CREDS_FILE}"
  fi
else
  # In disaster recovery setups where the backup volumes are mounted read-only, 
  # we must create the (unused) tmp directory somewhere writeable.
  echo "Starting minio server with read-only backup volume."
  mkdir -p "{{pkg.svc_data_path}}/.minio.sys"
fi

exec minio server \
  --config-dir "{{pkg.svc_var_path}}/config" \
  --address "127.0.0.1:{{cfg.service.port}}" \
  --quiet \
  "{{pkg.svc_data_path}}"
  {{/if ~}}  
{{/if ~}}
