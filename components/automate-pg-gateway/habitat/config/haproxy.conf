global
    maxconn 1024
    stats socket {{pkg.svc_var_path}}/status.sock mode 600
    log stdout format raw daemon info

defaults
    # Timeout for connect() calls to the backend servers. We likely
    # want to keep this low.
    timeout connect {{cfg.timeouts.connect}}s
    # Inactivity timeout for bi-directional communication. This is the
    # how long a long-lived connection is allowed to stayl idle.  We
    # likely want to keep this high to avoid unnecessarily killing
    # long-lived SQL connections used by low-request-rate services.
    timeout tunnel {{cfg.timeouts.idle}}s
    # Client inactivity connections for half-closed connections (i.e
    # the server has closed the connection and but the client has
    # not). The HAProxy documentation recommends setting this whenever
    # `timeout tunnel` is also set.
    timeout client-fin 1s
    # NOTE(ssd) 2019-07-10: The HAProxy documentation says that this
    # setting should not be needed; however, we have observed that
    # when a postgresql client disconnects uncleanly, HAProxy does not
    # immediately close the backend until the connection times out. If
    # a service is failing in a loop, this can quickly lead to the
    # exhaustion of available ports.
    timeout server-fin 1s
    # Client and server inactivity timeouts. Per the HAProxy
    # documentation, the tunnel timeout above superceeds these once
    # bidirection communication is established.
    timeout server 50s
    timeout client 50s
    log global
    option tcplog

{{~#if cfg.resolvers.nameservers}}
resolvers pgdns
    {{~#each cfg.resolvers.nameservers as |resolver|}}
        nameserver dns{{@index}} {{resolver}}
    {{~/each}}
{{~/if}}

frontend postgresql
    bind 127.0.0.1:{{cfg.service.port}}
    mode tcp
    default_backend automate_postgresql

backend automate_postgresql
{{~#if cfg.service.external_postgresql.enable }}
    balance roundrobin
    option httpchk GET /
    option redispatch
    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
    {{~#each cfg.service.parsed_nodes as |node|}}
        {{~#if node.is_domain}}
            {{~#if ../cfg.resolvers.nameservers }}
    server-template {{node.address}} 8 {{node.address}}:{{node.port}} check resolvers pgdns init-addr none  resolve-prefer ipv4
            {{else}}
    server {{node.address}} {{node.address}}:5432 check maxconn 350 check port 6432
            {{~/if}}
       {{else}}
    server {{node.address}} {{node.address}}:5432 check maxconn 350 check port 6432
       {{~/if}}
    {{~/each}}
{{else~}}
    {{~#eachAlive bind.automate-postgresql.members as |member|}}
        {{#if @last}}
            server 127.0.0.1 127.0.0.1:{{member.cfg.port}}
	    {{~/if}}
    {{~/eachAlive}}
{{/if~}}
