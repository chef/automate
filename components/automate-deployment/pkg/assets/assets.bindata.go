// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/a1_elasticsearch_mappings/compliance-template.json (5.111kB)
// data/a1_elasticsearch_mappings/insights-template.json (2.705kB)
// data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.crl (958B)
// data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.crt (1.826kB)
// data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.key (3.243kB)
// data/binds.txt (5.201kB)
// data/init-config.toml (1.825kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataA1_elasticsearch_mappingsComplianceTemplateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x5d\xaf\xdb\x28\x10\x7d\xcf\xaf\x40\x3c\x56\x59\xa9\xba\x52\xf7\xa1\x4f\xfb\x3f\xaa\x0a\x11\x7b\xec\xcb\x96\x2f\xc1\x38\xbd\xd9\x2a\xff\x7d\x05\xfe\x08\xc6\x76\xec\x58\xde\x87\x6e\xa5\x5e\xc5\xcc\xcc\xf1\x39\x87\xc1\xc0\xaf\x13\x21\x14\x41\x59\xc9\x11\x28\xf9\x4a\x68\x61\x94\x95\x82\xeb\x02\xfe\x78\xfb\xfc\x89\x9e\x43\x82\x07\x44\xa1\x6b\x1f\x12\x42\x05\x21\x54\xe8\x12\x3e\x68\xff\x48\x08\x75\x50\x39\xf0\xef\x4c\x68\x04\x77\xe5\x32\x82\x7d\xf1\x34\xc6\xef\xe7\xb6\x8a\x6b\x2e\x6f\x5e\xf8\xb4\x30\x8e\xfd\x03\x2e\x19\x0b\xa3\x0d\x9a\x48\x05\x10\x46\x91\xc0\xd7\xfc\x00\x2d\xda\x92\x51\x22\x7b\x44\xce\x69\x41\x25\x24\xc6\xec\x6f\xc9\x28\x21\x54\x9a\x9f\xe0\x0a\xee\x81\x26\xe3\xdf\x87\xdf\xf7\xee\xd7\xbd\x07\x1b\xbd\x79\x81\x2c\x9b\xcf\x09\xc5\x37\x1b\xa4\x50\x28\x6b\x60\xba\x76\x5c\x8d\x59\x2a\xa1\x59\x1c\xfd\x4a\xde\xc6\x01\xfe\x31\x04\x3e\x9f\x27\x4e\xb0\xe2\x9d\x3b\x3f\xa3\x0e\x10\x33\x27\x08\xa1\xa5\xa8\x05\xae\xe8\x3d\xf5\x7f\xa3\x72\xaa\xb8\xb5\xd9\xf4\xb3\x12\x2a\xde\x48\x64\x8f\xb1\x30\xca\x65\x9c\xf7\x5f\x14\x34\xbf\x48\x28\xc3\x43\xc5\xa5\x87\x33\xa1\x46\x09\x64\xda\x38\x15\x71\xd0\x35\xf0\xf0\xb5\xbc\x69\xae\x44\xc1\xfa\x4e\x8c\x29\xdf\x52\x8b\x15\x78\xcf\x6b\x60\x95\x00\x59\xa6\x2f\xed\x1c\xc2\xe2\x3d\x76\x5c\x97\x97\x39\x1b\xc2\xac\x93\xc1\xe2\x3c\x84\x5c\x8f\x4e\xe8\x3a\x4f\x8d\x49\xf9\x1b\xfa\xe9\x0b\x65\x08\x1f\x48\x67\x05\x65\x56\x47\xae\x25\x47\x3e\xd8\x90\xc4\xef\x33\x6d\x96\x0a\x6e\xc9\xb5\x7a\xfd\x13\xc1\x9f\xfe\x4b\xa9\x3f\xe0\xf6\xd3\xb8\x72\x41\x2d\xa1\xa2\xd6\xc6\x01\xe3\x17\x73\x0d\xad\xfd\xf6\xe5\xcf\x17\x14\x56\xd2\x70\x3c\x4a\x60\x04\x5b\xd6\x97\x68\xea\x32\x09\x2d\x4d\xc1\xae\x5c\x36\x30\x28\x5a\xa5\x5c\x9a\xe6\x22\xe1\x28\xce\x2d\xda\x26\xd2\x7d\xea\x2e\xd6\x97\x1b\x1e\xc6\x39\x60\x6d\x62\xdc\x26\xee\xe2\xeb\xdf\x8d\x3b\xac\x31\x22\xd8\x26\xc6\x5d\xe6\x2e\xca\x61\xd7\xab\xc1\x1d\x45\xba\x83\xdb\x44\x7b\xc8\xdd\x45\x5c\x9a\xe3\x3e\x32\x01\x6b\x13\xe5\x36\x71\xdf\x0a\xe4\xc7\xf5\x72\xc0\xda\xb6\xfa\xf8\xee\x5e\xae\xc1\x30\x6b\x84\x3e\xac\x9f\x07\xc0\x4d\xcc\x93\xec\xad\xf4\xc9\xf7\x61\x5b\xb6\xce\x58\x70\x28\x20\xa3\x4d\xff\x42\xa1\xc0\x23\x57\x96\x3e\xde\xb7\x62\xd4\x39\x29\xbf\x82\xf3\xc2\xe8\x71\x71\xb2\xd9\xac\xd4\xd7\x60\x84\xa5\x24\xb7\x72\x50\x6d\x2e\x7f\x43\x91\x19\xd4\x1d\x31\xe8\x74\xa7\x5e\x94\x19\x83\x22\x93\x28\xec\x3a\x41\xd2\xae\xac\x82\x63\x10\xf9\xea\x94\xe4\x38\x1c\x05\x36\x25\xbc\xb4\x8f\x4d\xb8\xe8\xfa\x75\x90\xe7\x7b\x79\x7f\xb0\x3f\xf5\x17\x02\x6f\xa1\x60\xbe\x51\x8a\xbb\x5b\x7a\xc0\x4f\xec\x1d\x35\x11\xe8\xab\x70\x46\x2b\xd0\xb8\x74\x54\x1e\x5a\x62\x7c\x9a\x8f\x0b\x69\x32\x53\xd0\x9e\xa9\x27\x53\x98\xe0\xb5\x47\xb7\x3c\x9a\xdc\x40\xc6\xf7\x8e\x51\xe2\x82\x1d\x49\x5b\x3a\x23\x21\xe7\xf5\xbb\x4a\x81\x42\xd8\xff\x8b\x18\xeb\x4c\x25\x24\xf8\xd0\x9c\xf3\x92\xc2\x52\xd0\xe0\x11\x4a\x9a\x22\x24\x10\x92\x63\x65\x9c\xca\xab\x17\x7a\x3b\xc6\x34\x57\xf9\xd5\x75\xd5\xc4\x67\x46\xae\x98\xb9\x6e\xe8\x0b\xa6\xe6\xc6\x4e\x9f\xd7\x6d\xd7\xa6\x04\x36\x63\xc2\xef\xd4\x45\xcf\x3f\x76\x0e\x6c\x38\x32\x6e\xf8\xd6\x79\xe4\x28\x3c\x8a\x62\xd2\x7f\xcf\x3a\xa8\x6c\x5c\xbb\x85\x3c\x11\xdd\xdd\x0c\xf6\x2e\x09\x25\x72\xf4\xc9\x8a\x58\xda\x2b\x27\x74\x0b\xa3\xd1\x19\x39\xd7\xb9\x4f\x41\xd7\x80\x49\xfb\x45\xf2\x8d\xc4\xf9\xe0\x7a\x79\x0b\xd1\x68\x16\x0e\x2e\x8b\x19\x2b\xb6\xf6\xff\xf2\x85\x31\x3f\x76\x9f\x2e\x3f\x2a\x94\xe5\x45\xbe\xdb\x6d\x7e\xf7\xae\x05\x39\xee\xe0\x53\xf8\x7f\x3f\xfd\x1b\x00\x00\xff\xff\xe1\xe6\xd4\x98\xf7\x13\x00\x00")

func dataA1_elasticsearch_mappingsComplianceTemplateJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataA1_elasticsearch_mappingsComplianceTemplateJson,
		"data/a1_elasticsearch_mappings/compliance-template.json",
	)
}

func dataA1_elasticsearch_mappingsComplianceTemplateJson() (*asset, error) {
	bytes, err := dataA1_elasticsearch_mappingsComplianceTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/a1_elasticsearch_mappings/compliance-template.json", size: 5111, mode: os.FileMode(0644), modTime: time.Unix(1554914043, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x73, 0x93, 0x83, 0xd, 0xe8, 0x6a, 0x41, 0xce, 0x60, 0x54, 0x83, 0x5f, 0xfe, 0xad, 0x90, 0x12, 0x3a, 0x91, 0xf0, 0xf9, 0xae, 0x1e, 0x49, 0x0, 0x92, 0x72, 0xd8, 0xd2, 0x98, 0x5d, 0xbe}}
	return a, nil
}

var _dataA1_elasticsearch_mappingsInsightsTemplateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\xc1\x8e\x9b\x30\x10\x86\xef\x3c\x85\xe5\xe3\x8a\x5e\x2a\x6d\x0f\x3d\xf5\x3d\xaa\xca\x1a\xf0\x40\xdc\x1a\xdb\xb2\x87\x74\xa3\x15\xef\x5e\xd9\x10\xc2\x3a\x4d\x42\x10\x7b\x0b\xcc\x3f\x3f\xdf\x3f\xb1\x31\xef\x05\x63\x9c\xb0\x73\x1a\x08\x39\xfb\xce\xb8\x32\x41\xb5\x07\x0a\x5f\x5e\x78\x19\x8b\x01\x89\x94\x69\x43\x2c\x46\x35\x8b\x12\x89\x6f\xfc\x7c\xc9\x18\xf7\xd8\x78\x0c\x07\xa1\x0c\xa1\x3f\x82\x4e\x46\xaf\x81\xa7\xfa\x50\x30\x36\x24\xab\x0e\x9c\xcb\xac\x84\xc4\x06\x7a\x4d\xe2\x72\x2f\xde\x05\x9d\x3c\xde\x39\x1a\xa8\x34\xca\x78\xd1\x80\x0e\x58\x32\x6e\x3b\x45\xc2\x58\xdf\x25\x1f\xf2\x3d\x26\xf7\xd4\x28\x4f\x06\x3a\x55\x8b\x73\xa2\x24\xf9\x39\x1b\x47\x06\x0c\x01\x5a\x14\x8d\x42\x2d\x97\x0f\x1d\xab\x40\xf5\x21\xd1\x4f\x3a\x5e\x5e\x95\xc5\x14\x43\xd0\xc9\x8d\x23\x0b\xe4\x95\x69\x73\x69\x12\xe5\x4f\x88\xd3\x3e\xb7\x11\xbe\x11\xff\x6f\xa0\xf2\x63\x47\x62\x95\x40\x30\x8f\x61\x51\x1f\x8a\xfc\xd7\x50\x2e\x03\x8f\x70\x63\xde\x70\x27\xf0\xcb\x67\x46\xfd\x83\xa7\xbf\xd6\xcb\x1b\x69\x19\x57\xad\xb1\x1e\x05\x54\xf6\x98\x1a\xbe\xbe\x7e\x7b\x22\x62\xa3\x2d\xd0\x5e\x09\x93\xd9\xed\x80\x8b\x50\x93\x92\x71\x69\x6b\x71\x04\xdd\xe3\x1c\xe9\x21\xb2\xb4\x7d\xa5\x71\x2f\xe6\xd1\x6d\x15\xf4\x59\xba\x89\xba\x3a\xd1\x6e\xcc\xd1\x6b\x15\xf1\x28\xdc\xc4\x1b\x0e\xd6\xef\xb6\x30\x92\xd9\x2a\xe2\x49\xb9\x09\x39\xbe\x42\x5b\xf4\x7b\x41\x4f\x76\xab\xb0\x67\xed\x26\x70\x6d\xf7\x7b\xcb\x44\xaf\x55\xc8\xa3\x70\xdb\x0e\x84\xfd\xd6\x72\xf4\x5a\xb7\xfb\x60\xf3\x5a\x6e\xd1\x0a\x67\x95\xd9\x6d\x3d\xcf\x86\xab\xc8\x17\xea\xb5\xf8\xec\xd7\x7c\x2e\x3b\x6f\x1d\x7a\x52\x98\x61\xf3\x1f\xa4\x3a\x0c\x04\x9d\xe3\x97\xe7\x3d\x18\x54\xb9\x68\x3f\xa2\x0f\xca\x9a\x8f\xcd\x8b\xd3\xe6\x41\x7f\x8b\x56\x39\xce\xf2\x51\xce\xa9\x6d\xf5\x1b\xeb\x6c\x40\xd3\x37\x06\xbf\x3e\xaa\x6f\xc6\x4c\x45\x95\x45\x54\xee\x31\x20\x1b\x77\x56\x0d\x14\x43\x3e\xfb\x97\xe4\x3e\x40\x8a\x7a\x89\x4f\x9d\x63\x57\x2c\xa6\x7d\xde\xe4\xfe\x59\x7e\xf9\x4a\x2c\x86\xe2\x5f\x00\x00\x00\xff\xff\x81\xc0\xbc\x0b\x91\x0a\x00\x00")

func dataA1_elasticsearch_mappingsInsightsTemplateJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataA1_elasticsearch_mappingsInsightsTemplateJson,
		"data/a1_elasticsearch_mappings/insights-template.json",
	)
}

func dataA1_elasticsearch_mappingsInsightsTemplateJson() (*asset, error) {
	bytes, err := dataA1_elasticsearch_mappingsInsightsTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/a1_elasticsearch_mappings/insights-template.json", size: 2705, mode: os.FileMode(0644), modTime: time.Unix(1554914043, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0xf6, 0x70, 0xce, 0xf, 0x2b, 0x35, 0x79, 0x84, 0x27, 0x45, 0xe3, 0xc7, 0x5e, 0x15, 0x7c, 0x9f, 0x57, 0x4e, 0x57, 0x88, 0x17, 0x40, 0x66, 0x91, 0x8a, 0x58, 0x66, 0x54, 0xb5, 0xed, 0xe6}}
	return a, nil
}

var _dataA1stub_certsChefautomateupgradefromv1selftestCrl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xd3\xb7\x16\xaa\xcc\x02\x40\xe1\x9e\xa7\x38\x3d\xeb\x2e\x87\x28\x94\x03\x03\x48\x18\x24\x07\x3b\x01\x25\x8d\xa0\x04\x01\x9f\xfe\xae\x73\xca\x7f\x97\x5f\xbf\xff\xf7\x37\x45\x33\x4c\xf7\x4f\x26\x00\xf9\x8f\x1a\x38\xff\x88\xc2\xa6\xa9\x0e\x48\x55\x1a\xdf\x54\x60\x04\x5d\xa5\xee\x3f\x4d\xdf\x1a\xf2\x06\x14\xe8\xcf\x3a\x44\x70\xc6\xe1\xb8\xd9\x30\x47\x89\xef\x23\xed\xd0\xd1\xdd\x48\x5e\x7e\x96\x80\x82\x65\x1a\xaa\x32\x92\xa4\x34\xaa\x23\x4f\x03\x12\x0c\xd6\xb7\xc8\xf2\x3d\x66\x93\xf9\x46\x02\x52\x72\x7e\x86\x22\x8d\xc7\xc8\x3c\x5c\xa4\x09\x38\xd2\x80\xab\x8f\x7f\x4d\xc0\xa8\xfe\x67\x14\x8e\xb4\x9f\x4b\xc6\x0d\xda\xb0\xc3\xaa\xb6\x5d\xb6\x1c\x25\x01\xe8\x14\xa5\xde\xf4\x11\xc6\xe4\xb2\x30\x63\xaf\xff\x64\x3d\x23\xf3\x5c\x35\x43\xb7\x76\x04\x3a\x0d\x8d\xcb\x0d\xf9\xb9\x45\xd9\xe3\xcd\x6c\xbe\xa5\x0b\x7d\xcd\x51\x7c\x88\xea\xda\x54\xa0\xed\x4b\x67\x17\x87\xd2\xbb\x53\xcb\xea\x9d\xb5\xa5\xb9\x35\x6b\xd5\x0f\x67\x61\x10\xc5\x82\x05\xac\x56\xb3\xd7\xef\x14\x5e\x8c\x92\x9a\x09\xa3\x9b\x4f\x89\x81\xb4\x1d\xa1\x89\x80\x48\x4e\x3e\x6a\x0b\xbc\xc9\xbc\x19\xdd\x47\xac\x4e\x89\x31\xa1\xc2\xc7\xc2\xa5\x4e\x24\x93\x5b\x34\x12\x10\x7a\x01\xb5\xe8\xfe\x9c\x3c\xe0\x1d\x4a\x50\xca\x66\xb3\x72\x22\xe8\x1f\x0d\xb1\x87\xc7\x69\x0b\x17\x90\x57\xd0\x3c\xb8\x17\xae\xca\x49\x15\xa2\xdd\x56\x98\x6e\x96\xce\xbc\xd9\x00\x9e\x74\xbb\xd0\x09\x58\x13\xec\x70\x38\x24\x9a\xa1\x96\xc0\xcc\xa4\xb7\xcf\x3f\xaf\xa7\xd6\x03\x22\x02\xe0\xdc\x2b\xa7\x4d\xfd\xe9\xfb\x59\xb6\x9d\xf5\x58\x1d\xb9\x03\xd7\xf4\x74\x54\xc4\x6e\x2f\x49\x1d\xb4\x7c\x0f\xc3\x35\x2e\xa3\xb7\xbd\xdc\x0c\xaa\x04\x47\x2d\x26\x44\x48\x99\xa8\x10\x43\x5a\x4a\xa6\xdd\x00\xf8\x6e\x0b\x8d\x51\xbc\x46\xd9\x14\x52\xab\xb0\x9b\xb1\xe0\x56\x87\x29\x5e\x73\x7f\xb7\x3e\x91\x6b\x4c\x61\xb4\xa4\x96\x05\x8d\x96\xda\x60\x26\x93\xdd\x61\x68\x2e\x7b\x05\xde\xd8\xec\xc7\xc1\x19\xfd\x73\xf0\xca\x00\x2d\x9f\xd8\x5d\x87\x3e\x76\x74\x5f\x19\x04\x3e\x52\x7a\x20\xcc\x27\x90\xa9\xb7\x4e\x88\xa7\x0f\xc3\x6d\x5a\x4a\xf5\x0e\xb8\x2a\x87\x88\x68\x67\xde\x9d\x45\x7c\xb8\x97\x33\xb1\x9f\x8f\x76\x6f\xae\xd0\x7d\x72\x7d\xfe\x43\xba\xb6\xb2\xbf\x4d\x56\xe4\xe2\x9a\x87\x03\xa1\x75\x26\x7b\x5b\xe7\xda\xa1\xad\xf3\x62\x51\x9e\x47\xe6\x49\xe8\x98\xed\x74\x86\x31\x8e\xbe\x74\x95\xa7\x92\x9e\x78\xec\x7b\xe5\x45\xbf\xbf\x74\xa2\x9b\x82\xcf\x58\x12\xf6\x74\x17\x58\x2f\xe0\x7d\xed\x41\x96\x54\xf7\x9e\x61\x16\x66\xc5\x89\x52\x4f\xd7\x38\x15\xc8\x3d\x0a\x18\x2e\x73\x6a\x03\x4a\x97\xbb\x6d\x81\xb6\xc3\x4a\x8f\x5e\x45\x6e\x5d\x63\xb1\x9f\x77\xff\xed\x78\xf5\x17\x54\x4b\x05\xf2\x3a\x5e\xa4\xe7\xc9\xf4\x3c\xfd\x8b\x75\xca\x91\x13\x6b\xa1\x11\x2d\xbb\x51\x1f\x8e\x6d\xe2\xb1\xf3\xb4\x55\x98\x66\x97\x24\x52\xe1\x56\xfd\xd2\x87\x3b\x29\x0c\xe7\x3f\xef\xad\x74\xac\x34\x38\x50\x7e\xab\xf9\x4d\x5e\x67\x4c\x02\x3c\x51\x3b\xb9\x3e\xbf\x99\xb3\x5d\x75\xcd\xe7\xe3\xbe\x53\x84\xda\x6d\x3f\xd8\xd3\x8f\xef\x71\xcf\x42\xc4\x89\x49\x76\xa2\x83\x0f\xfa\x6d\xc3\x25\x18\xc2\xd9\x7b\x73\xf7\x42\xe5\x1e\xce\x1b\x37\xc8\x73\xa8\x7f\x4f\x6a\x2e\xfa\xcf\xa4\xff\x0f\x00\x00\xff\xff\x6a\x88\x2a\xa9\xbe\x03\x00\x00")

func dataA1stub_certsChefautomateupgradefromv1selftestCrlBytes() ([]byte, error) {
	return bindataRead(
		_dataA1stub_certsChefautomateupgradefromv1selftestCrl,
		"data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.crl",
	)
}

func dataA1stub_certsChefautomateupgradefromv1selftestCrl() (*asset, error) {
	bytes, err := dataA1stub_certsChefautomateupgradefromv1selftestCrlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.crl", size: 958, mode: os.FileMode(0644), modTime: time.Unix(1554914043, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0xcc, 0x17, 0xf2, 0xe5, 0x86, 0x17, 0x26, 0xf6, 0x6, 0xa9, 0x30, 0x16, 0xf, 0x54, 0x6, 0x44, 0xf, 0x27, 0xb2, 0xdd, 0x5a, 0x31, 0x5a, 0x52, 0x7b, 0xac, 0x66, 0x40, 0x9d, 0x2e, 0x5a}}
	return a, nil
}

var _dataA1stub_certsChefautomateupgradefromv1selftestCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x95\xb7\x12\xb3\xea\x11\x86\x7b\xae\xc2\xbd\xc6\x03\x08\x91\xca\x8f\x9c\xd1\x47\x86\x4e\xe4\x2c\x72\xd0\xd5\x7b\xfe\xe3\xc6\x63\xfb\x6c\xf9\xee\xec\x3c\xd5\xbe\xcf\x3f\xff\x0c\x27\xca\xaa\xf5\x0f\x5e\x74\x3c\x55\x52\x79\xe0\x89\x7f\xa5\x88\xa9\xaa\x92\x2c\xf0\x3c\x38\xf9\x0a\x9c\x2a\x07\x2a\x95\x03\x1e\xb0\xb8\xaa\x9b\xeb\xae\x91\xd9\x13\xe3\x00\x5c\x25\x20\x80\xd5\x74\xbf\xa7\x0e\x62\x21\x80\x50\x10\x6f\x49\xf8\xc8\xc1\x80\xc0\x28\xc0\xd2\x27\x5e\xe7\x72\x10\x64\x72\x7e\xc7\xa1\xd3\x3b\xa3\x76\xa4\x51\x7c\xf9\xcf\x60\x4d\x7a\xa7\xcf\x08\x78\x2a\x75\x66\x99\x5e\x75\x9a\xad\x8a\x99\x5e\x77\x99\x9e\xf9\x0c\xeb\xcc\x42\x4c\xaf\x3b\x6d\xe1\x3f\xc2\xf6\xff\x93\xfe\x0e\x84\xfc\x37\xa9\xaa\xd4\xc6\x04\x98\xcc\xbb\xb3\xec\xaa\x29\x21\x40\x91\x03\xd0\x07\xe0\xa5\xf2\xc2\x09\xfe\xec\x75\xf0\x55\x79\x00\x79\x2a\x38\x19\x03\x69\xa1\x87\xc2\x42\x0f\xf1\x46\x01\xbc\x2b\xa7\x64\x29\x48\x38\xe1\x4d\x4f\xab\xd5\x42\xe1\x98\xde\x57\x0a\x01\x67\xa8\xa7\xc1\xad\x64\x3f\xd0\x9f\xef\x05\x8c\x23\xe3\xfb\x6e\x29\xf9\x41\xa4\x11\x6a\xe8\x3c\x34\x79\xc3\x28\xed\x0d\x8b\x9b\x58\x5e\xdb\x3e\x3a\x53\x96\xbe\x0d\xdf\xdf\xb0\xa2\x0c\x8b\x66\x2f\x92\xeb\x28\xef\xa3\xf2\xe7\xd1\x7d\x2b\xb7\x76\xbe\x0f\x90\x3c\x02\x35\xa0\x5a\x17\x61\x73\xde\x14\xb4\x5e\x27\x8c\x05\x33\xb2\x41\x5d\xa8\xf0\x2d\x98\xcb\x67\x67\x36\x5e\xc3\x07\x31\x69\xcd\x8f\x84\xbf\x32\xae\x34\xd4\x1c\x5a\x75\x78\xcc\x17\x43\x28\x78\xcf\x93\x62\xd4\x29\x01\x92\x67\x3d\x29\xed\x7a\x90\x99\xd8\xf8\x10\xc3\x47\xc8\x0c\x72\xad\x6e\x63\xf2\xf6\x88\x27\x4e\x66\x13\xdc\xc7\xb7\x14\x6a\x42\x6d\x5e\xcc\x8d\x11\x72\x49\xb2\x43\xc1\x1d\x97\xbb\xa6\x7b\x33\x26\xc8\x56\x78\x5f\xc8\x5d\x72\x24\xd7\x2f\x77\x2c\x92\x1f\x71\xd4\x03\x53\xe0\x13\x85\x4a\x87\xa5\x93\x56\x82\x85\x64\x1c\x3a\x29\xc1\x53\x8d\xd7\x63\x70\x56\x67\x4d\xee\xc5\xf2\x41\x86\xf5\xa3\x09\x90\x18\x73\x93\x4f\x7e\xa9\x01\x98\xb4\x65\xbb\x66\x55\x9d\xea\x2b\x8e\xc2\xd4\x48\xd4\x6a\xde\xce\x9b\x21\xc8\x74\x38\xa9\x5a\x3e\xc8\x3c\x98\x71\xd8\xf4\x6e\xd7\x8e\x61\x40\xdb\x7a\x49\x32\x04\x22\x9b\x5e\x27\x35\x76\x1d\x07\xed\x1a\x57\x23\x36\xb7\x92\xf1\x10\x39\xac\xd9\x12\x50\xfa\x79\x30\x77\x6c\x69\x69\x99\xaf\x4e\x11\xf6\xe8\x4d\xa7\x20\x4d\x5f\xc7\x0a\x3b\xda\xda\x92\xb8\x07\x0f\x71\x37\xeb\x0b\xd9\xb1\xdf\xb5\x67\xa4\x9b\x0a\x2b\xca\x2f\x4f\xae\x27\x61\x97\x85\x5c\xd5\xa9\x43\x61\xbe\xed\x9e\x41\xde\x4c\x7d\x5b\xa2\x1e\x43\xd1\x64\x29\xa1\xa0\x1d\xd5\x65\xf1\x1a\xc9\x06\x62\x1c\xf7\x97\x4b\x20\xce\x8f\x1a\xef\x60\x5b\x88\x0b\xfd\xf6\x96\x96\xbe\x56\x82\x79\xda\xaa\x77\xde\x18\x5a\xa1\xda\x03\xfc\x34\xce\x0f\x9f\x79\x74\x4f\xf1\xf3\x3a\x59\x88\xfb\xa5\x09\xb8\x13\xc1\xba\x3b\x2a\x5d\x94\x68\xb0\x90\x66\xb2\x3c\xde\x33\x3e\xab\xb8\xdc\xfb\x39\x2c\xff\xae\xfa\xf2\x39\xa5\x01\xfe\xd2\xbc\x07\x83\x35\x22\x04\x1a\x25\xdf\xbd\x77\x7c\xb6\x7b\x7b\x74\x12\xbe\xe9\x48\xbb\x8c\xf4\xe3\xe9\x27\x1e\xb1\x78\xf1\x7c\x4c\xd2\xd9\x8b\x00\xcf\x3f\xc3\xfd\x91\x9f\xe4\x2b\xeb\xa3\x25\xa5\x4e\x55\x00\x10\x70\x5f\xcc\x3f\xe1\x0f\xd8\x5c\x65\x05\x0a\x64\x38\x50\x32\x22\xc2\x01\x93\x07\x30\x3e\xc5\x2a\x16\x02\x07\xf3\x00\x54\x50\x0e\x54\x27\x57\x89\x1c\xfa\xe7\xbd\x05\x90\xff\xfb\xe0\x25\x4a\x15\xf4\x7b\x65\xc3\xbf\x9d\xf4\x63\xa5\xa8\x5f\xd7\xbc\x46\xc6\x76\x6f\x7b\x60\xd4\x0f\x33\x3b\x05\x18\x6b\xfa\x37\x51\xeb\x23\xb3\x00\x14\x0d\x0e\x02\xa1\xfa\xd3\x0f\xdc\x9b\x9c\x17\xbf\x25\x55\x50\xee\x85\xd1\x62\x5e\x58\xec\x19\x51\x8b\xcc\xfd\x44\xb6\xa2\x1b\xe1\xda\x06\x3a\x49\x5a\x30\x61\x30\x43\x58\x3f\x01\xdd\x1c\xce\xf7\x94\x98\xcd\x81\x96\x36\x1e\x8f\x42\xb5\x16\x7e\x24\x52\x25\xb8\x17\x7e\xbe\x1f\x63\x43\x33\xde\x5b\x9d\xe6\xe5\x8d\xfc\x68\xcd\xf1\x29\x3a\xfb\x4d\x07\x93\xbe\xa2\xb2\x9a\x98\xe9\x87\xb1\xa7\xc2\x8f\x97\xf9\xe8\xd3\x23\x3c\x57\x5c\x99\x05\xcf\x88\x6a\x6b\xe1\x75\xf4\x59\xdf\x56\x48\xc5\x8e\x46\x4e\x5b\x94\x1c\x08\x6a\x2b\xd3\xaa\xd5\x1a\xe8\xf9\x01\xca\x4a\xf5\xd2\x0b\x80\x91\xf6\x78\xa3\x36\x94\x4f\xdb\x86\xaf\x32\x59\xcd\x0f\x7e\x4c\xe9\x55\x03\x4b\x69\x92\xdc\xce\xce\x67\xcd\x3c\x89\x96\x4b\xf0\x04\xd1\x9a\xcf\x59\xbd\x61\x33\x2d\xdc\x3e\x10\x3e\x81\xa9\x90\xd4\x23\x78\xe0\x9f\x5f\x64\x37\x6b\xbc\xde\x63\x9a\xa9\xd1\x1c\x5d\x1a\xd1\x0d\x78\xac\xbf\x98\x06\x4d\x30\x32\xd3\x4e\x5c\xe8\x5a\x14\x81\xdf\x8f\xdf\x59\xae\xe7\x04\x9f\x1f\xcb\x33\x34\xe4\xf4\x40\x76\xe4\x75\x57\xa9\xc5\x65\xc6\x0a\x8d\xa5\x76\xd1\x9e\x33\xc5\x26\x5f\x73\x1e\xe2\x58\x07\x4e\x78\xa2\xc2\x41\x1e\xe1\xbb\xdd\x33\xc4\xb1\x9d\xb4\x7e\x81\x0e\x54\x74\x75\xbd\x88\xb7\x96\xab\x3d\x10\xf8\xd5\x73\x59\xf1\x25\x84\xfd\xb7\x4c\x9b\xdf\x24\xbe\xc4\xb0\xb6\xaa\xce\x88\xf5\x13\xc5\x55\xce\x43\x77\xf1\x8c\xbb\x5c\x69\x11\xb9\xf3\x7f\x63\xde\xfd\x36\xfa\xbe\x2f\xb6\x27\xb5\x84\x4d\xcd\xda\xa9\xa5\xd7\x20\x4c\xbb\x12\x1e\xa5\xcf\x8f\xae\xc3\xa2\xd8\x37\xa4\xaf\xb9\x3c\x8f\x28\x6f\xec\xbc\x59\xd6\x38\x07\x62\x4b\x23\x9c\x65\x3f\xac\x1f\xf6\xc1\x1d\xbb\x00\xf8\xaf\x8e\x97\xdf\x63\xde\xca\xd3\xa4\x4b\xdf\xae\xe7\x43\x27\xc4\xb4\xc2\xd0\xe7\xa8\xbf\xdf\x63\xe0\x12\x87\x98\xa2\xef\x95\x97\x4d\xd8\x44\x69\x38\xe3\xc8\xd3\x7d\xa0\xfd\x6e\x07\x0a\xde\x80\xb2\xbe\x6d\x2e\x2e\x18\xec\x4a\x27\x91\x46\x07\xff\xbb\xf3\x7b\x91\xcb\x03\x1b\x35\xf7\x49\x05\x64\x81\xdd\x95\x54\xab\x8e\x7b\xb1\x77\x8e\x3a\x75\xe4\xaa\x08\x1f\x16\xad\x71\x77\xf7\xc7\x52\x1e\x62\x9d\xd0\x1d\x79\x13\x77\xb5\x13\x72\x47\xa0\xa6\xc7\xfc\x68\x5f\xa7\xd7\x1d\xd0\x3f\x1b\x87\x3b\x96\x38\xf4\x6a\xae\x45\xde\x50\xa7\xf8\x3b\x17\xa5\xed\x90\x45\x36\x1b\x20\xbc\x96\xbc\x06\x8b\xd8\xa7\x3c\xf2\x97\xf1\x44\x4b\xf8\x5f\x0b\xfe\x2b\x00\x00\xff\xff\xc5\x7b\xb1\x6a\x22\x07\x00\x00")

func dataA1stub_certsChefautomateupgradefromv1selftestCrtBytes() ([]byte, error) {
	return bindataRead(
		_dataA1stub_certsChefautomateupgradefromv1selftestCrt,
		"data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.crt",
	)
}

func dataA1stub_certsChefautomateupgradefromv1selftestCrt() (*asset, error) {
	bytes, err := dataA1stub_certsChefautomateupgradefromv1selftestCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.crt", size: 1826, mode: os.FileMode(0644), modTime: time.Unix(1554914043, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0xb1, 0x2b, 0x70, 0xe3, 0xf2, 0x57, 0x2e, 0xdf, 0x85, 0xbb, 0x15, 0x84, 0x2d, 0x64, 0xa9, 0x16, 0xf6, 0x5e, 0x3f, 0xaf, 0x88, 0x2f, 0x24, 0xd7, 0x17, 0xf3, 0xf5, 0x4c, 0x1d, 0xe, 0x6}}
	return a, nil
}

var _dataA1stub_certsChefautomateupgradefromv1selftestKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x97\xb7\x0e\xac\x8a\x01\x44\x7b\xbe\xe2\xf6\xc8\x22\xa7\xc2\x05\x19\x96\x9c\x59\x3a\x72\xce\x61\x81\xaf\xb7\xee\xb3\x4b\x4f\x3b\xdd\xd1\x48\xa3\xf3\xaf\xbf\xe1\x44\x59\x35\xff\xb8\x1e\xfb\xc7\x76\xd5\x90\xf5\xc5\x3f\x9a\xf8\xfd\xa7\x01\x0c\x55\xfd\x68\xac\xca\xb1\xac\xc6\xb3\xb5\xc8\x9e\x43\x6e\xf3\x38\x2c\x42\xb0\xd2\x0e\xc7\xb7\xf9\xb1\x7d\x33\x82\xf1\xef\x2e\x0a\x98\x2c\xba\xef\x13\xd6\x14\xe9\xd3\x11\xcc\xb2\xde\x63\xf0\x3f\x20\xb3\x92\xe4\x44\x57\xc3\xe1\x29\x8c\x5d\x12\x0d\xfb\x2d\x8d\x05\x2e\x8b\x08\xa1\x3e\x2c\xa1\x84\xf7\x3a\x69\xe5\xb4\x59\xd4\x5e\x0a\x86\x08\xbd\x40\x4a\xb3\xd5\xbe\x25\x94\x97\x4e\x62\xf5\x28\xd0\xb2\xbb\x4e\x68\xaa\x38\x07\xa9\x5d\xcb\xd5\xe0\x49\xe5\x0c\x5f\xb1\xd3\xb1\x4f\xe2\x1d\x0f\xc9\xf0\xd8\xa7\xd5\xc0\xa1\xfb\xbd\x1a\xba\x5d\xba\xd3\x16\x49\x23\x7f\x5f\xb9\x29\x4a\x85\x8d\x1f\xe0\x51\x02\xe1\x1b\x6e\xe4\x5e\x99\x37\x93\x38\xa7\x2b\x11\x1c\x12\xc7\x9f\xd2\xcd\xda\x21\x16\xcc\x0f\xd4\x48\xd7\x70\x7d\x9a\xd9\xd3\x13\xd4\x87\x19\xe6\x28\x63\x2d\xd0\x97\xf7\x0e\x5b\x07\xf7\x01\xa3\x32\x0e\xf3\x9e\xc0\x2a\x99\xea\x8c\x0e\x36\x99\x9a\x17\x34\x8b\x7b\x52\x64\x73\x77\xb8\xe7\x52\x5c\xb0\x31\x67\x28\x3c\xb9\x94\x23\x2d\xaf\x3b\x7b\xbd\xd3\x8f\x0a\xe9\x8c\xa4\x3e\x62\x7e\xc0\x39\xf7\x44\x21\x6a\xad\xd6\xba\x8b\xab\x40\x67\x38\x57\xf3\x10\x99\xe2\x18\x4d\xb9\x27\x39\x9a\x97\x52\x79\xda\xf2\xda\x37\x8f\x24\x64\x7c\x50\x4f\xd5\xb6\xdc\xb8\x4c\x30\x22\x76\x6b\x76\x37\x00\x8c\xc3\xf4\x08\xd4\x25\x58\x54\x02\x19\xca\xb7\x9d\xc0\xca\xbc\x3b\x91\xe0\xbe\xdd\x1c\x49\x5f\x4a\x56\x3f\x8c\x36\xdf\x1e\xd4\xb0\x85\xba\x45\x8e\x82\x28\x61\xba\xd8\xf1\xeb\xc5\x12\xaf\x85\x00\x63\x2f\xbe\x18\x9f\xbe\xc4\x1f\x4a\x37\x50\x5f\x8c\xa1\x97\x1e\xde\xfc\x54\xb4\x13\x22\x6b\x8b\xe1\xe9\x38\xc8\xe5\x4e\xf1\x9e\x53\x87\x6a\x6a\xcc\xe3\xcf\xed\x86\x34\x95\x9a\x44\xb6\x93\x11\x40\x68\xca\x6b\x99\xe6\x49\x66\x6e\x88\xb0\x16\x45\xd6\xa5\xbb\x7d\x28\x7a\x65\xa3\xc0\x74\x96\xc7\xe9\x0b\x3d\x3c\x1c\x22\xf3\xef\x94\xf8\xba\x48\xba\x66\x5f\x01\xfb\xb6\x4f\xdc\x0a\x4b\x2f\xcf\x40\x9f\x33\x69\x7d\x51\x23\x93\x1b\xb9\x1d\x98\xa1\xf2\xb2\x6c\x6e\x7e\x8c\x01\x83\x2f\x06\x3f\xa4\x13\x52\x94\x48\x9f\xd8\x49\x65\xe3\x80\x86\x2b\xa7\xc3\x3f\x31\xb3\x46\x48\x51\xf2\x01\x74\x99\x80\xda\x88\x2c\x5f\x36\xfb\x12\x50\xe8\x96\x6f\xd5\xc2\x15\x99\x37\x93\x04\x08\x1d\x83\x1c\x30\x24\x8c\x6a\x1b\xe9\xe6\x1f\x97\x35\xe3\x68\xd9\xc7\xe6\x38\x4b\xe5\x13\x92\x28\xb8\xf3\xec\x4f\x64\x01\xd6\xf9\xef\x84\xfb\x54\x92\x87\x02\xb9\xeb\xb0\x5b\x7a\x9d\xda\x6a\xe2\xad\x82\x71\xeb\x7e\xea\xc1\x3d\xee\x4b\x45\x72\xab\xd0\xad\x35\xc5\xdf\xb9\xf9\x70\x8b\xc1\x81\xac\x10\xdc\x82\x0f\xa4\xd9\xac\x5d\x22\x54\x85\x25\xe3\xbf\xba\xae\x3c\xab\x6e\xac\x55\x20\xfd\xa6\x53\x91\x38\x6a\xc7\x7f\x30\x1f\x05\xcb\x86\x6f\x45\xb5\x1b\xe0\x79\x3e\xaa\x50\xa9\xf3\x1b\x3f\x52\x0a\x3e\x91\x03\x54\x7b\x9a\xf4\x03\x5e\x97\x72\xd3\x40\x55\x84\x98\x2d\x2d\xd7\x47\xc2\x8c\x6d\xa2\xed\x93\xb5\x51\x21\x78\x09\xbd\xd2\x97\x25\xbb\x83\x67\xf9\x1b\xa7\x27\xba\x83\x09\x86\xc9\x03\x5b\x98\x72\x00\x7e\xd0\xd9\x2a\x29\x55\x17\x55\xc3\x16\x51\x32\x5d\xed\xb7\xea\x63\x79\x34\x0d\x94\x50\xf8\x93\x94\xc2\xcf\x9b\x69\xbf\xca\xa0\x34\xdf\xcf\x49\xa1\x63\x45\xd6\x97\xaf\x72\x5a\x1c\xf7\x41\xa2\x14\x48\xc7\xbe\x8a\x8a\x8d\x2a\x2c\x51\x9b\xdb\xb4\xd1\x77\xbc\xe7\x4f\xa4\xea\xa4\xd3\x1a\xb1\x6b\xda\xe7\x8b\xe5\x2b\xe4\xb9\x6f\x77\xed\xc0\xdd\x7d\xe2\x99\x20\x45\xea\xe5\xf9\xaf\x48\x71\xba\x00\xf4\x82\xca\x5f\x88\xa4\x7e\x1d\x15\x7f\x74\x28\x33\x9b\xac\xc6\xec\x79\xf1\xf9\x4d\x65\xbd\x58\x58\x3b\x64\x5b\x60\x87\x4a\x87\x54\xb3\xcb\x00\x15\xa9\xdb\x56\xe4\x90\xbc\x86\x37\x7d\x77\xd6\x07\xaa\x53\x4e\x75\xdc\x8d\x28\x5b\xf5\xc7\x0c\xb9\x56\xec\x17\xc8\x51\xa0\x96\x2a\x62\xe5\xbe\xf8\x3c\x85\xbc\x05\xb2\x98\x7f\x87\xa2\x9e\xb4\x0b\xd1\x2f\x68\x27\xe6\xd8\xa2\x66\xac\x24\xe0\xe0\x06\x30\xf1\x33\x56\x52\x0f\x1f\xb7\xe7\xf0\x71\x8f\xee\x11\xe6\x4c\x4a\xd3\x24\xec\x65\xc8\xdb\xfe\x35\xa9\xcf\x25\x9b\xbb\x5b\x17\x5b\x50\xec\x09\x44\xe6\x6c\x28\xf9\xe2\x73\x5d\xa5\x7b\x5c\xdb\x05\x4c\xe9\x61\x39\x88\x75\xd3\x9f\x66\x04\x1f\x4a\x46\xd0\x66\x5c\x91\xf8\xca\x9a\x09\xb5\x3b\x6f\xf5\xb8\x57\x1c\xc1\xbc\x8a\x73\x44\xef\x0e\x87\x22\x6f\xfc\xf0\x08\xcb\xcd\x90\x98\xbc\x9b\x8f\x05\x90\xee\x44\xcf\xf3\x05\x41\xd6\x41\xe0\x03\xb2\xbd\x5e\xef\xdf\x20\x88\xdf\x2c\xb9\xb6\x3c\x25\x5f\x31\x3d\x38\x73\x46\x7c\x3f\x0d\x67\xd8\x78\xbb\x9f\xe1\x1c\xaa\xf6\x58\x95\xa6\xe5\xd1\x3c\x09\x88\xab\xc6\x4d\x18\xa8\xd1\x98\xf0\x18\xd7\xfa\x11\x67\xa8\x3f\x49\x8d\x6b\x85\xe8\xe9\x9f\xb7\x3f\x82\xa0\xee\x0d\x07\xf2\xba\x0b\xdd\x0d\xc1\xae\x50\x91\xaf\x6b\x91\x63\x0d\xd3\x98\xf1\x2c\x03\x70\x64\xa9\xaa\x0e\x4e\x34\x8a\xc2\xe9\xde\x22\x13\x05\xa1\x13\xa6\x3f\xf8\x20\x4f\xe3\xf7\xc1\x13\x7c\x2e\xaa\xdf\x3a\x0b\xd4\x67\x5a\x0d\xe2\x07\x4e\xe3\x16\x17\xb7\x7e\xcf\xfe\xfd\xe9\xac\x0a\x90\x22\x5e\xe1\x5c\xac\x5d\x8a\xd9\xb4\xb5\x13\xca\xa0\x7c\x85\x72\x8c\x3b\xe3\x0d\x3e\xd9\x58\xaf\x77\x82\x77\x7e\x1f\xb8\xce\x30\x8b\x77\xe6\x4a\x20\x64\x2e\x5c\x0f\xfc\xe1\x9a\x9e\xc5\x7f\x34\x60\xb7\x13\xf5\xd5\xb3\x6b\x42\xda\x34\x2f\xe9\xf1\x4d\x11\x07\x56\x37\x3b\x81\x5b\x93\xe5\x8b\xd2\x4e\x84\x81\xbb\x2d\x31\x15\xa1\x3d\x56\x08\x3d\xd1\xe5\x02\xce\x27\x17\xc3\xe6\x7e\x19\x03\x0d\xf8\x22\xd9\x4f\x44\x61\x9f\x7e\x50\x8c\x84\xfc\x53\x64\xc0\x7c\x09\x76\x38\xb7\xd3\xea\x02\xe7\x4d\x09\x56\xf5\xdd\xf2\x5e\x3f\xb0\x70\xff\x66\x4b\xd6\x73\x51\xa8\x10\x57\xe7\x42\x84\xcd\xe2\x27\xf0\xec\x51\xf8\xfd\x8c\x3e\xd4\xfa\x35\x6e\x1e\xa2\x5e\xdf\x25\xae\x30\x95\x6f\x8d\x08\x28\x6d\xac\xeb\x0e\x0c\x2d\x3d\x07\x5e\x8f\x30\x68\x5d\x3a\x51\xa0\x1b\x0f\x35\xea\xab\xc0\xab\xb5\x3f\x14\x60\x38\xf3\x91\x8b\xe7\xb2\x9d\x95\x06\x1f\xff\x23\x6c\xbb\x5c\x37\xbb\x65\xc4\xd5\xd0\xa8\x9e\x0d\x19\xd5\x73\xc7\x8d\x54\x70\x49\x69\x32\xaa\x81\x63\xaa\x17\x13\x32\x87\x29\x8f\x2c\xe0\x0a\xe6\x52\x62\x44\xc0\xd1\xa9\xe0\x73\x36\xa9\x39\x44\xa7\xca\x11\x3d\xbe\xb6\x78\x7a\x8c\x6e\x7d\x90\xb1\xf5\x5e\xe3\x9c\xb7\x91\xba\x24\x7a\x03\x6b\xef\xe3\x81\x76\xd5\x2b\x0b\x07\x52\x22\x30\xd1\x18\x03\xfd\x08\x84\xcb\x8a\xf8\x65\x62\x53\xf1\x5b\xcc\x0c\xdf\x02\xb2\x2b\xde\xef\xaa\x8d\x31\x0f\x87\x1b\x66\xe3\x9b\x72\xce\xcb\xf1\xc2\x7b\x28\x95\x25\xb0\x53\xcf\xe2\x22\x6c\x87\x14\x80\x12\x4d\x93\x50\xa5\x39\x35\x87\xc6\xd2\x41\xec\x78\x3a\x1b\xfb\x16\x21\x92\x48\x6f\xfa\xc1\x61\x2d\xda\x99\x3c\xe1\x92\x58\x6a\xe5\xfc\xa8\x7a\x12\xbf\x15\x57\x7c\x9b\x5f\x51\xe8\x16\xab\xb1\x40\x41\x97\x54\x3a\xc6\x0c\x5c\xb3\x1c\x6a\x68\x20\x6b\xd5\xa6\xc5\x24\x23\xd2\x88\x25\x82\xc1\xc4\xc1\xc2\xc9\x83\x80\x14\x93\x96\xce\x47\x0b\xc4\xcd\x4b\x3a\x76\x6f\xef\x67\x0c\xa6\x7a\xfc\xad\x80\x03\xcb\x53\xde\xba\x37\x53\xa7\x1d\xd9\xa8\x7e\xdb\x23\xd1\x13\xbb\x25\x29\x73\xb1\x6a\xa5\xa2\x74\xa8\x6b\xe2\xea\x14\x5a\xed\x7f\x01\xb3\x4e\x3b\xb4\x85\x7e\x0c\x29\x9f\x84\x33\xd8\x23\x80\xb8\x1d\x76\x83\x25\xfa\x69\xd2\x60\xf2\xac\xe2\xc6\x5d\x09\x4f\xd1\x12\xf7\xd9\x99\x5a\xf3\x9e\x4b\xb3\x90\x6f\xbf\xda\xb4\xf8\x53\xae\xf6\x92\xfa\x87\x95\xc9\x5b\x55\xf6\x12\xd3\x71\x28\x46\x81\x2c\x5f\x1e\x33\xf4\xbb\x18\x23\x27\xd6\x04\x3d\x43\x61\x32\x55\x3c\xde\xfa\xe4\xb3\xfb\xcc\x87\xd0\x52\x3e\x68\x8b\x5d\x53\x2f\x1b\x88\x93\xf8\xf4\xcb\x94\x93\x24\x8b\x61\xce\x17\x5f\xf7\xa7\x02\xcd\x57\xa6\x41\x54\xb1\x09\xa6\x5f\x29\xfb\x4c\x13\x1a\xdc\x37\x72\xf4\xab\xc2\xc3\xe9\x6b\x44\x5d\x0b\x7e\x71\x19\x46\xf5\x04\xeb\x9a\x21\x2a\xac\x7c\x0a\x2e\x47\x5d\x48\xbf\x9a\x2e\x73\xc6\x80\xb0\xb0\x36\xb1\x7e\x8b\x71\x93\xe8\xa5\x00\x73\x3d\xe4\x0f\x2b\x42\x86\xcb\xba\x2b\x12\x29\x8c\x3d\x48\xa4\x99\xed\x9c\xf1\xcc\x7b\x53\xef\x9b\x8b\x0f\x08\xc5\x7b\x67\xda\xd8\x0c\xc3\xde\x33\x80\x04\x89\x15\x5a\x60\x3c\x91\x5d\x8c\x89\xc8\x64\xc9\x8f\x0f\x9a\x7a\x87\xcb\x95\x8e\x26\x44\x5f\x01\x8c\x3f\x66\xdf\x66\x92\xc9\x5c\x99\x76\xec\xe4\xab\x22\x76\xb0\x0c\x86\x56\xe0\xd2\x77\xea\x81\xda\xc1\x75\xf5\xef\xbd\x39\xac\x52\xb4\x22\x9a\x54\xe6\x08\x76\x4b\x7e\x26\x07\x71\xb8\x66\xdb\x15\x4d\xfd\xdc\xce\x32\x1c\x9d\x21\x9e\x14\xc1\x04\xb3\x35\x5c\x04\x18\x11\xbc\x61\x44\xc2\x0b\x64\xf1\x91\x95\x26\x95\x1b\x64\x06\x1d\x1f\x84\x53\x92\xc2\x9b\xd4\xb2\x37\xe1\x72\x28\x75\xcb\x53\x56\x28\xa1\xb4\x7c\x85\x32\x7d\x91\x7f\xb9\x15\xc9\xaa\xb2\xbc\x5f\xbe\x3e\x27\xf7\xf0\x91\x1b\x28\x86\x83\x05\x37\xd8\x7f\x14\x1f\x45\xe1\x7e\x61\x65\x4f\xf1\x8d\x0b\x16\x1e\x9b\x6f\x95\x8f\xce\x45\x6f\x94\x49\x5c\x26\x59\xad\x53\xb3\x7e\xdf\xea\x70\xf3\x5d\x45\x7c\x53\x44\x67\x95\x85\x08\x10\x3f\x3a\x4b\xaa\xd4\x03\x1f\xb2\x2c\xd8\x85\x45\xae\x2b\x93\xdd\x84\x48\x9b\xfa\xfd\x92\xdc\xe4\x43\xe2\x5a\x7a\xb8\x41\x0d\xf2\x11\x9c\xe9\x0a\x5d\x34\xc3\x49\x56\x9f\x48\x26\x77\x0d\x3d\x02\x90\x47\x2b\x7b\xe3\xf9\x5d\x6f\xca\x83\x19\xa4\x35\x55\x81\xde\x25\xde\xbd\x4a\x85\xec\x75\x29\x4a\x7e\x54\x5c\x93\xb9\x95\x3d\x76\x3e\xa7\x32\xa4\x05\x90\x33\x37\x4a\x45\x7c\xc1\x50\x8c\xf0\x1e\xe8\xf3\x41\x3b\x39\x35\xae\xb6\x1e\x3e\x8e\x01\x4c\xc0\x0d\x8b\x29\x34\x3d\x2b\xdf\x29\xd3\x20\x64\x67\x95\x63\xa5\x28\x9c\x9e\x13\x32\xd9\xd7\xac\x47\x0f\xd3\xbf\x36\xc2\x2c\xf0\x67\xa0\x9c\x0b\xe0\x4a\x2d\x79\x2b\x1e\x3d\x89\xfd\xb4\x3d\xa6\xf7\xda\x71\xac\xcb\x4a\x76\xd9\x33\x62\x7c\xca\xef\xf0\xe8\xc7\x3b\x59\xed\x09\x6d\xaa\xf7\x1b\xe4\xb2\x19\x7f\xac\x8b\x32\x6a\x71\xaf\xbb\x13\x06\xe4\x43\x9c\x6e\x2d\x57\x16\xb6\x82\x2e\x62\xed\xd7\xa1\x12\xba\x82\x52\x04\x3f\x6c\xb6\xdd\x48\xfe\xc0\x3f\x50\xd4\x2f\x5f\xea\x68\x94\x31\x14\xfc\x07\xeb\xcd\x53\x6e\x46\x72\xe6\xd8\xaa\x41\x15\x00\x92\x75\x93\x19\x69\x93\x35\x28\xda\x8f\xa1\x7d\xb2\x7a\xec\xcd\x3e\xff\x9b\x52\x11\xc4\x9e\xac\x7d\xdc\x9b\x56\xc2\x04\xcc\x3e\x6b\x8c\x4f\xef\x47\xb6\xf9\x6a\x00\x4b\x5e\xb0\x23\xba\x4b\x5e\x00\x64\xbc\xf8\x78\xda\xf2\x36\x7d\x8f\x10\x82\x1f\xdd\x21\xc1\x93\xa6\x57\x18\x41\xc4\x4d\xe9\x79\xf5\x91\xea\x45\x86\xbe\x28\x25\x83\x1a\xfb\x90\x6c\x69\x78\x3c\x2e\x0a\x90\x77\x9d\x63\xe5\x97\x80\xcc\x50\x92\x2a\xd0\x22\x5e\x1b\xf3\xd2\x81\xfe\x99\xc0\xcf\x10\x42\x59\x90\x7a\xcc\x66\x23\xa0\x7f\x1e\x41\xa0\xc8\xb0\xb7\xf9\x17\xe8\x9f\x3a\x11\x04\xc6\xd9\x22\x1b\xdd\xab\xff\x06\xfe\x51\x0e\xd1\x14\xfe\xbf\x8a\xfc\x27\x00\x00\xff\xff\xcb\x40\x13\x44\xab\x0c\x00\x00")

func dataA1stub_certsChefautomateupgradefromv1selftestKeyBytes() ([]byte, error) {
	return bindataRead(
		_dataA1stub_certsChefautomateupgradefromv1selftestKey,
		"data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.key",
	)
}

func dataA1stub_certsChefautomateupgradefromv1selftestKey() (*asset, error) {
	bytes, err := dataA1stub_certsChefautomateupgradefromv1selftestKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.key", size: 3243, mode: os.FileMode(0644), modTime: time.Unix(1554914043, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4, 0x32, 0x66, 0x33, 0x9a, 0xb6, 0xc1, 0xae, 0x6e, 0x1a, 0x57, 0xe, 0xe2, 0x12, 0x25, 0xed, 0x8d, 0xc, 0x2d, 0x1c, 0x84, 0xac, 0xbd, 0xa4, 0x93, 0x9c, 0x43, 0xe0, 0x2d, 0x9b, 0xdf, 0x18}}
	return a, nil
}

var _dataBindsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xd1\x6e\xdb\x30\x0c\x7c\xef\x57\xe4\x07\xf4\x11\x1b\x5a\x0c\x01\xb6\x76\x2b\xb6\xe7\x81\x91\x69\x5b\xa8\x2c\x79\x92\xdc\xa6\xfd\xfa\x21\x4b\x13\x59\xd6\x59\x76\xd2\x87\xbd\xb5\x0a\x79\x77\x3e\xd1\x24\x61\xea\x7b\xad\x24\x05\x65\x8d\x17\xda\x52\x25\x1a\x36\x9b\xcf\xdb\xfb\xdb\xed\xfd\x97\xdf\xdf\x1e\x6e\xef\x36\x3e\x38\x25\xc3\x4d\x12\xe9\xd9\x3d\x2b\xc9\x9b\xc7\xbb\x1f\xbf\xb6\x8f\x77\xb7\x1b\x1a\x82\xed\x28\xb0\xe8\x1b\xd1\x50\xe0\x17\x7a\xdd\x48\x76\x4c\xfa\x1c\xcb\xcf\x6c\xc2\xf9\xbf\xbe\x11\x5e\x55\x2c\xc9\x9d\x8e\x30\x03\x94\x32\x84\xd6\x40\x0d\xed\xdb\xf9\xf8\xac\xa8\xe2\xfd\x1a\x79\xb9\xa0\x4d\x60\xea\x7c\x94\x97\xb0\xce\xe9\x7a\xbb\xca\x1b\xe4\x46\x02\x36\x43\x77\xc4\xdd\x0d\x4a\x57\xec\x04\xf5\x0a\xb0\x9e\x7e\xed\xb8\x93\x24\x5b\xae\xe2\x4f\x9d\x32\xca\x42\x7d\xc0\x0d\xcf\xde\x2b\x6b\xc6\x02\x73\xfa\xb5\x3a\x45\xef\xec\xfe\xb5\xa0\x96\x7a\x55\x4a\x5c\xc5\x13\x9f\xb8\x18\x2e\xbd\xd8\x59\xfb\xe4\x5b\xd6\x75\xf9\xd6\xf0\x35\x01\x94\x25\x3e\xd3\x28\xb3\x07\x5c\x09\xc8\xf8\xd4\x4a\xc1\x4e\xb6\x3c\x3a\x65\x7f\xd2\x05\xa0\x1f\xbe\xff\xdc\x3e\xdc\x7f\xfa\x1a\xc3\xe7\x63\x13\xb1\x8e\x35\xed\xb9\xba\x99\x90\xef\x54\xed\xac\x0f\x1f\xb2\x67\x04\xb3\xe4\x4f\x7c\xdc\xcb\x3c\x3a\xe1\x03\x93\xae\x54\xfc\x2e\x63\x9d\x9f\x31\x1e\x7a\x5a\x71\xaf\xed\x6b\x37\x6e\x83\x45\x23\x0e\x9d\xeb\x6a\xc3\x0f\xc9\x45\x74\xd6\xe4\x83\x92\x9e\xc9\xc9\x36\xf2\xec\x48\x3e\x0d\x7d\xfe\x78\x69\x78\x19\x39\x9a\x9e\xcb\x4f\x70\x60\x4e\xb9\x1e\x4f\x51\xf1\x46\xd0\xd8\x48\x9b\x75\xda\x4b\xa5\xed\x7a\xad\xc8\x48\x1e\x1d\x99\x5a\x35\xa2\x6b\xba\x78\x35\x15\x05\x12\x35\x73\x15\x4f\xf2\xfb\x3b\x0e\xb5\x24\x4a\x99\xda\xd1\xb1\x4d\x8d\xce\x1a\xf6\x31\x4b\x2b\xc9\xc6\xb3\x90\xd6\x04\x67\xe3\x18\xd0\x56\x92\x16\x83\xe7\xd8\x75\x8d\xad\xb8\x23\x43\x4d\x72\x16\x54\x9d\x3d\xb2\x67\xe9\x38\xf8\xf9\xe9\x95\xfa\x57\x76\xf9\xdf\x2a\xb0\x23\x7d\x70\xc9\x81\xea\xcf\x3b\x72\xde\x57\xf0\x04\xce\x5e\xc7\x41\xc5\xbf\x5f\xac\x7b\xaa\xb5\x7d\x79\x47\x98\x1d\x39\xa9\xbc\xf2\xa3\x1c\x87\x5c\xb1\x60\x47\xaf\x14\x78\xdf\xac\x0f\x8d\x63\xff\x47\xc3\x84\x32\x79\x4c\x5e\x50\xe0\x6c\xc7\xa1\xe5\xc1\x2f\x17\xf6\x4c\xff\x19\x41\x94\x35\x0d\x0b\x63\x7a\x72\x09\xb9\x23\xe7\x80\x83\x28\x76\xb3\x99\xeb\x58\x8e\x20\xd7\x37\xba\x29\x10\x62\x4d\x9b\x1a\x0c\x99\x6c\x64\x97\xca\x99\xa4\x43\x86\xbc\xef\x2c\xed\xae\x0b\xe3\xab\xb8\x61\xa3\xce\x01\xd7\xba\xa4\x6d\x20\x95\xe3\xd7\x7f\xd4\x55\xd9\x67\x60\xb0\x33\x21\x48\xec\x4f\xde\x84\xc1\xfc\x88\x6b\x0f\x4a\x40\xc0\x79\x27\xbf\x64\x37\x5f\x39\x2e\x56\x58\x9b\xeb\x40\x6a\x81\xad\x0b\x53\x14\x9a\x03\x60\x20\x5b\x3e\xc0\x4a\x9e\x4f\xcc\x41\xe9\xe7\x6a\xc9\x15\xa0\xf0\x79\x51\xa8\x25\xcf\x0e\xf5\xa4\xf6\x27\x00\xf3\x14\x25\x11\x68\x8e\x5f\xd8\x15\xb2\x0a\x40\x98\x98\x3b\xd9\x17\xfe\x7f\x9b\x98\x2a\x2a\x5d\xf2\x24\x14\x3d\xdf\xdc\x02\x74\x69\xd7\x9d\xc3\x81\x9c\xf9\x72\xb5\xe6\xd3\x41\xba\x46\x01\x10\xc4\x85\x4c\x5d\x22\xbb\xfe\xcb\x49\x56\x66\x88\x1e\xcb\x44\x8b\xe4\x47\x8b\x1c\xa3\x22\x7e\x00\x56\x22\x47\xf1\x08\x76\xba\x09\x5f\x5a\x55\xd3\x7c\xcc\x91\xac\xa6\x80\x63\xee\xbb\x13\x24\x4c\xc1\x10\x61\x52\x87\x1f\x28\x26\x40\x9f\x42\x43\x72\xa7\x48\x8b\xd3\xdb\x56\x8a\xfc\x1b\x00\x00\xff\xff\xfc\x22\x26\x4e\x51\x14\x00\x00")

func dataBindsTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataBindsTxt,
		"data/binds.txt",
	)
}

func dataBindsTxt() (*asset, error) {
	bytes, err := dataBindsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/binds.txt", size: 5201, mode: os.FileMode(0644), modTime: time.Unix(1583185370, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x82, 0xc8, 0x40, 0x97, 0xe5, 0xb6, 0xc8, 0x76, 0x3d, 0x29, 0x62, 0xc4, 0xb9, 0x2a, 0x53, 0x58, 0xcc, 0x34, 0xbb, 0xc8, 0xb2, 0x4a, 0x83, 0x54, 0xf5, 0x2f, 0x87, 0x59, 0x4, 0x9a, 0x29, 0xc2}}
	return a, nil
}

var _dataInitConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdc\x36\x10\xbd\xeb\x57\x3c\x68\x0f\x7b\xb1\xb5\xe8\x35\x68\x0a\x04\x6e\x0c\xa3\x35\x0a\xa3\xeb\x20\x28\x1c\xc3\x98\x25\x47\x2b\x22\x5c\x52\x26\xa9\x75\x54\xc3\xff\xbd\x18\x4a\xdc\xf5\xc6\x29\x90\x9b\x34\x9c\x79\x33\xef\xcd\xc7\x02\xb7\x9d\x89\x30\x11\x04\xcd\x2d\x0d\x36\xe1\xa2\xe3\x16\x1f\x86\xe4\x77\x94\x18\xca\xbb\xd6\x6c\x87\x40\xc9\x78\x87\xd6\x58\x6e\xf0\x8f\x1f\xa0\xc8\x21\x0c\xae\x5a\x60\xa9\x3a\x6e\xcf\xa9\x04\x68\xee\xad\x1f\x97\x78\x32\xa9\x43\x12\xf4\x09\x22\xc7\x82\x9c\x86\x49\x88\x9d\x1f\xac\xae\x16\x88\x83\x52\x1c\x63\x3b\x58\x3b\x42\x05\x16\x04\x82\xe3\xa7\xef\xca\x30\x2e\x26\x72\x8a\x27\xd8\x52\x6a\xe4\x94\x8c\xdb\xc6\xa6\xaa\xee\xb6\xd6\x6f\xc8\x36\xfb\x5f\xee\x2b\x40\x78\x31\xf8\x5b\xe2\xe0\xc8\x62\x82\x7f\x1c\xc8\x9a\xd6\xb0\x86\xf6\x3b\x32\x0e\x8e\x76\xdc\x64\xef\xcf\x1d\x3b\xa4\x8e\x41\x7d\x6f\x8d\x9a\xc8\x9a\x38\x93\x61\x8d\xd1\x0f\x73\xd1\xd8\x30\x68\x63\x19\xc9\x83\x72\xf1\x58\x76\x29\xf5\xf1\xdd\x6a\xf5\x6b\xfb\xa8\xdd\x6f\xab\x65\xc6\x4c\x1e\xd6\x6f\x8d\x93\x0c\x62\xc7\x7b\xd4\xcf\xcf\x68\x2e\xe5\xfb\xe5\xa5\xae\xa6\x3a\xaf\xd7\xb8\xe0\x90\x4c\x2b\x69\x39\xa2\xf5\x01\x1f\xe7\xc2\xcf\x2f\x49\x19\xb7\xc5\x9a\xc3\xde\x28\x8e\x15\xf0\xfc\x7c\x8e\xe6\xf6\x7a\xfd\x99\x82\x33\x6e\xfb\xf2\x52\x01\x77\x47\xf2\x4d\x1b\xbc\x4b\xec\xf4\x43\xb2\xf1\x5e\xa4\x28\x62\x48\x22\x75\x4c\x94\xf3\x08\x63\xeb\x49\x63\x43\x56\xd4\x0d\x28\xe1\x4d\x8e\x14\x7f\x29\xbb\x9e\x0a\x9f\xdf\xa4\x5c\x21\x50\x67\x0a\xaf\xf1\xff\x5e\x7f\xc0\x57\x1e\x7f\x0a\x5b\xfc\xde\x40\xff\xc9\x63\x41\x16\xa2\xa6\x85\x63\x34\x37\xc1\x7f\x1b\xaf\x7c\x4c\xa8\xeb\x89\xf0\x91\x6f\x2f\x6f\x85\x67\x76\x3c\x4c\x45\x36\x76\x12\x36\x2b\x7f\xc4\x11\xf9\xe5\xb5\xf7\x99\xe0\xe1\xf1\xc6\x67\x6a\x6f\x92\x7f\x8a\x1c\x4a\x72\x60\x88\xd2\x9d\x1d\x9f\xe0\x66\x17\xc1\x95\x58\x76\xfa\x07\x28\x37\x14\xe3\x93\x0f\xfa\x88\xd4\x17\xcb\x6b\xa4\x83\xdb\x0f\xd1\x9a\xbf\x7c\xf6\x9a\x11\x9c\x7f\xc8\x12\xe0\x3d\xee\x04\x62\x9d\x82\x70\xff\xc3\x1b\x77\x70\x45\xfd\xa5\x3e\xfb\x52\xd7\x02\x78\xff\x1d\xe2\xf4\x55\x55\x0b\xfc\x9e\x67\x7d\xc7\x4e\xf6\x2a\xcf\xdb\xe9\xf2\x37\xd5\x9d\x3e\xb8\xcc\x7b\x76\x6a\x69\xe2\x5e\x95\x56\x5c\xd1\xc6\x24\x4a\x50\x1d\x39\xc7\x56\xb6\x21\xef\xb0\xb5\xe8\x48\xa6\x90\x54\x92\x89\xd8\x35\x73\xc0\x05\x39\x59\xad\xa5\xe6\xfd\xf2\x0c\x4b\x35\x84\xc0\x2e\x2d\xcf\xe0\x03\x96\xb2\x68\x7d\x3e\x00\xcb\x69\x30\x67\xd4\x59\xb6\x8b\xf9\xb7\xb4\x75\xe8\xb7\x81\x34\x3f\xc4\x14\x28\xf1\x76\x2c\x7e\x9f\x26\xfb\xba\x98\x8b\xff\x91\xc5\x43\x1a\xfb\x43\x5f\x8f\x8a\xdc\x8a\x35\xef\xec\x02\xd7\x46\xb1\x8b\x8c\x0b\xef\x52\xf0\xf6\x7f\xc5\xb2\x93\xdf\x83\x9a\xfc\x8a\x62\x6f\xcd\xaf\x65\x93\x4d\xca\x97\x6f\xed\xdb\xf4\x44\x81\xd1\x07\xbf\x37\x9a\x35\xe6\x40\x24\xff\x95\x1d\x02\x3f\x0e\x26\xb0\x16\x61\xc3\xe0\x4e\xcf\x65\x73\x40\x93\xf3\x4b\x0e\x64\xa3\x17\x75\x23\xa7\x72\x98\x19\xf5\xe9\xe1\x2e\xf8\x72\x02\xc7\x1a\xca\xef\x76\x54\x96\xb5\xbc\xc9\xc2\x8a\x06\xa7\xc7\x79\x56\x60\x4a\xb5\x39\x2a\x31\x55\xb7\xe1\x94\x38\x60\xc7\x9c\x72\x5a\xc7\xac\x23\x7c\x5b\x2d\xe4\xaa\x06\xf4\x32\x0e\x6a\xb0\x14\xca\x84\x4c\x0a\xe2\xd2\x07\x68\x4e\x64\x6c\x44\x64\x7e\x57\x2d\xaa\x05\xca\xa9\x2d\x65\x37\x42\xa2\x31\x7e\xa5\xbd\x8a\xab\x93\x1e\xac\xaa\x45\x75\xc7\x96\x62\x32\x2a\x32\x05\xd5\x65\xb1\xc7\xd8\x84\xc1\x25\xb3\x63\x11\xbd\x63\xea\xa3\xf9\xf7\xd0\xf3\x8f\xeb\x2b\xa6\x7e\x2d\x16\xe9\xf7\x7f\x01\x00\x00\xff\xff\xa7\xc3\x05\x67\x21\x07\x00\x00")

func dataInitConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_dataInitConfigToml,
		"data/init-config.toml",
	)
}

func dataInitConfigToml() (*asset, error) {
	bytes, err := dataInitConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/init-config.toml", size: 1825, mode: os.FileMode(0644), modTime: time.Unix(1575417674, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0x21, 0x9c, 0x73, 0xdf, 0xb0, 0xfd, 0xe7, 0xfc, 0xc5, 0xcb, 0xbf, 0x26, 0xc0, 0x6, 0x93, 0xf2, 0x24, 0x9a, 0x96, 0x67, 0x86, 0xa2, 0xae, 0x4e, 0x7c, 0xa0, 0xa8, 0xfd, 0x6, 0xcd, 0xce}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/a1_elasticsearch_mappings/compliance-template.json": dataA1_elasticsearch_mappingsComplianceTemplateJson,
	"data/a1_elasticsearch_mappings/insights-template.json":   dataA1_elasticsearch_mappingsInsightsTemplateJson,
	"data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.crl": dataA1stub_certsChefautomateupgradefromv1selftestCrl,
	"data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.crt": dataA1stub_certsChefautomateupgradefromv1selftestCrt,
	"data/a1stub_certs/ChefAutomateUpgradeFromv1SelfTest.key": dataA1stub_certsChefautomateupgradefromv1selftestKey,
	"data/binds.txt":        dataBindsTxt,
	"data/init-config.toml": dataInitConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"a1_elasticsearch_mappings": &bintree{nil, map[string]*bintree{
			"compliance-template.json": &bintree{dataA1_elasticsearch_mappingsComplianceTemplateJson, map[string]*bintree{}},
			"insights-template.json":   &bintree{dataA1_elasticsearch_mappingsInsightsTemplateJson, map[string]*bintree{}},
		}},
		"a1stub_certs": &bintree{nil, map[string]*bintree{
			"ChefAutomateUpgradeFromv1SelfTest.crl": &bintree{dataA1stub_certsChefautomateupgradefromv1selftestCrl, map[string]*bintree{}},
			"ChefAutomateUpgradeFromv1SelfTest.crt": &bintree{dataA1stub_certsChefautomateupgradefromv1selftestCrt, map[string]*bintree{}},
			"ChefAutomateUpgradeFromv1SelfTest.key": &bintree{dataA1stub_certsChefautomateupgradefromv1selftestKey, map[string]*bintree{}},
		}},
		"binds.txt":        &bintree{dataBindsTxt, map[string]*bintree{}},
		"init-config.toml": &bintree{dataInitConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
