// Code generated by go-bindata.
// sources:
// policy/authz.rego
// policy/common.rego
// policy/introspection.rego
// DO NOT EDIT!

package opa

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _policyAuthzRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x51\x6e\xab\x3a\x10\xfd\x8e\x57\x31\x8f\xaf\x50\xa1\x2c\xa0\x12\x2b\x41\x08\x39\x30\x79\x71\xaf\xc1\xc8\x36\xad\xda\x2a\x7b\xbf\xb2\xc7\x76\xa0\x21\x25\x91\xee\x17\xcc\xf1\x99\x39\xc7\xc3\xd8\x8c\xbc\xfd\xc3\xff\x47\xe0\x93\x3d\x7f\x31\x26\xfa\x51\x69\x0b\x1d\xb7\xfc\xd0\xaa\xbe\x57\xc3\x02\x1a\x95\x14\xad\x40\xb3\x00\xb5\x92\x68\x18\xeb\xf0\xc4\x27\x69\x7d\x25\xa5\xc5\x17\x76\x50\xc2\x89\x4b\x83\x8c\x9d\xb9\x69\x7a\xec\x8f\xa8\xab\x51\xc9\x46\x74\x35\x7c\xb3\x9d\x7b\x35\xd3\x11\x5e\x4b\x88\x85\xe3\xf2\x81\xd8\xa6\x6a\x6a\xb6\x13\xc3\x38\xd9\xc8\xf4\xc1\xc1\x4c\xc7\x37\x6c\x2d\xad\x93\xd1\x88\x35\x3d\xb7\xed\x19\xcd\x3e\xa5\x15\x10\x94\x72\x76\x21\x2f\x1a\x8d\x9a\x74\x8b\x55\xd0\x2b\xc0\x58\x6e\xb1\xc7\xc1\x3a\x75\xef\xee\x8a\x44\xf6\xaa\xd1\x44\x33\xd5\xa2\xc6\x21\x66\x2d\x3c\x46\x70\x69\x32\xc1\x73\x1f\x11\xf3\xa6\x07\xd5\x7c\x08\xd9\xb5\x5c\x77\x7b\x9e\x3b\x7b\xad\x1a\x2c\x17\x83\xd9\xf3\x02\xb2\x97\x2c\x87\x32\x76\xfb\xc2\x18\x6f\xad\x50\xc3\x4c\xc4\x15\x56\x1a\x3b\x9f\x3a\x2f\x16\x60\xd7\x64\x57\x81\xc2\x8d\x12\x25\xcc\x17\xf7\x66\x94\xc2\x86\x42\x05\x64\xaf\x59\x5e\x00\x61\x2e\xc9\xc5\xf9\xb2\xdc\xbe\x32\xa8\xdf\x85\xdb\x6e\xf6\x92\xd5\x05\x5c\xe3\xa6\x80\xa6\x76\x0a\x56\x4f\x78\x37\xcb\x7e\x8e\x2b\xb9\x84\x3e\x90\x9e\xbd\x64\x05\xbc\xa3\x3e\xfe\x94\xf6\xd8\xbd\xf4\x45\x56\xf3\x10\xbf\x2e\xa0\xb9\x2e\xbb\xc1\x23\xca\x63\x63\x47\xdc\xe7\x86\x8e\x72\x68\xe4\x6e\xbe\xa0\x9b\x34\x02\xe7\xc2\x84\xa4\xa3\xb1\xed\xf0\x89\x23\xa0\x24\x42\x09\xee\xd1\x88\x8e\xed\xfc\x4d\x51\x85\x70\x6e\x36\x92\x08\xd9\xb0\x3e\x63\x26\xd7\xa3\x56\xee\xec\x57\x55\x78\xa1\x23\x7f\xc7\xbf\x56\x6f\xcf\x75\x35\x14\xa5\xb6\xc6\xc0\x97\xa0\xf7\x64\xd4\xc5\x79\xa2\xcc\x18\x3e\xf5\xc2\xd8\x6a\x02\x5c\x69\xc9\x5f\x59\x42\xb8\x32\x5a\x35\x18\xdb\x70\x29\xe3\x26\xcd\xd2\x03\x35\x27\xad\x3d\x23\xf2\xdf\xa6\x08\xfc\xac\x7f\xd3\x02\xdf\x71\xbf\x37\x2f\x57\x55\x78\x3a\x6d\x7c\x00\x62\x3c\xf7\x09\x28\x87\xed\x6e\xff\x24\x84\x6d\xdd\xe8\xc4\xfa\x7d\xb8\xfd\xb5\x27\xa5\xfa\x70\x26\xc3\x6e\x32\x0f\x64\xe1\x66\xf2\x94\x0e\x87\xcf\x39\xc3\xc5\x0b\xc2\xec\x0f\xf8\xcd\x76\xbe\x80\xbb\x74\x2d\x38\x66\x12\xc1\x2e\x4d\x6d\x78\xd6\x6b\xba\xbf\x6d\xe7\xd1\xa9\x0f\xae\xc5\x86\x64\xd8\xc8\xbf\x52\xbc\xb6\x61\x55\xf5\x5e\x13\x52\xab\xd6\xec\xb2\x0b\xfb\x1b\x00\x00\xff\xff\xa3\x58\xea\x7b\xb2\x08\x00\x00")

func policyAuthzRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyAuthzRego,
		"policy/authz.rego",
	)
}

func policyAuthzRego() (*asset, error) {
	bytes, err := policyAuthzRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/authz.rego", size: 2226, mode: os.FileMode(420), modTime: time.Unix(1587422027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyCommonRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4f\x6f\x1b\xb7\x13\x3d\x9b\x9f\x62\x7e\xbb\x01\x24\x19\x6b\xe9\xd7\x5c\x8a\x2e\xaa\x83\x91\xf4\x52\x04\x69\x90\x18\xbd\x04\x81\x30\xcb\x1d\x69\x59\xaf\x48\x82\x33\x94\xac\x1a\xf6\x67\x2f\xc8\xd5\xca\x7f\xd2\x22\x4e\xab\x93\xc8\x9d\xf7\x1e\xe7\xcd\x23\x4b\xf8\x80\xfa\x1a\x37\x04\xda\x6d\xb7\xce\x82\x76\x56\xd0\x58\x86\x75\xb4\x5a\x8c\xb3\x0c\x68\x5b\x08\xb1\x27\x06\xe9\x50\x00\x03\x01\x77\x18\xa8\x85\x86\x64\x4f\x64\x61\xf7\x43\x2e\xda\xbd\x56\x25\xb8\x35\xb8\x18\x20\xd0\xc6\x41\xef\x36\x46\x2b\xff\x44\x41\x29\xed\x2c\xcb\x0a\xfb\x7e\xe5\x83\xfb\x83\xb4\x30\x2c\xa1\xb8\xbf\xbf\x7c\xf7\xee\xe2\xc3\xc7\xdf\x7e\xfd\xe5\xcd\xd5\xa7\xfb\xfb\x42\xa9\x52\x95\xf0\x3b\x06\x83\x4d\x4f\x40\x37\x1e\x2d\x1b\x67\x55\xa9\x94\x75\xab\xdd\xf1\x03\x4f\x71\x06\xb7\xea\x6c\x3c\xf8\x14\x2b\x28\x5e\xdd\x16\x33\x58\x2e\x61\x8d\x3d\x93\xba\x53\xea\x79\xb5\xb1\x2d\xdd\xb8\xf5\x43\xf1\xcf\xf0\x78\xeb\xae\x98\x25\x54\x09\x6f\x69\x6d\x6c\xee\x9c\x4e\x8e\xc0\x24\x9f\xa5\x9d\xc0\xbe\x33\xba\x83\x40\x12\x83\x65\x30\xc2\xb0\xc3\x3e\x12\xec\x0c\x66\x84\x8b\xe2\xa3\xc0\x28\xae\xca\x11\x4a\xed\x64\xae\x4a\x78\xef\x84\x6a\xd0\x31\x04\xb2\xd2\x1f\x2a\x70\xb6\x3f\x0c\x9d\xb6\x83\xa6\xb3\x74\x82\xc3\x9e\xe0\xda\xba\x7d\x0d\xaf\x6e\xf1\x75\x1d\x99\x82\xc5\x2d\xdd\xcd\xd5\x80\x98\xba\x60\x36\x33\x58\xc2\xa8\x91\x1a\x65\xdf\x1b\x99\x1a\xeb\xa3\xcc\x39\x36\xd9\xee\xcf\xab\x2f\x15\x14\x75\x51\xc1\xe7\x22\xb1\x14\x15\xac\x2a\x18\xf9\xbe\xcc\xd4\xd9\x89\xa1\x5e\x42\x20\xdf\xa3\xa6\xcc\x9e\xdd\x7a\xac\x5d\x3c\xe0\xb2\x63\x7b\xd3\xb7\x1a\x43\x7b\xb4\x99\x6c\xcb\x7b\x23\x5d\x36\xb5\x3e\x1f\x5d\x7d\xd3\x91\xbe\x1e\xd2\x64\x04\x5a\x47\x0c\xd6\x09\x90\x6d\x21\x55\xe7\x52\xb8\x7c\xff\xf6\x54\x62\x86\x02\x04\x76\xbd\x11\x0c\x07\x28\xce\x8b\x07\x07\xaf\x3a\x82\x1e\x45\x28\xa4\xca\x36\x99\xc6\x6e\x00\xef\x29\xad\x27\x03\x79\xf4\x03\xff\x64\xf0\x23\x10\xbb\x18\x34\xc1\x12\xce\x27\xaa\x3c\x86\xdc\xd8\x1c\x60\x8f\x41\x0c\xf6\x10\x88\x63\x2f\x3c\x8a\x9d\x58\x71\xe7\x4c\x0b\x85\x75\x52\x54\xc7\x20\x74\x29\x42\x81\x9f\x41\xc1\x79\x31\x5b\xf3\x27\xe6\xdb\x54\x01\x53\x0a\x42\x27\xe2\xb9\x5e\x2c\x36\x46\xba\xd8\xcc\xb5\xdb\x2e\x9c\x27\x7b\xe1\x5d\x6f\xf4\xe1\x02\x37\x64\x65\xe1\x3c\x2e\x0c\x73\x24\x5e\xfc\xf8\xff\x9f\xe6\xca\x3a\x59\x7d\xcb\xe1\x87\xd8\x9f\x21\xfc\x6f\x99\x8c\x1a\x4c\xbf\xea\x0c\x03\x47\xef\x5d\x90\x1c\x2e\x26\x68\x22\xa7\x78\xf3\xd0\x7a\xad\x4a\x48\xb4\x97\x30\x8a\xc0\x16\x0f\x43\x28\x9d\xd6\x31\x24\x6f\x24\x7b\xcd\x02\x4c\xf9\x36\x24\x63\xa6\xcd\x57\xa0\x34\xae\x26\xdf\xf9\xc6\x58\x3a\xce\x15\xc1\x07\x5a\x9b\x1b\x98\xd2\x7c\x33\x07\x8d\x36\x95\x31\x1e\xa0\xb8\xa9\x0f\xf5\xda\xb9\xf3\x62\x96\x09\xf5\x13\x42\xf4\xbe\x37\xe9\x16\xba\x2c\x7f\xbc\x30\xe3\x09\xf2\xdb\x83\xf6\x00\x2d\x91\xa7\x30\x6e\xb3\x2a\x21\xfd\x06\xad\x02\x53\xa6\xb6\x28\xba\x23\x4e\xab\xa6\xc8\xb8\xf4\xaf\xd6\x45\x05\x24\x7a\x3e\x9b\x9f\x02\xbc\xca\xa5\xc9\xd5\x26\xfb\xcc\x82\x41\x4e\x4e\x4b\x30\xdb\x69\x53\x25\x73\x67\x43\xa6\x55\x09\x1f\xc7\x38\x65\xa8\xb1\x1b\x55\xaa\x31\x62\xab\xa3\xf2\xd4\xd8\x0a\x58\x5c\xa0\x36\xd3\x3e\x79\xc8\x8e\xfb\x69\xf7\xd1\x9c\x4f\xbb\xc6\xa6\xd9\x0e\xcb\xa4\xf9\xef\xb8\xbf\xe6\x7d\xd6\xf2\x23\x96\x97\xa8\x7c\xe7\xf1\x8f\x4f\xd5\x7f\x13\x78\x51\x0f\x4f\x95\xfe\x5e\x6a\x35\x8c\x10\x96\x20\x21\xd2\x30\xc6\x4f\xc3\x2b\xf9\x78\x8a\xc7\x87\xf3\x9f\x8d\x7e\xc9\xb8\xbe\x41\xf2\xbd\x73\x79\x4e\xf7\xac\x95\xbf\x02\x00\x00\xff\xff\xdf\x3d\xa3\xb4\xd9\x07\x00\x00")

func policyCommonRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyCommonRego,
		"policy/common.rego",
	)
}

func policyCommonRego() (*asset, error) {
	bytes, err := policyCommonRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/common.rego", size: 2009, mode: os.FileMode(420), modTime: time.Unix(1566504744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyIntrospectionRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xcd\x6e\xdb\x30\x0c\x3e\x5b\x4f\x41\x24\x87\x6e\x40\xe6\x07\x28\xe0\x47\xd8\x4e\xbb\x19\x81\xc1\x48\x4c\xad\xd5\x16\x0d\x89\x4e\x91\x0e\x7d\xf7\x41\x92\xdd\x38\x3f\x1d\xba\x6e\xd8\xc9\x16\xf5\xf1\x13\xbf\x8f\xb4\x3c\xa0\x7e\xc4\x07\x02\x1c\xa5\x7d\x2e\xad\x13\xcf\x61\x20\x2d\x96\x9d\x52\xb6\x1f\xd8\x0b\x18\x14\x2c\x13\x00\x30\x64\xe4\xd9\x96\xe6\xbe\x67\x77\x16\x1a\xb8\xb3\xda\x52\x38\x0b\x7a\xee\x28\x28\xa5\xd9\x05\x69\xc2\x31\x08\xf5\x8d\x1c\x07\x82\x0a\x56\x79\xb9\x52\x6a\x40\xeb\x9b\x1e\x45\xb7\x14\x1a\x4f\x81\x47\xaf\xa9\xae\x07\xee\x1a\x6b\x36\x10\x04\x85\x7a\x72\x92\x56\x11\xbc\xdd\xc2\x4f\x55\xcc\x07\x4e\xc0\x6d\xf9\x0a\x0c\xf5\x32\x67\x5b\xce\x9c\xa1\x6e\xb6\x50\x2d\x08\xe7\x0d\x55\x58\x37\x8c\x52\x46\xf2\x09\x14\x5f\x55\x91\x75\xbe\x12\xcc\x55\x7e\x8a\xbb\xaf\xd1\xcd\x0d\xc6\xcf\xea\xe5\x42\x18\x26\x87\xff\xa5\xac\xcc\x78\x25\x2a\x87\xdf\x94\x94\xdb\x9e\x41\xe7\x7a\x72\x6c\x73\x45\xf5\x3f\xb4\xc4\x41\x81\x0a\xe2\xa3\xb1\x46\x15\x69\x70\xea\x69\x79\x21\x35\x45\xff\x5a\xe5\x82\x25\x09\x5c\xc3\xf7\xd6\x06\xd0\x38\x06\x0a\x20\x2d\x41\x8b\xa1\xe9\xa9\xdf\x91\x87\x40\x02\xc2\xb0\x23\x78\x20\x47\x1e\x85\x0c\xa0\x33\xd0\x53\xcf\xf6\x99\x0c\xb0\xd3\x04\xd6\x05\x21\x34\xc0\x7b\xb5\x86\x3d\x7b\x20\xd4\x2d\x24\x13\x8e\x25\x7c\x65\x4f\x7c\x20\x0f\x56\x60\xf0\x74\x88\x2e\xa4\x73\x76\xa8\x1f\xc5\xa3\x7e\xb4\xee\x01\xf6\x9e\xfb\xf9\x90\xb8\x36\xe3\xd0\x59\x8d\x42\x6a\x0d\xe8\xc2\x13\xf9\x98\x84\x02\x2d\x1e\x68\xaa\x89\x0e\xd8\x8d\xa9\xa6\xdd\x31\x31\xce\x53\x98\x6a\xcc\x1a\x21\x9b\xe0\x43\xa9\x16\xba\xaa\xe9\x16\x38\x85\x94\x4a\xc0\x26\x7a\x55\xd7\xb4\xdf\x93\x96\xdc\xd2\x0d\xdc\x6a\x77\x6e\x74\xc6\xc1\x7d\x05\xef\x6f\x79\xce\x51\xc5\xe9\xec\x39\x47\x15\x1f\xb8\x12\x2e\x92\xde\x33\xa2\xb9\xed\xdf\x58\xe8\x3e\x3a\xe9\x49\x46\xef\x92\x81\x61\xdc\xc5\x96\xf3\x3e\xad\xa2\x47\xec\x53\x9f\xd3\xa0\xcd\xf1\xc1\xf3\xc1\x1a\x32\x90\x86\x70\xa3\xd6\xc0\xa3\x07\x3f\x76\x14\xa0\x1f\x83\xc0\x2a\x53\xae\x12\xfa\x2e\xe6\xde\xe5\x7b\x51\x61\xd7\xf1\x13\x99\x6c\x73\xaa\x26\xda\xb8\xb4\x7e\x95\x20\xab\xd9\xfb\x66\x03\x4d\xae\xd8\x90\xb3\xbf\xcf\x34\xe4\x8e\x37\x12\x4f\x32\x12\x30\x36\x7f\x51\x05\x7c\x81\x05\xb3\x3a\x55\xe8\xf9\x07\x69\xa9\xa7\x67\xfe\xae\xf3\xfb\x9f\xf5\x7b\x4a\x8a\x9f\xa9\x2a\x26\x75\x50\x7d\x64\x62\x2e\x67\xf6\x34\x37\x8e\xe5\x9a\x2f\xff\x70\x2a\xb8\xfa\x0b\x5d\x9a\x72\x43\xe9\x5b\x2e\xa8\x17\xf5\x2b\x00\x00\xff\xff\x99\x2c\x87\x8f\x48\x07\x00\x00")

func policyIntrospectionRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyIntrospectionRego,
		"policy/introspection.rego",
	)
}

func policyIntrospectionRego() (*asset, error) {
	bytes, err := policyIntrospectionRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/introspection.rego", size: 1864, mode: os.FileMode(420), modTime: time.Unix(1587422053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"policy/authz.rego": policyAuthzRego,
	"policy/common.rego": policyCommonRego,
	"policy/introspection.rego": policyIntrospectionRego,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"policy": &bintree{nil, map[string]*bintree{
		"authz.rego": &bintree{policyAuthzRego, map[string]*bintree{}},
		"common.rego": &bintree{policyCommonRego, map[string]*bintree{}},
		"introspection.rego": &bintree{policyIntrospectionRego, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

