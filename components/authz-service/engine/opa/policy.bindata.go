// Code generated by go-bindata. DO NOT EDIT.
// sources:
// policy/authz.rego (1.074kB)
// policy/authz_v2.rego (2.766kB)
// policy/common.rego (2.173kB)
// policy/introspection.rego (866B)
// policy/introspection_v2.rego (1.59kB)
// policy/rule_mappings.rego (173B)

package opa

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _policyAuthzRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x6e\xdb\x3a\x10\x3c\x9b\x5f\x31\xb0\x2f\x2f\x0f\xb2\x82\xa6\x2d\x02\x04\xf0\xa1\x40\xfe\xa0\xbd\x05\x81\xb1\x11\x57\x16\x6b\x9a\x2b\x90\x94\x5b\xa7\xc8\xbf\x17\xa4\x44\xc3\x76\x0c\xe4\xd2\x9b\x34\xb3\x9c\x19\x0e\xc9\x9e\x9a\x2d\x6d\x18\x34\xc4\xee\x55\x29\xb3\xeb\xc5\x47\x68\x8a\x54\x37\xb2\xdb\x89\x3b\x83\x7a\xb1\xa6\x31\x1c\xb0\x80\x0c\x1e\xe5\x57\x29\xcd\x2d\x0d\x36\x66\x19\xf1\xe6\x95\x35\x56\x68\xc9\x06\x56\x6a\x81\xef\xc3\xcb\x4f\x6e\x62\xa8\x30\x38\x6b\xb6\x0c\xcf\x41\x06\xdf\x70\x00\x39\x0d\x6a\xa2\x11\x17\x2a\x90\x67\xf4\x5e\xf6\x46\xb3\x06\x25\x12\xe4\x3d\x1d\x6a\xb5\xc0\x8f\xce\x04\x34\x1d\x37\xdb\x80\xd8\x51\x04\x45\x58\xa6\x10\x21\x8e\x21\x2d\x62\xc7\x30\xae\x1f\x22\xc2\x64\x87\x1d\xc5\xa6\x4b\x26\x05\x82\x71\x79\x2e\x07\x3f\xd4\xaa\xa3\xb0\x9e\xa8\xa7\x5e\xec\xda\xe8\x67\xfc\x51\xb3\xb2\xaf\x82\xd5\x45\xf1\x69\xfd\x8c\x55\x5a\x9d\x56\xa9\x59\xb6\xbb\x20\x33\x36\xd2\x63\x81\x85\x5f\x4f\x69\xfe\x3b\x4e\x54\x45\xe9\x46\xbd\xa9\x9c\xa5\xf4\x72\x1a\x66\x52\x29\xd4\xb9\xcc\x11\xae\xf0\x2e\x74\xa1\x8e\xea\x63\xcf\xa7\xda\x23\x72\x21\x39\x82\x57\x04\x47\x22\xcb\xbd\x5b\x58\x21\x44\xf1\xac\x6f\x92\xac\x71\x58\x4d\xff\x1f\x0f\x8f\x9f\x58\x61\xfe\xff\x3c\x4f\x5b\x2b\xbf\xae\x9e\x02\xb7\x6d\x3a\xc3\x15\xe6\x79\x66\xae\x66\x57\xce\x6f\x04\x2f\x8b\x1c\xd1\xf3\x02\x92\x99\x66\x77\xf8\xc0\x2b\x8d\xfc\x0b\xab\xf3\x27\x93\xef\xfa\xa3\x09\xe2\x35\x7b\x7b\xa8\xb0\x63\x72\xc6\x6d\xf0\x98\x12\xc9\x9e\xbd\x37\x9a\x03\xbe\xa5\x9d\xaa\x05\x5a\xf1\x68\x07\x1f\x3b\xf6\xe0\xdf\xbd\x25\x47\xc9\xe0\x01\x5d\x8c\x7d\x78\xb8\xbd\x7d\xb1\xb2\xa9\xa5\x67\x37\xde\x6d\xda\xb0\x8b\xb5\xf8\xcd\xed\xe4\xb0\xdc\xb3\x0f\x43\x58\xea\xa3\xe7\xb2\x64\x59\xde\x7f\xba\xff\x72\xff\xb5\xb9\xfb\xac\xef\x5a\x75\xf2\x84\xd3\x0d\xc9\xfe\x33\x27\x11\xa9\x08\xf5\xa6\xfe\x06\x00\x00\xff\xff\xe1\x34\x20\xc8\x32\x04\x00\x00")

func policyAuthzRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyAuthzRego,
		"policy/authz.rego",
	)
}

func policyAuthzRego() (*asset, error) {
	bytes, err := policyAuthzRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/authz.rego", size: 1074, mode: os.FileMode(0644), modTime: time.Unix(1554909616, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0x72, 0x37, 0x57, 0x0, 0x46, 0xe3, 0x48, 0xef, 0x17, 0xae, 0xe9, 0xa3, 0x1b, 0xdd, 0x62, 0xfa, 0xab, 0xe9, 0x3a, 0x8e, 0xa0, 0xc0, 0x89, 0xa8, 0x69, 0x18, 0xf5, 0xf, 0xf, 0xfb, 0x73}}
	return a, nil
}

var _policyAuthz_v2Rego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdb\x6e\xe2\x3c\x10\xbe\xc6\x4f\x31\x7f\xfe\x1b\xa8\xb2\x68\xb5\x97\x95\xf2\x24\x11\x8a\x8c\x33\x34\x6e\x13\x3b\xb2\x1d\xaa\xb6\xe2\xdd\x57\x3e\x05\x87\x43\x03\xec\x4a\x7b\x45\xe6\xf4\xcd\xe7\xf1\x67\x9b\x9e\xb2\x37\xfa\x82\x40\x07\xd3\x7c\x56\xfb\x5f\x84\xf0\xae\x97\xca\x40\x4d\x0d\x5d\x33\xd9\x75\x52\x4c\x5c\xbd\x6c\x39\xe3\xa8\x27\x4e\x25\x5b\xd4\x84\xd4\xb8\xa3\x43\x6b\x1c\x98\x54\xfc\x13\x6b\x28\x60\x47\x5b\x8d\x84\x34\x54\x57\x1d\x76\x5b\x54\x65\x2f\xdb\x8a\xd7\x1b\xf8\x22\x0b\xfb\xa9\x87\x2d\x3c\x17\x10\x81\x63\x78\xed\xb3\x75\x59\x6d\xc8\x82\x8b\x7e\x30\x31\xd3\x19\x6b\x3d\x6c\x5f\x91\x19\x1f\xf7\x44\xa3\xaf\xea\xa8\x61\x0d\xea\xe5\x58\x96\x43\xe8\xb4\x22\x07\xcf\x45\xa1\x96\x83\x62\x58\x86\x7e\x39\x68\x43\x0d\x76\x28\x8c\xed\xee\xd8\x1d\x3d\x31\xfb\x22\xd1\x31\x4d\x97\x13\x8c\x75\xac\x9a\x70\x8c\xce\x29\xc9\xd1\x9d\xf2\x88\x3e\x47\x5a\xc8\xea\x9d\xb7\x35\xa3\xaa\x5e\xd2\x95\xa5\xc7\xa4\x30\x94\x0b\xbd\xa4\x39\x64\x4f\xd9\x0a\x8a\x38\xed\x03\x21\x94\x19\x2e\x45\xd2\xc4\x02\x4b\x85\xb5\x2b\x4d\xc1\x82\xdb\x0e\xd9\x22\x78\x73\x06\xa2\x80\x34\xb8\xd4\x7d\xcb\x4d\x00\xca\x21\x7b\xce\x56\x39\x78\x9f\x2d\xb2\xf6\x6a\x0a\xb7\x2c\x35\xaa\x3d\xb7\xcb\xcd\x9e\xb2\x4d\x0e\x47\xbb\xca\xa1\xda\xd8\x0e\x46\x0d\x78\xb5\xca\x7c\xf4\x17\x6a\xbd\xf7\x86\xf2\xec\x29\xcb\x61\x8f\x6a\x7b\xda\xda\xf9\xae\x95\x4f\xaa\xaa\x9b\xf2\x37\x39\x54\xc7\xb0\x15\x9e\x4f\xb9\x4d\x76\x3e\xf7\x3e\xd1\xf9\x1a\x2f\xb9\xb3\x1d\xb4\x4a\xf3\xce\xb4\xb1\xf7\x8c\x47\x63\x9e\xe1\x1d\x47\x40\xb6\x08\x05\xd8\x9f\x8a\xd7\x64\xe1\x6e\x8a\x32\x98\x29\xd9\x98\xe4\x3d\x33\xd4\x93\xcc\x91\x75\xaf\xa4\x3d\xfb\x65\x19\x3e\xfc\x91\xbf\xc2\x5f\xc9\xd7\xfb\xa6\x1a\x40\xfd\x58\xa3\xe1\x20\xfc\xf7\x48\xd4\xda\xab\x31\x25\xc9\x70\xa5\x0f\x72\x8d\x48\x8f\xd1\x65\x72\x10\x26\x4c\x30\x06\xdc\x65\xf1\xf3\xdf\xf0\x11\xd2\xc0\x94\x8d\xe5\x71\x71\x90\x70\x1c\xdf\xb8\x6f\x45\x01\xe1\x2a\x65\x52\x68\x53\xd1\xb6\xad\x46\xa0\xc9\xde\xfc\x41\x93\xff\x66\x9b\xc0\x29\xfe\x99\x34\xdc\x34\xdd\x9e\xbb\x76\x65\x89\xbb\xdd\xcc\x70\x7d\xc6\x7d\xb3\xf5\x35\x64\x71\xfe\xc2\x7a\xdf\xdc\x4b\xe7\xb3\xbe\x3f\xf4\xee\x39\x68\x5b\xf9\x0e\x05\x84\xc5\x64\xce\xce\xc2\x85\xbd\xb1\xaf\xbf\xf8\x48\xc2\xd6\x4c\xa2\xc9\x7f\x82\x2f\xb2\x70\xb5\x5e\x09\x36\x6f\x84\xc7\x7a\xd4\x62\xf8\x75\x63\x39\x6d\xf9\xdd\x42\x6e\xd5\xb2\xed\x59\xa3\xe0\x33\x2d\xc3\x32\xfe\x56\xc7\xff\xe1\xbd\x41\x01\x42\x7a\xf1\x00\xd7\x56\x7b\x7b\x5e\xdb\x87\xd3\x34\x5c\x83\x1a\x5a\x04\xdd\x48\x65\x7e\x30\xae\xd8\xc0\x8d\x06\xd6\x20\x7b\xe3\xe2\x05\xa8\xf8\x00\x69\x1a\x54\x10\xc6\x35\x2a\x37\xae\x25\x15\xea\x1d\xeb\xb8\x2a\x76\x7b\xdc\x1e\x3b\xe7\x87\x74\xd3\x2f\xce\x38\x6c\xff\x29\xed\x20\x8f\x0b\x45\x93\x92\xb3\xe0\x81\xfc\x0e\x00\x00\xff\xff\x6f\x6b\x0c\x86\xce\x0a\x00\x00")

func policyAuthz_v2RegoBytes() ([]byte, error) {
	return bindataRead(
		_policyAuthz_v2Rego,
		"policy/authz_v2.rego",
	)
}

func policyAuthz_v2Rego() (*asset, error) {
	bytes, err := policyAuthz_v2RegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/authz_v2.rego", size: 2766, mode: os.FileMode(0644), modTime: time.Unix(1557328854, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0xc4, 0xf9, 0xfa, 0x1d, 0x62, 0x93, 0xcf, 0x2e, 0xb2, 0x87, 0x42, 0x4b, 0x24, 0x35, 0xdb, 0x8, 0xb7, 0x25, 0xd5, 0xad, 0xe7, 0x33, 0x2c, 0xda, 0x1b, 0xd1, 0xba, 0xb5, 0x5a, 0x4f, 0x6f}}
	return a, nil
}

var _policyCommonRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x8f\xdb\x36\x10\x3d\x2f\x7f\xc5\xab\x14\xc0\xf6\x42\xb1\xdb\x5c\x8a\x0a\x75\x81\x20\xe9\xa5\x08\xd2\x20\x59\xf4\x12\x04\x06\x45\x8d\x2d\x76\x65\x52\x20\x87\xf6\xba\x8b\xdd\xdf\x5e\x90\xfa\xd8\xaf\xb4\x49\x5a\x9f\x4c\x6a\xe6\x3d\xce\x7b\x33\x93\xe3\x9d\x54\x97\x72\x47\x50\x76\xbf\xb7\x06\xca\x1a\x96\xda\x78\x6c\x83\x51\xac\xad\xf1\x90\xa6\x86\x0b\x2d\x79\x70\x23\x19\xd2\x11\x7c\x23\x1d\xd5\xa8\x88\x8f\x44\x06\x87\x1f\x52\xd0\xe1\x85\xc8\x61\xb7\xb0\xc1\xc1\xd1\xce\xa2\xb5\x3b\xad\x44\xf7\x80\x41\x08\x65\x8d\xe7\x8d\x6c\xdb\x4d\xe7\xec\x9f\xa4\xd8\x63\x8d\xec\xf6\xf6\xe5\x9b\x37\xcf\xdf\xbd\xff\xfd\xb7\x5f\x5f\x5d\x7c\xb8\xbd\xcd\x84\xc8\x45\x8e\x3f\xa4\xd3\xb2\x6a\x09\x74\xd5\x49\xe3\xb5\x35\x22\x17\xc2\xd8\xcd\x61\xf8\xe0\xe7\x72\x81\x6b\x71\x36\x3e\x7c\x2e\x0b\x64\xcf\xae\xb3\x05\xd6\x6b\x6c\x65\xeb\x49\xdc\x08\xf1\x38\x5a\x9b\x9a\xae\xec\xf6\x2e\xf8\x67\xdc\xbf\xba\xc9\x16\x31\x2b\xc7\x6b\xda\x6a\x93\x2a\xa7\x49\x11\xcc\xd2\x5b\xea\x19\x8e\x8d\x56\x0d\x1c\x71\x70\xc6\x43\xb3\xc7\x41\xb6\x81\x70\xd0\x32\x65\xd8\xc0\x5d\x60\x8c\xe4\x22\x1f\x53\xa9\x9e\x2d\x45\x8e\xb7\x96\xa9\x84\x0a\xce\x91\xe1\xf6\x54\xc0\x9a\xf6\xd4\x57\x5a\xf7\x9c\xd6\xd0\x94\x8e\x23\xe1\xd2\xd8\x63\x89\x67\xd7\xf2\x45\x19\x3c\x39\x23\xf7\x74\xb3\x14\x7d\xc6\xdc\x3a\xbd\x5b\x60\x8d\x91\x23\x16\x9a\x63\x8c\x83\xf6\x30\x96\x51\xa7\x92\x6a\xac\x7f\x89\xc7\x46\x9b\x1d\xd8\x0e\x39\xe2\x2c\x46\x8c\x19\xe2\x6c\x42\x2a\xd7\x88\xe8\x51\x94\x7f\x21\xbb\x1f\xee\xa8\x6b\xa5\xa2\x14\x97\x44\xbe\xff\xe4\xac\x98\x48\x92\xd0\xd3\x1b\xd7\x08\xbd\x3d\x5d\xe0\xa5\x0f\x55\x6a\x8f\x8f\x9b\x4f\x58\x23\xdd\x6d\x7c\xa8\xc4\x99\xef\x5a\xcd\xf3\xe9\xa2\x40\x56\x66\x05\x3e\x66\x11\x26\x2b\xb0\x29\x10\x3e\x25\xdc\xa3\x6e\x6b\x25\x5d\x3d\xb8\x4e\xa6\xf6\x47\xcd\x4d\xf2\xb8\x3c\x1f\x4d\x7e\xd5\x90\xba\xec\x9b\x5b\x33\x6a\x4b\xbd\x50\x64\x6a\xc4\xe8\x14\x8a\x97\x6f\x5f\x4f\x21\x83\x92\x12\xde\xb6\x9a\xa5\x3b\x21\x3b\xcf\xee\x0c\xbd\x68\x08\xad\x64\x26\x17\x23\xeb\xe8\xa1\xb7\x7d\xf2\x91\xe2\x79\xd6\x83\x87\xae\xc7\x9f\xf5\xe5\x3a\xf2\x36\x38\x15\x45\x38\x9f\x89\x7c\x98\x39\x6d\xd2\x3c\x75\xd2\xb1\x96\x2d\x1c\xf9\xd0\xb2\x1f\xc9\x26\x54\x79\xb0\xba\x46\x66\x2c\x67\xc5\xd0\x97\x4d\xec\x68\xe7\x1f\xa5\xc2\x76\xac\xf7\xfa\x2f\x99\x86\xbb\x80\xa7\xd8\x97\x0d\x73\xe7\xcb\xd5\x6a\xa7\xb9\x09\xd5\x52\xd9\xfd\xca\x76\x64\x9e\x77\xb6\xd5\xea\xf4\x5c\xee\xc8\xf0\xca\x76\x72\xa5\xbd\x0f\xe4\x57\x3f\x7e\xff\xd3\x52\x18\xcb\x9b\x2f\x29\x7c\x37\x85\x67\x12\xdf\xad\xa3\x50\xbd\xe8\x17\x8d\xf6\xf0\xa1\xeb\xac\xe3\xd4\xeb\x9e\x50\x05\x1f\xa7\xcd\xf7\xa5\x97\x22\x47\x84\x7d\x89\x91\x04\x7b\x79\xea\x67\xc4\x2a\x15\x5c\xd4\x86\x93\xd6\x9e\xe1\x29\x0d\x67\x14\x66\x5e\x3d\x49\x8a\x76\x55\x69\x05\x55\xa9\xf9\x93\xee\x12\x9d\xa3\xad\xbe\xc2\x9c\x96\xbb\x25\x94\x34\x31\xcc\xcb\x13\xb2\xab\xf2\x54\x6e\xad\x3d\xcf\x16\x09\x50\x3d\x00\x94\x5d\xd7\xea\xb8\x14\x6c\xa2\x1f\xe6\x77\x7c\x41\x5a\x85\xd2\x9c\x50\x13\x75\xe4\xc6\x6b\x2f\x72\xc4\x5f\xcf\x95\xc9\xd8\x53\x7b\xc9\xaa\x21\x1f\x4f\x55\x96\xf2\xe2\xbf\x52\x65\x05\x88\xd5\x72\xb1\x9c\x1a\x78\x93\x42\xa3\xaa\x55\xd2\xd9\xb3\x74\x3c\x29\xcd\x4e\xef\xe7\x71\x0c\xce\xb3\x45\xdf\xd3\x22\xc7\xfb\xb1\x9d\x52\xaa\x36\x3b\x91\x8b\xb1\xc5\x36\x03\xf3\x5c\x9b\x02\x9e\xad\xa3\x3a\xc1\x3e\xd8\xab\xc3\x7d\xda\x09\x77\x3e\x4f\xb7\xda\x44\x6f\xfb\x63\xe4\xfc\x6f\xd8\x4f\x71\x1f\x95\x7c\x0f\xe5\x6b\x58\xbe\xf1\xf9\xc3\x32\xfb\x7f\x04\x4f\xc1\xa7\x45\xf8\x84\xe1\x73\xe5\x8d\xd1\x9f\xe7\xdf\xf4\xbe\x62\x0d\x76\x81\x7a\x6f\x3f\xf4\x9b\xf1\xbe\xb5\xc3\xb2\xfc\x67\xf5\xbf\xc6\xc3\x2f\x80\x7c\xab\x59\x8f\xe1\x1e\x95\xf2\x77\x00\x00\x00\xff\xff\xa2\xa7\xef\xcf\x7d\x08\x00\x00")

func policyCommonRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyCommonRego,
		"policy/common.rego",
	)
}

func policyCommonRego() (*asset, error) {
	bytes, err := policyCommonRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/common.rego", size: 2173, mode: os.FileMode(0644), modTime: time.Unix(1557328854, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0x7a, 0xb6, 0x9, 0x98, 0xf9, 0x58, 0x27, 0xda, 0xe0, 0x41, 0xc0, 0x53, 0xd3, 0x24, 0x8e, 0xb3, 0x68, 0x38, 0xd0, 0xf1, 0x2a, 0xde, 0x9f, 0xbf, 0x9b, 0x76, 0x83, 0xc7, 0x6c, 0x1a, 0x9e}}
	return a, nil
}

var _policyIntrospectionRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x51\x4d\x6a\xf3\x30\x10\x5d\x7b\x4e\x31\x38\x8b\x7c\x1f\x04\x1f\xa0\x90\x2b\xf4\x02\x26\x18\x45\x9a\xd4\x6a\x6d\x8d\x90\x46\x2d\x4d\xc9\xdd\x8b\xe4\x38\xc5\x49\x0a\xed\xa6\x4b\xbd\x79\xa3\xf7\x33\x5e\xe9\x17\xf5\x44\xa8\x92\xf4\xc7\xc6\x3a\x09\x1c\x3d\x69\xb1\xec\x00\xec\xe8\x39\x08\x1a\x25\xaa\x29\x84\x05\xa2\x79\x1c\xd9\x2d\x20\xcf\x83\xd5\x96\x22\x80\x57\x36\x74\xa3\x12\xdd\x53\xec\x02\x45\x4e\x41\x53\xdb\x7a\x1e\x3a\x6b\x36\x98\xc7\xbb\x1d\x7e\x40\x35\xaf\x9c\x47\x3b\xdc\xa2\xe7\x01\x2a\xeb\x7c\x92\x26\xf3\x62\xdb\x15\x54\xd9\x00\xd5\x24\xda\xcc\x3f\xce\x12\xff\xf2\xf4\x82\x6e\xf2\x17\x97\xd7\x7f\x38\x5d\xf9\x51\x25\xdf\x3d\x37\xdf\xa8\x4e\xed\x4c\x6b\x4b\xc9\x09\x2b\x82\x8b\x18\xe7\x41\xd1\x5e\xe1\x23\x0b\x3d\xa0\x30\x06\x92\x14\x1c\x4a\x4f\x18\xd3\x3e\x92\x20\x1f\xca\x2b\x2b\x70\xb0\x47\x32\x45\x32\xce\xb8\x0f\xfc\x6a\x0d\x19\x2c\xce\x36\xb0\x42\x4e\x01\x43\x1a\x28\xe2\x98\xa2\x60\x3d\x7d\x59\x17\xf6\x3a\xef\xae\xa7\x5b\x80\x1a\x06\x7e\x23\xd3\x65\xac\x2d\x11\xef\xf5\xdd\xd0\xe1\x40\x5a\x70\x8b\x75\x59\xa8\xe7\xb4\xbd\x8a\x5d\x4c\xfb\x67\xd2\x32\x73\xa1\xfa\xd1\x59\xaf\x68\xf7\xdb\xce\xc5\x18\x72\xf6\x37\x06\x0d\xb9\xf7\xbf\xf4\xf7\x75\x94\x2b\x8f\xb7\xd5\x42\xe5\x58\xf0\x26\x10\x9c\xe0\x33\x00\x00\xff\xff\x8b\x33\xc3\xfe\x62\x03\x00\x00")

func policyIntrospectionRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyIntrospectionRego,
		"policy/introspection.rego",
	)
}

func policyIntrospectionRego() (*asset, error) {
	bytes, err := policyIntrospectionRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/introspection.rego", size: 866, mode: os.FileMode(0644), modTime: time.Unix(1554909616, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0xbc, 0xd9, 0x1d, 0xd5, 0x12, 0xf1, 0x18, 0x79, 0xf3, 0x71, 0x4c, 0x7d, 0xb4, 0xb9, 0xd7, 0x1a, 0xaf, 0x10, 0x9b, 0x59, 0xdd, 0xac, 0xf, 0xbc, 0xf7, 0xa, 0xc7, 0xf, 0x81, 0x3a, 0xe2}}
	return a, nil
}

var _policyIntrospection_v2Rego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\xcf\x6e\xdb\x30\x0c\xc6\xcf\xe6\x53\x10\xee\xa1\x1b\x60\xf8\xb0\x63\x01\xbf\xc2\x5e\xc0\x30\x04\xd5\x66\x17\x6d\xb6\x68\x48\x74\x87\xb4\xe8\xbb\x0f\x92\xac\xcc\x89\x93\xa1\xfb\x83\x9d\x62\x51\xdf\x47\xf1\x47\x31\x9a\x75\xff\x4d\x7f\x21\xd4\x8b\x1c\x5e\xd4\xf3\xa7\xda\x58\x71\xec\x67\xea\xc5\xb0\x05\x30\xd3\xcc\x4e\x70\xd0\xa2\xeb\xac\x41\xed\x93\xfe\x6c\xb7\xe7\x69\x62\x7b\x16\x9a\x79\x34\xbd\x21\x7f\x16\x74\x3c\x92\x07\xe8\xd9\x7a\x51\xfe\xe8\x85\x26\x25\xc7\x99\xb0\xc1\x32\x2d\x4b\x80\x59\x1b\xa7\x26\x2d\xfd\x81\xbc\x72\xe4\x79\x71\x3d\xb5\xed\xcc\xa3\x32\x43\x85\x5e\xb4\xd0\x44\x56\xe2\x2a\x88\xbb\x0e\x5f\xa1\xc8\x07\xae\xc2\xae\x3e\x09\x7d\xbb\xf5\x74\x75\xce\xe9\x5b\xd5\x61\xb3\x49\x98\x37\xa0\x30\x76\x5e\xa4\x0e\xc9\x57\x51\xf8\x84\x22\x71\x9e\x12\xe4\x2a\x3f\x84\xdd\x53\xb4\xba\x92\xf1\x23\xbc\x5d\x80\xe9\xd8\xe4\x7f\x89\x95\x32\xee\xa0\x52\xf8\x26\x52\xbc\xcc\xd5\x7b\xce\x93\x62\xd5\x2e\xd5\xff\x60\x09\x83\x82\x0d\x86\x1f\x65\x06\x28\xe2\xe0\xb4\xeb\xf2\x02\x35\x46\xff\x9a\x72\x93\x25\x02\x46\x91\x0a\x92\xb6\xa5\xa7\x27\xea\x25\x91\x54\x78\x8d\x32\xf1\x25\x1d\x3e\x34\xf8\x7e\xd2\xe4\xc9\x15\x1e\xb4\x57\x13\x4d\x8f\xe4\xb2\x13\x8a\x3f\xf8\x3f\x5c\x98\xde\x73\x3f\x81\xf9\x0e\x3f\xb3\xd0\x03\x0a\xa3\x23\x59\x9c\x45\x39\x10\xfa\xe5\xd1\x93\x20\x3f\xc5\x55\xa8\x93\x9d\x79\xa1\x21\x1a\x7d\x8e\xcf\x8e\x9f\xcd\x40\x03\xc6\x1b\xa8\xe0\x0e\x79\x71\xe8\x96\x91\x3c\x4e\x8b\x17\x2c\x53\xca\x32\xaa\xef\x83\xf7\x3e\x3d\x0a\xa0\xc7\x91\xbf\xd3\x90\x9a\x1d\xab\xc1\x06\xb7\xfd\x2f\xa3\xa2\xcc\x17\xa0\x2a\x54\x5d\x07\x30\x90\x35\xbf\xb4\x0d\x64\x8f\x3b\xd7\x4f\x80\xad\xf3\x15\x8a\x7d\x19\x50\x58\x16\xdc\x1d\x13\x5a\x75\x12\x3b\xfe\x4a\xbd\xb4\xeb\x6f\x1a\xf3\xf4\xfd\x7b\x73\xb0\x9a\xc2\xd4\x42\x71\x15\x5e\xdd\x1a\xbd\x54\xe6\xee\xa8\xf4\xb0\x36\xb8\x7b\x6d\x63\xfd\x9b\x2e\x5c\x41\xb8\x85\x07\x6f\xf0\x23\x00\x00\xff\xff\xdf\xe5\xd4\xbe\x36\x06\x00\x00")

func policyIntrospection_v2RegoBytes() ([]byte, error) {
	return bindataRead(
		_policyIntrospection_v2Rego,
		"policy/introspection_v2.rego",
	)
}

func policyIntrospection_v2Rego() (*asset, error) {
	bytes, err := policyIntrospection_v2RegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/introspection_v2.rego", size: 1590, mode: os.FileMode(0644), modTime: time.Unix(1557328854, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x94, 0x13, 0x44, 0x71, 0xe5, 0x70, 0x99, 0x1d, 0x61, 0x6a, 0x2b, 0x60, 0x18, 0xae, 0x65, 0x4f, 0xff, 0xe5, 0x25, 0x8e, 0x31, 0x42, 0x2f, 0x31, 0xd, 0x8, 0x7, 0x85, 0xd8, 0x5e, 0x8a}}
	return a, nil
}

var _policyRule_mappingsRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2a\xcd\x49\x8d\xcf\x4d\x2c\x28\xc8\xcc\x4b\x2f\xe6\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x48\x49\x2c\x49\xd4\x03\x49\x15\x73\x71\x81\xa9\xf8\xb4\xfc\xa2\xf8\x82\xa2\xfc\xac\xd4\xe4\x92\xe8\xa2\xd4\xe2\xd2\x9c\x92\x58\x85\x6a\x2e\x4e\x08\x53\xc1\xca\x16\x49\x4b\x74\x66\x5e\x41\x69\x89\x1e\x54\x75\x7c\x66\x4a\x6c\x74\x7c\x2c\x57\x2d\xb2\x49\x89\x39\x39\x30\xd3\x8a\x09\x19\xc7\x55\xcb\x05\x08\x00\x00\xff\xff\xb0\xed\xb0\x1b\xad\x00\x00\x00")

func policyRule_mappingsRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyRule_mappingsRego,
		"policy/rule_mappings.rego",
	)
}

func policyRule_mappingsRego() (*asset, error) {
	bytes, err := policyRule_mappingsRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/rule_mappings.rego", size: 173, mode: os.FileMode(0644), modTime: time.Unix(1554909616, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0xfb, 0xbc, 0x15, 0xc5, 0x65, 0xe4, 0xf6, 0x43, 0x70, 0xee, 0x41, 0x57, 0x7b, 0xe8, 0x34, 0x3b, 0x8d, 0xba, 0xce, 0x38, 0x5f, 0xb1, 0xa9, 0x6b, 0xf4, 0x1a, 0x58, 0x96, 0x21, 0x6f, 0x9e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"policy/authz.rego": policyAuthzRego,

	"policy/authz_v2.rego": policyAuthz_v2Rego,

	"policy/common.rego": policyCommonRego,

	"policy/introspection.rego": policyIntrospectionRego,

	"policy/introspection_v2.rego": policyIntrospection_v2Rego,

	"policy/rule_mappings.rego": policyRule_mappingsRego,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"policy": &bintree{nil, map[string]*bintree{
		"authz.rego":            &bintree{policyAuthzRego, map[string]*bintree{}},
		"authz_v2.rego":         &bintree{policyAuthz_v2Rego, map[string]*bintree{}},
		"common.rego":           &bintree{policyCommonRego, map[string]*bintree{}},
		"introspection.rego":    &bintree{policyIntrospectionRego, map[string]*bintree{}},
		"introspection_v2.rego": &bintree{policyIntrospection_v2Rego, map[string]*bintree{}},
		"rule_mappings.rego":    &bintree{policyRule_mappingsRego, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
