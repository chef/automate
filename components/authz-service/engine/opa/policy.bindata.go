// Code generated by go-bindata.
// sources:
// policy/authz.rego
// policy/authz_v2.rego
// policy/common.rego
// policy/input.json
// policy/introspection.rego
// policy/introspection_v2.rego
// policy/policies/policies.json
// policy/rule_mappings.rego
// DO NOT EDIT!

package opa

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _policyAuthzRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x6e\xdb\x3a\x10\x3c\x9b\x5f\x31\xb0\x2f\x2f\x0f\xb2\x82\xa6\x2d\x02\x04\xf0\xa1\x40\xfe\xa0\xbd\x05\x81\xb1\x11\x57\x16\x6b\x9a\x2b\x90\x94\x5b\xa7\xc8\xbf\x17\xa4\x44\xc3\x76\x0c\xe4\xd2\x9b\x34\xb3\x9c\x19\x0e\xc9\x9e\x9a\x2d\x6d\x18\x34\xc4\xee\x55\x29\xb3\xeb\xc5\x47\x68\x8a\x54\x37\xb2\xdb\x89\x3b\x83\x7a\xb1\xa6\x31\x1c\xb0\x80\x0c\x1e\xe5\x57\x29\xcd\x2d\x0d\x36\x66\x19\xf1\xe6\x95\x35\x56\x68\xc9\x06\x56\x6a\x81\xef\xc3\xcb\x4f\x6e\x62\xa8\x30\x38\x6b\xb6\x0c\xcf\x41\x06\xdf\x70\x00\x39\x0d\x6a\xa2\x11\x17\x2a\x90\x67\xf4\x5e\xf6\x46\xb3\x06\x25\x12\xe4\x3d\x1d\x6a\xb5\xc0\x8f\xce\x04\x34\x1d\x37\xdb\x80\xd8\x51\x04\x45\x58\xa6\x10\x21\x8e\x21\x2d\x62\xc7\x30\xae\x1f\x22\xc2\x64\x87\x1d\xc5\xa6\x4b\x26\x05\x82\x71\x79\x2e\x07\x3f\xd4\xaa\xa3\xb0\x9e\xa8\xa7\x5e\xec\xda\xe8\x67\xfc\x51\xb3\xb2\xaf\x82\xd5\x45\xf1\x69\xfd\x8c\x55\x5a\x9d\x56\xa9\x59\xb6\xbb\x20\x33\x36\xd2\x63\x81\x85\x5f\x4f\x69\xfe\x3b\x4e\x54\x45\xe9\x46\xbd\xa9\x9c\xa5\xf4\x72\x1a\x66\x52\x29\xd4\xb9\xcc\x11\xae\xf0\x2e\x74\xa1\x8e\xea\x63\xcf\xa7\xda\x23\x72\x21\x39\x82\x57\x04\x47\x22\xcb\xbd\x5b\x58\x21\x44\xf1\xac\x6f\x92\xac\x71\x58\x4d\xff\x1f\x0f\x8f\x9f\x58\x61\xfe\xff\x3c\x4f\x5b\x2b\xbf\xae\x9e\x02\xb7\x6d\x3a\xc3\x15\xe6\x79\x66\xae\x66\x57\xce\x6f\x04\x2f\x8b\x1c\xd1\xf3\x02\x92\x99\x66\x77\xf8\xc0\x2b\x8d\xfc\x0b\xab\xf3\x27\x93\xef\xfa\xa3\x09\xe2\x35\x7b\x7b\xa8\xb0\x63\x72\xc6\x6d\xf0\x98\x12\xc9\x9e\xbd\x37\x9a\x03\xbe\xa5\x9d\xaa\x05\x5a\xf1\x68\x07\x1f\x3b\xf6\xe0\xdf\xbd\x25\x47\xc9\xe0\x01\x5d\x8c\x7d\x78\xb8\xbd\x7d\xb1\xb2\xa9\xa5\x67\x37\xde\x6d\xda\xb0\x8b\xb5\xf8\xcd\xed\xe4\xb0\xdc\xb3\x0f\x43\x58\xea\xa3\xe7\xb2\x64\x59\xde\x7f\xba\xff\x72\xff\xb5\xb9\xfb\xac\xef\x5a\x75\xf2\x84\xd3\x0d\xc9\xfe\x33\x27\x11\xa9\x08\xf5\xa6\xfe\x06\x00\x00\xff\xff\xe1\x34\x20\xc8\x32\x04\x00\x00")

func policyAuthzRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyAuthzRego,
		"policy/authz.rego",
	)
}

func policyAuthzRego() (*asset, error) {
	bytes, err := policyAuthzRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/authz.rego", size: 1074, mode: os.FileMode(420), modTime: time.Unix(1554914809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyAuthz_v2Rego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdb\x6e\xe2\x3c\x10\xbe\xc6\x4f\x31\x7f\xfe\x1b\xa8\xb2\x68\xb5\x97\x95\xf2\x24\x11\x8a\x8c\x33\x34\x6e\x13\x3b\xb2\x1d\xaa\xb6\xe2\xdd\x57\x3e\x05\x87\x43\x03\xec\x4a\x7b\x45\xe6\xf4\xcd\xe7\xf1\x67\x9b\x9e\xb2\x37\xfa\x82\x40\x07\xd3\x7c\x56\xfb\x5f\x84\xf0\xae\x97\xca\x40\x4d\x0d\x5d\x33\xd9\x75\x52\x4c\x5c\xbd\x6c\x39\xe3\xa8\x27\x4e\x25\x5b\xd4\x84\xd4\xb8\xa3\x43\x6b\x1c\x98\x54\xfc\x13\x6b\x28\x60\x47\x5b\x8d\x84\x34\x54\x57\x1d\x76\x5b\x54\x65\x2f\xdb\x8a\xd7\x1b\xf8\x22\x0b\xfb\xa9\x87\x2d\x3c\x17\x10\x81\x63\x78\xed\xb3\x75\x59\x6d\xc8\x82\x8b\x7e\x30\x31\xd3\x19\x6b\x3d\x6c\x5f\x91\x19\x1f\xf7\x44\xa3\xaf\xea\xa8\x61\x0d\xea\xe5\x58\x96\x43\xe8\xb4\x22\x07\xcf\x45\xa1\x96\x83\x62\x58\x86\x7e\x39\x68\x43\x0d\x76\x28\x8c\xed\xee\xd8\x1d\x3d\x31\xfb\x22\xd1\x31\x4d\x97\x13\x8c\x75\xac\x9a\x70\x8c\xce\x29\xc9\xd1\x9d\xf2\x88\x3e\x47\x5a\xc8\xea\x9d\xb7\x35\xa3\xaa\x5e\xd2\x95\xa5\xc7\xa4\x30\x94\x0b\xbd\xa4\x39\x64\x4f\xd9\x0a\x8a\x38\xed\x03\x21\x94\x19\x2e\x45\xd2\xc4\x02\x4b\x85\xb5\x2b\x4d\xc1\x82\xdb\x0e\xd9\x22\x78\x73\x06\xa2\x80\x34\xb8\xd4\x7d\xcb\x4d\x00\xca\x21\x7b\xce\x56\x39\x78\x9f\x2d\xb2\xf6\x6a\x0a\xb7\x2c\x35\xaa\x3d\xb7\xcb\xcd\x9e\xb2\x4d\x0e\x47\xbb\xca\xa1\xda\xd8\x0e\x46\x0d\x78\xb5\xca\x7c\xf4\x17\x6a\xbd\xf7\x86\xf2\xec\x29\xcb\x61\x8f\x6a\x7b\xda\xda\xf9\xae\x95\x4f\xaa\xaa\x9b\xf2\x37\x39\x54\xc7\xb0\x15\x9e\x4f\xb9\x4d\x76\x3e\xf7\x3e\xd1\xf9\x1a\x2f\xb9\xb3\x1d\xb4\x4a\xf3\xce\xb4\xb1\xf7\x8c\x47\x63\x9e\xe1\x1d\x47\x40\xb6\x08\x05\xd8\x9f\x8a\xd7\x64\xe1\x6e\x8a\x32\x98\x29\xd9\x98\xe4\x3d\x33\xd4\x93\xcc\x91\x75\xaf\xa4\x3d\xfb\x65\x19\x3e\xfc\x91\xbf\xc2\x5f\xc9\xd7\xfb\xa6\x1a\x40\xfd\x58\xa3\xe1\x20\xfc\xf7\x48\xd4\xda\xab\x31\x25\xc9\x70\xa5\x0f\x72\x8d\x48\x8f\xd1\x65\x72\x10\x26\x4c\x30\x06\xdc\x65\xf1\xf3\xdf\xf0\x11\xd2\xc0\x94\x8d\xe5\x71\x71\x90\x70\x1c\xdf\xb8\x6f\x45\x01\xe1\x2a\x65\x52\x68\x53\xd1\xb6\xad\x46\xa0\xc9\xde\xfc\x41\x93\xff\x66\x9b\xc0\x29\xfe\x99\x34\xdc\x34\xdd\x9e\xbb\x76\x65\x89\xbb\xdd\xcc\x70\x7d\xc6\x7d\xb3\xf5\x35\x64\x71\xfe\xc2\x7a\xdf\xdc\x4b\xe7\xb3\xbe\x3f\xf4\xee\x39\x68\x5b\xf9\x0e\x05\x84\xc5\x64\xce\xce\xc2\x85\xbd\xb1\xaf\xbf\xf8\x48\xc2\xd6\x4c\xa2\xc9\x7f\x82\x2f\xb2\x70\xb5\x5e\x09\x36\x6f\x84\xc7\x7a\xd4\x62\xf8\x75\x63\x39\x6d\xf9\xdd\x42\x6e\xd5\xb2\xed\x59\xa3\xe0\x33\x2d\xc3\x32\xfe\x56\xc7\xff\xe1\xbd\x41\x01\x42\x7a\xf1\x00\xd7\x56\x7b\x7b\x5e\xdb\x87\xd3\x34\x5c\x83\x1a\x5a\x04\xdd\x48\x65\x7e\x30\xae\xd8\xc0\x8d\x06\xd6\x20\x7b\xe3\xe2\x05\xa8\xf8\x00\x69\x1a\x54\x10\xc6\x35\x2a\x37\xae\x25\x15\xea\x1d\xeb\xb8\x2a\x76\x7b\xdc\x1e\x3b\xe7\x87\x74\xd3\x2f\xce\x38\x6c\xff\x29\xed\x20\x8f\x0b\x45\x93\x92\xb3\xe0\x81\xfc\x0e\x00\x00\xff\xff\x6f\x6b\x0c\x86\xce\x0a\x00\x00")

func policyAuthz_v2RegoBytes() ([]byte, error) {
	return bindataRead(
		_policyAuthz_v2Rego,
		"policy/authz_v2.rego",
	)
}

func policyAuthz_v2Rego() (*asset, error) {
	bytes, err := policyAuthz_v2RegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/authz_v2.rego", size: 2766, mode: os.FileMode(420), modTime: time.Unix(1557174334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyCommonRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x8f\xdb\x36\x10\x3d\x2f\x7f\xc5\xab\x14\xc0\xf6\x42\xb1\xdb\x5c\x8a\x0a\x75\x81\x20\xe9\xa5\x08\xd2\x20\x59\xf4\x12\x04\x06\x45\x8d\x2d\x76\x65\x52\x20\x87\xf6\xba\x8b\xdd\xdf\x5e\x90\xfa\xd8\xaf\xb4\x49\x5a\x9f\x4c\x6a\xe6\x3d\xce\x7b\x33\x93\xe3\x9d\x54\x97\x72\x47\x50\x76\xbf\xb7\x06\xca\x1a\x96\xda\x78\x6c\x83\x51\xac\xad\xf1\x90\xa6\x86\x0b\x2d\x79\x70\x23\x19\xd2\x11\x7c\x23\x1d\xd5\xa8\x88\x8f\x44\x06\x87\x1f\x52\xd0\xe1\x85\xc8\x61\xb7\xb0\xc1\xc1\xd1\xce\xa2\xb5\x3b\xad\x44\xf7\x80\x41\x08\x65\x8d\xe7\x8d\x6c\xdb\x4d\xe7\xec\x9f\xa4\xd8\x63\x8d\xec\xf6\xf6\xe5\x9b\x37\xcf\xdf\xbd\xff\xfd\xb7\x5f\x5f\x5d\x7c\xb8\xbd\xcd\x44\x2e\x72\xfc\x21\x9d\x96\x55\x4b\xa0\xab\x4e\x1a\xaf\xad\x11\xb9\x10\xc6\x6e\x0e\xc3\x07\x3f\x97\x0b\x5c\x8b\xb3\xf1\xdd\x73\x59\x20\x7b\x76\x9d\x2d\xb0\x5e\x63\x2b\x5b\x4f\xe2\x46\x88\xc7\xd1\xda\xd4\x74\x65\xb7\x77\xc1\x3f\xe3\xfe\xd5\x4d\xb6\x88\x59\x39\x5e\xd3\x56\x9b\x54\x38\x4d\x82\x60\x96\xde\x52\xcf\x70\x6c\xb4\x6a\xe0\x88\x83\x33\x1e\x9a\x3d\x0e\xb2\x0d\x84\x83\x96\x29\xc3\x06\xee\x02\x63\x24\x17\xf9\x98\x4a\xf5\x6c\x29\x72\xbc\xb5\x4c\x25\x54\x70\x8e\x0c\xb7\xa7\x02\xd6\xb4\xa7\xbe\xd2\xba\xe7\xb4\x86\xa6\x74\x1c\x09\x97\xc6\x1e\x4b\x3c\xbb\x96\x2f\xca\xe0\xc9\x19\xb9\xa7\x9b\xa5\xe8\x33\xe6\xd6\xe9\xdd\x02\x6b\x8c\x1c\xb1\xd0\x1c\x63\x1c\xb4\x87\xb1\x8c\x3a\x95\x54\x63\xfd\x4b\x3c\x36\xda\xec\xc0\x76\xc8\x11\x67\x31\x62\xcc\x10\x67\x13\x52\xb9\x46\x44\x8f\xa2\xfc\x0b\xd9\xfd\x70\x47\x5d\x2b\x15\xa5\xb8\x24\xf2\xfd\x27\x67\xc5\x44\x92\x84\x9e\xde\xb8\x46\xe8\xed\xe9\x02\x2f\x7d\xa8\x52\x77\x7c\xdc\x7c\xc2\x1a\xe9\x6e\xe3\x43\x25\xce\x7c\xd7\x6a\x9e\x4f\x17\x05\xb2\x32\x2b\xf0\x31\x8b\x30\x59\x81\x4d\x81\xf0\x29\xe1\x1e\x75\x5b\x2b\xe9\xea\xc1\x75\x32\xb5\x3f\x6a\x6e\x92\xc7\xe5\xf9\x68\xf2\xab\x86\xd4\x65\xdf\xdb\x9a\x51\x5b\xea\x85\x22\x53\x23\x46\xa7\x50\xbc\x7c\xfb\x7a\x0a\x19\x94\x94\xf0\xb6\xd5\x2c\xdd\x09\xd9\x79\x76\x67\xe8\x45\x43\x68\x25\x33\xb9\x18\x59\x47\x0f\xbd\xed\x93\x8f\x14\xcf\xb3\x1e\x3c\x74\x3d\xfe\xac\x2f\xd7\x91\xb7\xc1\xa9\x28\xc2\xf9\x4c\xe4\xc3\xc8\x69\x93\xc6\xa9\x93\x8e\xb5\x6c\xe1\xc8\x87\x96\xfd\x48\x36\xa1\xca\x83\xd5\x35\x32\x63\x39\x2b\x86\xbe\x6c\x62\x47\x3b\xff\x28\x15\xb6\x63\xbd\xd7\x7f\xc9\x34\xdb\x05\x3c\xc5\xbe\x6c\x98\x3b\x5f\xae\x56\x3b\xcd\x4d\xa8\x96\xca\xee\x57\xb6\x23\xf3\xbc\xb3\xad\x56\xa7\xe7\x72\x47\x86\x57\xb6\x93\x2b\xed\x7d\x20\xbf\xfa\xf1\xfb\x9f\x96\xc2\x58\xde\x7c\x49\xe1\xbb\x29\x3c\x93\xf8\x6e\x1d\x85\xea\x45\xbf\x68\xb4\x87\x0f\x5d\x67\x1d\xa7\x5e\xf7\x84\x2a\xf8\x38\x6d\xbe\x2f\xbd\x14\x39\x22\xec\x4b\x8c\x24\xd8\xcb\x53\x3f\x23\x56\xa9\xe0\xa2\x36\x9c\xb4\xf6\x0c\x4f\x69\x38\xa3\x30\xf3\xea\x49\x52\xb4\xab\x4a\x1b\xa8\x4a\xcd\x9f\x74\x97\xe8\x1c\x6d\xf5\x15\xe6\xb4\xdc\x2d\xa1\xa4\x89\x61\x5e\x9e\x90\x5d\x95\xa7\x72\x6b\xed\x79\xb6\x48\x80\xea\x01\xa0\xec\xba\x56\xc7\xa5\x60\x13\xfd\x30\xbf\xe3\x0b\xd2\x26\x94\xe6\x84\x9a\xa8\x23\x37\x5e\x7b\x91\x23\xfe\x7a\xae\x4c\xc6\x9e\xda\x4b\x56\x0d\xf9\x78\xaa\xb2\x94\x17\xff\x95\x2a\x2b\x40\xac\x96\x8b\xe5\xd4\xc0\x9b\x14\x1a\x55\xad\x92\xce\x9e\xa5\xe3\x49\x69\x76\x7a\x3f\x8f\x63\x70\x9e\x2d\xfa\x9e\x16\x39\xde\x8f\xed\x94\x52\xb5\xd9\x89\x5c\x8c\x2d\xb6\x19\x98\xe7\xda\x14\xf0\x6c\x1d\xd5\x09\xf6\xc1\x5e\x1d\xee\xd3\x4e\xb8\xf3\x79\xba\xd5\x26\x7a\xdb\x1f\x23\xe7\x7f\xc3\x7e\x8a\xfb\xa8\xe4\x7b\x28\x5f\xc3\xf2\x8d\xcf\x1f\x96\xd9\xff\x23\x78\x0a\x3e\x2d\xc2\x27\x0c\x9f\x2b\x6f\x8c\xfe\x3c\xff\xa6\xf7\x15\x6b\xb0\x0b\xd4\x7b\xfb\xa1\xdf\x8c\xf7\xad\x1d\x96\xe5\x3f\xab\xff\x35\x1e\x7e\x01\xe4\x5b\xcd\x7a\x0c\xf7\xa8\x94\xbf\x03\x00\x00\xff\xff\x57\x70\x86\x22\x7c\x08\x00\x00")

func policyCommonRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyCommonRego,
		"policy/common.rego",
	)
}

func policyCommonRego() (*asset, error) {
	bytes, err := policyCommonRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/common.rego", size: 2172, mode: os.FileMode(420), modTime: time.Unix(1557174096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyInputJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xb1\x0d\x03\x21\x0c\x05\xd0\x9e\x29\xbe\x7e\x9d\x09\xbc\x4a\x94\xc2\x01\x17\x17\x01\x96\xb0\xa9\xa2\xec\x1e\x71\xf5\x7b\xdf\x02\x30\xf6\xfb\x63\x35\x83\x82\x67\x01\x00\xa6\xe9\x90\xee\x55\xbb\x68\x1b\xd7\x0c\x16\xe0\xf5\x38\x59\x6b\x5e\x3e\x29\xe0\xf4\x66\xb2\x4c\x1b\x6f\x58\x16\xbe\x57\xb5\x43\xba\xd3\x87\xa6\xc9\x39\xc1\xf2\xfb\x07\x00\x00\xff\xff\x9c\x9a\x92\xd5\x68\x00\x00\x00")

func policyInputJsonBytes() ([]byte, error) {
	return bindataRead(
		_policyInputJson,
		"policy/input.json",
	)
}

func policyInputJson() (*asset, error) {
	bytes, err := policyInputJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/input.json", size: 104, mode: os.FileMode(420), modTime: time.Unix(1557163384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyIntrospectionRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x51\x4d\x6a\xf3\x30\x10\x5d\x7b\x4e\x31\x38\x8b\x7c\x1f\x04\x1f\xa0\x90\x2b\xf4\x02\x26\x18\x45\x9a\xd4\x6a\x6d\x8d\x90\x46\x2d\x4d\xc9\xdd\x8b\xe4\x38\xc5\x49\x0a\xed\xa6\x4b\xbd\x79\xa3\xf7\x33\x5e\xe9\x17\xf5\x44\xa8\x92\xf4\xc7\xc6\x3a\x09\x1c\x3d\x69\xb1\xec\x00\xec\xe8\x39\x08\x1a\x25\xaa\x29\x84\x05\xa2\x79\x1c\xd9\x2d\x20\xcf\x83\xd5\x96\x22\x80\x57\x36\x74\xa3\x12\xdd\x53\xec\x02\x45\x4e\x41\x53\xdb\x7a\x1e\x3a\x6b\x36\x98\xc7\xbb\x1d\x7e\x40\x35\xaf\x9c\x47\x3b\xdc\xa2\xe7\x01\x2a\xeb\x7c\x92\x26\xf3\x62\xdb\x15\x54\xd9\x00\xd5\x24\xda\xcc\x3f\xce\x12\xff\xf2\xf4\x82\x6e\xf2\x17\x97\xd7\x7f\x38\x5d\xf9\x51\x25\xdf\x3d\x37\xdf\xa8\x4e\xed\x4c\x6b\x4b\xc9\x09\x2b\x82\x8b\x18\xe7\x41\xd1\x5e\xe1\x23\x0b\x3d\xa0\x30\x06\x92\x14\x1c\x4a\x4f\x18\xd3\x3e\x92\x20\x1f\xca\x2b\x2b\x70\xb0\x47\x32\x45\x32\xce\xb8\x0f\xfc\x6a\x0d\x19\x2c\xce\x36\xb0\x42\x4e\x01\x43\x1a\x28\xe2\x98\xa2\x60\x3d\x7d\x59\x17\xf6\x3a\xef\xae\xa7\x5b\x80\x1a\x06\x7e\x23\xd3\x65\xac\x2d\x11\xef\xf5\xdd\xd0\xe1\x40\x5a\x70\x8b\x75\x59\xa8\xe7\xb4\xbd\x8a\x5d\x4c\xfb\x67\xd2\x32\x73\xa1\xfa\xd1\x59\xaf\x68\xf7\xdb\xce\xc5\x18\x72\xf6\x37\x06\x0d\xb9\xf7\xbf\xf4\xf7\x75\x94\x2b\x8f\xb7\xd5\x42\xe5\x58\xf0\x26\x10\x9c\xe0\x33\x00\x00\xff\xff\x8b\x33\xc3\xfe\x62\x03\x00\x00")

func policyIntrospectionRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyIntrospectionRego,
		"policy/introspection.rego",
	)
}

func policyIntrospectionRego() (*asset, error) {
	bytes, err := policyIntrospectionRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/introspection.rego", size: 866, mode: os.FileMode(420), modTime: time.Unix(1554914809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyIntrospection_v2Rego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\xcf\x6e\x9c\x30\x10\xc6\xcf\xcc\x53\x8c\xc8\x21\xad\x84\x38\xf4\x18\x89\x57\xe8\x0b\x20\x64\x39\x30\xe9\xba\x05\xc6\xb2\x87\x54\x9b\x28\xef\x5e\xd9\xc6\x5b\x76\xd9\xad\xd2\x3f\xea\x09\x3c\xfe\xbe\x8f\xf9\xd9\x83\xd5\xfd\x37\xfd\x85\x50\x2f\x72\x78\x51\xcf\x9f\x6a\x33\x8b\x63\x6f\xa9\x17\xc3\x33\x80\x99\x2c\x3b\xc1\x41\x8b\xae\xb3\x06\xb5\x4f\xfa\xb3\xdd\x9e\xa7\x89\xe7\xb3\x92\xe5\xd1\xf4\x86\xfc\x59\xd1\xf1\x48\x1e\xc0\x6a\xe3\xd4\xa4\xa5\x3f\x90\x57\x8e\x3c\x2f\xae\xa7\xb6\xb5\x3c\x2a\x33\x54\xe8\x45\x0b\x4d\x34\x4b\x5c\x05\x71\xd7\xe1\x2b\x14\x39\x72\x15\x76\xf5\x49\xe8\xdb\xad\xa7\xab\x73\xa6\x6f\x55\x87\xcd\x26\x30\x6f\x40\x61\x66\xbb\x48\x1d\xc2\x57\x51\x78\x85\x22\x91\x9c\x02\x72\x97\x1f\xc2\xee\xa9\x5a\x5d\x49\xfc\x08\x6f\x17\x60\x3a\x1e\xe3\xbf\xc4\x4a\x89\x3b\xa8\x54\xbe\x89\x14\xaf\x6b\xf5\x9e\xf3\xa4\x5a\xb5\x8b\xfa\x1f\x2c\x61\x14\xb0\xc1\xf0\x50\x66\x80\x22\x8e\x46\xbb\x2e\x2f\x50\x63\xf5\xaf\x29\x37\x29\x11\x30\x8a\x54\x90\xb4\x2d\x3d\x3d\x51\x2f\x89\xa4\xc2\x6b\x94\x89\x2f\xe9\xf0\xa1\xc1\xf7\x93\x26\x4f\xee\xf0\xa0\xbd\x9a\x68\x7a\x24\x97\x9d\x50\xfc\xc1\xff\x70\x61\x7a\xcf\xfd\x04\xe6\x3b\xfc\xcc\x42\x0f\x28\x8c\x8e\x64\x71\x33\xca\x81\xd0\x2f\x8f\x9e\x04\xf9\x29\xae\x42\x9f\xec\xcc\x0b\x0d\xd1\xe8\x73\xdd\x3a\x7e\x36\x03\x0d\x18\x6f\xa0\x82\x3b\xe4\xc5\xa1\x5b\x46\xf2\x38\x2d\x5e\xb0\x4c\x91\x65\x54\xdf\x07\xef\x7d\xfa\xed\x41\x8f\x23\x7f\xa7\x21\x1d\x76\xec\x06\x1b\xdc\x9e\x7f\x19\x15\x65\xbe\x00\x55\xa1\xea\x3a\x80\x81\x66\xf3\x4b\xdb\x40\xf3\x71\xe7\xfa\x09\xb0\x75\xbe\x42\xb1\x6f\x03\x8a\x99\x05\x77\x9f\x09\x47\x75\x12\x3b\xfe\x4a\xbd\xb4\xeb\x33\x8d\x79\x7a\xff\xbd\x39\x58\x4d\x61\x6a\xa1\xb8\x0a\xaf\x6e\x8d\x5e\x6a\x73\xf7\x29\x39\x5a\xc2\xa6\xc1\xd2\x1f\xbd\xd0\x54\xc6\xb6\x37\xf0\x57\x3a\xbf\x45\x05\x6f\xf0\x23\x00\x00\xff\xff\xc5\x26\x19\x3d\x0f\x06\x00\x00")

func policyIntrospection_v2RegoBytes() ([]byte, error) {
	return bindataRead(
		_policyIntrospection_v2Rego,
		"policy/introspection_v2.rego",
	)
}

func policyIntrospection_v2Rego() (*asset, error) {
	bytes, err := policyIntrospection_v2RegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/introspection_v2.rego", size: 1551, mode: os.FileMode(420), modTime: time.Unix(1557174920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyPoliciesPoliciesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xce\xb1\x8a\xc4\x20\x10\x80\xe1\x5a\x9f\x22\x4c\x79\xac\xe0\x60\x14\x9d\x57\x39\xae\x98\xe8\x08\x7b\x24\x11\xa2\xe1\x8a\x65\xdf\xfd\xc8\x5e\x7d\xe5\xd6\xdf\x5f\xfc\x0f\xad\x80\x9d\xa0\xf7\xa1\x1a\x4c\x76\x31\x33\x17\x6b\xd8\xf9\x60\x38\x2c\x52\x52\xc0\x28\x31\x03\x4d\x0f\xad\x14\xf4\x73\xf9\x96\x3c\x3a\xd0\xf4\x09\x43\x78\xa3\xb5\x65\x5e\x89\xcb\x76\xdf\x3b\x7c\xdd\xae\x88\xf3\xb8\xb7\x1d\x68\x82\xbd\x15\xa1\x43\xb8\xc0\x0b\x0e\xe9\xed\x3c\xb2\x5c\xc4\xe7\x68\x1b\x0f\xa1\xab\xe9\x7f\x2e\xb5\x4a\x1e\x2f\x5d\xd7\xf6\x03\x5a\x3d\x6f\x5a\x41\xf0\xe8\x63\xaa\xd6\xcc\x35\x45\x33\xb3\x73\x26\xa1\x15\x53\x96\xd9\x22\x06\x8b\x2e\xe2\xbb\x07\xe9\xe3\xdf\x45\xfd\xfc\x0d\x00\x00\xff\xff\x1e\x4c\x7c\xfe\x46\x01\x00\x00")

func policyPoliciesPoliciesJsonBytes() ([]byte, error) {
	return bindataRead(
		_policyPoliciesPoliciesJson,
		"policy/policies/policies.json",
	)
}

func policyPoliciesPoliciesJson() (*asset, error) {
	bytes, err := policyPoliciesPoliciesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/policies/policies.json", size: 326, mode: os.FileMode(420), modTime: time.Unix(1557163384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policyRule_mappingsRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2a\xcd\x49\x8d\xcf\x4d\x2c\x28\xc8\xcc\x4b\x2f\xe6\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x48\x49\x2c\x49\xd4\x03\x49\x15\x73\x71\x81\xa9\xf8\xb4\xfc\xa2\xf8\x82\xa2\xfc\xac\xd4\xe4\x92\xe8\xa2\xd4\xe2\xd2\x9c\x92\x58\x85\x6a\x2e\x4e\x08\x53\xc1\xca\x16\x49\x4b\x74\x66\x5e\x41\x69\x89\x1e\x54\x75\x7c\x66\x4a\x6c\x74\x7c\x2c\x57\x2d\xb2\x49\x89\x39\x39\x30\xd3\x8a\x09\x19\xc7\x55\xcb\x05\x08\x00\x00\xff\xff\xb0\xed\xb0\x1b\xad\x00\x00\x00")

func policyRule_mappingsRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyRule_mappingsRego,
		"policy/rule_mappings.rego",
	)
}

func policyRule_mappingsRego() (*asset, error) {
	bytes, err := policyRule_mappingsRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/rule_mappings.rego", size: 173, mode: os.FileMode(420), modTime: time.Unix(1554914809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"policy/authz.rego":             policyAuthzRego,
	"policy/authz_v2.rego":          policyAuthz_v2Rego,
	"policy/common.rego":            policyCommonRego,
	"policy/input.json":             policyInputJson,
	"policy/introspection.rego":     policyIntrospectionRego,
	"policy/introspection_v2.rego":  policyIntrospection_v2Rego,
	"policy/policies/policies.json": policyPoliciesPoliciesJson,
	"policy/rule_mappings.rego":     policyRule_mappingsRego,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"policy": {nil, map[string]*bintree{
		"authz.rego":            {policyAuthzRego, map[string]*bintree{}},
		"authz_v2.rego":         {policyAuthz_v2Rego, map[string]*bintree{}},
		"common.rego":           {policyCommonRego, map[string]*bintree{}},
		"introspection.rego":    {policyIntrospectionRego, map[string]*bintree{}},
		"introspection_v2.rego": {policyIntrospection_v2Rego, map[string]*bintree{}},
		"rule_mappings.rego":    {policyRule_mappingsRego, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
