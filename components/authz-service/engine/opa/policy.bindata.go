// Code generated by go-bindata. DO NOT EDIT.
// sources:
// policy/authz.rego (1.074kB)
// policy/authz_v2.rego (2.538kB)
// policy/common.rego (2.132kB)
// policy/introspection.rego (866B)
// policy/introspection_v2.rego (1.515kB)
// policy/rule_mappings.rego (173B)

package opa

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _policyAuthzRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x6e\xdb\x3a\x10\x3c\x9b\x5f\x31\xb0\x2f\x2f\x0f\xb2\x82\xa6\x2d\x02\x04\xf0\xa1\x40\xfe\xa0\xbd\x05\x81\xb1\x11\x57\x16\x6b\x9a\x2b\x90\x94\x5b\xa7\xc8\xbf\x17\xa4\x44\xc3\x76\x0c\xe4\xd2\x9b\x34\xb3\x9c\x19\x0e\xc9\x9e\x9a\x2d\x6d\x18\x34\xc4\xee\x55\x29\xb3\xeb\xc5\x47\x68\x8a\x54\x37\xb2\xdb\x89\x3b\x83\x7a\xb1\xa6\x31\x1c\xb0\x80\x0c\x1e\xe5\x57\x29\xcd\x2d\x0d\x36\x66\x19\xf1\xe6\x95\x35\x56\x68\xc9\x06\x56\x6a\x81\xef\xc3\xcb\x4f\x6e\x62\xa8\x30\x38\x6b\xb6\x0c\xcf\x41\x06\xdf\x70\x00\x39\x0d\x6a\xa2\x11\x17\x2a\x90\x67\xf4\x5e\xf6\x46\xb3\x06\x25\x12\xe4\x3d\x1d\x6a\xb5\xc0\x8f\xce\x04\x34\x1d\x37\xdb\x80\xd8\x51\x04\x45\x58\xa6\x10\x21\x8e\x21\x2d\x62\xc7\x30\xae\x1f\x22\xc2\x64\x87\x1d\xc5\xa6\x4b\x26\x05\x82\x71\x79\x2e\x07\x3f\xd4\xaa\xa3\xb0\x9e\xa8\xa7\x5e\xec\xda\xe8\x67\xfc\x51\xb3\xb2\xaf\x82\xd5\x45\xf1\x69\xfd\x8c\x55\x5a\x9d\x56\xa9\x59\xb6\xbb\x20\x33\x36\xd2\x63\x81\x85\x5f\x4f\x69\xfe\x3b\x4e\x54\x45\xe9\x46\xbd\xa9\x9c\xa5\xf4\x72\x1a\x66\x52\x29\xd4\xb9\xcc\x11\xae\xf0\x2e\x74\xa1\x8e\xea\x63\xcf\xa7\xda\x23\x72\x21\x39\x82\x57\x04\x47\x22\xcb\xbd\x5b\x58\x21\x44\xf1\xac\x6f\x92\xac\x71\x58\x4d\xff\x1f\x0f\x8f\x9f\x58\x61\xfe\xff\x3c\x4f\x5b\x2b\xbf\xae\x9e\x02\xb7\x6d\x3a\xc3\x15\xe6\x79\x66\xae\x66\x57\xce\x6f\x04\x2f\x8b\x1c\xd1\xf3\x02\x92\x99\x66\x77\xf8\xc0\x2b\x8d\xfc\x0b\xab\xf3\x27\x93\xef\xfa\xa3\x09\xe2\x35\x7b\x7b\xa8\xb0\x63\x72\xc6\x6d\xf0\x98\x12\xc9\x9e\xbd\x37\x9a\x03\xbe\xa5\x9d\xaa\x05\x5a\xf1\x68\x07\x1f\x3b\xf6\xe0\xdf\xbd\x25\x47\xc9\xe0\x01\x5d\x8c\x7d\x78\xb8\xbd\x7d\xb1\xb2\xa9\xa5\x67\x37\xde\x6d\xda\xb0\x8b\xb5\xf8\xcd\xed\xe4\xb0\xdc\xb3\x0f\x43\x58\xea\xa3\xe7\xb2\x64\x59\xde\x7f\xba\xff\x72\xff\xb5\xb9\xfb\xac\xef\x5a\x75\xf2\x84\xd3\x0d\xc9\xfe\x33\x27\x11\xa9\x08\xf5\xa6\xfe\x06\x00\x00\xff\xff\xe1\x34\x20\xc8\x32\x04\x00\x00")

func policyAuthzRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyAuthzRego,
		"policy/authz.rego",
	)
}

func policyAuthzRego() (*asset, error) {
	bytes, err := policyAuthzRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/authz.rego", size: 1074, mode: os.FileMode(0644), modTime: time.Unix(1554909616, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0x72, 0x37, 0x57, 0x0, 0x46, 0xe3, 0x48, 0xef, 0x17, 0xae, 0xe9, 0xa3, 0x1b, 0xdd, 0x62, 0xfa, 0xab, 0xe9, 0x3a, 0x8e, 0xa0, 0xc0, 0x89, 0xa8, 0x69, 0x18, 0xf5, 0xf, 0xf, 0xfb, 0x73}}
	return a, nil
}

var _policyAuthz_v2Rego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x8f\xd3\x30\x10\x3d\xc7\xbf\x62\xc8\xa9\x5d\x85\x0a\x71\x5c\x29\x07\x84\xb8\xa0\x95\x40\xc0\x2d\x8a\x2c\x37\x71\x59\x43\x62\x47\xb6\xb3\xab\xdd\xd5\xf6\xb7\x23\x7f\x25\x4e\x9b\x6e\xda\x05\x89\x53\x33\xcf\x6f\xe6\x3d\x8f\x27\x4e\x3b\x52\xfd\x26\x3f\x29\x90\x5e\xdf\x3e\xe2\xbb\xf7\x08\xb1\xb6\x13\x52\x43\x4d\x34\xd9\x54\xa2\x6d\x05\x9f\x40\x9d\x68\x58\xc5\xa8\x9a\x80\x52\x34\x54\x21\x54\xd3\x1d\xe9\x1b\x6d\x8b\x09\xc9\x1e\x69\x0d\x39\xec\x48\xa3\x28\xaa\x04\x57\x1a\x93\xa6\xc1\x9d\x14\xbf\x68\xa5\x15\xe4\x90\xee\xf7\x1f\x6e\x6e\xde\x7e\xfd\xf6\xe5\xf3\xa7\x8f\x3f\xbe\xef\xf7\x29\x42\xb7\x44\xe1\x96\xb6\x5b\x2a\x8b\x4e\x34\x98\xd5\x25\x3c\xa1\xc4\x3c\xaa\x7e\x0b\xd7\x39\x04\x03\x61\x79\xe3\xd8\xaa\xc0\x25\x4a\x18\xef\x7a\x1d\x98\x36\xd8\xa8\x7e\x6b\xf5\xec\xba\xdb\x50\xc0\x70\x4b\x74\x75\x4b\xd5\x6a\x48\xcb\xc0\x2b\xad\xd1\xb3\xf3\x22\xa9\x12\xbd\xac\x68\xe1\xf5\x32\x50\x9a\x68\xda\x52\xae\x8d\xba\x75\x37\x22\x81\x3d\x6b\x74\xa0\xa9\x62\x52\x63\x13\xb2\x26\x1e\x03\x38\x35\x39\xc0\xb1\x8f\x80\x59\xd3\x5c\xe0\x7b\xd6\xd4\x15\x91\xf5\x8a\xac\x8d\xbd\x4a\x70\x4d\x18\x57\x2b\x92\x41\x7a\x95\xae\x21\x0f\xa7\xf2\x8c\x10\xa9\x34\x13\x3c\x12\x31\x85\x85\xa4\xb5\x4d\x8d\x8b\x79\xd8\x34\xd9\x54\x70\xe1\x42\x89\x1c\xe2\xc5\x95\xea\x1a\xa6\x7d\xa1\x0c\xd2\xeb\x74\x9d\x81\xc3\x4c\x92\x89\xd7\xd3\x72\xab\x42\x51\x79\xc7\xcc\x76\xd3\xab\xb4\xcc\x60\x8c\x71\x06\xb8\x34\x0a\x5a\xf6\xf4\x64\x96\x7e\xe8\x66\x72\x1d\x7a\x46\x7a\x7a\x95\x66\x70\x47\xe5\xf6\x50\xda\x62\xa7\xd2\x27\x59\xf8\x2c\x7e\x99\x01\x1e\x97\xcd\xe0\x39\xca\x79\x63\xe7\xb8\x97\x0d\x9d\xcb\x71\x23\x77\x74\x82\x66\xd2\x1c\x18\x0b\x3b\x64\x78\x35\x96\x1d\x5e\xf0\x0a\x88\x86\x42\x0e\xe6\x07\xb3\x1a\x25\xf6\x46\x29\x7c\x18\x9b\x0d\x24\x87\x2c\x58\x8f\x98\x83\x6b\x7f\xff\x14\x85\x7f\x70\xaf\xfc\xac\x7f\x00\xc3\xb9\xac\xad\xe1\x7a\x33\x7d\x75\xf9\xf6\xb2\x33\x35\xdc\xf3\x60\xd5\xc4\xeb\x91\x13\x51\xec\x3e\xe1\x15\x86\x93\xb8\xd6\xab\x2c\x27\x95\xe8\xb9\xf6\x6d\x0c\x0b\xf6\xc6\x78\xf7\x7f\xfc\x70\xa1\x61\xea\xc6\xf8\x98\xed\x25\x8c\x0d\x1c\x0f\x2f\xcf\xe1\xf8\xdb\x73\x70\x32\x7f\x53\xff\xcd\x6c\xfd\xc4\x69\x1f\x54\x3e\x9e\x09\xdb\xc3\xd2\x28\x5a\xa5\xa2\xa0\xbb\xdd\x42\x4b\x1d\xe3\xb2\x8e\xba\x1c\x94\x1c\x7f\x5c\x1d\xb6\xf4\x91\x73\xac\x97\xdf\x77\xfb\x25\x68\x1a\x71\x0f\x39\xf8\xcd\xa4\x36\x4e\xfd\x5d\x5d\x9a\x3f\x08\xfc\x21\x5a\x36\x61\xb4\x1a\xfd\x6d\x78\x42\x89\xcd\x75\xe7\x6f\x78\x43\x79\x5a\x0f\x13\xe8\x7f\x6d\x5b\x0e\x25\x5f\xda\xc8\xb9\x13\x6c\x34\x6b\xca\xd9\x82\xa4\xdf\xc6\xbf\x52\x1c\xdb\x30\xab\x7a\xaa\x09\x43\xab\xe6\xec\xa2\x67\xf4\x27\x00\x00\xff\xff\x61\xb1\x06\x95\xea\x09\x00\x00")

func policyAuthz_v2RegoBytes() ([]byte, error) {
	return bindataRead(
		_policyAuthz_v2Rego,
		"policy/authz_v2.rego",
	)
}

func policyAuthz_v2Rego() (*asset, error) {
	bytes, err := policyAuthz_v2RegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/authz_v2.rego", size: 2538, mode: os.FileMode(0644), modTime: time.Unix(1555973949, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe8, 0x9e, 0x7e, 0xf8, 0xff, 0xad, 0xb0, 0x21, 0x33, 0xec, 0x2, 0x24, 0xc0, 0xc0, 0xba, 0x11, 0xfe, 0xd4, 0x4c, 0x44, 0x12, 0xb3, 0xd3, 0xf7, 0xc1, 0xe2, 0xa8, 0x38, 0x62, 0xa1, 0x92, 0x5c}}
	return a, nil
}

var _policyCommonRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xdd\x8e\xdb\x36\x13\xbd\x36\x9f\xe2\x7c\x52\x00\xff\x40\xb1\xbf\xe6\xa6\xa8\x50\x17\x08\x9a\xeb\xa0\x68\x83\xde\x04\x81\x41\x51\x63\x8b\x5d\x99\x14\xc8\xa1\xbd\xee\x62\xdf\xbd\x20\xf5\xb3\x5e\x6f\xda\x24\xad\xaf\x4c\x6a\xe6\x1c\xce\x39\x33\x93\xe3\x17\xa9\xee\xe4\x81\xa0\xec\xf1\x68\x0d\x94\x35\x2c\xb5\xf1\xd8\x07\xa3\x58\x5b\xe3\x21\x4d\x0d\x17\x5a\xf2\xe0\x46\x32\xa4\x23\xf8\x46\x3a\xaa\x51\x11\x9f\x89\x0c\x4e\xdf\xa5\xa0\xd3\x1b\x91\xc3\xee\x61\x83\x83\xa3\x83\x45\x6b\x0f\x5a\x89\xee\x19\x83\x10\xb9\xc8\xf1\xbb\x74\x5a\x56\x2d\x81\xee\x3b\x69\xbc\xb6\x46\xe4\x42\x18\xbb\x3b\x0d\x1f\xfc\x42\x2e\xf1\x20\x66\xe3\x7b\x16\xb2\x40\xf6\xea\x21\x5b\x62\xbb\xc5\x5e\xb6\x9e\xc4\xa3\x10\xb7\xd1\xda\xd4\x74\x6f\xf7\x4f\xc1\x3f\xe2\xfa\xea\x31\x5b\xc6\xac\x1c\xef\x68\xaf\x4d\x2a\x88\xa6\x42\x31\x4f\x6f\xa9\xe7\x38\x37\x5a\x35\x70\xc4\xc1\x19\x0f\xcd\x1e\x27\xd9\x06\xc2\x49\xcb\x94\x61\x03\x77\x81\x31\x92\x8b\x7c\x4c\xa5\x7a\xbe\x16\x39\xde\x5b\xa6\x12\x2a\x38\x47\x86\xdb\x4b\x01\x6b\xda\x4b\x5f\x69\xdd\x73\x5a\x43\x53\x3a\xce\x84\x3b\x63\xcf\x25\x5e\x3d\xc8\x37\x65\xf0\xe4\x8c\x3c\xd2\xe3\x5a\xf4\x19\x0b\xeb\xf4\x61\x89\x2d\x46\x8e\x58\x68\x8e\x31\x0e\xda\xc3\x58\x46\x9d\x4a\xaa\xb1\xfd\x29\x1e\x1b\x6d\x0e\x60\x3b\xe4\x88\x59\x8c\x18\x33\xc4\x6c\x42\x2a\xb7\x88\xe8\x51\x94\x7f\x20\xbb\x0e\x77\xd4\xb5\x52\x51\x8a\x4b\x22\x5f\x3f\x39\x2b\x26\x92\x24\xf4\xf4\xc6\x2d\x42\x6f\x4f\x17\x78\xed\x43\xf5\x07\x29\xf6\x1f\x77\x9f\xb0\x45\xba\xdb\xf9\x50\x89\x99\xef\x5a\xcd\x8b\xe9\xa2\x40\x56\x66\x05\x3e\x66\x11\x26\x2b\xb0\x2b\x10\x3e\x25\xdc\xb3\x6e\x6b\x25\x5d\x3d\xb8\x4e\xa6\xf6\x67\xcd\x4d\xf2\xb8\x5c\x8d\x26\xff\xdc\x90\xba\xeb\x7b\x56\x33\x6a\x4b\xbd\x50\x64\x6a\xc4\xe8\x14\x8a\xb7\xef\xdf\x4d\x21\x83\x92\x12\xde\xb6\x9a\xa5\xbb\x20\x5b\x65\x4f\x86\x7e\x68\x08\xad\x64\x26\x17\x23\xeb\xe8\xa1\xb7\x7d\xf2\x99\xe2\x79\xde\x83\x87\xae\xc7\x9f\xf7\xe5\x3a\xf2\x36\x38\x15\x45\x58\xcd\x45\x3e\x8c\x92\x36\x69\x4c\x3a\xe9\x58\xcb\x16\x8e\x7c\x68\xd9\x8f\x64\x13\xaa\x3c\x59\x5d\x23\x33\x96\xb3\x62\xe8\xcb\x26\x76\xb4\xf3\x37\xa9\xb0\x1d\xeb\xa3\xfe\x53\xa6\x99\x2d\xe0\x29\xf6\x65\xc3\xdc\xf9\x72\xb3\x39\x68\x6e\x42\xb5\x56\xf6\xb8\xb1\x1d\x99\xd7\x9d\x6d\xb5\xba\xbc\x96\x07\x32\xbc\xb1\x9d\xdc\x68\xef\x03\xf9\xcd\xf7\xff\xff\x61\x2d\x8c\xe5\xdd\x97\x14\x7e\x9a\xc2\x99\xc4\xff\xb6\x51\xa8\x5e\xf4\x0f\x8d\xf6\xf0\xa1\xeb\xac\xe3\xd4\xeb\x9e\x50\x05\x1f\xa7\xcd\xf7\xa5\x97\x22\x47\x84\x7d\x8b\x91\x04\x47\x79\xe9\x67\xc4\x2a\x15\x5c\xd4\x86\x93\xd6\x9e\xe1\x29\x0d\x67\x14\x66\x51\xbd\x48\x8a\x76\x55\x69\xb3\x54\xa9\xf9\x93\xee\x12\x9d\xa3\xbd\xbe\xc7\x82\xd6\x87\x35\x94\x34\x31\xcc\xcb\x0b\xb2\xfb\xf2\x52\xee\xad\x5d\x65\xcb\x04\xa8\x9e\x01\xca\xae\x6b\x75\x5c\x0a\x36\xd1\x0f\xf3\x3b\xbe\x20\x6d\x38\x69\x2e\xa8\x89\x3a\x72\xe3\xb5\x17\x39\xe2\xaf\xe7\xca\x64\xec\xa9\xa3\x64\xd5\x90\x8f\xa7\x2a\x4b\x79\xf1\x5f\xa9\xb2\x02\xc4\x6a\xbd\x5c\x4f\x0d\xbc\x4b\xa1\x51\xd5\x2a\xe9\xec\x59\x3a\x9e\x94\x66\xa7\x8f\x8b\x38\x06\xab\x6c\xd9\xf7\xb4\xc8\xf1\xeb\xd8\x4e\x29\x55\x9b\x83\xc8\xc5\xd8\x62\xbb\x81\x79\xa1\x4d\x01\xcf\xd6\x51\x9d\x60\x9f\xed\xd5\xe1\x3e\xed\x84\x27\x9f\xa7\x5b\x6d\xa2\xb7\xfd\x31\x72\xfe\x3b\xec\x97\xb8\x37\x25\x5f\xa1\x7c\x0d\xcb\x37\x3e\x7f\x58\x66\xff\x8d\xe0\x25\xf8\xb4\x08\x5f\x30\x7c\xae\xbc\x31\xfa\xf3\xfc\xbb\xde\x57\x6c\xc1\x2e\x50\xef\xed\x6f\xfd\x66\xbc\xb6\x76\x58\x96\x7f\xaf\xfe\xd7\x78\xf8\x05\x90\x6f\x35\xeb\x16\xee\xa6\x94\xbf\x02\x00\x00\xff\xff\xd6\xfb\x29\x9b\x54\x08\x00\x00")

func policyCommonRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyCommonRego,
		"policy/common.rego",
	)
}

func policyCommonRego() (*asset, error) {
	bytes, err := policyCommonRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/common.rego", size: 2132, mode: os.FileMode(0644), modTime: time.Unix(1554909616, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x33, 0xa2, 0x97, 0x55, 0x10, 0xbe, 0xa, 0xac, 0x71, 0xdf, 0x83, 0x12, 0xed, 0x19, 0x41, 0xc5, 0x29, 0x71, 0x92, 0x9f, 0x54, 0x81, 0x30, 0x53, 0x9d, 0x14, 0xda, 0x28, 0x71, 0xdd, 0x1d}}
	return a, nil
}

var _policyIntrospectionRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x51\x4d\x6a\xf3\x30\x10\x5d\x7b\x4e\x31\x38\x8b\x7c\x1f\x04\x1f\xa0\x90\x2b\xf4\x02\x26\x18\x45\x9a\xd4\x6a\x6d\x8d\x90\x46\x2d\x4d\xc9\xdd\x8b\xe4\x38\xc5\x49\x0a\xed\xa6\x4b\xbd\x79\xa3\xf7\x33\x5e\xe9\x17\xf5\x44\xa8\x92\xf4\xc7\xc6\x3a\x09\x1c\x3d\x69\xb1\xec\x00\xec\xe8\x39\x08\x1a\x25\xaa\x29\x84\x05\xa2\x79\x1c\xd9\x2d\x20\xcf\x83\xd5\x96\x22\x80\x57\x36\x74\xa3\x12\xdd\x53\xec\x02\x45\x4e\x41\x53\xdb\x7a\x1e\x3a\x6b\x36\x98\xc7\xbb\x1d\x7e\x40\x35\xaf\x9c\x47\x3b\xdc\xa2\xe7\x01\x2a\xeb\x7c\x92\x26\xf3\x62\xdb\x15\x54\xd9\x00\xd5\x24\xda\xcc\x3f\xce\x12\xff\xf2\xf4\x82\x6e\xf2\x17\x97\xd7\x7f\x38\x5d\xf9\x51\x25\xdf\x3d\x37\xdf\xa8\x4e\xed\x4c\x6b\x4b\xc9\x09\x2b\x82\x8b\x18\xe7\x41\xd1\x5e\xe1\x23\x0b\x3d\xa0\x30\x06\x92\x14\x1c\x4a\x4f\x18\xd3\x3e\x92\x20\x1f\xca\x2b\x2b\x70\xb0\x47\x32\x45\x32\xce\xb8\x0f\xfc\x6a\x0d\x19\x2c\xce\x36\xb0\x42\x4e\x01\x43\x1a\x28\xe2\x98\xa2\x60\x3d\x7d\x59\x17\xf6\x3a\xef\xae\xa7\x5b\x80\x1a\x06\x7e\x23\xd3\x65\xac\x2d\x11\xef\xf5\xdd\xd0\xe1\x40\x5a\x70\x8b\x75\x59\xa8\xe7\xb4\xbd\x8a\x5d\x4c\xfb\x67\xd2\x32\x73\xa1\xfa\xd1\x59\xaf\x68\xf7\xdb\xce\xc5\x18\x72\xf6\x37\x06\x0d\xb9\xf7\xbf\xf4\xf7\x75\x94\x2b\x8f\xb7\xd5\x42\xe5\x58\xf0\x26\x10\x9c\xe0\x33\x00\x00\xff\xff\x8b\x33\xc3\xfe\x62\x03\x00\x00")

func policyIntrospectionRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyIntrospectionRego,
		"policy/introspection.rego",
	)
}

func policyIntrospectionRego() (*asset, error) {
	bytes, err := policyIntrospectionRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/introspection.rego", size: 866, mode: os.FileMode(0644), modTime: time.Unix(1554909616, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0xbc, 0xd9, 0x1d, 0xd5, 0x12, 0xf1, 0x18, 0x79, 0xf3, 0x71, 0x4c, 0x7d, 0xb4, 0xb9, 0xd7, 0x1a, 0xaf, 0x10, 0x9b, 0x59, 0xdd, 0xac, 0xf, 0xbc, 0xf7, 0xa, 0xc7, 0xf, 0x81, 0x3a, 0xe2}}
	return a, nil
}

var _policyIntrospection_v2Rego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\x4d\x6e\xdb\x30\x10\x85\xd7\x9a\x53\x0c\x9c\x45\x5a\x40\xd0\xa2\xcb\x00\xbe\x42\x2f\x20\x08\x04\x23\x8e\x6b\xb6\x12\x47\x20\x47\x29\x9a\x20\x77\x2f\x48\x8a\xae\x6c\x39\x81\xfb\x83\xae\x24\x0e\xdf\x7b\x9a\x8f\x1c\x4d\xba\xff\xa6\xbf\x10\xea\x59\x8e\xcf\xea\xe9\x53\x63\x9d\x78\x0e\x13\xf5\x62\xd9\x01\xd8\x71\x62\x2f\x68\xb4\xe8\xa6\x68\x50\x87\xac\x3f\xdb\xed\x79\x1c\xd9\x9d\x95\x26\x1e\x6c\x6f\x29\x9c\x15\x3d\x0f\x14\x00\x26\x6d\xbd\x1a\xb5\xf4\x47\x0a\xca\x53\xe0\xd9\xf7\xd4\xb6\x13\x0f\xca\x9a\x1a\x83\x68\xa1\x91\x9c\xa4\x55\x14\x77\x1d\xbe\x40\x55\x22\x17\x61\xd7\x9c\x84\xa1\x5d\x7b\xba\xa6\x64\x86\x56\x75\xb8\x5f\x05\x96\x0d\xa8\xac\x9b\x66\x69\x62\xf8\x22\x8a\xaf\x50\x65\x92\x53\x40\xe9\xf2\x43\xdc\x3d\x55\xeb\x2b\x89\x1f\xe1\xf5\x02\x4c\xa7\x63\xfc\x97\x58\x39\x71\x03\x95\xcb\x6f\x22\xa5\xeb\x5a\xbc\xe7\x3c\xb9\x56\x6f\xa2\xfe\x07\x4b\x1c\x05\xdc\x63\x7c\x28\x6b\xa0\x4a\xa3\xd1\x2e\xcb\x0b\xd4\x54\xfd\x6b\xca\x55\x4a\x02\x4c\x22\x15\x25\x6d\x4b\x87\x03\xf5\x92\x49\x6a\xbc\x46\x99\xf9\xb2\x0e\x1f\xf6\x78\x3b\x69\xf6\x94\x0e\x8f\x3a\xa8\x91\xc6\x47\xf2\xc5\x09\xd5\x1f\xfc\x0f\x17\xa6\x5b\xee\x27\x32\xdf\xe1\x67\x16\x7a\x40\x61\xf4\x24\xb3\x77\x28\x47\xc2\x30\x3f\x06\x12\xe4\x43\x5a\xc5\x3e\xd9\xdb\x67\x32\xc9\x18\x4a\x7d\xf2\xfc\x64\x0d\x19\x4c\x37\x50\xc3\x1d\xf2\xec\xd1\xcf\x03\x05\x1c\xe7\x20\xb8\xcb\x91\xbb\xa4\xbe\x8f\xde\xfb\xfc\xdb\x83\x1e\x06\xfe\x4e\x26\x1f\x76\xea\x06\xf7\xb8\x3e\xff\x5d\x52\xec\xca\x05\xa8\x1a\x55\xd7\x01\x18\x72\xf6\x5d\x9b\x21\xf7\x63\xe3\xfa\x05\xb0\x76\xbe\x40\xb5\x6d\x03\x2a\xc7\x82\x9b\xcf\xc4\xa3\x3a\x89\x3d\x7f\xa5\x5e\xda\xe5\x99\xc7\x3c\xbf\xff\xde\x1c\x2c\xa6\x38\xb5\x50\xbd\x03\x7f\x7d\xfa\x52\x4b\x2b\xb0\x2b\x5d\xbd\xd5\x31\xbc\xc2\xcf\x00\x00\x00\xff\xff\x3c\xe8\x62\xec\xeb\x05\x00\x00")

func policyIntrospection_v2RegoBytes() ([]byte, error) {
	return bindataRead(
		_policyIntrospection_v2Rego,
		"policy/introspection_v2.rego",
	)
}

func policyIntrospection_v2Rego() (*asset, error) {
	bytes, err := policyIntrospection_v2RegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/introspection_v2.rego", size: 1515, mode: os.FileMode(0644), modTime: time.Unix(1554909616, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0xd4, 0xec, 0xd6, 0x1f, 0x7b, 0xfc, 0x6c, 0x17, 0xac, 0x17, 0x5a, 0x1c, 0x8c, 0xbd, 0x5c, 0x71, 0xf6, 0x84, 0x21, 0x0, 0xd8, 0x1e, 0xcb, 0xc, 0x4a, 0x1e, 0x6, 0x97, 0xe7, 0x5a, 0x6d}}
	return a, nil
}

var _policyRule_mappingsRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2a\xcd\x49\x8d\xcf\x4d\x2c\x28\xc8\xcc\x4b\x2f\xe6\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x48\x49\x2c\x49\xd4\x03\x49\x15\x73\x71\x81\xa9\xf8\xb4\xfc\xa2\xf8\x82\xa2\xfc\xac\xd4\xe4\x92\xe8\xa2\xd4\xe2\xd2\x9c\x92\x58\x85\x6a\x2e\x4e\x08\x53\xc1\xca\x16\x49\x4b\x74\x66\x5e\x41\x69\x89\x1e\x54\x75\x7c\x66\x4a\x6c\x74\x7c\x2c\x57\x2d\xb2\x49\x89\x39\x39\x30\xd3\x8a\x09\x19\xc7\x55\xcb\x05\x08\x00\x00\xff\xff\xb0\xed\xb0\x1b\xad\x00\x00\x00")

func policyRule_mappingsRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyRule_mappingsRego,
		"policy/rule_mappings.rego",
	)
}

func policyRule_mappingsRego() (*asset, error) {
	bytes, err := policyRule_mappingsRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/rule_mappings.rego", size: 173, mode: os.FileMode(0644), modTime: time.Unix(1554909616, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0xfb, 0xbc, 0x15, 0xc5, 0x65, 0xe4, 0xf6, 0x43, 0x70, 0xee, 0x41, 0x57, 0x7b, 0xe8, 0x34, 0x3b, 0x8d, 0xba, 0xce, 0x38, 0x5f, 0xb1, 0xa9, 0x6b, 0xf4, 0x1a, 0x58, 0x96, 0x21, 0x6f, 0x9e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"policy/authz.rego": policyAuthzRego,

	"policy/authz_v2.rego": policyAuthz_v2Rego,

	"policy/common.rego": policyCommonRego,

	"policy/introspection.rego": policyIntrospectionRego,

	"policy/introspection_v2.rego": policyIntrospection_v2Rego,

	"policy/rule_mappings.rego": policyRule_mappingsRego,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"policy": &bintree{nil, map[string]*bintree{
		"authz.rego":            &bintree{policyAuthzRego, map[string]*bintree{}},
		"authz_v2.rego":         &bintree{policyAuthz_v2Rego, map[string]*bintree{}},
		"common.rego":           &bintree{policyCommonRego, map[string]*bintree{}},
		"introspection.rego":    &bintree{policyIntrospectionRego, map[string]*bintree{}},
		"introspection_v2.rego": &bintree{policyIntrospection_v2Rego, map[string]*bintree{}},
		"rule_mappings.rego":    &bintree{policyRule_mappingsRego, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
