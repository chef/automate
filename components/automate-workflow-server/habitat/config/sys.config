%% -*- mode: erlang -*-
[
  {kernel, [
             {inet_dist_use_interface, {0,0,0,0}}
           ]},
  {sasl, [
           {errlog_type, error}
         ]},
  {lager, [
          %% What handlers to install with what arguments
          %% The defaults for the logfiles are to rotate the files when
          %% they reach 10Mb or at midnight, whichever comes first, and keep
          %% the last 5 rotations. See the lager README for a description of
          %% the time rotation format:
          %% https://github.com/basho/lager/blob/master/README.org
          %%
          %% If you wish to disable rotation, you can either set the size to 0
          %% and the rotation time to "", or instead specify a 2-tuple that only
          %% consists of {Logfile, Level}.
          {handlers, [
                      {lager_console_backend, {{cfg.log.level}}}
                     ]},

          %% Whether to write a crash log, and where.
          %% Commented/omitted/undefined means no crash logger.
          {crash_log, "{{pkg.svc_var_path}}/log/crash.log"},

          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},

          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, 10485760},

          %% What time to rotate the crash log - default is no time
          %% rotation. See the lager README for a description of this format:
          %% https://github.com/basho/lager/blob/master/README.org
          {crash_log_date, "$D0"},

          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, 5},

          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true}
         ]},
 {sqerl, [
           %% Database connection parameters
            {db_name, "{{cfg.postgresql.db_name}}"},
            {idle_check, 10000},
            {column_transforms, []},
            {prepared_statements, {sqerl_rec, statements,
              [[{app, delivery}, {app, github}, {app, scm}, {app, audit}, {app, notification}, {app, auth}, {app, jobs}]]}}
          ]},
  {pooler, [
            {pools, [[{name, sqerl},
                      {max_count,  {{cfg.db_pool_max_count}} },
                      {init_count, {{cfg.db_pool_init_count}} },
                      {start_mfa, {sqerl_client, start_link, []}}]]}
           ]},

  {audit, [
           {max_events_in_memory, {{cfg.audit_max_events}} }
  ]},
  {delivery, [
              {deliv_expiry_dir, "{{pkg.svc_data_path}}" },
              {omnibus_version, "{{pkg.version}}"},
              {
                {{#if cfg.listen}}
                  listen_ip, "{{cfg.listen}}"
                {{else}}
                  listen_ip, "{{sys.ip}}"
                {{/if}}
              },
              {listen_port, {{cfg.api_port}}},
              {hostname, "{{cfg.fqdn}}"},

              {api_proto, "{{cfg.api_proto}}"},

              {read_ttl_secs, {{cfg.read_ttl}}},
              {write_ttl_secs, {{cfg.write_ttl}}},

              %% where is this used???
              {deliv_git_ssh_authorized_keys_path, "{{pkg.svc_data_path}}/{{cfg.ssh_git.authorized_keys_file}}"},
              {deliv_git_ssh_base_command, <<"{{cfg.delivery.deliv_git_ssh_base_command}}">>},

              %% where the repos are kept
              {deliv_git_repos_root, <<"{{pkg.svc_data_path}}/git/repos">>},
{{~#if cfg.ssh_git.hostname}}
              {deliv_ssh_git_hostname, "{{cfg.ssh_git.hostname}}"},
{{else}}
              {deliv_ssh_git_hostname, "{{cfg.fqdn}}"},
{{~/if}}
              {deliv_ssh_git_host_address, "{{cfg.ssh_git.host_address}}"},
              {deliv_ssh_git_port, {{cfg.ssh_git.port}}},
              {deliv_ssh_git_server_keys_path, "{{pkg.svc_data_path}}/ssh_git_server_keys"},

              %% the path to our git repo template dir
              %% this must be an absolute path
              {deliv_git_repo_template, "{{pkg.svc_files_path}}/{{cfg.ssh_git.git_repo_template}}"},

              %% the path to our git working tree dir
              %% this must be an absolute path
              {deliv_git_working_tree_dir, <<"{{pkg.svc_data_path}}/git/workspace">>},

              %% TODO: Instead of just reading this file these
              %% should be in the delivery attrs. For now I am
              %% just passing the generated file through.
              {deliv_chef_config, "{{pkg.svc_config_path}}/{{cfg.delivery.deliv_chef_config}}"},

              %% The default search to use when looking up build nodes. This is
              %% pre-pended and anded with whatever is set in .delivery/config.json
              {deliv_default_search, "{{cfg.default_search}}"},

              %% deliv_push_jobs does polling on on-going jobs
              %% this is how long it should wait between two status updates (in ms)
              {push_jobs_status_interval, 5000},
              %% and this is how long it should wait to try and retry creating
              %% the job when no nodes were available (in ms, too)
              {push_jobs_retry_interval, 30000},
              %% Occationally pushy will provide a worker, but the worker will fail
              %% before the job has a chance to start.  This is how many times it should
              %% try restarting that job.
              {push_jobs_max_retries, {{cfg.push_jobs_max_retries}}},
              %% How long to wait for the push job to wait to find a worker and
              %% then complete (in seconds)
              {push_jobs_overall_timeout, {{cfg.push_jobs_overall_timeout}}},
              %% Once the push job has found a worker, this is how long to wait
              %% for the push job to complete (in seconds)
              {push_jobs_run_timeout, {{cfg.push_jobs_run_timeout}}},
              %% How long to wait for a phase to confirm via job and logs that it is complete (in ms)
              {phase_job_confirmation_timeout, {{cfg.phase_job_confirmation_timeout}}},

              {{#if cfg.git_executable ~}}
              {git_executable, "{{cfg.git_executable}}"},
              {{else ~}}
              {git_executable, "{{pkgPathFor "core/git"}}/bin/git"},
              {{/if ~}}
              %% Configuration for notification settings
              {deliv_notify_config, {{cfg.deliv_notify.config}}},

              % Path to OS trusted certificate store
              {{#if cfg.trusted_certificates_file ~}}
              {trusted_certificates_file, "{{pkg.svc_var_path}}/{{cfg.trusted_certificates_file}}"},
              {{else ~}}
              {trusted_certificates_file, "{{pkg.svc_config_path}}/root_ca.crt"},
              {{/if ~}}
              {ca_cert_chain_depth, {{cfg.ca_cert_chain_depth}}},
              {no_ssl_verification, {{cfg.delivery.no_ssl_verification}}},

              % DR configuration
              {disaster_recovery_mode, {{cfg.delivery.disaster_recovery_mode}}},
              {lsyncd_stat_path, "{{cfg.delivery.lsyncd_stat_path}}"},
              {lsyncd_log_file_path, "{{cfg.lsyncd.log_directory}}"},

              %% there are things that we only want running on dev boxes
              {is_dev_box, {{cfg.delivery.is_dev_box}}},

              {deliv_fips_mode, {{cfg.delivery.fips_mode}}},
              {deliv_fips_stunnel_proxy_port, <<"36534">>},

              {{#if cfg.proxy.host ~}}
              {proxy_host, "{{cfg.proxy.host}}"},
              {proxy_port, "{{cfg.proxy.port}}"},
              {proxy_user, "{{cfg.proxy.user}}"},
              {proxy_password, "{{cfg.proxy.password}}"},
              {no_proxy, [{{#each cfg.proxy.no_proxy as |noproxy| ~}}{{#if @index ~}},{{/if ~}}"{{noproxy}}"{{/each}}]},
              {{/if ~}}
              {a2_mode, true},
              {marketplace_licensing, {{cfg.delivery.marketplace_licensing}}}
           ]},

  {auth, [
          % oidc client(s)
          {oidc, [[{client_id, "{{cfg.auth.oidc.client_id}}"},
              {client_secret, "{{cfg.auth.oidc.client_secret}}"},
              {client_redirect_uri, "{{cfg.auth.oidc.client_redirect_uri}}"}]
            ]},
          {oidc_signing_key_file, "{{cfg.auth.oidc.oidc_signing_key_file}}"}
         ]},
  {oauth2, [{backend, auth_oidc_backend}]},
  {sync, [{non_descendants, allow}]},
  "{{pkg.svc_var_path}}/etc/sqerl.config"
].
