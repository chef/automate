import { browser, $, $$, ExpectedConditions as EC, ElementFinder } from 'protractor';
import { fakeServer } from './helpers/fake_server';
import { DatetimePipe } from '../src/app/pipes/datetime.pipe';

describe('Admin pages', () => {
  describe('User Management', () => {
    beforeEach(() => {
      fakeServer()
        .get('/apis/iam/v2beta/policy_version')
        .many()
        .reply(200, JSON.stringify({
          'version': {
            'major': 'V1',
            'minor': 'V0'
          }
        }));

      fakeServer()
        .post('/api/v0/auth/introspect_some', JSON.stringify(
          {
            paths: [
              '/auth/users'
            ]
          }
        ))
        .many()
        .reply(200, JSON.stringify(
          {
            endpoints: {
              '/auth/users': {
                get: true,
                put: false,
                post: true,
                delete: false,
                patch: false
              }
            }
          }
        ));

      fakeServer()
        .get('/api/v0/auth/users')
        .many()
        .reply(200, JSON.stringify(
          {
            users: [
              {
                id: 'b369ef15-6323-4c31-bcbc-23fb0c9ba55d',
                name: 'Local Administrator',
                email: 'admin',
                username: 'admin'
              }
            ]
          }
        ));

      browser.waitForAngularEnabled(false);
      browser.get('/settings/users');
    });

    it('displays heading', () => {
      const heading = $('chef-heading');
      expect(heading.getText()).toBe('Users');
    });

    it('displays users table', () => {
      const headerRow = $$('chef-table chef-thead chef-tr');
      expect(headerRow.count()).toEqual(1);
      // one row for the admin user in the table body
      const userRows = $$('chef-table chef-tbody chef-tr');
      expect(userRows.count()).toEqual(1);
    });

    it('displays create user button', () => {
      const addButton = $('app-user-table chef-button');
      expect(addButton.getText()).toBe('Create User');
    });

    it('displays the returned user info', () => {
      const fullname = $('chef-table chef-tbody chef-tr chef-td:first-child a');
      expect(fullname.getText()).toBe('Local Administrator');

      const username = $('chef-table chef-tbody chef-tr chef-td:nth-child(2)');
      expect(username.getText()).toBe('admin');
    });

    describe('control button', () => {
      it('is displayed', () => {
        const controlButton = $('chef-table chef-tbody chef-tr chef-control-menu');
        expect(controlButton.isPresent()).toBeTruthy();
      });

      [ 'Delete User' ].forEach((item, index) => {
        it(`when clicked, shows ${item}`, () => {
          $('chef-table chef-tbody chef-tr chef-control-menu').click();
          const dropDownOption = $(`chef-table chef-tbody chef-tr chef-control-menu
          chef-option:nth-child(${index + 1}`);
          const dropDownOpened = () => dropDownOption.getText().then(val => val === item);
          browser.wait(dropDownOpened, 100, 'Control options should render.');
        });
      });
    });
  });


  describe('IAM v2', () => {
    describe('API Token list', () => {
      const token1 = {
        id: 'admin-token',
        value: 'YExDQAGViKq9ePDB7PquqUrE54E=',
        name: `This token was generated by the chef-automate CLI tool.
                    It has admin level access on the entire Automate API.`,
        active: true,
        created_at: '2018-09-19T23:39:36Z',
        updated_at: '2018-09-19T23:39:36Z'
      };

      const token2 = {
        id: 'my-token',
        value: 'pXo2ERHF6mbfjU0rX_xGyDBgJyQ=',
        name: 'ZZZ My favorite token ZZZ',
        active: false,
        created_at: '2018-10-19T23:39:36Z',
        updated_at: '2018-10-19T23:39:36Z'
      };

      const v2tokens = { tokens: [ token1, token2 ]};

      beforeEach(() => {
        fakeServer()
          .post('/api/v0/auth/introspect_some', JSON.stringify(
            {
              paths: [
                '/iam/v2beta/tokens',
                '/auth/tokens'
              ]
            }
          ))
          .many()
          .reply(200, JSON.stringify(
            {
              endpoints: { // note: we omit the v1 endpoint here
                '/iam/v2beta/tokens': {
                  get: true,
                  put: false,
                  post: true,
                  delete: false,
                  patch: false
                }
              }
            }
          ));
        // TODO: protect DELETE and TOGGLE, add mock introspect_some responses here

        fakeServer()
          .get('/apis/iam/v2beta/tokens')
          .min(1).max(1)
          .reply(200, JSON.stringify(v2tokens));

        fakeServer()
          .get('/apis/iam/v2beta/policy_version')
          .many()
          .reply(200, JSON.stringify({
            'version': {
              'major': 'V2',
              'minor': 'V0'
            }
          }));

        browser.waitForAngularEnabled(false);
        browser.get('/settings/tokens');
      });

      it('displays heading', () => {
        const heading = $('chef-heading');
        expect(heading.getText()).toBe('API Tokens');
      });

      it('displays tokens table', () => {
        const headerRows = $$('chef-table chef-thead chef-tr');
        expect(headerRows.count()).toEqual(1);
        const tokenRows = $$('chef-table chef-tbody chef-tr');
        expect(tokenRows.count()).toEqual(2);
      });

      it('displays the returned token info', () => {
        const name = $('chef-table chef-tbody chef-tr:nth-child(1) chef-td:first-child');
        expect(name.getText()).toBe('This token was generated by the chef-automate CLI tool. ' +
          'It has admin level access on the entire Automate API.');

        const date = $('chef-table chef-tbody chef-tr:nth-child(1) chef-td:nth-child(2)');
        expect(date.getText()).not.toBeNull();

        const status = $('chef-table chef-tbody chef-tr:nth-child(1) chef-td:nth-child(3)');
        expect(status.getText()).toBe('Active');
      });

      describe('control button', () => {
        let controlButton: ElementFinder;
        beforeEach(() => {
          controlButton = $('chef-table chef-tbody chef-tr:nth-child(1) chef-control-menu');
        });

        it('is displayed', () => {
          expect(controlButton.isPresent()).toBeTruthy();
        });

        [ 'Copy Token', 'Toggle Status', 'Delete Token' ].forEach((item, index) => {
          it(`when clicked, shows ${item}`, () => {
            controlButton.click();
            const dropDownOption = controlButton.$(`chef-option:nth-child(${index + 1}`);
            const dropDownOpened = () => dropDownOption.getText().then(val => val === item);
            browser.wait(dropDownOpened, 100, `Control option ${item} should render`);
          });
        });

        it('on copy token, it sends a notification on success', () => {
          const notification = $('.notifications chef-notification');
          expect(notification.isPresent()).toBeFalsy();

          controlButton.click();
          const copyOption = controlButton.$('chef-option:nth-child(2)');
          browser.wait(EC.visibilityOf(copyOption), 100, 'Copy option should render');
          copyOption.click();
          browser.wait(EC.invisibilityOf(copyOption), 200, 'Copy option should disappear');

          browser.wait(EC.presenceOf(notification), 300, 'Copy notification alert should appear');
        });

        it('on delete token click, it removes the token from the list', () => {
          fakeServer()
            .delete(`/apis/iam/v2beta/tokens/${token2.id}`)
            .min(1).max(1)
            .reply(200);

          // we delete the last token so it's simple to check that it's gone from the rows
          const tokenToDelete = $('chef-table chef-tbody chef-tr:nth-child(2)');
          expect(tokenToDelete.isPresent()).toBeTruthy();

          controlButton = tokenToDelete.$('chef-control-menu');
          controlButton.click();
          const deleteOption = controlButton.$('chef-option:nth-child(3)');
          browser.wait(EC.visibilityOf(deleteOption), 100, 'Delete option should render');
          deleteOption.click();

          const deleteModal = $('app-delete-object-modal');
          browser.wait(EC.visibilityOf(deleteModal), 100, 'Delete confirm modal should render');
          // confirm
          deleteModal.$('chef-button:first-child button').click();

          // TODO(sr): can't find the right condition here:
          // http://www.protractortest.org/#/api?view=ProtractorExpectedConditions
          // browser.wait(EC.stalenessOf(deleteModal), 500, 'Delete modal should disappear');

          // ...however, this should be sufficient to make this non-flakey:
          // if the token is gone from the table, the backend call will have been made
          browser.wait(EC.not(EC.presenceOf(tokenToDelete)), 300, 'Deleted token should disappear');
        });
      });
    });

    describe('API Token details', () => {
      const token = {
        id: 'my-token',
        value: 'pXo2ERHF6mbfjU0rX_xGyDBgJyQ=',
        name: 'ZZZ My favorite token ZZZ',
        active: false,
        created_at: '2018-10-19T23:39:36Z',
        updated_at: '2018-10-19T23:39:36Z'
      };

      beforeEach(() => {
        fakeServer()
          .get('/apis/iam/v2beta/tokens/my-token')
          .min(1).max(1)
          .reply(200, JSON.stringify({ token} ));

        fakeServer()
          .get('/apis/iam/v2beta/policy_version')
          .many()
          .reply(200, JSON.stringify({
            'version': {
              'major': 'V2',
              'minor': 'V0'
            }
          }));

        browser.waitForAngularEnabled(false);
        browser.get(`/settings/tokens/${token.id}`);
      });

      it('displays heading', () => {
        const heading = $('chef-heading');
        expect(heading.getText()).toBe(token.name);
      });

      it('displays the id in the header', () => {
        const idHeader = $('header td:nth-child(1)');
        expect(idHeader.getText()).toBe(token.id);
      });

      it('displays the date in the header', () => {
        const typeHeader = $('header td:nth-child(2)');
        const pipe = new DatetimePipe;
        expect(typeHeader.getText()).toBe(pipe.transform(
          token.updated_at,
          'ddd, MMMM D, YYYY [at] H:mm a'
          )
        );
      });

      it('displays the status in the header', () => {
        const idHeader = $('header td:nth-child(3)');
        expect(idHeader.getText()).toBe('Inactive');
      });

      it('displays the ID in the details input', () => {
        const input = $('main section form chef-form-field div input');
        expect(input.getAttribute('value')).toBe(token.name);
      });
    });
  });

  describe('IAM v1', () => {
    describe('API Token list', () => {
      const token1 = {
        id: 'admin-token',
        value: 'YExDQAGViKq9ePDB7PquqUrE54E=',
        description: `This token was generated by the chef-automate CLI tool.
                    It has admin level access on the entire Automate API.`,
        active: true,
        created: '2018-09-19T23:39:36Z',
        updated: '2018-09-19T23:39:36Z'
      };

      const token2 = {
        id: 'my-token',
        value: 'pXo2ERHF6mbfjU0rX_xGyDBgJyQ=',
        description: 'ZZZ My favorite token ZZZ',
        active: false,
        created: '2018-10-19T23:39:36Z',
        updated: '2018-10-19T23:39:36Z'
      };

      const v1tokens = { tokens: [ token1, token2 ]};

      beforeEach(() => {
        fakeServer()
          .post('/api/v0/auth/introspect_some', JSON.stringify(
            {
              paths: [
                '/iam/v2beta/tokens',
                '/auth/tokens'
              ]
            }
          ))
          .many()
          .reply(200, JSON.stringify(
            {
              endpoints: { // note: we omit the v2 endpoint here
                '/auth/tokens': {
                  get: true,
                  put: false,
                  post: true,
                  delete: false,
                  patch: false
                }
              }
            }
          ));

        fakeServer()
          .get('/api/v0/auth/tokens')
          .min(1).max(1)
          .reply(200, JSON.stringify(v1tokens));

        fakeServer()
          .get('/apis/iam/v2beta/policy_version')
          .many()
          .reply(200, JSON.stringify({
            'version': {
              'major': 'V1',
              'minor': 'V0'
            }
          }));

        browser.waitForAngularEnabled(false);
        browser.get('/settings/tokens');
      });

      it('displays heading', () => {
        const heading = $('chef-heading');
        expect(heading.getText()).toBe('API Tokens');
      });

      it('displays tokens table', () => {
        const headerRows = $$('chef-table chef-thead chef-tr');
        expect(headerRows.count()).toEqual(1);
        const tokenRows = $$('chef-table chef-tbody chef-tr');
        expect(tokenRows.count()).toEqual(2);
      });

      it('displays the returned token info', () => {
        const name = $('chef-table chef-tbody chef-tr:nth-child(1) chef-td:first-child');
        // tslint:disable-next-line:max-line-length
        expect(name.getText()).toBe('This token was generated by the chef-automate CLI tool. It has admin level access on the entire Automate API.');

        const date = $('chef-table chef-tbody chef-tr:nth-child(1) chef-td:nth-child(2)');
        expect(date.getText()).not.toBeNull();

        const status = $('chef-table chef-tbody chef-tr:nth-child(1) chef-td:nth-child(3)');
        expect(status.getText()).toBe('Active');
      });

      describe('control button', () => {
        let controlButton: ElementFinder;
        beforeEach(() => {
          controlButton = $('chef-table chef-tbody chef-tr:nth-child(1) chef-control-menu');
        });

        it('is displayed', () => {
          expect(controlButton.isPresent()).toBeTruthy();
        });

        [ 'Copy Token', 'Toggle Status', 'Delete Token' ].forEach((item, index) => {
          it(`when clicked, shows ${item}`, () => {
            controlButton.click();
            const dropDownOption = controlButton.$(`chef-option:nth-child(${index + 1}`);
            const dropDownOpened = () => dropDownOption.getText().then(val => val === item);
            browser.wait(dropDownOpened, 100, `Control option ${item} should render`);
          });
        });

        it('on copy token, it sends a notification on success', () => {
          const notification = $('.notifications chef-notification');
          expect(notification.isPresent()).toBeFalsy();

          controlButton.click();
          const copyOption = controlButton.$('chef-option:nth-child(2)');
          browser.wait(EC.visibilityOf(copyOption), 100, 'Copy option should render');
          copyOption.click();
          browser.wait(EC.invisibilityOf(copyOption), 200, 'Copy option should disappear');

          browser.wait(EC.presenceOf(notification), 300, 'Copy notification alert should appear');
        });

        it('on delete token click, it removes the token from the list', () => {
          fakeServer()
            .delete(`/api/v0/auth/tokens/${token2.id}`)
            .min(1).max(1)
            .reply(200);

          // we delete the last token so it's simple to check that it's gone from the rows
          const tokenToDelete = $('chef-table chef-tbody chef-tr:nth-child(2)');
          expect(tokenToDelete.isPresent()).toBeTruthy();

          controlButton = tokenToDelete.$('chef-control-menu');
          controlButton.click();
          const deleteOption = controlButton.$('chef-option:nth-child(3)');
          browser.wait(EC.visibilityOf(deleteOption), 100, 'Delete option should render');
          deleteOption.click();

          const deleteModal = $('app-delete-object-modal');
          browser.wait(EC.visibilityOf(deleteModal), 100, 'Delete confirm modal should render');
          // confirm
          deleteModal.$('chef-button:first-child button').click();

          // TODO(sr): can't find the right condition here:
          // http://www.protractortest.org/#/api?view=ProtractorExpectedConditions
          // browser.wait(EC.stalenessOf(deleteModal), 500, 'Delete modal should disappear');

          // ...however, this should be sufficient to make this non-flakey:
          // if the token is gone from the table, the backend call will have been made
          browser.wait(EC.not(EC.presenceOf(tokenToDelete)), 300, 'Deleted token should disappear');
        });
      });
    });

    describe('API Token details', () => {
      const token = {
        id: 'my-token',
        value: 'pXo2ERHF6mbfjU0rX_xGyDBgJyQ=',
        description: 'ZZZ My favorite token ZZZ',
        active: false,
        created: '2018-10-19T23:39:36Z',
        updated: '2018-10-19T23:39:36Z'
      };

      beforeEach(() => {
        fakeServer()
          .get('/api/v0/auth/tokens/my-token')
          .min(1).max(10)
          .reply(200, JSON.stringify(token));

        fakeServer()
          .get('/apis/iam/v2beta/policy_version')
          .many()
          .reply(200, JSON.stringify({
          'version': {
            'major': 'V1',
            'minor': 'V0'
          }
        }));

        browser.waitForAngularEnabled(false);
        browser.get(`/settings/tokens/${token.id}`);
      });

      it('displays heading', () => {
        const heading = $('chef-heading');
        expect(heading.getText()).toBe(token.description);
      });

      it('displays the id in the header', () => {
        const idHeader = $('header td:nth-child(1)');
        expect(idHeader.getText()).toBe(token.id);
      });

      it('displays the date in the header', () => {
        const typeHeader = $('header td:nth-child(2)');
        const pipe = new DatetimePipe;
        expect(typeHeader.getText()).toBe(pipe.transform(
          token.updated,
          'ddd, MMMM D, YYYY [at] H:mm a'
          )
        );
      });

      it('displays the status in the header', () => {
        const idHeader = $('header td:nth-child(3)');
        expect(idHeader.getText()).toBe('Inactive');
      });

      it('displays the ID in the details input', () => {
        const input = $('main section form chef-form-field div input');
        expect(input.getAttribute('value')).toBe(token.description); // ???
      });
    });
  });

  describe('Policies list', () => {
    beforeEach(() => {
      fakeServer()
        .post('/api/v0/auth/introspect_some', JSON.stringify(
          {
            paths: [
              '/iam/v2beta/policies'
            ]
          }
        ))
        .many()
        .reply(200, JSON.stringify(
          {
            endpoints: {
              '/iam/v2beta/policies': {
                get: true,
                put: false,
                post: true,
                delete: false,
                patch: false
              }
            }
          }
        ));

      fakeServer()
        .get('/apis/iam/v2beta/policies')
        .many()
        .reply(200, JSON.stringify(
          {
            policies: [
              {
                id: 'some-policy-id',
                name: 'Some policy whose name does not start with A',
                members: [],
                type: 'CUSTOM'
              },
              {
                id: 'chef-managed-administrator',
                name: 'Administrator All Access',
                members: [ 'team:local:admins' ],
                type: 'CHEF_MANAGED'
              }
            ]
          }
        ));

      // Note(sr): Technically, this isn't required: the crucial check in the
      // policy-list component only checks '=== "v1"' and '!== "v1"', and
      // undefined, or whatever it ends up being when the endpoint is not found,
      // is unequal "v1". But this is more correct, and less dependant on that
      // specific detail.
      fakeServer()
        .get('/apis/iam/v2beta/policy_version')
        .many()
        .reply(200, JSON.stringify({
          'version': {
            'major': 'V2',
            'minor': 'V0'
          }
        }));

      browser.waitForAngularEnabled(false);
      browser.get('/settings/policies');
    });

    it('displays heading', () => {
      const heading = $('chef-heading');
      expect(heading.getText()).toBe('Policies');
    });

    it('displays policy list component', () => {
      const policyList = $('app-policy-list');
      expect(policyList).not.toBeNull();
    });

    describe('displays the alphabetically sorted policies', () => {
      it('first policy', () => {
        const name = $('app-policy-list chef-table chef-tr:nth-child(1) chef-td:first-child a');
        expect(name.getText()).toBe('Administrator All Access');

        const policyType = $('chef-table chef-tr:nth-child(1) chef-td:nth-child(2)');
        expect(policyType.getText()).toBe('Chef-managed');

        const members = $('app-policy-list chef-table chef-tr:nth-child(1) chef-td:nth-child(3)');
        expect(members.getText()).toBe('In use');
      });

      it('second policy', () => {
        const name = $('app-policy-list chef-table chef-tr:nth-child(2) chef-td:first-child a');
        expect(name.getText()).toBe('Some policy whose name does not start with A');

        const policyType = $('chef-table chef-tr:nth-child(2) chef-td:nth-child(2)');
        expect(policyType.getText()).toBe('Custom');

        const members = $('app-policy-list chef-table chef-tr:nth-child(2) chef-td:nth-child(3)');
        expect(members.getText()).toBe('No members');
      });
    });

    describe('control menu', () => {
      it('is not displayed for chef-managed policies', () => {
        // admin policy row
        expect($(`chef-table chef-tbody chef-tr:nth-child(1)
          chef-control-menu`).isPresent()).toBeFalsy();
      });
      it('is displayed for custom policies', () => {
        // custom policy row
        const controlButton = $('chef-table chef-tbody chef-tr:nth-child(2) chef-control-menu');
        expect(controlButton.isPresent()).toBeTruthy();
      });
      ['Delete Policy'].forEach((item, index) => {
        it(`when clicked, shows ${item}`, () => {
          const controlButton = $('chef-table chef-tbody chef-tr:nth-child(2) chef-control-menu');
          controlButton.click();
          const dropDownOption = controlButton.$(`chef-option:nth-child(${index + 1}`);
          const dropDownOpened = () => dropDownOption.getText().then(val => val === item);
          browser.wait(dropDownOpened, 100, 'Control options should render.');
        });
      });

      it('after delete clicked, policy removed from list once', () => {
        fakeServer()
          .delete('/apis/iam/v2beta/policies/some-policy-id')
          .many()
          .reply(200);

        const somePolicy = $('chef-table chef-tbody chef-tr:nth-child(2)');

        // open control menu
        const controlButton = somePolicy.$('chef-control-menu');
        controlButton.click();

        // select Delete Policy
        const deleteOption = controlButton.$('chef-option:nth-child(1)');
        browser.wait(EC.visibilityOf(deleteOption), 100, 'Delete option should render');
        deleteOption.click();

        const deleteModal = $('app-delete-object-modal');
        browser.wait(EC.visibilityOf(deleteModal), 100, 'Delete confirm modal should render');
        // confirm
        deleteModal.$('chef-button:first-child button').click();

        browser.wait(EC.not(EC.presenceOf(somePolicy)), 300, 'Deleted policy should be gone');
      });
    });
  });

  describe('Policy details', () => {
    beforeEach(() => {
      fakeServer()
        .get('/apis/iam/v2beta/policies/some-test-policy')
        .many()
        .reply(200, JSON.stringify(
          { policy:
            {
              id: 'some-test-policy',
              name: 'All access policy',
              members: [ 'team:local:admins' ],
              type: 'CHEF_MANAGED'
            }
          }
        ));

      fakeServer()
        .get('/apis/iam/v2beta/policy_version')
        .many()
        .reply(200, JSON.stringify({
          'version': {
            'major': 'V2',
            'minor': 'V0'
          }
        }));

      browser.waitForAngularEnabled(false);
      browser.get('/settings/policies/some-test-policy');
    });

    describe('policy details', () => {

      it('displays heading', () => {
        const heading = $('chef-heading');
        expect(heading.getText()).toBe('All access policy');
      });

      it('displays the id in the header', () => {
        const idHeader = $('header td:nth-child(1)');
        expect(idHeader.getText()).toBe('some-test-policy');
      });

      it('displays the type in the header', () => {
        const typeHeader = $('header td:nth-child(2)');
        expect(typeHeader.getText()).toBe('Chef-managed');
      });

      it('renders the json', () => {
        const policyJSON = $('chef-snippet pre');
        expect(policyJSON).not.toBeNull();
      });
    });
  });

  // Note(sr): this is exploding in the console, but not failing the test.
  // Let's revisit this red herring, please! =)
  xdescribe('Policy members add', () => {
    beforeEach(() => {

      fakeServer()
        .get('/apis/iam/v2beta/policies/some-test-policy')
        .many()
        .reply(200, JSON.stringify(
          { policy:
            {
              id: 'some-test-policy',
              name: 'Test Policy',
              members: [ 'team:local:testteam', 'user:local:testuser' ],
              type: 'CUSTOM'
            }
          }
        ));

      fakeServer()
        .get('/api/v0/auth/users')
        .many()
        .reply(200, JSON.stringify(
          {
            users: [
              {
                id: 'otheruser',
                name: 'Otheruser',
                email: 'otheruser',
                username: 'otheruser'
              },
              {
                id: 'admin',
                name: 'Local Administrator',
                email: 'admin',
                username: 'admin'
              },
              {
                id: 'testuser',
                name: 'Testuser',
                email: 'testuser',
                username: 'testuser'
              }
            ]
          }
        ));

      fakeServer()
        .get('/api/v0/auth/teams')
        .many()
        .reply(200, JSON.stringify(
          {
            teams: [
              {
                id: 'testteam',
                name: 'testteam',
                description: 'Testteam'
              },
              {
                id: 'admins',
                name: 'admins',
                description: `Members of the admins team, by default,
                have access to all parts of the API.`
              }
            ]
          }
        ));

      browser.waitForAngularEnabled(false);
      browser.get('/settings/policies/some-test-policy/add-members');
    });

    it('displays heading', () => {
      const heading = $('chef-heading h1');
      expect(heading.getText()).toBe('Add Members to Test Policy');
    });

    it('displays the local teams and users that are not yet ' +
    'members in sorted order as links', () => {

      expect($('chef-table chef-tbody chef-tr:nth-child(1) chef-td:nth-child(2) a')
        .getText()).toBe('admin');
      expect($('chef-table chef-tr:nth-child(1) chef-td:nth-child(3)')
        .getText()).toBe('Local user');

      expect($('chef-table chef-tbody chef-tr:nth-child(2) chef-td:nth-child(2) a')
        .getText()).toBe('admins');
      expect($('chef-table chef-tbody chef-tr:nth-child(2) chef-td:nth-child(3)')
        .getText()).toBe('Local team');

      expect($('chef-table chef-tbody chef-tr:nth-child(3) chef-td:nth-child(2) a')
        .getText()).toBe('otheruser');
      expect($('chef-table chef-tbody chef-tr:nth-child(3) chef-td:nth-child(3)')
        .getText()).toBe('Local user');
    });

    describe('when a single member is added and submitted', () => {
      beforeEach(() => {
        fakeServer()
          .post('/apis/iam/v2beta/policies/some-test-policy/members:add',
          {
            'members': [ 'user:local:admin' ]
          })
          .many()
          .reply(200, JSON.stringify(
            { policy:
              {
                id: 'some-test-policy',
                name: 'Test Policy',
                members: [ 'team:local:admin', 'team:local:testteam', 'user:local:testuser' ],
                type: 'CUSTOM'
              }
            }
          ));
      });

      it('it enables the add button, changes its text, and sends the request', () => {
        expect($('#right-buttons chef-button:first-child').getAttribute('disabled')).toBe('true');

        $('chef-table chef-tbody chef-tr:nth-child(1) chef-td:nth-child(1) chef-checkbox').click();
        expect($('#right-buttons chef-button:first-child').getText()).toBe('Add Member');
        expect($('#right-buttons chef-button:first-child').getAttribute('disabled')).toBeNull();

        $('#right-buttons chef-button:first-child').click();
      });
    });

    describe('when multiple members are selected and added', () => {
      beforeEach(() => {
        fakeServer()
          .post('/apis/iam/v2beta/policies/some-test-policy/members:add',
          {
            'members': [ 'user:local:admin', 'team:local:admins' ]
          })
          .many()
          .reply(200, JSON.stringify(
            { policy:
              {
                id: 'some-test-policy',
                name: 'Test Policy',
                members: [ 'team:local:admin', 'team:local:testteam', 'user:local:testuser' ],
                type: 'CUSTOM'
              }
            }
          ));
      });

      it('it enables the add button, changes its text to indicate multiple members, ' +
      'and sends the request', () => {
        expect($('#right-buttons chef-button:first-child').getAttribute('disabled')).toBe('true');

        $('chef-table chef-tbody chef-tr:nth-child(1) chef-td:nth-child(1) chef-checkbox').click();
        $('chef-table chef-tbody chef-tr:nth-child(2) chef-td:nth-child(1) chef-checkbox').click();

        expect($('#right-buttons chef-button:first-child').getAttribute('disabled')).toBeNull();
        expect($('#right-buttons chef-button:first-child').getText()).toBe('Add 2 Members');

        $('#right-buttons chef-button:first-child').click();
      });
    });

    describe('when a custom expression is added and submitted' +
    'with incorrect expressions initially inputted', () => {

      beforeEach(() => {
        fakeServer()
          .post('/apis/iam/v2beta/policies/some-test-policy/members:add',
          {
            'members': [ 'user:ldap:*' ]
          })
          .many()
          .reply(200, JSON.stringify(
            { policy:
              {
                id: 'some-test-policy',
                name: 'Test Policy',
                members: [ 'team:local:admin', 'team:local:testteam', 'user:local:testuser' ],
                type: 'CUSTOM'
              }
            }
          ));
      });

      it('shows errors for the incorrect inputs, adds and pre-selects the ' +
      'valid member to the table, and submits the request', () => {

        // Open modal
        $('#footer .add-member-button').click();

        // Button starts out disabled
        expect($('app-policy-add-members chef-modal chef-button:first-child')
          .getAttribute('disabled')).toBe('true');

        // Type an invalid expression, press submit and see error
        $('app-policy-add-members chef-modal chef-form-field input').sendKeys('something:invalid');
        expect($('app-policy-add-members chef-modal chef-button:first-child')
          .getAttribute('disabled')).toBeNull();
        $('app-policy-add-members chef-modal chef-button:first-child').click();
        expect($('app-policy-add-members chef-form-field .errors chef-error').getText())
          .toBe('Invalid member expression.');

        // When the member is already in the policy, you'll get an error
        $('app-policy-add-members chef-modal chef-form-field input').clear();
        $('app-policy-add-members chef-modal chef-form-field input')
          .sendKeys('team:local:testteam');
        expect($('app-policy-add-members chef-modal chef-button:first-child')
          .getAttribute('disabled')).toBeNull();
        $('app-policy-add-members chef-modal chef-button:first-child').click();
        expect($('app-policy-add-members chef-form-field .errors chef-error').getText())
          .toBe('Member already in policy.');

        // When the member is already in the table, you'll get an error
        $('app-policy-add-members chef-modal chef-form-field input').clear();
        $('app-policy-add-members chef-modal chef-form-field input').sendKeys('team:local:admins');
        expect($('app-policy-add-members chef-modal chef-button:first-child')
          .getAttribute('disabled')).toBeNull();
        $('app-policy-add-members chef-modal chef-button:first-child').click();
        expect($('app-policy-add-members chef-form-field .errors chef-error').getText())
          .toBe('Member expression already in table.');

        // Type a valid expression and submit
        $('app-policy-add-members chef-modal chef-form-field input').clear();
        $('app-policy-add-members chef-modal chef-form-field input').sendKeys('user:ldap:*');
        expect($('app-policy-add-members chef-modal chef-button:first-child')
          .getAttribute('disabled')).toBeNull();
        $('app-policy-add-members chef-modal chef-button:first-child').click();

        // Add members button should be enabled and should be added to table in sorted way
        expect($('#right-buttons chef-button:first-child').getText()).toBe('Add Member');

        expect($('chef-table chef-tbody chef-tr:nth-child(1) chef-td:nth-child(2) a').getText())
          .toBe('admin');
        expect($('chef-table chef-tr:nth-child(1) chef-td:nth-child(3)').getText())
          .toBe('Local user');

        expect($('chef-table chef-tbody chef-tr:nth-child(2) chef-td:nth-child(2) a').getText())
          .toBe('admins');
        expect($('chef-table chef-tbody chef-tr:nth-child(2) chef-td:nth-child(3)').getText())
          .toBe('Local team');

        // Non-local users / teams don't have a link and are pre-selected
        expect($('chef-table chef-tbody chef-tr:nth-child(3) chef-td:nth-child(1) chef-checkbox')
          .getAttribute('ng-reflect-checked')).toBe('true');
        expect($('chef-table chef-tbody chef-tr:nth-child(3) chef-td:nth-child(2)')
          .getText()).toBe('All LDAP users');
        expect($('chef-table chef-tbody chef-tr:nth-child(3) chef-td:nth-child(3)')
          .getText()).toBe('All LDAP users');

        expect($('chef-table chef-tbody chef-tr:nth-child(4) chef-td:nth-child(2) a').getText())
          .toBe('otheruser');
        expect($('chef-table chef-tbody chef-tr:nth-child(4) chef-td:nth-child(3)').getText())
          .toBe('Local user');

        expect($('#right-buttons chef-button:first-child').getAttribute('disabled')).toBeNull();
        expect($('#right-buttons chef-button:first-child').getText()).toBe('Add Member');

        // Submit to API
        $('#right-buttons chef-button:first-child').click();
      });
    });
  });

  describe('Roles list', () => {
    beforeEach(() => {
      fakeServer()
        .post('/api/v0/auth/introspect_some', JSON.stringify(
          {
            paths: [
              '/iam/v2beta/roles'
            ]
          }
        ))
        .many()
        .reply(200, JSON.stringify(
          {
            endpoints: {
              '/iam/v2beta/roles': {
                get: true,
                put: false,
                post: true,
                delete: false,
                patch: false
              }
            }
          }
        ));

      fakeServer()
        .get('/apis/iam/v2beta/roles')
        .many()
        .reply(200, JSON.stringify(
          {
            roles: [
              {
                id: '514c7547-e858-4b3c-a48f-2448320aeea5',
                name: 'Some role whose name does not start with A',
                actions: [],
                type: 'CUSTOM'
              },
              {
                id: 'c4a60965-95f7-44f3-b21d-0b27e478c0cc',
                name: 'Owner',
                actions: [ 'secrets:*' ],
                type: 'CHEF_MANAGED'
              }
            ]
          }
        ));

      fakeServer()
        .get('/apis/iam/v2beta/policy_version')
        .many()
        .reply(200, JSON.stringify({
          'version': {
            'major': 'V2',
            'minor': 'V0'
          }
        }));

      browser.waitForAngularEnabled(false);
      browser.get('/settings/roles');
    });

    it('displays heading', () => {
      const heading = $('chef-heading');
      expect(heading.getText()).toBe('Roles');
    });

    it('displays role list component', () => {
      const rolesList = $('app-roles-list');
      expect(rolesList).not.toBeNull();
    });

    describe('displays the alphabetically sorted first role with name and type', () => {
      it('first role', () => {
        const name = $('app-roles-list chef-table chef-tr:nth-child(1) chef-td:first-child a');
        expect(name.getText()).toBe('Owner');

        const policyType = $('chef-table chef-tr:nth-child(1) chef-td:nth-child(2)');
        expect(policyType.getText()).toBe('Chef-managed');
      });

      it('second role', () => {
        const name = $('app-roles-list chef-table chef-tr:nth-child(2) chef-td:first-child a');
        expect(name.getText()).toBe('Some role whose name does not start with A');

        const policyType = $('chef-table chef-tr:nth-child(2) chef-td:nth-child(2)');
        expect(policyType.getText()).toBe('Custom');
      });
    });
  });

  describe('Role details', () => {
    beforeEach(() => {
      fakeServer()
        .get('/apis/iam/v2beta/roles/some-test-role')
        .many()
        .reply(200, JSON.stringify(
          {
            role: {
              id: 'some-test-role',
              name: 'Owner',
              actions: [ 'secrets:*', 'other:*' ],
              type: 'CHEF_MANAGED'
            }
          }
        ));

      fakeServer()
        .get('/apis/iam/v2beta/policy_version')
        .many()
        .reply(200, JSON.stringify({
          'version': {
            'major': 'V2',
            'minor': 'V0'
          }
        }));

      browser.waitForAngularEnabled(false);
      browser.get('/settings/roles/some-test-role');
    });

    describe('Role details', () => {

      it('displays heading', () => {
        const heading = $('chef-heading');
        expect(heading.getText()).toBe('Owner');
      });

      it('displays the id in the header', () => {
        const idHeader = $('header td:nth-child(1)');
        expect(idHeader.getText()).toBe('some-test-role');
      });

      it('displays the type in the header', () => {
        const typeHeader = $('header td:nth-child(2)');
        expect(typeHeader.getText()).toBe('Chef-managed');
      });

      it('renders the json', () => {
        const rolesList = $('chef-snippet pre');
        expect(rolesList).not.toBeNull();
      });
    });
  });

  describe('Projects list', () => {
    beforeEach(() => {
      fakeServer()
        .post('/api/v0/auth/introspect_some', JSON.stringify(
          {
            paths: [
              '/iam/v2beta/projects'
            ]
          }
        ))
        .many()
        .reply(200, JSON.stringify(
          {
            endpoints: {
              '/iam/v2beta/projects': {
                get: true,
                put: false,
                post: true,
                delete: false,
                patch: false
              }
            }
          }
        ));

      fakeServer()
        .get('/apis/iam/v2beta/projects')
        .many()
        .reply(200, JSON.stringify(
          {
            projects: [
              {
                id: 'project-9',
                name: 'Some project whose name does not start with A',
                type: 'CUSTOM'
              },
              {
                id: 'default',
                name: 'Default Project',
                type: 'CHEF_MANAGED'
              },
              {
                id: 'project-19',
                name: 'This is custom, and authz allows deletion',
                type: 'CUSTOM'
              }
            ]
          }
        ));

      // mock up app-authorized responses
      [
        ['project-9', false],
        ['default', false],
        ['project-19', true]
      ].forEach(([id, deletable]) => {
        const path = `/iam/v2beta/projects/${id}`;
        const endpoints = {
          [path]: {
            get: true,
            put: false,
            post: true,
            delete: deletable,
            patch: false
          }
        };
        fakeServer()
          .post('/api/v0/auth/introspect', JSON.stringify(
            {
              path,
              parameters: []
            }
          ))
          .many()
          .reply(200, JSON.stringify({ endpoints }));
      });

      fakeServer()
        .get('/apis/iam/v2beta/policy_version')
        .many()
        .reply(200, JSON.stringify({
          'version': {
            'major': 'V2',
            'minor': 'V1'
          }
        }));

      browser.waitForAngularEnabled(false);
      browser.get('/settings/projects');
    });

    it('displays heading', () => {
      const heading = $('chef-heading');
      browser.wait(EC.visibilityOf(heading), 200, 'chef-heading should render');
      expect(heading.getText()).toBe('Projects');
    });

    it('displays project list component', () => {
      const projectsList = $('app-project-list');
      browser.wait(EC.visibilityOf(projectsList), 200, 'project list should render');
      expect(projectsList).not.toBeNull();
    });

    describe('displays the first project (cannot be deleted and is chef-managed)', () => {
      it('shows name and type', () => {
        const name = $(
          'app-project-list chef-table chef-tbody chef-tr:nth-child(1) chef-td:nth-child(1) a');
        browser.wait(EC.visibilityOf(name), 200, 'first project should render');
        expect(name.getText()).toBe('Default Project');
        expect(name.getAttribute('href')).toMatch(/\/settings\/projects\/default$/);

        const projectType = $(
          'app-project-list chef-table chef-tbody chef-tr:nth-child(1) chef-td:nth-child(2)');
        expect(projectType.getText()).toBe('Chef-managed');
      });

      it('does not show the control button', () => {
        const controlButton = $(
          'app-project-list chef-table chef-tbody chef-tr:nth-child(1) ' +
          'chef-td:nth-child(3) chef-control-menu');
        expect(controlButton.isPresent()).toEqual(false);
      });
    });

    describe('displays the second project (cannot be deleted, custom)', () => {
      it('shows name and type', () => {
        const name = $(
          'app-project-list chef-table chef-tbody chef-tr:nth-child(2) chef-td:nth-child(1) a');
        browser.wait(EC.visibilityOf(name), 200, 'second project should render');
        expect(name.getText()).toBe('Some project whose name does not start with A');
        expect(name.getAttribute('href')).toMatch(/\/settings\/projects\/project-9$/);

        const projectType = $(
          'app-project-list chef-table chef-tbody chef-tr:nth-child(2) chef-td:nth-child(2)');
        expect(projectType.getText()).toBe('Custom');
      });

      it('does not show the control button', () => {
        const controlButton = $(
          'app-project-list chef-table chef-tbody chef-tr:nth-child(2) ' +
          'chef-td:nth-child(3) chef-control-menu');
        expect(controlButton.isPresent()).toEqual(false);
      });
    });

    describe('displays the third project (can be deleted, custom)', () => {
      it('shows name and type', () => {
        const name = $(
          'app-project-list chef-table chef-tbody chef-tr:nth-child(3) chef-td:nth-child(1) a');
        browser.wait(EC.visibilityOf(name), 200, 'third project should render');
        expect(name.getText()).toBe('This is custom, and authz allows deletion');

        const projectType = $(
          'app-project-list chef-table chef-tbody chef-tr:nth-child(3) chef-td:nth-child(2)');
        expect(projectType.getText()).toBe('Custom');
      });

      it('shows the control button', () => {
        const controlButton = $(
          'app-project-list chef-table chef-tbody chef-tr:nth-child(3) ' +
          'chef-td:nth-child(3) chef-control-menu');
        expect(controlButton.isPresent()).toBeTruthy();

        [ 'Delete Project' ].forEach((item, index) => {
          it(`when clicked, shows ${item}`, () => {
            $('app-project-list chef-table chef-tbody chef-tr:nth-child(2) ' +
            'chef-td:nth-child(3) chef-control-menu').
              click();
            const dropDownOption = $(
              `app-project-list chef-table chef-tbody chef-tr:nth-child(2)
                chef-td:nth-child(3) chef-control-menu chef-option:nth-child(${index + 1})`);
            const dropDownOpened = () => dropDownOption.getText().then(val => val === item);
            browser.wait(dropDownOpened, 100, 'Control options should render.');
          });
        });
      });

      it('after delete is clicked and if the backend call succeeds, ' +
      'project is removed from list', () => {
        fakeServer()
          .delete('/apis/iam/v2beta/projects/project-19')
          .min(1).max(1)
          .reply(200);

        const third = $('app-project-list chef-table chef-tbody chef-tr:nth-child(3)');

        // open control menu
        const controlButton = third.$('chef-control-menu');
        controlButton.click();

        // select Delete Project
        const deleteOption = controlButton.$('chef-option:nth-child(1)');
        browser.wait(EC.visibilityOf(deleteOption), 100, 'Delete option should render');
        deleteOption.click();

        // confirm Delete in modal
        const deleteModal = $('app-delete-object-modal');
        browser.wait(EC.presenceOf(deleteModal), 100, 'Delete confirm modal should appear');

        // confirm
        deleteModal.$('chef-button:first-child button').click();

        browser.wait(EC.not(EC.presenceOf(third)), 200, 'third row should disappear');
      });
    });

    describe('when project create is clicked', () => {
      let editButton;
      let createButton;

      beforeEach(() => {
        $('app-project-list #create-button button').click();
        editButton = $('app-create-object-modal #edit-button-object-modal button');
        createButton = $('app-create-object-modal #create-button-object-modal button');
      });

      describe('when the id is not edited', () => {
        beforeEach(() => {
          fakeServer()
            .post('/apis/iam/v2beta/projects', JSON.stringify(
              {
                id: 'test-name',
                name: 'Test Name'
              }
            ))
            .min(1).max(1)
            .reply(200, JSON.stringify(
              {
                project: {
                  name: 'Test Name',
                  id: 'test-name',
                  type: 'CUSTOM',
                  projects: ['test-name']
                }
              }
            ));
        });

        it('opens the create modal with only the ID input, generates ID automatically, ' +
          'and submits', () => {
          const createModal = $('app-create-object-modal');
          expect(createModal.$$('input').count()).toBe(1);
          expect(editButton.isPresent()).toBeTruthy();

          createModal.$('input').sendKeys('Test Name');

          expect(createModal.$('#id-fields span:nth-child(2)').getText()).toBe('test-name');

          expect(createButton.isPresent()).toBeTruthy();
          createButton.click();

          // Note: if the create modal goes away, the request sent by the
          // click() above has hit the backend
          browser.wait(EC.not(EC.presenceOf(createModal)), 300, 'Create modal should go away');
        });
      });

      describe('when the id is edited', () => {
        beforeEach(() => {
          fakeServer()
            .post('/apis/iam/v2beta/projects', JSON.stringify(
              {
                id: 'custom-id',
                name: 'Test Name'
              }
            ))
            .min(1).max(1)
            .reply(200, JSON.stringify(
              {
                project: {
                  name: 'Test Name',
                  id: 'custom-id',
                  type: 'CUSTOM',
                  projects: ['custom-id']
                }
              }
            ));
        });

        it('it opens the second input when edit is clicked first, ' +
          'accepts custom input, and submits', () => {
          const createModal = $('app-create-object-modal');
          expect(createModal.$$('input').count()).toBe(1);
          expect(editButton.isPresent()).toBeTruthy();

          createModal.$('#edit-button-object-modal button').click();

          expect(createModal.$$('input').count()).toBe(2);
          expect(editButton.isPresent()).toBeFalsy();

          $('app-create-object-modal #id-input').sendKeys('custom-id');
          $('app-create-object-modal #name-input').sendKeys('Test Name');

          createButton.click();
          browser.wait(EC.not(EC.presenceOf(createModal)), 300, 'Create modal should go away');
        });
      });
    });
  });

  describe('Project details (custom)', () => {
    beforeEach(() => {
      fakeServer()
        .get('/apis/iam/v2beta/projects/my-project')
        .many()
        .reply(200, JSON.stringify(
          {
            project: {
              id: 'my-project',
              name: 'My Project',
              projects: ['my-project'],
              type: 'CUSTOM'
            }
          }
        ));

      browser.waitForAngularEnabled(false);
      browser.get('/settings/projects/my-project');
    });

    describe('project details', () => {
      it('displays heading', () => {
        const heading = $('chef-heading');
        expect(heading.getText()).toBe('My Project');
      });

      it('displays the id in the header', () => {
        const idHeader = $('header td:nth-child(1)');
        expect(idHeader.getText()).toBe('my-project');
      });

      it('displays the type in the header', () => {
        const typeHeader = $('header td:nth-child(2)');
        expect(typeHeader.getText()).toBe('Custom');
      });

      describe('before any typing occurs', () => {
        it('displays the project name in the input and the save button is disabled', () => {
          const projectNameInput = $('app-project-details section form chef-form-field input');
          expect(projectNameInput.getAttribute('value')).toBe('My Project');

          const projectSaveButton = $('app-project-details section #button-bar button');
          expect(projectSaveButton.getAttribute('disabled')).toBe('true');
        });
      });

      describe('when the input value is changed to something new and saved', () => {
        beforeEach(() => {
          fakeServer()
            .put('/apis/iam/v2beta/projects/my-project',
              JSON.stringify({ name: 'My Project Changed' }))
            .many()
            .reply(200, JSON.stringify(
              {
                project: {
                  id: 'my-project',
                  name: 'My Project Changed',
                  projects: ['my-project'],
                  type: 'CUSTOM'
                }
              }
            ));
            browser.waitForAngularEnabled(false);
            browser.get('/settings/projects/my-project');
        });

        it('enables the save button, updates the project, and notes the save, ' +
        'and then removes note once more typing occurs', () => {
          const projectSaveButton = $('app-project-details section #button-bar button');
          const projectNameInput = $('app-project-details section form chef-form-field input');
          expect(projectSaveButton.getAttribute('disabled')).toBe('true');
          expect(projectNameInput.getAttribute('disabled')).toBeNull();

          projectNameInput.sendKeys(' Changed');
          expect(projectNameInput.getAttribute('value')).toBe('My Project Changed');

          expect(projectSaveButton.getAttribute('disabled')).toBeNull();

          // Save the project
          $('app-project-details section #button-bar chef-button').click();

          const heading = $('chef-heading');
          expect(heading.getText()).toBe('My Project Changed');
          expect(projectSaveButton.getAttribute('disabled')).toBe('true');
          expect($('app-project-details section #button-bar #save-note').getText())
            .toBe('All changes saved.');

          // Type once more
          projectNameInput.sendKeys(' Once More');
          expect(projectSaveButton.getAttribute('disabled')).toBeNull();

          // Removed save note
          expect($('app-project-details section #button-bar #save-note').isPresent()).toBeFalsy();
        });
      });
    });
  });

  // TODO (tc): This whole block can go away once the 6 project limit is removed.
  describe('projects list when the max of 6 projects is reached', () => {
    beforeEach(() => {
      fakeServer()
      .post('/api/v0/auth/introspect_some', JSON.stringify(
        {
          paths: [
            '/iam/v2beta/projects'
          ]
        }
      ))
      .many()
      .reply(200, JSON.stringify(
        {
          endpoints: {
            '/iam/v2beta/projects': {
              get: true,
              put: false,
              post: true,
              delete: false,
              patch: false
            }
          }
        }
      ));

    fakeServer()
    .get('/apis/iam/v2beta/projects')
    .many()
    .reply(200, JSON.stringify(
      {
        projects: [
          {
            id: 'project-1',
            name: 'project',
            type: 'CUSTOM'
          },
          {
            id: 'project-2',
            name: 'project',
            type: 'CUSTOM'
          },
          {
            id: 'project-3',
            name: 'project',
            type: 'CUSTOM'
          },
          {
            id: 'project-4',
            name: 'project',
            type: 'CUSTOM'
          },
          {
            id: 'project-5',
            name: 'project',
            type: 'CUSTOM'
          },
          {
            id: 'project-6',
            name: 'project',
            type: 'CUSTOM'
          }
        ]
      }
    ));

    // mock up app-authorized responses
    [
      ['project-1', true],
      ['project-2', true],
      ['project-3', true],
      ['project-4', true],
      ['project-5', true],
      ['project-6', true]
    ].forEach(([id, deletable]) => {
      const path = `/iam/v2beta/projects/${id}`;
      const endpoints = {
        [path]: {
          get: true,
          put: false,
          post: true,
          delete: deletable,
          patch: false
        }
      };
      fakeServer()
        .post('/api/v0/auth/introspect', JSON.stringify(
          {
            path,
            parameters: []
          }
        ))
        .many()
        .reply(200, JSON.stringify({ endpoints }));
    });

    fakeServer()
      .get('/apis/iam/v2beta/policy_version')
      .many()
      .reply(200, JSON.stringify({
        'version': {
          'major': 'V2',
          'minor': 'V1'
        }
      }));

      browser.waitForAngularEnabled(false);
      browser.get('/settings/projects');
    });

    it('disables the create project button', () => {
      const createButton = $('app-project-list #create-button');
      expect(createButton.getAttribute('disabled')).toBe('true');
    });
  });

  describe('Project details (Chef-managed)', () => {
    beforeEach(() => {
      fakeServer()
        .get('/apis/iam/v2beta/projects/default')
        .many()
        .reply(200, JSON.stringify(
          {
            project: {
              id: 'default',
              name: 'Default Project',
              projects: ['default'],
              type: 'CHEF_MANAGED'
            }
          }
        ));

      browser.waitForAngularEnabled(false);
      browser.get('/settings/projects/default');
    });

    describe('Chef-managed project details', () => {
      it('the input is disabled, the save button is hidden, and the no changes allowed ' +
        'span is displayed', () => {
        const projectSaveButton = $('app-project-details section #button-bar button');
        const projectNameInput = $('app-project-details section form chef-form-field input');
        const projectNoChangesSpan = $('app-project-details section form #changes-not-allowed');
        expect(projectSaveButton.isPresent()).toBeFalsy();
        expect(projectNameInput.getAttribute('disabled')).toBeTruthy();
        expect(projectNoChangesSpan.getText())
          .toBe('Name changes are not allowed for the default project.');
      });
    });
  });
});
