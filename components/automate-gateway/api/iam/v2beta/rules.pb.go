// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2beta/rules.proto

package v2beta // import "github.com/chef/automate/components/automate-gateway/api/iam/v2beta"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import request "github.com/chef/automate/components/automate-gateway/api/iam/v2beta/request"
import response "github.com/chef/automate/components/automate-gateway/api/iam/v2beta/response"
import _ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
import _ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RulesClient is the client API for Rules service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RulesClient interface {
	CreateRule(ctx context.Context, in *request.CreateRuleReq, opts ...grpc.CallOption) (*response.CreateRuleResp, error)
	GetRule(ctx context.Context, in *request.GetRuleReq, opts ...grpc.CallOption) (*response.GetRuleResp, error)
	ListRules(ctx context.Context, in *request.ListRulesReq, opts ...grpc.CallOption) (*response.ListRulesResp, error)
}

type rulesClient struct {
	cc *grpc.ClientConn
}

func NewRulesClient(cc *grpc.ClientConn) RulesClient {
	return &rulesClient{cc}
}

func (c *rulesClient) CreateRule(ctx context.Context, in *request.CreateRuleReq, opts ...grpc.CallOption) (*response.CreateRuleResp, error) {
	out := new(response.CreateRuleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2beta.Rules/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) GetRule(ctx context.Context, in *request.GetRuleReq, opts ...grpc.CallOption) (*response.GetRuleResp, error) {
	out := new(response.GetRuleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2beta.Rules/GetRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) ListRules(ctx context.Context, in *request.ListRulesReq, opts ...grpc.CallOption) (*response.ListRulesResp, error) {
	out := new(response.ListRulesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2beta.Rules/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RulesServer is the server API for Rules service.
type RulesServer interface {
	CreateRule(context.Context, *request.CreateRuleReq) (*response.CreateRuleResp, error)
	GetRule(context.Context, *request.GetRuleReq) (*response.GetRuleResp, error)
	ListRules(context.Context, *request.ListRulesReq) (*response.ListRulesResp, error)
}

func RegisterRulesServer(s *grpc.Server, srv RulesServer) {
	s.RegisterService(&_Rules_serviceDesc, srv)
}

func _Rules_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2beta.Rules/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).CreateRule(ctx, req.(*request.CreateRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2beta.Rules/GetRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).GetRule(ctx, req.(*request.GetRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListRulesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2beta.Rules/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).ListRules(ctx, req.(*request.ListRulesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rules_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2beta.Rules",
	HandlerType: (*RulesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRule",
			Handler:    _Rules_CreateRule_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _Rules_GetRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _Rules_ListRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2beta/rules.proto",
}

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2beta/rules.proto", fileDescriptor_rules_c3778c105100a5f6)
}

var fileDescriptor_rules_c3778c105100a5f6 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xbf, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0x75, 0x94, 0x16, 0x6a, 0x7e, 0xf4, 0xea, 0x4a, 0xc8, 0x8a, 0x3a, 0xdd, 0x04, 0x2d,
	0x67, 0x4b, 0x45, 0x62, 0xc8, 0x00, 0x88, 0x0a, 0xb1, 0x30, 0x55, 0x62, 0x61, 0xf3, 0x99, 0x47,
	0xce, 0x52, 0x12, 0xbb, 0xf1, 0x0b, 0xa8, 0x42, 0x2c, 0x19, 0xb3, 0xf2, 0xb7, 0x64, 0x62, 0x64,
	0x65, 0x63, 0x63, 0xe6, 0x0f, 0x41, 0x76, 0x8e, 0xa4, 0x90, 0xf6, 0x94, 0x1b, 0x9d, 0xf7, 0x7d,
	0x5f, 0x7f, 0x3f, 0x7e, 0x2f, 0xe4, 0xa9, 0x32, 0x99, 0x35, 0x39, 0xe4, 0xe8, 0x84, 0x2c, 0xd1,
	0x64, 0x12, 0x61, 0x9e, 0x48, 0x84, 0x4f, 0xf2, 0x42, 0x48, 0xab, 0x85, 0x96, 0x99, 0xf8, 0x78,
	0xb2, 0x00, 0x94, 0xa2, 0x28, 0x53, 0x70, 0xdc, 0x16, 0x06, 0x0d, 0x3d, 0x54, 0x4b, 0xf8, 0xc0,
	0xff, 0x76, 0x70, 0x69, 0x35, 0xd7, 0x32, 0xe3, 0xad, 0x32, 0x3a, 0x4c, 0x8c, 0x49, 0x52, 0x08,
	0x06, 0x32, 0xcf, 0x0d, 0x4a, 0xd4, 0x26, 0x5f, 0xf5, 0x46, 0xcf, 0x36, 0xb9, 0x13, 0xce, 0x4b,
	0x70, 0x78, 0xf9, 0xee, 0xe8, 0xf9, 0x46, 0xfd, 0xce, 0x9a, 0xdc, 0xc1, 0x3f, 0x06, 0x2f, 0xae,
	0x34, 0x28, 0xac, 0x12, 0xa1, 0xae, 0xe6, 0x09, 0xe4, 0x73, 0x6b, 0x52, 0xad, 0x2e, 0xae, 0x41,
	0xd8, 0xc4, 0xc1, 0xa7, 0x19, 0x38, 0x9c, 0xfc, 0xba, 0x49, 0xb6, 0xcf, 0x7c, 0x26, 0xfa, 0x63,
	0x42, 0xc8, 0x69, 0x01, 0x12, 0xc1, 0x9f, 0xe9, 0x31, 0x5f, 0xf7, 0xb4, 0xbc, 0x57, 0x9e, 0xc1,
	0x79, 0xf4, 0x78, 0xbc, 0xd8, 0xd9, 0x99, 0xaa, 0x1a, 0x76, 0x97, 0x10, 0x59, 0xe2, 0x32, 0x0e,
	0xef, 0x51, 0x35, 0xec, 0x36, 0xdd, 0x51, 0x41, 0x55, 0x37, 0xec, 0x0e, 0xd9, 0xd5, 0x32, 0x6b,
	0x4b, 0x75, 0xc3, 0x28, 0x9d, 0x76, 0xc7, 0xb8, 0x15, 0x55, 0x3f, 0x7f, 0x7f, 0xbd, 0x71, 0x30,
	0xdb, 0x1f, 0xac, 0x45, 0x28, 0x6c, 0xc5, 0x93, 0x23, 0xfa, 0x7d, 0x42, 0x6e, 0xbd, 0x06, 0x0c,
	0x2c, 0x0f, 0xd7, 0xc7, 0x5b, 0xc9, 0x3c, 0xc8, 0xa3, 0x91, 0xca, 0x15, 0xc5, 0x3e, 0xd9, 0xeb,
	0x29, 0xe2, 0xcf, 0xfa, 0xfd, 0x97, 0xaa, 0x61, 0xdb, 0x74, 0x2b, 0x01, 0xac, 0x1b, 0x36, 0x25,
	0xf7, 0xfb, 0xe0, 0xbe, 0x58, 0x37, 0x6c, 0x8f, 0xde, 0xeb, 0xbf, 0x25, 0x80, 0x21, 0x30, 0xa3,
	0x0f, 0x06, 0x24, 0xc2, 0x37, 0xd0, 0x6f, 0x13, 0xb2, 0xfb, 0x46, 0x3b, 0x6c, 0x47, 0x74, 0xb4,
	0x3e, 0x5d, 0x27, 0xf4, 0x24, 0xc7, 0xa3, 0xb5, 0xce, 0xce, 0xde, 0x5e, 0x31, 0x91, 0x0e, 0xe3,
	0xbf, 0x71, 0x4c, 0xe9, 0x25, 0xaa, 0x54, 0xbb, 0x16, 0xe1, 0x80, 0x0e, 0x87, 0xf1, 0xf2, 0xd5,
	0xbb, 0xd3, 0x44, 0xe3, 0xb2, 0x5c, 0x70, 0x65, 0x32, 0xe1, 0xf3, 0x74, 0x5b, 0x2a, 0xc6, 0xff,
	0x3c, 0x8b, 0x9d, 0xb0, 0xaa, 0x4f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x6a, 0x2c, 0xec,
	0x25, 0x04, 0x00, 0x00,
}
