// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2/teams.proto

package v2

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2/request"
	response "github.com/chef/automate/components/automate-gateway/api/iam/v2/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2/teams.proto", fileDescriptor_16a78463b445c3d8)
}

var fileDescriptor_16a78463b445c3d8 = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x8e, 0xe3, 0x44,
	0x10, 0xc6, 0xe5, 0x08, 0xc2, 0x6e, 0xc3, 0xee, 0x4e, 0x6a, 0xb3, 0xc1, 0x0a, 0xa3, 0x05, 0x35,
	0xbb, 0xb0, 0x0a, 0x8c, 0x2d, 0x32, 0x9c, 0xcc, 0x01, 0x02, 0x23, 0xe0, 0xc0, 0x20, 0x34, 0x9a,
	0xe1, 0x90, 0x5b, 0xc7, 0x6e, 0x1c, 0xa3, 0x38, 0xee, 0x71, 0x77, 0x06, 0x0d, 0x08, 0x21, 0x45,
	0xe2, 0x12, 0x04, 0x17, 0x24, 0x90, 0x40, 0x9c, 0x78, 0x06, 0xdf, 0x91, 0x10, 0x2f, 0x00, 0x2f,
	0xc0, 0x01, 0x89, 0xd7, 0x40, 0xdd, 0x9d, 0x89, 0xed, 0xf1, 0x9f, 0x38, 0x68, 0x8f, 0x71, 0xfd,
	0x2a, 0xae, 0xaf, 0xaa, 0x3e, 0x77, 0xa3, 0xa1, 0x1b, 0x85, 0x2c, 0x9a, 0xd3, 0xb9, 0xe0, 0x36,
	0x59, 0x88, 0x28, 0x24, 0x82, 0x1e, 0xf8, 0x44, 0xd0, 0xcf, 0xc8, 0xa5, 0x4d, 0x58, 0x60, 0x07,
	0x24, 0xb4, 0x2f, 0x86, 0xb6, 0xa0, 0x24, 0xe4, 0x16, 0x8b, 0x23, 0x11, 0x81, 0xe9, 0x4e, 0xe9,
	0x27, 0xd6, 0x15, 0x6d, 0x11, 0x16, 0x58, 0x01, 0x09, 0xad, 0x8b, 0x61, 0x7f, 0xdf, 0x8f, 0x22,
	0x7f, 0x46, 0x55, 0x22, 0x99, 0xcf, 0x23, 0x41, 0x44, 0x10, 0xcd, 0xd7, 0x79, 0x7d, 0xa7, 0xe1,
	0xbb, 0x62, 0x7a, 0xbe, 0xa0, 0x5c, 0x64, 0xdf, 0xd9, 0x7f, 0xa3, 0x71, 0x2e, 0x67, 0xd1, 0x9c,
	0xd3, 0x5c, 0xf2, 0x5b, 0xa5, 0xc9, 0x31, 0x73, 0x6d, 0x15, 0x77, 0x0f, 0x7c, 0x3a, 0x3f, 0x60,
	0xd1, 0x2c, 0x70, 0x2f, 0x2b, 0x4a, 0xdf, 0xe5, 0x1f, 0x64, 0x25, 0x85, 0x7f, 0x18, 0xfe, 0xdc,
	0x45, 0x4f, 0x9e, 0xca, 0x9a, 0xe0, 0x0f, 0x03, 0xdd, 0xfc, 0x20, 0xe0, 0x42, 0xff, 0x7a, 0xc9,
	0xaa, 0xea, 0xa6, 0xb5, 0x81, 0x4e, 0xe8, 0x79, 0xff, 0xe5, 0x46, 0x1c, 0x67, 0xd8, 0x5f, 0x26,
	0xe6, 0x33, 0x08, 0x91, 0x85, 0x98, 0x3a, 0xaa, 0x09, 0xcb, 0xc4, 0x6c, 0xc3, 0x13, 0x31, 0x25,
	0xde, 0x2a, 0x31, 0x9f, 0x46, 0x37, 0x03, 0x12, 0xea, 0xc0, 0x2a, 0x31, 0xf7, 0xe0, 0xf6, 0xe6,
	0xa7, 0x33, 0x0b, 0xb8, 0x58, 0xfe, 0xf5, 0xcf, 0xf7, 0xad, 0x07, 0x70, 0x2b, 0x37, 0xf7, 0xf1,
	0x5d, 0xe8, 0xac, 0x1f, 0x4c, 0xa8, 0x20, 0xfa, 0x21, 0xfc, 0x69, 0xa0, 0xa7, 0xde, 0xa3, 0xea,
	0xcd, 0xf0, 0xa0, 0xba, 0xba, 0x35, 0x22, 0x35, 0x3c, 0x6c, 0x40, 0x71, 0x86, 0x3f, 0x5f, 0x26,
	0x66, 0x07, 0xdd, 0x49, 0x15, 0x38, 0x5f, 0x04, 0xde, 0x97, 0x39, 0x19, 0x7b, 0x28, 0x53, 0xb7,
	0x8c, 0xae, 0x12, 0xf3, 0x0e, 0xdc, 0x4a, 0x9f, 0xf9, 0x54, 0x4b, 0xb1, 0x00, 0x72, 0x52, 0x6c,
	0x09, 0x8f, 0x4d, 0xe8, 0x15, 0xf4, 0xa8, 0x88, 0x14, 0x85, 0xde, 0x89, 0x29, 0x11, 0x54, 0xe9,
	0xaa, 0xe9, 0x7a, 0x4a, 0x49, 0x69, 0x8f, 0x9a, 0x81, 0x9c, 0xe1, 0xf3, 0x92, 0xf9, 0xdc, 0x80,
	0xb6, 0xab, 0xa8, 0xe2, 0x84, 0x00, 0xf6, 0x52, 0x55, 0x1a, 0x52, 0xc2, 0x06, 0x38, 0x3f, 0x23,
	0xc7, 0x18, 0x8c, 0x7b, 0xb8, 0x38, 0x26, 0xc7, 0x18, 0xc0, 0xbf, 0x06, 0x42, 0x67, 0xcc, 0x6b,
	0x20, 0x2a, 0xa5, 0xb6, 0x88, 0xca, 0x82, 0x9c, 0xe1, 0xaf, 0x8d, 0xaa, 0x99, 0xdd, 0x80, 0xf6,
	0x42, 0xb1, 0x15, 0x53, 0xcb, 0xe9, 0xd3, 0xa4, 0xd2, 0xf7, 0x7a, 0xbf, 0x64, 0x70, 0x52, 0xe4,
	0x73, 0xfd, 0x8a, 0xd9, 0x49, 0xa5, 0x7f, 0x1b, 0x08, 0x1d, 0xd1, 0x19, 0xdd, 0xae, 0x34, 0xa5,
	0xb6, 0x28, 0xcd, 0x82, 0x9c, 0xe1, 0xaf, 0x6a, 0x84, 0x7a, 0x0a, 0x6d, 0x22, 0x54, 0x93, 0x7a,
	0x43, 0x07, 0xa5, 0x1b, 0x3a, 0xa8, 0xda, 0xd0, 0xef, 0x5a, 0xa8, 0xb3, 0x76, 0xcb, 0x31, 0x0d,
	0x27, 0x34, 0xe6, 0xd3, 0x80, 0x81, 0xb5, 0xd5, 0x5a, 0x29, 0x2c, 0x05, 0xdb, 0x3b, 0xf1, 0x9c,
	0xe1, 0x1f, 0xe5, 0x84, 0x9f, 0x45, 0xf7, 0xae, 0x09, 0x77, 0x16, 0x9c, 0xc6, 0xf9, 0x4f, 0x4c,
	0x0f, 0x75, 0xf3, 0xe2, 0x35, 0xb3, 0x4a, 0xcc, 0x2e, 0xc0, 0x55, 0xe4, 0x4c, 0x3e, 0x4a, 0xbf,
	0x38, 0x0e, 0x98, 0xc5, 0x26, 0xd8, 0x2a, 0x6f, 0x7c, 0x1f, 0xf6, 0xcb, 0x5b, 0xa1, 0xe3, 0xf0,
	0x4d, 0x0b, 0xdd, 0x1e, 0x79, 0x5e, 0xa6, 0x66, 0x78, 0xa5, 0x5a, 0x5d, 0x9e, 0x94, 0xad, 0x78,
	0xb5, 0x39, 0xcc, 0x19, 0xfe, 0xa5, 0x6e, 0xd3, 0x37, 0x26, 0x2e, 0x5b, 0x80, 0x1e, 0x74, 0xf3,
	0xea, 0x33, 0x6e, 0x7e, 0x1f, 0xef, 0x57, 0xe9, 0x77, 0x88, 0xe7, 0xc9, 0xbd, 0x7f, 0x88, 0x5f,
	0xa8, 0x6b, 0xc3, 0x1a, 0x83, 0x9f, 0x5a, 0xa8, 0x73, 0x42, 0xc3, 0xe8, 0x82, 0x66, 0x1b, 0x52,
	0xb3, 0x1e, 0x05, 0x78, 0xcb, 0x7a, 0x94, 0xf0, 0x9c, 0xe1, 0x5f, 0x8d, 0xff, 0xeb, 0x8b, 0x42,
	0x5b, 0x32, 0xde, 0xf8, 0x10, 0x3f, 0x5f, 0xd9, 0x96, 0x58, 0xd5, 0x21, 0x3b, 0xf3, 0x08, 0xbf,
	0x58, 0xdb, 0x99, 0x0d, 0x09, 0xdf, 0xa6, 0xde, 0xe1, 0xef, 0x46, 0xb1, 0x16, 0xd0, 0xc0, 0x3b,
	0x29, 0xdc, 0xcc, 0x3b, 0x59, 0x9e, 0x33, 0xfc, 0x43, 0xd6, 0x3b, 0xba, 0x26, 0xe5, 0x8b, 0xe2,
	0xf1, 0xbc, 0xf6, 0xce, 0x75, 0x66, 0x95, 0x98, 0x77, 0xa1, 0x73, 0x15, 0x39, 0xcd, 0x9d, 0x70,
	0x0e, 0xde, 0x58, 0x47, 0xa5, 0x69, 0xe5, 0xfa, 0xdc, 0xbe, 0x8f, 0x73, 0xd6, 0xb9, 0x1e, 0x87,
	0xdf, 0x0d, 0x74, 0x6f, 0xc4, 0xd8, 0xec, 0xf2, 0xe3, 0xe1, 0x11, 0x11, 0xe4, 0x38, 0xf0, 0x63,
	0x7d, 0x69, 0x81, 0x61, 0x8d, 0x29, 0xca, 0x12, 0x64, 0x5f, 0x0e, 0x77, 0xce, 0xe1, 0x0c, 0x8f,
	0xca, 0x8f, 0xc3, 0xcd, 0x99, 0x51, 0x77, 0x1c, 0x6a, 0x08, 0x7e, 0x33, 0x50, 0xf7, 0x84, 0x72,
	0x2a, 0x46, 0xb3, 0x99, 0xec, 0xcd, 0x47, 0x71, 0xf4, 0x29, 0x75, 0x05, 0x87, 0xd7, 0xea, 0xb6,
	0xb8, 0xc8, 0x4b, 0x0d, 0xc3, 0x5d, 0x53, 0x1e, 0x8b, 0x84, 0xb7, 0x47, 0xe3, 0x37, 0xfd, 0x40,
	0x4c, 0x17, 0x13, 0xcb, 0x8d, 0x42, 0x5b, 0x96, 0xb0, 0xb9, 0x66, 0xda, 0xcd, 0x6e, 0xbe, 0x93,
	0xb6, 0xba, 0x67, 0x1e, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x83, 0xa7, 0x71, 0x23, 0xd2, 0x0b,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TeamsClient is the client API for Teams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeamsClient interface {
	ListTeams(ctx context.Context, in *request.ListTeamsReq, opts ...grpc.CallOption) (*response.ListTeamsResp, error)
	GetTeam(ctx context.Context, in *request.GetTeamReq, opts ...grpc.CallOption) (*response.GetTeamResp, error)
	CreateTeam(ctx context.Context, in *request.CreateTeamReq, opts ...grpc.CallOption) (*response.CreateTeamResp, error)
	UpdateTeam(ctx context.Context, in *request.UpdateTeamReq, opts ...grpc.CallOption) (*response.UpdateTeamResp, error)
	DeleteTeam(ctx context.Context, in *request.DeleteTeamReq, opts ...grpc.CallOption) (*response.DeleteTeamResp, error)
	GetTeamMembership(ctx context.Context, in *request.GetTeamMembershipReq, opts ...grpc.CallOption) (*response.GetTeamMembershipResp, error)
	AddTeamMembers(ctx context.Context, in *request.AddTeamMembersReq, opts ...grpc.CallOption) (*response.AddTeamMembersResp, error)
	RemoveTeamMembers(ctx context.Context, in *request.RemoveTeamMembersReq, opts ...grpc.CallOption) (*response.RemoveTeamMembersResp, error)
	GetTeamsForMember(ctx context.Context, in *request.GetTeamsForMemberReq, opts ...grpc.CallOption) (*response.GetTeamsForMemberResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	ApplyV2DataMigrations(ctx context.Context, in *request.ApplyV2DataMigrationsReq, opts ...grpc.CallOption) (*response.ApplyV2DataMigrationsResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	ResetAllTeamProjects(ctx context.Context, in *request.ResetAllTeamProjectsReq, opts ...grpc.CallOption) (*response.ResetAllTeamProjectsResp, error)
}

type teamsClient struct {
	cc *grpc.ClientConn
}

func NewTeamsClient(cc *grpc.ClientConn) TeamsClient {
	return &teamsClient{cc}
}

func (c *teamsClient) ListTeams(ctx context.Context, in *request.ListTeamsReq, opts ...grpc.CallOption) (*response.ListTeamsResp, error) {
	out := new(response.ListTeamsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/ListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetTeam(ctx context.Context, in *request.GetTeamReq, opts ...grpc.CallOption) (*response.GetTeamResp, error) {
	out := new(response.GetTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) CreateTeam(ctx context.Context, in *request.CreateTeamReq, opts ...grpc.CallOption) (*response.CreateTeamResp, error) {
	out := new(response.CreateTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) UpdateTeam(ctx context.Context, in *request.UpdateTeamReq, opts ...grpc.CallOption) (*response.UpdateTeamResp, error) {
	out := new(response.UpdateTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) DeleteTeam(ctx context.Context, in *request.DeleteTeamReq, opts ...grpc.CallOption) (*response.DeleteTeamResp, error) {
	out := new(response.DeleteTeamResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetTeamMembership(ctx context.Context, in *request.GetTeamMembershipReq, opts ...grpc.CallOption) (*response.GetTeamMembershipResp, error) {
	out := new(response.GetTeamMembershipResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/GetTeamMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) AddTeamMembers(ctx context.Context, in *request.AddTeamMembersReq, opts ...grpc.CallOption) (*response.AddTeamMembersResp, error) {
	out := new(response.AddTeamMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/AddTeamMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) RemoveTeamMembers(ctx context.Context, in *request.RemoveTeamMembersReq, opts ...grpc.CallOption) (*response.RemoveTeamMembersResp, error) {
	out := new(response.RemoveTeamMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/RemoveTeamMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetTeamsForMember(ctx context.Context, in *request.GetTeamsForMemberReq, opts ...grpc.CallOption) (*response.GetTeamsForMemberResp, error) {
	out := new(response.GetTeamsForMemberResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/GetTeamsForMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) ApplyV2DataMigrations(ctx context.Context, in *request.ApplyV2DataMigrationsReq, opts ...grpc.CallOption) (*response.ApplyV2DataMigrationsResp, error) {
	out := new(response.ApplyV2DataMigrationsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/ApplyV2DataMigrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) ResetAllTeamProjects(ctx context.Context, in *request.ResetAllTeamProjectsReq, opts ...grpc.CallOption) (*response.ResetAllTeamProjectsResp, error) {
	out := new(response.ResetAllTeamProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Teams/ResetAllTeamProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsServer is the server API for Teams service.
type TeamsServer interface {
	ListTeams(context.Context, *request.ListTeamsReq) (*response.ListTeamsResp, error)
	GetTeam(context.Context, *request.GetTeamReq) (*response.GetTeamResp, error)
	CreateTeam(context.Context, *request.CreateTeamReq) (*response.CreateTeamResp, error)
	UpdateTeam(context.Context, *request.UpdateTeamReq) (*response.UpdateTeamResp, error)
	DeleteTeam(context.Context, *request.DeleteTeamReq) (*response.DeleteTeamResp, error)
	GetTeamMembership(context.Context, *request.GetTeamMembershipReq) (*response.GetTeamMembershipResp, error)
	AddTeamMembers(context.Context, *request.AddTeamMembersReq) (*response.AddTeamMembersResp, error)
	RemoveTeamMembers(context.Context, *request.RemoveTeamMembersReq) (*response.RemoveTeamMembersResp, error)
	GetTeamsForMember(context.Context, *request.GetTeamsForMemberReq) (*response.GetTeamsForMemberResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	ApplyV2DataMigrations(context.Context, *request.ApplyV2DataMigrationsReq) (*response.ApplyV2DataMigrationsResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	ResetAllTeamProjects(context.Context, *request.ResetAllTeamProjectsReq) (*response.ResetAllTeamProjectsResp, error)
}

// UnimplementedTeamsServer can be embedded to have forward compatible implementations.
type UnimplementedTeamsServer struct {
}

func (*UnimplementedTeamsServer) ListTeams(ctx context.Context, req *request.ListTeamsReq) (*response.ListTeamsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (*UnimplementedTeamsServer) GetTeam(ctx context.Context, req *request.GetTeamReq) (*response.GetTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedTeamsServer) CreateTeam(ctx context.Context, req *request.CreateTeamReq) (*response.CreateTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (*UnimplementedTeamsServer) UpdateTeam(ctx context.Context, req *request.UpdateTeamReq) (*response.UpdateTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedTeamsServer) DeleteTeam(ctx context.Context, req *request.DeleteTeamReq) (*response.DeleteTeamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedTeamsServer) GetTeamMembership(ctx context.Context, req *request.GetTeamMembershipReq) (*response.GetTeamMembershipResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMembership not implemented")
}
func (*UnimplementedTeamsServer) AddTeamMembers(ctx context.Context, req *request.AddTeamMembersReq) (*response.AddTeamMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeamMembers not implemented")
}
func (*UnimplementedTeamsServer) RemoveTeamMembers(ctx context.Context, req *request.RemoveTeamMembersReq) (*response.RemoveTeamMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamMembers not implemented")
}
func (*UnimplementedTeamsServer) GetTeamsForMember(ctx context.Context, req *request.GetTeamsForMemberReq) (*response.GetTeamsForMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsForMember not implemented")
}
func (*UnimplementedTeamsServer) ApplyV2DataMigrations(ctx context.Context, req *request.ApplyV2DataMigrationsReq) (*response.ApplyV2DataMigrationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyV2DataMigrations not implemented")
}
func (*UnimplementedTeamsServer) ResetAllTeamProjects(ctx context.Context, req *request.ResetAllTeamProjectsReq) (*response.ResetAllTeamProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAllTeamProjects not implemented")
}

func RegisterTeamsServer(s *grpc.Server, srv TeamsServer) {
	s.RegisterService(&_Teams_serviceDesc, srv)
}

func _Teams_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListTeamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).ListTeams(ctx, req.(*request.ListTeamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetTeam(ctx, req.(*request.GetTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).CreateTeam(ctx, req.(*request.CreateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).UpdateTeam(ctx, req.(*request.UpdateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).DeleteTeam(ctx, req.(*request.DeleteTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetTeamMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetTeamMembershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetTeamMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/GetTeamMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetTeamMembership(ctx, req.(*request.GetTeamMembershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_AddTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.AddTeamMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).AddTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/AddTeamMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).AddTeamMembers(ctx, req.(*request.AddTeamMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_RemoveTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RemoveTeamMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).RemoveTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/RemoveTeamMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).RemoveTeamMembers(ctx, req.(*request.RemoveTeamMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetTeamsForMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetTeamsForMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetTeamsForMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/GetTeamsForMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetTeamsForMember(ctx, req.(*request.GetTeamsForMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_ApplyV2DataMigrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ApplyV2DataMigrationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).ApplyV2DataMigrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/ApplyV2DataMigrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).ApplyV2DataMigrations(ctx, req.(*request.ApplyV2DataMigrationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_ResetAllTeamProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResetAllTeamProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).ResetAllTeamProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Teams/ResetAllTeamProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).ResetAllTeamProjects(ctx, req.(*request.ResetAllTeamProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Teams_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2.Teams",
	HandlerType: (*TeamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTeams",
			Handler:    _Teams_ListTeams_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _Teams_GetTeam_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _Teams_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _Teams_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _Teams_DeleteTeam_Handler,
		},
		{
			MethodName: "GetTeamMembership",
			Handler:    _Teams_GetTeamMembership_Handler,
		},
		{
			MethodName: "AddTeamMembers",
			Handler:    _Teams_AddTeamMembers_Handler,
		},
		{
			MethodName: "RemoveTeamMembers",
			Handler:    _Teams_RemoveTeamMembers_Handler,
		},
		{
			MethodName: "GetTeamsForMember",
			Handler:    _Teams_GetTeamsForMember_Handler,
		},
		{
			MethodName: "ApplyV2DataMigrations",
			Handler:    _Teams_ApplyV2DataMigrations_Handler,
		},
		{
			MethodName: "ResetAllTeamProjects",
			Handler:    _Teams_ResetAllTeamProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2/teams.proto",
}
