syntax = "proto3";

package chef.automate.api.iam.v2;
option go_package = "github.com/chef/automate/components/automate-gateway/api/iam/v2";

import "google/api/annotations.proto";
import "components/automate-gateway/api/iam/v2/request/tokens.proto";
import "components/automate-gateway/api/iam/v2/response/tokens.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service Tokens {
  rpc CreateToken (CreateTokenReq) returns (CreateTokenResp) {
    option (google.api.http).post = "/iam/v2beta/tokens";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:tokens";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:tokens";
    option (chef.automate.api.iam.policy).action = "iam:tokens:create";
  };
  rpc GetToken (GetTokenReq) returns (GetTokenResp) {
    option (google.api.http).get = "/iam/v2beta/tokens/{id}";
    option (chef.automate.api.policy).resource = "auth:tokens:{id}";
    option (chef.automate.api.policy).action = "get";
    option (chef.automate.api.iam.policy).resource = "iam:tokens:{id}";
    option (chef.automate.api.iam.policy).action = "iam:tokens:get";
  };
  rpc UpdateToken (UpdateTokenReq) returns (UpdateTokenResp) {
    option (google.api.http).put = "/iam/v2beta/tokens/{id}";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:tokens:{id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:tokens:{id}";
    option (chef.automate.api.iam.policy).action = "iam:tokens:update";
  };
  rpc DeleteToken (DeleteTokenReq) returns (DeleteTokenResp) {
    option (google.api.http).delete = "/iam/v2beta/tokens/{id}";
    option (chef.automate.api.policy).resource = "auth:tokens:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:tokens:{id}";
    option (chef.automate.api.iam.policy).action = "iam:tokens:delete";
  };
  rpc ListTokens (ListTokensReq) returns (ListTokensResp) {
    option (google.api.http).get = "/iam/v2beta/tokens";
    option (chef.automate.api.policy).resource = "auth:tokens";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:tokens";
    option (chef.automate.api.iam.policy).action = "iam:tokens:list";
  }
  // Expose on GRPC API only so we don't expose this to the enduser.
  // Just want to be able to trigger this via automate-cli.
  rpc ResetAllTokenProjects (ResetAllTokenProjectsReq) returns (ResetAllTokenProjectsResp) {
    option (chef.automate.api.policy).resource = "auth:tokens";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:tokens";
    option (chef.automate.api.iam.policy).action = "iam:tokens:update";
  }
};
