syntax = "proto3";

package chef.automate.api.iam.v2;
option go_package = "github.com/chef/automate/components/automate-gateway/api/iam/v2";

import "google/api/annotations.proto";

import "components/automate-gateway/api/iam/v2/request/users.proto";
import "components/automate-gateway/api/iam/v2/response/users.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service Users {
  rpc CreateUser (CreateUserReq) returns (CreateUserResp) {
    option (google.api.http) = {
      post: "/iam/v2/users"
      body: "*"
      additional_bindings {
        post: "/iam/v2beta/users",
        body: "*"
      }
    };
    option (chef.automate.api.policy).resource = "auth:users";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:users";
    option (chef.automate.api.iam.policy).action = "iam:users:create";
  };
  rpc ListUsers (ListUsersReq) returns (ListUsersResp) {
    option (google.api.http) = {
      get: "/iam/v2/users"
      additional_bindings {
        get: "/iam/v2beta/users"
      }
    };
    option (chef.automate.api.policy).resource = "auth:users";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:users";
    option (chef.automate.api.iam.policy).action = "iam:users:list";
  };
  rpc GetUser (GetUserReq) returns (GetUserResp) {
    option (google.api.http) = {
      get: "/iam/v2/users/{id}"
      additional_bindings {
        get: "/iam/v2beta/users/{id}"
      }
    };
    option (chef.automate.api.policy).resource = "auth:users:{id}";
    option (chef.automate.api.policy).action = "get";
    option (chef.automate.api.iam.policy).resource = "iam:users:{id}";
    option (chef.automate.api.iam.policy).action = "iam:users:get";
  };
  rpc DeleteUser (DeleteUserReq) returns (DeleteUserResp) {
    option (google.api.http) = {
      delete: "/iam/v2/users/{id}"
      additional_bindings {
        delete: "/iam/v2beta/users/{id}"
      }
    };
    option (chef.automate.api.policy).resource = "auth:users:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:users:{id}";
    option (chef.automate.api.iam.policy).action = "iam:users:delete";
  };
  rpc UpdateUser (UpdateUserReq) returns (UpdateUserResp) {
    option (google.api.http) = {
      put: "/iam/v2/users/{id}"
      body: "*"
      additional_bindings {
        put: "/iam/v2beta/users/{id}",
        body: "*"
      }
    };
    option (chef.automate.api.policy).resource = "auth:users:{id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:users:{id}";
    option (chef.automate.api.iam.policy).action = "iam:users:update";
  };
  rpc UpdateSelf (UpdateSelfReq) returns (UpdateSelfResp) {
    option (google.api.http) = {
      put: "/iam/v2/self/{id}"
      body: "*"
      additional_bindings {
        put: "/iam/v2beta/self/{id}",
        body: "*"
      }
    };
    // The users namespace, as opposed for auth:users, is for actions users
    // are allowed to perform on themselves by default without admin permissions.
    option (chef.automate.api.policy).resource = "users:{id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:usersSelf:{id}";
    option (chef.automate.api.iam.policy).action = "iam:usersSelf:update";
  };
};
