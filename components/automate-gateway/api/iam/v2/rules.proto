syntax = "proto3";

package chef.automate.api.iam.v2;
option go_package = "github.com/chef/automate/components/automate-gateway/api/iam/v2";

import "google/api/annotations.proto";

import "components/automate-gateway/api/iam/v2/request/rules.proto";
import "components/automate-gateway/api/iam/v2/response/rules.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service Rules {
  rpc CreateRule (CreateRuleReq) returns (CreateRuleResp) {
    option (google.api.http) = {
      post: "/iam/v2/projects/{project_id}/rules"
      body: "*"
      additional_bindings {
        post: "/iam/v2beta/projects/{project_id}/rules",
        body: "*"
      }
    };
    option (chef.automate.api.policy).resource = "auth:projects:{project_id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{project_id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:update";
  };

  rpc UpdateRule (UpdateRuleReq) returns (UpdateRuleResp) {
    option (google.api.http) = {
      put: "/iam/v2/projects/{project_id}/rules/{id}"
      body: "*"
      additional_bindings {
        put: "/iam/v2beta/projects/{project_id}/rules/{id}",
        body: "*"
      }
    };
    option (chef.automate.api.policy).resource = "auth:projects:{project_id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{project_id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:update";
  };

  rpc GetRule (GetRuleReq) returns (GetRuleResp) {
    option (google.api.http) = {
      get: "/iam/v2/projects/{project_id}/rules/{id}"
      additional_bindings {
        get: "/iam/v2beta/projects/{project_id}/rules/{id}"
      }
    };
    option (chef.automate.api.policy).resource = "auth:projects:{project_id}";
    option (chef.automate.api.policy).action = "get";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{project_id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:get";
  };

  rpc ListRulesForProject (ListRulesForProjectReq) returns (ListRulesForProjectResp) {
    option (google.api.http) = {
      get: "/iam/v2/projects/{id}/rules"
      additional_bindings {
        get: "/iam/v2beta/projects/{id}/rules"
      }
    };
    option (chef.automate.api.policy).resource = "auth:projects:{id}";
    option (chef.automate.api.policy).action = "get";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:get";
  };

  rpc DeleteRule (DeleteRuleReq) returns (DeleteRuleResp) {
    option (google.api.http) = {
      delete: "/iam/v2/projects/{project_id}/rules/{id}"
      additional_bindings {
        delete: "/iam/v2beta/projects/{project_id}/rules/{id}"
      }
    };
    option (chef.automate.api.policy).resource = "auth:projects:{project_id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{project_id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:update";
  };

  rpc ApplyRulesStart (ApplyRulesStartReq) returns (ApplyRulesStartResp) {
    option (google.api.http) = {
      post: "/iam/v2/apply-rules"
      additional_bindings {
        post: "/iam/v2beta/apply-rules"
      }
    };
    option (chef.automate.api.policy).resource = "auth:rules";
    option (chef.automate.api.policy).action = "apply-rules-start";
    option (chef.automate.api.iam.policy).resource = "iam:rules";
    option (chef.automate.api.iam.policy).action = "iam:rules:apply";
  };

  rpc ApplyRulesCancel (ApplyRulesCancelReq) returns (ApplyRulesCancelResp) {
    option (google.api.http) = {
      delete: "/iam/v2/apply-rules"
      additional_bindings {
        delete: "/iam/v2beta/apply-rules"
      }
    };
    option (chef.automate.api.policy).resource = "auth:rules";
    option (chef.automate.api.policy).action = "apply-rules-cancel";
    option (chef.automate.api.iam.policy).resource = "iam:rules";
    option (chef.automate.api.iam.policy).action = "iam:rules:cancel";
  };

  rpc ApplyRulesStatus (ApplyRulesStatusReq) returns (ApplyRulesStatusResp) {
    option (google.api.http) = {
      get: "/iam/v2/apply-rules"
      additional_bindings {
        get: "/iam/v2beta/apply-rules"
      }
    };
    option (chef.automate.api.policy).resource = "auth:rules";
    option (chef.automate.api.policy).action = "apply-rules-status";
    option (chef.automate.api.iam.policy).resource = "iam:rules";
    option (chef.automate.api.iam.policy).action = "iam:rules:status";
  };
}
