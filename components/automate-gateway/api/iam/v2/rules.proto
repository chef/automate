syntax = "proto3";

package chef.automate.api.iam.v2;
option go_package = "github.com/chef/automate/components/automate-gateway/api/iam/v2";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "components/automate-gateway/api/iam/v2/request/rules.proto";
import "components/automate-gateway/api/iam/v2/response/rules.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service Rules {

  /*
  Creates a project rule

  Creates a new project rule to be used to associate ingested resources with projects within Automate.

  A project rule contains conditions that determine if an ingested resource should be moved into the rule’s project. 

  Each project rule condition specifies a value or values to match for a particular attribute on an ingested resource. 
  The choice of attributes depends on the rule type, either NODE or EVENT.

  Each rule condition also specifies an operator, either MEMBER_OF, 
  in the case of multiple values, or EQUALS, in the case of a single value. 

  Authorization Action:
  ```
  iam:projects:update
  ```
  */
  rpc CreateRule (CreateRuleReq) returns (CreateRuleResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "rules";
			extensions: {
				key: "x-code-samples";
				value {
					list_value: {
						values: {
							struct_value {
								fields {
									key: "lang";
									value {
										string_value: "JSON";
									}
								}
								fields {
									key: "source";
									value {
                    string_value: '{"id": "example-rule", "project-id": "example-project", "name": "My Example Rule", "type": "NODE", "conditions": [{"attribute": "CHEF_SERVER", "operator": "MEMBER_OF", "values": ["example.co", "example.io"]}]}'
                  }
								}
							}
						}
					}
				}
			}
		};
    option (google.api.http) = {
      post: "/iam/v2/projects/{project_id}/rules"
      body: "*"
    };
    option (chef.automate.api.policy).resource = "auth:projects:{project_id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{project_id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:update";
  };

  /*
  Updates a project rule

  Updates the name and conditions of an existing project rule.
  New conditions can be added. Existing conditions can be updated or removed.

  This operation overwrites all fields excepting ID and Type,
  including those omitted from the request, so be sure to specify all properties.
  Properties that you do not include are reset to empty values.

  The resulting change to the project's resources does not take effect immediately. 
  Updates to project rules must be applied to ingested resources by a project update.

  Authorization Action:
  ```
  iam:projects:update
  ```
  */
  rpc UpdateRule (UpdateRuleReq) returns (UpdateRuleResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
			tags: "rules";
			extensions: {
				key: "x-code-samples";
				value {
					list_value: {
						values: {
							struct_value {
								fields {
									key: "lang";
									value {
										string_value: "JSON";
									}
								}
								fields {
									key: "source";
									value {
                    string_value: '{"id": "example-rule", "project-id": "example-project", "name": "My Updated Rule", "type": "NODE", "conditions": [{"attribute": "CHEF_SERVER", "operator": "EQUALS", "values": ["example.co"]}]}'
                  }
								}
							}
						}
					}
				}
			}
		};
    option (google.api.http) = {
      put: "/iam/v2/projects/{project_id}/rules/{id}"
      body: "*"
    };
    option (chef.automate.api.policy).resource = "auth:projects:{project_id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{project_id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:update";
  };

  /*
  Gets a project rule

  Returns the details for a project rule.

  Authorization Action:
  ```
  iam:projects:get
  ```
  */
  rpc GetRule (GetRuleReq) returns (GetRuleResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "rules";
    };
    option (google.api.http) = {
      get: "/iam/v2/projects/{project_id}/rules/{id}"
    };
    option (chef.automate.api.policy).resource = "auth:projects:{project_id}";
    option (chef.automate.api.policy).action = "get";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{project_id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:get";
  };

  /*
  Lists a project's rules

  Lists all of the project rules of a specific project.

  Authorization Action:
  ```
  iam:projects:get
  ```
  */
  rpc ListRulesForProject (ListRulesForProjectReq) returns (ListRulesForProjectResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "rules";
    };
    option (google.api.http) = {
      get: "/iam/v2/projects/{id}/rules"
    };
    option (chef.automate.api.policy).resource = "auth:projects:{id}";
    option (chef.automate.api.policy).action = "get";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:get";
  };

  /*
  Deletes a project rule

  The resulting change to the project's resources does not take effect immediately. 
  Updates to project rules must be applied to ingested resources by a project update.

  Authorization Action:
  ```
  iam:projects:update
  ```
  */
  rpc DeleteRule (DeleteRuleReq) returns (DeleteRuleResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "rules";
    };
    option (google.api.http) = {
      delete: "/iam/v2/projects/{project_id}/rules/{id}"
    };
    option (chef.automate.api.policy).resource = "auth:projects:{project_id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{project_id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:update";
  };

  /*
  Starts project update

  Any changes to a project's rules are staged first. They do not take effect until 
  all projects are updated.

  Updating all projects begins an operation that applies all pending rule edits 
  and then moves ingested resources into the correct projects according to those latest changes.

  With a large amount of historical compliance data, rule application can take a considerable amount of time.
  It’s best to batch up rule changes and apply them all at once.

  Authorization Action:
  ```
  iam:rules:apply
  ```
  */
  rpc ApplyRulesStart (ApplyRulesStartReq) returns (ApplyRulesStartResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "rules";
    };
    option (google.api.http) = {
      post: "/iam/v2/apply-rules"
    };
    option (chef.automate.api.policy).resource = "auth:rules";
    option (chef.automate.api.policy).action = "apply-rules-start";
    option (chef.automate.api.iam.policy).resource = "iam:rules";
    option (chef.automate.api.iam.policy).action = "iam:rules:apply";
  };

  /*
  Cancels project update

  Cancels an ongoing project update. This action leaves the system in an unknown state that
  only another successful project update can rectify.

  Authorization Action:
  ```
  iam:rules:cancel
  ```
  */
  rpc ApplyRulesCancel (ApplyRulesCancelReq) returns (ApplyRulesCancelResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "rules";
    };
    option (google.api.http) = {
      delete: "/iam/v2/apply-rules"
    };
    option (chef.automate.api.policy).resource = "auth:rules";
    option (chef.automate.api.policy).action = "apply-rules-cancel";
    option (chef.automate.api.iam.policy).resource = "iam:rules";
    option (chef.automate.api.iam.policy).action = "iam:rules:cancel";
  };

  /*
  Gets the status of a project update

  Gets the percentage complete of an ongoing project update and whether or not it failed

  Authorization Action:
  ```
  iam:rules:status
  ```
  */
  rpc ApplyRulesStatus (ApplyRulesStatusReq) returns (ApplyRulesStatusResp) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "rules";
    };
    option (google.api.http) = {
      get: "/iam/v2/apply-rules"
    };
    option (chef.automate.api.policy).resource = "auth:rules";
    option (chef.automate.api.policy).action = "apply-rules-status";
    option (chef.automate.api.iam.policy).resource = "iam:rules";
    option (chef.automate.api.iam.policy).action = "iam:rules:status";
  };
}
