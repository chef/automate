syntax = "proto3";

package chef.automate.api.iam.v2;
option go_package = "github.com/chef/automate/components/automate-gateway/api/iam/v2/request";

import "components/automate-gateway/api/iam/v2/common/rules.proto";

import "protoc-gen-swagger/options/annotations.proto";

message CreateRuleReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "project_id", "name", "type", "conditions"]
    }
  };
  string id = 1;
  string project_id = 2;
  string name = 3;
  RuleType type = 4;
  repeated Condition conditions = 5;
}

message UpdateRuleReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "project_id", "name", "type", "conditions"]
    }
  };
  string id = 1;
  string project_id = 2;
  string name = 3;
  RuleType type = 4;
  repeated Condition conditions = 5;
}

message GetRuleReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "project_id" ]
    }
  };
  string id = 1;
  string project_id = 2;
}

message ListRulesReq {}

message ListRulesForProjectReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };
  string id = 1;
}

message DeleteRuleReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "project_id" ]
    }
  };
  string id = 1;
  string project_id = 2;
}

message ApplyRulesStartReq {}

message ApplyRulesCancelReq {}

message ApplyRulesStatusReq {}
