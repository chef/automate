syntax = "proto3";

package chef.automate.api.iam.v2beta;
option go_package = "github.com/chef/automate/components/automate-gateway/api/iam/v2beta";

import "google/api/annotations.proto";

import "components/automate-gateway/api/iam/v2beta/request/teams.proto";
import "components/automate-gateway/api/iam/v2beta/response/teams.proto";
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service Teams {
  rpc ListTeams (ListTeamsReq) returns (ListTeamsResp) {
    option (google.api.http).get = "/iam/v2beta/teams";
    option (chef.automate.api.policy).resource = "auth:teams";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:teams";
    option (chef.automate.api.iam.policy).action = "iam:teams:list";
  };
  rpc GetTeam (GetTeamReq) returns (GetTeamResp) {
    option (google.api.http).get = "/iam/v2beta/teams/{id}";
    option (chef.automate.api.policy).resource = "auth:teams:{id}";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}";
    option (chef.automate.api.iam.policy).action = "iam:teams:get";
  };
  rpc CreateTeam (CreateTeamReq) returns (CreateTeamResp) {
    option (google.api.http).post = "/iam/v2beta/teams";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:teams";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:teams";
    option (chef.automate.api.iam.policy).action = "iam:teams:create";
  };
  rpc UpdateTeam (UpdateTeamReq) returns (UpdateTeamResp) {
    option (google.api.http).put = "/iam/v2beta/teams/{id}";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:teams:{id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}";
    option (chef.automate.api.iam.policy).action = "iam:teams:update";
  };
  rpc DeleteTeam (DeleteTeamReq) returns (DeleteTeamResp) {
    option (google.api.http).delete = "/iam/v2beta/teams/{id}";
    option (chef.automate.api.policy).resource = "auth:teams:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}";
    option (chef.automate.api.iam.policy).action = "iam:teams:delete";
  };
  rpc GetTeamMembership (GetTeamMembershipReq) returns (GetTeamMembershipResp) {
    option (google.api.http).get = "/iam/v2beta/teams/{id}/users";
    option (chef.automate.api.policy).resource = "auth:teams:{id}:users";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}:users";
    option (chef.automate.api.iam.policy).action = "iam:teamUsers:list";
  }
  rpc AddTeamMembers (AddTeamMembersReq) returns (AddTeamMembersResp) {
    option (google.api.http).post = "/iam/v2beta/teams/{id}/users:add";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:teams:{id}";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}";
    option (chef.automate.api.iam.policy).action = "iam:teamUsers:create";
  };
  rpc RemoveTeamMembers (RemoveTeamMembersReq) returns (RemoveTeamMembersResp) {
    option (google.api.http).post = "/iam/v2beta/teams/{id}/users:remove";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:teams:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:teams:{id}";
    option (chef.automate.api.iam.policy).action = "iam:teamUsers:delete";
  };
  rpc GetTeamsForMember (GetTeamsForMemberReq) returns (GetTeamsForMemberResp) {
    option (google.api.http).get = "/iam/v2beta/users/{id}/teams";
    option (chef.automate.api.policy).resource = "auth:users:{id}:teams";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:users:{id}:teams";
    option (chef.automate.api.iam.policy).action = "iam:userTeams:get";
  };
  // Expose on GRPC API only so we don't expose this to the enduser.
  // Just want to be able to trigger this via automate-cli.
  rpc ApplyV2DataMigrations (ApplyV2DataMigrationsReq) returns (ApplyV2DataMigrationsResp) {
    // TODO (tc): Are these correct? What do we wanna use here?
    option (chef.automate.api.policy).resource = "auth:teams";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:teams";
    option (chef.automate.api.iam.policy).action = "iam:teams:update";
  };
  // Expose on GRPC API only so we don't expose this to the enduser.
  // Just want to be able to trigger this via automate-cli.
  rpc ResetAllTeamProjects (ResetAllTeamProjectsReq) returns (ResetAllTeamProjectsResp) {
    option (chef.automate.api.policy).resource = "auth:teams";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:teams";
    option (chef.automate.api.iam.policy).action = "iam:teams:update";
  };
}
