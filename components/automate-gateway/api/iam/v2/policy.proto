syntax = "proto3";

package chef.automate.api.iam.v2beta; // discuss
option go_package = "github.com/chef/automate/components/automate-gateway/api/iam/v2beta";

import "google/api/annotations.proto";

import "components/automate-gateway/api/iam/v2beta/request/policy.proto";
import "components/automate-gateway/api/iam/v2beta/response/policy.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service Policies {
  rpc CreatePolicy (CreatePolicyReq) returns (CreatePolicyResp) {
    option (google.api.http).post = "/iam/v2beta/policies";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:policies";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:policies";
    option (chef.automate.api.iam.policy).action = "iam:policies:create";
    };
  rpc GetPolicy (GetPolicyReq) returns (GetPolicyResp) {
    option (google.api.http).get = "/iam/v2beta/policies/{id}";
    option (chef.automate.api.policy).resource = "auth:policies:{id}";
    option (chef.automate.api.policy).action = "get";
    option (chef.automate.api.iam.policy).resource = "iam:policies:{id}";
    option (chef.automate.api.iam.policy).action = "iam:policies:get"; // TODO: check
    };
  rpc ListPolicies (ListPoliciesReq) returns (ListPoliciesResp) {
    option (google.api.http).get = "/iam/v2beta/policies";
    option (chef.automate.api.policy).resource = "auth:policies";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:policies";
    option (chef.automate.api.iam.policy).action = "iam:policies:list";
    };
  rpc DeletePolicy (DeletePolicyReq) returns (DeletePolicyResp) {
    option (google.api.http).delete = "/iam/v2beta/policies/{id}";
    option (chef.automate.api.policy).resource = "auth:policies:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:policies:{id}";
    option (chef.automate.api.iam.policy).action = "iam:policies:delete";
    };
  rpc UpdatePolicy (UpdatePolicyReq) returns (UpdatePolicyResp) {
    option (google.api.http).put = "/iam/v2beta/policies/{id}";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:policies:{id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:policies:{id}";
    option (chef.automate.api.iam.policy).action = "iam:policies:update";
    };
  rpc GetPolicyVersion (GetPolicyVersionReq) returns (GetPolicyVersionResp) {
    option (google.api.http).get = "/iam/v2beta/policy_version";
    option (chef.automate.api.policy).resource = "auth:policies";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:policyVersion";
    option (chef.automate.api.iam.policy).action = "iam:policies:get";
    };
  rpc ListPolicyMembers (ListPolicyMembersReq) returns (ListPolicyMembersResp) {
    option (google.api.http).get = "/iam/v2beta/policies/{id}/members";
    option (chef.automate.api.policy).resource = "auth:policies:{id}";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:policies:{id}:members";
    option (chef.automate.api.iam.policy).action = "iam:policyMembers:get";
    };
  rpc ReplacePolicyMembers (ReplacePolicyMembersReq) returns (ReplacePolicyMembersResp) {
    option (google.api.http).put = "/iam/v2beta/policies/{id}/members";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:policies:{id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:policies:{id}:members";
    option (chef.automate.api.iam.policy).action = "iam:policyMembers:update";
    };
  rpc RemovePolicyMembers (RemovePolicyMembersReq) returns (RemovePolicyMembersResp) {
    option (google.api.http).post = "/iam/v2beta/policies/{id}/members:remove";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:policies:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:policies:{id}:members";
    option (chef.automate.api.iam.policy).action = "iam:policyMembers:delete";
    };
  rpc AddPolicyMembers (AddPolicyMembersReq) returns (AddPolicyMembersResp) {
    option (google.api.http).post = "/iam/v2beta/policies/{id}/members:add";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:policies:{id}";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:policies:{id}:members";
    option (chef.automate.api.iam.policy).action = "iam:policyMembers:create";
    };
  rpc CreateRole (CreateRoleReq) returns (CreateRoleResp) {
    option (google.api.http).post = "/iam/v2beta/roles";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:roles";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:roles";
    option (chef.automate.api.iam.policy).action = "iam:roles:create";
    };
  rpc ListRoles (ListRolesReq) returns (ListRolesResp) {
    option (google.api.http).get = "/iam/v2beta/roles";
    option (chef.automate.api.policy).resource = "auth:roles";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:roles";
    option (chef.automate.api.iam.policy).action = "iam:roles:list";
    };
  rpc GetRole (GetRoleReq) returns (GetRoleResp) {
    option (google.api.http).get = "/iam/v2beta/roles/{id}";
    option (chef.automate.api.policy).resource = "auth:roles:{id}";
    option (chef.automate.api.policy).action = "get";
    option (chef.automate.api.iam.policy).resource = "iam:roles:{id}";
    option (chef.automate.api.iam.policy).action = "iam:roles:get";
  };
  rpc DeleteRole (DeleteRoleReq) returns (DeleteRoleResp) {
    option (google.api.http).delete = "/iam/v2beta/roles/{id}";
    option (chef.automate.api.policy).resource = "auth:roles:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:roles:{id}";
    option (chef.automate.api.iam.policy).action = "iam:roles:delete";
    };
  rpc UpdateRole (UpdateRoleReq) returns (UpdateRoleResp) {
    option (google.api.http).put = "/iam/v2beta/roles/{id}";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:roles:{id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:roles:{id}";
    option (chef.automate.api.iam.policy).action = "iam:roles:update";
  };
  rpc CreateProject (CreateProjectReq) returns (CreateProjectResp) {
    option (google.api.http).post= "/iam/v2beta/projects";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:projects";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:projects";
    option (chef.automate.api.iam.policy).action = "iam:projects:create";
  };
  rpc UpdateProject (UpdateProjectReq) returns (UpdateProjectResp) {
    option (google.api.http).put= "/iam/v2beta/projects/{id}";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:projects:{id}";
    option (chef.automate.api.policy).action = "update";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:update";
  };
  rpc GetProject (GetProjectReq) returns (GetProjectResp) {
    option (google.api.http).get = "/iam/v2beta/projects/{id}";
    option (chef.automate.api.policy).resource = "auth:projects:{id}";
    option (chef.automate.api.policy).action = "get";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:get";
  };
  rpc ListProjects (ListProjectsReq) returns (ListProjectsResp) {
    option (google.api.http).get = "/iam/v2beta/projects";
    option (chef.automate.api.policy).resource = "auth:projects";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:projects";
    option (chef.automate.api.iam.policy).action = "iam:projects:list";
  };
  rpc DeleteProject (DeleteProjectReq) returns (DeleteProjectResp) {
    option (google.api.http).delete= "/iam/v2beta/projects/{id}";
    option (chef.automate.api.policy).resource = "auth:projects:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:projects:{id}";
    option (chef.automate.api.iam.policy).action = "iam:projects:delete";
  };
  // Expose on GRPC API only so we don't expose this to the enduser.
  // Just want to be able to trigger this via automate-cli.
  rpc UpgradeToV2 (UpgradeToV2Req) returns (UpgradeToV2Resp) {
    option (chef.automate.api.policy).resource = "system:iam:upgrade_to_v2";
    option (chef.automate.api.policy).action = "upgrade";
    option (chef.automate.api.iam.policy).resource = "system:iam:upgradeToV2";
    option (chef.automate.api.iam.policy).action = "system:iam:upgrade";
    };
  rpc ResetToV1 (ResetToV1Req) returns (ResetToV1Resp) {
    option (chef.automate.api.policy).resource = "system:iam:reset_to_v1";
    option (chef.automate.api.policy).action = "reset";
    option (chef.automate.api.iam.policy).resource = "system:iam:resetToV1";
    option (chef.automate.api.iam.policy).action = "system:iam:reset";
  };
  rpc IntrospectAllProjects (ListProjectsReq) returns (ListProjectsResp) {
    option (google.api.http).get = "/iam/v2beta/introspect_projects";
    option (chef.automate.api.policy).resource = "auth_introspection:introspect_all_projects";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:introspect";
    option (chef.automate.api.iam.policy).action = "iam:introspect:getAllProjects";
  };
 
}
