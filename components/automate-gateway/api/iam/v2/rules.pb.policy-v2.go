// Code generated by protoc-gen-policy. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2beta/rules.proto

package v2beta

import (
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2beta/request"
	policyv2 "github.com/chef/automate/components/automate-gateway/authz/policy_v2"
)

func init() {
	policyv2.MapMethodTo("/chef.automate.api.iam.v2beta.Rules/CreateRule", "iam:projects:{project_id}", "iam:projects:update", "POST", "/iam/v2beta/projects/{project_id}/rules", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.CreateRuleReq); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "project_id":
					return m.ProjectId
				case "name":
					return m.Name
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.iam.v2beta.Rules/UpdateRule", "iam:projects:{project_id}", "iam:projects:update", "PUT", "/iam/v2beta/projects/{project_id}/rules/{id}", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.UpdateRuleReq); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "project_id":
					return m.ProjectId
				case "name":
					return m.Name
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.iam.v2beta.Rules/GetRule", "iam:projects:{project_id}", "iam:projects:get", "GET", "/iam/v2beta/projects/{project_id}/rules/{id}", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.GetRuleReq); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "project_id":
					return m.ProjectId
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.iam.v2beta.Rules/ListRulesForProject", "iam:projects:{id}", "iam:projects:get", "GET", "/iam/v2beta/projects/{id}/rules", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.ListRulesForProjectReq); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.iam.v2beta.Rules/DeleteRule", "iam:projects:{project_id}", "iam:projects:update", "DELETE", "/iam/v2beta/projects/{project_id}/rules/{id}", func(unexpandedResource string, input interface{}) string {
		if m, ok := input.(*request.DeleteRuleReq); ok {
			return policyv2.ExpandParameterizedResource(unexpandedResource, func(want string) string {
				switch want {
				case "id":
					return m.Id
				case "project_id":
					return m.ProjectId
				default:
					return ""
				}
			})
		}
		return ""
	})
	policyv2.MapMethodTo("/chef.automate.api.iam.v2beta.Rules/ApplyRulesStart", "iam:rules", "iam:rules:apply", "POST", "/iam/v2beta/apply-rules", func(unexpandedResource string, input interface{}) string {
		return unexpandedResource
	})
	policyv2.MapMethodTo("/chef.automate.api.iam.v2beta.Rules/ApplyRulesCancel", "iam:rules", "iam:rules:cancel", "DELETE", "/iam/v2beta/apply-rules", func(unexpandedResource string, input interface{}) string {
		return unexpandedResource
	})
	policyv2.MapMethodTo("/chef.automate.api.iam.v2beta.Rules/ApplyRulesStatus", "iam:rules", "iam:rules:status", "GET", "/iam/v2beta/apply-rules", func(unexpandedResource string, input interface{}) string {
		return unexpandedResource
	})
}
