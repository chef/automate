// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2/policy.proto

package v2

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2/request"
	response "github.com/chef/automate/components/automate-gateway/api/iam/v2/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2/policy.proto", fileDescriptor_2710c589a501c81d)
}

var fileDescriptor_2710c589a501c81d = []byte{
	// 1450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcd, 0x8b, 0x1c, 0xc5,
	0x1b, 0xc7, 0xe9, 0xfd, 0xfd, 0xb2, 0xc9, 0x56, 0x76, 0x93, 0xdd, 0x67, 0x5f, 0xec, 0xf4, 0x26,
	0x86, 0x94, 0x79, 0x6d, 0xb3, 0x3d, 0xd9, 0x4d, 0xf0, 0x30, 0x0a, 0x26, 0x1a, 0x08, 0x8a, 0x82,
	0x0c, 0x49, 0x94, 0xb9, 0x0c, 0xbd, 0x33, 0xe5, 0xa4, 0x65, 0x66, 0xba, 0xd2, 0xd5, 0x33, 0x32,
	0x88, 0x28, 0x03, 0x8a, 0xcc, 0xc1, 0x8b, 0x82, 0x27, 0xaf, 0xe2, 0xc5, 0x43, 0x0e, 0x8d, 0x08,
	0x82, 0x07, 0xf1, 0x0f, 0x50, 0xcf, 0x82, 0x07, 0x21, 0xa2, 0x77, 0x41, 0x11, 0x94, 0xea, 0xd7,
	0xea, 0xd7, 0xea, 0x0d, 0x78, 0x9c, 0x7a, 0xbe, 0xd5, 0x5d, 0x9f, 0xe7, 0xa5, 0xfa, 0x79, 0x06,
	0x5d, 0xed, 0xda, 0x43, 0x6a, 0x8f, 0xc8, 0xc8, 0x65, 0x0d, 0x73, 0xec, 0xda, 0x43, 0xd3, 0x25,
	0x3b, 0x7d, 0xd3, 0x25, 0x6f, 0x9a, 0xd3, 0x86, 0x49, 0xad, 0x86, 0x65, 0x0e, 0x1b, 0x93, 0xbd,
	0x06, 0xb5, 0x07, 0x56, 0x77, 0x6a, 0x50, 0xc7, 0x76, 0x6d, 0x50, 0xbb, 0xf7, 0xc8, 0xeb, 0x46,
	0x24, 0x37, 0x4c, 0x6a, 0x19, 0x96, 0x39, 0x34, 0x26, 0x7b, 0xda, 0xc9, 0xbe, 0x6d, 0xf7, 0x07,
	0xc4, 0xdf, 0x69, 0x8e, 0x46, 0xb6, 0x6b, 0xba, 0x96, 0x3d, 0x62, 0xc1, 0x3e, 0xed, 0xe9, 0x9a,
	0x2f, 0x73, 0xc8, 0xfd, 0x31, 0x61, 0x6e, 0xea, 0xa5, 0xda, 0x33, 0xb5, 0x37, 0x33, 0x6a, 0x8f,
	0x18, 0x49, 0xef, 0xbe, 0x5e, 0xb8, 0xdb, 0xa1, 0xdd, 0x86, 0x6f, 0xef, 0xee, 0xf4, 0xc9, 0x68,
	0x27, 0xd8, 0x51, 0x72, 0xf8, 0x83, 0x3c, 0x81, 0x1f, 0x25, 0xf7, 0x84, 0xbd, 0x4f, 0x2e, 0xa3,
	0x23, 0xaf, 0x70, 0x81, 0x45, 0x18, 0xfc, 0xaa, 0xa0, 0xe5, 0xe7, 0x1d, 0x62, 0xba, 0xc4, 0x5f,
	0x9a, 0xc2, 0x25, 0xa3, 0xcc, 0xab, 0x86, 0xa8, 0x6b, 0x91, 0xfb, 0x9a, 0x5e, 0x57, 0xca, 0x28,
	0x7e, 0x57, 0x99, 0x79, 0xea, 0x71, 0xb4, 0x62, 0x8e, 0xdd, 0x7b, 0x4d, 0x1a, 0xbe, 0x7d, 0xe6,
	0xa9, 0x47, 0x60, 0xb1, 0xeb, 0x6b, 0xe7, 0x9e, 0x7a, 0x0c, 0x2d, 0x5b, 0xe6, 0x30, 0xb6, 0xce,
	0x3d, 0x75, 0x13, 0xd6, 0xc5, 0x95, 0x66, 0x20, 0x9d, 0xfd, 0xf8, 0xcb, 0x47, 0x0b, 0x57, 0xf0,
	0x6a, 0x2a, 0x29, 0xb8, 0x59, 0xd1, 0xdb, 0x27, 0xf0, 0x46, 0xb8, 0xbc, 0x4f, 0x5c, 0x53, 0x34,
	0xc1, 0x43, 0x05, 0x2d, 0xdd, 0x22, 0x6e, 0xc8, 0x79, 0xbe, 0xfc, 0xf0, 0xb1, 0x88, 0x43, 0x5e,
	0xa8, 0xa5, 0x63, 0x14, 0x7f, 0xc0, 0x09, 0x37, 0x10, 0xa4, 0x08, 0x9b, 0x6f, 0x59, 0xbd, 0xb7,
	0x67, 0x9e, 0x7a, 0x08, 0xfe, 0xd7, 0x27, 0xee, 0xdc, 0x53, 0xd7, 0xd1, 0x5a, 0x8a, 0x88, 0xdb,
	0xe7, 0x9e, 0x0a, 0xb0, 0x9a, 0x5a, 0xee, 0x13, 0xd7, 0xa7, 0xbc, 0x06, 0x9b, 0x59, 0xca, 0x06,
	0xdf, 0xd2, 0xde, 0x86, 0x13, 0x45, 0x9c, 0xbe, 0x11, 0x7e, 0x52, 0xd0, 0xf2, 0x4b, 0x16, 0x73,
	0xe3, 0x28, 0x57, 0x04, 0x55, 0xd4, 0x49, 0x82, 0x9a, 0x96, 0x32, 0x8a, 0x27, 0xc5, 0x31, 0x5d,
	0x84, 0xff, 0x3b, 0xc4, 0xec, 0x15, 0x46, 0x74, 0x1d, 0xd2, 0xfc, 0x03, 0x8b, 0x05, 0xa4, 0x3a,
	0xe4, 0xe2, 0xd9, 0xde, 0x82, 0xc2, 0x60, 0xc2, 0x1f, 0x0a, 0x5a, 0xbe, 0x49, 0x06, 0xa4, 0x4e,
	0xd2, 0x8a, 0x3a, 0x09, 0x5f, 0x5a, 0xca, 0x28, 0xfe, 0xb0, 0x2a, 0xa4, 0x47, 0x60, 0xb1, 0xe7,
	0x6f, 0x28, 0x8f, 0x6a, 0x36, 0x7d, 0x03, 0x7d, 0x10, 0x58, 0xbd, 0x2c, 0xb0, 0x7a, 0x45, 0x60,
	0xff, 0x56, 0xd0, 0xf2, 0x1d, 0xda, 0xab, 0x55, 0xad, 0xa2, 0x4e, 0x02, 0x9e, 0x96, 0x32, 0x8a,
	0x3f, 0x96, 0x80, 0x8f, 0xfd, 0x0d, 0xf5, 0xc1, 0x03, 0xbd, 0x0f, 0xde, 0xd4, 0x8a, 0xc1, 0x79,
	0xf1, 0x3e, 0xae, 0x95, 0xb3, 0xf3, 0x0a, 0xfe, 0x4b, 0x41, 0xab, 0x71, 0xd1, 0xdd, 0x25, 0x0e,
	0xb3, 0xec, 0x11, 0xec, 0xd4, 0x28, 0xd0, 0x50, 0xcb, 0xdd, 0x60, 0x1c, 0x44, 0xce, 0x28, 0x7e,
	0x5f, 0x91, 0x25, 0xb9, 0xe8, 0x83, 0x68, 0x6b, 0x45, 0x49, 0x3f, 0x05, 0x5b, 0xe9, 0xaf, 0x59,
	0x67, 0x12, 0xec, 0x69, 0x9f, 0x04, 0x2d, 0x87, 0x1f, 0x5b, 0xe1, 0xd3, 0x05, 0xb4, 0x16, 0x57,
	0xe0, 0xf4, 0x65, 0x32, 0xdc, 0x27, 0x0e, 0x03, 0xa3, 0x46, 0xb9, 0x46, 0x62, 0x8e, 0xdf, 0x38,
	0x90, 0x9e, 0x51, 0xfc, 0x59, 0x55, 0x2a, 0x24, 0x4e, 0xd8, 0x46, 0x27, 0x72, 0x89, 0xd0, 0x1c,
	0x06, 0xcf, 0x99, 0x7b, 0xea, 0x63, 0xb0, 0x99, 0xf8, 0x28, 0x7c, 0x7c, 0xec, 0x91, 0x9b, 0x70,
	0xaa, 0x30, 0x25, 0x1a, 0xe1, 0xfe, 0xf6, 0x13, 0x70, 0xa6, 0x34, 0x2f, 0x22, 0x11, 0x3c, 0x58,
	0x40, 0x1b, 0x2d, 0x42, 0x07, 0x66, 0x97, 0xa4, 0x5d, 0xb4, 0x5b, 0x8e, 0x5c, 0xa4, 0xe7, 0x5e,
	0xda, 0x3b, 0xe8, 0x16, 0x46, 0xf1, 0x83, 0xba, 0x35, 0x23, 0x71, 0x95, 0x06, 0x6a, 0xde, 0x55,
	0x42, 0x01, 0xbd, 0xa8, 0x55, 0x7b, 0x8b, 0x17, 0xd2, 0x79, 0x4d, 0xee, 0x30, 0x5e, 0x50, 0x5f,
	0x2f, 0xa0, 0xf5, 0x16, 0x19, 0xda, 0x93, 0x8c, 0xcb, 0xae, 0x54, 0xf1, 0xe7, 0xe4, 0xdc, 0x63,
	0xbb, 0x07, 0xdc, 0xc1, 0x28, 0xfe, 0xa6, 0xee, 0xed, 0xfa, 0x28, 0x0e, 0x13, 0xae, 0xda, 0xd7,
	0xf0, 0xd9, 0x6a, 0x87, 0x39, 0xfe, 0x01, 0xb9, 0xdf, 0x76, 0xf0, 0x45, 0xb9, 0xdf, 0x62, 0x39,
	0x7c, 0xb1, 0x80, 0x56, 0x6f, 0xf4, 0x7a, 0x69, 0xdf, 0x55, 0xdc, 0x47, 0x59, 0xad, 0xe4, 0x3e,
	0xca, 0xcb, 0x19, 0xc5, 0x5f, 0x49, 0xbc, 0x16, 0x77, 0x53, 0x8f, 0xe2, 0x35, 0xa1, 0xbf, 0x6a,
	0xe1, 0x33, 0xd5, 0x5e, 0x33, 0x7b, 0x3d, 0xee, 0x32, 0x1d, 0x9f, 0x93, 0xbb, 0x2c, 0xd0, 0xc2,
	0x0f, 0x0a, 0x42, 0x41, 0x67, 0xd8, 0xb2, 0x07, 0x04, 0x2e, 0xc8, 0xfa, 0x47, 0xae, 0xe2, 0x3e,
	0xba, 0x58, 0x4f, 0xc8, 0x28, 0xbe, 0x3f, 0xf3, 0xd4, 0x65, 0x84, 0x7c, 0xe7, 0x38, 0xf6, 0x20,
	0xd7, 0x62, 0x1e, 0x45, 0x4b, 0x9c, 0xda, 0x37, 0x25, 0x77, 0xb4, 0xff, 0x53, 0x84, 0xd7, 0xf1,
	0x4a, 0xdc, 0xc7, 0xfb, 0x36, 0x45, 0x6f, 0x6f, 0xe1, 0x35, 0x11, 0x34, 0x5a, 0x87, 0xef, 0x14,
	0xb4, 0xc4, 0xaf, 0x4e, 0x7e, 0x06, 0x56, 0xd5, 0x56, 0xc6, 0x22, 0x49, 0x5b, 0x29, 0xe8, 0x18,
	0xc5, 0xfd, 0x02, 0xa2, 0xe4, 0xda, 0xcd, 0xf0, 0xac, 0xc2, 0xb1, 0x84, 0x27, 0x6e, 0xad, 0xce,
	0x42, 0x9a, 0xa6, 0xbd, 0x0e, 0x79, 0x14, 0xf8, 0x5e, 0x41, 0x87, 0x6f, 0x11, 0xff, 0xcd, 0x70,
	0xb6, 0xf2, 0x23, 0x19, 0x85, 0xe5, 0x5c, 0x0d, 0x15, 0xa3, 0x78, 0x3a, 0xf3, 0xd4, 0x35, 0x74,
	0x3c, 0x21, 0xc8, 0x35, 0xc5, 0xab, 0x48, 0x38, 0x76, 0xd8, 0x42, 0x1c, 0x87, 0x95, 0x64, 0x2d,
	0xfa, 0x52, 0x18, 0x00, 0x29, 0x92, 0xa0, 0x65, 0x52, 0xe3, 0x2f, 0x6a, 0x82, 0x13, 0xf4, 0x4b,
	0x3f, 0x2b, 0x08, 0x05, 0x5d, 0x9d, 0x2c, 0xe1, 0x12, 0x95, 0x24, 0xe1, 0x44, 0x21, 0xa3, 0xf8,
	0x9d, 0x32, 0x38, 0xf1, 0x02, 0x2b, 0xe2, 0x4b, 0xa5, 0x9e, 0x70, 0x5b, 0x19, 0x7a, 0x21, 0xa2,
	0x5e, 0x86, 0xf8, 0x50, 0x41, 0x28, 0xe8, 0xdf, 0x64, 0x88, 0x89, 0x4a, 0x82, 0x28, 0x0a, 0x19,
	0xc5, 0xef, 0x29, 0x15, 0x8c, 0xf1, 0x57, 0x4d, 0xca, 0x28, 0x7c, 0xc2, 0xae, 0x69, 0x05, 0x8c,
	0xbc, 0xc6, 0xb6, 0xb5, 0x12, 0x4c, 0x5e, 0x68, 0xbf, 0x2b, 0x68, 0x25, 0x9c, 0x2b, 0x1d, 0xfb,
	0x0d, 0xd2, 0x75, 0x41, 0x3e, 0x80, 0x06, 0x42, 0xce, 0xfb, 0x64, 0x6d, 0x6d, 0x6e, 0x5a, 0x0d,
	0x0c, 0x65, 0xd3, 0x6a, 0x68, 0x15, 0xba, 0xde, 0x70, 0xa5, 0x6c, 0x5a, 0x8d, 0xcc, 0x05, 0xd3,
	0x6a, 0x62, 0x82, 0x7f, 0x14, 0xb4, 0x12, 0xf6, 0xe5, 0x72, 0xda, 0x94, 0x50, 0x42, 0x9b, 0xd1,
	0xe6, 0xba, 0xfd, 0xe8, 0x0c, 0x15, 0xdd, 0xbe, 0x28, 0x29, 0xe0, 0x2e, 0xe9, 0xf6, 0x43, 0x73,
	0x69, 0xb7, 0x9f, 0xb1, 0xc3, 0x6f, 0x0a, 0x42, 0xbc, 0x25, 0x0f, 0xf1, 0x25, 0x83, 0x78, 0xc2,
	0x7e, 0xb1, 0x9e, 0x30, 0x37, 0xb2, 0x67, 0xc0, 0x73, 0x23, 0x7b, 0x86, 0x3a, 0xea, 0xef, 0xa3,
	0xe5, 0xa2, 0x91, 0x5d, 0x44, 0xca, 0x8d, 0xec, 0xa2, 0x31, 0x19, 0xd9, 0xc3, 0x55, 0xe9, 0xc8,
	0x1e, 0xea, 0xea, 0x8c, 0xec, 0xb1, 0x34, 0x3b, 0xb2, 0x27, 0x89, 0x9d, 0x1f, 0xd9, 0x93, 0xb4,
	0x8e, 0x46, 0xf6, 0x08, 0xb4, 0x70, 0x64, 0x0f, 0x8d, 0xb9, 0x91, 0x3d, 0xc2, 0xf9, 0x53, 0x41,
	0x2b, 0xe1, 0x7c, 0x2d, 0x4f, 0xe7, 0x94, 0x50, 0x92, 0xce, 0x19, 0x6d, 0x6e, 0x6a, 0xcf, 0xa7,
	0x73, 0x6e, 0x6a, 0x97, 0xa4, 0x73, 0xc9, 0xd4, 0x9e, 0x8e, 0xad, 0x5e, 0x11, 0xdb, 0x6f, 0x15,
	0x74, 0xf4, 0x0e, 0xed, 0x3b, 0x66, 0x8f, 0xdc, 0xb6, 0xef, 0xee, 0x41, 0xe5, 0xd5, 0x1b, 0xcb,
	0x38, 0xf7, 0xa5, 0x9a, 0x4a, 0x46, 0x71, 0x67, 0xe6, 0xa9, 0x1a, 0x52, 0xd9, 0x94, 0xb9, 0x64,
	0xd8, 0xe4, 0x00, 0xe3, 0x40, 0xd1, 0x71, 0xed, 0xce, 0x64, 0x6f, 0xe6, 0xa9, 0x4b, 0x70, 0x38,
	0x5c, 0x9a, 0x7b, 0xaa, 0x8a, 0xb6, 0xf2, 0x52, 0xfe, 0xb0, 0xb9, 0xa7, 0x6e, 0x00, 0xe4, 0x6d,
	0xe0, 0x29, 0x68, 0xa9, 0x45, 0x18, 0x71, 0x6f, 0xdb, 0x77, 0x77, 0xab, 0xfa, 0x9c, 0x58, 0x24,
	0xe9, 0x73, 0x04, 0x1d, 0xa3, 0xf8, 0xd5, 0x59, 0xf6, 0x50, 0x0e, 0xb7, 0xfb, 0xa7, 0xdf, 0x9d,
	0x79, 0xea, 0x61, 0x38, 0xe4, 0x2f, 0xcc, 0x3d, 0x75, 0x0b, 0x6d, 0x64, 0x65, 0xfc, 0x31, 0x41,
	0x4d, 0x66, 0x2d, 0xf0, 0xf9, 0x02, 0xda, 0x7c, 0x61, 0xe4, 0x3a, 0x36, 0xa3, 0xa4, 0xeb, 0xde,
	0x18, 0x0c, 0xfe, 0xeb, 0x12, 0xfb, 0x92, 0xe7, 0xdf, 0x65, 0xa4, 0xf3, 0xfc, 0xeb, 0x58, 0xf1,
	0x9b, 0x2d, 0x7b, 0xd4, 0x4c, 0x7e, 0x75, 0xcc, 0xc1, 0xa0, 0x53, 0x58, 0x80, 0xe1, 0x87, 0x34,
	0x91, 0xce, 0x3d, 0xf5, 0x34, 0x9c, 0x4a, 0xaf, 0xf1, 0xdb, 0x46, 0x40, 0xf1, 0x93, 0xf3, 0x3a,
	0x6c, 0x47, 0xc9, 0x29, 0xbc, 0x27, 0xae, 0xcc, 0x33, 0x70, 0x5a, 0x4c, 0xd1, 0x02, 0xc9, 0x73,
	0x37, 0xda, 0xcf, 0xf6, 0x2d, 0xf7, 0xde, 0x78, 0xdf, 0xe8, 0xda, 0xc3, 0x06, 0x27, 0x8e, 0xff,
	0x62, 0x6e, 0xd4, 0xfb, 0xdb, 0x7b, 0x7f, 0xd1, 0xff, 0x8f, 0xf9, 0xea, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x3c, 0x0c, 0x15, 0xb0, 0xd1, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PoliciesClient is the client API for Policies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PoliciesClient interface {
	CreatePolicy(ctx context.Context, in *request.CreatePolicyReq, opts ...grpc.CallOption) (*response.CreatePolicyResp, error)
	GetPolicy(ctx context.Context, in *request.GetPolicyReq, opts ...grpc.CallOption) (*response.GetPolicyResp, error)
	ListPolicies(ctx context.Context, in *request.ListPoliciesReq, opts ...grpc.CallOption) (*response.ListPoliciesResp, error)
	DeletePolicy(ctx context.Context, in *request.DeletePolicyReq, opts ...grpc.CallOption) (*response.DeletePolicyResp, error)
	UpdatePolicy(ctx context.Context, in *request.UpdatePolicyReq, opts ...grpc.CallOption) (*response.UpdatePolicyResp, error)
	GetPolicyVersion(ctx context.Context, in *request.GetPolicyVersionReq, opts ...grpc.CallOption) (*response.GetPolicyVersionResp, error)
	ListPolicyMembers(ctx context.Context, in *request.ListPolicyMembersReq, opts ...grpc.CallOption) (*response.ListPolicyMembersResp, error)
	ReplacePolicyMembers(ctx context.Context, in *request.ReplacePolicyMembersReq, opts ...grpc.CallOption) (*response.ReplacePolicyMembersResp, error)
	RemovePolicyMembers(ctx context.Context, in *request.RemovePolicyMembersReq, opts ...grpc.CallOption) (*response.RemovePolicyMembersResp, error)
	AddPolicyMembers(ctx context.Context, in *request.AddPolicyMembersReq, opts ...grpc.CallOption) (*response.AddPolicyMembersResp, error)
	CreateRole(ctx context.Context, in *request.CreateRoleReq, opts ...grpc.CallOption) (*response.CreateRoleResp, error)
	ListRoles(ctx context.Context, in *request.ListRolesReq, opts ...grpc.CallOption) (*response.ListRolesResp, error)
	GetRole(ctx context.Context, in *request.GetRoleReq, opts ...grpc.CallOption) (*response.GetRoleResp, error)
	DeleteRole(ctx context.Context, in *request.DeleteRoleReq, opts ...grpc.CallOption) (*response.DeleteRoleResp, error)
	UpdateRole(ctx context.Context, in *request.UpdateRoleReq, opts ...grpc.CallOption) (*response.UpdateRoleResp, error)
	CreateProject(ctx context.Context, in *request.CreateProjectReq, opts ...grpc.CallOption) (*response.CreateProjectResp, error)
	UpdateProject(ctx context.Context, in *request.UpdateProjectReq, opts ...grpc.CallOption) (*response.UpdateProjectResp, error)
	GetProject(ctx context.Context, in *request.GetProjectReq, opts ...grpc.CallOption) (*response.GetProjectResp, error)
	ListProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error)
	DeleteProject(ctx context.Context, in *request.DeleteProjectReq, opts ...grpc.CallOption) (*response.DeleteProjectResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	UpgradeToV2(ctx context.Context, in *request.UpgradeToV2Req, opts ...grpc.CallOption) (*response.UpgradeToV2Resp, error)
	ResetToV1(ctx context.Context, in *request.ResetToV1Req, opts ...grpc.CallOption) (*response.ResetToV1Resp, error)
	IntrospectAllProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error)
}

type policiesClient struct {
	cc grpc.ClientConnInterface
}

func NewPoliciesClient(cc grpc.ClientConnInterface) PoliciesClient {
	return &policiesClient{cc}
}

func (c *policiesClient) CreatePolicy(ctx context.Context, in *request.CreatePolicyReq, opts ...grpc.CallOption) (*response.CreatePolicyResp, error) {
	out := new(response.CreatePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetPolicy(ctx context.Context, in *request.GetPolicyReq, opts ...grpc.CallOption) (*response.GetPolicyResp, error) {
	out := new(response.GetPolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListPolicies(ctx context.Context, in *request.ListPoliciesReq, opts ...grpc.CallOption) (*response.ListPoliciesResp, error) {
	out := new(response.ListPoliciesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeletePolicy(ctx context.Context, in *request.DeletePolicyReq, opts ...grpc.CallOption) (*response.DeletePolicyResp, error) {
	out := new(response.DeletePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdatePolicy(ctx context.Context, in *request.UpdatePolicyReq, opts ...grpc.CallOption) (*response.UpdatePolicyResp, error) {
	out := new(response.UpdatePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetPolicyVersion(ctx context.Context, in *request.GetPolicyVersionReq, opts ...grpc.CallOption) (*response.GetPolicyVersionResp, error) {
	out := new(response.GetPolicyVersionResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetPolicyVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListPolicyMembers(ctx context.Context, in *request.ListPolicyMembersReq, opts ...grpc.CallOption) (*response.ListPolicyMembersResp, error) {
	out := new(response.ListPolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListPolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ReplacePolicyMembers(ctx context.Context, in *request.ReplacePolicyMembersReq, opts ...grpc.CallOption) (*response.ReplacePolicyMembersResp, error) {
	out := new(response.ReplacePolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ReplacePolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) RemovePolicyMembers(ctx context.Context, in *request.RemovePolicyMembersReq, opts ...grpc.CallOption) (*response.RemovePolicyMembersResp, error) {
	out := new(response.RemovePolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/RemovePolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) AddPolicyMembers(ctx context.Context, in *request.AddPolicyMembersReq, opts ...grpc.CallOption) (*response.AddPolicyMembersResp, error) {
	out := new(response.AddPolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/AddPolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) CreateRole(ctx context.Context, in *request.CreateRoleReq, opts ...grpc.CallOption) (*response.CreateRoleResp, error) {
	out := new(response.CreateRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListRoles(ctx context.Context, in *request.ListRolesReq, opts ...grpc.CallOption) (*response.ListRolesResp, error) {
	out := new(response.ListRolesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetRole(ctx context.Context, in *request.GetRoleReq, opts ...grpc.CallOption) (*response.GetRoleResp, error) {
	out := new(response.GetRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeleteRole(ctx context.Context, in *request.DeleteRoleReq, opts ...grpc.CallOption) (*response.DeleteRoleResp, error) {
	out := new(response.DeleteRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdateRole(ctx context.Context, in *request.UpdateRoleReq, opts ...grpc.CallOption) (*response.UpdateRoleResp, error) {
	out := new(response.UpdateRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) CreateProject(ctx context.Context, in *request.CreateProjectReq, opts ...grpc.CallOption) (*response.CreateProjectResp, error) {
	out := new(response.CreateProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdateProject(ctx context.Context, in *request.UpdateProjectReq, opts ...grpc.CallOption) (*response.UpdateProjectResp, error) {
	out := new(response.UpdateProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetProject(ctx context.Context, in *request.GetProjectReq, opts ...grpc.CallOption) (*response.GetProjectResp, error) {
	out := new(response.GetProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error) {
	out := new(response.ListProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeleteProject(ctx context.Context, in *request.DeleteProjectReq, opts ...grpc.CallOption) (*response.DeleteProjectResp, error) {
	out := new(response.DeleteProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpgradeToV2(ctx context.Context, in *request.UpgradeToV2Req, opts ...grpc.CallOption) (*response.UpgradeToV2Resp, error) {
	out := new(response.UpgradeToV2Resp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpgradeToV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ResetToV1(ctx context.Context, in *request.ResetToV1Req, opts ...grpc.CallOption) (*response.ResetToV1Resp, error) {
	out := new(response.ResetToV1Resp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ResetToV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) IntrospectAllProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error) {
	out := new(response.ListProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/IntrospectAllProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoliciesServer is the server API for Policies service.
type PoliciesServer interface {
	CreatePolicy(context.Context, *request.CreatePolicyReq) (*response.CreatePolicyResp, error)
	GetPolicy(context.Context, *request.GetPolicyReq) (*response.GetPolicyResp, error)
	ListPolicies(context.Context, *request.ListPoliciesReq) (*response.ListPoliciesResp, error)
	DeletePolicy(context.Context, *request.DeletePolicyReq) (*response.DeletePolicyResp, error)
	UpdatePolicy(context.Context, *request.UpdatePolicyReq) (*response.UpdatePolicyResp, error)
	GetPolicyVersion(context.Context, *request.GetPolicyVersionReq) (*response.GetPolicyVersionResp, error)
	ListPolicyMembers(context.Context, *request.ListPolicyMembersReq) (*response.ListPolicyMembersResp, error)
	ReplacePolicyMembers(context.Context, *request.ReplacePolicyMembersReq) (*response.ReplacePolicyMembersResp, error)
	RemovePolicyMembers(context.Context, *request.RemovePolicyMembersReq) (*response.RemovePolicyMembersResp, error)
	AddPolicyMembers(context.Context, *request.AddPolicyMembersReq) (*response.AddPolicyMembersResp, error)
	CreateRole(context.Context, *request.CreateRoleReq) (*response.CreateRoleResp, error)
	ListRoles(context.Context, *request.ListRolesReq) (*response.ListRolesResp, error)
	GetRole(context.Context, *request.GetRoleReq) (*response.GetRoleResp, error)
	DeleteRole(context.Context, *request.DeleteRoleReq) (*response.DeleteRoleResp, error)
	UpdateRole(context.Context, *request.UpdateRoleReq) (*response.UpdateRoleResp, error)
	CreateProject(context.Context, *request.CreateProjectReq) (*response.CreateProjectResp, error)
	UpdateProject(context.Context, *request.UpdateProjectReq) (*response.UpdateProjectResp, error)
	GetProject(context.Context, *request.GetProjectReq) (*response.GetProjectResp, error)
	ListProjects(context.Context, *request.ListProjectsReq) (*response.ListProjectsResp, error)
	DeleteProject(context.Context, *request.DeleteProjectReq) (*response.DeleteProjectResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	UpgradeToV2(context.Context, *request.UpgradeToV2Req) (*response.UpgradeToV2Resp, error)
	ResetToV1(context.Context, *request.ResetToV1Req) (*response.ResetToV1Resp, error)
	IntrospectAllProjects(context.Context, *request.ListProjectsReq) (*response.ListProjectsResp, error)
}

// UnimplementedPoliciesServer can be embedded to have forward compatible implementations.
type UnimplementedPoliciesServer struct {
}

func (*UnimplementedPoliciesServer) CreatePolicy(ctx context.Context, req *request.CreatePolicyReq) (*response.CreatePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (*UnimplementedPoliciesServer) GetPolicy(ctx context.Context, req *request.GetPolicyReq) (*response.GetPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (*UnimplementedPoliciesServer) ListPolicies(ctx context.Context, req *request.ListPoliciesReq) (*response.ListPoliciesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (*UnimplementedPoliciesServer) DeletePolicy(ctx context.Context, req *request.DeletePolicyReq) (*response.DeletePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedPoliciesServer) UpdatePolicy(ctx context.Context, req *request.UpdatePolicyReq) (*response.UpdatePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (*UnimplementedPoliciesServer) GetPolicyVersion(ctx context.Context, req *request.GetPolicyVersionReq) (*response.GetPolicyVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyVersion not implemented")
}
func (*UnimplementedPoliciesServer) ListPolicyMembers(ctx context.Context, req *request.ListPolicyMembersReq) (*response.ListPolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) ReplacePolicyMembers(ctx context.Context, req *request.ReplacePolicyMembersReq) (*response.ReplacePolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplacePolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) RemovePolicyMembers(ctx context.Context, req *request.RemovePolicyMembersReq) (*response.RemovePolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) AddPolicyMembers(ctx context.Context, req *request.AddPolicyMembersReq) (*response.AddPolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) CreateRole(ctx context.Context, req *request.CreateRoleReq) (*response.CreateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedPoliciesServer) ListRoles(ctx context.Context, req *request.ListRolesReq) (*response.ListRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedPoliciesServer) GetRole(ctx context.Context, req *request.GetRoleReq) (*response.GetRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedPoliciesServer) DeleteRole(ctx context.Context, req *request.DeleteRoleReq) (*response.DeleteRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedPoliciesServer) UpdateRole(ctx context.Context, req *request.UpdateRoleReq) (*response.UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedPoliciesServer) CreateProject(ctx context.Context, req *request.CreateProjectReq) (*response.CreateProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedPoliciesServer) UpdateProject(ctx context.Context, req *request.UpdateProjectReq) (*response.UpdateProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedPoliciesServer) GetProject(ctx context.Context, req *request.GetProjectReq) (*response.GetProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedPoliciesServer) ListProjects(ctx context.Context, req *request.ListProjectsReq) (*response.ListProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedPoliciesServer) DeleteProject(ctx context.Context, req *request.DeleteProjectReq) (*response.DeleteProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedPoliciesServer) UpgradeToV2(ctx context.Context, req *request.UpgradeToV2Req) (*response.UpgradeToV2Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeToV2 not implemented")
}
func (*UnimplementedPoliciesServer) ResetToV1(ctx context.Context, req *request.ResetToV1Req) (*response.ResetToV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetToV1 not implemented")
}
func (*UnimplementedPoliciesServer) IntrospectAllProjects(ctx context.Context, req *request.ListProjectsReq) (*response.ListProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectAllProjects not implemented")
}

func RegisterPoliciesServer(s *grpc.Server, srv PoliciesServer) {
	s.RegisterService(&_Policies_serviceDesc, srv)
}

func _Policies_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreatePolicy(ctx, req.(*request.CreatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetPolicy(ctx, req.(*request.GetPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListPoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListPolicies(ctx, req.(*request.ListPoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeletePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeletePolicy(ctx, req.(*request.DeletePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdatePolicy(ctx, req.(*request.UpdatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetPolicyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetPolicyVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetPolicyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetPolicyVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetPolicyVersion(ctx, req.(*request.GetPolicyVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListPolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListPolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListPolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListPolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListPolicyMembers(ctx, req.(*request.ListPolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ReplacePolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ReplacePolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ReplacePolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ReplacePolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ReplacePolicyMembers(ctx, req.(*request.ReplacePolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_RemovePolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RemovePolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).RemovePolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/RemovePolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).RemovePolicyMembers(ctx, req.(*request.RemovePolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_AddPolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.AddPolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).AddPolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/AddPolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).AddPolicyMembers(ctx, req.(*request.AddPolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreateRole(ctx, req.(*request.CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListRoles(ctx, req.(*request.ListRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetRole(ctx, req.(*request.GetRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeleteRole(ctx, req.(*request.DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdateRole(ctx, req.(*request.UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreateProject(ctx, req.(*request.CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdateProject(ctx, req.(*request.UpdateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetProject(ctx, req.(*request.GetProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListProjects(ctx, req.(*request.ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeleteProject(ctx, req.(*request.DeleteProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpgradeToV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpgradeToV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpgradeToV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpgradeToV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpgradeToV2(ctx, req.(*request.UpgradeToV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ResetToV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResetToV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ResetToV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ResetToV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ResetToV1(ctx, req.(*request.ResetToV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_IntrospectAllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).IntrospectAllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/IntrospectAllProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).IntrospectAllProjects(ctx, req.(*request.ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Policies_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2.Policies",
	HandlerType: (*PoliciesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _Policies_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _Policies_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _Policies_ListPolicies_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _Policies_DeletePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _Policies_UpdatePolicy_Handler,
		},
		{
			MethodName: "GetPolicyVersion",
			Handler:    _Policies_GetPolicyVersion_Handler,
		},
		{
			MethodName: "ListPolicyMembers",
			Handler:    _Policies_ListPolicyMembers_Handler,
		},
		{
			MethodName: "ReplacePolicyMembers",
			Handler:    _Policies_ReplacePolicyMembers_Handler,
		},
		{
			MethodName: "RemovePolicyMembers",
			Handler:    _Policies_RemovePolicyMembers_Handler,
		},
		{
			MethodName: "AddPolicyMembers",
			Handler:    _Policies_AddPolicyMembers_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Policies_CreateRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Policies_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Policies_GetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Policies_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Policies_UpdateRole_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _Policies_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _Policies_UpdateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Policies_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _Policies_ListProjects_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Policies_DeleteProject_Handler,
		},
		{
			MethodName: "UpgradeToV2",
			Handler:    _Policies_UpgradeToV2_Handler,
		},
		{
			MethodName: "ResetToV1",
			Handler:    _Policies_ResetToV1_Handler,
		},
		{
			MethodName: "IntrospectAllProjects",
			Handler:    _Policies_IntrospectAllProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2/policy.proto",
}
