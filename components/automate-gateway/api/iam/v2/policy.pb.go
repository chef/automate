// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2/policy.proto

package v2

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2/request"
	response "github.com/chef/automate/components/automate-gateway/api/iam/v2/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2/policy.proto", fileDescriptor_2710c589a501c81d)
}

var fileDescriptor_2710c589a501c81d = []byte{
	// 1368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0x5f, 0x8b, 0x1b, 0xd5,
	0x1b, 0xc7, 0x99, 0xfc, 0x7e, 0xdd, 0x3f, 0xa7, 0x49, 0x37, 0x7d, 0x36, 0xdb, 0x8e, 0xa9, 0x4b,
	0x71, 0xa8, 0x6d, 0x37, 0x76, 0x33, 0x6e, 0x7a, 0x17, 0x05, 0x8d, 0x0a, 0x45, 0x50, 0x90, 0xa5,
	0xdd, 0x0b, 0x11, 0xc2, 0x6c, 0x72, 0xcc, 0x4e, 0x4d, 0x72, 0x4e, 0xe7, 0x4c, 0xb6, 0x2e, 0xa2,
	0x60, 0xc0, 0x9b, 0x5c, 0x14, 0x59, 0xa1, 0x17, 0x05, 0xf1, 0xc6, 0xb7, 0x30, 0x37, 0x5e, 0x29,
	0x78, 0x2d, 0x62, 0x41, 0x28, 0x78, 0xa9, 0x50, 0xc1, 0x17, 0x21, 0x67, 0xfe, 0x9e, 0x93, 0x99,
	0xcc, 0x99, 0x2c, 0x78, 0xb5, 0xec, 0x39, 0xdf, 0x33, 0xf3, 0x7c, 0x9e, 0xe7, 0x39, 0xcf, 0x3c,
	0x4f, 0xd0, 0xed, 0x1e, 0x19, 0x51, 0x32, 0xc6, 0x63, 0x97, 0x99, 0xd6, 0xc4, 0x25, 0x23, 0xcb,
	0xc5, 0xbb, 0x03, 0xcb, 0xc5, 0x0f, 0xad, 0x13, 0xd3, 0xa2, 0xb6, 0x69, 0x5b, 0x23, 0xf3, 0xb8,
	0x65, 0x52, 0x32, 0xb4, 0x7b, 0x27, 0x4d, 0xea, 0x10, 0x97, 0x80, 0xde, 0x3b, 0xc2, 0x1f, 0x37,
	0x23, 0x79, 0xd3, 0xa2, 0x76, 0xd3, 0xb6, 0x46, 0xcd, 0xe3, 0x56, 0xfd, 0xc5, 0x01, 0x21, 0x83,
	0x21, 0xf6, 0x4f, 0x5a, 0xe3, 0x31, 0x71, 0x2d, 0xd7, 0x26, 0x63, 0x16, 0x9c, 0xab, 0xdf, 0xf2,
	0xff, 0xf4, 0x76, 0x07, 0x78, 0xbc, 0xcb, 0x1e, 0x5a, 0x83, 0x01, 0x76, 0x4c, 0x42, 0x7d, 0x45,
	0x86, 0xfa, 0xb5, 0x82, 0xa6, 0x39, 0xf8, 0xc1, 0x04, 0x33, 0x57, 0x32, 0xb1, 0xfe, 0x7a, 0xe1,
	0xc3, 0x8c, 0x92, 0x31, 0xc3, 0xf2, 0xe9, 0x37, 0x33, 0x4f, 0x3b, 0xb4, 0x67, 0x0a, 0x04, 0xc1,
	0x89, 0x05, 0xa8, 0xcb, 0x3c, 0x81, 0x9b, 0x92, 0x7a, 0x42, 0xeb, 0xfb, 0x1d, 0xb4, 0xf6, 0x01,
	0x17, 0xd8, 0x98, 0xc1, 0x33, 0x0d, 0x95, 0xdf, 0x76, 0xb0, 0xe5, 0x62, 0x7f, 0xe9, 0x04, 0x76,
	0x9a, 0x8b, 0x62, 0xd0, 0x14, 0x75, 0xfb, 0xf8, 0x41, 0xbd, 0x51, 0x54, 0xca, 0xa8, 0xe1, 0x9c,
	0x76, 0x10, 0x5a, 0xa3, 0xe1, 0x6b, 0xa7, 0x9e, 0xbe, 0x81, 0x2a, 0xd6, 0xc4, 0x3d, 0x6a, 0x0b,
	0x4b, 0x6b, 0xb0, 0xd2, 0xf3, 0xcf, 0xcd, 0x3c, 0xfd, 0x02, 0x2a, 0xdb, 0xd6, 0x28, 0xde, 0x9d,
	0x79, 0xfa, 0x16, 0x6c, 0x8a, 0x2b, 0xed, 0x40, 0x3a, 0x7d, 0xfa, 0xe7, 0x37, 0xa5, 0x2d, 0xa3,
	0x2a, 0xa5, 0x13, 0xdf, 0xd6, 0x1a, 0xf0, 0xbb, 0x86, 0xd6, 0xef, 0x60, 0x37, 0x04, 0xbb, 0xbe,
	0xd8, 0xda, 0x58, 0xc4, 0xa9, 0x6e, 0x14, 0xd2, 0x31, 0x6a, 0x7c, 0x3a, 0x8f, 0x54, 0x43, 0x20,
	0x21, 0xb5, 0x3f, 0xb3, 0xfb, 0x9f, 0x4f, 0x3d, 0xfd, 0x1c, 0xfc, 0x6f, 0x80, 0xdd, 0x99, 0xa7,
	0x6f, 0xa2, 0x8b, 0x12, 0x02, 0xdf, 0x9f, 0x79, 0x3a, 0x40, 0x55, 0x5a, 0x1e, 0x60, 0xd7, 0xc7,
	0xba, 0x0c, 0x5b, 0xf3, 0x58, 0x26, 0x3f, 0x02, 0xbf, 0x69, 0xa8, 0xfc, 0x9e, 0xcd, 0xdc, 0x38,
	0x8a, 0x39, 0x41, 0x13, 0x75, 0x8a, 0xa0, 0xc9, 0x52, 0x46, 0x8d, 0x4f, 0x0a, 0x04, 0x6d, 0x05,
	0xfe, 0xef, 0x60, 0xab, 0x9f, 0x19, 0xb2, 0x4d, 0x90, 0x79, 0x87, 0x36, 0x0b, 0xc8, 0x00, 0x52,
	0x01, 0x83, 0xbf, 0x34, 0x54, 0x7e, 0x07, 0x0f, 0x71, 0x91, 0x4c, 0x14, 0x75, 0x0a, 0x28, 0x59,
	0xca, 0xa8, 0xf1, 0x45, 0xd1, 0xb0, 0xad, 0xc1, 0x4a, 0xdf, 0x3f, 0xbc, 0x38, 0x72, 0xf3, 0x39,
	0x19, 0xe8, 0x83, 0xe0, 0x35, 0x16, 0x04, 0xef, 0x6f, 0x0d, 0x95, 0xef, 0xd1, 0x7e, 0xa1, 0x1b,
	0x27, 0xea, 0x14, 0x9c, 0xb2, 0x94, 0x51, 0xe3, 0x4b, 0x6d, 0x09, 0xd0, 0x89, 0x7f, 0xba, 0x38,
	0x68, 0xa0, 0xf7, 0x41, 0xeb, 0xf5, 0x6c, 0x50, 0x7e, 0x03, 0x9f, 0x6b, 0xa8, 0x1a, 0x5f, 0x9a,
	0x03, 0xec, 0x30, 0x9b, 0x8c, 0x61, 0xb7, 0xc0, 0x05, 0x0b, 0xb5, 0x9c, 0xb9, 0xb9, 0x8c, 0x9c,
	0x51, 0x63, 0xb2, 0x54, 0xd2, 0x8a, 0xbc, 0xd1, 0x63, 0x72, 0xae, 0xa4, 0x0e, 0x97, 0xe4, 0x0f,
	0x57, 0xf7, 0x38, 0xa4, 0xfa, 0xaa, 0x84, 0x2e, 0xc6, 0x17, 0xe8, 0xe4, 0x7d, 0x3c, 0x3a, 0xc4,
	0x0e, 0x83, 0x66, 0x81, 0xdb, 0x16, 0x89, 0x39, 0xac, 0xb9, 0x94, 0x9e, 0x51, 0xe3, 0x51, 0xe1,
	0x28, 0x27, 0xcc, 0x57, 0xd0, 0x0b, 0xa9, 0x18, 0xb7, 0x47, 0xc1, 0x43, 0x67, 0x9e, 0x7e, 0x19,
	0xb6, 0x12, 0x97, 0x84, 0xef, 0x8a, 0x1d, 0x70, 0x15, 0xb6, 0x33, 0xa3, 0x6d, 0x86, 0xe7, 0xe1,
	0x71, 0x09, 0xd5, 0xf6, 0x31, 0x1d, 0x5a, 0x3d, 0x2c, 0xbb, 0x62, 0x6f, 0x31, 0x5a, 0x96, 0x9e,
	0x7b, 0xa3, 0xb5, 0xec, 0x11, 0x46, 0x8d, 0xc7, 0x67, 0x4a, 0x7b, 0x85, 0x4b, 0xea, 0xa0, 0xa7,
	0x5d, 0x22, 0xdc, 0x01, 0xa3, 0x9e, 0xef, 0x15, 0x7e, 0x17, 0x9e, 0x94, 0xd0, 0xe6, 0x3e, 0x1e,
	0x91, 0xe3, 0x39, 0xbf, 0xbc, 0x9a, 0x07, 0x99, 0x92, 0x73, 0xb7, 0xec, 0x2d, 0x79, 0x82, 0x51,
	0xe3, 0x5b, 0xed, 0x2c, 0x55, 0xef, 0x2c, 0x5e, 0x11, 0x4a, 0xe0, 0x8e, 0x71, 0x2d, 0xdf, 0x2b,
	0x8e, 0x6f, 0x2d, 0x77, 0xce, 0xa3, 0x12, 0xaa, 0x76, 0xfa, 0x7d, 0xd9, 0x33, 0x39, 0x85, 0x62,
	0x5e, 0xab, 0x28, 0x14, 0x69, 0x39, 0xa3, 0xc6, 0x93, 0x65, 0x7c, 0x12, 0x37, 0x26, 0x67, 0xf1,
	0x89, 0xd0, 0xaa, 0x5c, 0x37, 0x5e, 0xca, 0xf7, 0x89, 0xd5, 0xef, 0x73, 0x87, 0xfc, 0xac, 0x21,
	0x14, 0x34, 0x51, 0xfb, 0x64, 0x88, 0xe1, 0x86, 0xaa, 0xd5, 0xe2, 0x2a, 0xee, 0x84, 0x9b, 0xc5,
	0x84, 0x8c, 0x1a, 0xbd, 0xd3, 0xce, 0x2a, 0x3a, 0xe7, 0x90, 0xa1, 0x8f, 0x5e, 0x46, 0xc8, 0x47,
	0x8f, 0xfe, 0x17, 0x91, 0xcf, 0xa3, 0x75, 0xce, 0xe4, 0x6f, 0x25, 0xb5, 0xd1, 0xff, 0x57, 0x44,
	0x03, 0xa3, 0x12, 0x37, 0xbf, 0xfe, 0x9e, 0xd6, 0x80, 0x1f, 0x34, 0xb4, 0xce, 0x0b, 0x17, 0x7f,
	0x2b, 0xcb, 0x6b, 0xc1, 0x62, 0x91, 0xa2, 0x05, 0x13, 0x74, 0x8c, 0x1a, 0x1f, 0xe5, 0x32, 0x24,
	0x15, 0x6f, 0x8e, 0xa0, 0x0a, 0x17, 0x12, 0x82, 0xb8, 0x29, 0xd9, 0x00, 0xd9, 0x7e, 0xf8, 0x49,
	0x43, 0xab, 0x77, 0xb0, 0xff, 0x3a, 0xb8, 0x96, 0xfb, 0x15, 0x8a, 0xbc, 0xff, 0x72, 0x01, 0x15,
	0xa3, 0x86, 0x2d, 0x99, 0x7d, 0x11, 0x6d, 0x24, 0x66, 0xa7, 0x7a, 0xc6, 0x2a, 0x12, 0x6c, 0x0d,
	0xbf, 0xc6, 0x1b, 0x50, 0x49, 0xd6, 0xa2, 0xca, 0x5c, 0x03, 0x90, 0xcc, 0x0f, 0xba, 0x8d, 0x5f,
	0x35, 0x84, 0x82, 0x16, 0x48, 0x95, 0x47, 0x89, 0x4a, 0x91, 0x47, 0xa2, 0x90, 0x51, 0x83, 0xa8,
	0x61, 0xc4, 0x9a, 0x92, 0xc5, 0x23, 0x65, 0x94, 0x50, 0x40, 0x6a, 0x8d, 0x2c, 0xa4, 0xa7, 0x1a,
	0x42, 0x41, 0xb7, 0xa3, 0x42, 0x4a, 0x54, 0x0a, 0x24, 0x51, 0x18, 0x0c, 0x2b, 0x05, 0x90, 0xe2,
	0x8f, 0x87, 0x12, 0x49, 0xf8, 0x52, 0x5c, 0xae, 0x67, 0x20, 0xf1, 0x9b, 0xf2, 0x87, 0x86, 0x2a,
	0xe1, 0xd4, 0xe4, 0x90, 0xfb, 0xb8, 0xe7, 0x82, 0x7a, 0xbc, 0x0a, 0x84, 0x9c, 0xed, 0x95, 0xc2,
	0xda, 0x64, 0x16, 0x0b, 0x56, 0xa4, 0x0e, 0x29, 0x59, 0xca, 0x9a, 0xc5, 0xc2, 0x5d, 0xa1, 0x1d,
	0x0c, 0x57, 0x16, 0xcd, 0x62, 0xd1, 0xb6, 0xd6, 0x80, 0x7f, 0x34, 0x54, 0x09, 0x5b, 0x54, 0x35,
	0x9e, 0x24, 0x54, 0xe0, 0xcd, 0x69, 0x85, 0xc6, 0x37, 0x81, 0x89, 0xeb, 0x7a, 0x64, 0x50, 0x4e,
	0xe3, 0x2b, 0x4a, 0x32, 0x48, 0x17, 0x34, 0xbe, 0xe1, 0x76, 0x1c, 0xcd, 0x67, 0x1a, 0x42, 0xbc,
	0x3b, 0x0d, 0x59, 0x15, 0x33, 0x65, 0x02, 0x7a, 0xb3, 0x98, 0x30, 0x99, 0x3e, 0xd5, 0x90, 0xa9,
	0xe9, 0x73, 0x8e, 0x30, 0x6a, 0x75, 0xa3, 0xe5, 0xac, 0xe9, 0x53, 0xc4, 0x4b, 0xa6, 0xcf, 0x70,
	0x55, 0x39, 0x7d, 0x86, 0xba, 0x22, 0xd3, 0x67, 0x2c, 0x4d, 0xa6, 0xcf, 0xdc, 0x34, 0x4d, 0x4f,
	0x9f, 0x49, 0x92, 0x46, 0xd3, 0x67, 0x04, 0x96, 0x39, 0x7d, 0x46, 0x0c, 0xcf, 0x35, 0x54, 0x09,
	0x47, 0x45, 0x75, 0x7e, 0x4a, 0x42, 0x45, 0x7e, 0xce, 0x69, 0x93, 0x01, 0xb4, 0x50, 0x7a, 0xa6,
	0x06, 0x50, 0x45, 0x7a, 0x2e, 0x18, 0x40, 0xa5, 0xf8, 0xfd, 0xa2, 0xa1, 0xf3, 0xf7, 0xe8, 0xc0,
	0xb1, 0xfa, 0xf8, 0x2e, 0x39, 0x68, 0x41, 0x6e, 0x5d, 0x8c, 0x65, 0x1c, 0x73, 0xa7, 0xa0, 0x92,
	0x51, 0xe3, 0xfe, 0x69, 0x67, 0x0d, 0xad, 0x1c, 0xd9, 0xfd, 0x3e, 0x1e, 0x4f, 0x3d, 0xbd, 0x8e,
	0x74, 0x76, 0xc2, 0x5c, 0x3c, 0x6a, 0x73, 0x73, 0x27, 0x81, 0xb8, 0xeb, 0x92, 0xee, 0x71, 0x6b,
	0xea, 0xe9, 0xeb, 0xb0, 0x1a, 0x2e, 0xcd, 0x3c, 0x5d, 0x47, 0x97, 0xd2, 0x52, 0xfe, 0xdc, 0x99,
	0xa7, 0xd7, 0x00, 0xd2, 0x7b, 0xf0, 0xa3, 0x86, 0xd6, 0xf7, 0x31, 0xc3, 0xee, 0x5d, 0x72, 0xb0,
	0x97, 0xd7, 0x64, 0xc4, 0x22, 0x45, 0x93, 0x21, 0xe8, 0x18, 0x35, 0x0e, 0x65, 0x14, 0xd9, 0x3e,
	0x87, 0x4b, 0x7d, 0x90, 0xbd, 0xa9, 0xa7, 0xaf, 0xc2, 0x39, 0x7f, 0x61, 0xe6, 0xe9, 0x97, 0x50,
	0x6d, 0x5e, 0xc6, 0x9f, 0x18, 0x5c, 0xb8, 0xf9, 0x1d, 0xf8, 0xba, 0x84, 0xb6, 0xde, 0x1d, 0xbb,
	0x0e, 0x61, 0x14, 0xf7, 0xdc, 0xce, 0x70, 0xf8, 0x5f, 0x5f, 0xae, 0xef, 0x34, 0x99, 0xea, 0x16,
	0x6a, 0xf0, 0x1c, 0xec, 0xda, 0xb1, 0x11, 0x36, 0x19, 0xb7, 0x93, 0xff, 0xba, 0xd6, 0x70, 0xd8,
	0xcd, 0xbc, 0x78, 0xe1, 0xd7, 0x2f, 0x91, 0xce, 0x3c, 0xfd, 0x2a, 0x6c, 0xcb, 0x6b, 0xbc, 0xaa,
	0x08, 0x54, 0x7e, 0x82, 0x6e, 0xc3, 0x95, 0x28, 0x41, 0x85, 0xf7, 0x44, 0xef, 0x78, 0xab, 0xf3,
	0xe1, 0x1b, 0x03, 0xdb, 0x3d, 0x9a, 0x1c, 0x36, 0x7b, 0x64, 0x64, 0x72, 0xb2, 0xf8, 0xf7, 0x4e,
	0xb3, 0xd8, 0x6f, 0xb0, 0x87, 0x2b, 0xfe, 0x0f, 0x9e, 0xb7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xc3, 0x7b, 0x54, 0xbb, 0x8c, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PoliciesClient is the client API for Policies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PoliciesClient interface {
	//
	//Create a custom policy
	//
	//Creates a custom IAM policy used to control permissions in Automate.
	//A policy is composed of one or more statements that grant permissions to a set of members.
	//Each statement contains a role as well as a list of projects.
	//
	//The role defines a set of actions that the statement is scoped to.
	//The project list defines the set of resources that the statement is scoped to.
	//Pass `"projects": ["*"]` to scope a statement to every project.
	//
	//A policy's *top-level* projects list defines which projects the policy belongs to (for filtering policies by their projects),
	//whereas the *statement-level* projects list defines which projects the statement applies to.
	//
	//This example creates a new policy not associated with any project (because the top-level `projects` property is empty) that grants the `viewer` role
	//on a few projects for all LDAP teams and a custom role `qa` on a specific project.
	//
	//Example:
	//```
	//{
	//"name": "My Viewer Policy",
	//"id": "viewer-policy",
	//"members": ["team:ldap:*"],
	//"statements" : [
	//{
	//"role": "viewer",
	//"projects": ["project1", "project2"]
	//},
	//{
	//"role": "qa",
	//"projects": ["acceptanceProject"]
	//}
	//],
	//"projects": []
	//}
	//```
	//
	//Authorization Action:
	//```
	//iam:policies:create
	//```
	CreatePolicy(ctx context.Context, in *request.CreatePolicyReq, opts ...grpc.CallOption) (*response.CreatePolicyResp, error)
	//
	//Get a policy
	//
	//Returns the details for a policy.
	//
	//Authorization Action:
	//```
	//iam:policies:get
	//```
	GetPolicy(ctx context.Context, in *request.GetPolicyReq, opts ...grpc.CallOption) (*response.GetPolicyResp, error)
	//
	//List all policies
	//
	//List all policies.
	//
	//Authorization Action:
	//```
	//iam:policies:list
	//```
	ListPolicies(ctx context.Context, in *request.ListPoliciesReq, opts ...grpc.CallOption) (*response.ListPoliciesResp, error)
	//
	//Delete a custom policy
	//
	//Delete a specified custom policy. You cannot delete Chef-managed policies.
	//
	//Authorization Action:
	//```
	//iam:policies:delete
	//```
	DeletePolicy(ctx context.Context, in *request.DeletePolicyReq, opts ...grpc.CallOption) (*response.DeletePolicyResp, error)
	//
	//Update a custom policy
	//
	//This operation overwrites all fields excepting ID,
	//including those omitted from the request, so be sure to specify all properties.
	//Properties that you do not include are reset to empty values.
	//The only exception is the policy ID, which is immutable; it can only be set at creation time.
	//
	//While you can use this endpoint to update members on a policy, if that is the only
	//property you wish to modify you might find it more convenient to use one of these endpoints instead:
	//Add policy members, Remove policy members, or Replace policy members.
	//
	//Authorization Action:
	//```
	//iam:policies:update
	//```
	UpdatePolicy(ctx context.Context, in *request.UpdatePolicyReq, opts ...grpc.CallOption) (*response.UpdatePolicyResp, error)
	//
	//Get IAM version
	//
	//Returns the major and minor version of IAM that your automate installation is running.
	//
	//Authorization Action:
	//```
	//iam:policies:get
	//```
	GetPolicyVersion(ctx context.Context, in *request.GetPolicyVersionReq, opts ...grpc.CallOption) (*response.GetPolicyVersionResp, error)
	//
	//List policy members
	//
	//List all members of a specific policy.
	//
	//Authorization Action:
	//```
	//iam:policyMembers:get
	//```
	ListPolicyMembers(ctx context.Context, in *request.ListPolicyMembersReq, opts ...grpc.CallOption) (*response.ListPolicyMembersResp, error)
	//
	//Replace policy members
	//
	//Replace the entire member list of a specific policy with a new list.
	//You may use this endpoint to update members of either Custom or Chef-managed policies.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression](https://automate.chef.io/docs/iam-v2-guide/#member-expressions) format.
	//
	//Authorization Action:
	//```
	//iam:policyMembers:update
	//```
	ReplacePolicyMembers(ctx context.Context, in *request.ReplacePolicyMembersReq, opts ...grpc.CallOption) (*response.ReplacePolicyMembersResp, error)
	//
	//Remove policy members
	//
	//Remove members from the member list of a specific policy. Silently ignores
	//members that are not already part of the member list.
	//You may use this endpoint to update members of either Custom or Chef-managed policies.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression](https://automate.chef.io/docs/iam-v2-guide/#member-expressions) format.
	//
	//The removed members will still exist within Chef Automate, but are no longer associated with this policy.
	//
	//Authorization Action:
	//```
	//iam:policyMembers:delete
	//```
	RemovePolicyMembers(ctx context.Context, in *request.RemovePolicyMembersReq, opts ...grpc.CallOption) (*response.RemovePolicyMembersResp, error)
	//
	//Add policy members
	//
	//Add members to the member list of a specific policy.
	//You may use this endpoint to update members of either Custom or Chef-managed policies.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression](https://automate.chef.io/docs/iam-v2-guide/#member-expressions) format.
	//
	//Authorization Action:
	//```
	//iam:policyMembers:create
	//```
	AddPolicyMembers(ctx context.Context, in *request.AddPolicyMembersReq, opts ...grpc.CallOption) (*response.AddPolicyMembersResp, error)
	//
	//Create a custom role
	//
	//Creates a new role to be used in the policies that control permissions in Automate.
	//
	//A role defines the scope of actions in a policy statement.
	//
	//Authorization Action:
	//```
	//iam:roles:create
	//```
	CreateRole(ctx context.Context, in *request.CreateRoleReq, opts ...grpc.CallOption) (*response.CreateRoleResp, error)
	//
	//List all roles
	//
	//List all *Chef-managed* and *Custom* roles.
	//
	//Authorization Action:
	//```
	//iam:roles:list
	//```
	ListRoles(ctx context.Context, in *request.ListRolesReq, opts ...grpc.CallOption) (*response.ListRolesResp, error)
	//
	//Get a role
	//
	//Returns the details for a role.
	//
	//Authorization Action:
	//```
	//iam:roles:get
	//```
	GetRole(ctx context.Context, in *request.GetRoleReq, opts ...grpc.CallOption) (*response.GetRoleResp, error)
	//
	//Delete a custom role
	//
	//Delete a specified custom role (you cannot delete Chef-managed roles) and remove it from any statements that may have been using it.
	//If such a statement has no other associated actions, the statement is deleted as well.
	//Similarly, if that statement removal results in a policy with no other statements,
	//that policy is removed as well.
	//
	//Authorization Action:
	//```
	//iam:roles:delete
	//```
	DeleteRole(ctx context.Context, in *request.DeleteRoleReq, opts ...grpc.CallOption) (*response.DeleteRoleResp, error)
	//
	//Update a custom role
	//
	//This operation overwrites all fields excepting ID,
	//including those omitted from the request, so be sure to specify all properties.
	//Properties that you do not include are reset to empty values.
	//
	//Authorization Action:
	//```
	//iam:roles:update
	//```
	UpdateRole(ctx context.Context, in *request.UpdateRoleReq, opts ...grpc.CallOption) (*response.UpdateRoleResp, error)
	//
	//Create a project
	//
	//Creates a new project to be used in the policies that control permissions in Automate.
	//
	//A project defines the scope of resources in a policy statement. Resources can be in more than one project.
	//
	//Authorization Action:
	//```
	//iam:projects:create
	//```
	CreateProject(ctx context.Context, in *request.CreateProjectReq, opts ...grpc.CallOption) (*response.CreateProjectResp, error)
	//
	//Update a project
	//
	//Updates the name of an existing project.
	//
	//Authorization Action:
	//```
	//iam:projects:update
	//```
	UpdateProject(ctx context.Context, in *request.UpdateProjectReq, opts ...grpc.CallOption) (*response.UpdateProjectResp, error)
	//
	//Get a project
	//
	//Returns the details for a project.
	//
	//Authorization Action:
	//```
	//iam:projects:get
	//```
	GetProject(ctx context.Context, in *request.GetProjectReq, opts ...grpc.CallOption) (*response.GetProjectResp, error)
	//
	//List all projects
	//
	//List all projects.
	//
	//Authorization Action:
	//```
	//iam:projects:list
	//```
	ListProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error)
	//
	//Delete a project
	//
	//Delete a project from any resources tagged with it.
	//
	//Also deletes this project from any project list in any policy statements.
	//If the resulting project list for a given statement is empty, it is deleted.
	//If the resulting policy has no statements, it is also deleted.
	//
	//Authorization Action:
	//```
	//iam:projects:delete
	//```
	DeleteProject(ctx context.Context, in *request.DeleteProjectReq, opts ...grpc.CallOption) (*response.DeleteProjectResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	UpgradeToV2(ctx context.Context, in *request.UpgradeToV2Req, opts ...grpc.CallOption) (*response.UpgradeToV2Resp, error)
	ResetToV1(ctx context.Context, in *request.ResetToV1Req, opts ...grpc.CallOption) (*response.ResetToV1Resp, error)
	IntrospectAllProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error)
}

type policiesClient struct {
	cc grpc.ClientConnInterface
}

func NewPoliciesClient(cc grpc.ClientConnInterface) PoliciesClient {
	return &policiesClient{cc}
}

func (c *policiesClient) CreatePolicy(ctx context.Context, in *request.CreatePolicyReq, opts ...grpc.CallOption) (*response.CreatePolicyResp, error) {
	out := new(response.CreatePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetPolicy(ctx context.Context, in *request.GetPolicyReq, opts ...grpc.CallOption) (*response.GetPolicyResp, error) {
	out := new(response.GetPolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListPolicies(ctx context.Context, in *request.ListPoliciesReq, opts ...grpc.CallOption) (*response.ListPoliciesResp, error) {
	out := new(response.ListPoliciesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeletePolicy(ctx context.Context, in *request.DeletePolicyReq, opts ...grpc.CallOption) (*response.DeletePolicyResp, error) {
	out := new(response.DeletePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdatePolicy(ctx context.Context, in *request.UpdatePolicyReq, opts ...grpc.CallOption) (*response.UpdatePolicyResp, error) {
	out := new(response.UpdatePolicyResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetPolicyVersion(ctx context.Context, in *request.GetPolicyVersionReq, opts ...grpc.CallOption) (*response.GetPolicyVersionResp, error) {
	out := new(response.GetPolicyVersionResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetPolicyVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListPolicyMembers(ctx context.Context, in *request.ListPolicyMembersReq, opts ...grpc.CallOption) (*response.ListPolicyMembersResp, error) {
	out := new(response.ListPolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListPolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ReplacePolicyMembers(ctx context.Context, in *request.ReplacePolicyMembersReq, opts ...grpc.CallOption) (*response.ReplacePolicyMembersResp, error) {
	out := new(response.ReplacePolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ReplacePolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) RemovePolicyMembers(ctx context.Context, in *request.RemovePolicyMembersReq, opts ...grpc.CallOption) (*response.RemovePolicyMembersResp, error) {
	out := new(response.RemovePolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/RemovePolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) AddPolicyMembers(ctx context.Context, in *request.AddPolicyMembersReq, opts ...grpc.CallOption) (*response.AddPolicyMembersResp, error) {
	out := new(response.AddPolicyMembersResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/AddPolicyMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) CreateRole(ctx context.Context, in *request.CreateRoleReq, opts ...grpc.CallOption) (*response.CreateRoleResp, error) {
	out := new(response.CreateRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListRoles(ctx context.Context, in *request.ListRolesReq, opts ...grpc.CallOption) (*response.ListRolesResp, error) {
	out := new(response.ListRolesResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetRole(ctx context.Context, in *request.GetRoleReq, opts ...grpc.CallOption) (*response.GetRoleResp, error) {
	out := new(response.GetRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeleteRole(ctx context.Context, in *request.DeleteRoleReq, opts ...grpc.CallOption) (*response.DeleteRoleResp, error) {
	out := new(response.DeleteRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdateRole(ctx context.Context, in *request.UpdateRoleReq, opts ...grpc.CallOption) (*response.UpdateRoleResp, error) {
	out := new(response.UpdateRoleResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) CreateProject(ctx context.Context, in *request.CreateProjectReq, opts ...grpc.CallOption) (*response.CreateProjectResp, error) {
	out := new(response.CreateProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdateProject(ctx context.Context, in *request.UpdateProjectReq, opts ...grpc.CallOption) (*response.UpdateProjectResp, error) {
	out := new(response.UpdateProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetProject(ctx context.Context, in *request.GetProjectReq, opts ...grpc.CallOption) (*response.GetProjectResp, error) {
	out := new(response.GetProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error) {
	out := new(response.ListProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeleteProject(ctx context.Context, in *request.DeleteProjectReq, opts ...grpc.CallOption) (*response.DeleteProjectResp, error) {
	out := new(response.DeleteProjectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpgradeToV2(ctx context.Context, in *request.UpgradeToV2Req, opts ...grpc.CallOption) (*response.UpgradeToV2Resp, error) {
	out := new(response.UpgradeToV2Resp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/UpgradeToV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ResetToV1(ctx context.Context, in *request.ResetToV1Req, opts ...grpc.CallOption) (*response.ResetToV1Resp, error) {
	out := new(response.ResetToV1Resp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/ResetToV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) IntrospectAllProjects(ctx context.Context, in *request.ListProjectsReq, opts ...grpc.CallOption) (*response.ListProjectsResp, error) {
	out := new(response.ListProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Policies/IntrospectAllProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoliciesServer is the server API for Policies service.
type PoliciesServer interface {
	//
	//Create a custom policy
	//
	//Creates a custom IAM policy used to control permissions in Automate.
	//A policy is composed of one or more statements that grant permissions to a set of members.
	//Each statement contains a role as well as a list of projects.
	//
	//The role defines a set of actions that the statement is scoped to.
	//The project list defines the set of resources that the statement is scoped to.
	//Pass `"projects": ["*"]` to scope a statement to every project.
	//
	//A policy's *top-level* projects list defines which projects the policy belongs to (for filtering policies by their projects),
	//whereas the *statement-level* projects list defines which projects the statement applies to.
	//
	//This example creates a new policy not associated with any project (because the top-level `projects` property is empty) that grants the `viewer` role
	//on a few projects for all LDAP teams and a custom role `qa` on a specific project.
	//
	//Example:
	//```
	//{
	//"name": "My Viewer Policy",
	//"id": "viewer-policy",
	//"members": ["team:ldap:*"],
	//"statements" : [
	//{
	//"role": "viewer",
	//"projects": ["project1", "project2"]
	//},
	//{
	//"role": "qa",
	//"projects": ["acceptanceProject"]
	//}
	//],
	//"projects": []
	//}
	//```
	//
	//Authorization Action:
	//```
	//iam:policies:create
	//```
	CreatePolicy(context.Context, *request.CreatePolicyReq) (*response.CreatePolicyResp, error)
	//
	//Get a policy
	//
	//Returns the details for a policy.
	//
	//Authorization Action:
	//```
	//iam:policies:get
	//```
	GetPolicy(context.Context, *request.GetPolicyReq) (*response.GetPolicyResp, error)
	//
	//List all policies
	//
	//List all policies.
	//
	//Authorization Action:
	//```
	//iam:policies:list
	//```
	ListPolicies(context.Context, *request.ListPoliciesReq) (*response.ListPoliciesResp, error)
	//
	//Delete a custom policy
	//
	//Delete a specified custom policy. You cannot delete Chef-managed policies.
	//
	//Authorization Action:
	//```
	//iam:policies:delete
	//```
	DeletePolicy(context.Context, *request.DeletePolicyReq) (*response.DeletePolicyResp, error)
	//
	//Update a custom policy
	//
	//This operation overwrites all fields excepting ID,
	//including those omitted from the request, so be sure to specify all properties.
	//Properties that you do not include are reset to empty values.
	//The only exception is the policy ID, which is immutable; it can only be set at creation time.
	//
	//While you can use this endpoint to update members on a policy, if that is the only
	//property you wish to modify you might find it more convenient to use one of these endpoints instead:
	//Add policy members, Remove policy members, or Replace policy members.
	//
	//Authorization Action:
	//```
	//iam:policies:update
	//```
	UpdatePolicy(context.Context, *request.UpdatePolicyReq) (*response.UpdatePolicyResp, error)
	//
	//Get IAM version
	//
	//Returns the major and minor version of IAM that your automate installation is running.
	//
	//Authorization Action:
	//```
	//iam:policies:get
	//```
	GetPolicyVersion(context.Context, *request.GetPolicyVersionReq) (*response.GetPolicyVersionResp, error)
	//
	//List policy members
	//
	//List all members of a specific policy.
	//
	//Authorization Action:
	//```
	//iam:policyMembers:get
	//```
	ListPolicyMembers(context.Context, *request.ListPolicyMembersReq) (*response.ListPolicyMembersResp, error)
	//
	//Replace policy members
	//
	//Replace the entire member list of a specific policy with a new list.
	//You may use this endpoint to update members of either Custom or Chef-managed policies.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression](https://automate.chef.io/docs/iam-v2-guide/#member-expressions) format.
	//
	//Authorization Action:
	//```
	//iam:policyMembers:update
	//```
	ReplacePolicyMembers(context.Context, *request.ReplacePolicyMembersReq) (*response.ReplacePolicyMembersResp, error)
	//
	//Remove policy members
	//
	//Remove members from the member list of a specific policy. Silently ignores
	//members that are not already part of the member list.
	//You may use this endpoint to update members of either Custom or Chef-managed policies.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression](https://automate.chef.io/docs/iam-v2-guide/#member-expressions) format.
	//
	//The removed members will still exist within Chef Automate, but are no longer associated with this policy.
	//
	//Authorization Action:
	//```
	//iam:policyMembers:delete
	//```
	RemovePolicyMembers(context.Context, *request.RemovePolicyMembersReq) (*response.RemovePolicyMembersResp, error)
	//
	//Add policy members
	//
	//Add members to the member list of a specific policy.
	//You may use this endpoint to update members of either Custom or Chef-managed policies.
	//
	//Ensure each element of the members array is in the correct
	//[Member Expression](https://automate.chef.io/docs/iam-v2-guide/#member-expressions) format.
	//
	//Authorization Action:
	//```
	//iam:policyMembers:create
	//```
	AddPolicyMembers(context.Context, *request.AddPolicyMembersReq) (*response.AddPolicyMembersResp, error)
	//
	//Create a custom role
	//
	//Creates a new role to be used in the policies that control permissions in Automate.
	//
	//A role defines the scope of actions in a policy statement.
	//
	//Authorization Action:
	//```
	//iam:roles:create
	//```
	CreateRole(context.Context, *request.CreateRoleReq) (*response.CreateRoleResp, error)
	//
	//List all roles
	//
	//List all *Chef-managed* and *Custom* roles.
	//
	//Authorization Action:
	//```
	//iam:roles:list
	//```
	ListRoles(context.Context, *request.ListRolesReq) (*response.ListRolesResp, error)
	//
	//Get a role
	//
	//Returns the details for a role.
	//
	//Authorization Action:
	//```
	//iam:roles:get
	//```
	GetRole(context.Context, *request.GetRoleReq) (*response.GetRoleResp, error)
	//
	//Delete a custom role
	//
	//Delete a specified custom role (you cannot delete Chef-managed roles) and remove it from any statements that may have been using it.
	//If such a statement has no other associated actions, the statement is deleted as well.
	//Similarly, if that statement removal results in a policy with no other statements,
	//that policy is removed as well.
	//
	//Authorization Action:
	//```
	//iam:roles:delete
	//```
	DeleteRole(context.Context, *request.DeleteRoleReq) (*response.DeleteRoleResp, error)
	//
	//Update a custom role
	//
	//This operation overwrites all fields excepting ID,
	//including those omitted from the request, so be sure to specify all properties.
	//Properties that you do not include are reset to empty values.
	//
	//Authorization Action:
	//```
	//iam:roles:update
	//```
	UpdateRole(context.Context, *request.UpdateRoleReq) (*response.UpdateRoleResp, error)
	//
	//Create a project
	//
	//Creates a new project to be used in the policies that control permissions in Automate.
	//
	//A project defines the scope of resources in a policy statement. Resources can be in more than one project.
	//
	//Authorization Action:
	//```
	//iam:projects:create
	//```
	CreateProject(context.Context, *request.CreateProjectReq) (*response.CreateProjectResp, error)
	//
	//Update a project
	//
	//Updates the name of an existing project.
	//
	//Authorization Action:
	//```
	//iam:projects:update
	//```
	UpdateProject(context.Context, *request.UpdateProjectReq) (*response.UpdateProjectResp, error)
	//
	//Get a project
	//
	//Returns the details for a project.
	//
	//Authorization Action:
	//```
	//iam:projects:get
	//```
	GetProject(context.Context, *request.GetProjectReq) (*response.GetProjectResp, error)
	//
	//List all projects
	//
	//List all projects.
	//
	//Authorization Action:
	//```
	//iam:projects:list
	//```
	ListProjects(context.Context, *request.ListProjectsReq) (*response.ListProjectsResp, error)
	//
	//Delete a project
	//
	//Delete a project from any resources tagged with it.
	//
	//Also deletes this project from any project list in any policy statements.
	//If the resulting project list for a given statement is empty, it is deleted.
	//If the resulting policy has no statements, it is also deleted.
	//
	//Authorization Action:
	//```
	//iam:projects:delete
	//```
	DeleteProject(context.Context, *request.DeleteProjectReq) (*response.DeleteProjectResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	UpgradeToV2(context.Context, *request.UpgradeToV2Req) (*response.UpgradeToV2Resp, error)
	ResetToV1(context.Context, *request.ResetToV1Req) (*response.ResetToV1Resp, error)
	IntrospectAllProjects(context.Context, *request.ListProjectsReq) (*response.ListProjectsResp, error)
}

// UnimplementedPoliciesServer can be embedded to have forward compatible implementations.
type UnimplementedPoliciesServer struct {
}

func (*UnimplementedPoliciesServer) CreatePolicy(ctx context.Context, req *request.CreatePolicyReq) (*response.CreatePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (*UnimplementedPoliciesServer) GetPolicy(ctx context.Context, req *request.GetPolicyReq) (*response.GetPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (*UnimplementedPoliciesServer) ListPolicies(ctx context.Context, req *request.ListPoliciesReq) (*response.ListPoliciesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (*UnimplementedPoliciesServer) DeletePolicy(ctx context.Context, req *request.DeletePolicyReq) (*response.DeletePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (*UnimplementedPoliciesServer) UpdatePolicy(ctx context.Context, req *request.UpdatePolicyReq) (*response.UpdatePolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (*UnimplementedPoliciesServer) GetPolicyVersion(ctx context.Context, req *request.GetPolicyVersionReq) (*response.GetPolicyVersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyVersion not implemented")
}
func (*UnimplementedPoliciesServer) ListPolicyMembers(ctx context.Context, req *request.ListPolicyMembersReq) (*response.ListPolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) ReplacePolicyMembers(ctx context.Context, req *request.ReplacePolicyMembersReq) (*response.ReplacePolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplacePolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) RemovePolicyMembers(ctx context.Context, req *request.RemovePolicyMembersReq) (*response.RemovePolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) AddPolicyMembers(ctx context.Context, req *request.AddPolicyMembersReq) (*response.AddPolicyMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicyMembers not implemented")
}
func (*UnimplementedPoliciesServer) CreateRole(ctx context.Context, req *request.CreateRoleReq) (*response.CreateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (*UnimplementedPoliciesServer) ListRoles(ctx context.Context, req *request.ListRolesReq) (*response.ListRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedPoliciesServer) GetRole(ctx context.Context, req *request.GetRoleReq) (*response.GetRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedPoliciesServer) DeleteRole(ctx context.Context, req *request.DeleteRoleReq) (*response.DeleteRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedPoliciesServer) UpdateRole(ctx context.Context, req *request.UpdateRoleReq) (*response.UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedPoliciesServer) CreateProject(ctx context.Context, req *request.CreateProjectReq) (*response.CreateProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedPoliciesServer) UpdateProject(ctx context.Context, req *request.UpdateProjectReq) (*response.UpdateProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedPoliciesServer) GetProject(ctx context.Context, req *request.GetProjectReq) (*response.GetProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedPoliciesServer) ListProjects(ctx context.Context, req *request.ListProjectsReq) (*response.ListProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedPoliciesServer) DeleteProject(ctx context.Context, req *request.DeleteProjectReq) (*response.DeleteProjectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedPoliciesServer) UpgradeToV2(ctx context.Context, req *request.UpgradeToV2Req) (*response.UpgradeToV2Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeToV2 not implemented")
}
func (*UnimplementedPoliciesServer) ResetToV1(ctx context.Context, req *request.ResetToV1Req) (*response.ResetToV1Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetToV1 not implemented")
}
func (*UnimplementedPoliciesServer) IntrospectAllProjects(ctx context.Context, req *request.ListProjectsReq) (*response.ListProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectAllProjects not implemented")
}

func RegisterPoliciesServer(s *grpc.Server, srv PoliciesServer) {
	s.RegisterService(&_Policies_serviceDesc, srv)
}

func _Policies_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreatePolicy(ctx, req.(*request.CreatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetPolicy(ctx, req.(*request.GetPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListPoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListPolicies(ctx, req.(*request.ListPoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeletePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeletePolicy(ctx, req.(*request.DeletePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdatePolicy(ctx, req.(*request.UpdatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetPolicyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetPolicyVersionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetPolicyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetPolicyVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetPolicyVersion(ctx, req.(*request.GetPolicyVersionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListPolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListPolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListPolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListPolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListPolicyMembers(ctx, req.(*request.ListPolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ReplacePolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ReplacePolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ReplacePolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ReplacePolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ReplacePolicyMembers(ctx, req.(*request.ReplacePolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_RemovePolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.RemovePolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).RemovePolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/RemovePolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).RemovePolicyMembers(ctx, req.(*request.RemovePolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_AddPolicyMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.AddPolicyMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).AddPolicyMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/AddPolicyMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).AddPolicyMembers(ctx, req.(*request.AddPolicyMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreateRole(ctx, req.(*request.CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListRoles(ctx, req.(*request.ListRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetRole(ctx, req.(*request.GetRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeleteRole(ctx, req.(*request.DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdateRole(ctx, req.(*request.UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreateProject(ctx, req.(*request.CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdateProject(ctx, req.(*request.UpdateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetProject(ctx, req.(*request.GetProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListProjects(ctx, req.(*request.ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeleteProject(ctx, req.(*request.DeleteProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpgradeToV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpgradeToV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpgradeToV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/UpgradeToV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpgradeToV2(ctx, req.(*request.UpgradeToV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ResetToV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResetToV1Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ResetToV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/ResetToV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ResetToV1(ctx, req.(*request.ResetToV1Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_IntrospectAllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).IntrospectAllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Policies/IntrospectAllProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).IntrospectAllProjects(ctx, req.(*request.ListProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Policies_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2.Policies",
	HandlerType: (*PoliciesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _Policies_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _Policies_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _Policies_ListPolicies_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _Policies_DeletePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _Policies_UpdatePolicy_Handler,
		},
		{
			MethodName: "GetPolicyVersion",
			Handler:    _Policies_GetPolicyVersion_Handler,
		},
		{
			MethodName: "ListPolicyMembers",
			Handler:    _Policies_ListPolicyMembers_Handler,
		},
		{
			MethodName: "ReplacePolicyMembers",
			Handler:    _Policies_ReplacePolicyMembers_Handler,
		},
		{
			MethodName: "RemovePolicyMembers",
			Handler:    _Policies_RemovePolicyMembers_Handler,
		},
		{
			MethodName: "AddPolicyMembers",
			Handler:    _Policies_AddPolicyMembers_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Policies_CreateRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Policies_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Policies_GetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Policies_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Policies_UpdateRole_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _Policies_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _Policies_UpdateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Policies_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _Policies_ListProjects_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Policies_DeleteProject_Handler,
		},
		{
			MethodName: "UpgradeToV2",
			Handler:    _Policies_UpgradeToV2_Handler,
		},
		{
			MethodName: "ResetToV1",
			Handler:    _Policies_ResetToV1_Handler,
		},
		{
			MethodName: "IntrospectAllProjects",
			Handler:    _Policies_IntrospectAllProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2/policy.proto",
}
