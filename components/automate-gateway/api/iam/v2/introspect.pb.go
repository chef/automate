// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2/introspect.proto

package v2

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2/request"
	response "github.com/chef/automate/components/automate-gateway/api/iam/v2/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2/introspect.proto", fileDescriptor_616a9aa14beceb68)
}

var fileDescriptor_616a9aa14beceb68 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x15, 0xfe, 0xec, 0xc1, 0xd2, 0xae, 0x90, 0xb5, 0xb0, 0x26, 0x02, 0x21, 0x02, 0x12,
	0x68, 0x51, 0x6d, 0xa9, 0x1c, 0x90, 0x7a, 0x59, 0xca, 0x8d, 0xeb, 0x72, 0xe3, 0x52, 0xb9, 0x61,
	0x48, 0x2c, 0xc5, 0x1e, 0x37, 0x76, 0x8a, 0x5a, 0x71, 0xca, 0xb1, 0x57, 0x9e, 0x25, 0x2f, 0xc1,
	0x95, 0x33, 0x07, 0x24, 0x1e, 0x81, 0x07, 0x40, 0x49, 0x45, 0x43, 0x95, 0x6d, 0x9b, 0x1e, 0x93,
	0xf9, 0xe6, 0xf3, 0xf7, 0xf3, 0x78, 0xc8, 0x9b, 0x18, 0xb5, 0x45, 0x03, 0xc6, 0x3b, 0x21, 0x0b,
	0x8f, 0x5a, 0x7a, 0x18, 0x24, 0xd2, 0xc3, 0x17, 0xb9, 0x10, 0xd2, 0x2a, 0xa1, 0xa4, 0x16, 0xf3,
	0xa1, 0x50, 0xc6, 0xe7, 0xe8, 0x2c, 0xc4, 0x9e, 0xdb, 0x1c, 0x3d, 0x52, 0x16, 0xa7, 0xf0, 0x99,
	0xff, 0x6b, 0xe1, 0xd2, 0x2a, 0xae, 0xa4, 0xe6, 0xf3, 0x61, 0xf8, 0x28, 0x41, 0x4c, 0x32, 0x68,
	0xba, 0xa5, 0x31, 0xe8, 0xa5, 0x57, 0x68, 0xdc, 0xba, 0x2f, 0xbc, 0xea, 0x79, 0x60, 0x0e, 0xb3,
	0x02, 0x9c, 0xef, 0x1c, 0x1c, 0xbe, 0xed, 0x6d, 0xe0, 0x2c, 0x1a, 0x07, 0x7d, 0x1d, 0x72, 0x1b,
	0x8b, 0xa6, 0x1e, 0x0f, 0x12, 0x30, 0x03, 0x8b, 0x99, 0x8a, 0x17, 0x3b, 0x20, 0x8e, 0x71, 0xa8,
	0xe3, 0x74, 0x1c, 0x86, 0xdf, 0xef, 0x92, 0xd3, 0x71, 0xe1, 0x53, 0xcc, 0xd5, 0xb2, 0x29, 0xd0,
	0x5f, 0x01, 0x39, 0x7d, 0xbf, 0x89, 0x3a, 0xce, 0x32, 0x7a, 0xc9, 0x77, 0xdd, 0x31, 0xdf, 0x12,
	0x5e, 0xc3, 0x2c, 0x7c, 0xd9, 0x47, 0x7b, 0x0d, 0xce, 0x46, 0xcb, 0xb2, 0x62, 0xcf, 0xc8, 0x53,
	0x59, 0xf8, 0x74, 0xd2, 0x5e, 0x8d, 0x42, 0x33, 0x6a, 0xbf, 0x26, 0x32, 0xcb, 0xca, 0x8a, 0x9d,
	0xd0, 0x3b, 0x39, 0xc8, 0x4f, 0xab, 0x8a, 0xdd, 0x23, 0x67, 0x4a, 0xea, 0xff, 0x14, 0xab, 0x8a,
	0x5d, 0xd0, 0xfb, 0xdb, 0xff, 0x46, 0x09, 0xd4, 0x71, 0xca, 0x1f, 0xbf, 0xbf, 0xdd, 0x3a, 0xa7,
	0xb4, 0xfb, 0x74, 0xe8, 0x9f, 0x80, 0x9c, 0xb5, 0x71, 0x3e, 0xa0, 0x06, 0xfa, 0xaa, 0x4f, 0xf0,
	0x5a, 0x79, 0x1c, 0xe5, 0x2a, 0x28, 0x2b, 0xf6, 0x9c, 0x44, 0xfb, 0x31, 0x1d, 0x6a, 0x38, 0xc8,
	0xc9, 0xe8, 0x83, 0x2e, 0x67, 0x9d, 0xa8, 0x01, 0x7d, 0x18, 0x5d, 0x74, 0x41, 0xd7, 0xc6, 0x75,
	0xf9, 0xf6, 0x28, 0xb8, 0xa4, 0x3f, 0x03, 0x42, 0xda, 0x7c, 0xf4, 0x45, 0x3f, 0x8a, 0x63, 0x70,
	0xbf, 0x96, 0x15, 0x7b, 0x42, 0x1e, 0xef, 0xa5, 0x3d, 0x08, 0x7a, 0x4e, 0x69, 0x17, 0x74, 0x3d,
	0xcd, 0xe8, 0x86, 0x69, 0x6e, 0xf8, 0xde, 0x8d, 0x3f, 0x5e, 0x25, 0xca, 0xa7, 0xc5, 0x94, 0xc7,
	0xa8, 0x45, 0x9d, 0x79, 0xb3, 0x15, 0xa2, 0xdf, 0xb6, 0x4e, 0x4f, 0x9a, 0xb5, 0x78, 0xfd, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x2b, 0x7c, 0x23, 0x8c, 0x90, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizationClient interface {
	IntrospectAll(ctx context.Context, in *request.IntrospectAllReq, opts ...grpc.CallOption) (*response.IntrospectResp, error)
	IntrospectSome(ctx context.Context, in *request.IntrospectSomeReq, opts ...grpc.CallOption) (*response.IntrospectResp, error)
	Introspect(ctx context.Context, in *request.IntrospectReq, opts ...grpc.CallOption) (*response.IntrospectResp, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) IntrospectAll(ctx context.Context, in *request.IntrospectAllReq, opts ...grpc.CallOption) (*response.IntrospectResp, error) {
	out := new(response.IntrospectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Authorization/IntrospectAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) IntrospectSome(ctx context.Context, in *request.IntrospectSomeReq, opts ...grpc.CallOption) (*response.IntrospectResp, error) {
	out := new(response.IntrospectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Authorization/IntrospectSome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) Introspect(ctx context.Context, in *request.IntrospectReq, opts ...grpc.CallOption) (*response.IntrospectResp, error) {
	out := new(response.IntrospectResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Authorization/Introspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
type AuthorizationServer interface {
	IntrospectAll(context.Context, *request.IntrospectAllReq) (*response.IntrospectResp, error)
	IntrospectSome(context.Context, *request.IntrospectSomeReq) (*response.IntrospectResp, error)
	Introspect(context.Context, *request.IntrospectReq) (*response.IntrospectResp, error)
}

// UnimplementedAuthorizationServer can be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (*UnimplementedAuthorizationServer) IntrospectAll(ctx context.Context, req *request.IntrospectAllReq) (*response.IntrospectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectAll not implemented")
}
func (*UnimplementedAuthorizationServer) IntrospectSome(ctx context.Context, req *request.IntrospectSomeReq) (*response.IntrospectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntrospectSome not implemented")
}
func (*UnimplementedAuthorizationServer) Introspect(ctx context.Context, req *request.IntrospectReq) (*response.IntrospectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Introspect not implemented")
}

func RegisterAuthorizationServer(s *grpc.Server, srv AuthorizationServer) {
	s.RegisterService(&_Authorization_serviceDesc, srv)
}

func _Authorization_IntrospectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.IntrospectAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).IntrospectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Authorization/IntrospectAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).IntrospectAll(ctx, req.(*request.IntrospectAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_IntrospectSome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.IntrospectSomeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).IntrospectSome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Authorization/IntrospectSome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).IntrospectSome(ctx, req.(*request.IntrospectSomeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_Introspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.IntrospectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).Introspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Authorization/Introspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).Introspect(ctx, req.(*request.IntrospectReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntrospectAll",
			Handler:    _Authorization_IntrospectAll_Handler,
		},
		{
			MethodName: "IntrospectSome",
			Handler:    _Authorization_IntrospectSome_Handler,
		},
		{
			MethodName: "Introspect",
			Handler:    _Authorization_Introspect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2/introspect.proto",
}
