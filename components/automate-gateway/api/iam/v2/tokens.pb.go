// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2/tokens.proto

package v2

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2/request"
	response "github.com/chef/automate/components/automate-gateway/api/iam/v2/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2/tokens.proto", fileDescriptor_210e42bd7205e452)
}

var fileDescriptor_210e42bd7205e452 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x49, 0x29, 0x4b, 0x9d, 0xca, 0xda, 0x4e, 0x11, 0x96, 0xe0, 0x21, 0x0c, 0xa8, 0x75,
	0x69, 0x12, 0xdc, 0xde, 0x56, 0x41, 0x57, 0x45, 0x41, 0xc4, 0x42, 0xd5, 0x8b, 0xa5, 0xe0, 0x34,
	0x79, 0xa6, 0x53, 0x93, 0xcc, 0x34, 0x33, 0x69, 0x2d, 0xa5, 0x2a, 0x0a, 0x1e, 0xf6, 0xe6, 0x7a,
	0x12, 0x3c, 0x0a, 0x82, 0xf7, 0xf5, 0xe0, 0x77, 0x10, 0x0f, 0x7e, 0x05, 0x0f, 0xe2, 0xa7, 0x90,
	0x4c, 0xdc, 0xdd, 0xa4, 0xbb, 0x4b, 0xe3, 0x29, 0xe4, 0xf1, 0x7b, 0x33, 0xff, 0xf9, 0xff, 0xdf,
	0x0c, 0x5a, 0xf5, 0x78, 0x24, 0x78, 0x0c, 0xb1, 0x92, 0x2e, 0x4d, 0x15, 0x8f, 0xa8, 0x02, 0x3b,
	0xa0, 0x0a, 0xf6, 0xe9, 0x81, 0x4b, 0x05, 0x73, 0x19, 0x8d, 0xdc, 0xbd, 0x96, 0xab, 0xf8, 0x33,
	0x88, 0xa5, 0x23, 0x12, 0xae, 0x38, 0x6e, 0x78, 0xdb, 0xf0, 0xd4, 0x19, 0xe0, 0x0e, 0x15, 0xcc,
	0x61, 0x34, 0x72, 0xf6, 0x5a, 0xe6, 0xb9, 0x80, 0xf3, 0x20, 0x04, 0xdd, 0x49, 0xe3, 0x98, 0x2b,
	0xaa, 0x18, 0x1f, 0xf4, 0x99, 0x2b, 0xfa, 0xe3, 0xd9, 0x01, 0xc4, 0xb6, 0xdc, 0xa7, 0x41, 0x00,
	0x89, 0xcb, 0x85, 0x26, 0x26, 0xd0, 0x57, 0x2a, 0x4a, 0x4b, 0x60, 0x37, 0x05, 0xa9, 0x4a, 0x12,
	0xcd, 0xab, 0x95, 0x9b, 0xa5, 0xe0, 0xb1, 0x84, 0x72, 0xf7, 0xf5, 0x89, 0xdd, 0x89, 0xf0, 0xdc,
	0xc2, 0x09, 0x04, 0x0f, 0x99, 0x77, 0xa0, 0x17, 0x1a, 0x13, 0xdf, 0xfa, 0x76, 0x0a, 0xd5, 0x1e,
	0xea, 0x25, 0xf1, 0xf7, 0x19, 0x34, 0x7f, 0x33, 0x01, 0xaa, 0x40, 0x17, 0xf0, 0xb2, 0x33, 0xcd,
	0x3e, 0xa7, 0x80, 0xad, 0xc3, 0xae, 0x79, 0xa9, 0x22, 0x29, 0x05, 0xf9, 0x6d, 0xf4, 0x3a, 0x9f,
	0x0c, 0x54, 0xcb, 0x8f, 0xb1, 0xf3, 0xc1, 0x40, 0xf5, 0xe7, 0xb6, 0xc7, 0x7d, 0xb0, 0x25, 0x8d,
	0x44, 0x08, 0x12, 0xbf, 0x35, 0x5a, 0x6f, 0x0c, 0xf4, 0xca, 0x68, 0xbe, 0x40, 0x75, 0x34, 0x1b,
	0xd2, 0x38, 0xc0, 0x35, 0x73, 0xf6, 0xee, 0x83, 0xb5, 0xfb, 0x28, 0x44, 0x35, 0xc9, 0xd3, 0xc4,
	0x03, 0xbc, 0x65, 0x3e, 0x39, 0x24, 0x31, 0x8d, 0x80, 0xb4, 0x2d, 0xa2, 0xd7, 0xb2, 0x2e, 0x93,
	0x15, 0x8b, 0x30, 0x7f, 0x58, 0xb0, 0x75, 0x81, 0x7a, 0x8a, 0xed, 0x65, 0x94, 0x4a, 0x52, 0x58,
	0xb1, 0x88, 0x48, 0xf8, 0x0e, 0x78, 0x4a, 0x92, 0xb6, 0xb5, 0x41, 0x80, 0x4a, 0x65, 0x27, 0x10,
	0x30, 0x1e, 0x67, 0xec, 0x3e, 0x8c, 0x7e, 0x37, 0x8f, 0xba, 0xfd, 0xc6, 0x69, 0x84, 0x18, 0x8d,
	0xda, 0xb9, 0xd6, 0x6e, 0xbf, 0xb1, 0x84, 0x17, 0x47, 0xff, 0x6d, 0x4f, 0x1f, 0xed, 0xf5, 0xcf,
	0x5f, 0xef, 0x67, 0x96, 0x48, 0xbd, 0x3c, 0x80, 0x6d, 0xa3, 0x89, 0xbf, 0x18, 0x68, 0xee, 0x0e,
	0xa8, 0xdc, 0xcc, 0xf3, 0xd3, 0x2d, 0x1a, 0x30, 0x99, 0x93, 0x17, 0xaa, 0x60, 0x52, 0x90, 0xb5,
	0x5e, 0x67, 0x6e, 0x60, 0x62, 0xb7, 0xdf, 0x58, 0x44, 0x67, 0x0a, 0xc2, 0x0e, 0x99, 0x9f, 0xa9,
	0x5f, 0xc0, 0xf5, 0x42, 0x31, 0x00, 0xa5, 0xa5, 0x9e, 0xc5, 0x4b, 0x65, 0xa9, 0x6e, 0x86, 0xe3,
	0x1f, 0x33, 0x68, 0xfe, 0x91, 0xf0, 0xab, 0x84, 0x5f, 0xc0, 0x4e, 0x08, 0xbf, 0x44, 0x4a, 0x41,
	0xfe, 0x18, 0xbd, 0xce, 0xc7, 0x51, 0xf8, 0xef, 0xc6, 0xc3, 0x7f, 0xd9, 0x3a, 0x42, 0x87, 0xcd,
	0x83, 0xb1, 0xe4, 0x83, 0x61, 0xf2, 0x9b, 0xe6, 0xc6, 0x28, 0xf9, 0x54, 0x6f, 0xe0, 0x5b, 0xf9,
	0x04, 0xe8, 0xea, 0x7f, 0x66, 0x2e, 0x79, 0xaa, 0xb6, 0x4b, 0xa1, 0x4f, 0xf4, 0xb2, 0x9c, 0x7c,
	0xbe, 0xad, 0xb6, 0xb3, 0x61, 0x4e, 0xb2, 0x33, 0x8b, 0xff, 0xab, 0x81, 0xe6, 0x6f, 0x41, 0x08,
	0x15, 0x1c, 0x2d, 0x60, 0x27, 0x38, 0x5a, 0x22, 0xa5, 0x20, 0xeb, 0x15, 0xe6, 0xa0, 0xac, 0xdd,
	0xd7, 0x2b, 0xe4, 0xa3, 0xd0, 0x9c, 0x38, 0x0a, 0x9f, 0x0d, 0x84, 0xee, 0x31, 0xa9, 0xfe, 0x3d,
	0x0b, 0x17, 0xa7, 0xab, 0x19, 0x51, 0x99, 0xec, 0xe5, 0x6a, 0xa0, 0x14, 0xe4, 0x76, 0x59, 0xf5,
	0xf1, 0x6b, 0xb6, 0x88, 0x8b, 0xa7, 0x08, 0x99, 0xcc, 0x27, 0x77, 0x01, 0x1f, 0xbb, 0x64, 0x37,
	0x3a, 0x8f, 0xaf, 0x05, 0x4c, 0x6d, 0xa7, 0x5b, 0x8e, 0xc7, 0x23, 0x37, 0xdb, 0x7d, 0xf8, 0x0a,
	0xba, 0xd5, 0xde, 0xd5, 0xad, 0x9a, 0x7e, 0x06, 0x57, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x3a,
	0xc1, 0x44, 0x2d, 0x60, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TokensClient is the client API for Tokens service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokensClient interface {
	//
	//Creates a token
	//
	//Creates a token.
	//Active defaults to true when not specified.
	//Value is auto-generated when not specified.
	//
	//Note that this creates *non-admin* tokens that may then be assigned permissions via policies just like users or teams (unless you have already created policies that encompass all tokens using `tokens:*``).
	//
	//You cannot create admin tokens via the REST API.
	//Admin tokens can only be created by specifying the `--admin` flag to this chef-automate sub-command:
	//```
	//chef-automate iam token create <your-token-name> --admin`
	//```
	//
	//Authorization Action:
	//```
	//iam:tokens:create
	//```
	CreateToken(ctx context.Context, in *request.CreateTokenReq, opts ...grpc.CallOption) (*response.CreateTokenResp, error)
	//
	//Gets a token
	//
	//Returns the details for a token.
	//
	//Authorization Action:
	//```
	//iam:tokens:get
	//```
	GetToken(ctx context.Context, in *request.GetTokenReq, opts ...grpc.CallOption) (*response.GetTokenResp, error)
	//
	//Updates a token
	//
	//This operation overwrites all fields excepting ID, timestamps, and value,
	//including those omitted from the request, so be sure to specify all properties.
	//Properties that you do not include are reset to empty values.
	//
	//Authorization Action:
	//```
	//iam:tokens:update
	//```
	UpdateToken(ctx context.Context, in *request.UpdateTokenReq, opts ...grpc.CallOption) (*response.UpdateTokenResp, error)
	//
	//Deletes a token
	//
	//Deletes a token and remove it from any policies.
	//
	//Authorization Action:
	//```
	//iam:tokens:delete
	//```
	DeleteToken(ctx context.Context, in *request.DeleteTokenReq, opts ...grpc.CallOption) (*response.DeleteTokenResp, error)
	//
	//Lists all tokens
	//
	//Lists all tokens, both admin and non-admin.
	//
	//Authorization Action:
	//```
	//iam:tokens:list
	//```
	ListTokens(ctx context.Context, in *request.ListTokensReq, opts ...grpc.CallOption) (*response.ListTokensResp, error)
}

type tokensClient struct {
	cc grpc.ClientConnInterface
}

func NewTokensClient(cc grpc.ClientConnInterface) TokensClient {
	return &tokensClient{cc}
}

func (c *tokensClient) CreateToken(ctx context.Context, in *request.CreateTokenReq, opts ...grpc.CallOption) (*response.CreateTokenResp, error) {
	out := new(response.CreateTokenResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) GetToken(ctx context.Context, in *request.GetTokenReq, opts ...grpc.CallOption) (*response.GetTokenResp, error) {
	out := new(response.GetTokenResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) UpdateToken(ctx context.Context, in *request.UpdateTokenReq, opts ...grpc.CallOption) (*response.UpdateTokenResp, error) {
	out := new(response.UpdateTokenResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) DeleteToken(ctx context.Context, in *request.DeleteTokenReq, opts ...grpc.CallOption) (*response.DeleteTokenResp, error) {
	out := new(response.DeleteTokenResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) ListTokens(ctx context.Context, in *request.ListTokensReq, opts ...grpc.CallOption) (*response.ListTokensResp, error) {
	out := new(response.ListTokensResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/ListTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokensServer is the server API for Tokens service.
type TokensServer interface {
	//
	//Creates a token
	//
	//Creates a token.
	//Active defaults to true when not specified.
	//Value is auto-generated when not specified.
	//
	//Note that this creates *non-admin* tokens that may then be assigned permissions via policies just like users or teams (unless you have already created policies that encompass all tokens using `tokens:*``).
	//
	//You cannot create admin tokens via the REST API.
	//Admin tokens can only be created by specifying the `--admin` flag to this chef-automate sub-command:
	//```
	//chef-automate iam token create <your-token-name> --admin`
	//```
	//
	//Authorization Action:
	//```
	//iam:tokens:create
	//```
	CreateToken(context.Context, *request.CreateTokenReq) (*response.CreateTokenResp, error)
	//
	//Gets a token
	//
	//Returns the details for a token.
	//
	//Authorization Action:
	//```
	//iam:tokens:get
	//```
	GetToken(context.Context, *request.GetTokenReq) (*response.GetTokenResp, error)
	//
	//Updates a token
	//
	//This operation overwrites all fields excepting ID, timestamps, and value,
	//including those omitted from the request, so be sure to specify all properties.
	//Properties that you do not include are reset to empty values.
	//
	//Authorization Action:
	//```
	//iam:tokens:update
	//```
	UpdateToken(context.Context, *request.UpdateTokenReq) (*response.UpdateTokenResp, error)
	//
	//Deletes a token
	//
	//Deletes a token and remove it from any policies.
	//
	//Authorization Action:
	//```
	//iam:tokens:delete
	//```
	DeleteToken(context.Context, *request.DeleteTokenReq) (*response.DeleteTokenResp, error)
	//
	//Lists all tokens
	//
	//Lists all tokens, both admin and non-admin.
	//
	//Authorization Action:
	//```
	//iam:tokens:list
	//```
	ListTokens(context.Context, *request.ListTokensReq) (*response.ListTokensResp, error)
}

// UnimplementedTokensServer can be embedded to have forward compatible implementations.
type UnimplementedTokensServer struct {
}

func (*UnimplementedTokensServer) CreateToken(ctx context.Context, req *request.CreateTokenReq) (*response.CreateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedTokensServer) GetToken(ctx context.Context, req *request.GetTokenReq) (*response.GetTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedTokensServer) UpdateToken(ctx context.Context, req *request.UpdateTokenReq) (*response.UpdateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (*UnimplementedTokensServer) DeleteToken(ctx context.Context, req *request.DeleteTokenReq) (*response.DeleteTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (*UnimplementedTokensServer) ListTokens(ctx context.Context, req *request.ListTokensReq) (*response.ListTokensResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokens not implemented")
}

func RegisterTokensServer(s *grpc.Server, srv TokensServer) {
	s.RegisterService(&_Tokens_serviceDesc, srv)
}

func _Tokens_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).CreateToken(ctx, req.(*request.CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).GetToken(ctx, req.(*request.GetTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).UpdateToken(ctx, req.(*request.UpdateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).DeleteToken(ctx, req.(*request.DeleteTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/ListTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).ListTokens(ctx, req.(*request.ListTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tokens_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2.Tokens",
	HandlerType: (*TokensServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _Tokens_CreateToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Tokens_GetToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _Tokens_UpdateToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _Tokens_DeleteToken_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _Tokens_ListTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2/tokens.proto",
}
