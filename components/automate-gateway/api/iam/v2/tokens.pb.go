// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/iam/v2/tokens.proto

package v2

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/iam/v2/request"
	response "github.com/chef/automate/components/automate-gateway/api/iam/v2/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/iam/v2/tokens.proto", fileDescriptor_210e42bd7205e452)
}

var fileDescriptor_210e42bd7205e452 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x31, 0x6f, 0xd3, 0x4e,
	0x14, 0xc0, 0xe5, 0xff, 0x1f, 0xa2, 0xe8, 0x02, 0xa5, 0x79, 0x05, 0xd5, 0x58, 0x9d, 0x2c, 0x51,
	0x4a, 0x44, 0x6c, 0x94, 0x48, 0x0c, 0x01, 0x09, 0x0a, 0x95, 0x58, 0x18, 0x50, 0x05, 0x4b, 0xb6,
	0x8b, 0xf3, 0x70, 0x0e, 0x6c, 0xdf, 0xd5, 0x77, 0x09, 0xaa, 0x10, 0x0c, 0x11, 0x53, 0x56, 0x3e,
	0x8b, 0x25, 0x3e, 0x01, 0x1b, 0x13, 0x13, 0xcc, 0x2c, 0x4c, 0x7c, 0x05, 0xe4, 0x73, 0xd2, 0xd8,
	0xd4, 0x6e, 0xdd, 0x31, 0xf7, 0x7e, 0xcf, 0x7e, 0x3f, 0xbf, 0x7b, 0x2f, 0xa4, 0xef, 0xf1, 0x50,
	0xf0, 0x08, 0x23, 0x25, 0x5d, 0x3a, 0x55, 0x3c, 0xa4, 0x0a, 0xbb, 0x3e, 0x55, 0xf8, 0x8e, 0x1e,
	0xbb, 0x54, 0x30, 0x97, 0xd1, 0xd0, 0x9d, 0xf5, 0x5c, 0xc5, 0xdf, 0x62, 0x24, 0x1d, 0x11, 0x73,
	0xc5, 0xc1, 0xf4, 0x26, 0xf8, 0xda, 0x59, 0xe1, 0x0e, 0x15, 0xcc, 0x61, 0x34, 0x74, 0x66, 0x3d,
	0x6b, 0xc7, 0xe7, 0xdc, 0x0f, 0x50, 0x67, 0xd2, 0x28, 0xe2, 0x8a, 0x2a, 0xc6, 0x57, 0x79, 0xd6,
	0x83, 0x9a, 0x2f, 0x8b, 0xf1, 0x68, 0x8a, 0x52, 0x15, 0x5e, 0x6a, 0x3d, 0xac, 0x9d, 0x2c, 0x05,
	0x8f, 0x24, 0x16, 0xb3, 0x1f, 0x97, 0x66, 0xc7, 0xc2, 0x73, 0x75, 0xdc, 0xeb, 0xfa, 0x18, 0x75,
	0x05, 0x0f, 0x98, 0x77, 0x5c, 0x51, 0xfc, 0x45, 0x9e, 0x90, 0x96, 0x72, 0xea, 0x09, 0xbd, 0x2f,
	0x84, 0x34, 0x5e, 0xea, 0xa2, 0xe0, 0xa7, 0x41, 0x5a, 0x4f, 0x63, 0xa4, 0x0a, 0xf5, 0x01, 0xec,
	0x39, 0x55, 0x9f, 0xd4, 0xc9, 0x61, 0x87, 0x78, 0x64, 0xdd, 0xa9, 0x49, 0x4a, 0x61, 0xcf, 0xe6,
	0x89, 0x79, 0x95, 0xb4, 0xe8, 0x54, 0x4d, 0x06, 0xd9, 0xc7, 0x98, 0x27, 0x66, 0x13, 0x1a, 0x9e,
	0xe6, 0x16, 0x89, 0x79, 0x85, 0x10, 0x46, 0xc3, 0x65, 0x6c, 0x91, 0x98, 0x5b, 0xd0, 0x5e, 0xff,
	0x1e, 0x64, 0xd8, 0xfc, 0xfb, 0xaf, 0xcf, 0xff, 0xdd, 0xb5, 0x37, 0x8a, 0x17, 0x61, 0x60, 0x74,
	0x86, 0xdb, 0x36, 0x2c, 0x0f, 0x47, 0xa8, 0xe8, 0x3a, 0x00, 0x3f, 0x0c, 0xd2, 0x7c, 0x86, 0x2a,
	0x33, 0xbb, 0x55, 0x5d, 0xef, 0x8a, 0x49, 0xb5, 0x76, 0xeb, 0x60, 0x52, 0xd8, 0x1f, 0xe7, 0x89,
	0x09, 0x64, 0x33, 0xe7, 0x34, 0x78, 0xcf, 0xc6, 0x1f, 0xe6, 0x89, 0x79, 0x19, 0xfe, 0xf7, 0x51,
	0x2d, 0x12, 0xb3, 0x4d, 0xae, 0xe5, 0x2c, 0xd2, 0xe8, 0x22, 0x31, 0x37, 0x61, 0x23, 0x77, 0xe8,
	0xa3, 0xd2, 0x5e, 0xf7, 0x60, 0xab, 0xe8, 0xe5, 0xa6, 0xf8, 0xf0, 0x26, 0x6c, 0x9f, 0x36, 0xd3,
	0x21, 0xf8, 0x63, 0x90, 0xd6, 0x2b, 0x31, 0xae, 0xd3, 0xb8, 0x1c, 0x76, 0x4e, 0xe3, 0x0a, 0xa4,
	0x14, 0xf6, 0xc2, 0xa8, 0xb4, 0x6c, 0x42, 0x63, 0xaa, 0xe9, 0x2a, 0xd1, 0x62, 0x0f, 0x33, 0x56,
	0xbb, 0xde, 0xb7, 0xca, 0x5c, 0xd3, 0x46, 0xee, 0x58, 0x55, 0xba, 0x69, 0x37, 0x7f, 0x1b, 0xa4,
	0x75, 0x80, 0x01, 0xd6, 0x30, 0xce, 0x61, 0xe7, 0x18, 0x17, 0x48, 0x29, 0xec, 0x4f, 0x67, 0x1a,
	0x8f, 0x35, 0x5d, 0xcf, 0x38, 0x63, 0xb3, 0xee, 0x76, 0xca, 0xbb, 0xdb, 0xa9, 0xec, 0xee, 0x37,
	0x83, 0x90, 0xe7, 0x4c, 0xaa, 0xe5, 0x94, 0xde, 0xae, 0x16, 0x58, 0x53, 0xa9, 0xe9, 0x5e, 0x3d,
	0x50, 0x0a, 0x3b, 0x28, 0x9b, 0xc9, 0x06, 0x5c, 0x8a, 0x91, 0x8e, 0x4b, 0x26, 0xb2, 0x0d, 0x79,
	0xe1, 0x80, 0xc9, 0xec, 0xde, 0xee, 0xc2, 0x3f, 0xf3, 0x38, 0xbc, 0x0e, 0x25, 0xc3, 0x08, 0x5f,
	0x0d, 0x72, 0xe3, 0x10, 0x25, 0xaa, 0xfd, 0x20, 0xd0, 0x45, 0xbc, 0x88, 0xf9, 0x1b, 0xf4, 0x94,
	0x84, 0x5e, 0x75, 0xc5, 0xa5, 0x09, 0xa9, 0x65, 0xff, 0xc2, 0x39, 0x52, 0xd8, 0x07, 0x15, 0x4b,
	0xe8, 0xe4, 0x16, 0x9f, 0xbd, 0x84, 0x32, 0xec, 0xc9, 0xfe, 0xf0, 0x91, 0xcf, 0xd4, 0x64, 0x3a,
	0x72, 0x3c, 0x1e, 0xba, 0x69, 0x19, 0x27, 0x3b, 0xd8, 0xad, 0xf7, 0xbf, 0x30, 0x6a, 0xe8, 0x25,
	0xdc, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x12, 0xbb, 0xdc, 0xf2, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TokensClient is the client API for Tokens service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokensClient interface {
	CreateToken(ctx context.Context, in *request.CreateTokenReq, opts ...grpc.CallOption) (*response.CreateTokenResp, error)
	GetToken(ctx context.Context, in *request.GetTokenReq, opts ...grpc.CallOption) (*response.GetTokenResp, error)
	UpdateToken(ctx context.Context, in *request.UpdateTokenReq, opts ...grpc.CallOption) (*response.UpdateTokenResp, error)
	DeleteToken(ctx context.Context, in *request.DeleteTokenReq, opts ...grpc.CallOption) (*response.DeleteTokenResp, error)
	ListTokens(ctx context.Context, in *request.ListTokensReq, opts ...grpc.CallOption) (*response.ListTokensResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	ResetAllTokenProjects(ctx context.Context, in *request.ResetAllTokenProjectsReq, opts ...grpc.CallOption) (*response.ResetAllTokenProjectsResp, error)
}

type tokensClient struct {
	cc grpc.ClientConnInterface
}

func NewTokensClient(cc grpc.ClientConnInterface) TokensClient {
	return &tokensClient{cc}
}

func (c *tokensClient) CreateToken(ctx context.Context, in *request.CreateTokenReq, opts ...grpc.CallOption) (*response.CreateTokenResp, error) {
	out := new(response.CreateTokenResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) GetToken(ctx context.Context, in *request.GetTokenReq, opts ...grpc.CallOption) (*response.GetTokenResp, error) {
	out := new(response.GetTokenResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) UpdateToken(ctx context.Context, in *request.UpdateTokenReq, opts ...grpc.CallOption) (*response.UpdateTokenResp, error) {
	out := new(response.UpdateTokenResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) DeleteToken(ctx context.Context, in *request.DeleteTokenReq, opts ...grpc.CallOption) (*response.DeleteTokenResp, error) {
	out := new(response.DeleteTokenResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) ListTokens(ctx context.Context, in *request.ListTokensReq, opts ...grpc.CallOption) (*response.ListTokensResp, error) {
	out := new(response.ListTokensResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/ListTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) ResetAllTokenProjects(ctx context.Context, in *request.ResetAllTokenProjectsReq, opts ...grpc.CallOption) (*response.ResetAllTokenProjectsResp, error) {
	out := new(response.ResetAllTokenProjectsResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.iam.v2.Tokens/ResetAllTokenProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokensServer is the server API for Tokens service.
type TokensServer interface {
	CreateToken(context.Context, *request.CreateTokenReq) (*response.CreateTokenResp, error)
	GetToken(context.Context, *request.GetTokenReq) (*response.GetTokenResp, error)
	UpdateToken(context.Context, *request.UpdateTokenReq) (*response.UpdateTokenResp, error)
	DeleteToken(context.Context, *request.DeleteTokenReq) (*response.DeleteTokenResp, error)
	ListTokens(context.Context, *request.ListTokensReq) (*response.ListTokensResp, error)
	// Expose on GRPC API only so we don't expose this to the enduser.
	// Just want to be able to trigger this via automate-cli.
	ResetAllTokenProjects(context.Context, *request.ResetAllTokenProjectsReq) (*response.ResetAllTokenProjectsResp, error)
}

// UnimplementedTokensServer can be embedded to have forward compatible implementations.
type UnimplementedTokensServer struct {
}

func (*UnimplementedTokensServer) CreateToken(ctx context.Context, req *request.CreateTokenReq) (*response.CreateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedTokensServer) GetToken(ctx context.Context, req *request.GetTokenReq) (*response.GetTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedTokensServer) UpdateToken(ctx context.Context, req *request.UpdateTokenReq) (*response.UpdateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (*UnimplementedTokensServer) DeleteToken(ctx context.Context, req *request.DeleteTokenReq) (*response.DeleteTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (*UnimplementedTokensServer) ListTokens(ctx context.Context, req *request.ListTokensReq) (*response.ListTokensResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokens not implemented")
}
func (*UnimplementedTokensServer) ResetAllTokenProjects(ctx context.Context, req *request.ResetAllTokenProjectsReq) (*response.ResetAllTokenProjectsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAllTokenProjects not implemented")
}

func RegisterTokensServer(s *grpc.Server, srv TokensServer) {
	s.RegisterService(&_Tokens_serviceDesc, srv)
}

func _Tokens_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).CreateToken(ctx, req.(*request.CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).GetToken(ctx, req.(*request.GetTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).UpdateToken(ctx, req.(*request.UpdateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.DeleteTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).DeleteToken(ctx, req.(*request.DeleteTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ListTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/ListTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).ListTokens(ctx, req.(*request.ListTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_ResetAllTokenProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ResetAllTokenProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).ResetAllTokenProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.iam.v2.Tokens/ResetAllTokenProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).ResetAllTokenProjects(ctx, req.(*request.ResetAllTokenProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tokens_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.iam.v2.Tokens",
	HandlerType: (*TokensServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _Tokens_CreateToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Tokens_GetToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _Tokens_UpdateToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _Tokens_DeleteToken_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _Tokens_ListTokens_Handler,
		},
		{
			MethodName: "ResetAllTokenProjects",
			Handler:    _Tokens_ResetAllTokenProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/iam/v2/tokens.proto",
}
