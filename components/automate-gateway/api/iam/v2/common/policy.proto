syntax = "proto3";

package chef.automate.api.iam.v2;
option go_package = "github.com/chef/automate/components/automate-gateway/api/iam/v2/common";

import "components/automate-gateway/api/iam/v2/common/rules.proto";

enum Type {
    CHEF_MANAGED = 0;
    CUSTOM = 1;
}

message Policy {
    // Name for the policy.
    string name = 1;
    // Unique ID. Cannot be changed.
    string id = 2;
    // This doc-comment is ignored for an enum.
    Type type = 3;
    // Members affected by this policy. May be empty.
    repeated string members = 4;
    // Statements for the policy. Will contain one or more.
    repeated Statement statements = 5;
    // List of projects this policy belongs to. May be empty.
    repeated string projects = 6;
}

message Statement {
    enum Effect {
        ALLOW = 0;
        DENY = 1;
    }
    // This doc-comment is ignored for an enum.
    Effect effect = 1;

    // Actions defined inline. May be empty.
    // Best practices recommend that you use custom roles rather than inline actions where practical.
    repeated string actions = 3;

    // The role defines a set of actions that the statement is scoped to.
    string role = 4;

    // DEPRECATED: Resources defined inline. Use projects instead.
    repeated string resources = 5;

    // The project list defines the set of resources that the statement is scoped to. May be empty.
    repeated string projects = 6;
}

message Role {
    // Name for the role.
    string name = 1;
    // Unique ID. Cannot be changed.
    string id = 2;
    // Whether this policy is user created (`CUSTOM`) or chef managed (`CHEF_MANAGED`).
    Type type = 3;
    // List of actions this role scopes to. Will contain one or more.
    repeated string actions = 4;
    // List of projects this role belongs to. May be empty.
    repeated string projects = 5;
}

message Project {
    // Name for the project.
    string name = 1;
    // Unique ID. Cannot be changed.
    string id = 2;
    // Whether this policy is user created (`CUSTOM`) or chef managed (`CHEF_MANAGED`).
    Type type = 3;
    // The current status of the rules for this project.
    ProjectRulesStatus status = 4;
}

// the only values that may be returned by GetPolicyVersion
message Version {
    enum VersionNumber {
        V0 = 0;
        V1 = 1;
        V2 = 2;
    }
    VersionNumber major = 1;
    VersionNumber minor = 2;
}
