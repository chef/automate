syntax = "proto3";

package chef.automate.api.license;
option go_package = "github.com/chef/automate/components/automate-gateway/api/license";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

import "external/annotations/iam/annotations.proto";

service License {
  rpc ApplyLicense (ApplyLicenseReq) returns (ApplyLicenseResp) {
    option (google.api.http).post = "/api/v0/license/apply";
    option (google.api.http).body = "*";
    option (chef.automate.api.iam.policy).resource = "system:license";
    option (chef.automate.api.iam.policy).action = "system:license:apply";
  }
  rpc GetStatus (GetStatusReq) returns (GetStatusResp) {
    option (google.api.http).get = "/api/v0/license/status";
    option (chef.automate.api.iam.policy).resource = "system:status";
    option (chef.automate.api.iam.policy).action = "system:license:get";
  }
  rpc RequestLicense (RequestLicenseReq) returns (RequestLicenseResp) {
    option (google.api.http).post = "/api/v0/license/request";
    option (google.api.http).body = "*";
    option (chef.automate.api.iam.policy).resource = "system:license";
    option (chef.automate.api.iam.policy).action = "system:license:request";
  }
}

message ApplyLicenseReq {
  string license = 1;
}

message ApplyLicenseResp {
  GetStatusResp status = 1;
}

message GetStatusReq {}

message GetStatusResp {
  string license_id = 1;
  google.protobuf.Timestamp configured_at = 2;
  DateRange licensed_period = 3;
  string customer_name = 4;

  message DateRange {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end   = 2;
  }
}

message RequestLicenseReq {
  string first_name = 1;
  string last_name = 2;
  string email = 3;
  bool   gdpr_agree = 4;
}

message RequestLicenseResp {
  string license = 1 [deprecated=true];
  GetStatusResp status = 2;
}
