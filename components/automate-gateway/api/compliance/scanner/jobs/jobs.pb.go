// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/compliance/scanner/jobs/jobs.proto

package jobs

import (
	context "context"
	fmt "fmt"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	common "github.com/chef/automate/components/compliance-service/api/common"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

var Query_OrderType_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var Query_OrderType_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x Query_OrderType) String() string {
	return proto.EnumName(Query_OrderType_name, int32(x))
}

func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2ca13fe86b522ee6, []int{2, 0}
}

type RerunResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RerunResponse) Reset()         { *m = RerunResponse{} }
func (m *RerunResponse) String() string { return proto.CompactTextString(m) }
func (*RerunResponse) ProtoMessage()    {}
func (*RerunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca13fe86b522ee6, []int{0}
}

func (m *RerunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RerunResponse.Unmarshal(m, b)
}
func (m *RerunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RerunResponse.Marshal(b, m, deterministic)
}
func (m *RerunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RerunResponse.Merge(m, src)
}
func (m *RerunResponse) XXX_Size() int {
	return xxx_messageInfo_RerunResponse.Size(m)
}
func (m *RerunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RerunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RerunResponse proto.InternalMessageInfo

type Id struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca13fe86b522ee6, []int{1}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Id) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Query struct {
	Filters              []*common.Filter `protobuf:"bytes,20,rep,name=filters,proto3" json:"filters,omitempty"`
	Order                Query_OrderType  `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.api.compliance.scanner.jobs.v1.Query_OrderType" json:"order,omitempty"`
	Sort                 string           `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty"`
	Page                 int32            `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`
	PerPage              int32            `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca13fe86b522ee6, []int{2}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetFilters() []*common.Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Query) GetOrder() Query_OrderType {
	if m != nil {
		return m.Order
	}
	return Query_ASC
}

func (m *Query) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *Query) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Query) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type ManagerFilter struct {
	ManagerId            string           `protobuf:"bytes,1,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`
	Filters              []*common.Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ManagerFilter) Reset()         { *m = ManagerFilter{} }
func (m *ManagerFilter) String() string { return proto.CompactTextString(m) }
func (*ManagerFilter) ProtoMessage()    {}
func (*ManagerFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca13fe86b522ee6, []int{3}
}

func (m *ManagerFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagerFilter.Unmarshal(m, b)
}
func (m *ManagerFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagerFilter.Marshal(b, m, deterministic)
}
func (m *ManagerFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerFilter.Merge(m, src)
}
func (m *ManagerFilter) XXX_Size() int {
	return xxx_messageInfo_ManagerFilter.Size(m)
}
func (m *ManagerFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerFilter proto.InternalMessageInfo

func (m *ManagerFilter) GetManagerId() string {
	if m != nil {
		return m.ManagerId
	}
	return ""
}

func (m *ManagerFilter) GetFilters() []*common.Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type Job struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Timeout              int32                `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Tags                 []*common.Kv         `protobuf:"bytes,20,rep,name=tags,proto3" json:"tags,omitempty"`
	StartTime            *timestamp.Timestamp `protobuf:"bytes,21,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp `protobuf:"bytes,22,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Status               string               `protobuf:"bytes,23,opt,name=status,proto3" json:"status,omitempty"`
	Retries              int32                `protobuf:"varint,26,opt,name=retries,proto3" json:"retries,omitempty"`
	RetriesLeft          int32                `protobuf:"varint,27,opt,name=retries_left,json=retriesLeft,proto3" json:"retries_left,omitempty"`
	Results              []*ResultsRow        `protobuf:"bytes,28,rep,name=results,proto3" json:"results,omitempty"`
	Nodes                []string             `protobuf:"bytes,100,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Profiles             []string             `protobuf:"bytes,101,rep,name=profiles,proto3" json:"profiles,omitempty"`
	NodeCount            int32                `protobuf:"varint,102,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	ProfileCount         int32                `protobuf:"varint,103,opt,name=profile_count,json=profileCount,proto3" json:"profile_count,omitempty"`
	NodeSelectors        []*ManagerFilter     `protobuf:"bytes,104,rep,name=node_selectors,json=nodeSelectors,proto3" json:"node_selectors,omitempty"`
	ScheduledTime        *timestamp.Timestamp `protobuf:"bytes,105,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	Recurrence           string               `protobuf:"bytes,106,opt,name=recurrence,proto3" json:"recurrence,omitempty"`
	ParentId             string               `protobuf:"bytes,107,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	JobCount             int32                `protobuf:"varint,108,opt,name=job_count,json=jobCount,proto3" json:"job_count,omitempty"`
	Deleted              bool                 `protobuf:"varint,109,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca13fe86b522ee6, []int{4}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Job) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Job) GetTags() []*common.Kv {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Job) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Job) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Job) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Job) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *Job) GetRetriesLeft() int32 {
	if m != nil {
		return m.RetriesLeft
	}
	return 0
}

func (m *Job) GetResults() []*ResultsRow {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *Job) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Job) GetProfiles() []string {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *Job) GetNodeCount() int32 {
	if m != nil {
		return m.NodeCount
	}
	return 0
}

func (m *Job) GetProfileCount() int32 {
	if m != nil {
		return m.ProfileCount
	}
	return 0
}

func (m *Job) GetNodeSelectors() []*ManagerFilter {
	if m != nil {
		return m.NodeSelectors
	}
	return nil
}

func (m *Job) GetScheduledTime() *timestamp.Timestamp {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *Job) GetRecurrence() string {
	if m != nil {
		return m.Recurrence
	}
	return ""
}

func (m *Job) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *Job) GetJobCount() int32 {
	if m != nil {
		return m.JobCount
	}
	return 0
}

func (m *Job) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type Jobs struct {
	Jobs                 []*Job   `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	Total                int32    `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Jobs) Reset()         { *m = Jobs{} }
func (m *Jobs) String() string { return proto.CompactTextString(m) }
func (*Jobs) ProtoMessage()    {}
func (*Jobs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca13fe86b522ee6, []int{5}
}

func (m *Jobs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Jobs.Unmarshal(m, b)
}
func (m *Jobs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Jobs.Marshal(b, m, deterministic)
}
func (m *Jobs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Jobs.Merge(m, src)
}
func (m *Jobs) XXX_Size() int {
	return xxx_messageInfo_Jobs.Size(m)
}
func (m *Jobs) XXX_DiscardUnknown() {
	xxx_messageInfo_Jobs.DiscardUnknown(m)
}

var xxx_messageInfo_Jobs proto.InternalMessageInfo

func (m *Jobs) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *Jobs) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ResultsRow struct {
	NodeId               string               `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ReportId             string               `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	Status               string               `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Result               string               `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	JobId                string               `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	StartTime            *timestamp.Timestamp `protobuf:"bytes,20,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp `protobuf:"bytes,21,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ResultsRow) Reset()         { *m = ResultsRow{} }
func (m *ResultsRow) String() string { return proto.CompactTextString(m) }
func (*ResultsRow) ProtoMessage()    {}
func (*ResultsRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca13fe86b522ee6, []int{6}
}

func (m *ResultsRow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultsRow.Unmarshal(m, b)
}
func (m *ResultsRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultsRow.Marshal(b, m, deterministic)
}
func (m *ResultsRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultsRow.Merge(m, src)
}
func (m *ResultsRow) XXX_Size() int {
	return xxx_messageInfo_ResultsRow.Size(m)
}
func (m *ResultsRow) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultsRow.DiscardUnknown(m)
}

var xxx_messageInfo_ResultsRow proto.InternalMessageInfo

func (m *ResultsRow) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ResultsRow) GetReportId() string {
	if m != nil {
		return m.ReportId
	}
	return ""
}

func (m *ResultsRow) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ResultsRow) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *ResultsRow) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *ResultsRow) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *ResultsRow) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("chef.automate.api.compliance.scanner.jobs.v1.Query_OrderType", Query_OrderType_name, Query_OrderType_value)
	proto.RegisterType((*RerunResponse)(nil), "chef.automate.api.compliance.scanner.jobs.v1.RerunResponse")
	proto.RegisterType((*Id)(nil), "chef.automate.api.compliance.scanner.jobs.v1.Id")
	proto.RegisterType((*Query)(nil), "chef.automate.api.compliance.scanner.jobs.v1.Query")
	proto.RegisterType((*ManagerFilter)(nil), "chef.automate.api.compliance.scanner.jobs.v1.ManagerFilter")
	proto.RegisterType((*Job)(nil), "chef.automate.api.compliance.scanner.jobs.v1.Job")
	proto.RegisterType((*Jobs)(nil), "chef.automate.api.compliance.scanner.jobs.v1.Jobs")
	proto.RegisterType((*ResultsRow)(nil), "chef.automate.api.compliance.scanner.jobs.v1.ResultsRow")
}

func init() {
	proto.RegisterFile("components/automate-gateway/api/compliance/scanner/jobs/jobs.proto", fileDescriptor_2ca13fe86b522ee6)
}

var fileDescriptor_2ca13fe86b522ee6 = []byte{
	// 1205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xcd, 0x6e, 0x1c, 0x45,
	0x17, 0xfd, 0x7a, 0x3c, 0xbf, 0xd7, 0xb1, 0xbf, 0xa8, 0xe4, 0x38, 0xc5, 0xd8, 0x49, 0x26, 0x4d,
	0x12, 0x8d, 0x22, 0xdc, 0x43, 0x1c, 0x05, 0x05, 0x87, 0x48, 0x24, 0x4e, 0x90, 0x1c, 0x82, 0x08,
	0xed, 0xb0, 0x61, 0x63, 0xd5, 0x74, 0xdf, 0x19, 0xb7, 0xe9, 0xe9, 0x6a, 0x55, 0x55, 0x27, 0xb2,
	0x80, 0x4d, 0xc4, 0x06, 0x4b, 0x20, 0xa4, 0x48, 0xf0, 0x24, 0x7e, 0x06, 0x1e, 0x80, 0x57, 0x60,
	0xc1, 0x02, 0xb1, 0x62, 0x17, 0x16, 0xa8, 0xaa, 0x7a, 0xec, 0xc9, 0x4f, 0x6b, 0xdc, 0x93, 0x8d,
	0xdd, 0x75, 0xeb, 0x9e, 0xdb, 0x75, 0xce, 0xb9, 0x77, 0xa6, 0x06, 0xee, 0x06, 0x7c, 0x94, 0xf2,
	0x04, 0x13, 0x25, 0x7b, 0x2c, 0x53, 0x7c, 0xc4, 0x14, 0xae, 0x0d, 0x99, 0xc2, 0xa7, 0x6c, 0xbf,
	0xc7, 0xd2, 0xa8, 0xa7, 0xf7, 0xe3, 0x88, 0x25, 0x01, 0xf6, 0x64, 0xc0, 0x92, 0x04, 0x45, 0x6f,
	0x8f, 0xf7, 0xa5, 0xf9, 0xe3, 0xa5, 0x82, 0x2b, 0x4e, 0xde, 0x0b, 0x76, 0x71, 0xe0, 0x8d, 0xd1,
	0x1e, 0x4b, 0x23, 0xef, 0x18, 0xe5, 0xe5, 0x28, 0xcf, 0x00, 0x9e, 0x5c, 0x6b, 0x5f, 0x18, 0x72,
	0x3e, 0x8c, 0xb1, 0x67, 0xb0, 0xfd, 0x6c, 0xd0, 0x53, 0xd1, 0x08, 0xa5, 0x62, 0xa3, 0xd4, 0x96,
	0x6b, 0xaf, 0xe6, 0x09, 0xfa, 0xed, 0x2c, 0x49, 0xb8, 0x62, 0x2a, 0xe2, 0x49, 0xfe, 0xb2, 0xf6,
	0xca, 0xab, 0x70, 0x1c, 0xa5, 0x6a, 0x3f, 0xdf, 0xfc, 0xf8, 0x8d, 0x6c, 0x44, 0x1a, 0xd8, 0xf4,
	0x60, 0x6d, 0x88, 0xc9, 0x5a, 0xca, 0xe3, 0x28, 0xd8, 0x2f, 0x28, 0x5f, 0xa6, 0x42, 0xc4, 0x46,
	0x6f, 0xa8, 0x70, 0x63, 0xa2, 0xc2, 0xb1, 0x0c, 0x6b, 0x12, 0xc5, 0x93, 0x28, 0xc0, 0xb1, 0xa6,
	0x23, 0x9e, 0xe4, 0xff, 0x2c, 0xcc, 0xfd, 0x3f, 0x2c, 0xf8, 0x28, 0xb2, 0xc4, 0x47, 0x99, 0xf2,
	0x44, 0xa2, 0xdb, 0x85, 0xca, 0x56, 0x48, 0x16, 0xa1, 0x12, 0x85, 0xd4, 0xe9, 0x38, 0xdd, 0x96,
	0x5f, 0x89, 0x42, 0x42, 0xa0, 0x9a, 0xb0, 0x11, 0xd2, 0x8a, 0x89, 0x98, 0x67, 0xf7, 0xc7, 0x0a,
	0xd4, 0xbe, 0xc8, 0x50, 0xec, 0x93, 0x87, 0xd0, 0x18, 0x44, 0xb1, 0x42, 0x21, 0xe9, 0x52, 0x67,
	0xae, 0x3b, 0xbf, 0xbe, 0xee, 0xbd, 0xec, 0x4d, 0xc8, 0x47, 0x2c, 0x4a, 0x26, 0xed, 0xc9, 0xdd,
	0xd2, 0x07, 0xf9, 0xc4, 0x40, 0xfd, 0x71, 0x09, 0xb2, 0x0d, 0x35, 0x2e, 0x42, 0x14, 0xf4, 0x4c,
	0xc7, 0xe9, 0x2e, 0xae, 0xdf, 0xf6, 0xca, 0xf8, 0xec, 0x99, 0x13, 0x79, 0x9f, 0xeb, 0x02, 0x8f,
	0xf7, 0x53, 0xf4, 0x6d, 0x2d, 0x4d, 0x40, 0x72, 0xa1, 0xe8, 0xb2, 0x25, 0xa0, 0x9f, 0x75, 0x2c,
	0x65, 0x43, 0xa4, 0x67, 0x3b, 0x4e, 0xb7, 0xe6, 0x9b, 0x67, 0xf2, 0x0e, 0x34, 0x53, 0x14, 0x3b,
	0x26, 0x4e, 0x4d, 0xbc, 0x91, 0xa2, 0x78, 0xc4, 0x86, 0xe8, 0x9e, 0x87, 0xd6, 0x51, 0x59, 0xd2,
	0x80, 0xb9, 0x3b, 0xdb, 0x9b, 0xa7, 0xff, 0x47, 0x9a, 0x50, 0xbd, 0x77, 0x7f, 0x7b, 0xf3, 0xb4,
	0xe3, 0x7e, 0x0b, 0x0b, 0x9f, 0xb1, 0x84, 0x0d, 0x51, 0x58, 0x46, 0xe4, 0x1c, 0xc0, 0xc8, 0x06,
	0x76, 0x8e, 0xc4, 0x6c, 0xe5, 0x91, 0xad, 0x70, 0x52, 0xb5, 0xca, 0x5b, 0xab, 0xe6, 0xfe, 0x56,
	0x87, 0xb9, 0x07, 0xbc, 0x7f, 0x12, 0xe7, 0x74, 0x4c, 0xed, 0xa7, 0x48, 0xe7, 0x6c, 0x4c, 0x3f,
	0x13, 0x0a, 0x0d, 0x3d, 0x11, 0x3c, 0x53, 0xb4, 0x6a, 0x79, 0xe7, 0x4b, 0x72, 0x17, 0xaa, 0x8a,
	0x0d, 0xc7, 0xd6, 0x7a, 0x65, 0x0e, 0xf9, 0xe9, 0x13, 0xdf, 0x60, 0xc9, 0x87, 0x00, 0x52, 0x31,
	0xa1, 0x76, 0x74, 0x51, 0x63, 0xec, 0xfc, 0x7a, 0xdb, 0xb3, 0x33, 0xe5, 0x8d, 0x67, 0xca, 0x7b,
	0x3c, 0x1e, 0x49, 0xbf, 0x65, 0xb2, 0xf5, 0x9a, 0xdc, 0x80, 0x26, 0x26, 0xa1, 0x05, 0x2e, 0x4f,
	0x05, 0x36, 0x30, 0x09, 0x0d, 0x6c, 0x19, 0xea, 0x52, 0x31, 0x95, 0x49, 0x63, 0x6f, 0xcb, 0xcf,
	0x57, 0x9a, 0xa7, 0x40, 0x25, 0x22, 0x94, 0xb4, 0x6d, 0x79, 0xe6, 0x4b, 0x72, 0x11, 0x4e, 0xe5,
	0x8f, 0x3b, 0x31, 0x0e, 0x14, 0x5d, 0x31, 0xdb, 0xf3, 0x79, 0xec, 0x21, 0x0e, 0x14, 0xf1, 0x35,
	0x58, 0x66, 0xb1, 0x92, 0x74, 0xd5, 0xa8, 0x71, 0xb3, 0x5c, 0x73, 0xfa, 0x16, 0xec, 0xf3, 0xa7,
	0xfe, 0xb8, 0x10, 0x59, 0x82, 0x5a, 0xc2, 0x43, 0x94, 0x34, 0xec, 0xcc, 0x75, 0x5b, 0xbe, 0x5d,
	0x90, 0x36, 0x34, 0x53, 0xc1, 0x07, 0x51, 0x8c, 0x92, 0xa2, 0xd9, 0x38, 0x5a, 0xeb, 0xbe, 0xd2,
	0x49, 0x3b, 0x01, 0xcf, 0x12, 0x45, 0x07, 0xe6, 0x98, 0x2d, 0x1d, 0xd9, 0xd4, 0x01, 0xf2, 0x2e,
	0x2c, 0xe4, 0xa9, 0x79, 0xc6, 0xd0, 0x64, 0x9c, 0xca, 0x83, 0x36, 0xa9, 0x0f, 0x8b, 0xa6, 0x86,
	0xc4, 0x18, 0x03, 0xc5, 0x85, 0xa4, 0xbb, 0x86, 0xd0, 0xad, 0x72, 0x84, 0x5e, 0x6a, 0x78, 0x7f,
	0x41, 0x97, 0xdc, 0x1e, 0x57, 0x24, 0x77, 0x60, 0x51, 0x06, 0xbb, 0x18, 0x66, 0x31, 0xe6, 0xfe,
	0x45, 0x53, 0xfd, 0x5b, 0x38, 0x42, 0x18, 0x17, 0xcf, 0x03, 0x08, 0x0c, 0x32, 0x21, 0x30, 0x09,
	0x90, 0xee, 0x19, 0x27, 0x27, 0x22, 0x64, 0x05, 0x5a, 0x29, 0x13, 0x98, 0x28, 0x3d, 0x61, 0x5f,
	0x9b, 0xed, 0xa6, 0x0d, 0x6c, 0x85, 0x7a, 0x73, 0x8f, 0xf7, 0x73, 0x11, 0x62, 0x23, 0x42, 0x73,
	0x8f, 0xf7, 0xad, 0x00, 0x14, 0x1a, 0x21, 0xc6, 0xa8, 0x30, 0xa4, 0xa3, 0x8e, 0xd3, 0x6d, 0xfa,
	0xe3, 0xa5, 0x1b, 0x40, 0xf5, 0x01, 0xef, 0x4b, 0x72, 0x1f, 0xaa, 0x9a, 0x26, 0x75, 0x8c, 0x30,
	0xd7, 0xca, 0x09, 0xf3, 0x80, 0xf7, 0x7d, 0x03, 0xd7, 0xfe, 0x2a, 0xae, 0x58, 0x4c, 0x97, 0xcc,
	0x09, 0xec, 0xc2, 0x7d, 0xe1, 0x00, 0x1c, 0x77, 0x03, 0x39, 0x0b, 0x0d, 0x63, 0xc7, 0xd1, 0xe8,
	0xd6, 0xf5, 0xd2, 0x72, 0x10, 0x98, 0x72, 0x61, 0x08, 0xda, 0x19, 0x6e, 0xda, 0xc0, 0x56, 0x38,
	0xd1, 0xe3, 0x73, 0x2f, 0xf5, 0xf8, 0x32, 0xd4, 0x6d, 0x77, 0x99, 0x51, 0x6e, 0xf9, 0xf9, 0x8a,
	0x9c, 0x81, 0xba, 0x16, 0x24, 0x0a, 0x69, 0xcd, 0xc4, 0x6b, 0x7b, 0xbc, 0xbf, 0x15, 0xbe, 0x32,
	0x9c, 0x4b, 0xb3, 0x0e, 0xe7, 0x99, 0x13, 0x0f, 0xe7, 0xfa, 0xdf, 0xf3, 0x30, 0xaf, 0x35, 0xde,
	0xb6, 0xdf, 0x4e, 0xe4, 0x1f, 0x07, 0xea, 0x9b, 0x02, 0x99, 0x42, 0x52, 0x5e, 0xe7, 0xf6, 0xfb,
	0xe5, 0x20, 0x5b, 0xa1, 0xfb, 0xbd, 0xf3, 0xec, 0x90, 0x5e, 0x84, 0xb3, 0xc7, 0x59, 0x1b, 0x79,
	0xd6, 0x86, 0xf1, 0xac, 0x1e, 0x98, 0xc3, 0x1c, 0x1c, 0xd2, 0x9b, 0xc5, 0x49, 0xe7, 0x5e, 0xdf,
	0xd0, 0x9c, 0x36, 0x2c, 0xf6, 0xd9, 0xef, 0x7f, 0x3c, 0xaf, 0x9c, 0x73, 0x69, 0xd1, 0x4d, 0x66,
	0xc3, 0xb9, 0x4a, 0xfe, 0x75, 0xa0, 0xea, 0x23, 0x0b, 0x49, 0x69, 0x06, 0xed, 0xf2, 0x32, 0xb9,
	0x3f, 0x69, 0xd2, 0x97, 0x60, 0xb5, 0x80, 0xcf, 0xc6, 0x37, 0x51, 0xf8, 0x1d, 0xa9, 0x0a, 0x64,
	0xe1, 0xc1, 0x21, 0xdd, 0x98, 0x92, 0xd7, 0x2e, 0x20, 0x3f, 0x44, 0x65, 0x98, 0xbb, 0xa4, 0x53,
	0x78, 0x87, 0x8b, 0xc2, 0x9e, 0xa9, 0xf1, 0x97, 0x03, 0xf5, 0x2f, 0xd3, 0x70, 0x46, 0xd7, 0x97,
	0x5f, 0x6b, 0xb4, 0xfb, 0xfa, 0x4a, 0xe6, 0xfe, 0xa2, 0x69, 0x5e, 0x99, 0x72, 0xfc, 0x7a, 0x66,
	0xde, 0x7b, 0x70, 0x48, 0x6f, 0x4f, 0xc9, 0x2c, 0x72, 0xd9, 0x16, 0x30, 0x5c, 0x2f, 0xb7, 0xa7,
	0x72, 0xd5, 0x6e, 0xff, 0xe9, 0x40, 0xfd, 0x9e, 0xf9, 0x8c, 0x99, 0xc1, 0xef, 0x22, 0xb6, 0xcf,
	0x4f, 0xc4, 0xd6, 0x7e, 0xb4, 0xbd, 0x05, 0x5b, 0x5b, 0xc0, 0x3a, 0x7b, 0x75, 0xba, 0xb3, 0x2f,
	0x1c, 0xa8, 0x3e, 0x8c, 0xa4, 0x22, 0xd7, 0x67, 0xb8, 0xbc, 0xb5, 0xd7, 0x4b, 0x37, 0x83, 0x74,
	0x7f, 0x98, 0x36, 0xd1, 0x12, 0x99, 0x08, 0x76, 0x0f, 0x0e, 0xe9, 0x07, 0xc5, 0x49, 0x2b, 0x05,
	0xec, 0xe3, 0x48, 0xda, 0xae, 0xbe, 0xe4, 0x5e, 0x28, 0xe4, 0x6e, 0x5f, 0xa0, 0x8d, 0xfe, 0xb9,
	0x02, 0x35, 0x73, 0xa9, 0x9e, 0xc1, 0xe7, 0x5b, 0x65, 0x2f, 0x14, 0x93, 0x77, 0xf7, 0x5f, 0xb5,
	0x08, 0x97, 0xa7, 0x58, 0x5c, 0x13, 0x1a, 0x73, 0x70, 0x48, 0x3f, 0x9a, 0x92, 0xb8, 0x5a, 0xa0,
	0x86, 0xc1, 0x1b, 0x39, 0xba, 0xe4, 0x4a, 0xa1, 0x1c, 0x26, 0x6b, 0xdc, 0x10, 0x77, 0xfd, 0xaf,
	0x1e, 0x0d, 0x23, 0xb5, 0x9b, 0xf5, 0x35, 0x99, 0x9e, 0xa6, 0x78, 0xf4, 0x33, 0xa7, 0x37, 0xe3,
	0x4f, 0xc1, 0x7e, 0xdd, 0x8c, 0xc2, 0xf5, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x3f, 0x9c,
	0x04, 0x4c, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobsServiceClient is the client API for JobsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobsServiceClient interface {
	Create(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Id, error)
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error)
	Update(ctx context.Context, in *Job, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Jobs, error)
	Rerun(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RerunResponse, error)
}

type jobsServiceClient struct {
	cc *grpc.ClientConn
}

func NewJobsServiceClient(cc *grpc.ClientConn) JobsServiceClient {
	return &jobsServiceClient{cc}
}

func (c *jobsServiceClient) Create(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Update(ctx context.Context, in *Job, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Jobs, error) {
	out := new(Jobs)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) Rerun(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RerunResponse, error) {
	out := new(RerunResponse)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Rerun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsServiceServer is the server API for JobsService service.
type JobsServiceServer interface {
	Create(context.Context, *Job) (*Id, error)
	Read(context.Context, *Id) (*Job, error)
	Update(context.Context, *Job) (*empty.Empty, error)
	Delete(context.Context, *Id) (*empty.Empty, error)
	List(context.Context, *Query) (*Jobs, error)
	Rerun(context.Context, *Id) (*RerunResponse, error)
}

// UnimplementedJobsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJobsServiceServer struct {
}

func (*UnimplementedJobsServiceServer) Create(ctx context.Context, req *Job) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedJobsServiceServer) Read(ctx context.Context, req *Id) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedJobsServiceServer) Update(ctx context.Context, req *Job) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedJobsServiceServer) Delete(ctx context.Context, req *Id) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedJobsServiceServer) List(ctx context.Context, req *Query) (*Jobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedJobsServiceServer) Rerun(ctx context.Context, req *Id) (*RerunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rerun not implemented")
}

func RegisterJobsServiceServer(s *grpc.Server, srv JobsServiceServer) {
	s.RegisterService(&_JobsService_serviceDesc, srv)
}

func _JobsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Create(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Update(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).List(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_Rerun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).Rerun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.scanner.jobs.v1.JobsService/Rerun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).Rerun(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.compliance.scanner.jobs.v1.JobsService",
	HandlerType: (*JobsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _JobsService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _JobsService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _JobsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JobsService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _JobsService_List_Handler,
		},
		{
			MethodName: "Rerun",
			Handler:    _JobsService_Rerun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/compliance/scanner/jobs/jobs.proto",
}
