syntax = "proto3";

package chef.automate.api.compliance.scanner.jobs.v1;
option go_package = "github.com/chef/automate/components/automate-gateway/api/compliance/scanner/jobs";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

import "components/compliance-service/api/common/common.proto";

service JobsService {
	rpc Create(Job) returns (Id) {
		option (google.api.http) = {
			post: "/compliance/scanner/jobs"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:scanner:jobs"
			action: "create"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:scanner:jobs"
			action: "compliance:scannerJobs:create"
		};
	};
	rpc Read(Id) returns (Job) {
		option (google.api.http) = {
			get: "/compliance/scanner/jobs/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:scanner:jobs:{id}"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:scanner:jobs:{id}"
			action: "compliance:scannerJobs:get"
		};
	};
	rpc Update(Job) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			put: "/compliance/scanner/jobs/id/{id}"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:scanner:jobs:{id}"
			action: "update"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:scanner:jobs:{id}"
			action: "compliance:scannerJobs:update"
		};
	};
	rpc Delete(Id) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/compliance/scanner/jobs/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:scanner:jobs:{id}"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:scanner:jobs:{id}"
			action: "compliance:scannerJobs:delete"
		};
	};
	rpc List(Query) returns (Jobs) {
		option (google.api.http) = {
			post: "/compliance/scanner/jobs/search"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:scanner:jobs"
			action: "search"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:scanner:jobs"
			action: "compliance:scannerJobs:list"
		};
	};
	rpc Rerun(Id) returns (RerunResponse) {
		option (google.api.http) = {
			get: "/compliance/scanner/jobs/rerun/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:scanner:jobs:{id}"
			action: "rerun"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:scanner:jobs:{id}"
			action: "compliance:scannerJobs:rerun"
		};
	};
}

message RerunResponse {}

message Id {
	string id = 1;
	string name = 2;
}

message Query {
	repeated chef.automate.domain.compliance.api.common.Filter filters = 20;
	enum OrderType {
		ASC = 0;
		DESC = 1;
	}
	OrderType order = 21;
	string sort = 22;
	int32 page = 23;
	int32 per_page = 24;
}

message ManagerFilter {
	string manager_id = 1;
	repeated chef.automate.domain.compliance.api.common.Filter filters = 2;
}

message Job {
	string id = 1;
	string name = 2;
	string type = 3;
	int32 timeout = 4;
	repeated chef.automate.domain.compliance.api.common.Kv tags = 20;
	google.protobuf.Timestamp start_time = 21;
	google.protobuf.Timestamp end_time = 22;
	string status = 23;
	int32 retries = 26;
	int32 retries_left = 27;
	repeated ResultsRow results = 28;

	repeated string nodes = 100;
	repeated string profiles = 101;
	int32 node_count = 102;
	int32 profile_count = 103;

	repeated ManagerFilter node_selectors = 104;
	google.protobuf.Timestamp scheduled_time = 105;
	string recurrence = 106;
	string parent_id = 107;
	int32 job_count = 108;
	bool deleted = 109;
}

message Jobs {
	repeated Job jobs = 1;
	int32 total = 20;
}

message ResultsRow {
	string node_id = 1;
	string report_id = 2;
	string status = 3;
	string result = 4;
	string job_id = 5;
	google.protobuf.Timestamp start_time = 20;
	google.protobuf.Timestamp end_time = 21;
}
