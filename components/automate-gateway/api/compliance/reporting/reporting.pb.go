// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/compliance/reporting/reporting.proto

package reporting

import (
	context "context"
	fmt "fmt"
	version "github.com/chef/automate/api/external/common/version"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The two allowed values for ordering results
type Query_OrderType int32

const (
	Query_ASC  Query_OrderType = 0
	Query_DESC Query_OrderType = 1
)

var Query_OrderType_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var Query_OrderType_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x Query_OrderType) String() string {
	return proto.EnumName(Query_OrderType_name, int32(x))
}

func (Query_OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{6, 0}
}

type ControlItemRequest struct {
	// The term to use to match resources on
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The maximum number of controls to return (Default 100)
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// The criteria used to filter the controls returned
	Filters              []*ListFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ControlItemRequest) Reset()         { *m = ControlItemRequest{} }
func (m *ControlItemRequest) String() string { return proto.CompactTextString(m) }
func (*ControlItemRequest) ProtoMessage()    {}
func (*ControlItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{0}
}

func (m *ControlItemRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlItemRequest.Unmarshal(m, b)
}
func (m *ControlItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlItemRequest.Marshal(b, m, deterministic)
}
func (m *ControlItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlItemRequest.Merge(m, src)
}
func (m *ControlItemRequest) XXX_Size() int {
	return xxx_messageInfo_ControlItemRequest.Size(m)
}
func (m *ControlItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControlItemRequest proto.InternalMessageInfo

func (m *ControlItemRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ControlItemRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ControlItemRequest) GetFilters() []*ListFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type ControlItem struct {
	// The unique id of this control
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The compact description of the control
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Intentionally blank
	Profile *ProfileMin `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	// The severity of the control
	Impact float32 `protobuf:"fixed32,4,opt,name=impact,proto3" json:"impact,omitempty"`
	// The time the report using the control was submitted at
	EndTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Intentionally blank
	ControlSummary       *ControlSummary `protobuf:"bytes,6,opt,name=control_summary,json=controlSummary,proto3" json:"control_summary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ControlItem) Reset()         { *m = ControlItem{} }
func (m *ControlItem) String() string { return proto.CompactTextString(m) }
func (*ControlItem) ProtoMessage()    {}
func (*ControlItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{1}
}

func (m *ControlItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlItem.Unmarshal(m, b)
}
func (m *ControlItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlItem.Marshal(b, m, deterministic)
}
func (m *ControlItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlItem.Merge(m, src)
}
func (m *ControlItem) XXX_Size() int {
	return xxx_messageInfo_ControlItem.Size(m)
}
func (m *ControlItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlItem.DiscardUnknown(m)
}

var xxx_messageInfo_ControlItem proto.InternalMessageInfo

func (m *ControlItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ControlItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ControlItem) GetProfile() *ProfileMin {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *ControlItem) GetImpact() float32 {
	if m != nil {
		return m.Impact
	}
	return 0
}

func (m *ControlItem) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *ControlItem) GetControlSummary() *ControlSummary {
	if m != nil {
		return m.ControlSummary
	}
	return nil
}

type ControlItems struct {
	// The paginated results of controls matching the filters
	ControlItems         []*ControlItem `protobuf:"bytes,1,rep,name=control_items,json=controlItems,proto3" json:"control_items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ControlItems) Reset()         { *m = ControlItems{} }
func (m *ControlItems) String() string { return proto.CompactTextString(m) }
func (*ControlItems) ProtoMessage()    {}
func (*ControlItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{2}
}

func (m *ControlItems) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlItems.Unmarshal(m, b)
}
func (m *ControlItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlItems.Marshal(b, m, deterministic)
}
func (m *ControlItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlItems.Merge(m, src)
}
func (m *ControlItems) XXX_Size() int {
	return xxx_messageInfo_ControlItems.Size(m)
}
func (m *ControlItems) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlItems.DiscardUnknown(m)
}

var xxx_messageInfo_ControlItems proto.InternalMessageInfo

func (m *ControlItems) GetControlItems() []*ControlItem {
	if m != nil {
		return m.ControlItems
	}
	return nil
}

type TimeQuery struct {
	StartTime            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TimeQuery) Reset()         { *m = TimeQuery{} }
func (m *TimeQuery) String() string { return proto.CompactTextString(m) }
func (*TimeQuery) ProtoMessage()    {}
func (*TimeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{3}
}

func (m *TimeQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeQuery.Unmarshal(m, b)
}
func (m *TimeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeQuery.Marshal(b, m, deterministic)
}
func (m *TimeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeQuery.Merge(m, src)
}
func (m *TimeQuery) XXX_Size() int {
	return xxx_messageInfo_TimeQuery.Size(m)
}
func (m *TimeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TimeQuery proto.InternalMessageInfo

func (m *TimeQuery) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

type ExportData struct {
	// The exported reports in the requested format
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportData) Reset()         { *m = ExportData{} }
func (m *ExportData) String() string { return proto.CompactTextString(m) }
func (*ExportData) ProtoMessage()    {}
func (*ExportData) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{4}
}

func (m *ExportData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportData.Unmarshal(m, b)
}
func (m *ExportData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportData.Marshal(b, m, deterministic)
}
func (m *ExportData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportData.Merge(m, src)
}
func (m *ExportData) XXX_Size() int {
	return xxx_messageInfo_ExportData.Size(m)
}
func (m *ExportData) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportData.DiscardUnknown(m)
}

var xxx_messageInfo_ExportData proto.InternalMessageInfo

func (m *ExportData) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Id struct {
	// The id of the node to fetch
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{5}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Query struct {
	// Used by the ReadReport endpoint to specify which report to return
	Id string `protobuf:"bytes,18,opt,name=id,proto3" json:"id,omitempty"`
	// Used by the ListSuggestions endpoint to control the type of suggestions requested, used by the Export endpoint to control the file format of the returned documents
	Type string `protobuf:"bytes,19,opt,name=type,proto3" json:"type,omitempty"`
	// The list of filters used to narrow down the list
	Filters []*ListFilter `protobuf:"bytes,20,rep,name=filters,proto3" json:"filters,omitempty"`
	// Whether to sort in ascending or descending order
	Order Query_OrderType `protobuf:"varint,21,opt,name=order,proto3,enum=chef.automate.api.compliance.reporting.v1.Query_OrderType" json:"order,omitempty"`
	// The field to sort the list of results by
	Sort string `protobuf:"bytes,22,opt,name=sort,proto3" json:"sort,omitempty"`
	// The offset to use when paginating requests
	Page int32 `protobuf:"varint,23,opt,name=page,proto3" json:"page,omitempty"`
	// The number of results to return with each paginated request
	PerPage              int32    `protobuf:"varint,24,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{6}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Query) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Query) GetFilters() []*ListFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Query) GetOrder() Query_OrderType {
	if m != nil {
		return m.Order
	}
	return Query_ASC
}

func (m *Query) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *Query) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Query) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

type ListFilter struct {
	// The values to filter for
	Values []string `protobuf:"bytes,20,rep,name=values,proto3" json:"values,omitempty"`
	// The field to filter on
	Type                 string   `protobuf:"bytes,21,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFilter) Reset()         { *m = ListFilter{} }
func (m *ListFilter) String() string { return proto.CompactTextString(m) }
func (*ListFilter) ProtoMessage()    {}
func (*ListFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{7}
}

func (m *ListFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFilter.Unmarshal(m, b)
}
func (m *ListFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFilter.Marshal(b, m, deterministic)
}
func (m *ListFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFilter.Merge(m, src)
}
func (m *ListFilter) XXX_Size() int {
	return xxx_messageInfo_ListFilter.Size(m)
}
func (m *ListFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ListFilter proto.InternalMessageInfo

func (m *ListFilter) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ListFilter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// A subtotal of controls
type Total struct {
	// The number of controls
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Total) Reset()         { *m = Total{} }
func (m *Total) String() string { return proto.CompactTextString(m) }
func (*Total) ProtoMessage()    {}
func (*Total) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{8}
}

func (m *Total) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Total.Unmarshal(m, b)
}
func (m *Total) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Total.Marshal(b, m, deterministic)
}
func (m *Total) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Total.Merge(m, src)
}
func (m *Total) XXX_Size() int {
	return xxx_messageInfo_Total.Size(m)
}
func (m *Total) XXX_DiscardUnknown() {
	xxx_messageInfo_Total.DiscardUnknown(m)
}

var xxx_messageInfo_Total proto.InternalMessageInfo

func (m *Total) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Stats of failed controls
type Failed struct {
	// The total number of failed controls
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// The number of failed controls with minor severity
	Minor int32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	// The number of failed controls with major severity
	Major int32 `protobuf:"varint,3,opt,name=major,proto3" json:"major,omitempty"`
	// The number of failed controls with critical severity
	Critical             int32    `protobuf:"varint,4,opt,name=critical,proto3" json:"critical,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Failed) Reset()         { *m = Failed{} }
func (m *Failed) String() string { return proto.CompactTextString(m) }
func (*Failed) ProtoMessage()    {}
func (*Failed) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{9}
}

func (m *Failed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Failed.Unmarshal(m, b)
}
func (m *Failed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Failed.Marshal(b, m, deterministic)
}
func (m *Failed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failed.Merge(m, src)
}
func (m *Failed) XXX_Size() int {
	return xxx_messageInfo_Failed.Size(m)
}
func (m *Failed) XXX_DiscardUnknown() {
	xxx_messageInfo_Failed.DiscardUnknown(m)
}

var xxx_messageInfo_Failed proto.InternalMessageInfo

func (m *Failed) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Failed) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *Failed) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *Failed) GetCritical() int32 {
	if m != nil {
		return m.Critical
	}
	return 0
}

// A minimal represenation of the statuses of the controls
type ControlSummary struct {
	// The total number of controls
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Intentionally blank
	Passed *Total `protobuf:"bytes,2,opt,name=passed,proto3" json:"passed,omitempty"`
	// Intentionally blank
	Skipped *Total `protobuf:"bytes,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// Intentionally blank
	Failed               *Failed  `protobuf:"bytes,4,opt,name=failed,proto3" json:"failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlSummary) Reset()         { *m = ControlSummary{} }
func (m *ControlSummary) String() string { return proto.CompactTextString(m) }
func (*ControlSummary) ProtoMessage()    {}
func (*ControlSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{10}
}

func (m *ControlSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlSummary.Unmarshal(m, b)
}
func (m *ControlSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlSummary.Marshal(b, m, deterministic)
}
func (m *ControlSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlSummary.Merge(m, src)
}
func (m *ControlSummary) XXX_Size() int {
	return xxx_messageInfo_ControlSummary.Size(m)
}
func (m *ControlSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlSummary.DiscardUnknown(m)
}

var xxx_messageInfo_ControlSummary proto.InternalMessageInfo

func (m *ControlSummary) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ControlSummary) GetPassed() *Total {
	if m != nil {
		return m.Passed
	}
	return nil
}

func (m *ControlSummary) GetSkipped() *Total {
	if m != nil {
		return m.Skipped
	}
	return nil
}

func (m *ControlSummary) GetFailed() *Failed {
	if m != nil {
		return m.Failed
	}
	return nil
}

type Reports struct {
	// The paginated results of reports matching the filters
	Reports []*Report `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	// The total number of reports matching the filters
	Total                int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reports) Reset()         { *m = Reports{} }
func (m *Reports) String() string { return proto.CompactTextString(m) }
func (*Reports) ProtoMessage()    {}
func (*Reports) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{11}
}

func (m *Reports) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reports.Unmarshal(m, b)
}
func (m *Reports) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reports.Marshal(b, m, deterministic)
}
func (m *Reports) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reports.Merge(m, src)
}
func (m *Reports) XXX_Size() int {
	return xxx_messageInfo_Reports.Size(m)
}
func (m *Reports) XXX_DiscardUnknown() {
	xxx_messageInfo_Reports.DiscardUnknown(m)
}

var xxx_messageInfo_Reports proto.InternalMessageInfo

func (m *Reports) GetReports() []*Report {
	if m != nil {
		return m.Reports
	}
	return nil
}

func (m *Reports) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ReportIds struct {
	// The list of report ids found matching the query
	Ids                  []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportIds) Reset()         { *m = ReportIds{} }
func (m *ReportIds) String() string { return proto.CompactTextString(m) }
func (*ReportIds) ProtoMessage()    {}
func (*ReportIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{12}
}

func (m *ReportIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportIds.Unmarshal(m, b)
}
func (m *ReportIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportIds.Marshal(b, m, deterministic)
}
func (m *ReportIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportIds.Merge(m, src)
}
func (m *ReportIds) XXX_Size() int {
	return xxx_messageInfo_ReportIds.Size(m)
}
func (m *ReportIds) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportIds.DiscardUnknown(m)
}

var xxx_messageInfo_ReportIds proto.InternalMessageInfo

func (m *ReportIds) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Report struct {
	// The id of the report
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the node generating the report
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The name of the node generating the report
	NodeName string `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// The time the report was submitted at
	EndTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The status of the run the report was made from
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Intentionally blank
	Controls *ControlSummary `protobuf:"bytes,6,opt,name=controls,proto3" json:"controls,omitempty"`
	// The environment of the node generating the report
	Environment string `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	// The version of the report
	Version string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	// Intentionally blank
	Platform *Platform `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty"`
	// Intentionally blank
	Statistics *Statistics `protobuf:"bytes,10,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// The profiles run as part of this report
	Profiles []*Profile `protobuf:"bytes,11,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// The id of the job associated with the report
	JobId string `protobuf:"bytes,12,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The IP address of the node generating the report
	Ipaddress string `protobuf:"bytes,13,opt,name=ipaddress,proto3" json:"ipaddress,omitempty"`
	// The FQDN (fully qualified domain name) of the node generating the report
	Fqdn                 string   `protobuf:"bytes,14,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Report) Reset()         { *m = Report{} }
func (m *Report) String() string { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()    {}
func (*Report) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{13}
}

func (m *Report) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Report.Unmarshal(m, b)
}
func (m *Report) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Report.Marshal(b, m, deterministic)
}
func (m *Report) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Report.Merge(m, src)
}
func (m *Report) XXX_Size() int {
	return xxx_messageInfo_Report.Size(m)
}
func (m *Report) XXX_DiscardUnknown() {
	xxx_messageInfo_Report.DiscardUnknown(m)
}

var xxx_messageInfo_Report proto.InternalMessageInfo

func (m *Report) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Report) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *Report) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Report) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Report) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Report) GetControls() *ControlSummary {
	if m != nil {
		return m.Controls
	}
	return nil
}

func (m *Report) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Report) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Report) GetPlatform() *Platform {
	if m != nil {
		return m.Platform
	}
	return nil
}

func (m *Report) GetStatistics() *Statistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func (m *Report) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *Report) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *Report) GetIpaddress() string {
	if m != nil {
		return m.Ipaddress
	}
	return ""
}

func (m *Report) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

type Profile struct {
	// The name of the profile. Must be unique
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The human-readable name of the profile
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The maintainer listed in the profile metadata
	Maintainer string `protobuf:"bytes,3,opt,name=maintainer,proto3" json:"maintainer,omitempty"`
	// The name of the copyright holder
	Copyright string `protobuf:"bytes,4,opt,name=copyright,proto3" json:"copyright,omitempty"`
	// The contact information for the copyright holder
	CopyrightEmail string `protobuf:"bytes,5,opt,name=copyright_email,json=copyrightEmail,proto3" json:"copyright_email,omitempty"`
	// The license the profile is released under
	License string `protobuf:"bytes,6,opt,name=license,proto3" json:"license,omitempty"`
	// A short description of the profile
	Summary string `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	// The version of the profile
	Version string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	// The name of the account that uploaded the profile to Automate
	Owner string `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	// The combined name and version of the profile
	Full string `protobuf:"bytes,10,opt,name=full,proto3" json:"full,omitempty"`
	// The supported platform targets
	Supports []*Support `protobuf:"bytes,16,rep,name=supports,proto3" json:"supports,omitempty"`
	// Other profiles that this profile depends on
	Depends []*Dependency `protobuf:"bytes,17,rep,name=depends,proto3" json:"depends,omitempty"`
	// A unique value generated from the profile used to identify it
	Sha256 string `protobuf:"bytes,18,opt,name=sha256,proto3" json:"sha256,omitempty"`
	// The groups of controls defined in the profile
	Groups []*Group `protobuf:"bytes,19,rep,name=groups,proto3" json:"groups,omitempty"`
	// The controls defined on the profile
	Controls []*Control `protobuf:"bytes,20,rep,name=controls,proto3" json:"controls,omitempty"`
	// The attributes defined on the profile
	Attributes []*Attribute `protobuf:"bytes,21,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// The highest version number of the profile stored in Automate
	LatestVersion string `protobuf:"bytes,22,opt,name=latest_version,json=latestVersion,proto3" json:"latest_version,omitempty"`
	// The status of the profile in the generated report
	Status string `protobuf:"bytes,23,opt,name=status,proto3" json:"status,omitempty"`
	// The reason this profile was skipped in the generated report, if any
	SkipMessage          string   `protobuf:"bytes,24,opt,name=skip_message,json=skipMessage,proto3" json:"skip_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{14}
}

func (m *Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile.Unmarshal(m, b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return xxx_messageInfo_Profile.Size(m)
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Profile) GetMaintainer() string {
	if m != nil {
		return m.Maintainer
	}
	return ""
}

func (m *Profile) GetCopyright() string {
	if m != nil {
		return m.Copyright
	}
	return ""
}

func (m *Profile) GetCopyrightEmail() string {
	if m != nil {
		return m.CopyrightEmail
	}
	return ""
}

func (m *Profile) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Profile) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Profile) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Profile) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Profile) GetFull() string {
	if m != nil {
		return m.Full
	}
	return ""
}

func (m *Profile) GetSupports() []*Support {
	if m != nil {
		return m.Supports
	}
	return nil
}

func (m *Profile) GetDepends() []*Dependency {
	if m != nil {
		return m.Depends
	}
	return nil
}

func (m *Profile) GetSha256() string {
	if m != nil {
		return m.Sha256
	}
	return ""
}

func (m *Profile) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Profile) GetControls() []*Control {
	if m != nil {
		return m.Controls
	}
	return nil
}

func (m *Profile) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Profile) GetLatestVersion() string {
	if m != nil {
		return m.LatestVersion
	}
	return ""
}

func (m *Profile) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Profile) GetSkipMessage() string {
	if m != nil {
		return m.SkipMessage
	}
	return ""
}

type Ref struct {
	// The URL of the external document
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The description of the external document
	Ref                  string   `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ref) Reset()         { *m = Ref{} }
func (m *Ref) String() string { return proto.CompactTextString(m) }
func (*Ref) ProtoMessage()    {}
func (*Ref) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{15}
}

func (m *Ref) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ref.Unmarshal(m, b)
}
func (m *Ref) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ref.Marshal(b, m, deterministic)
}
func (m *Ref) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ref.Merge(m, src)
}
func (m *Ref) XXX_Size() int {
	return xxx_messageInfo_Ref.Size(m)
}
func (m *Ref) XXX_DiscardUnknown() {
	xxx_messageInfo_Ref.DiscardUnknown(m)
}

var xxx_messageInfo_Ref proto.InternalMessageInfo

func (m *Ref) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Ref) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

type Result struct {
	// The status of the test
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The description of the test
	CodeDesc string `protobuf:"bytes,2,opt,name=code_desc,json=codeDesc,proto3" json:"code_desc,omitempty"`
	// The time taken to run the test
	RunTime float32 `protobuf:"fixed32,3,opt,name=run_time,json=runTime,proto3" json:"run_time,omitempty"`
	// The timestamp of when this individual test was run
	StartTime string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The reason the test failed, if any
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// The reason the test was skipped, if any
	SkipMessage          string   `protobuf:"bytes,6,opt,name=skip_message,json=skipMessage,proto3" json:"skip_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{16}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Result) GetCodeDesc() string {
	if m != nil {
		return m.CodeDesc
	}
	return ""
}

func (m *Result) GetRunTime() float32 {
	if m != nil {
		return m.RunTime
	}
	return 0
}

func (m *Result) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Result) GetSkipMessage() string {
	if m != nil {
		return m.SkipMessage
	}
	return ""
}

type SourceLocation struct {
	// The source code file the control is defined in
	Ref string `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// The line number the control is defined on
	Line                 int32    `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SourceLocation) Reset()         { *m = SourceLocation{} }
func (m *SourceLocation) String() string { return proto.CompactTextString(m) }
func (*SourceLocation) ProtoMessage()    {}
func (*SourceLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{17}
}

func (m *SourceLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceLocation.Unmarshal(m, b)
}
func (m *SourceLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceLocation.Marshal(b, m, deterministic)
}
func (m *SourceLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceLocation.Merge(m, src)
}
func (m *SourceLocation) XXX_Size() int {
	return xxx_messageInfo_SourceLocation.Size(m)
}
func (m *SourceLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceLocation.DiscardUnknown(m)
}

var xxx_messageInfo_SourceLocation proto.InternalMessageInfo

func (m *SourceLocation) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *SourceLocation) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

type Option struct {
	// The description of the attribute
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The default value of the attribute
	Default              string   `protobuf:"bytes,2,opt,name=default,proto3" json:"default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Option) Reset()         { *m = Option{} }
func (m *Option) String() string { return proto.CompactTextString(m) }
func (*Option) ProtoMessage()    {}
func (*Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{18}
}

func (m *Option) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Option.Unmarshal(m, b)
}
func (m *Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Option.Marshal(b, m, deterministic)
}
func (m *Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Option.Merge(m, src)
}
func (m *Option) XXX_Size() int {
	return xxx_messageInfo_Option.Size(m)
}
func (m *Option) XXX_DiscardUnknown() {
	xxx_messageInfo_Option.DiscardUnknown(m)
}

var xxx_messageInfo_Option proto.InternalMessageInfo

func (m *Option) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Option) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

type Support struct {
	// The name of the supported operating system
	OsName string `protobuf:"bytes,1,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	// The name of the broader category of the supported platform (eg, linux, windows)
	OsFamily string `protobuf:"bytes,2,opt,name=os_family,json=osFamily,proto3" json:"os_family,omitempty"`
	// The specific release of the operating system this profile supports
	Release string `protobuf:"bytes,3,opt,name=release,proto3" json:"release,omitempty"`
	// The supported inspec version this profile was made to run on
	InspecVersion string `protobuf:"bytes,4,opt,name=inspec_version,json=inspecVersion,proto3" json:"inspec_version,omitempty"`
	// The platform name and version combined
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Support) Reset()         { *m = Support{} }
func (m *Support) String() string { return proto.CompactTextString(m) }
func (*Support) ProtoMessage()    {}
func (*Support) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{19}
}

func (m *Support) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Support.Unmarshal(m, b)
}
func (m *Support) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Support.Marshal(b, m, deterministic)
}
func (m *Support) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Support.Merge(m, src)
}
func (m *Support) XXX_Size() int {
	return xxx_messageInfo_Support.Size(m)
}
func (m *Support) XXX_DiscardUnknown() {
	xxx_messageInfo_Support.DiscardUnknown(m)
}

var xxx_messageInfo_Support proto.InternalMessageInfo

func (m *Support) GetOsName() string {
	if m != nil {
		return m.OsName
	}
	return ""
}

func (m *Support) GetOsFamily() string {
	if m != nil {
		return m.OsFamily
	}
	return ""
}

func (m *Support) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *Support) GetInspecVersion() string {
	if m != nil {
		return m.InspecVersion
	}
	return ""
}

func (m *Support) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type Dependency struct {
	// The name of the profile
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The URL of the profile accessible over HTTP or HTTPS
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// The path to the profile on disk
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// The git URL of the profile
	Git string `protobuf:"bytes,4,opt,name=git,proto3" json:"git,omitempty"`
	// The specific git branch of the dependency
	Branch string `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	// The specific git tag of the dependency
	Tag string `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`
	// The specific git commit of the dependency
	Commit string `protobuf:"bytes,7,opt,name=commit,proto3" json:"commit,omitempty"`
	// The specific git version of the dependency
	Version string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	// The name of the dependency stored in Chef Supermarket
	Supermarket string `protobuf:"bytes,9,opt,name=supermarket,proto3" json:"supermarket,omitempty"`
	// The short name of the dependency stored on Github
	Github string `protobuf:"bytes,10,opt,name=github,proto3" json:"github,omitempty"`
	// The short name of the dependency stored on the Chef Automate or Chef Compliance server
	Compliance string `protobuf:"bytes,11,opt,name=compliance,proto3" json:"compliance,omitempty"`
	// The status of the dependency in the report
	Status string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
	// The reason this profile was skipped in the generated report, if any
	SkipMessage          string   `protobuf:"bytes,13,opt,name=skip_message,json=skipMessage,proto3" json:"skip_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dependency) Reset()         { *m = Dependency{} }
func (m *Dependency) String() string { return proto.CompactTextString(m) }
func (*Dependency) ProtoMessage()    {}
func (*Dependency) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{20}
}

func (m *Dependency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dependency.Unmarshal(m, b)
}
func (m *Dependency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dependency.Marshal(b, m, deterministic)
}
func (m *Dependency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dependency.Merge(m, src)
}
func (m *Dependency) XXX_Size() int {
	return xxx_messageInfo_Dependency.Size(m)
}
func (m *Dependency) XXX_DiscardUnknown() {
	xxx_messageInfo_Dependency.DiscardUnknown(m)
}

var xxx_messageInfo_Dependency proto.InternalMessageInfo

func (m *Dependency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dependency) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Dependency) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Dependency) GetGit() string {
	if m != nil {
		return m.Git
	}
	return ""
}

func (m *Dependency) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *Dependency) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Dependency) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *Dependency) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Dependency) GetSupermarket() string {
	if m != nil {
		return m.Supermarket
	}
	return ""
}

func (m *Dependency) GetGithub() string {
	if m != nil {
		return m.Github
	}
	return ""
}

func (m *Dependency) GetCompliance() string {
	if m != nil {
		return m.Compliance
	}
	return ""
}

func (m *Dependency) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Dependency) GetSkipMessage() string {
	if m != nil {
		return m.SkipMessage
	}
	return ""
}

type Group struct {
	// The name of the file the controls are defined in
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The title of control group
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The ids of the controls defined in this file
	Controls             []string `protobuf:"bytes,3,rep,name=controls,proto3" json:"controls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{21}
}

func (m *Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Group.Unmarshal(m, b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Group.Marshal(b, m, deterministic)
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return xxx_messageInfo_Group.Size(m)
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Group) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Group) GetControls() []string {
	if m != nil {
		return m.Controls
	}
	return nil
}

type Control struct {
	// The unique id of this control
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The full ruby code of the control defined in the profile
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// The full description of the control
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// The severity of the control
	Impact float32 `protobuf:"fixed32,4,opt,name=impact,proto3" json:"impact,omitempty"`
	// The compact description of the control
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// Intentionally blank
	SourceLocation *SourceLocation `protobuf:"bytes,6,opt,name=source_location,json=sourceLocation,proto3" json:"source_location,omitempty"`
	// The results of running all tests defined in the control against the node
	Results []*Result `protobuf:"bytes,7,rep,name=results,proto3" json:"results,omitempty"`
	// External supporting documents for the control
	Refs []*Ref `protobuf:"bytes,8,rep,name=refs,proto3" json:"refs,omitempty"`
	// Metadata defined on the control in key-value format
	Tags                 map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Control) Reset()         { *m = Control{} }
func (m *Control) String() string { return proto.CompactTextString(m) }
func (*Control) ProtoMessage()    {}
func (*Control) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{22}
}

func (m *Control) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Control.Unmarshal(m, b)
}
func (m *Control) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Control.Marshal(b, m, deterministic)
}
func (m *Control) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Control.Merge(m, src)
}
func (m *Control) XXX_Size() int {
	return xxx_messageInfo_Control.Size(m)
}
func (m *Control) XXX_DiscardUnknown() {
	xxx_messageInfo_Control.DiscardUnknown(m)
}

var xxx_messageInfo_Control proto.InternalMessageInfo

func (m *Control) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Control) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Control) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Control) GetImpact() float32 {
	if m != nil {
		return m.Impact
	}
	return 0
}

func (m *Control) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Control) GetSourceLocation() *SourceLocation {
	if m != nil {
		return m.SourceLocation
	}
	return nil
}

func (m *Control) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *Control) GetRefs() []*Ref {
	if m != nil {
		return m.Refs
	}
	return nil
}

func (m *Control) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Attribute struct {
	// The name of the attribute
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The options defined for the attribute
	Options              *Option  `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{23}
}

func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attribute.Unmarshal(m, b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return xxx_messageInfo_Attribute.Size(m)
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attribute) GetOptions() *Option {
	if m != nil {
		return m.Options
	}
	return nil
}

// The name and version of the node's operating system
type Platform struct {
	// The name of the node's operating system
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version of the node's operating system
	Release string `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	// The combined name and version of the node's operating system
	Full                 string   `protobuf:"bytes,3,opt,name=full,proto3" json:"full,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Platform) Reset()         { *m = Platform{} }
func (m *Platform) String() string { return proto.CompactTextString(m) }
func (*Platform) ProtoMessage()    {}
func (*Platform) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{24}
}

func (m *Platform) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Platform.Unmarshal(m, b)
}
func (m *Platform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Platform.Marshal(b, m, deterministic)
}
func (m *Platform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Platform.Merge(m, src)
}
func (m *Platform) XXX_Size() int {
	return xxx_messageInfo_Platform.Size(m)
}
func (m *Platform) XXX_DiscardUnknown() {
	xxx_messageInfo_Platform.DiscardUnknown(m)
}

var xxx_messageInfo_Platform proto.InternalMessageInfo

func (m *Platform) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Platform) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *Platform) GetFull() string {
	if m != nil {
		return m.Full
	}
	return ""
}

// Statistics of the report's run
type Statistics struct {
	// The duration of the report's generation time
	Duration             float32  `protobuf:"fixed32,1,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Statistics) Reset()         { *m = Statistics{} }
func (m *Statistics) String() string { return proto.CompactTextString(m) }
func (*Statistics) ProtoMessage()    {}
func (*Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{25}
}

func (m *Statistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Statistics.Unmarshal(m, b)
}
func (m *Statistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Statistics.Marshal(b, m, deterministic)
}
func (m *Statistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistics.Merge(m, src)
}
func (m *Statistics) XXX_Size() int {
	return xxx_messageInfo_Statistics.Size(m)
}
func (m *Statistics) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistics.DiscardUnknown(m)
}

var xxx_messageInfo_Statistics proto.InternalMessageInfo

func (m *Statistics) GetDuration() float32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type SuggestionRequest struct {
	// The type of resource to get suggestions for
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The term to use to match resources on
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// The maximum number of suggestions to return (Default 100)
	Size int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The criteria used to filter the suggestions returned
	Filters              []*ListFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SuggestionRequest) Reset()         { *m = SuggestionRequest{} }
func (m *SuggestionRequest) String() string { return proto.CompactTextString(m) }
func (*SuggestionRequest) ProtoMessage()    {}
func (*SuggestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{26}
}

func (m *SuggestionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuggestionRequest.Unmarshal(m, b)
}
func (m *SuggestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuggestionRequest.Marshal(b, m, deterministic)
}
func (m *SuggestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestionRequest.Merge(m, src)
}
func (m *SuggestionRequest) XXX_Size() int {
	return xxx_messageInfo_SuggestionRequest.Size(m)
}
func (m *SuggestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestionRequest proto.InternalMessageInfo

func (m *SuggestionRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SuggestionRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SuggestionRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *SuggestionRequest) GetFilters() []*ListFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type Suggestion struct {
	// The content that matched the search term
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The id of the resource that was suggested
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The confidence in the match quality
	Score float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	// The version of the suggestion
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Suggestion) Reset()         { *m = Suggestion{} }
func (m *Suggestion) String() string { return proto.CompactTextString(m) }
func (*Suggestion) ProtoMessage()    {}
func (*Suggestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{27}
}

func (m *Suggestion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Suggestion.Unmarshal(m, b)
}
func (m *Suggestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Suggestion.Marshal(b, m, deterministic)
}
func (m *Suggestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Suggestion.Merge(m, src)
}
func (m *Suggestion) XXX_Size() int {
	return xxx_messageInfo_Suggestion.Size(m)
}
func (m *Suggestion) XXX_DiscardUnknown() {
	xxx_messageInfo_Suggestion.DiscardUnknown(m)
}

var xxx_messageInfo_Suggestion proto.InternalMessageInfo

func (m *Suggestion) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Suggestion) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Suggestion) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Suggestion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Suggestions struct {
	// The list of returned suggestions
	Suggestions          []*Suggestion `protobuf:"bytes,1,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Suggestions) Reset()         { *m = Suggestions{} }
func (m *Suggestions) String() string { return proto.CompactTextString(m) }
func (*Suggestions) ProtoMessage()    {}
func (*Suggestions) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{28}
}

func (m *Suggestions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Suggestions.Unmarshal(m, b)
}
func (m *Suggestions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Suggestions.Marshal(b, m, deterministic)
}
func (m *Suggestions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Suggestions.Merge(m, src)
}
func (m *Suggestions) XXX_Size() int {
	return xxx_messageInfo_Suggestions.Size(m)
}
func (m *Suggestions) XXX_DiscardUnknown() {
	xxx_messageInfo_Suggestions.DiscardUnknown(m)
}

var xxx_messageInfo_Suggestions proto.InternalMessageInfo

func (m *Suggestions) GetSuggestions() []*Suggestion {
	if m != nil {
		return m.Suggestions
	}
	return nil
}

type ProfileMins struct {
	// Minimal represenations of the profiles matching the filters
	Profiles []*ProfileMin `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// Intentionally blank
	Counts               *ProfileCounts `protobuf:"bytes,2,opt,name=counts,proto3" json:"counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProfileMins) Reset()         { *m = ProfileMins{} }
func (m *ProfileMins) String() string { return proto.CompactTextString(m) }
func (*ProfileMins) ProtoMessage()    {}
func (*ProfileMins) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{29}
}

func (m *ProfileMins) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileMins.Unmarshal(m, b)
}
func (m *ProfileMins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileMins.Marshal(b, m, deterministic)
}
func (m *ProfileMins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileMins.Merge(m, src)
}
func (m *ProfileMins) XXX_Size() int {
	return xxx_messageInfo_ProfileMins.Size(m)
}
func (m *ProfileMins) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileMins.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileMins proto.InternalMessageInfo

func (m *ProfileMins) GetProfiles() []*ProfileMin {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *ProfileMins) GetCounts() *ProfileCounts {
	if m != nil {
		return m.Counts
	}
	return nil
}

// Stats on the statuses of nodes matching the filters
type ProfileCounts struct {
	// The total number of nodes matching the filters
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// The total number of failed nodes matching the filters
	Failed int32 `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
	// The total number of skipped nodes matching the filters
	Skipped int32 `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// The total number of passing nodes matching the filters
	Passed               int32    `protobuf:"varint,4,opt,name=passed,proto3" json:"passed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileCounts) Reset()         { *m = ProfileCounts{} }
func (m *ProfileCounts) String() string { return proto.CompactTextString(m) }
func (*ProfileCounts) ProtoMessage()    {}
func (*ProfileCounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{30}
}

func (m *ProfileCounts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileCounts.Unmarshal(m, b)
}
func (m *ProfileCounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileCounts.Marshal(b, m, deterministic)
}
func (m *ProfileCounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileCounts.Merge(m, src)
}
func (m *ProfileCounts) XXX_Size() int {
	return xxx_messageInfo_ProfileCounts.Size(m)
}
func (m *ProfileCounts) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileCounts.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileCounts proto.InternalMessageInfo

func (m *ProfileCounts) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ProfileCounts) GetFailed() int32 {
	if m != nil {
		return m.Failed
	}
	return 0
}

func (m *ProfileCounts) GetSkipped() int32 {
	if m != nil {
		return m.Skipped
	}
	return 0
}

func (m *ProfileCounts) GetPassed() int32 {
	if m != nil {
		return m.Passed
	}
	return 0
}

// Minimal represenation of a profile
type ProfileMin struct {
	// The name of the profile
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The title of the profile
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The id of the profile
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// The version of the profile
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The aggregated status of the profile across the nodes it has been run on
	Status               string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileMin) Reset()         { *m = ProfileMin{} }
func (m *ProfileMin) String() string { return proto.CompactTextString(m) }
func (*ProfileMin) ProtoMessage()    {}
func (*ProfileMin) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{31}
}

func (m *ProfileMin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileMin.Unmarshal(m, b)
}
func (m *ProfileMin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileMin.Marshal(b, m, deterministic)
}
func (m *ProfileMin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileMin.Merge(m, src)
}
func (m *ProfileMin) XXX_Size() int {
	return xxx_messageInfo_ProfileMin.Size(m)
}
func (m *ProfileMin) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileMin.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileMin proto.InternalMessageInfo

func (m *ProfileMin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileMin) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProfileMin) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProfileMin) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ProfileMin) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Node struct {
	// The id of this node
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name assigned to the node
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Intentionally blank
	Platform *Platform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// The environment assigned to the node
	Environment string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
	// A summary of the information contained in the latest report for this node
	LatestReport *LatestReportSummary `protobuf:"bytes,8,opt,name=latest_report,json=latestReport,proto3" json:"latest_report,omitempty"`
	// The tags assigned to this node
	Tags []*Kv `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// A minimal represenation of the compliance profiles run against the node
	Profiles             []*ProfileMeta `protobuf:"bytes,10,rep,name=profiles,proto3" json:"profiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{32}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetPlatform() *Platform {
	if m != nil {
		return m.Platform
	}
	return nil
}

func (m *Node) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *Node) GetLatestReport() *LatestReportSummary {
	if m != nil {
		return m.LatestReport
	}
	return nil
}

func (m *Node) GetTags() []*Kv {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Node) GetProfiles() []*ProfileMeta {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type Nodes struct {
	// The nodes matching the request filters
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// The total number of nodes matching the filters
	Total int32 `protobuf:"varint,20,opt,name=total,proto3" json:"total,omitempty"`
	// The total number of passing nodes matching the filters
	TotalPassed int32 `protobuf:"varint,21,opt,name=total_passed,json=totalPassed,proto3" json:"total_passed,omitempty"`
	// The total number of failed nodes matching the filters
	TotalFailed int32 `protobuf:"varint,22,opt,name=total_failed,json=totalFailed,proto3" json:"total_failed,omitempty"`
	// The total number of skipped nodes matching the filters
	TotalSkipped         int32    `protobuf:"varint,23,opt,name=total_skipped,json=totalSkipped,proto3" json:"total_skipped,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{33}
}

func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nodes.Unmarshal(m, b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return xxx_messageInfo_Nodes.Size(m)
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Nodes) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Nodes) GetTotalPassed() int32 {
	if m != nil {
		return m.TotalPassed
	}
	return 0
}

func (m *Nodes) GetTotalFailed() int32 {
	if m != nil {
		return m.TotalFailed
	}
	return 0
}

func (m *Nodes) GetTotalSkipped() int32 {
	if m != nil {
		return m.TotalSkipped
	}
	return 0
}

type Kv struct {
	// The key of the tag
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the tag
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kv) Reset()         { *m = Kv{} }
func (m *Kv) String() string { return proto.CompactTextString(m) }
func (*Kv) ProtoMessage()    {}
func (*Kv) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{34}
}

func (m *Kv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kv.Unmarshal(m, b)
}
func (m *Kv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kv.Marshal(b, m, deterministic)
}
func (m *Kv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kv.Merge(m, src)
}
func (m *Kv) XXX_Size() int {
	return xxx_messageInfo_Kv.Size(m)
}
func (m *Kv) XXX_DiscardUnknown() {
	xxx_messageInfo_Kv.DiscardUnknown(m)
}

var xxx_messageInfo_Kv proto.InternalMessageInfo

func (m *Kv) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Kv) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// A summary of the information contained in the latest report for this node
type LatestReportSummary struct {
	// The id of the latest report
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The time the report was submitted at
	EndTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The status of the run the report was made from
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Intentionally blank
	Controls             *ControlSummary `protobuf:"bytes,4,opt,name=controls,proto3" json:"controls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LatestReportSummary) Reset()         { *m = LatestReportSummary{} }
func (m *LatestReportSummary) String() string { return proto.CompactTextString(m) }
func (*LatestReportSummary) ProtoMessage()    {}
func (*LatestReportSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{35}
}

func (m *LatestReportSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LatestReportSummary.Unmarshal(m, b)
}
func (m *LatestReportSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LatestReportSummary.Marshal(b, m, deterministic)
}
func (m *LatestReportSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestReportSummary.Merge(m, src)
}
func (m *LatestReportSummary) XXX_Size() int {
	return xxx_messageInfo_LatestReportSummary.Size(m)
}
func (m *LatestReportSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestReportSummary.DiscardUnknown(m)
}

var xxx_messageInfo_LatestReportSummary proto.InternalMessageInfo

func (m *LatestReportSummary) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LatestReportSummary) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *LatestReportSummary) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LatestReportSummary) GetControls() *ControlSummary {
	if m != nil {
		return m.Controls
	}
	return nil
}

type ProfileMeta struct {
	// The name of the profile
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version of the profile
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The unique id of the profile
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// The status of the profile run against the node
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The combined name and version of the profile
	Full                 string   `protobuf:"bytes,5,opt,name=full,proto3" json:"full,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileMeta) Reset()         { *m = ProfileMeta{} }
func (m *ProfileMeta) String() string { return proto.CompactTextString(m) }
func (*ProfileMeta) ProtoMessage()    {}
func (*ProfileMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_be88477e02c65d17, []int{36}
}

func (m *ProfileMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileMeta.Unmarshal(m, b)
}
func (m *ProfileMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileMeta.Marshal(b, m, deterministic)
}
func (m *ProfileMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileMeta.Merge(m, src)
}
func (m *ProfileMeta) XXX_Size() int {
	return xxx_messageInfo_ProfileMeta.Size(m)
}
func (m *ProfileMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileMeta proto.InternalMessageInfo

func (m *ProfileMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileMeta) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ProfileMeta) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProfileMeta) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ProfileMeta) GetFull() string {
	if m != nil {
		return m.Full
	}
	return ""
}

func init() {
	proto.RegisterEnum("chef.automate.api.compliance.reporting.v1.Query_OrderType", Query_OrderType_name, Query_OrderType_value)
	proto.RegisterType((*ControlItemRequest)(nil), "chef.automate.api.compliance.reporting.v1.ControlItemRequest")
	proto.RegisterType((*ControlItem)(nil), "chef.automate.api.compliance.reporting.v1.ControlItem")
	proto.RegisterType((*ControlItems)(nil), "chef.automate.api.compliance.reporting.v1.ControlItems")
	proto.RegisterType((*TimeQuery)(nil), "chef.automate.api.compliance.reporting.v1.TimeQuery")
	proto.RegisterType((*ExportData)(nil), "chef.automate.api.compliance.reporting.v1.ExportData")
	proto.RegisterType((*Id)(nil), "chef.automate.api.compliance.reporting.v1.Id")
	proto.RegisterType((*Query)(nil), "chef.automate.api.compliance.reporting.v1.Query")
	proto.RegisterType((*ListFilter)(nil), "chef.automate.api.compliance.reporting.v1.ListFilter")
	proto.RegisterType((*Total)(nil), "chef.automate.api.compliance.reporting.v1.Total")
	proto.RegisterType((*Failed)(nil), "chef.automate.api.compliance.reporting.v1.Failed")
	proto.RegisterType((*ControlSummary)(nil), "chef.automate.api.compliance.reporting.v1.ControlSummary")
	proto.RegisterType((*Reports)(nil), "chef.automate.api.compliance.reporting.v1.Reports")
	proto.RegisterType((*ReportIds)(nil), "chef.automate.api.compliance.reporting.v1.ReportIds")
	proto.RegisterType((*Report)(nil), "chef.automate.api.compliance.reporting.v1.Report")
	proto.RegisterType((*Profile)(nil), "chef.automate.api.compliance.reporting.v1.Profile")
	proto.RegisterType((*Ref)(nil), "chef.automate.api.compliance.reporting.v1.Ref")
	proto.RegisterType((*Result)(nil), "chef.automate.api.compliance.reporting.v1.Result")
	proto.RegisterType((*SourceLocation)(nil), "chef.automate.api.compliance.reporting.v1.SourceLocation")
	proto.RegisterType((*Option)(nil), "chef.automate.api.compliance.reporting.v1.Option")
	proto.RegisterType((*Support)(nil), "chef.automate.api.compliance.reporting.v1.Support")
	proto.RegisterType((*Dependency)(nil), "chef.automate.api.compliance.reporting.v1.Dependency")
	proto.RegisterType((*Group)(nil), "chef.automate.api.compliance.reporting.v1.Group")
	proto.RegisterType((*Control)(nil), "chef.automate.api.compliance.reporting.v1.Control")
	proto.RegisterMapType((map[string]string)(nil), "chef.automate.api.compliance.reporting.v1.Control.TagsEntry")
	proto.RegisterType((*Attribute)(nil), "chef.automate.api.compliance.reporting.v1.Attribute")
	proto.RegisterType((*Platform)(nil), "chef.automate.api.compliance.reporting.v1.Platform")
	proto.RegisterType((*Statistics)(nil), "chef.automate.api.compliance.reporting.v1.Statistics")
	proto.RegisterType((*SuggestionRequest)(nil), "chef.automate.api.compliance.reporting.v1.SuggestionRequest")
	proto.RegisterType((*Suggestion)(nil), "chef.automate.api.compliance.reporting.v1.Suggestion")
	proto.RegisterType((*Suggestions)(nil), "chef.automate.api.compliance.reporting.v1.Suggestions")
	proto.RegisterType((*ProfileMins)(nil), "chef.automate.api.compliance.reporting.v1.ProfileMins")
	proto.RegisterType((*ProfileCounts)(nil), "chef.automate.api.compliance.reporting.v1.ProfileCounts")
	proto.RegisterType((*ProfileMin)(nil), "chef.automate.api.compliance.reporting.v1.ProfileMin")
	proto.RegisterType((*Node)(nil), "chef.automate.api.compliance.reporting.v1.Node")
	proto.RegisterType((*Nodes)(nil), "chef.automate.api.compliance.reporting.v1.Nodes")
	proto.RegisterType((*Kv)(nil), "chef.automate.api.compliance.reporting.v1.Kv")
	proto.RegisterType((*LatestReportSummary)(nil), "chef.automate.api.compliance.reporting.v1.LatestReportSummary")
	proto.RegisterType((*ProfileMeta)(nil), "chef.automate.api.compliance.reporting.v1.ProfileMeta")
}

func init() {
	proto.RegisterFile("components/automate-gateway/api/compliance/reporting/reporting.proto", fileDescriptor_be88477e02c65d17)
}

var fileDescriptor_be88477e02c65d17 = []byte{
	// 2858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xcd, 0x8f, 0x1c, 0x47,
	0x15, 0x4f, 0xf7, 0x7c, 0xbf, 0xd9, 0xdd, 0x38, 0x1d, 0x7b, 0xdd, 0x19, 0x7f, 0xad, 0x3b, 0x38,
	0xb1, 0xa3, 0x78, 0xd6, 0xd9, 0x24, 0x4e, 0xb2, 0x24, 0xc0, 0xc6, 0xbb, 0x0e, 0x1b, 0x3b, 0xf1,
	0xa6, 0xd7, 0x01, 0x09, 0x0e, 0x43, 0xed, 0x74, 0xcd, 0x6c, 0xc7, 0x3d, 0xdd, 0x9d, 0xae, 0x9a,
	0xb5, 0x07, 0xc4, 0x25, 0x87, 0x20, 0x45, 0x42, 0x48, 0xe6, 0x84, 0x04, 0x12, 0x12, 0x1c, 0x11,
	0x52, 0x50, 0x1c, 0x84, 0x04, 0x27, 0x2e, 0x20, 0x0e, 0x48, 0xf0, 0x2f, 0xc0, 0x19, 0xf1, 0x1f,
	0xa0, 0x57, 0x1f, 0xdd, 0x3d, 0x9e, 0x0f, 0x6f, 0x2f, 0x3e, 0x4d, 0xbd, 0x57, 0xaf, 0x5e, 0x55,
	0xbd, 0xfa, 0xbd, 0x8f, 0xaa, 0x1e, 0xd8, 0xec, 0x46, 0x83, 0x38, 0x0a, 0x69, 0xc8, 0xd9, 0x2a,
	0x19, 0xf2, 0x68, 0x40, 0x38, 0xbd, 0xdc, 0x27, 0x9c, 0xde, 0x25, 0xa3, 0x55, 0x12, 0xfb, 0xab,
	0xd8, 0x1f, 0xf8, 0x24, 0xec, 0xd2, 0xd5, 0x84, 0xc6, 0x51, 0xc2, 0xfd, 0xb0, 0x9f, 0xb5, 0xda,
	0x71, 0x12, 0xf1, 0xc8, 0xba, 0xd4, 0xdd, 0xa7, 0xbd, 0xb6, 0x1e, 0xdf, 0x26, 0xb1, 0xdf, 0xce,
	0xc6, 0xb5, 0x33, 0xe9, 0x83, 0x97, 0x5a, 0xa7, 0xfb, 0x51, 0xd4, 0x0f, 0xa8, 0xd0, 0x4d, 0xc2,
	0x30, 0xe2, 0x84, 0xfb, 0x51, 0xc8, 0xa4, 0xa2, 0xd6, 0x39, 0xd5, 0x2b, 0xa8, 0xbd, 0x61, 0x6f,
	0x95, 0xfb, 0x03, 0xca, 0x38, 0x19, 0xc4, 0x4a, 0xe0, 0xd4, 0xc3, 0x02, 0x74, 0x10, 0xf3, 0x91,
	0xea, 0x7c, 0x51, 0xfc, 0x74, 0x2f, 0xf7, 0x69, 0x78, 0x99, 0xdd, 0x25, 0xfd, 0x3e, 0x4d, 0x56,
	0xa3, 0x58, 0xe8, 0x9f, 0x32, 0xd7, 0x25, 0x5c, 0x02, 0xbd, 0xc7, 0x69, 0x12, 0x92, 0x00, 0xf7,
	0x39, 0x88, 0xc2, 0xd5, 0x03, 0x9a, 0x30, 0x3f, 0xfb, 0x55, 0xa2, 0xdf, 0x98, 0x6a, 0xa5, 0x24,
	0xee, 0xae, 0xe6, 0x66, 0x8c, 0xa3, 0xc0, 0xef, 0x8e, 0x66, 0x6c, 0xac, 0x88, 0x06, 0x9f, 0x0c,
	0x26, 0x35, 0x38, 0x3f, 0x36, 0xc0, 0xba, 0x16, 0x85, 0x3c, 0x89, 0x82, 0x6d, 0x4e, 0x07, 0x2e,
	0xfd, 0x78, 0x48, 0x19, 0xb7, 0x2c, 0x28, 0x73, 0x7a, 0x8f, 0xdb, 0xc6, 0x8a, 0x71, 0xb1, 0xe1,
	0x8a, 0x36, 0xf2, 0x98, 0xff, 0x7d, 0x6a, 0x9b, 0x2b, 0xc6, 0xc5, 0x8a, 0x2b, 0xda, 0xd6, 0x2d,
	0xa8, 0xf5, 0xfc, 0x80, 0xd3, 0x84, 0xd9, 0xa5, 0x95, 0xd2, 0xc5, 0xe6, 0xda, 0xab, 0xed, 0x43,
	0x1f, 0x5a, 0xfb, 0xa6, 0xcf, 0xf8, 0x75, 0x31, 0xda, 0xd5, 0x5a, 0x9c, 0xdf, 0x9b, 0xd0, 0xcc,
	0xad, 0xc7, 0x5a, 0x02, 0xd3, 0xf7, 0xd4, 0x32, 0x4c, 0xdf, 0xb3, 0x8e, 0x43, 0x85, 0xfb, 0x3c,
	0x90, 0xab, 0x68, 0xb8, 0x92, 0xc0, 0x65, 0xc4, 0x49, 0xd4, 0xf3, 0x03, 0x6a, 0x97, 0x56, 0x8c,
	0x82, 0xcb, 0xd8, 0x91, 0x23, 0xdf, 0xf3, 0x43, 0x57, 0x6b, 0xb1, 0x96, 0xa1, 0xea, 0x0f, 0x62,
	0xd2, 0xe5, 0x76, 0x79, 0xc5, 0xb8, 0x68, 0xba, 0x8a, 0xb2, 0x5e, 0x85, 0x3a, 0x0d, 0xbd, 0x0e,
	0xe2, 0xc7, 0xae, 0x88, 0x99, 0x5a, 0x6d, 0x89, 0x9d, 0xb6, 0xc6, 0x4e, 0xfb, 0xb6, 0x06, 0x97,
	0x5b, 0xa3, 0xa1, 0x87, 0x94, 0xb5, 0x07, 0x4f, 0x76, 0xe5, 0xa6, 0x3a, 0x6c, 0x38, 0x18, 0x90,
	0x64, 0x64, 0x57, 0xc5, 0xe8, 0x37, 0x0a, 0xac, 0x53, 0x99, 0x65, 0x57, 0x2a, 0x70, 0x97, 0xba,
	0x63, 0xb4, 0x73, 0x07, 0x16, 0x72, 0x86, 0x63, 0xd6, 0x77, 0x61, 0x51, 0xcf, 0xe9, 0x23, 0xc3,
	0x36, 0xc4, 0x01, 0x5d, 0x2d, 0x3e, 0xa3, 0x00, 0xc6, 0x42, 0x37, 0xa7, 0xdc, 0xb9, 0x0e, 0x0d,
	0xdc, 0xd8, 0x07, 0x43, 0x9a, 0x8c, 0xac, 0x37, 0x00, 0x18, 0x27, 0x09, 0x97, 0x66, 0x31, 0x1e,
	0x69, 0x96, 0x86, 0x90, 0x46, 0xda, 0x79, 0x0e, 0x60, 0xeb, 0x1e, 0xce, 0xb8, 0x49, 0x38, 0xb1,
	0x6c, 0xa8, 0xe1, 0x2c, 0x34, 0x94, 0xc0, 0x5b, 0x70, 0x35, 0xe9, 0x1c, 0x07, 0x73, 0xdb, 0x7b,
	0x18, 0x0c, 0xce, 0xe7, 0x26, 0x54, 0xe4, 0x12, 0x64, 0x8f, 0x95, 0xc2, 0x04, 0xf1, 0x3b, 0x8a,
	0xa9, 0xfd, 0xb4, 0xc2, 0xef, 0x28, 0x1e, 0xc3, 0xea, 0xf1, 0xc7, 0x81, 0x55, 0x6b, 0x07, 0x2a,
	0x51, 0xe2, 0xd1, 0xc4, 0x3e, 0xb1, 0x62, 0x5c, 0x5c, 0x5a, 0x5b, 0x2f, 0xa0, 0x4e, 0xac, 0xba,
	0x7d, 0x0b, 0x47, 0xdf, 0x1e, 0xc5, 0xd4, 0x95, 0x8a, 0x84, 0x8b, 0x45, 0x09, 0xb7, 0x97, 0xe5,
	0xb2, 0xb1, 0x8d, 0xbc, 0x98, 0xf4, 0xa9, 0x7d, 0x52, 0xba, 0x1d, 0xb6, 0xad, 0x67, 0xa0, 0x1e,
	0xd3, 0xa4, 0x23, 0xf8, 0xb6, 0xe0, 0xd7, 0x62, 0x9a, 0xec, 0x90, 0x3e, 0x75, 0xce, 0x42, 0x23,
	0x55, 0x6b, 0xd5, 0xa0, 0xb4, 0xb1, 0x7b, 0xed, 0xd8, 0x13, 0x56, 0x1d, 0xca, 0x9b, 0x5b, 0xbb,
	0xd7, 0x8e, 0x19, 0xce, 0xeb, 0x00, 0xd9, 0x5e, 0x10, 0xe7, 0x07, 0x24, 0x18, 0x52, 0x69, 0x92,
	0x86, 0xab, 0xa8, 0xd4, 0x7e, 0x27, 0x32, 0xfb, 0x39, 0x67, 0xa0, 0x72, 0x3b, 0xe2, 0x24, 0x10,
	0x3e, 0x88, 0x0d, 0x71, 0x12, 0x15, 0x57, 0x12, 0x4e, 0x0f, 0xaa, 0xd7, 0x89, 0x1f, 0x50, 0x6f,
	0x7a, 0x3f, 0x72, 0x07, 0x7e, 0x18, 0x25, 0x2a, 0x7e, 0x48, 0x42, 0x70, 0xc9, 0x47, 0x51, 0x22,
	0xfc, 0x16, 0xb9, 0x48, 0x58, 0x2d, 0xa8, 0x77, 0x13, 0x9f, 0xfb, 0x5d, 0x12, 0x08, 0x07, 0xac,
	0xb8, 0x29, 0xed, 0xfc, 0xc8, 0x84, 0xa5, 0x71, 0x57, 0x98, 0x31, 0xe1, 0x37, 0xa1, 0x1a, 0x13,
	0xc6, 0xa8, 0x27, 0x66, 0x6c, 0xae, 0x5d, 0x29, 0x70, 0x3e, 0x62, 0xa3, 0xae, 0x1a, 0x6f, 0xbd,
	0x0b, 0x35, 0x76, 0xc7, 0x8f, 0x63, 0xea, 0xa9, 0xf0, 0x52, 0x5c, 0x95, 0x56, 0x60, 0x6d, 0x43,
	0xb5, 0x27, 0xcc, 0x24, 0x36, 0xd6, 0x5c, 0x7b, 0xa9, 0x80, 0x2a, 0x69, 0x5f, 0x57, 0x29, 0x70,
	0x02, 0xa8, 0xb9, 0xa2, 0x9b, 0x59, 0x37, 0xa0, 0x26, 0x25, 0xb5, 0x9b, 0x17, 0x51, 0x2b, 0x95,
	0xb8, 0x5a, 0x43, 0x66, 0x4e, 0x33, 0x7f, 0xbe, 0x67, 0xa0, 0x21, 0x05, 0xb7, 0x3d, 0x66, 0x1d,
	0x83, 0x92, 0xef, 0xc9, 0xb9, 0x1a, 0x2e, 0x36, 0x9d, 0xff, 0x96, 0xa1, 0x2a, 0xfb, 0x27, 0x62,
	0xf6, 0x49, 0xa8, 0x85, 0x91, 0x47, 0x3b, 0xbe, 0xa7, 0xa2, 0x76, 0x15, 0xc9, 0x6d, 0xcf, 0x3a,
	0x05, 0x0d, 0xd1, 0x11, 0x92, 0x81, 0x0c, 0xdc, 0x0d, 0xb7, 0x8e, 0x8c, 0xf7, 0xc9, 0x80, 0x8e,
	0x85, 0xda, 0xf2, 0xe1, 0x43, 0xed, 0x32, 0x54, 0x19, 0x27, 0x7c, 0xc8, 0x44, 0x7c, 0x6e, 0xb8,
	0x8a, 0xb2, 0x3e, 0x84, 0xba, 0x8a, 0x60, 0xec, 0xff, 0x8f, 0xbd, 0xa9, 0x2a, 0x6b, 0x05, 0x9a,
	0x34, 0x3c, 0xf0, 0x93, 0x28, 0x1c, 0x60, 0xd8, 0xaa, 0x89, 0x39, 0xf3, 0x2c, 0x0c, 0x6a, 0x2a,
	0xed, 0xdb, 0x75, 0xd1, 0xab, 0x49, 0xeb, 0x16, 0xd4, 0xe3, 0x80, 0xf0, 0x5e, 0x94, 0x0c, 0xec,
	0x86, 0x58, 0xd2, 0xcb, 0x45, 0xd2, 0x96, 0x1a, 0xea, 0xa6, 0x4a, 0xac, 0x0f, 0x45, 0x20, 0xe6,
	0x3e, 0xe3, 0x7e, 0x97, 0xd9, 0x50, 0x38, 0x13, 0xee, 0xa6, 0x83, 0xdd, 0x9c, 0x22, 0xeb, 0x7d,
	0xa8, 0xab, 0xbc, 0xc8, 0xec, 0xa6, 0x40, 0xd7, 0x5a, 0xf1, 0xf4, 0xea, 0xa6, 0x3a, 0xac, 0x13,
	0x50, 0xfd, 0x28, 0xda, 0x43, 0x38, 0x2c, 0xc8, 0x24, 0xfe, 0x51, 0xb4, 0xb7, 0xed, 0x59, 0xa7,
	0xa1, 0xe1, 0xc7, 0xc4, 0xf3, 0x12, 0xca, 0x98, 0xbd, 0x28, 0x7a, 0x32, 0x06, 0x46, 0xa4, 0xde,
	0xc7, 0x5e, 0x68, 0x2f, 0xc9, 0x88, 0x84, 0x6d, 0xe7, 0x17, 0x55, 0xa8, 0x29, 0xf5, 0xd8, 0x2f,
	0x60, 0xa4, 0x2a, 0x16, 0x6c, 0xcf, 0x28, 0x16, 0xce, 0x02, 0x0c, 0x88, 0x1f, 0x72, 0xe2, 0x87,
	0x34, 0x51, 0xb0, 0xcb, 0x71, 0x70, 0x1d, 0xdd, 0x28, 0x1e, 0x25, 0x7e, 0x7f, 0x5f, 0xa6, 0xff,
	0x86, 0x9b, 0x31, 0xac, 0xe7, 0x31, 0x95, 0x2b, 0xa2, 0x43, 0x07, 0xc4, 0x0f, 0x14, 0xd0, 0x96,
	0x52, 0xf6, 0x16, 0x72, 0xf1, 0xdc, 0x03, 0xbf, 0x4b, 0x43, 0x46, 0x05, 0xde, 0x1a, 0xae, 0x26,
	0xb1, 0x47, 0x57, 0x01, 0x12, 0x2f, 0x9a, 0x9c, 0x83, 0x95, 0xe3, 0x50, 0x89, 0xee, 0xe2, 0x7a,
	0x1b, 0x72, 0x2b, 0x82, 0x10, 0x46, 0x19, 0x06, 0x81, 0x38, 0x6a, 0x34, 0xca, 0x30, 0x08, 0xf0,
	0xb4, 0xd8, 0x30, 0x96, 0xb1, 0xe0, 0x58, 0xe1, 0xd3, 0xda, 0x95, 0x43, 0xdd, 0x54, 0x07, 0xa6,
	0x4d, 0x8f, 0xc6, 0x34, 0xf4, 0x98, 0xfd, 0x54, 0xe1, 0xb4, 0xb9, 0x29, 0x46, 0xd2, 0xb0, 0x3b,
	0x72, 0xb5, 0x16, 0xe1, 0xa1, 0xfb, 0x64, 0xed, 0xd5, 0xab, 0x2a, 0x5f, 0x2b, 0x0a, 0xe3, 0x75,
	0x3f, 0x89, 0x86, 0x31, 0xb3, 0x9f, 0x16, 0xf3, 0x14, 0x09, 0xb2, 0xef, 0xe0, 0x40, 0x57, 0x8d,
	0x47, 0x13, 0xa4, 0xbe, 0x7e, 0xbc, 0xb0, 0x09, 0x94, 0xaf, 0xe7, 0x9c, 0xfc, 0x36, 0x00, 0xe1,
	0x3c, 0xf1, 0xf7, 0x86, 0x9c, 0x32, 0xfb, 0x84, 0xd0, 0xf8, 0x4a, 0x01, 0x8d, 0x1b, 0x7a, 0xb0,
	0x9b, 0xd3, 0x63, 0x5d, 0x80, 0xa5, 0x80, 0x70, 0xca, 0x78, 0x47, 0x9f, 0xb9, 0x4c, 0xfb, 0x8b,
	0x92, 0xfb, 0x2d, 0x75, 0xf2, 0x59, 0x40, 0x3b, 0x39, 0x16, 0xd0, 0xce, 0xc3, 0x02, 0xe6, 0x94,
	0xce, 0x80, 0x32, 0xa6, 0xeb, 0x80, 0x86, 0xdb, 0x44, 0xde, 0x7b, 0x92, 0xe5, 0x5c, 0x82, 0x92,
	0x4b, 0x7b, 0x18, 0xac, 0x87, 0x49, 0xa0, 0x3c, 0x03, 0x9b, 0xc8, 0x49, 0x68, 0x4f, 0xb9, 0x05,
	0x36, 0x9d, 0x2f, 0x0c, 0x0c, 0xdf, 0x6c, 0x18, 0xf0, 0xdc, 0x84, 0xc6, 0xd8, 0x84, 0xa7, 0xd0,
	0x2f, 0x3c, 0xda, 0xf1, 0x28, 0xeb, 0xaa, 0xa1, 0x75, 0x64, 0x6c, 0x52, 0xd6, 0xc5, 0x8a, 0x24,
	0x19, 0x86, 0x32, 0x5a, 0x97, 0x44, 0xc9, 0x5c, 0x4b, 0x86, 0xa1, 0x88, 0xc8, 0x67, 0xc6, 0xca,
	0x43, 0xe5, 0x50, 0x69, 0x09, 0x88, 0x98, 0xd7, 0x5b, 0x90, 0x8e, 0xa4, 0xc9, 0x89, 0x1d, 0x56,
	0x27, 0x77, 0x78, 0x15, 0x96, 0x76, 0xa3, 0x61, 0xd2, 0xa5, 0x37, 0xa3, 0xae, 0xb8, 0xd7, 0xe8,
	0xad, 0x19, 0xe9, 0xd6, 0xd0, 0x49, 0x02, 0x3f, 0x4c, 0xef, 0x2d, 0xd8, 0x76, 0x36, 0xa1, 0x7a,
	0x4b, 0x5c, 0xe1, 0x30, 0x80, 0xe3, 0x86, 0x12, 0x5f, 0x90, 0x6a, 0x5c, 0x9e, 0x85, 0x0b, 0xf4,
	0x68, 0x8f, 0x0c, 0x03, 0xae, 0x76, 0xad, 0x49, 0xe7, 0xe7, 0x06, 0xd4, 0x94, 0xc3, 0x60, 0x92,
	0x8b, 0x58, 0x27, 0x17, 0x82, 0xaa, 0x11, 0x13, 0x79, 0xec, 0x14, 0x34, 0x22, 0xd6, 0xe9, 0x91,
	0x81, 0x1f, 0x8c, 0xb4, 0xd9, 0x22, 0x76, 0x5d, 0xd0, 0xa8, 0x3b, 0xa1, 0x01, 0x25, 0x4c, 0xe7,
	0x3f, 0x4d, 0x22, 0x3a, 0xfc, 0x90, 0xc5, 0xb4, 0x9b, 0xa2, 0x43, 0x5a, 0x6e, 0x51, 0x72, 0x35,
	0x3a, 0x5a, 0xb9, 0x1c, 0x22, 0xcd, 0x97, 0xd2, 0xce, 0x5f, 0x4d, 0x80, 0xcc, 0x01, 0xa7, 0x46,
	0x48, 0x05, 0x0d, 0x33, 0x83, 0x86, 0x28, 0x37, 0xf9, 0xbe, 0x5a, 0x8e, 0x68, 0xa3, 0x54, 0xdf,
	0xd7, 0xb1, 0x10, 0x9b, 0x88, 0x91, 0xbd, 0x84, 0x84, 0xdd, 0x7d, 0x9d, 0x65, 0x25, 0x85, 0x92,
	0x9c, 0xf4, 0xd5, 0x49, 0x61, 0x13, 0x25, 0xf1, 0x12, 0xec, 0xeb, 0xdc, 0xa8, 0xa8, 0x39, 0xa1,
	0x6e, 0x05, 0x9a, 0x6c, 0x18, 0xd3, 0x64, 0x40, 0x92, 0x3b, 0x94, 0xab, 0x80, 0x97, 0x67, 0xa1,
	0xce, 0xbe, 0xcf, 0xf7, 0x87, 0x7b, 0x2a, 0xf0, 0x29, 0x0a, 0x23, 0x7b, 0xe6, 0x82, 0x76, 0x53,
	0x46, 0xf6, 0x8c, 0x93, 0x43, 0xf6, 0xc2, 0x5c, 0x57, 0x5a, 0x9c, 0x04, 0xda, 0x36, 0x54, 0x44,
	0x8c, 0x39, 0xe4, 0x85, 0xb4, 0x95, 0x8b, 0x40, 0x25, 0x51, 0x24, 0xa5, 0xb4, 0xf3, 0x9f, 0x12,
	0xd4, 0x54, 0x8c, 0x99, 0xd0, 0x66, 0x41, 0x19, 0x5d, 0x4a, 0x29, 0x13, 0x6d, 0xe4, 0x09, 0x97,
	0x53, 0x27, 0x82, 0xed, 0x99, 0xf7, 0xd3, 0x74, 0x35, 0x95, 0xfc, 0x6a, 0xf6, 0xe0, 0x49, 0x26,
	0xbc, 0xa4, 0x13, 0x28, 0x37, 0x39, 0x42, 0x09, 0x34, 0xee, 0x67, 0xee, 0x12, 0x1b, 0xf7, 0x3b,
	0x51, 0x81, 0x62, 0xfc, 0x60, 0x76, 0xed, 0x08, 0x15, 0x28, 0x8e, 0x74, 0xb5, 0x06, 0xeb, 0x6d,
	0x28, 0x27, 0xb4, 0xc7, 0xec, 0xba, 0xd0, 0xd4, 0x2e, 0xa4, 0xa9, 0xe7, 0x8a, 0xb1, 0xd6, 0x0e,
	0x94, 0x39, 0xe9, 0x33, 0xbb, 0x21, 0x74, 0xbc, 0x59, 0x3c, 0x01, 0xb4, 0x6f, 0x93, 0x3e, 0xdb,
	0x0a, 0x79, 0x32, 0x72, 0x85, 0xa6, 0xd6, 0x6b, 0xd0, 0x48, 0x59, 0x88, 0xf4, 0x3b, 0x74, 0xa4,
	0xe3, 0xcc, 0x1d, 0x2a, 0x6e, 0x21, 0xe2, 0xf6, 0xa4, 0x91, 0x20, 0x88, 0x75, 0xf3, 0x75, 0xc3,
	0x09, 0xa0, 0x91, 0xa6, 0x80, 0xa9, 0x6e, 0x78, 0x03, 0x6a, 0xea, 0x45, 0x49, 0xdd, 0x55, 0x8a,
	0x18, 0x4f, 0x06, 0x32, 0x57, 0x6b, 0x70, 0x6e, 0x42, 0x5d, 0xd7, 0x86, 0x53, 0x27, 0xcb, 0xc5,
	0x1c, 0x73, 0x3c, 0xe6, 0xe8, 0x72, 0xa2, 0x94, 0x95, 0x13, 0xce, 0x45, 0x80, 0xac, 0x2c, 0x44,
	0x5c, 0x7b, 0xc3, 0x84, 0xa4, 0xa1, 0xd2, 0x74, 0x53, 0xda, 0xf9, 0xa5, 0x01, 0x4f, 0xed, 0x0e,
	0xfb, 0x7d, 0xca, 0xc4, 0x7a, 0x72, 0x2f, 0x49, 0x78, 0x93, 0x34, 0x72, 0x37, 0x71, 0xfd, 0xba,
	0x64, 0x4e, 0x79, 0x5d, 0x2a, 0x4d, 0x7f, 0x5d, 0x2a, 0x3f, 0x96, 0xd7, 0xa5, 0xef, 0x01, 0x64,
	0x2b, 0x9c, 0xfa, 0xc8, 0x25, 0x1d, 0xd2, 0xcc, 0xbb, 0x37, 0xeb, 0x46, 0x89, 0x4e, 0x6a, 0x92,
	0xc8, 0x07, 0xaf, 0xf2, 0x58, 0xf0, 0x72, 0x7a, 0xd0, 0xcc, 0x66, 0x60, 0xd6, 0xb7, 0x31, 0x96,
	0xa5, 0xa4, 0xba, 0x9b, 0x15, 0x2a, 0xc9, 0x33, 0x83, 0xe6, 0x35, 0x39, 0xbf, 0x33, 0xa0, 0x99,
	0x3d, 0x5c, 0x31, 0xeb, 0x83, 0x5c, 0x8d, 0x5e, 0x7c, 0x96, 0xdc, 0x13, 0x58, 0x56, 0xa6, 0xef,
	0x60, 0xe4, 0x1e, 0x86, 0x5c, 0x63, 0xf2, 0xf5, 0xe2, 0x0a, 0xaf, 0x89, 0xf1, 0xae, 0xd2, 0xe3,
	0x44, 0xb0, 0x38, 0xd6, 0x31, 0xe3, 0xe2, 0xbe, 0x9c, 0x5e, 0x91, 0x65, 0xca, 0x56, 0x94, 0xa8,
	0x9b, 0x73, 0xd7, 0xf0, 0x4a, 0x76, 0xa9, 0x5e, 0x4e, 0xaf, 0xfa, 0xf2, 0xb5, 0x40, 0x51, 0xce,
	0x3d, 0x80, 0x6c, 0x6b, 0x05, 0xae, 0x08, 0x12, 0x05, 0xa5, 0x14, 0x05, 0x33, 0xcf, 0x7b, 0xd6,
	0x75, 0xd3, 0xf9, 0x59, 0x09, 0xca, 0xef, 0x63, 0xf4, 0x9e, 0x12, 0xe1, 0xc5, 0x22, 0xcc, 0xdc,
	0x22, 0xf2, 0x17, 0xc1, 0xd2, 0xe3, 0xb8, 0x08, 0x3e, 0x74, 0x2b, 0x2d, 0x4f, 0xde, 0x4a, 0xbb,
	0xa0, 0xca, 0xcc, 0x8e, 0xd4, 0x25, 0x92, 0x70, 0x73, 0xed, 0x6b, 0x45, 0x1c, 0x4c, 0x8c, 0x97,
	0x77, 0x7e, 0x7d, 0x31, 0x5e, 0x08, 0x72, 0x4c, 0x6b, 0x63, 0x2c, 0x04, 0x5f, 0x2e, 0xa0, 0xfb,
	0xc6, 0x81, 0x8c, 0xb9, 0x96, 0x9b, 0xc3, 0x35, 0x14, 0x7e, 0xc0, 0xd4, 0x87, 0x4f, 0x39, 0xc9,
	0x80, 0xed, 0xfc, 0xdd, 0x80, 0x0a, 0x9e, 0x0d, 0xb3, 0xb6, 0xa0, 0x12, 0x62, 0x43, 0xb9, 0xcc,
	0x6a, 0x01, 0xd5, 0xa8, 0xc0, 0x95, 0xa3, 0x33, 0x18, 0x1f, 0xcf, 0xc3, 0xf8, 0x3c, 0x2c, 0x88,
	0x46, 0x47, 0x41, 0xf3, 0x84, 0xe8, 0x6c, 0x0a, 0xde, 0x8e, 0x7c, 0x58, 0x4a, 0x45, 0x14, 0xde,
	0x97, 0x73, 0x22, 0xea, 0x31, 0xed, 0x59, 0x58, 0x94, 0x22, 0x1a, 0xfa, 0xf2, 0x1d, 0x50, 0x8e,
	0xdb, 0x95, 0x3c, 0xe7, 0x45, 0x30, 0x6f, 0x1c, 0x1c, 0x36, 0x25, 0x39, 0x7f, 0x33, 0xe0, 0xe9,
	0x29, 0x87, 0x37, 0x01, 0xd5, 0xfc, 0x0b, 0x8c, 0x79, 0x94, 0x17, 0x98, 0xd2, 0xcc, 0x17, 0x98,
	0xf2, 0x63, 0x7b, 0x81, 0x71, 0xee, 0x66, 0x81, 0x90, 0x72, 0x32, 0x2b, 0xe3, 0x69, 0xf7, 0x35,
	0xc7, 0xdd, 0xf7, 0x61, 0x47, 0xcf, 0xd6, 0x5e, 0x1e, 0x5b, 0xbb, 0xce, 0x8c, 0x95, 0x2c, 0x33,
	0xae, 0xfd, 0xc6, 0x86, 0x63, 0xae, 0x5e, 0xe2, 0x2e, 0x4d, 0x0e, 0xfc, 0x2e, 0xb5, 0x7e, 0x6d,
	0x42, 0x13, 0x33, 0x8f, 0x7e, 0x98, 0xbb, 0x52, 0xf4, 0x51, 0xb8, 0xb5, 0x56, 0xf8, 0xe5, 0x8e,
	0x39, 0xbf, 0x35, 0xee, 0x6f, 0x9c, 0x85, 0xd3, 0xd7, 0x52, 0xb1, 0x95, 0x74, 0x61, 0xaa, 0xc5,
	0x3e, 0x79, 0x60, 0x3f, 0x07, 0xa7, 0x33, 0x45, 0xeb, 0xa9, 0xa2, 0x75, 0xfd, 0xee, 0x57, 0x65,
	0x94, 0x24, 0xdd, 0xfd, 0xcf, 0x1e, 0xd8, 0xaf, 0x3d, 0x42, 0xf2, 0xe4, 0x44, 0x2f, 0x5b, 0x0f,
	0x7c, 0xc6, 0x3f, 0xf9, 0xe7, 0xbf, 0x7e, 0x6a, 0x3a, 0xce, 0x99, 0x79, 0xdf, 0xf7, 0xd8, 0xba,
	0xf1, 0x82, 0xf5, 0xa5, 0x09, 0x8b, 0x99, 0x99, 0xb6, 0xbd, 0xa3, 0x18, 0xea, 0x95, 0xc2, 0x86,
	0xda, 0xf6, 0x98, 0xf3, 0x47, 0xe3, 0xfe, 0xc6, 0x79, 0x38, 0x37, 0xc7, 0x54, 0x2b, 0xdb, 0x9b,
	0x68, 0xad, 0x4b, 0x70, 0x6e, 0x8e, 0x0d, 0x2e, 0xfb, 0x5e, 0xde, 0x60, 0x6f, 0x3e, 0x5a, 0xf8,
	0x99, 0x49, 0x01, 0x2f, 0x67, 0xb5, 0x0b, 0xce, 0xca, 0x3c, 0xab, 0xa1, 0x0a, 0x34, 0xdc, 0x9f,
	0x4d, 0x38, 0x86, 0x86, 0x1b, 0xfb, 0xd4, 0xf3, 0xd6, 0x11, 0xbf, 0xe9, 0xc8, 0x12, 0xad, 0xf5,
	0xda, 0xd1, 0x86, 0x33, 0xe7, 0x4b, 0xe3, 0xfe, 0xc6, 0x39, 0x38, 0x33, 0xd5, 0x96, 0x4a, 0x10,
	0x2d, 0xf9, 0x3c, 0x9c, 0x99, 0x6a, 0x9c, 0xf4, 0x7d, 0x25, 0x6f, 0xc7, 0xd3, 0xf3, 0x44, 0xad,
	0x7c, 0x6f, 0xfe, 0x83, 0x54, 0x66, 0xc7, 0x67, 0x9d, 0xb3, 0xd3, 0xed, 0xa8, 0x67, 0x43, 0x2b,
	0x7e, 0x6e, 0x02, 0xb8, 0x94, 0x78, 0x2a, 0x4f, 0x15, 0xc7, 0x5e, 0xf1, 0xe7, 0x75, 0xe7, 0x4f,
	0x87, 0xf2, 0xd1, 0x4b, 0x70, 0x7e, 0x9e, 0xe7, 0xad, 0xff, 0xc0, 0xf7, 0x7e, 0x68, 0x95, 0x13,
	0x4a, 0xbc, 0xcf, 0x1e, 0xd8, 0x5f, 0x3d, 0x8c, 0xf0, 0xf2, 0x14, 0x5f, 0xed, 0x53, 0x69, 0xac,
	0x17, 0x9c, 0x0b, 0x73, 0x5d, 0x75, 0xd5, 0xf7, 0x56, 0x51, 0x09, 0xda, 0xec, 0x1f, 0x26, 0x3c,
	0x89, 0xc8, 0xcb, 0x97, 0xb7, 0x6f, 0x1e, 0xad, 0x92, 0x55, 0xb8, 0xbb, 0x7a, 0xa4, 0xd1, 0xcc,
	0xf9, 0x8b, 0x71, 0x7f, 0xc3, 0x81, 0x95, 0xa9, 0x96, 0xcc, 0xc9, 0x7d, 0xf2, 0xc0, 0x7e, 0x01,
	0x56, 0xa6, 0x1a, 0x28, 0x57, 0x49, 0xe7, 0xc0, 0xb7, 0x75, 0x08, 0xe9, 0x49, 0x83, 0xe7, 0x66,
	0xcc, 0x50, 0xf8, 0x9c, 0x73, 0x7e, 0xba, 0x61, 0x73, 0xba, 0xd0, 0xa8, 0x5f, 0x98, 0xb0, 0x80,
	0x46, 0xdd, 0xd1, 0x45, 0x77, 0x71, 0x28, 0x5e, 0x3d, 0x52, 0x9d, 0xcf, 0x9c, 0x3f, 0xcc, 0x71,
	0x5e, 0xbd, 0x9c, 0x39, 0xce, 0x9b, 0x5e, 0x13, 0x32, 0xfb, 0x7d, 0xfd, 0x51, 0xa2, 0x67, 0x27,
	0xba, 0xf5, 0x44, 0x87, 0xf0, 0x5f, 0xad, 0x05, 0xcd, 0x36, 0x84, 0xaa, 0xfc, 0x6c, 0x7c, 0x04,
	0x7b, 0x15, 0xb9, 0x17, 0x65, 0xdf, 0xa6, 0x9d, 0x27, 0xae, 0x18, 0xd6, 0xaf, 0x4c, 0xa8, 0x63,
	0xd8, 0x10, 0x85, 0x7d, 0x91, 0x72, 0x76, 0xdb, 0x6b, 0x15, 0xad, 0x2d, 0x45, 0x70, 0x3d, 0x0d,
	0xad, 0xa9, 0xe7, 0x23, 0xaa, 0x57, 0x71, 0x38, 0xd3, 0xd3, 0x8e, 0x28, 0x4b, 0xc7, 0x63, 0xc5,
	0x5b, 0x8f, 0x16, 0x6d, 0x4d, 0x08, 0x88, 0x79, 0xd2, 0x68, 0x71, 0xc1, 0x7a, 0x76, 0xfa, 0xd1,
	0x08, 0x1d, 0x3a, 0x56, 0xa0, 0x95, 0x1a, 0x88, 0x69, 0x59, 0x62, 0x17, 0x3f, 0xa0, 0x2b, 0x05,
	0x2d, 0xc5, 0x9c, 0xcf, 0x0f, 0x61, 0xaa, 0xaf, 0x40, 0x6b, 0xf6, 0xfe, 0x73, 0x20, 0x7e, 0x63,
	0xae, 0xdc, 0xa9, 0x19, 0x26, 0x4a, 0xe1, 0xfb, 0xbc, 0xe3, 0xcc, 0xb3, 0x91, 0x9c, 0x06, 0x21,
	0xfc, 0x6f, 0x03, 0xe0, 0x1d, 0x9a, 0xbd, 0xf2, 0x4f, 0x54, 0xd6, 0x5b, 0x83, 0x98, 0x8f, 0x5a,
	0x33, 0x50, 0x36, 0x88, 0xc2, 0xb6, 0xfe, 0x33, 0x91, 0x52, 0xb1, 0x1d, 0xf6, 0x22, 0xe7, 0x27,
	0xc6, 0xfd, 0x8d, 0x3a, 0x54, 0xf7, 0x7d, 0xcf, 0xa3, 0xa1, 0xd8, 0xf5, 0xf4, 0x7c, 0xaa, 0xeb,
	0x5f, 0x8d, 0x8e, 0x97, 0x61, 0x99, 0x8d, 0x18, 0xa7, 0x83, 0x75, 0x26, 0x0b, 0xd9, 0x54, 0xe2,
	0x99, 0x71, 0xbe, 0x9a, 0x2c, 0xc5, 0xc4, 0x39, 0x6b, 0x46, 0xb1, 0xa7, 0xc7, 0x7f, 0x6a, 0xc2,
	0x53, 0x37, 0xe5, 0x87, 0xaf, 0x0f, 0x19, 0xe9, 0x53, 0x89, 0x8a, 0x22, 0xb5, 0x5b, 0xfa, 0x47,
	0x93, 0x23, 0x95, 0xc6, 0x9f, 0x3e, 0x64, 0x91, 0x59, 0x09, 0x56, 0x7d, 0x9c, 0x1b, 0x8a, 0x2f,
	0x0f, 0x65, 0x3c, 0xcf, 0xcf, 0x1e, 0xd8, 0xef, 0x1e, 0x46, 0xf8, 0xc2, 0x34, 0x91, 0xfc, 0x96,
	0x05, 0x3a, 0xde, 0xbe, 0xf5, 0x9d, 0xf7, 0xe4, 0x33, 0x35, 0x2e, 0x79, 0x15, 0x37, 0x92, 0xfe,
	0x65, 0x6b, 0xf5, 0x28, 0x7f, 0x97, 0xdb, 0xab, 0x0a, 0xa8, 0xbc, 0xfc, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x05, 0xc0, 0xc1, 0xc2, 0x6d, 0x27, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReportingServiceClient is the client API for ReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportingServiceClient interface {
	//
	//List reports
	//
	//List all reports optionally using filters. Supports pagination, filtering, and sorting.
	//
	//| Sort paramter | Sort value |
	//| --- | --- |
	//| latest_report.controls.failed.critical | controls_sums.failed.critical |
	//| latest_report.controls.failed.total | controls_sums.failed.total |
	//| latest_report.end_time (default) | end_time |
	//| latest_report.status | status |
	//| node_name | node_name.lower |
	ListReports(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Reports, error)
	//
	//List report IDs
	//
	//List all report IDs optionally using filters. Supports filtering, but not pagination or sorting.
	//Including more than one value for `control`, `profile_id`, or `profile_name` is not allowed.
	//Including values for both `profile_id` and `profile_name` in one request is not allowed.
	ListReportIds(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReportIds, error)
	//
	//List controls
	//
	//List all controls optionally using filters. Supports filtering, but not pagination or sorting.
	ListControlItems(ctx context.Context, in *ControlItemRequest, opts ...grpc.CallOption) (*ControlItems, error)
	//
	//Fetch a report
	//
	//Fetch a specific report by id. Supports filtering, but not pagination or sorting.
	//Including more than one value for `profile_id` is not allowed.
	ReadReport(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Report, error)
	//
	//List suggestions
	//
	//Get suggestions for compliance reporting resources based on matching text substrings.
	//Supports filtering, but not pagination or sorting.
	//`type` parameter is required. It must be one of the parameters from the following table.
	//
	//| Suggestion type parameter | Suggestion type value |
	//| --- | --- |
	//| chef_server | source_fqdn |
	//| chef_tags | chef_tags |
	//| control | profiles.controls.title |
	//| control_tag_key | profiles.controls.string_tags.key |
	//| control_tag_value | profiles.controls.string_tags.values |
	//| environment | environment |
	//| inspec_version | version |
	//| node | node_name |
	//| organization | organization_name |
	//| platform | platform.name |
	//| platform_with_version | platform.full |
	//| policy_group | policy_group |
	//| policy_name | policy_name |
	//| profile | profiles.title |
	//| profile_with_version | profiles.full |
	//| recipe | recipes |
	//| role | roles |
	ListSuggestions(ctx context.Context, in *SuggestionRequest, opts ...grpc.CallOption) (*Suggestions, error)
	//
	//List profiles
	//
	//List all profiles optionally using filters. Supports pagination, filtering, and sorting.
	//
	//| Sort paramter | Sort value |
	//| --- | --- |
	//| name | name.lower |
	//| title (default) | title.lower |
	ListProfiles(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ProfileMins, error)
	Export(ctx context.Context, in *Query, opts ...grpc.CallOption) (ReportingService_ExportClient, error)
	//
	//Fetch a node
	//
	//Fetch a specific node by id.
	//Does not support filtering, pagination or sorting.
	ReadNode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error)
	//
	//List nodes
	//
	//List all nodes optionally using filters. Supports pagination, filtering, and sorting.
	//
	//| Sort paramter | Sort value |
	//| --- | --- |
	//| environment | environment.lower |
	//| latest_report.controls.failed.critical | controls_sums.failed.critical |
	//| latest_report.controls.failed.total | controls_sums.failed.total |
	//| latest_report.end_time (default) | end_time |
	//| latest_report.status | status |
	//| name | node_name.lower |
	//| platform | platform.full |
	//| status | status |
	ListNodes(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Nodes, error)
	GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*version.VersionInfo, error)
	LicenseUsageNodes(ctx context.Context, in *TimeQuery, opts ...grpc.CallOption) (*Reports, error)
}

type reportingServiceClient struct {
	cc *grpc.ClientConn
}

func NewReportingServiceClient(cc *grpc.ClientConn) ReportingServiceClient {
	return &reportingServiceClient{cc}
}

func (c *reportingServiceClient) ListReports(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Reports, error) {
	out := new(Reports)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.v1.ReportingService/ListReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListReportIds(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ReportIds, error) {
	out := new(ReportIds)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.v1.ReportingService/ListReportIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListControlItems(ctx context.Context, in *ControlItemRequest, opts ...grpc.CallOption) (*ControlItems, error) {
	out := new(ControlItems)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.v1.ReportingService/ListControlItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ReadReport(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.v1.ReportingService/ReadReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListSuggestions(ctx context.Context, in *SuggestionRequest, opts ...grpc.CallOption) (*Suggestions, error) {
	out := new(Suggestions)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.v1.ReportingService/ListSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListProfiles(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ProfileMins, error) {
	out := new(ProfileMins)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.v1.ReportingService/ListProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) Export(ctx context.Context, in *Query, opts ...grpc.CallOption) (ReportingService_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReportingService_serviceDesc.Streams[0], "/chef.automate.api.compliance.reporting.v1.ReportingService/Export", opts...)
	if err != nil {
		return nil, err
	}
	x := &reportingServiceExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReportingService_ExportClient interface {
	Recv() (*ExportData, error)
	grpc.ClientStream
}

type reportingServiceExportClient struct {
	grpc.ClientStream
}

func (x *reportingServiceExportClient) Recv() (*ExportData, error) {
	m := new(ExportData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reportingServiceClient) ReadNode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.v1.ReportingService/ReadNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ListNodes(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.v1.ReportingService/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*version.VersionInfo, error) {
	out := new(version.VersionInfo)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.v1.ReportingService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) LicenseUsageNodes(ctx context.Context, in *TimeQuery, opts ...grpc.CallOption) (*Reports, error) {
	out := new(Reports)
	err := c.cc.Invoke(ctx, "/chef.automate.api.compliance.reporting.v1.ReportingService/LicenseUsageNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingServiceServer is the server API for ReportingService service.
type ReportingServiceServer interface {
	//
	//List reports
	//
	//List all reports optionally using filters. Supports pagination, filtering, and sorting.
	//
	//| Sort paramter | Sort value |
	//| --- | --- |
	//| latest_report.controls.failed.critical | controls_sums.failed.critical |
	//| latest_report.controls.failed.total | controls_sums.failed.total |
	//| latest_report.end_time (default) | end_time |
	//| latest_report.status | status |
	//| node_name | node_name.lower |
	ListReports(context.Context, *Query) (*Reports, error)
	//
	//List report IDs
	//
	//List all report IDs optionally using filters. Supports filtering, but not pagination or sorting.
	//Including more than one value for `control`, `profile_id`, or `profile_name` is not allowed.
	//Including values for both `profile_id` and `profile_name` in one request is not allowed.
	ListReportIds(context.Context, *Query) (*ReportIds, error)
	//
	//List controls
	//
	//List all controls optionally using filters. Supports filtering, but not pagination or sorting.
	ListControlItems(context.Context, *ControlItemRequest) (*ControlItems, error)
	//
	//Fetch a report
	//
	//Fetch a specific report by id. Supports filtering, but not pagination or sorting.
	//Including more than one value for `profile_id` is not allowed.
	ReadReport(context.Context, *Query) (*Report, error)
	//
	//List suggestions
	//
	//Get suggestions for compliance reporting resources based on matching text substrings.
	//Supports filtering, but not pagination or sorting.
	//`type` parameter is required. It must be one of the parameters from the following table.
	//
	//| Suggestion type parameter | Suggestion type value |
	//| --- | --- |
	//| chef_server | source_fqdn |
	//| chef_tags | chef_tags |
	//| control | profiles.controls.title |
	//| control_tag_key | profiles.controls.string_tags.key |
	//| control_tag_value | profiles.controls.string_tags.values |
	//| environment | environment |
	//| inspec_version | version |
	//| node | node_name |
	//| organization | organization_name |
	//| platform | platform.name |
	//| platform_with_version | platform.full |
	//| policy_group | policy_group |
	//| policy_name | policy_name |
	//| profile | profiles.title |
	//| profile_with_version | profiles.full |
	//| recipe | recipes |
	//| role | roles |
	ListSuggestions(context.Context, *SuggestionRequest) (*Suggestions, error)
	//
	//List profiles
	//
	//List all profiles optionally using filters. Supports pagination, filtering, and sorting.
	//
	//| Sort paramter | Sort value |
	//| --- | --- |
	//| name | name.lower |
	//| title (default) | title.lower |
	ListProfiles(context.Context, *Query) (*ProfileMins, error)
	Export(*Query, ReportingService_ExportServer) error
	//
	//Fetch a node
	//
	//Fetch a specific node by id.
	//Does not support filtering, pagination or sorting.
	ReadNode(context.Context, *Id) (*Node, error)
	//
	//List nodes
	//
	//List all nodes optionally using filters. Supports pagination, filtering, and sorting.
	//
	//| Sort paramter | Sort value |
	//| --- | --- |
	//| environment | environment.lower |
	//| latest_report.controls.failed.critical | controls_sums.failed.critical |
	//| latest_report.controls.failed.total | controls_sums.failed.total |
	//| latest_report.end_time (default) | end_time |
	//| latest_report.status | status |
	//| name | node_name.lower |
	//| platform | platform.full |
	//| status | status |
	ListNodes(context.Context, *Query) (*Nodes, error)
	GetVersion(context.Context, *empty.Empty) (*version.VersionInfo, error)
	LicenseUsageNodes(context.Context, *TimeQuery) (*Reports, error)
}

// UnimplementedReportingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportingServiceServer struct {
}

func (*UnimplementedReportingServiceServer) ListReports(ctx context.Context, req *Query) (*Reports, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (*UnimplementedReportingServiceServer) ListReportIds(ctx context.Context, req *Query) (*ReportIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportIds not implemented")
}
func (*UnimplementedReportingServiceServer) ListControlItems(ctx context.Context, req *ControlItemRequest) (*ControlItems, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListControlItems not implemented")
}
func (*UnimplementedReportingServiceServer) ReadReport(ctx context.Context, req *Query) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadReport not implemented")
}
func (*UnimplementedReportingServiceServer) ListSuggestions(ctx context.Context, req *SuggestionRequest) (*Suggestions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuggestions not implemented")
}
func (*UnimplementedReportingServiceServer) ListProfiles(ctx context.Context, req *Query) (*ProfileMins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (*UnimplementedReportingServiceServer) Export(req *Query, srv ReportingService_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (*UnimplementedReportingServiceServer) ReadNode(ctx context.Context, req *Id) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNode not implemented")
}
func (*UnimplementedReportingServiceServer) ListNodes(ctx context.Context, req *Query) (*Nodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedReportingServiceServer) GetVersion(ctx context.Context, req *empty.Empty) (*version.VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedReportingServiceServer) LicenseUsageNodes(ctx context.Context, req *TimeQuery) (*Reports, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LicenseUsageNodes not implemented")
}

func RegisterReportingServiceServer(s *grpc.Server, srv ReportingServiceServer) {
	s.RegisterService(&_ReportingService_serviceDesc, srv)
}

func _ReportingService_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.v1.ReportingService/ListReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListReports(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListReportIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListReportIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.v1.ReportingService/ListReportIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListReportIds(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListControlItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListControlItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.v1.ReportingService/ListControlItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListControlItems(ctx, req.(*ControlItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ReadReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ReadReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.v1.ReportingService/ReadReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ReadReport(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.v1.ReportingService/ListSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListSuggestions(ctx, req.(*SuggestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.v1.ReportingService/ListProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListProfiles(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReportingServiceServer).Export(m, &reportingServiceExportServer{stream})
}

type ReportingService_ExportServer interface {
	Send(*ExportData) error
	grpc.ServerStream
}

type reportingServiceExportServer struct {
	grpc.ServerStream
}

func (x *reportingServiceExportServer) Send(m *ExportData) error {
	return x.ServerStream.SendMsg(m)
}

func _ReportingService_ReadNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ReadNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.v1.ReportingService/ReadNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ReadNode(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.v1.ReportingService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ListNodes(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.v1.ReportingService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GetVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_LicenseUsageNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).LicenseUsageNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.compliance.reporting.v1.ReportingService/LicenseUsageNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).LicenseUsageNodes(ctx, req.(*TimeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.compliance.reporting.v1.ReportingService",
	HandlerType: (*ReportingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReports",
			Handler:    _ReportingService_ListReports_Handler,
		},
		{
			MethodName: "ListReportIds",
			Handler:    _ReportingService_ListReportIds_Handler,
		},
		{
			MethodName: "ListControlItems",
			Handler:    _ReportingService_ListControlItems_Handler,
		},
		{
			MethodName: "ReadReport",
			Handler:    _ReportingService_ReadReport_Handler,
		},
		{
			MethodName: "ListSuggestions",
			Handler:    _ReportingService_ListSuggestions_Handler,
		},
		{
			MethodName: "ListProfiles",
			Handler:    _ReportingService_ListProfiles_Handler,
		},
		{
			MethodName: "ReadNode",
			Handler:    _ReportingService_ReadNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _ReportingService_ListNodes_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ReportingService_GetVersion_Handler,
		},
		{
			MethodName: "LicenseUsageNodes",
			Handler:    _ReportingService_LicenseUsageNodes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Export",
			Handler:       _ReportingService_Export_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "components/automate-gateway/api/compliance/reporting/reporting.proto",
}
