syntax = "proto3";

package chef.automate.api.compliance.reporting.v1;
option go_package = "github.com/chef/automate/components/automate-gateway/api/compliance/reporting";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "api/external/common/version/version.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service ReportingService {
	rpc ListReports(Query) returns (Reports) {
		option (google.api.http) = {
			post: "/compliance/reporting/reports"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:reports"
			action: "search"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:reports"
			action: "compliance:reports:list"
		};
	};

	rpc ListReportIds(Query) returns (ReportIds) {
		option (google.api.http) = {
			post: "/compliance/reporting/report-ids"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:report-ids"
			action: "search"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:report-ids"
			action: "compliance:reportids:list"
		};
	};

	// should cover /controls
	// This api is useful for getting a limited list of control items for latest runs.  It also honors all reporting filters
	rpc ListControlItems(ControlItemRequest) returns (ControlItems) {
		option (google.api.http) = {
   			post: "/compliance/reporting/controls"
   			body: "*"
   		};
		option (chef.automate.api.policy) = {
   			resource: "compliance:reporting:controls"
   			action: "search"
   		};
		option (chef.automate.api.iam.policy) = {
   			resource: "compliance:reporting:control"
   			action: "compliance:controlItems:list"
   		};
	};

	rpc ReadReport(Query) returns (Report) {
		option (google.api.http) = {
			post: "/compliance/reporting/reports/id/{id}"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:reports:{id}"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:reports:{id}"
			action: "compliance:reports:get"
		};
	};

	rpc ListSuggestions(SuggestionRequest) returns (Suggestions) {
		option (google.api.http) = {
			post: "/compliance/reporting/suggestions"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:suggestions"
			action: "search"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:suggestions"
			action: "compliance:reportSuggestions:list"
		};
	};

	rpc ListProfiles(Query) returns (ProfileMins) {
		option (google.api.http) = {
			post: "/compliance/reporting/profiles"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:profiles"
			action: "search"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:profiles"
			action: "compliance:reportProfiles:list"
		};
	};

	rpc Export(Query) returns (stream ExportData) {};

	rpc ReadNode(Id) returns (Node) {
		option (google.api.http) = {
			get: "/compliance/reporting/nodes/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:nodes:{id}"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:nodes:{id}"
			action: "compliance:reportNodes:get"
		};
	};

	rpc ListNodes(Query) returns (Nodes) {
		option (google.api.http) = {
			post: "/compliance/reporting/nodes/search"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:nodes"
			action: "search"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:nodes"
			action: "compliance:reportNodes:list"
		};
	};

	rpc GetVersion(google.protobuf.Empty) returns (common.version.VersionInfo) {
		option (google.api.http)  = {
			get: "/compliance/reporting/version"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:version"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "system:service:version"
			action: "system:serviceVersion:get"
		};
	};

	rpc LicenseUsageNodes(TimeQuery) returns (Reports) {
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:licenseusage"
			action: "list"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:licenseusage"
			action: "compliance:reportingLicenseUsage:list"
		};
	};
}

message ControlItemRequest {
	string text = 1;
	int32 size = 2;
	repeated ListFilter filters = 3;
}

message ControlItem {
	string id =1;
	string title=2;
	ProfileMin profile = 3;
	float impact = 4;
	google.protobuf.Timestamp end_time = 5;
	ControlSummary control_summary = 6;
}

message ControlItems {
	repeated ControlItem control_items = 1;
}

message TimeQuery {
	google.protobuf.Timestamp start_time = 1;
}

message ExportData {
	// The exported reports in the requested format
	bytes content = 1;
}

message Id {
	// The id of the node to fetch
	string id = 1;
}

message Query {
	// The id of a specific resource to fetch
	string id = 18;
	// The type of request being made ???
	string type = 19;
	// The list of filters used to narrow down the list
	repeated ListFilter filters = 20;
	// The two allowed values for ordering results
	enum OrderType {
		ASC = 0;
		DESC = 1;
	}
	// Whether to sort in ascending or descending order
	OrderType order = 21;
	// The field to sort by
	string sort = 22;
	// The offset to use when paginating requests
	int32 page = 23;
	// The number of results to return with each paginated request
	int32 per_page = 24;
}

// The list of filters used in the request.
message ListFilter {
	// The values to filter for
	repeated string values = 20;
	// The field to filter on
	string type = 21;
}

message Total {
	int32 total = 1;
}

message Failed {
	int32 total = 1;
	int32 minor = 2;
	int32 major = 3;
	int32 critical = 4;
}

message ControlSummary {
	int32 total = 1;
	Total passed = 2;
	Total skipped = 3;
	Failed failed = 4;
}

message Reports {
	repeated Report reports = 1;
	int32 total = 2;
}

message ReportIds {
	// The list of report ids found matching the query
	repeated string ids = 1;
}

message Report {
	string id = 1;
	string node_id = 2;
	string node_name = 3;
	google.protobuf.Timestamp end_time = 4;
	string status = 5;
	ControlSummary controls = 6;
	string environment = 7;
	string version = 8;
	Platform platform = 9;
	Statistics statistics = 10;
	repeated Profile profiles = 11;
	string job_id = 12;
	string ipaddress = 13;
	string fqdn = 14;
}

message Profile {
	string name = 1;
	string title = 2;
	string maintainer = 3;
	string copyright = 4;
	string copyright_email = 5;
	string license = 6;
	string summary = 7;
	string version = 8;
	string owner = 9;
	string full = 10;
	repeated Support supports = 16;
	repeated Dependency depends = 17;
	string sha256 = 18;
	repeated Group groups = 19;
	repeated Control controls = 20;
	repeated Attribute attributes = 21;
	string latest_version = 22;
	string status = 23;
	string skip_message = 24;
}

message Ref {
	string url = 1;
	string ref = 2;
}

message Result {
	string status = 1;
	string code_desc = 2;
	float run_time = 3;
	string start_time = 4;
	string message = 5;
	string skip_message = 6;
}

message SourceLocation {
	string ref = 1;
	int32 line = 2;
}

message Option {
	string description = 1;
	string default = 2 ;
}

message Support {
	string os_name = 1;
	string os_family = 2;
	string release = 3;
	string inspec_version = 4;
	string platform = 5;
}

message Dependency {
	string name = 1;
	string url = 2;
	string path = 3;
	string git = 4;
	string branch = 5;
	string tag = 6;
	string commit = 7;
	string version = 8;
	string supermarket = 9;
	string github = 10;
	string compliance = 11;
	string status = 12;
	string skip_message = 13;
}

message Group {
	string id = 1;
	string title = 2;
	repeated string controls = 3;
}

message Control {
	string id = 1;
	string code = 2;
	string desc = 3;
	float impact = 4;
	string title = 5;
	SourceLocation source_location = 6;
	repeated Result results = 7;
	repeated Ref refs = 8;
	map<string, string> tags = 9;
}

message Attribute {
	string name = 1;
	Option options = 2;
}

message Platform {
	string name = 1;
	string release = 2;
	string full = 3;
}

message Statistics {
	float duration = 1;
}

message SuggestionRequest {
	// The type of resource to get suggestions for
	string type = 1;
	// The term to use to match resources on 
	string text = 2;
	// The maximum number of suggestions to return
	int32 size = 3;
	// The criteria used to filter the suggestions returned.
	repeated ListFilter filters = 4;
}

message Suggestion {
	// The content that matched the search term
	string text = 1;
	// The id of the resource that was suggested
	string id = 2;
	// The confidence in the match quality
	float score = 3;
	// ???
	string version = 4;
}

message Suggestions {
	// The list of returned suggestions.
	repeated Suggestion suggestions = 1;
}

message ProfileMins {
	repeated ProfileMin profiles = 1;
	ProfileCounts counts = 2;
}
message ProfileCounts {
	int32 total = 1;
	int32 failed = 2;
	int32 skipped = 3;
	int32 passed = 4;
}

message ProfileMin {
	string name = 1;
	string title = 2;
	string id = 3;
	string version = 4;
	string status = 5;
}

message Node {
	string id = 1;
	string name = 2;
	Platform platform = 3;
	string environment = 4;
	LatestReportSummary latest_report = 8;
	repeated Kv tags = 9;
	repeated ProfileMeta profiles = 10;
}

message Nodes {
	repeated Node nodes = 1;
	int32 total = 20;
	int32 total_passed = 21;
	int32 total_failed = 22;
	int32 total_skipped = 23;
}

message Kv {
	string key = 1;
	string value = 2;
}

message LatestReportSummary {
	string id = 1;
	google.protobuf.Timestamp end_time = 2;
	string status = 3;
	ControlSummary controls = 4;
}

message ProfileMeta {
	string name = 1;
	string version = 2;
	string id = 3;
	string status = 4;
	string full = 5;
}
