syntax = "proto3";

package chef.automate.api.compliance.reporting.stats.v1;
option go_package = "github.com/chef/automate/components/automate-gateway/api/compliance/reporting/stats";

import "google/api/annotations.proto";
// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";
import "components/automate-gateway/api/compliance/reporting/reporting.proto";

service StatsService {
	// should cover /summary, /summary/nodes, /summary/controls
	rpc ReadSummary(Query) returns (Summary) {
		option (google.api.http) = {
			post: "/compliance/reporting/stats/summary"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:stats:summary"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:stats:summary"
			action: "compliance:reportSummary:get"
		};
	};
	// should cover /trend/nodes, /trend/controls
	rpc ReadTrend(Query) returns (Trends) {
		option (google.api.http) = {
			post: "/compliance/reporting/stats/trend"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:stats:trend"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:stats:trend"
			action: "compliance:reportTrend:get"
		};
	};
	// should cover /profiles, profiles/:profile-id/summary, profiles/:profile-id/controls
	rpc ReadProfiles(Query) returns (Profile) {
		option (google.api.http) = {
			post: "/compliance/reporting/stats/profiles"
			body: "*"
		};
		// i could see making this compliance:reporting:stats:profiles:{profile-id},
		// however iirc auth does not support params that may or may not exist...
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:stats:profiles"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:stats:profiles"
			action: "compliance:reportProfiles:get"
		};
	};
	rpc ReadFailures(Query) returns (Failures) {
		option (google.api.http) = {
			post: "/compliance/reporting/stats/failures"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "compliance:reporting:stats:failures"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "compliance:reporting:stats:failures"
			action: "compliance:reportFailures:get"
		};
	};
}

message Empty {}

message ListFilter {
	repeated string values = 20;
	string type = 21;
}

message Query {
	string id = 17;
	string type = 19;
	int32 size = 18;
	int32 interval = 25;
	repeated ListFilter filters = 20;
	enum OrderType {
		ASC = 0;
		DESC = 1;
	}
	OrderType order = 21;
	string sort = 22;
	int32 page = 23;
	int32 per_page = 24;
}

message Summary {
	ControlsSummary controls_summary = 1;
	NodeSummary node_summary = 2;
	ReportSummary report_summary = 3;
}

message ControlsSummary {
	int32 failures = 1;
	int32 majors = 2;
	int32 minors = 3;
	int32 criticals = 4;
	int32 passed = 5;
	int32 skipped = 6;
}

message NodeSummary {
	int32 compliant = 1;
	int32 skipped = 2;
	int32 noncompliant = 3;
	int32 high_risk = 4;
	int32 medium_risk = 5;
	int32 low_risk = 6;
}

message Stats {
	//int64 types render into string types when serialized to satisfy all browsers
	//we don't really need for nodes counts to be int64 as int32 limits us to 2billion nodes which is plenty for now
	//we are therefore deprecating nodes and favor nodesCnt
	int64 nodes = 1 [deprecated = true];
	int32 platforms = 2;
	int32 environments = 3;
	int32 profiles = 4;
	int32 nodes_cnt = 5;
	int32 controls = 6;
}

message ReportSummary {
	Stats stats = 4;
	string status = 1;
	double duration = 2;
	string start_date = 3;
}

message Trend {
	string report_time = 1;
	int32 passed = 2;
	int32 failed = 3;
	int32 skipped = 4;
}

message Trends {
	repeated Trend trends = 1;
}

message Profile {
	repeated ProfileList profile_list = 1;
	ProfileSummary profile_summary = 2;
	repeated ControlStats control_stats = 3;
}

message ProfileList {
	string name = 1;
	string id = 2;
	int32 failures = 3;
	int32 majors = 4;
	int32 minors = 5;
	int32 criticals = 6;
	int32 passed = 7;
	int32 skipped = 8;
}

message ProfileSummary {
	string name = 1;
	string title = 2;
	string version = 3;
	string license = 4;
	string maintainer = 5;
	string copyright = 6;
	string copyright_email = 7;
	string summary = 8;
	repeated Support supports = 9;
	ProfileSummaryStats stats = 10;
	repeated chef.automate.api.compliance.reporting.v1.Dependency depends = 11;
}

message ProfileSummaryStats {
	int32 failed = 1;
	int32 passed = 2;
	int32 skipped = 3;
	int32 failed_nodes = 4;
	int32 total_nodes = 5;
}

message ControlStats {
	string control = 1;
	string title = 2;
	int32 passed = 3;
	int32 failed = 4;
	int32 skipped = 5;
	float impact = 6;
}

message Support {
	string os_name = 1 [json_name = "os-name"];
	string os_family = 2 [json_name = "os-family"];
	string release = 3;
	string inspec_version = 4;
	string platform_name = 5 [json_name = "platform-name"];
	string platform_family = 6 [json_name = "platform-family"];
	string platform = 7;
}

message Failures {
	repeated FailureSummary profiles = 1;
	repeated FailureSummary platforms = 2;
	repeated FailureSummary controls = 3;
	repeated FailureSummary environments = 4;
}

message FailureSummary {
	string name = 1;
	int32 failures = 2;
	string id = 3;
	string profile = 4;
}
