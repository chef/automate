syntax = "proto3";

package chef.automate.api.event_feed;
option go_package = "github.com/chef/automate/components/automate-gateway/api/event_feed";

import "components/automate-gateway/api/event_feed/request/event.proto";
import "components/automate-gateway/api/event_feed/request/eventstrings.proto";
import "components/automate-gateway/api/event_feed/response/event.proto";
import "components/automate-gateway/api/event_feed/response/eventstrings.proto";

import "google/api/annotations.proto";
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

service EventFeed {
  rpc GetEventFeed(event_feed.request.EventFilter) returns (event_feed.response.Events) {
    option (google.api.http).get =  "/api/v0/eventfeed";
    // event feed includes compliance and cfg mgmt events
    option (chef.automate.api.iam.policy).resource = "event:events";
    option (chef.automate.api.iam.policy).action = "event:events:list";
  };
  rpc GetEventTypeCounts(request.EventCountsFilter) returns (response.EventCounts) {
    option (google.api.http).get =  "/api/v0/event_type_counts";
    option (chef.automate.api.iam.policy).resource = "event:events";
    option (chef.automate.api.iam.policy).action = "event:events:list";
  };
  rpc GetEventTaskCounts(request.EventCountsFilter) returns (response.EventCounts) {
    option (google.api.http).get =  "/api/v0/event_task_counts";
    option (chef.automate.api.iam.policy).resource = "event:events";
    option (chef.automate.api.iam.policy).action = "event:events:list";
  };
  rpc GetEventStringBuckets(request.EventStrings) returns (response.EventStrings) {
    option (google.api.http).get = "/api/v0/eventstrings";
    option (chef.automate.api.iam.policy).resource = "event:events";
    option (chef.automate.api.iam.policy).action = "event:events:list";
  };
}
