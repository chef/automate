syntax = "proto3";

package chef.automate.api.authz;
option go_package = "github.com/chef/automate/components/automate-gateway/api/authz";

import "google/api/annotations.proto";

import "api/external/common/version/version.proto";
import "components/automate-gateway/api/authz/request/authz.proto";
import "components/automate-gateway/api/authz/response/authz.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";
service Authorization {
  rpc GetVersion (common.version.VersionInfoRequest) returns (common.version.VersionInfo) {
    option (google.api.http).get = "/auth/policies/version";
    option (chef.automate.api.policy).resource = "service_info:version";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "system:service:version";
    option (chef.automate.api.iam.policy).action = "system:serviceVersion:get";
    };
  rpc CreatePolicy (authz.request.CreatePolicyReq) returns (authz.response.CreatePolicyResp) {
    option (google.api.http).post = "/auth/policies";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth:policies";
    option (chef.automate.api.policy).action = "create";
    option (chef.automate.api.iam.policy).resource = "iam:policies";
    option (chef.automate.api.iam.policy).action = "iam:policies:create";
    };
  rpc ListPolicies (authz.request.ListPoliciesReq) returns (authz.response.ListPoliciesResp) {
    option (google.api.http).get = "/auth/policies";
    option (chef.automate.api.policy).resource = "auth:policies";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:policies";
    option (chef.automate.api.iam.policy).action = "iam:policies:list";
    };
  rpc DeletePolicy (authz.request.DeletePolicyReq) returns (authz.response.DeletePolicyResp) {
    option (google.api.http).delete = "/auth/policies/{id}";
    option (chef.automate.api.policy).resource = "auth:policies:{id}";
    option (chef.automate.api.policy).action = "delete";
    option (chef.automate.api.iam.policy).resource = "iam:policies:{id}";
    option (chef.automate.api.iam.policy).action = "iam:policies:delete";
    };
  rpc IntrospectAll (authz.request.IntrospectAllReq) returns (authz.response.IntrospectResp) {
    option (google.api.http).get = "/auth/introspect";
    option (chef.automate.api.policy).resource = "auth_introspection:introspect_all";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:introspect";
    option (chef.automate.api.iam.policy).action = "iam:introspect:getAll";
    };
  rpc IntrospectSome (authz.request.IntrospectSomeReq) returns (authz.response.IntrospectResp) {
    option (google.api.http).post = "/auth/introspect_some";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth_introspection:introspect_some";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:introspect";
    option (chef.automate.api.iam.policy).action = "iam:introspect:getSome";
    };
  rpc Introspect (authz.request.IntrospectReq) returns (authz.response.IntrospectResp) {
    option (google.api.http).post = "/auth/introspect";
    option (google.api.http).body = "*";
    option (chef.automate.api.policy).resource = "auth_introspection:introspect";
    option (chef.automate.api.policy).action = "read";
    option (chef.automate.api.iam.policy).resource = "iam:introspect";
    option (chef.automate.api.iam.policy).action = "iam:introspect:get";
    };
}
