syntax = "proto3";

package chef.automate.api.nodes.v1;
option go_package = "github.com/chef/automate/components/automate-gateway/api/nodes";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

import "components/compliance-service/api/common/common.proto";

service NodesService {
	rpc Create(Node) returns (Id) {
		option (google.api.http) = {
			post: "/nodes"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes"
			action: "create"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes"
			action: "infra:nodes:create"
		};
	};
	rpc Read(Id) returns (Node) {
		option (google.api.http) = {
			get: "/nodes/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes:{id}"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes:{id}"
			action: "infra:nodes:get"
		};
	};
	rpc Update(Node) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			put: "/nodes/id/{id}"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes:{id}"
			action: "update"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes:{id}"
			action: "infra:nodes:update"
		};
	};
	rpc Delete(Id) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/nodes/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes:{id}"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes:{id}"
			action: "infra:nodes:delete"
		};
	};
	rpc BulkDeleteById(Ids) returns (BulkDeleteResponse) {
		option (google.api.http) = {
			post: "/nodes/delete/ids"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes"
			action: "infra:nodes:delete"
		};
	};
	rpc List(Query) returns (Nodes) {
		option (google.api.http) = {
			post: "/nodes/search"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes"
			action: "list"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes"
			action: "infra:nodes:list"
		};
	};
	rpc Rerun(Id) returns (RerunResponse) {
		option (google.api.http) = {
			get: "/nodes/rerun/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes:{id}"
			action: "rerun"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes:{id}"
			action: "infra:nodes:rerun"
		};
	};
	rpc BulkDelete(Query) returns (BulkDeleteResponse) {
		option (google.api.http) = {
			post: "/nodes/delete"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes"
			action: "infra:nodes:delete"
		};
	};
	rpc BulkCreate(Nodes) returns (Ids) {
		option (google.api.http) = {
			post: "/nodes/bulk-create"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes"
			action: "create"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes"
			action: "infra:nodes:create"
		};
	};

}

message Id {
	string id = 1;
}

message Ids {
	repeated string ids = 1;
}

message RerunResponse {}

message Query {
	repeated chef.automate.domain.compliance.api.common.Filter filters = 20;
	enum OrderType {
		ASC = 0;
		DESC = 1;
	}
	OrderType order = 21;
	string sort = 22;
	int32 page = 23;
	int32 per_page = 24;
}

message TargetConfig {
	repeated string secrets = 20;
	string format = 21;
	string backend = 22;
	string host = 23;
	int32 port = 24;
	string path = 25;
	bool sudo = 26;
	bool ssl = 27;
	bool self_signed = 28;
	string user = 29;
	repeated string key_files = 31;
	string sudo_options = 33;
	string region = 34;
	string subscription_id = 35;
	repeated string hosts = 40;
}

message Node {
	string id = 1;
	string name = 2;
	string platform = 3;
	string platform_version = 4;
	string manager = 5;
	repeated chef.automate.domain.compliance.api.common.Kv tags = 20;
	google.protobuf.Timestamp last_contact = 21;
	string status = 22;
	ResultsRow last_job = 23;
	TargetConfig target_config = 99;
	repeated string manager_ids = 24;
	string connection_error = 25;
	string state = 26;
	string name_prefix = 27;
	repeated string projects = 28;
	LastContactData run_data = 29;
	LastContactData scan_data = 30;
}

message LastContactData {
	string id = 1; // run id or report id
	enum Status {
		UNKNOWN = 0;
		PASSED = 1;
		FAILED = 2;
		SKIPPED = 3;
	}
	Status status = 2;
	Status penultimate_status = 3;
	google.protobuf.Timestamp end_time = 4;
}

message Nodes {
	repeated Node nodes = 1;
	int32 total = 20;
	int32 total_unreachable = 21;
	int32 total_reachable = 22;
	int32 total_unknown = 23;
}

message ResultsRow {
	string node_id = 1;
	string report_id = 2;
	string status = 3;
	string result = 4;
	string job_id = 5;
	google.protobuf.Timestamp start_time = 20;
	google.protobuf.Timestamp end_time = 21;
}

message BulkDeleteResponse {
	repeated string names = 1;
}
