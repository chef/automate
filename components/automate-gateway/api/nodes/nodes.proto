syntax = "proto3";

package chef.automate.api.nodes.v1;
option go_package = "github.com/chef/automate/components/automate-gateway/api/nodes";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// for option (chef.automate.api.policy)
import "components/automate-grpc/protoc-gen-policy/api/annotations.proto";
// for option (chef.automate.api.iam.policy)
import "components/automate-grpc/protoc-gen-policy/iam/annotations.proto";

import "components/compliance-service/api/common/common.proto";

service NodesService {
	/*
	Create a node

	Creates a node and adds it to the "Automate" node manager.
	Requires a FQDN or IP address, a user-specified name, and a ssh or winrm credential reference.
	Useful for creating nodes for the purpose of running compliance scan jobs.
	*/
	rpc Create(Node) returns (Id) {
		option (google.api.http) = {
			post: "/nodes"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes"
			action: "create"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes"
			action: "infra:nodes:create"
		};
	};

	/*
	Read a node

	Returns the details for a node given the node id.
	*/
	rpc Read(Id) returns (Node) {
		option (google.api.http) = {
			get: "/nodes/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes:{id}"
			action: "read"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes:{id}"
			action: "infra:nodes:get"
		};
	};

	/*
	Update a node

	Updates node information, such as the name, FQDN, tags, or associated credentials.
	Please note that this is a PUT operation, so all node details included in the create function
	should be included in the PUT message to update.
	*/
	rpc Update(Node) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			put: "/nodes/id/{id}"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes:{id}"
			action: "update"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes:{id}"
			action: "infra:nodes:update"
		};
	};

	/*
	Delete a node

	Deletes the node with the node id.
	*/
	rpc Delete(Id) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/nodes/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes:{id}"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes:{id}"
			action: "infra:nodes:delete"
		};
	};

	/*
	Bulk delete by id

	Deletes a set of nodes that match a list of ids.
	*/
	rpc BulkDeleteById(Ids) returns (BulkDeleteResponse) {
		option (google.api.http) = {
			post: "/nodes/delete/ids"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes"
			action: "infra:nodes:delete"
		};
	};

	/*
	List nodes

	Makes a list of nodes. 
	Supports filtering, pagination, and sorting.
	Adding a filter makes a list of nodes that meet the filter criteria.
	Supported filters are: 
	account_id, last_contact, manager_id, manager_type, name, platform_name,
	platform_release, region, source_id, state, statechange_timerange, status,
	last_run_timerange, last_scan_timerange, last_run_status, last_scan_status,
	last_run_penultimate_status, last_scan_penultimate_status
	*/
	rpc List(Query) returns (Nodes) {
		option (google.api.http) = {
			post: "/nodes/search"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes"
			action: "list"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes"
			action: "infra:nodes:list"
		};
	};

	/*
	Rerun a node

	Runs an `inspec detect` job on the node and updates the status to reflect
	the status of the node accordingly (reachable or unreachable).
	*/
	rpc Rerun(Id) returns (RerunResponse) {
		option (google.api.http) = {
			get: "/nodes/rerun/id/{id}"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes:{id}"
			action: "rerun"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes:{id}"
			action: "infra:nodes:rerun"
		};
	};

	/*
	Bulk delete

	Deletes a set of nodes that match a filter. 
		account_id, last_contact, manager_id, manager_type, name, platform_name,
	platform_release, region, source_id, state, statechange_timerange, status,
	last_run_timerange, last_scan_timerange, last_run_status, last_scan_status,
	last_run_penultimate_status, last_scan_penultimate_status
	*/
	rpc BulkDelete(Query) returns (BulkDeleteResponse) {
		option (google.api.http) = {
			post: "/nodes/delete"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes"
			action: "delete"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes"
			action: "infra:nodes:delete"
		};
	};

	/*
	Bulk create nodes

	Creates multiple nodes from a list of node data.
	*/
	rpc BulkCreate(Nodes) returns (Ids) {
		option (google.api.http) = {
			post: "/nodes/bulk-create"
			body: "*"
		};
		option (chef.automate.api.policy) = {
			resource: "nodes"
			action: "create"
		};
		option (chef.automate.api.iam.policy) = {
			resource: "infra:nodes"
			action: "infra:nodes:create"
		};
	};

}

message Id {
	// Unique node id (UUID)
	string id = 1;
}

message Ids {
	// List of node UUIDs.
	repeated string ids = 1;
}

message RerunResponse {}

message Query {
	// Filters to be applied to the query.
	repeated chef.automate.domain.compliance.api.common.Filter filters = 20;
	enum OrderType {
		ASC = 0;
		DESC = 1;
	}
	// Return the results in ascending or descending order.
	OrderType order = 21;
	// Sort the results on a specific field.
	string sort = 22;
	// Page number of results to return.
	int32 page = 23;
	// Count of results that should be returned for each page.
	int32 per_page = 24;
}

// Details for ssh/winrm access of the node.
message TargetConfig {
	// List of credential ids to associate with the node.
	repeated string secrets = 20;
	// Details for the node backend (ssh, winrm, aws, ssm, azure, gcp).
	string backend = 22;
	// FQDN or IP address for the node.
	string host = 23;
	// Port used to connect to the node via ssh/winrm.
	int32 port = 24;
	// Boolean to denote whether or not sudo should be used when accessing the node.
	bool sudo = 26;
	// Boolean to denote whether or not ssl should be checked when accessing the node.
	bool ssl = 27;
	// Boolean to denote whether or not self signed certificate should be allowed when accessing the node.
	bool self_signed = 28;
	// Username used to access the node (taken from credential id associated with node).
	string user = 29;
	// Sudo options to use when accessing the node.
	string sudo_options = 33;
	// List of hostnames (fqdn or ip address) for nodes to be created with bulk create.
	repeated string hosts = 40;
}

// Node information.
message Node {
	// UUID for the node.
	string id = 1;
	// User-specified name for the node.
	string name = 2;
	// Platform for the node.
	string platform = 3;
	// Platform version for the node.
	string platform_version = 4;
	// Manager associated with the node (automate, aws-ec2, aws-api, azure-vm, azure-api, gcp).
	string manager = 5;
	// Tags to be applied to the node.
	repeated chef.automate.domain.compliance.api.common.Kv tags = 20;
	// End time from the most recent `detect` or `exec` job.
	google.protobuf.Timestamp last_contact = 21;
	// Status of the node (unreachable, reachable, unknown).
	string status = 22;
	// Details from the most recent scan job that executed for the node.
	ResultsRow last_job = 23;
	// Details for ssh/winrm access of the node.
	TargetConfig target_config = 99;
	// List of manager ids associated with the node.
	repeated string manager_ids = 24;
	// Most recent connection error received from attempting to contact the node.
	string connection_error = 25;
	// Last known state of the node (running, stopped, terminated).
	string state = 26;
	// Name prefix to attach to the node. The full node name is constructed based off the prefix and the host.
	string name_prefix = 27;
	// List of projects associated with the node. Projects are a concept introduced in IAMv2.
	repeated string projects = 28;
	// Most recent run data for the node, taken from the most recent infra run for the node. 
	LastContactData run_data = 29;
	// Most recent scan data for the node, taken from the most recent InSpec scan executed on the node. 
	LastContactData scan_data = 30;
}

// Most recent run or scan data for the node, taken from the most recent Infra run or InSpec scan executed on the node. 
message LastContactData {
	// Infra run report id or InSpec scan report id.
	string id = 1;
	enum Status {
		UNKNOWN = 0;
		PASSED = 1;
		FAILED = 2;
		SKIPPED = 3;
	}
	// Status on the last report for the node.
	Status status = 2;
	// Status on the next-to-last report for the node.
	Status penultimate_status = 3;
	// Endtime on the most recent report for the node.
	google.protobuf.Timestamp end_time = 4;
}

message Nodes {
	// List of node objects.
	repeated Node nodes = 1;
	// Total count of nodes in the system.
	int32 total = 20;
	// Total count of unreachable nodes in the system.
	int32 total_unreachable = 21;
	// Total count of reachable nodes in the system.
	int32 total_reachable = 22;
	// Total count of unknown nodes in the system.
	int32 total_unknown = 23;
}

// Details from the most recent scan job that executed for the node.
message ResultsRow {
	// Node id for the result.
	string node_id = 1;
	// Report id for the result.
	string report_id = 2;
	// Status of the report.
	string status = 3;
	// Error message on failed attempts to reach a node.
	string result = 4;
	// Job id from the report.
	string job_id = 5;
	// Start time on the report.
	google.protobuf.Timestamp start_time = 20;
	// End time on the report.
	google.protobuf.Timestamp end_time = 21;
}

message BulkDeleteResponse {
	// List of names of nodes created.
	repeated string names = 1;
}
