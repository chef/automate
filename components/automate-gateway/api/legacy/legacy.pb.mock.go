// Code generated by protoc-gen-grpc-mock. DO NOT EDIT.
// source: automate-gateway/api/legacy/legacy.proto

package legacy

import (
	"context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// verify that the mock satisfies the LegacyDataCollectorServer interface (at compile time)
var _ LegacyDataCollectorServer = &LegacyDataCollectorServerMock{}

// NewLegacyDataCollectorServerMock gives you a fresh instance of LegacyDataCollectorServerMock.
func NewLegacyDataCollectorServerMock() *LegacyDataCollectorServerMock {
	return &LegacyDataCollectorServerMock{validateRequests: true}
}

// NewLegacyDataCollectorServerMockWithoutValidation gives you a fresh instance of
// LegacyDataCollectorServerMock which does not attempt to validate requests before passing
// them to their respective '*Func'.
func NewLegacyDataCollectorServerMockWithoutValidation() *LegacyDataCollectorServerMock {
	return &LegacyDataCollectorServerMock{}
}

// LegacyDataCollectorServerMock is the mock-what-you-want struct that stubs all not-overridden
// methods with "not implemented" returns
type LegacyDataCollectorServerMock struct {
	validateRequests bool
	StatusFunc       func(context.Context, *emptypb.Empty) (*StatusResponse, error)
}

func (m *LegacyDataCollectorServerMock) Status(ctx context.Context, req *emptypb.Empty) (*StatusResponse, error) {
	if msg, ok := interface{}(req).(interface{ Validate() error }); m.validateRequests && ok {
		if err := msg.Validate(); err != nil {
			return nil, status.Error(codes.InvalidArgument, err.Error())
		}
	}
	if f := m.StatusFunc; f != nil {
		return f(ctx, req)
	}
	return nil, status.Error(codes.Internal, "mock: 'Status' not implemented")
}

// Reset resets all overridden functions
func (m *LegacyDataCollectorServerMock) Reset() {
	m.StatusFunc = nil
}
