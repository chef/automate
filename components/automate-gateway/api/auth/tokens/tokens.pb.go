// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/automate-gateway/api/auth/tokens/tokens.proto

package tokens

import (
	context "context"
	fmt "fmt"
	request "github.com/chef/automate/components/automate-gateway/api/auth/tokens/request"
	response "github.com/chef/automate/components/automate-gateway/api/auth/tokens/response"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/api"
	_ "github.com/chef/automate/components/automate-grpc/protoc-gen-policy/iam"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("components/automate-gateway/api/auth/tokens/tokens.proto", fileDescriptor_b3414991a1bcc87b)
}

var fileDescriptor_b3414991a1bcc87b = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xbf, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0x15, 0x40, 0xa7, 0xc3, 0x57, 0xb5, 0xc4, 0x87, 0x50, 0x14, 0x31, 0x65, 0x40, 0x50,
	0x29, 0x8e, 0x54, 0x16, 0x94, 0x89, 0x1f, 0x15, 0x4c, 0x2c, 0x15, 0x48, 0x88, 0x05, 0xb9, 0xc9,
	0x6b, 0xce, 0x6a, 0x12, 0xbb, 0x89, 0x23, 0x54, 0x21, 0x96, 0x8c, 0xb7, 0xb2, 0xf3, 0x5f, 0x64,
	0x67, 0x60, 0x65, 0x42, 0x62, 0x62, 0xe4, 0x0f, 0x41, 0xb1, 0x9b, 0x6b, 0xd2, 0xa4, 0xbd, 0x64,
	0x3a, 0xdd, 0xf3, 0xf7, 0x7d, 0xed, 0xcf, 0x7b, 0x2f, 0x0f, 0x3d, 0x0b, 0x78, 0x22, 0x78, 0x0a,
	0xa9, 0xcc, 0x3d, 0x5a, 0x48, 0x9e, 0x50, 0x09, 0x6e, 0x44, 0x25, 0x7c, 0xa6, 0xe7, 0x1e, 0x15,
	0xac, 0x0e, 0xae, 0x3c, 0xc9, 0x4f, 0x21, 0xcd, 0x2f, 0x7e, 0x88, 0xc8, 0xb8, 0xe4, 0xd8, 0x0a,
	0x56, 0x70, 0x42, 0x9a, 0x1c, 0x42, 0x05, 0x23, 0xfa, 0xdc, 0x7e, 0x18, 0x71, 0x1e, 0xc5, 0xa0,
	0xd3, 0xd3, 0x94, 0x4b, 0x2a, 0x19, 0x6f, 0xf2, 0xec, 0xe7, 0x53, 0x6e, 0xcc, 0xe0, 0xac, 0x80,
	0x5c, 0x76, 0x6e, 0xb6, 0x5f, 0x4c, 0x73, 0xc8, 0x05, 0x4f, 0x73, 0xe8, 0x5a, 0x0c, 0x3f, 0x22,
	0x13, 0x81, 0xa7, 0xce, 0x03, 0x37, 0x82, 0xd4, 0x15, 0x3c, 0x66, 0xc1, 0xf9, 0x24, 0x8c, 0x61,
	0x07, 0x46, 0x93, 0xbe, 0xc3, 0xc1, 0xf7, 0x39, 0x42, 0xef, 0xd4, 0xa3, 0xde, 0x46, 0x89, 0xc4,
	0x3f, 0x0c, 0x74, 0xf7, 0x0d, 0x48, 0x1d, 0xc1, 0x84, 0x5c, 0x57, 0x5e, 0x72, 0x51, 0x13, 0xb2,
	0x11, 0x1f, 0xc1, 0x99, 0xfd, 0xe4, 0x26, 0xbd, 0xae, 0x00, 0xd1, 0x6a, 0xe7, 0x43, 0x59, 0x59,
	0x26, 0xda, 0xab, 0x8b, 0xe4, 0x53, 0xc1, 0x3e, 0x69, 0x59, 0x59, 0x59, 0x33, 0x7c, 0x27, 0x03,
	0x1a, 0xae, 0x2b, 0x6b, 0x07, 0x21, 0x46, 0x13, 0x5f, 0x9f, 0xac, 0x2b, 0xcb, 0xc4, 0x7b, 0x97,
	0xff, 0xfd, 0x98, 0xe5, 0xb2, 0xfc, 0xfd, 0xef, 0xdb, 0xad, 0x5d, 0xbc, 0xd3, 0xae, 0x35, 0xfe,
	0x65, 0xa0, 0xc5, 0xab, 0x0c, 0xa8, 0x04, 0x75, 0x15, 0x76, 0xb7, 0x43, 0xb4, 0xe4, 0xf6, 0xe3,
	0xb1, 0x0c, 0x0e, 0x5c, 0x87, 0x30, 0xc7, 0xb3, 0x40, 0x39, 0x0e, 0x40, 0x2c, 0xb1, 0xd9, 0x82,
	0xd0, 0x32, 0x8d, 0xe1, 0x74, 0x30, 0x54, 0xec, 0xb6, 0x6f, 0xec, 0xe3, 0xbf, 0x06, 0x5a, 0xbc,
	0x17, 0xe1, 0x14, 0x9e, 0x96, 0x7c, 0x02, 0x8f, 0x2c, 0x2b, 0xeb, 0x01, 0xba, 0x7f, 0x85, 0xc7,
	0xff, 0xc2, 0xc2, 0xaf, 0x1a, 0xaa, 0x50, 0xb6, 0x6b, 0x45, 0xdd, 0x82, 0xa8, 0x05, 0x3d, 0x32,
	0xad, 0x55, 0x14, 0x4b, 0xdb, 0xec, 0x7c, 0x0c, 0xca, 0x70, 0x83, 0xf7, 0xd3, 0x40, 0xf3, 0x66,
	0x88, 0xf0, 0xa3, 0x11, 0x6c, 0x05, 0x0b, 0x27, 0x40, 0x9d, 0xdc, 0x08, 0x75, 0x39, 0x6c, 0x83,
	0x48, 0xf7, 0xf0, 0x6e, 0x2b, 0x18, 0x81, 0x1e, 0xb8, 0x25, 0xee, 0xf3, 0xe0, 0x3f, 0x06, 0x5a,
	0x1c, 0x42, 0x0c, 0x4d, 0x97, 0xc6, 0x92, 0x1c, 0x8c, 0x20, 0x69, 0xf9, 0x1e, 0x41, 0x2e, 0x9c,
	0xd3, 0x6d, 0x8d, 0x0a, 0x55, 0xc2, 0xb8, 0x46, 0x69, 0xad, 0x06, 0xdb, 0xef, 0x83, 0xbd, 0x7c,
	0xfd, 0xf1, 0x30, 0x62, 0x72, 0x55, 0x1c, 0x93, 0x80, 0x27, 0x5e, 0xfd, 0xd8, 0xcd, 0xa6, 0xf1,
	0x26, 0xac, 0xc0, 0xe3, 0x99, 0xda, 0x37, 0x4f, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x0f,
	0x03, 0x91, 0xec, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TokensMgmtClient is the client API for TokensMgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokensMgmtClient interface {
	GetTokens(ctx context.Context, in *request.GetTokensReq, opts ...grpc.CallOption) (*response.Tokens, error)
	CreateToken(ctx context.Context, in *request.CreateToken, opts ...grpc.CallOption) (*response.Token, error)
	UpdateToken(ctx context.Context, in *request.UpdateToken, opts ...grpc.CallOption) (*response.Token, error)
	GetToken(ctx context.Context, in *request.Uuid, opts ...grpc.CallOption) (*response.Token, error)
	DeleteToken(ctx context.Context, in *request.Uuid, opts ...grpc.CallOption) (*response.DeleteTokenResp, error)
}

type tokensMgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewTokensMgmtClient(cc grpc.ClientConnInterface) TokensMgmtClient {
	return &tokensMgmtClient{cc}
}

func (c *tokensMgmtClient) GetTokens(ctx context.Context, in *request.GetTokensReq, opts ...grpc.CallOption) (*response.Tokens, error) {
	out := new(response.Tokens)
	err := c.cc.Invoke(ctx, "/chef.automate.api.tokens.TokensMgmt/GetTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensMgmtClient) CreateToken(ctx context.Context, in *request.CreateToken, opts ...grpc.CallOption) (*response.Token, error) {
	out := new(response.Token)
	err := c.cc.Invoke(ctx, "/chef.automate.api.tokens.TokensMgmt/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensMgmtClient) UpdateToken(ctx context.Context, in *request.UpdateToken, opts ...grpc.CallOption) (*response.Token, error) {
	out := new(response.Token)
	err := c.cc.Invoke(ctx, "/chef.automate.api.tokens.TokensMgmt/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensMgmtClient) GetToken(ctx context.Context, in *request.Uuid, opts ...grpc.CallOption) (*response.Token, error) {
	out := new(response.Token)
	err := c.cc.Invoke(ctx, "/chef.automate.api.tokens.TokensMgmt/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensMgmtClient) DeleteToken(ctx context.Context, in *request.Uuid, opts ...grpc.CallOption) (*response.DeleteTokenResp, error) {
	out := new(response.DeleteTokenResp)
	err := c.cc.Invoke(ctx, "/chef.automate.api.tokens.TokensMgmt/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokensMgmtServer is the server API for TokensMgmt service.
type TokensMgmtServer interface {
	GetTokens(context.Context, *request.GetTokensReq) (*response.Tokens, error)
	CreateToken(context.Context, *request.CreateToken) (*response.Token, error)
	UpdateToken(context.Context, *request.UpdateToken) (*response.Token, error)
	GetToken(context.Context, *request.Uuid) (*response.Token, error)
	DeleteToken(context.Context, *request.Uuid) (*response.DeleteTokenResp, error)
}

// UnimplementedTokensMgmtServer can be embedded to have forward compatible implementations.
type UnimplementedTokensMgmtServer struct {
}

func (*UnimplementedTokensMgmtServer) GetTokens(ctx context.Context, req *request.GetTokensReq) (*response.Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (*UnimplementedTokensMgmtServer) CreateToken(ctx context.Context, req *request.CreateToken) (*response.Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedTokensMgmtServer) UpdateToken(ctx context.Context, req *request.UpdateToken) (*response.Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (*UnimplementedTokensMgmtServer) GetToken(ctx context.Context, req *request.Uuid) (*response.Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedTokensMgmtServer) DeleteToken(ctx context.Context, req *request.Uuid) (*response.DeleteTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}

func RegisterTokensMgmtServer(s *grpc.Server, srv TokensMgmtServer) {
	s.RegisterService(&_TokensMgmt_serviceDesc, srv)
}

func _TokensMgmt_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.GetTokensReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.tokens.TokensMgmt/GetTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServer).GetTokens(ctx, req.(*request.GetTokensReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensMgmt_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.CreateToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.tokens.TokensMgmt/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServer).CreateToken(ctx, req.(*request.CreateToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensMgmt_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.UpdateToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.tokens.TokensMgmt/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServer).UpdateToken(ctx, req.(*request.UpdateToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensMgmt_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.tokens.TokensMgmt/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServer).GetToken(ctx, req.(*request.Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokensMgmt_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensMgmtServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chef.automate.api.tokens.TokensMgmt/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensMgmtServer).DeleteToken(ctx, req.(*request.Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokensMgmt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chef.automate.api.tokens.TokensMgmt",
	HandlerType: (*TokensMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokens",
			Handler:    _TokensMgmt_GetTokens_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _TokensMgmt_CreateToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _TokensMgmt_UpdateToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _TokensMgmt_GetToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _TokensMgmt_DeleteToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "components/automate-gateway/api/auth/tokens/tokens.proto",
}
