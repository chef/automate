daemon off;
pid {{ pkg.svc_var_path }}/pid;
worker_processes {{ cfg.ngx.main.worker_processes }};
error_log {{ cfg.ngx.main.error_log }} {{ cfg.log.level }};

events {
  worker_connections {{cfg.ngx.events.worker_connections}};
}

http {
  log_format chef '$remote_user [$time_local]  '
                  '"$request" $status "$request_time" $body_bytes_sent '
                  '"$http_referer" "$http_user_agent" "$upstream_addr" "$upstream_status" "$upstream_response_time" $request_length';

  sendfile {{cfg.ngx.http.sendfile}};
  tcp_nopush {{cfg.ngx.http.tcp_nopush}};
  tcp_nodelay {{cfg.ngx.http.tcp_nodelay}};

  keepalive_timeout {{cfg.ngx.http.keepalive_timeout}};

  gzip {{cfg.ngx.http.gzip}};
  gzip_http_version {{cfg.ngx.http.gzip_http_version}};
  gzip_comp_level {{cfg.ngx.http.gzip_comp_level}};
  gzip_proxied {{cfg.ngx.http.gzip_proxied}};
  gzip_types {{cfg.ngx.http.gzip_types}};

  {{#if cfg.ngx.main.resolvers.nameservers_string}}
  resolver {{cfg.ngx.main.resolvers.nameservers_string}};
  {{/if}}

  upstream external-es {
{{~#if cfg.external.enable }}
    {{~#each cfg.external.parsed_endpoints as |endpoint|}}
    {{~#if endpoint.is_domain}}
    {{~#if ../cfg.ngx.main.resolvers.nameservers_string}}
    # TODO(ssd) 2020-12-04: max_fails not currently supported by jdomain plugin.
    jdomain {{endpoint.address}} port={{endpoint.port}};
    {{~else}}
    # External ES has been specified by a domain name, but no DNS
    # resolvers have been configured. DNS resolution will happen at
    # startup only.
    server {{endpoint.address}}:{{endpoint.port}} max_fails={{../cfg.ngx.main.max_fails}};
    {{/if ~}}
    {{~else}}
    server {{endpoint.address}}:{{endpoint.port}} max_fails={{../cfg.ngx.main.max_fails}};
    {{/if ~}}
    {{ ~else }}
    server 127.0.0.1:65535; # force 502
    {{~/each}}
{{ ~else }}
    {{~#eachAlive bind.automate-elasticsearch.members as |member| ~}}
        {{~#if @last }}
            {{~#if member.cfg.http-host }}
    server {{member.sys.ip}}:{{member.cfg.http-port}};
            {{ ~else}}
    server 127.0.0.1:{{member.cfg.http-port}};
            {{/if ~}}
        {{/if ~}}
    {{/eachAlive }}
{{/if~}}
    keepalive 8;
  }

  fastcgi_temp_path "{{pkg.svc_var_path}}/tmp/fastcgi";
  client_body_temp_path "{{pkg.svc_var_path}}/tmp/client_body";
  uwsgi_temp_path "{{pkg.svc_var_path}}/tmp/uwsgi";
  scgi_temp_path "{{pkg.svc_var_path}}/tmp/scgi";
  proxy_temp_path {{pkg.svc_data_path}}/cache-tmp;

  server {
    listen {{cfg.service.host}}:{{cfg.service.port}};

    server_tokens off;

    access_log off;

    ssl_certificate {{pkg.svc_config_path}}/service.crt;
    ssl_certificate_key {{pkg.svc_config_path}}/service.key;
    ssl_client_certificate {{pkg.svc_config_path}}/root_ca.crt;
    ssl_verify_client on;
    ssl_verify_depth {{ cfg.ngx.http.ssl_verify_depth }};

    ssl_protocols {{cfg.ngx.http.ssl_protocols}};
    ssl_ciphers {{cfg.ngx.http.ssl_ciphers}};
    ssl_session_timeout 5m;
    ssl_prefer_server_ciphers on;

    client_body_buffer_size {{ cfg.ngx.http.client_body_buffer_size }};
    client_max_body_size {{cfg.ngx.http.client_max_body_size}};

    {{~#if cfg.ngx.http.proxy_set_header_host}}
    proxy_set_header Host {{cfg.ngx.http.proxy_set_header_host}};
    {{~else}}
    proxy_set_header Host $http_host;
    {{~/if}}
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_set_header X-Forwarded-Proto https;

    # Remove any `Connection: close` stuff that would interfere with persistent
    # connections between Chef Server LB and upstream
    proxy_set_header Connection "";

    # Use HTTP version that is sensible for persistent connections
    proxy_http_version 1.1;

    proxy_pass_request_headers on;
    proxy_connect_timeout   {{cfg.ngx.http.proxy_connect_timeout}};
    proxy_send_timeout      {{cfg.ngx.http.proxy_send_timeout}};
    proxy_read_timeout      {{cfg.ngx.http.proxy_read_timeout}};
    proxy_ssl_verify        on;
    proxy_ssl_session_reuse on;
    proxy_ssl_verify_depth {{ cfg.ngx.http.ssl_verify_depth }};

    {{~#if cfg.external.enable }}
      {{~#if cfg.external.root_cert_file }}
    proxy_ssl_trusted_certificate {{cfg.external.root_cert_file}};
      {{/if}}
      {{~#if cfg.external.root_cert }}
    proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/external_es_root_cert.crt;
      {{/if}}
      {{~#if cfg.external.basic_auth_credentials }}
    proxy_set_header Authorization "Basic {{cfg.external.basic_auth_credentials}}";
      {{/if}}
      {{~#if cfg.external.server_name }}
    proxy_ssl_name {{ cfg.external.server_name }};
      {{/if}}
    {{~else}}
    proxy_ssl_trusted_certificate {{pkg.svc_config_path}}/root_ca.crt;
    {{/if}}


    add_header Cache-Control "no-cache, no-store, must-revalidate";

    # Listen for local requests to the stub_status module.
    location /automate_es_gateway_status {
      stub_status on;
      access_log off;
      allow 127.0.0.1;
      deny all;
    }

    location / {
      {{~#if cfg.external.enable }}
        {{#if cfg.external.ssl_upstream}}
      proxy_pass https://external-es;
        {{~else}}
      proxy_pass http://external-es;
        {{~/if}}
      {{else}}
      proxy_pass http://external-es;
      {{~/if}}
    }
  }
}
